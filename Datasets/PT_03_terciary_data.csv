;name;category;level;description;input;output;has_images;s_level;submissions;solved;ratio
1001;Extremamente Básico;Iniciante;5;"Leia 2 valores inteiros e armazene-os nas variáveis A e B. Efetue a soma de A e B atribuindo o seu resultado na variável X. Imprima X conforme exemplo apresentado abaixo. Não apresente mensagem alguma além daquilo que está sendo especificado e não esqueça de imprimir o fim de linha após o resultado, caso contrário, você receberá ""Presentation Error"".";A entrada contém 2 valores inteiros.;"Imprima a mensagem ""X = "" (letra X maiúscula) seguido pelo valor da variável  X  e pelo final de linha. Cuide para que tenha um espaço antes e depois do sinal de igualdade, conforme o exemplo abaixo.";False;5 / 10;816938;236060;28.90%
1002;Área do Círculo;Iniciante;5;"A fórmula para calcular a área de uma circunferência é: area = π . raio2. Considerando para este problema que π =  3.14159:
    
	- Efetue o cálculo da área, elevando o valor de raio ao quadrado e multiplicando por π.";A entrada contém um valor de ponto flutuante (dupla precisão), no caso, a variável raio.;"Apresentar a mensagem ""A="" seguido pelo valor da variável area, conforme exemplo abaixo, com 4 casas após o ponto decimal. Utilize variáveis de dupla precisão (double). Como todos os problemas, não esqueça de imprimir o fim de linha após o resultado, caso contrário, você receberá ""Presentation Error"".";False;5 / 10;650389;166254;25.56%
1003;Soma Simples;Iniciante;2;Leia dois valores inteiros, no caso para variáveis A e B. A seguir, calcule a soma entre elas e atribua à variável SOMA. A seguir escrever o valor desta variável.;O arquivo de entrada contém 2 valores inteiros.;"Imprima a variável SOMA com todas as letras maiúsculas, com um espaço em branco antes e depois da igualdade seguido pelo valor correspondente à soma de A e B. Como todos os problemas, não esqueça de imprimir o fim de linha após o resultado, caso contrário, você receberá ""Presentation Error"".";False;2 / 10;313933;165940;52.86%
1004;Produto Simples;Iniciante;1;Leia dois valores inteiros. A seguir, calcule o produto entre estes dois valores e atribua esta operação à variável PROD. A seguir mostre a variável PROD com mensagem correspondente.   ;O arquivo de entrada contém 2 valores inteiros.;Imprima a variável PROD conforme exemplo abaixo, com um espaço em branco antes e depois da igualdade. Não esqueça de imprimir o fim de linha após o produto, caso contrário seu programa apresentará a mensagem: “Presentation Error”.;False;1 / 10;238645;158387;66.37%
1005;Média 1;Iniciante;4;Leia 2 valores de ponto flutuante de dupla precisão A e B, que correspondem a 2 notas de um aluno. A seguir, calcule a média do aluno, sabendo que a nota A tem peso 3.5 e a nota B tem peso 7.5 (A soma dos pesos portanto é 11). Assuma que cada nota pode ir de 0 até 10.0, sempre com uma casa decimal.;O arquivo de entrada contém 2 valores com uma casa decimal cada um.;"Calcule e imprima a variável MEDIA conforme exemplo abaixo, com 5 dígitos após o ponto decimal e com um espaço em branco antes e depois da igualdade. Utilize variáveis de dupla precisão (double) e como todos os problemas, não esqueça de imprimir o fim de linha após o resultado, caso contrário, você receberá ""Presentation Error"".";False;4 / 10;342625;136210;39.75%
1006;Média 2;Iniciante;2;Leia 3 valores, no caso, variáveis A, B e C, que são as três notas de um aluno. A seguir, calcule a média do aluno, sabendo que a nota A tem peso 2, a nota B tem peso 3 e a nota C tem peso 5. Considere que cada nota pode ir de 0 até 10.0, sempre com uma casa decimal.;O arquivo de entrada contém 3 valores com uma casa decimal, de dupla precisão (double).;"Imprima a variável MEDIA conforme exemplo abaixo, com 1 dígito após o ponto decimal e com um espaço em branco antes e depois da igualdade. Assim como todos os problemas, não esqueça de imprimir o fim de linha após o resultado, caso contrário, você receberá ""Presentation Error"".";False;2 / 10;224815;128360;57.10%
1007;Diferença;Iniciante;2;Leia quatro valores inteiros A, B, C e D. A seguir, calcule e mostre a diferença do produto de A e B pelo produto de C e D segundo a fórmula: DIFERENCA = (A * B - C * D).;O arquivo de entrada contém 4 valores inteiros.;Imprima a mensagem DIFERENCA com todas as letras maiúsculas, conforme exemplo abaixo, com um espaço em branco antes e depois da igualdade.;False;2 / 10;228747;135515;59.24%
1008;Salário;Iniciante;4;Escreva um programa que leia o número de um funcionário, seu número de horas trabalhadas, o valor que recebe por hora e calcula o salário desse funcionário. A seguir, mostre o número e o salário do funcionário, com duas casas decimais.;O arquivo de entrada contém 2 números inteiros e 1 número com duas casas decimais, representando o número, quantidade de horas trabalhadas e o valor que o funcionário recebe por hora trabalhada, respectivamente.;Imprima o número e o salário do funcionário, conforme exemplo fornecido, com um espaço em branco antes e depois da igualdade. No caso do salário, também deve haver um espaço em branco após o $.;False;4 / 10;285082;125968;44.19%
1009;Salário com Bônus;Iniciante;3;Faça um programa que leia o nome de um vendedor, o seu salário fixo e o total de vendas efetuadas por ele no mês (em dinheiro). Sabendo que este vendedor ganha 15% de comissão sobre suas vendas efetuadas, informar o total a receber no final do mês, com duas casas decimais.;O arquivo de entrada contém um texto (primeiro nome do vendedor) e 2 valores de dupla precisão (double) com duas casas decimais, representando o salário fixo do vendedor e montante total das vendas efetuadas por este vendedor, respectivamente.;Imprima o total que o funcionário deverá receber, conforme exemplo fornecido.;False;3 / 10;254206;112146;44.12%
1010;Cálculo Simples;Iniciante;3;Neste problema, deve-se ler o código de uma peça 1, o número de peças 1, o valor unitário de cada peça 1, o código de uma peça 2, o número de peças 2 e o valor unitário de cada peça 2. Após, calcule e mostre o valor a ser pago.;O arquivo de entrada contém duas linhas de dados. Em cada linha haverá 3 valores, respectivamente dois inteiros e um valor com 2 casas decimais.;"A saída deverá ser uma mensagem conforme o exemplo fornecido abaixo, lembrando de deixar um espaço após os dois pontos e um espaço após o ""R$"". O valor deverá ser apresentado com 2 casas após o ponto.";False;3 / 10;217070;106371;49.00%
1011;Esfera;Iniciante;3;"Faça um programa que calcule e mostre o volume de uma esfera sendo fornecido o valor de seu raio (R). A fórmula para calcular o volume é: (4/3) * pi * R3. Considere (atribua) para pi o valor 3.14159. 

Dica: Ao utilizar a fórmula, procure usar (4/3.0) ou (4.0/3), pois algumas linguagens (dentre elas o C++), assumem que o resultado da divisão entre dois inteiros é outro inteiro.";O arquivo de entrada contém um valor de ponto flutuante (dupla precisão), correspondente ao raio da esfera.;"A saída deverá ser uma mensagem ""VOLUME"" conforme o exemplo fornecido abaixo, com um espaço antes e um espaço depois da igualdade. O valor deverá ser apresentado com 3 casas após o ponto.";False;3 / 10;215140;99286;46.15%
1012;Área;Iniciante;3;"Escreva um programa que leia três valores com ponto flutuante de dupla precisão: A, B e C. Em seguida, calcule e mostre: 
                    a) a área do triângulo retângulo que tem A por base e C por altura. 
                    b) a área do círculo de raio C. (pi = 3.14159) 
                    c) a área do trapézio que tem A e B por bases e C por altura. 
                    d) a área do quadrado que tem lado B. 
                    e) a área do retângulo que tem lados A e B.";O arquivo de entrada contém três valores com um dígito após o ponto decimal.;O arquivo de saída deverá conter 5 linhas de dados. Cada linha corresponde a uma das áreas descritas acima, sempre com mensagem correspondente e um espaço entre os dois pontos e o valor. O valor calculado deve ser apresentado com 3 dígitos após o ponto decimal.;False;3 / 10;206837;94987;45.92%
1013;O Maior;Iniciante;3;"Faça um programa que leia três valores e apresente o maior dos três valores lidos seguido da mensagem “eh o maior”. 
                    Utilize a fórmula:";O arquivo de entrada contém três valores inteiros.;"Imprima o maior dos três valores seguido por um espaço e a mensagem ""eh o maior"".";True;3 / 10;179708;91237;50.77%
1014;Consumo;Iniciante;3;"Calcule o consumo médio de um automóvel sendo fornecidos a distância 
                    total percorrida (em Km) e o total de combustível gasto (em litros).";O arquivo de entrada contém dois valores: um valor inteiro X representando a distância total percorrida (em Km), e um valor real Y representando o total de combustível gasto, com um dígito após o ponto decimal.;"Apresente o valor que representa o consumo médio do automóvel com 3 casas após a vírgula, seguido da mensagem ""km/l"".";False;3 / 10;170751;94078;55.10%
1015;Distância Entre Dois Pontos;Iniciante;2;"Leia os quatro valores correspondentes aos eixos x e y de dois pontos quaisquer no plano, p1(x1,y1) e p2(x2,y2) e calcule a distância entre eles, mostrando 4 casas decimais após a vírgula, segundo a fórmula:
                
                    Distancia =";O arquivo de entrada contém duas linhas de dados. A primeira linha contém dois valores de ponto flutuante: x1 y1 e a segunda linha contém dois valores de ponto flutuante x2 y2.;Calcule e imprima o valor da distância segundo a fórmula fornecida, com 4 casas após o ponto decimal.;True;2 / 10;160722;92393;57.49%
1016;Distância;Iniciante;1;"Dois carros (X e Y) partem em uma mesma direção. O carro X sai com velocidade constante de 60 Km/h e o carro Y sai com velocidade constante de 90 Km/h.

				 Em uma hora (60 minutos) o carro Y consegue se distanciar 30 quilômetros do carro X, ou seja, consegue se afastar um quilômetro a cada 2 minutos. 

				
					Leia a distância (em Km) e calcule quanto tempo leva (em minutos) para o carro Y tomar essa distância do outro carro.";O arquivo de entrada contém um número inteiro.;"Imprima o tempo necessário seguido da mensagem ""minutos"".";False;1 / 10;117932;83358;70.68%
1017;Gasto de Combustível;Iniciante;1;Joaozinho quer calcular e mostrar a quantidade de litros de combustível gastos em uma viagem, ao utilizar um automóvel que faz 12 KM/L. Para isso, ele gostaria que você o auxiliasse através de um simples programa. Para efetuar o cálculo, deve-se fornecer o tempo gasto na viagem (em horas) e a velocidade média durante a mesma (em km/h). Assim, pode-se obter distância percorrida e, em seguida, calcular quantos litros seriam necessários. Mostre o valor com 3 casas decimais após o ponto.;O arquivo de entrada contém dois inteiros. O primeiro é o tempo gasto na viagem (em horas) e o segundo é a velocidade média durante a mesma (em km/h).;Imprima a quantidade de litros necessária para realizar a viagem, com três dígitos após o ponto decimal;False;1 / 10;130949;85481;65.28%
1018;Cédulas;Iniciante;5;Leia um valor inteiro. A seguir, calcule o menor número de notas possíveis (cédulas) no qual o valor pode ser decomposto. As notas consideradas são de 100, 50, 20, 10, 5, 2 e 1. A seguir mostre o valor lido e a relação de notas necessárias.;O arquivo de entrada contém um valor inteiro N (0 < N < 1000000).;Imprima o valor lido e, em seguida, a quantidade mínima de notas de cada tipo necessárias, conforme o exemplo fornecido. Não esqueça de imprimir o fim de linha após cada linha, caso contrário seu programa apresentará a mensagem: “Presentation Error”.;False;5 / 10;215794;78888;36.56%
1019;Conversão de Tempo;Iniciante;1;Leia um valor inteiro, que é o tempo de duração em segundos de um determinado evento em uma fábrica, e informe-o expresso no formato horas:minutos:segundos.;O arquivo de entrada contém um valor inteiro N.;Imprima o tempo lido no arquivo de entrada (segundos), convertido para horas:minutos:segundos, conforme exemplo fornecido.;False;1 / 10;136247;81515;59.83%
1020;Idade em Dias;Iniciante;2;"Leia um valor inteiro correspondente à idade de uma pessoa em dias e informe-a em anos, meses e dias
                
                    Obs.: apenas para facilitar o cálculo, considere todo ano com 365 dias e todo mês com 30 dias. Nos casos de teste nunca haverá uma situação que permite 12 meses e alguns dias, como 360, 363 ou 364. Este é apenas um exercício com objetivo de testar raciocínio matemático simples.";O arquivo de entrada contém um valor inteiro.;Imprima a saída conforme exemplo fornecido.;False;2 / 10;151827;81508;53.68%
1021;Notas e Moedas;Iniciante;7;Leia um valor de ponto flutuante com duas casas decimais. Este valor representa um valor monetário. A seguir, calcule o menor número de notas e moedas possíveis no qual o valor pode ser decomposto. As notas consideradas são de 100, 50, 20, 10, 5, 2. As moedas possíveis são de 1, 0.50, 0.25, 0.10, 0.05 e 0.01. A seguir mostre a relação de notas necessárias.;O arquivo de entrada contém um valor de ponto flutuante N (0 ≤ N ≤ 1000000.00).;"Imprima a quantidade mínima de notas e moedas necessárias para trocar o valor inicial, conforme exemplo fornecido. 
	Obs: Utilize ponto (.) para separar a parte decimal.";False;7 / 10;195309;49668;25.43%
1022;TDA Racional;Estruturas e Bibliotecas;4;"A tarefa aqui neste problema é ler uma expressão matemática na forma de dois números Racionais (numerador / denominador) e apresentar o resultado da operação. Cada operando ou operador é separado por um espaço em branco. A sequência de cada linha que contém a expressão a ser lida é: número, caractere, número, caractere, número, caractere, número. A resposta deverá ser apresentada e posteriormente simplificada. Deverá então ser apresentado o sinal de igualdade e em seguida a resposta simplificada. No caso de não ser possível uma simplificação, deve ser apresentada a mesma resposta após o sinal de igualdade.
                
                    Considerando N1 e D1 como numerador e denominador da primeira fração, segue a orientação de como deverá ser realizada cada uma das operações: 
                    Soma: (N1*D2 + N2*D1) / (D1*D2)
                    Subtração: (N1*D2 - N2*D1) / (D1*D2)
                    Multiplicação: (N1*N2) / (D1*D2)
                    Divisão: (N1/D1) / (N2/D2), ou seja (N1*D2)/(N2*D1)";A entrada contem vários casos de teste. A primeira linha de cada caso de teste contem um inteiro N (1 ≤ N ≤ 1*104), indicando a quantidade de casos de teste que devem ser lidos logo a seguir. Cada caso de teste contém um valor racional X (1 ≤ X ≤ 1000), uma operação (-, +, * ou /) e outro valor racional Y (1 ≤ Y ≤ 1000).;A saída consiste em um valor racional, seguido de um sinal de igualdade e outro valor racional, que é a simplificação do primeiro valor. No caso do primeiro valor não poder ser simplificado, o mesmo deve ser repetido após o sinal de igualdade.;False;4 / 10;15395;6280;40.79%
1024;Criptografia;Strings;6;"Solicitaram para que você construisse um programa simples de criptografia. Este programa deve possibilitar enviar 
	mensagens codificadas sem que alguém consiga lê-las. O processo é muito simples. São feitas três passadas em 
	todo o texto.  
	Na primeira passada, somente caracteres que sejam letras minúsculas e maiúsculas devem ser deslocadas 3 posições para a direita, segundo a tabela ASCII: letra 'a' deve virar letra 'd', letra 'y' deve virar caractere '|' e assim sucessivamente. Na segunda passada, a linha deverá ser invertida. 
	Na terceira e última passada, todo e qualquer caractere a partir da metade em diante (truncada) devem ser deslocados uma posição para a esquerda na tabela ASCII. Neste caso, 'b' vira 'a' e 'a' vira '`'. 
	Por exemplo, se a entrada for “Texto #3”, o primeiro processamento sobre esta entrada deverá produzir “Wh{wr #3”.  
	O resultado do segundo processamento inverte os caracteres e produz “3# rw{hW”. Por último, com o deslocamento dos caracteres da metade em diante, 
	o resultado final deve ser “3# rvzgV”.";"A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤
	1*104), indicando a quantidade de linhas que o problema deve tratar. As N linhas contém cada 
	uma delas M (1 ≤ M ≤ 1*103) caracteres.";Para cada entrada, deve-se apresentar a mensagem criptografada.;False;6 / 10;37995;13402;35.27%
1025;Onde está o Mármore?;Estruturas e Bibliotecas;5;"Raju e Meena adoram jogar um jogo diferente com pequenas peças de mármores, chamados Marbles. 
	Eles têm um monte destas peças com números escritos neles. No início, Raju colocaria estes pequenos 
	mármores um após outro em ordem ascendente de números escritos neles. Então Meena gostaria de pedir a Raju 
	para encontrar o primeiro mármore com um certo número. Ele deveria contar 1...2...3. Raju ganha um 
	ponto por cada resposta correta e Meena ganha um ponto se Raju falha. Depois de um número fixo de tentativas, 
	o jogo termina e o jogador com o máximo de pontos vence. Hoje é sua chance de jogar com Raju. 
	Sendo um/a cara esperto/a, você tem em seu favor o computador. Mas não subestime Meena, ela 
	escreveu um programa para monitorar quanto tempo você levará para dar todas as respostas. 
	Portanto, agora escreva o programa, que ajudará você em seu desafio com Raju.";"A entrada contém vários casos de teste, mas o total de casos é menor do que 65. 
					Cada caso de teste inicia com dois inteiros: N  que é o número de mármores e 
					Q  que é o número de consultas que Meena deseja fazer. As próximas 
					N  linhas conterão os números escritos em cada um dos N mármores. 
					Os números destes mármores não tem qualquer ordem em particular. 
					As seguintes Q linhas irão conter Q consultas. Tenha certeza, 
					nenhum dos números da entrada é maior do que 10000 e nenhum deles é negativo.
	A entrada é terminada por um caso de teste onde N = 0 e Q = 0.";"Para cada caso de teste de saída deve haver um número serial do caso de teste. Para cada consulta, escreva uma linha de saída. O formato desta linha dependerá se o número consultado estiver ou não escrito em um dos mármores.
					Os dois diferentes formatos são descritos abaixo:
	'x found at y', se o primeiro marble x foi encontrado na posição y. Posições são numeradas de 1, 2,...  a N.
	'x not found', se o marble com o número x não estiver presente.";False;5 / 10;21963;6603;30.06%
1026;Carrega ou não Carrega?;Ad-Hoc;5;"6+9=15 parece ok. Mas como pode estar certo 4+6=2?
	
	Veja só. Mofiz trabalhou duro durante seu curso de Eletrônica Digital, mas quando lhe foi solicitado que implementasse um somador de 32 bits como exame no laboratório, ele acabou fazendo algum erro na parte de projeto. Depois de vasculhar seu projeto por uma hora e meia, ele encontrou seu erro. Ele estava fazendo soma de bits, mas seu carregador de bit (carry) sempre apresentava como saída o valor zero. Portanto,
	4  = 00000000 00000000 00000000 00000100
	+6 = 00000000 00000000 00000000 00000110
	----------------------------------------
	2  = 00000000 00000000 00000000 00000010

	
	Claro que já é uma boa coisa ele finalmente ter encontrado o seu erro, mas isso foi muito tarde. Considerando seu esforço durante o curso, o instrutor deu a ele mais uma chance: Mofiz teria que escrever um programa eficiente que pegaria 2 valores decimais de 32 bits sem sinal como entrada e deveria produzir um número de 32 bits sem sinal como saída, ou seja, somando do mesmo modo como o circuito faz.";Em cada linha de entrada haverá um par de inteiros separado por um único espaço. A entrada termina com EOF.;Para cada linha de entrada, o programa deverá fornecer uma linha de saída, que é o valor após somar dois números no modo “Mofiz”.;True;5 / 10;32608;10828;33.21%
1027;Onda Crítica;Paradigmas;8;"A tarefa é simples. Através de alguns pontos críticos em 2D, você deve desenhar uma onda como uma curva. Seu objetivo é incluir tantos pontos quantos forem possível.
                
                    
                        Haverá uma linha imaginária y = a, a qual chamaremos de eixo principal para a curva.
                    
                    
                        Todos os pontos na curva deverão ter diferentes coordenadas x. Suas coordenadas y devem ser na forma a-1 ou a+1.
                    
                
                
                    Dois pontos consecutivos na curva devem ter diferença de 2 na coordenada y.";Haverá no máximo, 222 casos de testes. Cada caso inicia com um inteiro N, que é o número de pontos no caso de teste. Nas próximas N linhas, haverá N pares de inteiros dando as coordenadas x e y de cada ponto. Não haverá mais do que 1000 pontos em cada caso de teste. Todas coordenadas são inteiros – eles devem ficar dentro de um inteiro de 2 bytes com sinal. Os dados devem ser lidos da entrada padrão.;Para cada caso de teste, imprima um número – o número máximo de pontos críticos que podem ser incluídos em uma curva desenhada a partir dos pontos dados.;True;8 / 10;2154;511;23.72%
1028;Figurinhas;Matemática;3;Ricardo e Vicente são aficionados por figurinhas. Nas horas vagas, eles arrumam um jeito de jogar um “bafo” ou algum outro jogo que envolva tais figurinhas. Ambos também têm o hábito de trocarem as figuras repetidas com seus amigos e certo dia pensaram em uma brincadeira diferente. Chamaram todos os amigos e propuseram o seguinte: com as figurinhas em mãos, cada um tentava fazer uma troca com o amigo que estava mais perto seguindo a seguinte regra: cada um contava quantas figurinhas tinha. Em seguida, eles tinham que dividir as figurinhas de cada um em pilhas do mesmo tamanho, no maior tamanho que fosse possível para ambos. Então, cada um escolhia uma das pilhas de figurinhas do amigo para receber. Por exemplo, se Ricardo e Vicente fossem trocar as figurinhas e tivessem respectivamente 8 e 12 figuras, ambos dividiam todas as suas figuras em pilhas de 4 figuras (Ricardo teria 2 pilhas e Vicente teria 3 pilhas) e ambos escolhiam uma pilha do amigo para receber.;A primeira linha da entrada contém um único inteiro N (1 ≤ N ≤ 3000), indicando o número de casos de teste. Cada caso de teste contém 2 inteiros F1 (1 ≤ F1 ≤ 1000) e F2 (1 ≤ F2 ≤ 1000) indicando, respectivamente, a quantidade de figurinhas que Ricardo e Vicente têm para trocar.;Para cada caso de teste de entrada haverá um valor na saída, representando o tamanho máximo da pilha de figurinhas que poderia ser trocada entre dois jogadores.;True;3 / 10;24375;10142;41.61%
1029;Fibonacci, Quantas Chamadas?;Paradigmas;3;"Quase todo estudante de Ciência da Computação recebe em algum momento no início de seu curso de graduação algum problema envolvendo a sequência de Fibonacci. Tal sequência tem como os dois primeiros valores 0 (zero) e 1 (um) e cada próximo valor será sempre a soma dos dois valores imediatamente anteriores. Por definição, podemos apresentar a seguinte fórmula para encontrar qualquer número da sequência de Fibonacci:
	
	fib(0) = 0
	fib(1) = 1
	fib(n) = fib(n-1) + fib(n-2);
	Uma das formas de encontrar o número de Fibonacci é através de chamadas recursivas. Isto é ilustrado a seguir, apresentando a árvore de derivação ao calcularmos o valor fib(4), ou seja o 5º valor desta sequência:
	  
	
	
	Desta forma,

	
		fib(4) = 1+0+1+1+0 = 3
	
		Foram feitas 8 calls, ou seja, 8 chamadas recursivas.";A primeira linha da entrada contém um único inteiro N, indicando o número de casos de teste. Cada caso de teste contém um inteiro X (1 ≤ X ≤ 39) .;Para cada caso de teste de entrada deverá ser apresentada uma linha de saída, no seguinte formato: fib(n) = num_calls calls = result, aonde num_calls é o número de chamadas recursivas, tendo sempre um espaço antes e depois do sinal de igualdade, conforme o exemplo abaixo.;True;3 / 10;18508;9157;49.48%
1030;A Lenda de Flavious Josephus;Ad-Hoc;4;O problema de Josephus é assim conhecido por causa da lenda de Flavius Josephus, um historiador judeu que viveu no século 1. Segundo o relato de Josephus do cerco de Yodfat, ele e seus companheiros (40 soldados) foram presos em uma caverna, cuja saída foi bloqueada pelos romanos. Eles preferiram suicidar-se a serem capturados, e decidiram que iriam formar um círculo e começar a matar-se pulando de três em três. Josephus afirma que, por sorte ou talvez pela mão de Deus, ele permaneceu por último e preferiu entregar-se aos romanos a suicidar-se.;"Haverá NC (1 ≤ NC ≤ 30 ) casos de teste. Em cada caso de teste de entrada haverá um par de números inteiros positivos n (1 ≤ n ≤ 10000 ) e k (1 ≤ k ≤ 1000). O  número n representa a quantidade de pessoas no círculo, numeradas de 1 até n. O número k representa o tamanho do salto de um homem até o próximo homem que será morto.
                    Segue um exemplo com 5 homens e um salto = 2.
                    
                
                Neste exemplo o elemento que restará após as eliminações é 3.";Para cada caso de teste de entrada será apresentada uma linha de saída no seguinte formato: Case n: m tendo sempre um espaço antes do n e do m.;True;4 / 10;14011;6305;45.00%
1031;Crise de Energia;Ad-Hoc;4;"Durante uma crise de energia na Nova Zelândia no inverno passado (causada por uma escassez de chuva e, consequentemente, por causa dos níveis baixos nas barragens hidrográficas), um esquema de contingência foi desenvolvido para desligar a energia para as áreas do país de forma sistemática, de uma forma totalmente justa. O país foi dividido em N regiões (Auckland seria a região número 1 e Wellington a número 13). Um número, m, seria escolhido randomicamente e a energia deveria ser desligada primeiro na região 1 (claramente o ponto de início mais justo) e então em cada m região após esta, indo de uma a outra região e ignorando as regiões já desligadas. Por exemplo, se N = 17 e m = 5, a energia deverá ser desligada em todas as regiões seguindo a seguinte ordem: 1,6,11,16,5,12,2,9,17,10,4,15,14,3,8,13,7.
                    O problema é que, claramente seria mais justo desligar a região de Wellington por último (Isso porque é onde a sede da empresa se encontra). Portanto, para um dado N (regiões), o número aleatório m (salto) precisa ser cuidadosamente escolhido de forma que a região 13 seja a última região a ser escolhida.
                    Escreva um programa que leia o número de regiões e determine o menor número m que assegure que Wellington (região 13) possa continuar funcionando enquanto o resto do país esteja desligado.";A entrada consistirá de uma série de linhas, cada uma contendo o número de regiões N (13 ≤ N ≤ 100 ). O fim da entrada é indicado por uma linha consistindo de um valor zero (0).;A saída consistirá de uma série de linhas, uma linha para cada linha de entrada. Cada linha consistirá de um m de acordo com o esquema acima apresentado.;True;4 / 10;4862;2514;51.71%
1032;O Primo de Josephus;Ad-Hoc;5;"O problema de Josephus é notoriamente conhecido. Para aqueles que não estão familiarizados com o problema, entre n pessoas numeradas 1,2 ... n, de pé em círculo cada um deve ser executado e só a vida do último que sobrar será preservada. Josephus foi esperto o suficiente para escolher a posição da última pessoa restante, poupando a sua vida.
	Apesar de muitos bons programadores poderem se salvar desde que Josephus espalhou essa informação (o lugar onde ficar para não ser executado), o primo de Josephus introduziu uma nova variante do jogo maligno. Este personagem insano é conhecido por suas idéias bárbaras e desejos para limpar o mundo de programadores. Tivemos de infiltrar alguns agentes os da ACM, a fim de conhecer o processo neste novo jogo mortal.
	A fim de salvar-se de esta prática mal, você deve desenvolver uma ferramenta capaz de prever qual será a pessoa salva.
	O processo destrutivo
	As pessoas são eliminados em uma ordem muito peculiar: m é uma variável dinâmica, que cada vez tem um valor diferente correspondente a sucessão dos números primos de (2,3,5,7 ...). Então, para matar a pessoa i, o primo de Josephus conta até o próximo m primo.";Consiste em linhas separadas, contendo n [1 .. 3501], e termina com um 0.;A saída consistirá em linhas separadas relativos à posição da pessoa que a vida será salva.;False;5 / 10;4637;1765;38.06%
1033;Quantas Chamadas Recursivas?;Paradigmas;6;"Os números de fibonacci são definidos pela seguinte recorrência:

	
		fib(0) = 0
	
		fib(1) = 1
	
		fib(n) = fib(n-1)+fib(n-2)


	Mas não estamos interessados em números de Fibonacci aqui. Gostaríamos de saber quantas chamadas recursivas seriam necessárias para um determinado número de Fibonacci n, seguindo a recorrência normal. Uma vez que os números serão bem grandes, não será uma tarefa muito simples para você. Mas então vamos torná-la um pouco mais fácil: queremos que você apresente somente o ultimo dígito do numero de chamadas, onde este número deve estar na base b.";A entrada consiste em vários casos de teste. Para cada caso de teste haverá dois números inteiros n (0 ≤ n < (263 - 1)) e b (1 < b ≤ 10000). A entrada será terminada por um caso de teste onde n=0 e b=0, que não deve ser processada.;Para cada caso de teste deve ser impresso o número do caso de teste na saída. Em seguida, imprima n, b e o ultimo dígito (na base b) do número de chamadas. Deverá haver um único espaço entre estes dois números. Note que o ultimo dígito deverá ser apresentado no formato de um número decimal.;False;6 / 10;2071;655;31.63%
1034;Festival de Estátuas de Gelo;Paradigmas;7;"Todos os anos, artistas de todo o mundo se reúnem na cidade, onde fazem esculturas de gelo gigantescas. A cidade vira uma galeria de arte ao céu aberto, uma vez que as esculturas ficam expostas na rua por semanas, sem derreter. Afinal, a temperatura média no inverno de Harbin (época em que ocorrerá a final mundial do ICPC) é de -20 graus.
                    
                    O primeiro passo para fazer a escultura é montar um grande bloco de gelo da dimensão pedida pelo artista. Os blocos são recortados das geleiras de Harbin em blocos de altura e profundidade padrão e vários comprimentos diferentes. O artista pode determinar qual o comprimento que ele deseja que tenha o seu bloco de gelo para que a escultura possa começar a ser esculpida.
                    
                    Os comprimentos disponíveis dos blocos são {a1; a2; ...;  aN} e o comprimento que o artista deseja é M. O bloco de comprimento 1 é muito usado, por este motivo ele sempre aparece na lista de blocos disponíveis. Sua tarefa é determinar o número mínimo de blocos tal que a soma de seus comprimentos seja M.";"A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância contém dois inteiros N (1 ≤ N ≤ 25) e M (1 ≤ M ≤ 1000000) representando o número de tipos de blocos e o comprimento desejado pelo artista, respectivamente. A próxima linha contém os inteiros a1; a2; ...; aN , onde (1 ≤ ai ≤ 100) para todo i (1,2,...N) separados por espaço.";Para cada instância, imprima o número mínimo de blocos necessários para obter um bloco de comprimento M.;True;7 / 10;8305;2782;33.50%
1035;Teste de Seleção 1;Iniciante;3;"Leia 4 valores inteiros A, B, C e D. A seguir, se B for maior do que C e se D for maior do que A, e a soma de C com D for maior que a soma de A e B e se C e D, ambos, forem positivos e se a variável A for par escrever a mensagem ""Valores aceitos"", senão escrever ""Valores nao aceitos"".";Quatro números inteiros A, B, C e D.;Mostre a respectiva mensagem após a validação dos valores.;False;3 / 10;171682;78980;46.00%
1036;Fórmula de Bhaskara;Iniciante;4;Leia 3 valores de ponto flutuante e efetue o cálculo das raízes da equação de Bhaskara. Se não for possível calcular as raízes, mostre a mensagem correspondente “Impossivel calcular”, caso haja uma divisão por 0 ou raiz de numero negativo.;Leia três valores de ponto flutuante (double) A, B e C.;"Se não houver possibilidade de calcular as raízes, apresente a mensagem ""Impossivel calcular"". 
	Caso contrário, imprima o resultado das raízes com 5 dígitos após o ponto, 
	com uma mensagem correspondente conforme exemplo abaixo. Imprima sempre o final de linha após cada mensagem.";False;4 / 10;192461;67487;35.07%
1037;Intervalo;Iniciante;5;"Você deve fazer um programa que leia um valor qualquer e apresente uma mensagem dizendo em qual dos seguintes intervalos ([0,25], (25,50], (50,75], (75,100]) este valor se encontra. Obviamente se o valor não estiver em nenhum destes intervalos, deverá ser impressa a mensagem “Fora de intervalo”.
                    
                    O símbolo ( representa ""maior que"". Por exemplo:
                    [0,25]  indica valores entre 0 e 25.0000, inclusive eles.
                    (25,50] indica valores maiores que 25 Ex: 25.00001 até o valor 50.0000000";O arquivo de entrada contém um número com ponto flutuante qualquer.;A saída deve ser uma mensagem conforme exemplo abaixo.;False;5 / 10;187779;67128;35.75%
1038;Lanche;Iniciante;2;Com base na tabela abaixo, escreva um programa que leia o código de um item e a quantidade deste item. A seguir, calcule e mostre o valor da conta a pagar.;O arquivo de entrada contém dois valores inteiros correspondentes ao código e à quantidade de um item conforme tabela acima.;"O arquivo de saída deve conter a mensagem ""Total: R$ "" seguido pelo valor a ser pago, com 2 casas após o ponto decimal.";True;2 / 10;144042;76432;53.06%
1039;Flores de Fogo;Geometria Computacional;5;"Nos dias atuais uma flor de fogo não é algo considerado estranho para muitos jovens.  Isso porque um famoso jogo de videogame popularizou esse tipo de flor. Nesse jogo o protagonista ganhava superpoderes ao tocar em uma flor de fogo, passando a atirar pequenas bolas de fogo para derrotar seus inimigos.
    
	No entanto, já se falava sobre flores de fogo há muito tempo atrás. Na mitologia polonesa, flores de fogo são flores místicas de grande poder guardadas por espíritos malignos. Ela possuía esse nome porque brilhava tanto que era impossível olhá-la diretamente. Quem possuísse uma flor dessas ganharia a habilidade de ler a mente de outras pessoas, encontrar tesouros escondidos e repelir todos os males.
    
	Para obter uma flor de fogo, a pessoa deveria procurá-la em uma floresta antes da meia-noite na véspera do Noc Kupały. Exatamente à meia-noite ela floresceria. Para colhê-la seria preciso desenhar um círculo em volta dela. Parece uma tarefa fácil, no entanto, os espíritos malignos que guardam a flor tentariam de tudo para distrair qualquer um tentando colher a flor. Se a pessoa falhasse ao tentar desenhar um círculo em volta da flor, teria sua vida sacrificada.
    
	Dados dois círculos, um desenhado por um ambicioso caçador de flores de fogo e outro representando a área da flor, sua tarefa é determinar se o caçador morre ou fica rico com sua conquista.";"A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância consiste em uma linha com seis inteiros, R1 (1 ≤ R1) , X1(|X1|), Y1(|Y1|), R2 (R2 ≤ 1000), X2(|X2|), Y2 (Y2 ≤ 1000). O círculo desenhado pelo caçador possui raio R1 e centro (X1; Y1). O círculo representando a área da flor possui raio R2 e centro (X2; Y2).";Para cada instância imprima uma única linha contendo MORTO, se o caçador morre, ou RICO se o caçador consegue colher a flor.;False;5 / 10;12437;4758;38.26%
1040;Média 3;Iniciante;6;"Leia quatro números (N1, N2, N3, N4), cada um deles com uma casa decimal, correspondente às quatro notas de um aluno. Calcule a média com pesos 2, 3, 4 e 1, respectivamente, para cada uma destas notas e mostre esta média acompanhada pela mensagem ""Media: "". Se esta média for maior ou igual a 7.0, imprima a mensagem ""Aluno aprovado."". Se a média calculada for inferior a 5.0, imprima a mensagem ""Aluno reprovado."". Se a média calculada for um valor entre 5.0 e 6.9, inclusive estas, o programa deve imprimir a mensagem ""Aluno em exame."".
					
						No caso do aluno estar em exame, leia um valor correspondente à nota do exame obtida pelo aluno. 
						Imprima então a mensagem ""Nota do exame: "" acompanhada pela nota digitada. 
						Recalcule a média (some a pontuação do exame com a média anteriormente calculada e divida por 2). e imprima a mensagem 
						""Aluno aprovado."" (caso a média final seja 5.0 ou mais ) ou ""Aluno reprovado."", 
						(caso a média tenha ficado 4.9 ou menos). Para estes dois casos (aprovado ou reprovado após ter pego exame) apresente na última linha uma mensagem ""Media final: "" seguido da média final para esse aluno.";A entrada contém quatro números de ponto flutuante correspendentes as notas dos alunos.;"Todas as respostas devem ser apresentadas com uma casa decimal. As mensagens devem ser impressas conforme a descrição do problema. Não esqueça de imprimir 
	o enter após o final de cada linha, caso contrário obterá ""Presentation Error"".";False;6 / 10;191035;51769;27.10%
1041;Coordenadas de um Ponto;Iniciante;4;"Leia 2 valores com uma casa decimal (x e y), que devem representar as coordenadas de um ponto em um plano. A seguir, determine qual o quadrante ao qual pertence o ponto, ou se está sobre um dos eixos cartesianos ou na origem (x = y = 0).

	

	Se o ponto estiver na origem, escreva a mensagem “Origem”.

	Se o ponto estiver sobre um dos eixos escreva “Eixo X” ou “Eixo Y”, conforme for a situação.";A entrada contem as coordenadas de um ponto.;A saída deve apresentar o quadrante em que o ponto se encontra.;True;4 / 10;177282;61609;34.75%
1042;Sort Simples;Iniciante;3;Leia 3 valores inteiros e ordene-os em ordem crescente. No final, mostre os valores em ordem crescente, uma linha em branco e em seguida, os valores na sequência como foram lidos.;A entrada contem três números inteiros.;Imprima a saída conforme foi especificado.;False;3 / 10;130946;58759;44.87%
1043;Triângulo;Iniciante;3;"Leia 3 valores reais (A, B e C) e verifique se eles formam ou não um triângulo. Em caso positivo, calcule o perímetro do triângulo e apresente a mensagem:
                
                    Perimetro = XX.X
                
                    Em caso negativo, calcule a área do trapézio que tem A e B como base e C como altura, mostrando a mensagem
                
                    Area = XX.X";A entrada contém três valores reais.;O resultado deve ser apresentado com uma casa decimal.;False;3 / 10;99903;51125;51.17%
1044;Múltiplos;Iniciante;4;"Leia 2 valores inteiros (A e B). Após, o programa deve mostrar uma mensagem ""Sao Multiplos"" ou ""Nao sao Multiplos"", indicando se os valores lidos são múltiplos entre si.";A entrada contém valores inteiros.;A saída deve conter uma das mensagens conforme descrito acima.;False;4 / 10;137008;61295;44.74%
1045;Tipos de Triângulos;Iniciante;6;"Leia 3 valores de ponto flutuante A, B e C  e ordene-os em ordem decrescente, de modo que o lado A representa o maior dos 3 lados. A seguir, determine o tipo de triângulo que estes três lados formam, com base nos seguintes casos, sempre escrevendo uma mensagem adequada:
						
					
						
							se A ≥ B+C, apresente a mensagem: NAO FORMA TRIANGULO
						
							se A2 = B2 + C2, apresente a mensagem: TRIANGULO RETANGULO
						
							se A2 > B2 + C2, apresente a mensagem: TRIANGULO OBTUSANGULO
						
							se A2 < B2 + C2, apresente a mensagem: TRIANGULO ACUTANGULO
						
							se os três lados forem iguais, apresente a mensagem: TRIANGULO EQUILATERO
						
							se apenas dois dos lados forem iguais, apresente a mensagem: TRIANGULO ISOSCELES";A entrada contem três valores de ponto flutuante de dupla precisão A (0 < A) , B (0 < B) e C (0 < C).;Imprima todas as classificações do triângulo especificado na entrada.;False;6 / 10;126032;41133;32.64%
1046;Tempo de Jogo;Iniciante;3;Leia a hora inicial e a hora final de um jogo. A seguir calcule a duração do jogo, sabendo que o mesmo pode começar em um dia e terminar em outro, tendo uma duração mínima de 1 hora e máxima de 24 horas.;A entrada contém dois valores inteiros representando a hora de início e a hora de fim do jogo.;Apresente a duração do jogo conforme exemplo abaixo.;False;3 / 10;90190;47223;52.36%
1047;Tempo de Jogo com Minutos;Iniciante;7;"Leia a hora inicial, minuto inicial, hora final e minuto final de um jogo. A seguir calcule a duração do jogo.
                
                    Obs: O jogo tem duração mínima de um (1) minuto e duração máxima de 24 horas.";Quatro números inteiros representando a hora de início e fim do jogo.;Mostre a seguinte mensagem: “O JOGO DUROU XXX HORA(S) E YYY MINUTO(S)” .;False;7 / 10;104277;35191;33.75%
1048;Aumento de Salário;Iniciante;2;"A empresa ABC resolveu conceder um aumento de salários a seus funcionários de acordo com a tabela abaixo:
                
                    
                        
                                
                                    
                                        Salário
                                        Percentual de Reajuste
                                    
                                
                                
                                    
                                        
                                            
                                                    0 - 400.00
                                                    400.01 - 800.00
                                                    800.01 - 1200.00
                                                    1200.01 - 2000.00
                                                    Acima de 2000.00
                                        
                                        
                                            
                                                15%
                                                12%
                                                10%
                                                7%
                                                4%
                                        
                                    
                                
                             
                        
                
                    Leia o salário do funcionário e calcule e mostre o novo salário, bem como o valor de reajuste ganho e o índice reajustado, em percentual.";A entrada contém apenas um valor de ponto flutuante, com duas casas decimais.;Imprima 3 linhas na saída: o novo salário, o valor ganho de reajuste e o percentual de reajuste ganho, conforme exemplo abaixo.;False;2 / 10;109560;47163;43.05%
1049;Animal;Iniciante;3;Neste problema, você deverá ler 3 palavras que definem o tipo de animal possível segundo o esquema abaixo, da esquerda para a direita.  Em seguida conclua qual dos animais seguintes foi escolhido, através das três palavras fornecidas.;A entrada contém 3 palavras, uma em cada linha, necessárias para identificar o animal segundo a figura acima, com todas as letras minúsculas.;Imprima o nome do animal correspondente à entrada fornecida.;True;3 / 10;78984;37221;47.12%
1050;DDD;Iniciante;3;"Leia um número inteiro que representa um código de DDD para discagem interurbana. Em seguida, informe à qual cidade o DDD pertence, considerando a tabela abaixo:
	

	

	Se a entrada for qualquer outro DDD que não esteja presente na tabela acima, o programa deverá informar:
	DDD nao cadastrado";A entrada consiste de um único valor inteiro.;Imprima o nome da cidade correspondente ao DDD existente na entrada. Imprima DDD nao cadastrado caso não existir DDD correspondente ao número digitado.;True;3 / 10;113604;54099;47.62%
1051;Imposto de Renda;Iniciante;3;"Em um país imaginário denominado Lisarb, todos os habitantes ficam felizes em pagar seus impostos, pois sabem que nele não existem políticos corruptos e os recursos arrecadados são utilizados em benefício da população, sem qualquer desvio. A moeda deste país é o Rombus, cujo símbolo é o R$.
                    
                    Leia um valor com duas casas decimais, equivalente ao salário de uma pessoa de Lisarb. Em seguida, calcule e mostre o valor que esta pessoa deve pagar de Imposto de Renda, segundo a tabela abaixo.
                
                    
                
                    Lembre que, se o salário for R$ 3002.00, a taxa que incide é de 8% apenas sobre R$ 1000.00, pois a faixa de salário que fica de R$ 0.00 até R$ 2000.00 é isenta de Imposto de Renda. No exemplo fornecido (abaixo), a taxa é de 8% sobre R$ 1000.00 + 18% sobre R$ 2.00, o que resulta em R$ 80.36 no total. O valor deve ser impresso com duas casas decimais.";A entrada contém apenas um valor de ponto flutuante, com duas casas decimais.;"Imprima o texto ""R$"" seguido de um espaço e do valor total devido de Imposto de Renda, com duas casas após o ponto. Se o valor de entrada for menor ou igual a 2000, deverá ser impressa a mensagem ""Isento"".";True;3 / 10;76049;36787;48.37%
1052;Mês;Iniciante;1;Leia um valor inteiro entre 1 e 12, inclusive. Correspondente a este valor, deve ser apresentado como resposta o mês do ano por extenso, em inglês, com a primeira letra maiúscula.;A entrada contém um único valor inteiro.;Imprima por extenso o nome do mês correspondente ao número existente na entrada, com a primeira letra em maiúscula.;False;1 / 10;80976;48837;60.31%
1053;Desenho Contínuo;Grafos;10;"Uma tarefa simples! Você receberá os pontos finais de alguns segmentos de linha. Basta desenhá-los! Está achando muito fácil, certo?
                    
                    Você decide desafiar a si mesmo e, portanto, adicionar algumas restrições.
                    1] Iniciar a partir do ponto final de qualquer segmento de linha.
                    2] Não levante a caneta do papel.
                    3] Você pode passar por cima de uma linha de mais de uma vez.
                    4] Não desenhar qualquer outra linha além das citadas.
                    5] Você só pode mudar de direção em coordenadas inteiras de x e y.
                    6] Use a menor quantidade de tinta necessária.
                    
                    Você precisa de uma unidade de tinta para desenhar uma unidade de linha. As distâncias entre os pontos sucessivos
                    são: 1 unidade.
                    
                    Portanto Distância (A1 até B1) = 1 unidade and Distância (A1 até A2) = 1 unidade.";A primeira linha de entrada é um inteiro T(T<20) que indica o número total de casos de teste. Cada caso inicia com um inteiro N (N<10). Então N linhas vem a seguir, cada uma descrevendo um segmento de linha. Um segmento de linha é definido por dois pontos Y   1   X  1    Y 2 X2  . Y1 e  Y2 estarão no intervalo [A,E]. X1 e X2 estarão no intervalo [1,5]. O  primeiro exemplo é mostrado na figura acima. Portanto, olhe para o exemplo para compreender o formato exato.;Para cada caso, imprima o número do caso de teste seguido pela quantidade total de tinta requerida com 2 dígitos depois do ponto decimal. Se as linhas não podem ser desenhadas sem que se levante a caneta, imprima o número do caso de teste seguido de “~ x (“, conforme exemplo abaixo (caso 2).;True;10 / 10;1044;43;4.12%
1054;Sapo Dinâmico;Paradigmas;7;"Com o uso crescente de pesticidas, as águas dos córregos e rios tornaram-se tão contaminadas que se tornou quase impossível para os animais aquáticos sobreviverem.
                    
                    Sapo Fred é na margem esquerda de um rio. N rochas são dispostas em uma linha reta da margem esquerda para a margem direita. A distância entre a margem esquerda e a margem direita é D metros. Há rochas de dois tamanhos. As maiores podem suportar qualquer peso, mas as pedras menores começam a afundar assim que qualquer massa é colocada sobre elas. Fred tem que ir para a margem direita, 
                    onde ele tem que coletar algo e voltar para a margem esquerda, onde sua casa está situada.
                    
                    Ele pode pousar em cada pedra pequena no máximo uma vez, mas pode usar as maiores tantas vezes quanto ele quiser.
                    Ele nunca pode tocar a água poluída, pois é extremamente contaminada. Você pode 
                    planejar o itinerário de modo que a distância máxima de um único salto seja minimizada?";A primeira linha de entrada é um número inteiro  T  ( T < 100 ) que indica o número de casos de teste. Cad a caso inicia com uma linha contendo dois inteiros N (0 ≤ N ≤ 100 ) e D ( 1 ≤ D ≤ 1000000000 ) que são o número de pedras e a distância entre as margens. As próximas linhas dão a descrição das N pedras. Cada pedra é definida por seu tamanho Big(B) ou Small(S), que significa grande e pequena respectivamente, um traço “-“ e M ( 0 < M < D ) que determina a distância daquela pedra da margem esquerda. As pedras estarão em ordem crescente de M.;Para cada caso de teste, imprima o número do caso de teste seguido pela distância máxima do salto que Fred deve dar.;True;7 / 10;1526;522;34.21%
1055;Soma Permutada Elegante;Paradigmas;9;"São disponibilizados a você n inteiros   A1 A2 A3 ... An. Encontre uma permutação destes n inteiros de forma que a soma da diferença absoluta entre os elementos adjacentes seja maximizada.
                    
                    Supondo n = 4 e que os inteiros fornecidos sejam   4 2 1 5. A permutação   2 5 1 4  permite a máxima soma. Para esta permutação, teríamos soma = abs(2-5) + abs(5-1) + abs(1-4) = 3+4+3 = 10.
                    
                    De todas as 24 permutações possíveis, você não vai obter qualquer soma cujo valor exceda 10. Nós iremos chamar este valor 10, de soma permutada elegante.";A primeira linha de entrada é um valor inteiro T ( T  < 100 ) que representa o número de caso de testes. Cada caso de teste consiste de uma linha que inicia com n ( 1 < n < 51 ) seguida por n inteiros não-negativos, separados por um único espaço. Nenhum dos elementos da permutação fornecida irá exceder 1000.;Para cada caso, mostre o número do caso de teste seguido pela soma permutada elegante.;False;9 / 10;1974;510;25.84%
1056;Fatores e Múltiplos;Grafos;8;"Serão fornecidos a você, dois conjuntos de valores de entrada. Vamos chamá-los de conjuntos A e B. O conjunto A contém n elementos e o conjunto B contém m elementos. Você deverá remover k1 elementos do conjunto A e k2 elementos do conjunto B de forma que nenhum dos valores inteiros que restarem no conjunto B seja múltiplo de algum inteiro do conjunto A. k1 deverá estar no intervalo [0,n] e k2 no intervalo [0,m].
                    
                    Você deverá encontrar o valor de (k1+k2) tal que (k1+k2) seja tão baixo quanto possível.
                    
                    P é um múltiplo de Q se houver algum inteiro K tal que P = K * Q.
                    
                    Suponha que o conjunto A seja {2,3,4,5} e o conjunto B seja {6,7,8,9}. Se forem removidos 2 e 3 do conjunto A e 8 do conjunto B, nós tempos os conjuntos {4,5} e {6,7,9}. Aqui nenhum dos inteiros 6, 7 ou 9 é um múltiplo de 4 ou 5.
                    
                    Portanto, para este caso a resposta é 3, que é a quantia de elementos eliminados (2 elementos do conjunto A e 1 elemento do conjunto B).";O primeiro valor da entrada é um inteiro T ( T < 50 ) que determina o número de casos de teste. Cada caso de teste consiste de duas linhas. A primeira linha inicia com n seguida pelos n inteiros. A segunda linha inicia com m seguido pelos m inteiros. Ambos, n e m estarão no intervalo [1,100]. Todos os elementos destes dois conjuntos devem caber em um inteiro com sinal de 32 bits.;Para cada caso, imprima o número do caso de teste, seguido pela resposta, conforme exemplo abaixo.;True;8 / 10;2017;422;20.92%
1057;Chegando Junto;Grafos;8;"Você está jogando um jogo de computador no qual três robôs (Aneed, Ben e Cindy) estão presos em um labirinto. Inicialmente todos os três estão situados em três localizações diferentes no labirinto. Existem três saídas através das quais os robôs têm que sair. Como esperado, há vários obstáculos no labirinto e os robôs não podem passar por eles.
    
	O labirinto pode ser modelado como uma grade quadrada, com células NxN. Os robôs são colocados em três diferentes células no labirinto. Você pode comandá-los a se mover. Um único comando será ativado para os três robôs simultaneamente. Um robô irá mover-se para uma nova posição se for uma célula vazia dentro do labirinto ou se for uma das células alvo. Caso contrário, o comando será ignorado para aquele robô. A sua tarefa é comandá-los de forma  que todos eles cheguem nas três células alvo (em qualquer ordem).
	
	Cada movimento leva 1 unidade de tempo e consiste em:
	Move North  - O robô se move uma célula para o norte.
	Move East  - O robô se move uma célula para o leste.
	Move South - O robô se move uma célula para o sul.
	Move West  - O robô se move uma célula para o oeste.
    
	Cada célula consiste em um dos seguintes caracteres:
	A – Posição Inicial de Aneed
	B – Posição Inicial de Ben
	C – Posição Inicial de Cindy
	. – Célula vazia
	# - Obstáculo
	X – Célula alvo
    
	Assuma que para todo labirinto cada uma das três letras  (A B C) aparecerá exatamente uma vez e cada X aparecerá 3 vezes.";A primeira linha de entrada é um inteiro T (T < 50), que indica o número de casos de testes. Cada caso inicia com um inteiro N (2 < N < 10).  Cada uma das próximas N linhas contém N caracteres cada que preencherão o labirinto.;Para cada caso, imprima o número do caso seguido do menor tempo requerido. Se for impossível movê-los como descrito, imprima ‘trapped’ ao invés de imprimir o tempo. Note que o primeiro caso de teste corresponde à figura acima.;True;8 / 10;908;264;29.07%
1058;Zonas de Ataque Independentes;Paradigmas;9;"Uma técnica comum usada por exércitos invasores é cercar uma cidade em vez de diretamente entrar nela. Os exércitos divididem-se em pelotões com bases em uma forma circular ao redor da cidade. Para assumir o controle interno da cidade, pelotões são agrupados em três para cobrir regiões triangulares. Isso é uma política do general para garantir que não haja duas regiões triangulares sobrepostos. Infelizmente, o processo é um pouco mais complicado porque existem dois tipos de exércitos na força invasora. Os dois exércitos diferentes são conhecidos como Exército Vermelho eo Exército Negro. Cada pelotão é formado por um tipo de exército. Enquanto o Exército Preto tem clara intenção de servir ao General, os vermelhos podem trair na primeira oportunidade. Então se decidiu que cada grupo triangular será composto de no máximo um pelotão do Exército Vermelho para que os vermelhos não dominam em qualquer tarefa que lhes for atribuída.
                    
                    Supondo 6 pelotões (4 pretos e 2 vermelhos) como mostrado na figura abaixo:
                
                    
                    
                Uma vez que são 6 pelotões, nós podemos formar 2 grupos ( 6 / 3 = 2 ). Há duas possibilidades de arranjo para esta configuração.
                
                    
                
                
                Problema: será dado a você um número de pelotões e suas cores. 
                Você deve encontrar o número de possíveis configurações tal que cada pelotão faça parte de exatamente um grupo e respeite as restrições passadas acima.";A primeira linha de entrada é um inteiro T (T<100) que indica o número de casos de teste. Cada caso consiste de duas linhas. A primeira linha é um inteiro P ( 2 < P < 40 e P é um múltiplo de 3). P representa o número de batalhões. As próximas linhas consistem de uma string de tamanho P. Cada caracter da string é  ‘R’ (Red: vermelho) ou ‘B’ (Black: preto). A string dá a posição do batalhão no sentido horário. A posição inicial é arbitrariamente escolhida. Portanto, o exemplo acima pode ser representado por qualquer uma das seguintes sequências: ‘RBBBRB’, ‘BBBRBR’, ‘BBRBRB’, ‘BRBRBB’, ‘RBRBBB’ ou ‘BRBBBR’.;Para cada caso, imprima o número do caso de teste seguido do número de configurações válidas.;True;9 / 10;297;91;30.64%
1059;Números Pares;Iniciante;1;Faça um programa que mostre os números pares entre 1 e 100, inclusive.;Neste problema extremamente simples de repetição não há entrada.;Imprima todos os números pares entre 1 e 100, inclusive se for o caso, um em cada linha.;False;1 / 10;91765;61443;66.96%
1060;Números Positivos;Iniciante;2;Faça um programa que leia 6 valores. Estes valores serão somente negativos ou positivos (desconsidere os valores nulos). A seguir, mostre a quantidade de valores positivos digitados.;Seis valores, negativos e/ou positivos.;Imprima uma mensagem dizendo quantos valores positivos foram lidos.;False;2 / 10;89791;51394;57.24%
1061;Tempo de um Evento;Iniciante;5;"Pedrinho está organizando um evento em sua Universidade. O evento deverá ser no mês de Abril, iniciando e terminando dentro do mês. O problema é que Pedrinho quer calcular o tempo que o evento vai durar, uma vez que ele sabe quando inicia e quando termina o evento.
    
	Sabendo que o evento pode durar de poucos segundos a vários dias, você deverá ajudar Pedrinho a calcular a duração deste evento.";Como entrada, na primeira linha vai haver a descrição “Dia”, seguido de um espaço e o dia do mês no qual o evento vai começar. Na linha seguinte, será informado o momento no qual o evento vai iniciar, no formato hh : mm : ss. Na terceira e quarta linha de entrada haverá outra informação no mesmo formato das duas primeiras linhas, indicando o término do evento.;"Na saída, deve ser apresentada a duração do evento, no seguinte formato:
	
	W dia(s)
	X hora(s)
	Y minuto(s)
	Z segundo(s)
	
	Obs: Considere que o evento do caso de teste para o problema tem duração mínima de 1 minuto.";False;5 / 10;63666;22240;34.93%
1062;Trilhos;Estruturas e Bibliotecas;4;"Há uma famosa estação de trem na cidade PopPush. Esta cidade fica em um país incrivelmente acidentado e a estação foi criada no último século. Infelizmente os fundos eram extremamente limitados naquela época. Foi possível construir somente uma pista. Além disso, devido a problemas de espaço, foi feita uma pista apenas até a estação (veja figura abaixo).
	 

	

	A tradição local é que todos os comboios que chegam vindo da direção A continuam na direção B com os vagões  reorganizados, de alguma forma. Suponha que o trem que está chegando da direção A tem N <= 1000 vagões numerados sempre em ordem crescente 1,2, ..., N. O primeiro que chega é o 1 e o último que chega é o N. Existe um chefe de reorganizações de trens que quer saber se é possível reorganizar os vagões para que os mesmos saiam na direção B na ordem a1, a2, an..
    
	O  chefe pode utilizar qualquer estratégia para obter a saída desejada. No caso do desenho ilustrado acima, por exemplo, basta o chefe deixar todos os vagões entrarem na estação (do 1 ao 5) e depois retirar um a um: retira o 5, retira o 4, retira o 3, retira o 2 e por último retira o 1.  Desta forma, se o chefe quer saber se a saída 5,4,3,2,1 é possível em B, a resposta seria Yes. Vagão que entra na estação só pode sair para a direção B e é possível incluir quantos forem necessários para retirar o primeiro vagão desejado.";O arquivo de entrada consiste de um bloco de linhas, cada bloco, com exceção do último, descreve um trem e possivelmente mais do que uma requisição de reorganização. Na primeira linha de cada bloco há um inteiro N que é a quantidade de vagões. Em cada uma das próximas linhas de entrada haverá uma permutação dos valores 1,2, …, N. A última linha de cada bloco contém apenas 0. Um bloco iniciando com zero (0) indica o final da entrada.;O arquivo de saída contém a quantidade de linhas correspondente às linhas com permutações no arquivo de entrada. Cada linha de saída deve ser Yes se for possível organizar os vagões da forma solicitada e No, caso contrário. Há também uma linha em branco após cada bloco de entrada. No exemplo abaixo,  O primeiro caso de teste tem 3 permutações para 5 vagões. O ultimo zero dos testes de entrada não devem ser processados.;True;4 / 10;10247;3826;37.34%
1063;Trilhos Novamente... Traçando Movimentos;Estruturas e Bibliotecas;4;"Você lembra daquela estação de trem da cidade PopPush? Apenas para 
relembrar, existe uma estação de trem em um país incrivelmente 
acidentado. Além disso, a estação foi construída no século passado e 
infelizmente os fundos eram muito limitados. Em um determinado trecho 
foi possível construir apenas uma pista e, a solução encontrada para 
transportar as cargas nos dois sentidos foi construir uma estação que 
permitisse desconectar os vagões de uma locomotiva e conectar em outra, 
que iria em outro sentido.

	

	Cada trem que chega na direção A é manobrado e seus vagões continuam na
 direção B, reorganizados conforme o chefe da estação deseja. Ao chegar 
pelo lado A, cada vagão é desconectado e vai até a estação e depois 
segue para a direção B, para ser conectado na segunda 
locomotiva. Você pode desconectar quantos trens deseja na estação, mas o
 vagão que entra na estação só pode sair pelo lado B e uma vez que ele 
sai, não pode mais entrar novamente.
    
	Todos vagões são identificados pelas letras minúsculas (a até z). Isto significa 26 vagões no máximo. O chefe da
 organização dos vagões precisa agora que você ajude a resolver para 
ele, através de um programa, qual a sequência de movimentos é necessária
 para obter a saída desejada após a entrada na estação, seguindo para a 
direção B. O movimento de entrada e saída da estação é descrito respectivamente pelas letras I e R (Insere e Remove). Utilizando a figura dada como exemplo, a 
entrada e,t,d,a para uma saída desejada d,a,t,e, resulta nos movimentos 
I,I,I,R,I,R,R,R";"A entrada consiste em vários casos de teste, onde cada caso de teste é 
composto por 3 linhas. A primeira das 3 linhas contém um número inteiro N
 que representa o número total de vagões. A segunda linha contém a 
sequência dos vagões que vêm do lado A e a Terceira linha contém a 
sequência que o chefe de organização deseja como saída para o lado B. A 
última linha de entrada contém apenas 0, indicando o fim da entrada.";"O arquivo de saída contém a quantidade de linhas correspondente ao 
número de casos de teste de entrada. Cada linha de saída contém uma 
sequência de I e R conforme o exemplo. Se não for possível mostrar a saída, as operações devem ser interrompidas e a mensagem ""Impossible"" deve ser impressa, com um espaço após a sequência.";True;4 / 10;5835;2062;35.34%
1064;Positivos e Média;Iniciante;2;"Leia 6 valores. Em seguida, mostre quantos destes valores digitados
foram positivos. Na próxima linha, deve-se mostrar a média de todos os
valores positivos digitados, com um dígito após o ponto decimal.";A entrada contém 6 números que podem ser valores inteiros ou de ponto flutuante. Pelo menos um destes números será positivo.;"O primeiro valor de saída é a quantidade de valores positivos. A
próxima linha deve mostrar a média dos valores positivos digitados.";False;2 / 10;91988;46327;50.36%
1065;Pares entre Cinco Números;Iniciante;2;Faça um programa que leia 5 valores inteiros. Conte quantos destes valores digitados são pares e mostre esta informação.;O arquivo de entrada contém 5 valores inteiros quaisquer.;Imprima a mensagem conforme o exemplo fornecido, indicando a quantidade de valores pares lidos.;False;2 / 10;63049;43459;68.93%
1066;Pares, Ímpares, Positivos e Negativos;Iniciante;2;"Leia 5 valores Inteiros. A seguir mostre quantos valores digitados 
foram pares, quantos valores digitados foram ímpares, quantos valores 
digitados foram positivos e quantos valores digitados foram negativos.";O arquivo de entrada contém 5 valores inteiros quaisquer.;Imprima a mensagem conforme o exemplo fornecido, uma mensagem por linha, não esquecendo o final de linha após cada uma.;False;2 / 10;79926;44894;56.17%
1067;Números Ímpares;Iniciante;1;Leia um valor inteiro X (1 <= X <= 1000). Em seguida mostre os ímpares de 1 até X, um valor por linha, inclusive o X, se for o caso.;O arquivo de entrada contém 1 valor inteiro qualquer.;Imprima todos os valores ímpares de 1 até X, inclusive X, se for o caso.;False;1 / 10;68948;47326;68.64%
1068;Balanço de Parênteses I;Estruturas e Bibliotecas;5;"Dada uma expressão qualquer com parênteses, indique se a quantidade de parênteses está correta ou não, sem levar em conta o restante da expressão. Por exemplo:
    
	a+(b*c)-2-a        está correto
	(a+b*(2-c)-2+a)*2  está correto
    
	enquanto
    
	(a*b-(2+c)         está incorreto
	2*(3-a))           está incorreto
	)3+b*(2-c)(        está incorreto
    
	Ou seja, todo parênteses que fecha deve ter um outro parênteses que abre correspondente e não pode haver parênteses que fecha sem um previo parenteses que abre e a quantidade total de parenteses que abre e fecha deve ser igual.";Como entrada, haverá N expressões (1 <= N <= 10000), cada uma delas com até 1000 caracteres.;O arquivo de saída deverá ter a quantidade de linhas correspondente ao arquivo de entrada, cada uma delas contendo as palavras correct ou incorrect de acordo com as regras acima fornecidas.;False;5 / 10;26265;9179;34.95%
1069;Diamantes e Areia;Estruturas e Bibliotecas;3;"João está trabalhando em uma mina, tentando retirar o máximo que consegue de diamantes ""<>"". Ele deve excluir todas as particulas de areia ""."" do processo e a cada retirada de diamante, novos diamantes poderão se formar. Se ele tem como uma entrada .<...<<..>>....>....>>>., três diamantes são formados. O primeiro é retirado de <..>, resultando  .<...<>....>....>>>. Em seguida o segundo diamante é retirado, restando .<.......>....>>>. O terceiro diamante é então retirado, restando no final .....>>>., sem possibilidade de extração de novo diamante.";"Deve ser lido um valor inteiro N que representa a quantidade de casos de teste. Cada linha a seguir é um caso de teste que contém até 1000 caracteres, incluindo ""<,>, .""";Você deve imprimir a quantidade de diamantes possíveis de serem extraídos em cada caso de entrada.;False;3 / 10;23490;9100;38.74%
1070;Seis Números Ímpares;Iniciante;1;Leia um valor inteiro X. Em seguida apresente os 6 valores ímpares consecutivos a partir de X, um valor por linha, inclusive o X ser for o caso.;A entrada será um valor inteiro positivo.;A saída será uma sequência de seis números ímpares.;False;1 / 10;56205;42753;76.07%
1071;Soma de Impares Consecutivos I;Iniciante;2;Leia 2 valores inteiros X e Y. A seguir, calcule e mostre a soma dos números impares entre eles.;O arquivo de entrada contém dois valores inteiros.;O programa deve imprimir um valor inteiro. Este valor é a soma dos valores ímpares que estão entre os valores fornecidos na entrada que deverá caber em um inteiro.;False;2 / 10;66988;38717;57.80%
1072;Intervalo 2;Iniciante;1;"Leia um valor inteiro N. Este valor será a quantidade de valores inteiros X que serão lidos em seguida.
	Mostre quantos destes valores X estão dentro do intervalo [10,20] e quantos estão fora do intervalo, mostrando essas informações.";"A primeira linha da entrada contém um valor inteiro N (N < 10000), que indica o número de casos de teste.
	Cada caso de teste a seguir é um valor inteiro X (-107 < X <107).
	 ";Para cada caso, imprima quantos números estão dentro (in) e quantos valores estão fora (out) do intervalo.;False;1 / 10;57850;39814;68.82%
1073;Quadrado de Pares;Iniciante;1;Leia um valor inteiro N. Apresente o quadrado de cada um dos valores pares, de 1 até N, inclusive N, se for o caso.;A entrada contém um valor inteiro N (5 < N < 2000).;"Imprima o quadrado de cada um dos valores pares, de 1 até N, conforme o exemplo abaixo.
                 
				 Tome cuidado! Algumas linguagens tem por padrão apresentarem como saída 1e+006 ao invés de 1000000 o que ocasionará resposta errada. Neste caso, configure a precisão adequadamente para que isso não ocorra.";False;1 / 10;68619;42426;61.83%
1074;Par ou Ímpar;Iniciante;2;Leia um valor inteiro N. Este valor será a quantidade de valores que serão lidos em seguida. Para cada valor lido, mostre uma mensagem em inglês dizendo se este valor lido é par (EVEN), ímpar (ODD), positivo (POSITIVE) ou  negativo (NEGATIVE). No caso do valor ser igual a zero (0), embora a descrição correta seja (EVEN NULL), pois por definição zero é par, seu programa deverá imprimir apenas NULL.;A primeira linha da entrada contém um valor inteiro N(N < 10000) que indica o número de casos de teste. Cada caso de teste a seguir é um valor inteiro X (-107 < X <107).;Para cada caso, imprima uma mensagem correspondente, de acordo com o exemplo abaixo. Todas as letras deverão ser maiúsculas e sempre deverá haver um espaço entre duas palavras impressas na mesma linha.;False;2 / 10;70191;41072;58.51%
1075;Resto 2;Iniciante;2;Leia um valor inteiro N. Apresente todos os números entre 1 e 10000 que divididos por N dão resto igual a 2.;A entrada contém um valor inteiro N (N < 10000).;Imprima todos valores que quando divididos por N dão resto = 2, um por linha.;False;2 / 10;59688;38392;64.32%
1076;Desenhando Labirintos;Grafos;2;"Pedro gosta muito de desenhar labirintos, e teve uma idéia recentemente: quantos movimentos com a caneta ele precisa fazer, no mínimo, para desenhar um labirinto, saindo sempre da mesma posição e finalizando no mesmo ponto? Para a brincadeira ficar interessante, Pedro decidiu que não é permitido levantar a caneta do papel. Os modelos para construção do labirinto são sempre quadrados, ou seja, 3 x 3 , 4 x 4 , 5 x 5 até no máximo de 7 x 7.
                    
                    
                    Para cada exemplo, Pedro vai especificar de onde o desenho deve começar e é tarefa sua determinar a quantidade de movimentos necessários para desenhar o labirindo como Pedro deseja. Pedro ainda lembra que você não precisa se preocupar com ciclos, pois não haverá nenhum ciclo em nenhum dos casos de teste. Se existir uma entrada 4 1, isso não impede a existência de outra entrada 1 4 no mesmo caso de teste, ou seja, outra linha ligando estes mesmos dois nodos. De qualquer forma isto não fará diferença no desenho do labirinto, pois se Pedro traçar as duas linhas entre 1 e 4 ou apenas uma delas, a quantidade de movimentos deverá ser a mesma. Somente neste caso, a utilização da segunda linha por Pedro é opcional.
                    
                    
                    Veja os exemplos abaixo, No labirinto A (4 x 4), Pedro deseja sair do nodo 0, desenhar todas as linhas e retornar ao nodo 0. Para isso, o mínimo de movimentos possíveis é 30. No labirinto B (3 x 3), Pedro deseja sair do nodo 1, desenhar  todas as linhas e retornar para o nodo 1. Neste caso, ele precisa de 10 movimentos para fazer este desenho.";A primeira linha de entrada é um inteiro T (T < 100) que indica o número total de casos de teste. Cada caso inicia com uma linha contendo um inteiro N (N < X2, onde X é a largura em nodos do labirinto, que pode variar de 3 até 7). Este N é o ponto (nodo) no qual o desenho deve ser iniciado e também é onde o desenho deve ser terminado. Na próxima linha há duas informações V e A que são respectivamente a quantidade de vértices e arestas do desenho. Uma quantidade A de linhas vem a seguir, cada uma descrevendo um segmento de linha que Pedro tem disponível para para desenhar o labirinto desejado.;O arquivo de saída contém um valor para cada caso de teste de entrada. Este valor é a quantidade de movimentos de caneta que devem ser feitos para desenhar o labirinto do caso de teste, considerando que o início e o fim são sempre a partir do mesmo ponto (nodo) e que não é possível levantar a caneta do papel.;True;2 / 10;4971;2562;51.54%
1077;Infixa para Posfixa;Estruturas e Bibliotecas;5;"O Professor solicitou que você escreva um programa que converta uma expressão na forma infixa (como usualmente conhecemos) para uma expressão na forma posfixa. Como você sabe, os termos in (no meio) e pos (depois) se referem à posição dos operadores. O programa terá que lidar somente com operadores binários +,-,*,/,^, parênteses, letras e números. Um exemplo seria uma expressão como:
                    (A*B+2*C^3)/2*A. O programa deve converter esta expressão (infixa) para a expressão posfixa: AB*2C3^*+2/A*
                     ";A primeira linha da entrada contém um valor inteiro N (N < 1000), que indica o número de casos de teste. Cada caso de teste a seguir é uma expressão válida na forma infixa, com até 300 caracteres.;Para cada caso, apresente a expressão convertida para a forma posfixa.;False;5 / 10;5433;1980;36.44%
1078;Tabuada;Iniciante;2;"Leia 1 valor inteiro N (2 < N < 1000). A seguir, mostre a tabuada de N:      
                    1 x N = N      2 x N = 2N        ...       10 x N = 10N";A entrada contém um valor inteiro N (2 < N < 1000).;Imprima a tabuada de N, conforme o exemplo fornecido.;False;2 / 10;79988;48590;60.75%
1079;Médias Ponderadas;Iniciante;2;"Leia 1 valor inteiro N, que representa o número de casos de teste que 
                    vem a seguir. Cada caso de teste consiste de 3 valores reais, cada um 
                    deles com uma casa decimal. Apresente a média ponderada para cada um 
                    destes conjuntos de 3 valores, sendo que o primeiro valor tem peso 2, o 
                    segundo valor tem peso 3 e o terceiro valor tem peso 5.";O arquivo de entrada contém um valor inteiro N na primeira linha. Cada N linha a seguir contém um caso de teste com três valores com uma casa decimal cada valor.;Para cada caso de teste, imprima a média ponderada dos 3 valores, conforme exemplo abaixo.;False;2 / 10;53351;34664;64.97%
1080;Maior e Posição;Iniciante;3;Leia 100 valores inteiros. Apresente então o maior valor lido e a posição dentre os 100 valores lidos.;O arquivo de entrada contém 100 números inteiros, positivos e distintos.;Apresente o maior valor lido e a posição de entrada, conforme exemplo abaixo.;False;3 / 10;82267;39509;48.03%
1081;DFSr - Hierarquia de Profundidade;Grafos;5;A rotina PathR é bem conhecida em grafos. É também chamada de dfs ou dfsr. Trata-se de uma busca em profundidade dos nodos do grafo, utilizando backtracking. A tarefa aqui é, dado o grafo de entrada, simplesmente gerar o desenho da hierarquia dos nodos pesquisados. Para isso, é apresentada a rotina PathR abaixo, como apoio.;A entrada será um arquivo contendo vários casos de teste. A primeira linha do arquivo de entrada contém um inteiro N que indica a quantidade de casos de teste que vem a seguir. Cada um dos N casos de teste contém, na primeira linha, duas informações: V  (1 ≤ V ≤ 20) e E (1 ≤ E ≤ 20) que são, respectivamente, a quantidade de Vértices e de Arestas (Edges) do grafo. Seguem  E linhas contendo informações sobre cada uma das arestas do grafo.;"Para cada caso de entrada, deve ser apresentada uma saída que representa a busca em profundidade de todos os nodos,  respeitando a hierarquia e profundidade de cada um deles. O símbolo b  representam um espaço em branco. Veja o exemplo abaixo para ilustrar:
                    bb0-2 pathR(G,2)
                    bbbb2-1 pathR(G,1)
                    bbbb2-4 pathR(G,4)
                    bbbbbb4-1
                    
                    E assim sucessivamente...
                    Obs.: Há uma linha em branco depois de cada segmento impresso do grafo, inclusive após o último segmento.";True;5 / 10;5572;1790;32.12%
1082;Componentes Conexos;Grafos;4;"Com base nestas três definições:
                    
                        Grafo conexo: Um grafo G(V,A) é conexo se para cada par de nodos u e v existe um caminho entre u e v. Um grafo com apenas um componente é um grafo conexo.
                    
                        Grafo desconexo: Um grafo G(V,A) é desconexo se ele for formado por 2 ou mais componentes conexos.
                    
                        Componente conexo: Componentes conexos de um grafo são os subgrafos conexos deste grafo.
                    
                        O grafo a seguir possui 3 componentes conexos. O primeiro é formado pelos nodos a,b,c. O segundo é formado unicamente pelo nodo d e o terceiro componente é formado pelos nodos e,f.
                
                    
                
                    Com base nestes conceitos, onde cada entrada fornecida que tem a identificação de cada um dos vértices, arestas e as ligações entre os vértices através destas arestas,  liste cada um dos componentes conexos que existem no grafo, segundo a entrada fornecida.";"A primeira linha do arquivo de entrada contém um valor inteiro N que representa a 
                    quantidade de casos de teste que vem a seguir. Cada caso de teste contém dois valores 
                    V e E que são, respectivamente, a quantidade 
                    de Vértices e arestas (Edges) do grafo. Seguem E linhas na sequência, 
                    cada uma delas representando uma das arestas que ligam tais vértices. 
                    Cada vértice é representado por uma letra minúscula do alfabeto ('a'-'z'), ou seja, 
                    cada grafo pode ter no máximo 26 vértices. Cada grafo tem no mínimo 1 componente conexo.
                    
                        Obs: Os vértices de cada caso de teste sempre iniciam no 'a'. Isso significa que um caso de teste que tem 3 vértices, 
                    tem obrigatoriamente os vértices 'a', 'b' e 'c'.";"Para cada caso de teste da entrada, deve ser apresentada uma mensagem Case #n:, onde n indica o número do caso de teste (conforme exemplo abaixo). Segue a listagem dos vértices de cada segmento, um segmento por linha, separados por vírgula (inclusive com uma virgula no final da linha). Finalizando o caso de teste, deve ser apresentada uma mensagem indicando a quantidade de componentes conexos do grafo (em inglês). Todo caso de teste deve ter uma linha em branco no final, inclusive o último caso de teste.
                
                    Obs: os nodos devem sempre ser apresentados em ordem crescente e se há caminho de a até b significa que há caminho de b até a.";True;4 / 10;7641;2610;34.16%
1083;LEXSIM - Avaliador Lexico e Sintático;Estruturas e Bibliotecas;7;Uma das formas mais interessantes do uso de pilhas é a na avaliação de uma expressão matemática. Pode-se, através da pilha, fazer a análise léxica de uma expressão (indicar se uma expressão possui um operando inválido, como por exemplo um símbolo qualquer que não está presente nem na tabela de operadores, nem na tabela de operandos) e também a análise sintática. A análise sintática pode indicar que está faltando um ou mais parênteses, sobrando um ou mais parênteses, sobrando operador, 2 operandos sucessivos, etc. A tarefa aqui é determinar se uma expressão está correta ou não.;"Como entrada, são válidos:
                    a) Operandos: todas as letras maiúsculas ou minúsculas ('a'..'z', 'A'..'Z') e números (0...9).
                    b) Parênteses.
                    c) Operadores: deverão ser aceitos os seguintes operadores segundo a tabela de prioridades  apresentada abaixo:
                

                
                    
                        Operador
                        Prioridade
                    
                    
                        
                            ^
                            6
                        
                        
                            *,/
                            5
                        
                        
                            +,-
                            4
                        
                        
                            >,<,=,#,
                            3
                        
                        
                            AND ( . )
                            2
                        
                        
                            OR ( | )
                            1
                        
                    
                

                Para facilitar a implementação, será utilizado um ponto para representar o AND (.) e o Pipe ( | ) para representar o OR.

                Obs.: Como restrição, não será permitida a entrada de expressões com operadores unários, como por e exemplo o '-' de: 4 * -2

                A finalização da entrada será determinada pelo final do arquivo de entrada EOF().";"Como saída, para cada expressão de entrada deverá ser gerado uma linha indicando o resultado do processamento. Se a expressão estiver correta, esta deverá ser transformada para a forma posfixa. Se não for possível, deverá ser impressa a mensagem ""Lexical Error!"" indicando erro léxico ou ""Syntax Error!"" indicando o erro de sintaxe, nesta ordem.";False;7 / 10;1544;391;25.32%
1084;Apagando e Ganhando;Paradigmas;6;"Juliano é fã do programa de auditório Apagando e Ganhando, um programa no qual os participantes são selecionados através de um sorteio e recebem prêmios em dinheiro por participarem.
                    No programa, o apresentador escreve um número de N dígitos em uma lousa. O participante então deve apagar exatamente D dígitos do número que está na lousa; o número formado pelos dígitos que restaram é então o prêmio do participante.
                    Juliano finalmente foi selecionado para participar do programa, e pediu que você escrevesse um programa que, dados o número que o apresentador escreveu na lousa, e quantos dígitos Juliano tem que apagar, determina o valor do maior prêmio que Juliano pode ganhar.";"A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros N e D (1 ≤ D < N ≤ 105), indicando a quantidade de dígitos do número que o apresentador escreveu na lousa e quantos dígitos devem ser apagados. A linha seguinte contém o número escrito pelo apresentador, que não contém zeros à esquerda.
                    O final da entrada é indicado por uma linha que contém apenas dois zeros, separados por um espaço em branco.";Para cada caso de teste da entrada seu programa deve imprimir uma única linha na saída, contendo o maior prêmio que Juliano pode ganhar.;False;6 / 10;9997;2067;20.68%
1085;Babel;Grafos;7;"Joãozinho e Mariazinha são dois irmãos que estão muito empolgados com suas aulas de idiomas, cada um está fazendo vários diferentes cursinhos. Ao chegar em casa comentam sobre gramática, vocabulário, cultura dos países etc. Numa dessas conversas perceberam que algumas palavras são comuns a mais de um idioma, mesmo que não necessariamente tenham o mesmo significado. Por exemplo, “amigo” existe em português e espanhol e tem o mesmo significado, enquanto que “date” é uma palavra comum entre francês e inglês mas que pode ter significados diferentes, uma vez que “date” também se refere a um encontro em inglês, além de “data” de calendário. Já “red” em espanhol se refere a uma rede, enquanto que em inglês se refere à cor vermelha. Outro exemplo seria “actual” que, em inglês significa algo real e, em espanhol, tem o significado de presente, atual (como em português).
                    
                    Empolgados com essas descobertas, resolveram escrever num caderno todas as palavras em comum que conseguiram pensar, associando cada uma a um par de idiomas. Observador como é, Joãozinho propˆos um desafio a Mariazinha: dados um idioma de origem e um de destino, escrever uma série de palavras sendo que a primeira necessariamente deveria pertencer ao idioma de origem e a última ao de destino. Duas palavras adjacentes nessa seqüência deveriam necessariamente pertencer a um mesmo idioma. Por exemplo, se o idioma de origem fosse português e o de destino francês, Mariazinha poderia escrever a seqüência amigo actual date (português/espanhol, espanhol/inglês, inglês/francês).
                    Para a surpresa de Joãozinho, Mariazinha conseguiu resolver o problema com muita facilidade. Irritado com o sucesso de sua irmã, ele resolveu complicar ainda mais o problema com duas restrições: Mariazinha deve encontrar a solução que tenha o menor comprimento da seqüência total não contando os espaços entre as palavras e duas palavras consecutivas não podem ter a mesma letra inicial.
                    Sendo assim, a solução anterior passa a ser inválida, pois “amigo” e “actual” têm a mesma letra inicial. é possível, porém, encontrar outra solução, que no caso seria amigo red date, cujo comprimento total é 12. Joãozinho fez uma extensa pesquisa na internet e compilou uma enorme lista de palavras e desafiou Mariazinha a resolver o problema. Como é possível que haja mais de uma solução, ele pediu para que ela apenas respondesse o comprimento da seqüência encontrada dadas as restrições ou se não há solução possível. Você seria capaz de ajudar Mariazinha?";"A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um inteiro M (1 ≤ M ≤ 2000), representando o total de palavras compiladas por Joãozinho. A segunda linha contém duas cadeias de caracteres distintas O e D, separadas por um espaço em branco, indicando os idiomas de origem e destino respectivamente. Cada uma das M linhas seguintes contém três cadeias de caracteres I1, I2 e P, separadas por um espaço em branco, representando dois idiomas e uma palavra comum entre ambos (I1 e I2 são sempre diferentes). Todas as cadeias de caracteres terão tamanho mínimo 1 e máximo 50 e conterão apenas letras minúsculas. Um mesmo par de idiomas pode ter várias palavras diferentes associadas a ele, porém uma mesma palavra P nunca será repetida.
                    O final da entrada é indicado por uma linha que contém apenas um zero.";Para cada caso de teste da entrada seu programa deve imprimir um único inteiro, o comprimento da menor seqüência que satisfaça as restrições de Joãozinho, ou impossivel (em minúsculas, sem acento) caso não seja possível.;False;7 / 10;1949;585;30.02%
1086;O Salão do Clube;Ad-Hoc;8;"O Clube Recreativo de Tinguá está construindo a sua nova sede social. Os sócios desejam que o piso do salão da sede seja de tábuas de madeira, pois consideram que este é o melhor tipo de piso para os famosos bailes do clube. Uma madeireira da região doou uma grande quantidade de tábuas de boa qualidade, para serem utilizadas no piso. As tábuas doadas têm todas a mesma largura, mas têm comprimentos distintos.

	O piso do salão da sede social é retangular. As tábuas devem ser colocadas justapostas, sem que qualquer parte de uma tábua seja sobreposta a outra tábua, e devem cobrir todo o piso do salão. Elas devem ser dispostas alinhadas, no sentido longitudinal, e todas devem estar no mesmo sentido (ou seja, todas as tábuas devem estar paralelas, no sentido longitudinal). Além disso, os sócios não querem muitas emendas no piso, e portanto se uma tábua não é longa o bastante para cobrir a distãncia entre um lado e outro do salão, ela pode ser emendada a no máximo uma outra tábua para completar a distância.

	Há porém uma complicação adicional. O carpinteiro-chefe tem um grande respeito por todas as madeiras e prefere não serrar qualquer tábua. Assim, ele deseja saber se é possível forrar todo o piso com as tábuas doadas, obedecendo às restrições especificadas; caso seja possível, o carpinteiro-chefe deseja ainda saber o menor número de tábuas que será necessário utilizar. A figura abaixo ilustra duas possíveis maneiras de forrar o piso de um salão com dimensões 4 × 5 metros para um conjunto de dez tábuas doadas, com 100 cm de largura, e comprimentos 1, 2, 2, 2, 2, 3, 3, 4, 4 e 5 metros.";"A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros M e N indicando as dimensões, em metros, do salão (1 ≤ N,M ≤ 104). A segunda linha contém um inteiro L, representando a largura das tábuas, em centímetros(1 ≤ L ≤ 100). A terceira linha contém um inteiro, K, indicando o número de tábuas doadas (1 ≤ K ≤ 105). A quarta linha contém K inteiros Xi, separados por um espaço, cada um representando o comprimento, em metros, de uma tábua (1 ≤ Xi ≤ 104 para 1 ≤ i ≤ K). O final da entrada é indicado por uma linha que contém apenas dois zeros, separados por um espaço em branco.
	 ";"Para cada um dos casos de teste da entrada, seu programa deve imprimir uma única linha, contendo o menor número de tábuas necessário para cobrir todo o piso do salão, obedecendo às restrições estabelecidas. Caso não seja possível cobrir todo o piso do salão obedecendo às restrições estabelecidas, imprima uma linha com a palavra ‘impossivel’ (letras minúsculas, sem acento).
	 ";True;8 / 10;3635;886;24.37%
1087;Dama;Ad-Hoc;4;"O jogo de xadrez possui várias peças com movimentos curiosos: uma delas é a dama, que pode se mover qualquer quantidade de casas na mesma linha, na mesma coluna, ou em uma das duas diagonais, conforme exemplifica a figura abaixo:

	


	O grande mestre de xadrez Kary Gasparov inventou um novo tipo de problema de xadrez: dada a posição de uma dama em um tabuleiro de xadrez vazio (ou seja, um tabuleiro 8 × 8, com 64 casas), de quantos movimentos, no mínimo, ela precisa para chegar em outra casa do tabuleiro?

	Kary achou a solução para alguns desses problemas, mas teve dificuldade com outros, e por isso pediu que você escrevesse um programa que resolve esse tipo de problema.
	 ";"A entrada contém vários casos de teste. A primeira e única linha de cada caso de teste contém quatro inteiros X1, Y1, X2 e Y2 (1 ≤ X1, Y1, X2, Y2 ≤ 8). A dama começa na casa de coordenadas (X1, Y1), e a casa de destino é a casa de coordenadas(X2, Y2). No tabuleiro, as colunas são numeradas da esquerda para a direita de 1 a 8 e as linhas de cima para baixo também de 1 a 8. As coordenadas de uma casa na linha X e coluna Y são (X, Y ).

	O final da entrada é indicado por uma linha contendo quatro zeros.";Para cada caso de teste da entrada seu programa deve imprimir uma única linha na saída, contendo um número inteiro, indicando o menor número de movimentos necessários para a dama chegar em sua casa de destino.;True;4 / 10;26911;10781;40.06%
1088;Bolhas e Baldes;Estruturas e Bibliotecas;7;"Andrea, Carlos e Marcelo são muito amigos e passam todos os finais de semana à beira da piscina. Enquanto Andrea se bronzeia ao sol, os dois ficam jogando Bolhas. Andrea, uma cientista da computação muito esperta, já disse a eles que não entende por que passam tanto tempo jogando um jogo tão primário.
                
                
                    Usando o computador portátil dela, os dois geram um inteiro aleatório N e uma seqüência de inteiros, também aleatória, que é uma permutação de 1, 2, . . . ,N.
                
                
                    O jogo então começa, cada jogador faz um movimento, e a jogada passa para o outro jogador. Marcelo é sempre o primeiro a começar a jogar. Um movimento de um jogador consiste na escolha de um par de elementos consecutivos da seqüência que estejam fora de ordem e em inverter a ordem dos dois elementos. Por exemplo, dada a seqüência 1, 5, 3, 4, 2, o jogador pode inverter as posições de 5 e 3 ou de 4 e 2, mas não pode inverter as posições de 3 e 4, nem de 5 e 2. Continuando com o exemplo, se o jogador decide inverter as posições de 5 e 3 então a nova seqüência será 1, 3, 5, 4, 2.
                
                
                    Mais cedo ou mais tarde, a seqüência ficará ordenada. Perde o jogador impossibilitado de fazer um movimento. Andrea, com algum desdém, sempre diz que seria mais simples jogar cara ou coroa, com o mesmo efeito. Sua missão, caso decida aceitá-la, é determinar quem ganha o jogo, dada a seqüência inicial.";"A entrada contém vários casos de teste. Os dados de cada caso de teste estão numa única linha, e são inteiros separados por um espaço em branco. Cada linha contém um inteiroN (2 ≤ N ≤ 105), seguido da seqüência inicial P = (X1, X2, ...,XN) de N inteiros distintos dois a dois, onde1 ≤ Xi ≤ N para 1 ≤ i ≤ N.
                
                    O final da entrada é indicado por uma linha que contém apenas o número zero.";Para cada caso de teste da entrada seu programa deve imprimir uma única linha, com o nome do vencedor, igual a Carlos ou Marcelo., sem espaços em branco.;False;7 / 10;9347;2683;28.70%
1089;Loop Musical;Ad-Hoc;3;"Um loop musical é um trecho de música que foi composto para repetir continuamente (ou seja, o trecho inicia novamente toda vez que chega ao final), sem que se note descontinuidade. Loops são muito usados na sonorização de jogos, especialmente jogos casuais pela internet.

	Loops podem ser digitalizados por exemplo utilizando PCM. PCM, do inglês Pulse Code Modulation, é uma técnica para representação de sinais analógicos, muito utilizada em áudio digital. Nessa técnica, a magnitude do sinal é amostrada a intervalos regulares de tempo, e os valores amostrados são armazenados em sequência. Para reproduzir a forma de onda amostrada, o processo é invertido (demodulação).

	Fernandinha trabalha para uma empresa que desenvolve jogos e compôs um bonito loopmusical, codificando-o em PCM. Analisando a forma de onda do seu loop em um software de edição de áudio, Fernandinha ficou curiosa ao notar a quantidade de “picos” existentes. Um pico em uma forma de onda é um valor de uma amostra que representa um máximo ou mínimo local, ou seja, um ponto de inflexão da forma de onda. A figura abaixo ilustra (a) um exemplo de forma de onda e (b) o loop formado com essa forma de onda, contendo 48 picos.

	

	Fernandinha é uma amiga muito querida e pediu sua ajuda para determinar quantos picos existem no seu loop musical.";"A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um inteiro N, representando o número de amostras no loop musical de Fernandinha (2 ≤ N ≤ 104). A segunda linha contém N inteiros Hi, separados por espaços, representando a sequência de magnitudes das amostras(-104 ≤ Hi ≤ 104 para 1 ≤ i ≤ N, H1 ≠ HN e Hi ≠ Hi+1 para 1 ≤ i < N). Note que H1 segue HN quando o loop é reproduzido.

	O final da entrada é indicado por uma linha que contém apenas o número zero.";Para cada caso de teste da entrada seu programa deve imprimir uma única linha, contendo apenas um inteiro, o número de picos existentes no loop musical de Fernandinha.;True;3 / 10;9123;4728;51.83%
1090;Set;Ad-Hoc;10;"Set é um jogo jogado com um baralho no qual cada carta pode ter uma, duas ou três figuras. Todas as figuras em uma carta são iguais, e podem ser círculos, quadrados ou triângulos. Um set é um conjunto de três cartas em que, para cada característica (número e figura), ou as três cartas são iguais, ou as três cartas são diferentes.


                Por exemplo, na figura abaixo, (a) é um set válido, já que todas as cartas têm o mesmo tipo de figura e todas elas têm números diferentes de figuras. Em (b), tanto as figuras quanto os números são diferentes para cada carta. Por outro lado, (c) não é um set, já que as duas últimas cartas têm a mesma figura, mas esta é diferente da figura da primeira carta.
                
                    
                    
                
                    O objetivo do jogo é formar o maior número de sets com as cartas que estão na mesa; cada vez que um set é formado, as três cartas correspondentes são  removidas de jogo. Quando há poucas cartas na mesa, é fácil determinar o maior número de sets que podem ser formados; no entanto, quando há muitas cartas há muitas  combinações possíveis. Seu colega quer treinar para o campeonato mundial de Set, e por isso pediu que você fizesse um programa que calcula o maior número de sets que podem ser formados com um determinado conjunto de cartas.";"A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém um inteiro N (3 ≤ N ≤ 3 x 104), indicando o número de cartas na mesa; cada uma das N linhas seguintes contém a descrição de uma carta.
                
                    A descrição de uma carta é dada por duas palavras separadas por um espaço; a primeira palavra é ""um"" ou ""dois""   ou ""tres"" e indica quantas figuras aquela carta possui. A segunda palavra é, “circulo” (ou “circulos”), “quadrado” (ou “quadrados”) ou “triangulo” (ou “triangulos”) indica qual tipo de figura está naquela carta.
                
                    O final da entrada é indicado por uma linha contendo um zero.";Para cada caso de teste da entrada seu programa deve imprimir uma única linha na saída, contendo um número inteiro, indicando o maior número de sets que podem ser formados com as cartas dadas.;True;10 / 10;1174;94;8.01%
1091;Divisão da Nlogônia;Ad-Hoc;1;"Depois de séculos de escaramuças entre os quatro povos habitantes da Nlogônia, e de dezenas de anos de negociações envolvendo diplomatas, políticos e as forças armadas de todas as partes interessadas, com a intermediação da ONU, OTAN, G7 e SBC, foi finalmente decidida e aceita por todos a maneira de dividir o país em quatro territórios independentes.
                
                    Ficou decidido que um ponto, denominado ponto divisor, cujas coordenadas foram estabelecidas nas negociações, definiria a divisão do país, da seguinte maneira. Duas linhas, ambas contendo o ponto divisor, uma na direção norte-sul e uma na direção leste-oeste, seriam traçadas no mapa, dividindo o país em quatro novos países. Iniciando no quadrante mais ao norte e mais ao oeste, em sentido horário, os novos países seriam chamados de Nlogônia do Noroeste, Nlogônia do Nordeste, Nlogônia do Sudeste e Nlogônia do Sudoeste.
                
                    
                
                    A ONU determinou que fosse disponibilizada uma página na Internet para que os habitantes pudessem consultar em qual dos novos países suas residências estão, e você foi contratado para ajudar a implementar o sistema.";"A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um inteiro K indicando o número de consultas que serão realizadas (0 < K ≤ 103). A segunda linha de um caso de teste contém dois números inteiros N e M representando as coordenadas do ponto divisor (-104 < N, M < 104). Cada uma das K linhas seguintes contém dois inteiros X e Y representando as coordenadas de uma residência (-104 ≤ X, Y ≤ 104).Em todas as coordenadas dadas, o primeiro valor  corresponde à direção leste-oeste, e o segundo valor corresponde à direção norte-sul.
                
                    O final da entrada é indicado por uma linha que contém apenas o número zero.";"Para cada caso de teste da entrada seu programa deve imprimir uma linha contendo:
                
                    
                        a palavra divisa se a residência encontra-se em cima de uma das linhas divisórias (norte-sul ou leste-oeste);
                    
                        NO se a residência encontra-se na Nlogônia do Noroeste;
                    
                        NE se a residência encontra-se na Nlogônia do Nordeste;
                    
                        SE se a residência encontra-se na Nlogônia do Sudeste;
                    
                        SO se a residência encontra-se na Nlogônia do Sudoeste.";True;1 / 10;9136;5802;63.51%
1092;Maior Subseqüência Crescente;Ad-Hoc;10;"Determinar a subseqüência (contígua) crescente de maior comprimento em uma lista de números é um problema já clássico em competições de programação. Este é o problema que você deve resolver aqui, mas para não deixar você bocejando de tédio enquanto o soluciona, introduzimos uma pequena modificação: a lista de números é dada na forma de uma matriz bidimensional e a seqüência de comprimento máximo está “embutida” em uma submatriz da
	matriz original.

	Vamos definir mais precisamente o problema. A linearização de uma matriz bidimensional é a justaposição de suas linhas, da primeira à última. Uma submatriz é uma região retangular (de lados paralelos aos da matriz) de uma matriz. O tamanho de uma submatriz é seu número de elementos. Você deve escrever um programa que, dada uma matriz de números inteiros, determine a maior submatriz que, quando linearizada, resulta em uma seqüência crescente.

	A figura abaixo mostra alguns exemplos de submatrizes de tamanho máximo que contêm subseqüências crescentes. Note que mais de uma submatriz que contém uma subseqüência de comprimento máximo pode estar presente em uma mesma matriz. Note ainda que numa seqüência crescente não pode haver elementos repetidos: 22, 31, 33 é uma seqüência crescente, ao passo que 22, 31, 31, 33 não é.";"A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros N e M indicando as dimensões da matriz (1 ≤ N, M ≤ 600). Cada uma das N linhas seguintes contém M inteiros, separados por um espaço, descrevendo os elementos da matriz. O elemento Xi,j da matriz é o j-ésimo inteiro da i-ésima linha da entrada(-106 ≤ Xi,j ≤ 106).

	O final da entrada é indicado por uma linha que contém apenas dois zeros, separados por um espaço em branco.";Para cada um dos casos de teste da entrada seu programa deve imprimir uma única linha, contendo o número de elementos da maior submatriz que, quando linearizada, resulta em uma seqüência crescente.;True;10 / 10;709;168;23.70%
1093;Vampiros;Matemática;4;"Felipinho está empolgado com seu novo jogo de RPG sobre guerras entre clãs de vampiros. Nesse jogo ele representa um personagem de um vampiro e constantemente entra em conflito contra vampiros de outros clãs. Tais batalhas são realizadas com base nas características de cada personagem envolvido e com a ajuda de um dado comum de seis faces. Por simplicidade, vamos considerar apenas as lutas entre dois vampiros, vampiro 1 e vampiro 2. Cada um possui uma energia vital (chamaremos de EV1 e EV2 respectivamente) e, além disso, são determinadas uma força de ataque AT e uma capacidade de dano D.

	O combate é realizado em turnos da maneira descrita a seguir. A cada turno um dado é rolado, se o valor obtido for menor do que ou igual a AT, o vampiro 1 venceu o turno, caso contrário o vampiro 2 é quem venceu. O vencedor suga energia vital do adversário igual ao valor D, ou seja, D pontos de EV são diminuídos do perdedor e acrescentados ao vencedor. O combate segue até que um dos vampiros fique com EV igual a ou menor do que zero.

	Por exemplo, suponhamos que EV1=7, EV2=5, AT=2 and D=4. Rola-se o dado e o valor obtido foi 3. Nesse caso, o vampiro 2 venceu o turno e, portanto, 4 pontos de EV são diminuídos do vampiro 1 (EV1) e acrescentados ao vampiro 2 (EV2) Sendo assim, os novos valores seriam EV1=3 e EV2=9. Observe que se no próximo turno o vampiro 2 ganhar novamente, o combate irá terminar. Os valores de AT e D são constantes durante todo o combate, apenas EV1 e EV2 variam.

	Apesar de gostar muito do jogo, Felipinho acha que os combates estão muito demorados e gostaria de conhecer de antemão a probabilidade de vencer, para saber se vale a pen	a lutar. Assim, ele pediu que você escrevesse um programa que, dados os valores iniciais de EV1, EV2, além de AT e D, calculasse a probabilidade de o vampiro 1 vencer o combate.";A entrada consiste de vários casos de teste. Cada caso de teste consiste de uma única linha, contendo 4 inteiros EV1, EV2, AT e D separados por espaços (1 ≤ EV1, EV2 ≤ 10, 1 ≤ AT ≤ 5 and 1 ≤ D ≤ 10). O final da entrada é indicado por uma linha contendo quatro zeros, separados por espaços.;Para cada caso de teste da entrada seu programa deve imprimir uma única linha. A linha deve conter apenas um número real, escrito com precisão de uma casa decimal, representando, em termos de percentagem, a probabilidade de o vampiro 1 vencer o combate.;False;4 / 10;2212;1280;57.87%
1094;Experiências;Iniciante;2;"Maria acabou de iniciar seu curso de graduação na faculdade de medicina e precisa de sua ajuda para organizar os experimentos de um laboratório o qual ela é responsável. Ela quer saber no final do ano, quantas cobaias foram utilizadas no laboratório e o percentual de cada tipo de cobaia utilizada.
    
	Este laboratório em especial utiliza três tipos de cobaias: sapos, ratos e coelhos. Para obter estas informações, ela sabe exatamente o número de experimentos que foram realizados, o tipo de cobaia utilizada e a quantidade de cobaias utilizadas em cada experimento.";A primeira linha de entrada contém um valor inteiro N que indica os vários casos de teste que vem a seguir. Cada caso de teste contém um inteiro Quantia (1 ≤ Quantia ≤ 15) que representa a quantidade de cobaias utilizadas e um caractere Tipo ('C', 'R' ou 'S'), indicando o tipo de cobaia (R:Rato S:Sapo C:Coelho).;Apresente o total de cobaias utilizadas, o total de cada tipo de cobaia utilizada e o percentual de cada uma em relação ao total de cobaias utilizadas, sendo que o percentual deve ser apresentado com dois dígitos após o ponto.;False;2 / 10;63154;29263;46.34%
1095;Sequencia IJ 1;Iniciante;1;Você deve fazer um programa que apresente a sequencia conforme o exemplo abaixo.;Não há nenhuma entrada neste problema.;Imprima a sequencia conforme exemplo abaixo;False;1 / 10;52278;34608;66.20%
1096;Sequencia IJ 2;Iniciante;1;Você deve fazer um programa que apresente a sequencia conforme o exemplo abaixo.;Não há nenhuma entrada neste problema.;Imprima a sequencia conforme exemplo abaixo;False;1 / 10;45095;30326;67.25%
1097;Sequencia IJ 3;Iniciante;1;Você deve fazer um programa que apresente a sequencia conforme o exemplo abaixo.;Não há nenhuma entrada neste problema.;Imprima a sequencia conforme exemplo abaixo.;False;1 / 10;34174;27707;81.08%
1098;Sequencia IJ 4;Iniciante;4;Você deve fazer um programa que apresente a sequencia conforme o exemplo abaixo.;Não há nenhuma entrada neste problema.;Imprima a sequencia conforme exemplo abaixo.;False;4 / 10;50725;21202;41.80%
1099;Soma de Ímpares Consecutivos II;Iniciante;1;Leia um valor inteiro N que é a quantidade de casos de teste que vem a seguir. Cada caso de teste consiste de dois inteiros X e Y. Você deve apresentar a soma de todos os ímpares existentes entre X e Y.;A primeira linha de entrada é um inteiro N que é a quantidade de casos de teste que vem a seguir. Cada caso de teste consiste em uma linha contendo dois inteiros X e Y.;Imprima a soma de todos valores ímpares entre X e Y.;False;1 / 10;46553;28935;62.15%
1100;Movimentos do Cavalo;Grafos;4;"Pedro está fazendo uma pesquisa sobre o problema do movimento do cavalo em um tabuleiro de xadrez e incumbiu você da tarefa de encontrar o menor conjunto de movimentos possíveis, podendo sair de qualquer quadrado a e podendo chegar em qualquer quadrado b dentro do tabuleiro, sendo que a e b são quadrados diferentes. Ele pensa que a parte mais difícil do problema é determinar o menor número de movimentos do cavalo entre 2 quadrados fornecidos e que uma vez que você está comprometido com esta tarefa, encontrar a sequência de movimentos entre estes 2 quadrados será uma tarefa muito fácil.

	É claro que você sabe que o movimento é vice versa. Portanto você deve fornecer a Pedro um programa que resolva esta questão.

	Seu trabalho então será escrever um programa que, pegando dois quadrados a e b como entrada, determine o número de movimentos para encontrar a rota mais curta de a até b.";A entrada contém um ou mais casos de teste. Cada caso de teste consiste de uma linha contendo dois quadrados separados por um espaço. Um quadrado será uma string consistindo de uma letra (a-h) representando a coluna e um dígito (1-8) representando a linha do tabuleiro de xadrez (veja figura acima).;"para cada caso de teste imprima uma linha dizendo ""To get from xx to yy takes n knight moves."". No caso xx é a origem, yy é o destino e n é a quantidade de movimentos necessários para ir de xx  até yy.";True;4 / 10;2818;1613;57.24%
1101;Sequência de Números e Soma;Iniciante;4;Leia um conjunto não determinado de pares de valores M e N (parar quando algum dos valores for menor ou igual a zero). Para cada par lido, mostre a sequência do menor até o maior e a soma dos inteiros consecutivos entre eles (incluindo o N e M).;O arquivo de entrada contém um número não determinado de valores M e N. A última linha de entrada vai conter um número nulo ou negativo.;Para cada dupla de valores, imprima a sequência do menor até o maior e a soma deles, conforme exemplo abaixo.;False;4 / 10;72236;29354;40.64%
1102;Ataque Fulminante;Geometria Computacional;10;"Desde que o Rei da Nlogônia construiu, décadas atrás, um enorme muro de proteção ao redor de todo o reino, os seus habitantes vivem em segurança. O muro é imponente, extremamente reforçado, e tem o formato de um círculo que envolve todos os domínios do Rei.

	No entanto, há algumas semanas os habitantes da Nlogônia estão apreensivos. Há boatos de que cientistas da Quadradônia, um povo bárbaro que habita as vizinhanças da Nlogônia, desenvolveram uma arma mortal, capaz de pulverizar tudo que esteja em sua mirada.

	A nova arma é um canhão que emite um feixe de prótons que se espalha com ângulo ø a partir da boca do canhão. A direção do tiro é indicada por um ângulo alpha, medido a partir do eixo x, no sentido anti-horário. A figura abaixo ilustra (a) um exemplo de ataque, (b) o que restaria da Nlogônia e (c) a área que seria destruída.

	

	Dados a coordenada do canhão, a direção do tiro e o ângulo de espalhamento do feixe de prótons, bem como a coordenada do centro e o valor do raio do muro de proteção, você deve escrever um programa para calcular a área da Nlogônia que será destruída.";"A entrada contém vários casos de teste. Cada caso de teste é composto por duas linhas. A primeira linha contém três números inteiros X, Y , R, com (X, Y ) representando as coordenadas do centro do círculo do muro de proteção (0 ≤ X ≤ 1000 e 0 ≤ Y ≤ 1000), e R o seu raio (1≤R≤100). A segunda linha contém quatro números inteiros P , Q, A e T , com (P, Q) representando as coordenadas da localização do canhão (0≤P≤1000 e 0≤Q≤1000), A representando a direção, em graus, do tiro (0≤A≤359), e T representa o ângulo de espalhamento, também em graus (1≤T≤179). O ângulo A é medido a partir do eixo x no sentido anti-horário, e o canhão está sempre fora dos domínios da Nlogônia, ou seja, a distância entre (X, Y ) e (P, Q) é maior do que R.

	O final da entrada é indicado por uma linha que contém três zeros separados por espaços em branco.";Para cada caso de teste da entrada seu programa deve imprimir uma única linha, contendo um número real, escrito com precisão de uma casa decimal, indicando a área da Nlogônia que seria destruída pelo ataque.;True;10 / 10;590;67;11.36%
1103;Alarme Despertador;Ad-Hoc;3;"Daniela é enfermeira em um grande hospital, e tem os horários de trabalho muito variáveis. Para piorar, ela tem sono pesado, e uma grande dificuldade para acordar com relógios despertadores.

	Recentemente ela ganhou de presente um relógio digital, com alarme com vários tons, e tem esperança que isso resolva o seu problema. No entanto, ela anda muito cansada e quer aproveitar cada momento de descanso. Por isso, carrega seu relógio digital despertador para todos os lugares, e sempre que tem um tempo de descanso procura dormir, programando o alarme despertador para a hora em que tem que acordar. No entanto, com tanta ansiedade para dormir, acaba tendo dificuldades para adormecer e aproveitar o descanso.

	Um problema que a tem atormentado na hora de dormir é saber quantos minutos ela teria de sono se adormecesse imediatamente e acordasse somente quando o despertador tocasse. Mas ela realmente não é muito boa com números, e pediu sua ajuda para escrever um programa que, dada a hora corrente e a hora do alarme, determine o número de minutos que ela poderia dormir.";"A entrada contém vários casos de teste. Cada caso de teste é descrito em uma linha, contendo quatro números inteiros H  1 , M 1 , H2 e M 2, com H1:M1 representando a hora e minuto atuais, e H2:M2 representando a hora e minuto para os quais o alarme  despertador foi programado (0≤H1≤23, 0≤M1≤59, 0≤H2≤23, 0≤M2 ≤59).

	O final da entrada é indicado por uma linha que contém apenas quatro zeros, separados por espaços em branco.";Para cada caso de teste da entrada seu programa deve imprimir uma linha, cada uma contendo um número inteiro, indicando o número de minutos que Daniela tem para dormir.;False;3 / 10;25574;10207;39.91%
1104;Troca de Cartas;Ad-Hoc;4;"Alice e Beatriz colecionam cartas de Pokémon. As cartas são produzidas para um jogo que reproduz a batalha introduzida em um dos mais bem sucedidos jogos de videogame da história, mas Alice e Beatriz são muito pequenas para jogar, e estão interessadas apenas nas cartas propriamente ditas. Para facilitar, vamos considerar que cada carta possui um identificador único, que é um número inteiro.

	Cada uma das duas meninas possui um conjunto de cartas e, como a maioria das garotas de sua idade, gostam de trocar entre si as cartas que têm. Elas obviamente não têm interesse emtrocar cartas idênticas, que ambas possuem, e não querem receber cartas repetidas na troca.Além disso, as cartas serão trocadas em uma única operação de troca: Alice dá para Beatriz um sub-conjunto com N cartas distintas e recebe de volta um outro sub-conjunto com N cartas distintas.

	As meninas querem saber qual é o número máximo de cartas que podem ser trocadas. Por exemplo, se Alice tem o conjunto de cartas {1, 1, 2, 3, 5, 7, 8, 8, 9, 15} e Beatriz o conjunto {2, 2, 2, 3, 4, 6, 10, 11, 11}, elas podem trocar entre si no máximo quatro cartas. Escreva um programa que, dados os conjuntos de cartas que Alice e Beatriz possuem, determine o número máximo de cartas que podem ser trocadas.";"A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois números inteiros A e B, separados por um espaço em branco, indicando respectivamente o número de cartas que Alice e Beatriz possuem (1 ≤ A ≤ 104 e 1 ≤ B ≤ 104). A segunda linha contém A números inteiros Xi, separados entre si por um espaço em branco, cada número indicando uma carta do conjunto de Alice (1 ≤ Xi ≤ 105). A terceira linha contém B números inteiros Yi, separados entre si por um espaço em branco, cada número indicando uma carta do conjunto de Beatriz (1 ≤ Yi ≤ 105). As cartas de Alice e Beatriz são apresentadas em ordem não decrescente.

	O final da entrada é indicado por uma linha que contém apenas dois zeros, separados por um espaço em branco.";Para cada caso de teste da entrada seu programa deve imprimir uma única linha, contendo um numero inteiro, indicando o número máximo de cartas que Alice e Beatriz podem trocar entre si.;False;4 / 10;7774;3095;39.81%
1105;Sub-prime;Ad-Hoc;3;"A mais recente crise econômica foi em parte causada pela forma como os bancos faziam empréstimos para pessoas que não tinham capacidade de honrá-los e revendiam tais empréstimos para outros bancos (debêntures). Obviamente, quando as pessoas pararam de pagar os empréstimos, o sistema inteiro entrou em colapso.
                
                A crise foi tão profunda que acabou atingindo países do mundo inteiro, inclusive a Nlogônia, onde o honrado primeiro ministro Man Dashuva ordenou que o presidente do Banco Central procurasse uma solução para o problema. Esse, por sua vez, teve uma idéia brilhante: se cada banco fosse capaz de liquidar seus empréstimos somente com suas reservas monetárias, todos os bancos sobreviveriam e a crise seria evitada. Entretanto, com o elevado número de debêntures e bancos envolvidos, essa tarefa é extremamente complicada, e portanto ele pediu a sua ajuda para escrever um programa que, dados os bancos e as debêntures emitidas, determine se é possível que todos os bancos paguem suas dívidas, utilizando suas reservas monetárias e seus créditos.";"A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros B e N, indicando respectivamente o número de bancos (1 ≤ B ≤ 20) e o número de debêntures emitidas pelos bancos (1 ≤ N ≤ 20). Os bancos são identificados por inteiros entre 1 e B. A segunda linha contém B inteiros Ri separados por espaços, indicando as reservas monetárias de cada um dos B bancos (0 ≤ Ri ≤ 104, para 1 ≤ i ≤ B). As N linhas seguintes contêm cada uma três inteiros separados por espaços: um inteiro D, indicando o banco devedor (1 ≤ D ≤ B), um inteiro C, indicando o banco credor (1 ≤ C ≤ B e D ≠ C), e um inteiro V, indicando o valor da debênture (1 ≤ V ≤ 104).
                
                O final da entrada é indicado por uma linha que contém apenas dois zeros, separados por um espaço em branco.";Para caso de teste, seu programa deve imprimir uma única linha, contendo um único caractere: 'S', se for possível liquidar todos as debêntures sem intervenção do Banco Central da Nlogônia, e 'N', se algum banco precisar de empréstimos do governo para liquidar suas debêntures.;False;3 / 10;4955;2812;56.75%
1106;Dragster;Paradigmas;6;"Embora não seja uma modalidade muito popular no Brasil, as corridas de dragsters atraem multidões nos EUA. Os fãs gostam de ver os carros velozes correndo a velocidades de até 400 km/h, mesmo que só por alguns segundos. Muitos competidores são mecânicos amadores que apenas incluiram foguetes e outros artefatos para criarem carros ultra velozes. As competições de dragsters são disputadas em torneios de eliminação, onde cada disputa consiste de dois competidores correndo lado a lado e somente um deles sendo declarado o vencedor (o que chegar primeiro, claro). Os vencedores são então rearranjados em novas partidas, até que no final somente um competidor seja declarado o campeão.

	Rubens é um piloto experiente, com carreira em diversas categorias, inclusive a Fórmula 1. Entretanto, após enfrentar alguns contratempos, resolveu dedicar-se a competições de dragsters.

	Aproveitando-se da larga experiência que ganhou durante a Fórmula 1, ele consegue, observando os competidores, dizer qual a probabilidade de cada um dos competidores envolvidos ser o vencedor de uma dada disputa.

	Embora Rubens seja bom piloto, não é muito bom em matemática nem em programação, e pediu a sua ajuda para, dadas as probabilidades calculadas por Rubens para a disputa entre cada par de pilotos, e a descrição das corridas do torneio, determinar a probabilidade que ele tem de vencer o torneio.";"A entrada é composta de vários casos de teste. A primeira linha de um caso de teste contém um inteiro N indicando o número de competidores do torneio (2≤N≤300). Na descrição do torneio, os competidores são identificados por inteiros de 1 a N, e as corridas são identificadas por inteiros de N + 1 a 2 × N - 1. Rubens é sempre identificado pelo número 1. As N linhas seguintes descrevem a matriz M de probabilidades calculada por Rubens. A linha i contém N números reais M[i, j] separados por espaços (0 ≤ M[i, j] ≤ 1, para 1 ≤ i ≤ N e 1 ≤ j ≤ N). Cada elemento M[i, j] da matriz indica a probabilidade de o competidor i vencer o confronto com o competidor j (0.001 ≤ M[i, j] ≤ 0.999 e M[i, j] + M[j, i] = 1 para i ≠ j , e M[i, j] = 0 para i = j).

	As probabilidades serão sempre dadas com três casas decimais de precisão. Cada uma das N - 1 linhas seguintes contém dois inteiros A, B descrevendo uma corrida, sendo que A e B representam identificadores de competidores ou de corridas (1 ≤ A ≤ 2 x N - 1 e 1 ≤ B ≤ 2 x N - 1). Note que a primeira dessas linhas descreve a corrida identificada por N +1, a segunda linha descreve a corrida identificada por N +2 e assim por diante. Quando um identificador de corrida k aparece na entrada como A, isto significa que o competidor que venceu a corrida k é quem disputará a corrida contra B. Da mesma forma, quando um identificador de corrida k aparece na entrada como B, isto significa que o competidor que venceu a corrida k é quem disputará a corrida contra A.

	O final da entrada é indicado por uma linha que contém apenas um número zero.";Para cada caso de teste da entrada seu programa deve imprimir uma única linha, contendo um número real, escrito com precisão de seis casas decimais, indicando a probabilidade de Rubens vencer o torneio.;False;6 / 10;260;130;50.00%
1107;Escultura à Laser;Ad-Hoc;3;"Desde a sua invenção, em 1958, os raios laser têm sido utilizados em uma imensa variedade de aplicações, como equipamentos eletrônicos, instrumentos cirúrgicos, armamentos, e muito mais.

                

                A figura acima mostra um diagrama esquemático de um equipamento para esculpir, com laser, um bloco de material maciço. Na figura vemos um emissor laser que se desloca horizontalmente para a direita e para a esquerda com velocidade constante. Quando o emissor é ligado durante o deslocamento, uma camada de espessura constante é removida do bloco, sendo vaporizada pelo laser.
                
                A figura abaixo ilustra o processo de escultura a laser, mostrando um exemplo de (a) um bloco, com 5 mm de altura por 8 mm de comprimento, no início do processo, (b) o formato que se deseja que o bloco esculpido tenha, e (c) a sequência de remoção das camadas do bloco durante o processo, considerando que a cada varredura uma camada de espessura de 1 mm é removida.
                
                Na primeira varredura, o pedaço numerado como 1 é removido; na segunda varredura, o pedaço numerado como 2 é removido, e assim por diante. Durante o processo de remoção, o laser foi ligado um total de 7 vezes, uma vez para cada pedaço de bloco removido.
                
                

                Escreva um programa que, dados a altura do bloco, o comprimento do bloco, e a forma final que o bloco deve ter, determine o número total vezes de que o laser deve ser ligado para esculpir o bloco.";"A entrada contém vários casos de teste. Cada caso de teste é composto por duas linhas. A primeira linha de um caso de teste contém dois números inteiros A e C, separados por um espaço em branco, indicando respectivamente a altura (1 ≤ A ≤ 104) e o comprimento (1 ≤ C ≤ 104) do bloco a ser esculpido, em milímetros. A segunda linha contém C números inteiros Xi, cada um indicando a altura final, em milímetros, do bloco entre as posições i e i + 1 ao longo do comprimento (0 ≤ Xi ≤ A, para 0 ≤ i ≤ C - 1). Considere que a cada varredura uma camada de espessura 1 milímetro é removida do bloco ao longo dos pontos onde o laser está ligado.
                
                O final da entrada é indicado por uma linha que contém apenas dois zeros, separados por um espaço em branco.";Para cada caso de teste da entrada seu programa deve imprimir uma única linha, contendo um número inteiro, indicando o número de vezes que o laser deve ser ligado para esculpir o bloco na forma indicada.;True;3 / 10;4553;1987;43.64%
1108;Torres de Telefonia Celular;Geometria Computacional;9;"Uma nova operadora de telefonia pretende oferecer serviços de telefone residencial em sua cidade. Os telefones serão residenciais, mas a operadora vai utilizar tecnologia de telefonia celular, com torres de transmissão, para evitar os gastos de construir uma rede de cabos por toda a cidade. A potência do transmissor/receptor colocado em uma torre define o raio de cobertura da torre (que por sua vez define a área de cobertura do equipamento, que é um círculo, já que a cidade é perfeitamente plana). O custo do equipamento instalado em cada torre depende de sua potência, e portanto de seu raio de cobertura. A operadora decidiu que utilizará exatamente duas torres na cidade.


	O mesmo tipo de equipamento será instalado nas duas torres, ou seja, as duas torres terão o mesmo raio de cobertura. Como a operadora quer poder oferecer o seu serviço para todas as residências, a área de cobertura das duas torres em conjunto deve englobar todas as resid^encias da cidade. Adicionalmente, o raio de cobertura das duas torres deve ser o menor possível, para miniminar o custo dos equipamentos. A figura abaixo mostra duas possíveis configurações de cobertura das duas torres para uma cidade com dez residências. Tanto (a) quanto (b) oferecem cobertura a todas as residências da cidade, mas (b) é a que utiliza o menor raio de cobertura possível.

	

	Dada a localização de cada residência na cidade, você deve escrever um programa para calcular o menor raio de cobertura das torres, de forma a garantir que todas as residências sejam cobertas.";"A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um número inteiro N, o número de residências da cidade (3 ≤ N ≤ 40). Cada uma das N linhas seguintes contém dois inteiros X e Y , separados por um espaço em branco (0 ≤ X ≤ 104 e 0 ≤ Y ≤ 104), representando a coordenada de uma residência. Cada residência tem uma localização diferente.


	O final da entrada é indicado por uma linha que contém apenas um zero.";"Para cada caso de teste da entrada seu programa deve imprimir uma única linha, contendo um número real, escrito com precisão de duas casas decimais, indicando o raio de cobertura do equipamento a ser utilizado nas duas torres.


	O resultado de seu programa deve ser escrito na saída padrão.";True;9 / 10;285;90;31.58%
1109;Burlando a Maratona;Ad-Hoc;10;"Pela primeira vez a Escola Livre de Matemática, Filosofia e Lingüística de Skyrim vai receber a Maratona de Expressões Regulares (regex) (RegExCon). A maratona acontece da seguinte forma: os participantes competem sempre contra 1 oponente. Um ganha um perde. No final, só o campeão restará. Em uma disputa os participantes recebem uma lista com várias expressões regulares e para cada uma os participantes devem calcular se várias palavras dadas são reconhecidas ou não por tal regex.
                
                    Como membro da Escola Livre você está participando, e quer ganhar. Para garantir sua vitória, você deve escrever um programa para resolver o problema e deixá-lo rodando na sua Máquina Calculadora de Coisas Legais em casa. Como um mago, especialista em Alteração e Ilusão, você pode facilmente controlar sua máquina com a mente, então você consegue usar o programa durante a maratona. É proibido utilizar magia na maratona, mas coincidentemente a Escola de Winterhold vai sediar um Congresso de Magos, então você não precisa se preocupar, use sua magia.
                
                    Uma expressão regular é utilizada para descrever uma linguagem (um conjunto de palavras). Considere que o alfabeto de todas linguagens neste problema é {a, b}.
                
                    Uma regex R é válida se:
                    1) R é “a” ou “b”;
                    2) R é “(P.S)” onde P e S são expressões regulares;
                    3) R é “(P|S)” onde P e S são expressões regulares;
                    4) R é “(P*)” onde P é uma expressão regular.
                
                    Expressões regulares podem ser aninhadas. Não há operação ternária com os operadores “.” e “|”, nem operação binária com o operator “*”. Palavras sempre comçam com “(“ e terminam com “)”. O conjunto L de palavras reconhecidas por R é formado seguindo estas regras:
                
                    1) Se R é “(a)”, L = {a};
                    2) Se R é “(b)”, L = {b};
                    3) Se R é “(P.S)”, L = todas palavras que podem ser obtidas a partir da concatenação das palavras p e s, onde p é reconhecida por P e s por S;
                    4) Se R é “(P|S)”, L = união dos conjuntos de palavras reconhecidas por P e S;
                    5) Se R é “(P*)”, R reconhece a concatenação de 0 ou mais palavras reconhecidas por P.";A entrada é formada por vários casos de teste. A primira linha de um caso de teste contém uma regex (0 < tamanho da regex < 150). A próxima linha contém um inteiro P (1 ≤ P ≤ 100). Cada uma das próximas P linhas contém uma palavra (tamanho < 50) formada por 'a's e 'b's que representa a seguinte questão: “Esta palavra é reconhecida pela regex dada?”.;Para cada questão descrita anteriormente, responda “Y” (sem aspas) se a resposta é “sim” ou “N” (sem aspas) se a resposta é “não”. Imprima uma linha em branco após cada caso de teste, inclusive após o último.;False;10 / 10;859;55;6.40%
1110;Jogando Cartas Fora;Estruturas e Bibliotecas;3;"Dada uma pilha de n cartas enumeradas de 1 até n com a carta 1 no topo e a carta n na base.  A seguinte operação é ralizada enquanto tiver 2 ou mais cartas na pilha.


	Jogue fora a carta do topo e mova a próxima carta (a que ficou no topo) para a base da pilha.

	Sua tarefa é encontrar a sequência de cartas descartadas e a última carta remanescente.

	Cada linha de entrada (com exceção da última) contém um número n ≤ 50. A última linha contém 0 e não deve ser processada. Cada número de entrada produz duas linhas de saída. A primeira linha apresenta a sequência de cartas descartadas e a segunda linha apresenta a carta remanescente.";A entrada consiste em um número indeterminado de linhas contendo cada uma um valor de 1 até 50. A última linha contém o valor 0.;"Para cada caso de teste, imprima duas linhas. 
	A primeira linha apresenta a sequência de cartas descartadas, cada uma delas separadas por uma vírgula e um espaço. A segunda linha apresenta o número da carta que restou. Nenhuma linha tem espaços extras no início ou no final. Veja exemplo para conferir o formato esperado.";True;3 / 10;16178;8008;49.50%
1111;Desrugenstein;Grafos;7;A cidade de Desrugenstein é uma bagunça completa. Olhando para o mapa ela parece organizada, já que foi criada na forma de uma grade quadrada, mas não há padrões de direções. Cada esquina diz para onde você pode ir a partir de lá (norte, sul, leste, oeste). O prefeito Daniel Cobra é cabeça-dura e preguiçoso o suficiente para deixar tudo como está e proibir qualquer tentativa de mudança. Incapaz de fazer muito, o Conselheiro Espiritual Mestre de Desrugenstein, Giordano Marfyn, te pediu, Conselheiro Espiritual Nível XVII de Desrugenstein, programador-chefe de Desrugenstein, para escrever um programa para calcular o custo de ir de uma esquina (x, y) a outra esquina (z, w), considerando as ruas bagunçadas.;"O arquivo de entrada possui vários casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 10) que representa altura e largura da grade quadrada que mapeia a cidade (uma grade N x N). A entrada termina quando N = 0, caso que não deve ser processado. Cada uma das próximas N linhas representa uma rua da cidade, começando da mais ao norte (N – 1) até a mais ao sul. Em cada uma destas linhas há 4*N inteiros, 4 para cada esquina: A (norte) B (sul) C (oeste) D (leste). Cada um é 0 se não é possível seguir na respectiva direção a partir daquela esquina, ou 1 se é possível.

	Depois do mapa da cidade, seu programa deve ler um inteiro P (1 ≤ P ≤ 100). As próximas P linhas contém 4 inteiros cada, x0 y0 x1 y1 representando a questão: “Qual o custo mínimo de ir da esquina (x0 , y0) até a esquina (x1 , y1)?”. O custo de ir de uma esquina para a esquina mais próxima em qualquer direção é 1.";Para cada questão, responda “Impossible”, se não existe um caminho válido entre as esquinas (respeitando as regras de direções para esquinas), ou o custo mínimo, se há caminho(s). Imprima uma linha em branco após cada caso de teste.;False;7 / 10;1266;419;33.10%
1112;Schweisen;Estruturas e Bibliotecas;8;"Conan é um importante membro do Clube Atlético de Desrugenstein, que possui um time de futebol de campo profissional: ele é o responsável pelo gramado do campo onde ocorrem os jogos em casa. Em 2048 anos de história, o campo do CAD sempre esteve em perfeitas condições para os jogos, graças a Conan. Ele já ganhou vários prêmios por isso, sendo o mais importante deles o ""Grama de Ouro"", prêmio que ganhou 1024 vezes.

                Amanhã acontecerá a final do campeonato Universal de futebol, e o CAD é um dos finalistas. Como o jogo será em casa, Conan foi ver o estado do gramado e reparar se necessário. Chegando lá, entrou em desespero ao ver várias schweisen no campo, estragando todo o gramado!!
                
                Sendo assim, Conan precisa de sua ajuda para determinar quanto irá gastar com deswevileutssen para matar todas as schweisen. Cada deswevileutssen mata uma schwisen. Conan pode lhe mandar mensagens de dois tipos: dizendo que encontrou algumas schweisen, ou perguntando quanto ele vai gastar para matar certas schweisen.";"A entrada possui vários casos de teste. A primeira linha de um caso de teste contém 3 inteiros X (≤ 1000), Y (≤ 1000) e P (≤ 10), que representam, respectivamente, o tamanho (X e Y) do campo e o preço de cada deswevileutssen. A próxima linha contém um inteiro Q (≤ 10000). As próximas Q linhas representam mensagens de Conan para você, e estão em uma das duas seguintes formas:
                
                - A N X Y - “Achei N (≤ 10) schweisen em (X,Y) - (0 ≤ X < Largura), (0 ≤ Y < Altura)”
                
                - P X Y Z W - “Quanto vou gastar para matar todas as schweisen na área retangular de (X,Y) até (Z,W)?”
                
                Considere que no início nenhuma schweisen foi vista.
                
                A entrada termina quando X, Y e P são iguais a 0.";"Para cada mensagem do tipo ""P"", imprima o valor que responde a pergunta feita. Deixe uma linha em branco após cada caso de teste, inclusive após o último.";False;8 / 10;1979;454;22.94%
1113;Crescente e Decrescente;Iniciante;1;Leia uma quantidade indeterminada de duplas de valores inteiros X e Y. Escreva para cada X e Y uma mensagem que indique se estes valores foram digitados em ordem crescente ou decrescente.;A entrada contém vários casos de teste. Cada caso contém dois valores inteiros X e Y. A leitura deve ser encerrada ao ser fornecido valores iguais para X e Y.;Para cada caso de teste imprima “Crescente”, caso os valores tenham sido digitados na ordem crescente, caso contrário imprima a mensagem “Decrescente”.;False;1 / 10;49694;31839;64.07%
1114;Senha Fixa;Iniciante;2;"Escreva um programa que repita a leitura de uma senha até que ela seja válida. Para cada leitura de senha incorreta informada, escrever a mensagem ""Senha Invalida"". Quando a senha for informada corretamente deve ser impressa a mensagem ""Acesso Permitido"" e o algoritmo encerrado. Considere que a senha correta é o valor 2002. ";A entrada é composta por vários casos de testes contendo valores inteiros.;Para cada valor lido mostre a mensagem correspondente à descrição do problema.;False;2 / 10;61413;37817;61.58%
1115;Quadrante;Iniciante;1;Escreva um programa para ler as coordenadas (X,Y) de uma quantidade indeterminada de pontos no sistema cartesiano. Para cada ponto escrever o quadrante a que ele pertence. O algoritmo será encerrado quando pelo menos uma de duas coordenadas for NULA (nesta situação sem escrever mensagem alguma).;A entrada contém vários casos de teste. Cada caso de teste contém 2 valores inteiros.;Para cada caso de teste mostre em qual quadrante do sistema cartesiano se encontra a coordenada lida, conforme o exemplo.;False;1 / 10;42102;29107;69.13%
1116;Dividindo X por Y;Iniciante;1;Escreva um algoritmo que leia 2 números e imprima o resultado da divisão do primeiro pelo segundo. Caso não for possível mostre a mensagem “divisao impossivel” para os valores em questão.;A entrada contém um número inteiro N. Este N será a quantidade de pares de valores inteiros (X e Y) que serão lidos em seguida.;"Para cada caso mostre o resultado da divisão com um dígito após o ponto decimal, ou “divisao impossivel” caso não seja possível efetuar o cálculo.
	
	Obs.: Cuide que a divisão entre dois inteiros em algumas linguagens como o C e C++ gera outro inteiro. Utilize cast :)";False;1 / 10;45398;27479;60.53%
1117;Validação de Nota;Iniciante;1;Faça um programa que leia as notas referentes às duas avaliações de um aluno. Calcule e imprima a média semestral. Faça com que o algoritmo só aceite notas válidas (uma nota válida deve pertencer ao intervalo [0,10]). Cada nota deve ser validada separadamente.;A entrada contém vários valores reais, positivos ou negativos. O programa deve ser encerrado quando forem lidas duas notas válidas.;"Se uma nota inválida  for lida, deve ser impressa a mensagem ""nota invalida"".
	Quando duas notas válidas forem lidas, deve ser impressa a mensagem ""media = "" seguido do valor do cálculo. O valor deve ser apresentado com duas casas após o ponto decimal.";False;1 / 10;46789;27742;59.29%
1118;Várias Notas Com Validação;Iniciante;4;"Escreva um programa para ler as notas da primeira e a segunda avaliação de um aluno. Calcule e imprima a média semestral.
                O programa só deverá aceitar notas válidas (uma nota válida deve pertencer ao intervalo [0,10]). Cada nota deve ser validada separadamente.

                No final deve ser impressa a mensagem “novo calculo (1-sim 2-nao)”, solicitando ao usuário que informe um código (1 ou 2) indicando se ele deseja ou não executar o algoritmo novamente, (aceitar apenas os código 1 ou 2). Se for informado o código 1 deve ser repetida a execução de todo o programa para permitir um novo cálculo, caso contrário o programa deve ser encerrado.";O arquivo de entrada contém vários valores reais, positivos ou negativos. Quando forem lidas duas notas válidas, deve ser lido um valor inteiro  X . O programa deve parar quando o valor lido para este X for igual a 2.;"Se uma nota inválida for lida, deve ser impressa a mensagem “nota invalida”. Quando duas notas válidas forem lidas, deve ser impressa a mensagem “media = ” seguido do valor do cálculo. 
				
				Antes da leitura de X deve ser impressa a mensagem ""novo calculo (1-sim 2-nao)"" e esta mensagem deve ser apresentada novamente se o valor da entrada padrão para X for menor do que 1 ou maior do que 2, conforme o exemplo abaixo.

                A média deve ser impressa com dois dígitos após o ponto decimal.";False;4 / 10;42192;19914;47.20%
1119;A Fila de Desempregados;Estruturas e Bibliotecas;4;Em uma séria tentativa de reduzir a fila de desempregados, o novo Partido Nacional Trabalhista dos Rinocerontes Verdes decidiu uma estratégia pública. Todos os dias, todos os candidatos desempregados serão colocados em um grande círculo, voltados para dentro. Alguém é escolhido arbitrariamente como número 1, e os outros são numerados no sentido horário até N (os quais estarão à esquerda do 1°). Partindo do 1° e movendo-se no sentido horário, um contador oficial do laboratório conta k posições e retira um candidato, enquanto outro oficial começa a partir de N e se move no sentido anti-horário, contando m posições e retirando outro candidato. Os dois que são escolhidos são então enviados como estagiários para a reciclagem e se ambos os funcionários escolherem a mesma pessoa, ela (ele) é enviado para se tornar um político. Cada funcionário, em seguida, começa a contar novamente com a pessoa próxima disponível e o processo continua até que não reste ninguém. Note-se que as duas vítimas (desculpe, estagiários) deixam o anel ao mesmo tempo, por isso é possível que um funcionário conte a pessoa já selecionado pelo outro funcionário.;"Escreva um programa que leia sucessivamente três números (N, k e m; k, m > 0, 0 < N < 20) e determina a ordem no qual os candidatos são retirados para treinamento . Cada conjunto de três números estará em uma linha distinta e o final da entrada de dados é sinalizado por três zeros (0 0 0).";Para cada conjunto de três números de entrada, imprima uma linha de números especificando a ordem na qual as pessoas são escolhidas. Cada número pode ter até 3 dígitos. Liste o par escolhido partindo da pessoa escolhida pelo contador do sentido horário. Os pares sucessivos são separados por vírgula (mas não deverá haver vírgula após o último escolhido).;False;4 / 10;3159;1188;37.61%
1120;Revisão de Contrato;Strings;5;"Durante anos, todos os contratos da Associação de Contratos da Modernolândia (ACM) foram datilografados em uma velha máquina de datilografia.
                    
                    Recentemente Sr. Miranda, um dos contadores da ACM, percebeu que a máquina apresentava falha em um, e apenas um, dos dígitos numéricos. Mais especificamente, o dígito falho, quando datilografado, não é impresso na folha, como se a tecla correspondente não tivesse sido pressionada. Ele percebeu que isso poderia ter alterado os valores numéricos representados nos contratos e, preocupado com a contabilidade, quer saber, a partir dos valores originais negociados nos contratos, que ele mantinha em anotações manuscritas, quais os valores de fato representados nos contratos. Por exemplo, se a máquina apresenta falha no dígito 5, o valor 1500 seria datilografado no contrato como 100, pois o 5 não seria impresso. Note que o Sr. Miranda quer saber o valor numérico representado no contrato, ou seja, nessa mesma máquina, o número 5000 corresponde ao valor numérico 0, e não 000 (como ele de fato aparece impresso).";"A entrada consiste de diversos casos de teste, cada um em uma linha. Cada linha contém dois inteiros D e N (1 ≤ D ≤ 9, 1 ≤ N < 10100 ), representando, respectivamente, o dígito que está apresentando problema na máquina e o número que foi negociado originalmente no contrato (que podem ser grande, pois Modernolândia tem sido acometida por hiperinflação nas últimas décadas).
                    
                    O ultimo caso de teste é seguido por uma linha que contém apenas dois zeros separados por espaços em branco.";Para cada caso de teste da entrada o seu programa deve imprimir uma linha contendo um único inteiro V, o valor numérico representado de fato no contrato.;False;5 / 10;19579;6539;33.40%
1121;Robô Colecionador;Ad-Hoc;4;"Um dos esportes favoritos na Robolândia é o Rali dos Robôs. Este rali é praticado em uma arena retangular gigante de N linhas por M colunas de células quadradas. Algumas das células estão vazias, algumas contêm figurinhas da Copa (muito apreciadas pelas inteligências artificiais da Robolândia) e algumas são ocupadas por pilastras que sustentam o teto da arena. Em seu percurso os robôs podem ocupar qualquer célula da arena, exceto as que contém pilastras, que bloqueiam o seu movimento. O percurso do robô na arena durante o rali é determinado por uma sequência de instruções. Cada instrução é representada por um dos seguintes caracteres: ‘D’, ‘E’ e ‘F’, significando, respectivamente, “gire 90 graus para a direita”, “gire 90 graus para a esquerda” e “ande uma célula para a frente”. O robô começa o rali em uma posição inicial na arena e segue fielmente a sequência de instruções dada (afinal, eles são robôs!). Sempre que o robô ocupa uma célula que contém uma figurinha da Copa ele a coleta. As figurinhas da Copa não são repostas, ou seja, cada figurinha pode ser coletada uma unica vez. Quando um robô tenta andar para uma célula onde existe uma pilastra ele patina, permanecendo na célula onde estava, com a mesma orientação. O mesmo também acontece quando um robô tenta sair da arena.
                    
                    Dados o mapa da arena, descrevendo a posição de pilastras e figurinhas, e a sequência de instruções de um robô, você deve escrever um programa para determinar o número de figurinhas coletadas pelo robô.";"A entrada contém vários casos de teste. A primeira linha de um caso de teste contém três números inteiros N, M e S (1 ≤ N, M ≤ 100, 1 ≤ S ≤ 5 × 104 ), separados por espaços em branco, indicando respectivamente o número de linhas e o número de colunas da arena e o número de instruções para o robô. Cada uma das N linhas seguintes da entrada descreve uma linha de células da arena e contém uma cadeia com M caracteres. A primeira linha que aparece na descrição da arena é a que está mais ao Norte; a primeira coluna que aparece na descrição de uma linha de células da arena é a que está mais a Oeste.
                    
                    Cada célula da arena pode conter um dos seguintes caracteres:
                
                    
                        ‘.’ — célula normal;
                    
                        ‘*’ — célula que contém uma figurinha da Copa;
                    
                        ‘#’ — célula que contém uma pilastra;
                    
                        ‘N’, ‘S’, ‘L’, ‘O’ — célula onde o robô inicia o percurso (única na arena). A letra representa a orientação inicial do robô (Norte, Sul, Leste e Oeste, respectivamente).
                
                
                    
                    A ultima linha da entrada contém uma sequência de S caracteres dentre ‘D’, ‘E’ e ‘F’, representando as instruções do robô.
                
                    O último caso de teste é seguido por uma linha que contém apenas três números zero separados por um espaço em branco.";Para cada rali descrito na entrada seu programa deve imprimir uma única linha contendo um único inteiro, indicando o número de figurinhas que o robô colecionou durante o rali.;False;4 / 10;4051;1663;41.05%
1122;Livro-Caixa;Ad-Hoc;7;"A FCC (Fundação de Combate à Corrupção) desmontou um grande esquema de corrupção na Nlogônia. Durante a operação, foram apreendidos diversos cadernos e livros com anotações documentando as transações ilícitas realizadas pelo esquema.
	
	Vários desses livros contém páginas com os valores de várias transações em nilogos (a moeda local da Nlogônia, cujo símbolo é N$) e o fluxo de caixa resultante dessas transações. Por exemplo, se em uma página foi registrada uma entrada de N$ 7, uma entrada de N$ 2, uma saída de N$ 3, uma entrada de N$ 1 e outra saída de N$ 11, o fluxo de caixa nesta página é 7 + 2 − 3 + 1 − 11 = −4.
	
	No entanto, para dificultar o trabalho da polícia, os contraventores não anotaram em seus livros qual o tipo de cada transação. No exemplo acima, as anotaçõs na página seriam apenas 7, 2, 3, 1 e 11 (sem indicação se elas são entradas ou saídas). O fluxo de caixa de cada página sempre é anotado normalmente, com o sinal (no caso, -4).
	
	Para obter a condenação dos contraventores, os promotores precisam poder afirmar com certeza se cada operação foi uma entrada ou uma saída. No exemplo acima, a transação de N$ 7 certamente foi uma entrada, e a transação de N$ 11 certamente foi uma saída. Mas, não se pode afirmar nada sobre as transações de N$ 2, N$ 3, e N$ 1. As transações de N$ 2 e N$ 1 poderiam ter sido entradas e a transação de N$ 3 uma saída, ou N$ 2 e N$ 1 poderiam ter sido saídas e a transação de N$ 3 uma entrada.
	
	Muitos cadernos possuem números relativamente grandes, com muitas transações, então é difícil para a polícia reconstruir o histórico de operações. Por isso, eles precisam de um programa que o faça de forma eficiente.";"A entrada consiste de vários casos de teste. A primeira linha da entrada contém dois inteiros N e F, indicando respectivamente o número de operações na página (2 ≤ N ≤ 40) e o fluxo de caixa para esta página (−16000 ≤ F ≤ 16000). Cada uma das N linhas seguintes contém um inteiro Ti indicando o valor da i-ésima transação (1 ≤ Ti ≤ 1000).
	
	O ultimo caso de teste é seguido por uma linha que contém apenas dois zeros separados por espaços em branco.";"Para cada caso de teste da entrada seu programa deve imprimir uma única linha com N caracteres. O i-ésimo caractere deve ser ‘+’, se for possível afirmar com certeza que a i-ésima operação foi uma entrada, ‘-’, se for possível afirmar com certeza que a i-ésima operação foi uma saída, e ‘?’, se não for possível determinar com certeza qual o tipo da operação.
	
	Caso não exista uma sequência de entradas e saídas que totalize o fluxo de caixa indicado, imprima uma única linha contendo o caractere ‘*’.";False;7 / 10;921;355;38.55%
1123;Desvio de Rota;Grafos;3;"O sistema rodoviário de um país interliga todas as suas N cidades de modo que, a partir de uma cidade qualquer, é possível chegar a cada uma das outras cidades trafegando pelas estradas existentes. Cada estrada liga duas cidades distintas, tem mão dupla e um único posto de pedágio (o pedágio é pago nos dois sentidos de tráfego). As estradas não se intersectam a não ser nas cidades. Nenhum par de cidades é interligado por duas ou mais estradas.
    
	A Transportadora Dias oferece um serviço de transporte de encomendas entre as cidades. Cada encomenda deve ser levada de uma cidade A para uma outra cidade B. A direção da Transportadora Dias define, para cada encomenda, uma rota de serviço, composta por C cidades e C−1 estradas: a primeira cidade da rota de serviço é a origem da encomenda, a última o destino da encomenda. A rota de serviço não passa duas vezes pela mesma cidade, e o veículo escolhido para fazer o transporte de uma encomenda pode trafegar apenas pela rota de serviço definida.
    
	Certo dia, no entanto, o veículo que executava uma entrega quebrou e precisou ser levado para conserto em uma cidade que não está entre as cidades de sua rota de serviço. A direção da Transportadora Dias quer saber qual é o menor custo total, em termos de pedágio, para que o veículo entregue a encomenda na cidade destino, a partir da cidade em que foi consertado, mas com uma restrição adicional: se em algum momento o veículo passar por uma das cidades que compõem a sua rota de serviço, ele deve voltar a obedecer a rota de serviço.";"A entrada contém vários casos de teste. A primeira linha de um caso de teste contém quatro inteiros N, M, C e K (4 ≤ N ≤ 250, 3 ≤ M ≤ N×(N−1)/2, 2 ≤ C ≤ N−1 e C ≤ K ≤ N−1), representando, respectivamente, o número de cidades do país, o número de estradas, o número de cidades na rota de serviço e a cidade em que o veículo foi consertado. As cidades são identificadas por inteiros de 0 a N−1. A rota de serviço é 0, 1, ... , C−1, ou seja, a origem é 0, de 0 passa para 1, de 1 para 2 e assim por diante, até o destino C−1.
	
	As M linhas seguintes descrevem o sistema rodoviário do país. Cada uma dessas linhas descreve uma estrada e contém três inteiros U, V e P (0 ≤ U, V ≤ N−1, U ≠ V, 0 ≤ P ≤ 250), indicando que há uma estrada interligando as cidades U e V com custo de pedágio P. O último caso de teste é seguido por uma linha contendo quatro zeros separados por espaço em branco.";Para cada caso de teste, o seu programa deve imprimir uma única linha, contendo um único inteiro T, o custo total mínimo necessário, em termos de pedágio, para que o veículo chegue ao destino.;False;3 / 10;1934;883;45.66%
1124;Elevador;Geometria Computacional;7;"A FCC (Fábrica de Cilindros de Carbono) fabrica vários tipos de cilindros de carbono. A FCC está instalada no décimo andar de um prédio, e utiliza os vários elevadores do prédio para transportar os cilindros. Por questão de segurança, os cilindros devem ser transportados na posição vertical; como são pesados, no máximo dois cilindros podem ser transportados em uma única viagem de elevador. Os elevadores têm formato de paralelepípedo e sempre têm altura maior que a altura dos cilindros.
                    
                    Para minimizar o número de viagens de elevador para transportar os cilindros, a FCC quer, sempre que possível, colocar dois cilindros no elevador. A figura abaixo ilustra, esquematicamente (vista superior), um caso em que isto é possível (a), e um caso em que isto não é possível (b):
                    
                
                    
                Como existe uma quantidade muito grande de elevadores e de tipos de cilindros, a FCC quer que você escreva um programa que, dadas as dimensões do elevador e dos dois cilindros, determine se é possível colocar os dois cilindros no elevador.";"A entrada contém vários casos de teste. A primeira e única linha de cada caso de teste contém quatro números inteiros L, C, R1 e R2, separados por espaços em branco, indicando respectivamente a largura do elevador (1 ≤ L ≤ 100), o comprimento do elevador (1 ≤ C ≤ 100), e os raios dos cilindros (1 ≤ R1, R2 ≤ 100).
                    
                    O último caso de teste é seguido por uma linha que contém quatro zeros separados por espaços em branco.";Para cada caso de teste, o seu programa deve imprimir uma única linha com um único caractere: ‘S’ se for possível colocar os dois cilindros no elevador e ‘N’ caso contrário.;True;7 / 10;7532;1880;24.96%
1125;Fórmula 1;Ad-Hoc;3;"A temporada de Fórmula 1 consiste de uma série de corridas, conhecidas como Grandes Prêmios, organizados pela Federação Internacional de Automobilismo (FIA). Os resultados de cada Grande Prêmio são combinados para determinar o Campeonato Mundial de Pilotos. Mais especificamente, a cada Grande Prêmio são distribuídos pontos para os pilotos, dependendo da classificação na corrida. Ao final da temporada, o piloto que tiver somado o maior número de pontos é declarado Campeão Mundial de Pilotos.
                    
                    Os organizadores da Fórmula 1 mudam constantemente as regras da competição, com o objetivo de dar mais emoção às disputas. Uma regra modificada para a temporada de 2010 foi justamente a distribuição de pontos em cada Grande Prêmio. Desde 2003 a regra de pontuação premiava os oito primeiros colocados, obedecendo a seguinte tabela:
                
                
                    
                
                Ou seja, o piloto vencedor ganhava 10 pontos, o segundo colocado ganhava 8 pontos, e assim por diante.
                
                    Na temporada de 2010, os dez primeiros colocados receberão pontos obedecendo a seguinte tabela:
                
                
                    
                
                
                A mudança no sistema de pontuação provocou muita especulação sobre qual teria sido o efeito nos Campeonatos Mundiais passados se a nova pontuação tivesse sido utilizada nas temporadas anteriores. Por exemplo, teria Lewis Hamilton sido campeão em 2008, já que a diferença de sua pontuação total para Felipe Massa foi de apenas um ponto? Para acabar com as especulações, a FIA contratou você para escrever um programa que, dados os resultados de cada corrida de uma temporada determine Campeão Mundial de Pilotos para sistemas de pontuações diferentes.";"A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois números inteiros G e P separados por um espaço em branco, indicando respectivamente o número de Grandes Prêmios (1 ≤ G ≤ 100) e o número de pilotos (1 ≤ P ≤ 100). Os pilotos são identificados por inteiros de 1 a P. Cada uma das G linhas seguintes indica o resultado de uma corrida, e contém P inteiros separados por espaços em branco. Em cada linha, o i-ésimo número indica a ordem de chegada do pilodo i na corrida (o primeiro número indica a ordem de chegada do piloto 1 naquela corrida, o segundo número indica a ordem de chegada do piloto 2 na corrida, e assim por diante). A linha seguinte contém um único número inteiro S indicando o número de sistemas de pontuação (1 ≤ S ≤ 10), e após, cada uma das S linhas seguintes contém a descrição de um sistema de pontuação. A descrição de um sistema de pontuação inicia com um inteiro K (1 ≤ K ≤ P), indicando a última ordem de chegada que receberá pontos, seguido de um espaço em branco, seguido de K inteiros k0, k1, ... , kn−1 (1 ≤ ki ≤ 100) separados por espaços em branco, indicando os pontos a serem atribuídos (o primeiro inteiro indica os pontos do primeiro colocado, o segundo inteiro indica os pontos do segundo colocado, e assim por diante).
                    
                    O último caso de teste é seguido por uma linha que contém apenas dois números zero separados por um espaço em branco.";Para cada caso de sistema de pontuação da entrada seu programa deve imprimir uma linha, que deve conter o identificador do Campeão Mundial de Pilotos. Se houver mais de um Campeão Mundial Pilotos (ou seja, se houver empate), a linha deve conter todos os Campeões Mundiais de Pilotos, em ordem crescente de identificador, separados por um espaço em branco.;True;3 / 10;2232;1074;48.12%
1126;Guerra nas Estrelas;Geometria Computacional;9;"Há muito tempo atrás, em uma galáxia muito, muito distante, havia um império que dominava a todos. Uma aliança rebelde, descontente com essa situação, decidiu lutar contra tais forças, com o objetivo de restaurar a democracia e a paz para todos os povos.
	
	Capitão Cael, um dos comandantes rebeldes, está navegando pelo espaço com seu cruzador espacial, quando de repente percebe a presença de uma nave do Império (de acordo com os padrões estéticos da época, todas as naves são tetraedros). Após ser surpreendido por um ataque inicial do império, Cael percebe que está em posição de disparo e que pode posicionar um canhão em qualquer ponto de sua nave.
	
	Como a potência de sua arma é fixa, Cael quer posicionar seu canhão de forma que a distância percorrida pelo feixe de energia até a nave do Império seja mínima, para evitar perdas. Para isso, ele pediu para que você, sub-capitão Cin Talig, calculasse a menor distância entre a nave rebelde e a nave do Império.";"A entrada contém vários casos de teste. A primeira linha da entrada contém um inteiro T, indicando o número de casos de teste da entrada. Cada um dos T casos de teste é composto de oito linhas, cada uma descrevendo a coordenada de um vértice de uma nave; as quatro primeiras linhas indicam os vértices da nave rebelde; as quatro linhas seguintes indicam os vértices da nave do Império.
	
	Cada descrição de coordenada é uma linha contendo três inteiros X, Y, Z indicando a coordenada do vértice no espaço (−103 ≤ X ≤ 103, −103 ≤ Y ≤ 103, −103 ≤ Z ≤ 103); os quatro vértices de cada nave sempre definem um tetraedro de volume não nulo e as duas naves são sempre disjuntas.";Para cada caso de teste da entrada seu programa deve imprimir um único número, indicando a distância entre as duas naves, com duas casas decimais de precisão. A distância entre as duas naves é sempre maior que zero.;False;9 / 10;265;76;28.68%
1127;Plágio Musical;Ad-Hoc;8;"As notas musicais são unidades básicas da música ocidental tradicional. Cada nota está associada a uma frequência. Duas notas musicais cujas frequêcias fundamentais tenham uma relação de potência de 2 (uma metade da outra, uma duas vezes a outra, etc.) são percebidas como muito similar. Por isso, todas as notas com esse tipo de relação recebem o mesmo nome, como descrito a seguir.
                    
                    Há doze notas básicas, em uma sequência crescente de frequências, cada nota separada da anterior por uma mesma distância na escala musical (essa distância é chamada de meio-tom). Sete dessas doze notas são representadas por letras do alfabeto (A, B, C, D, E, F e G). A tabela abaixo mostra a distância, em meio-tons, entre essas notas.
                
                
                
                    
                    Note que há cinco notas que não são representadas pelas letras do alfabeto: as que estão entre A e B, entre C e D, entre D e E, entre F e G e entre G e A.
                    
                    As notas podem ser modificadas por duas alterações cromáticas: sustenido e bemol, representadas respectivamente pelos símbolos ‘#’ e ‘b’. Sustenido altera a nota em meio tom para cima, e bemol altera a nota em meio tom para baixo. Uma nota com alteração cromática é denotada pelo nome da nota seguida pelo símbolo da alteração. Note que com esse esquema conseguimos representar todas as doze notas.
                    
                    A figura abaixo ilustra o nome das notas, segundo o esquema descrito acima, em um trecho de teclado de piano.

                
                
                    Uma melodia pode ser representada por uma sequência de notas musicais. Por exemplo,
                    
                    A   A   D   C#   C#   D   E   E   E   F#   A   D   G#   A
                    
                    é uma melodia muito conhecida. Note no entanto que, como as distâncias entre os meios-tons são sempre iguais, a mesma melodia pode ser escrita iniciando em outra nota (dizemos que a melodia está em outro tom):
                    
                    B   B   E   D#   D#   E   Gb   Gb   Gb   G#   B   E   A#   B
                    
                    Sua vizinha é uma famosa compositora que suspeita que tenham plagiado uma de suas músicas. Ela pediu a sua ajuda para escrever um programa que, dada a sequência de notas da melodia de sua música, e a sequência de notas de um trecho de melodia suspeito, verifique se o trecho supeito ocorre, em algum tom, na música dada.";"A entrada é composta por vários casos de teste. A primeira linha de um caso de teste contém dois inteiros M e T (1 ≤ M ≤ 100000, 1 ≤ T ≤ 10000, T ≤ M ), indicando respectivamente o número de notas da música e do trecho suspeito de ter sido plagiado. As duas linhas seguintes contém M e T notas, respectivamente, indicando as notas da música e do trecho suspeito.
                    
                    As notas em cada linha são separadas por espaço; cada nota é uma dentre ‘A’, ‘B’, ‘C’, ‘D’, ‘E’, ‘F’ ou ‘G’, possivelmente seguida de um modificador: ‘#’ para um sustenido ou ‘b’ para um bemol.
                    
                    O último caso de teste é seguido por uma linha que contém apenas dois números zero separados por um espaço em branco.";Para cada caso de teste, imprima uma única linha contendo um caractere: ‘S’ caso o trecho realmente tenha sido plagiado pela música ou ‘N’ caso contrário.;True;8 / 10;3074;548;17.83%
1128;Ir e Vir;Grafos;5;"Numa certa cidade há N intersecções ligadas por ruas de mão única e ruas com mão dupla de direcão. É uma cidade moderna, de forma que muitas ruas atravessam túneis ou têm viadutos. Evidentemente é necessário que se possa viajar entre quaisquer duas intersecções, isto é, dadas duas intersecções V e W, deve ser possível viajar de V para W e de W para V.
                    
                    Sua tarefa é escrever um programa que leia a descrição do sistema de tráfego de uma cidade e determine se o requisito de conexidade é satisfeito ou não.";"A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois números inteiros N e M, separados por um espaço em branco, indicando respectivamente o número de intersecções (2 ≤ N ≤ 2000) e o número de ruas (2 ≤ M ≤ N(N−1)/2). O caso de teste tem ainda mais M linhas, que contêm, cada uma, uma descrição de cada uma das M ruas. A descrição consiste de três inteiros V, W e P, separados por um espaço em branco, onde V e W são identificadores distintos de intersecções (1 ≤ V, W ≤ N , V ≠ W ) e P pode ser 1 ou 2; se P = 1 então a rua é de mão única, e vai de V para W; se P = 2 então a rua é de mão dupla, liga V e W. Não existe duas ruas ligando as mesmas intersecções.
                    
                    O ultimo caso de teste é seguido por uma linha que contém apenas dois números zero separados por um espaço em branco.";Para cada caso de teste seu programa deve imprimir uma linha contendo um inteiro G, onde G é igual a 1 se o requisito de conexidade está satisfeito, ou G é igual a 0, caso contrário.;False;5 / 10;3594;1797;50.00%
1129;Leitura Ótica;Ad-Hoc;3;"O professor João decidiu aplicar somente provas de múltipla escolha, para facilitar a correção. Em cada prova, cada questão terá cinco alternativas (A, B, C, D e E), e o professor vai distribuir uma folha de resposta para cada aluno. Ao final da prova, as folhas de resposta serão escaneadas e processadas digitalmente para se obter a nota de cada aluno. Inicialmente, ele pediu ajuda a um sobrinho, que sabe programar muito bem, para escrever um programa para extrair as alternativas marcadas pelos alunos nas folhas de resposta. O sobrinho escreveu uma boa parte do software, mas não pode terminá-lo, pois precisava treinar para a Maratona de Programação.
    
	Durante o processamento, a prova é escaneada usando tons de cinza entre 0 (preto total) e 255 (branco total). Após detectar os cinco retângulos correspondentes a cada uma das alternativas, ele calcula a média dos tons de cinza de cada pixel, retornando um valor inteiro correspondente àquela alternativa. Se o quadrado foi preenchido corretamente o valor da média é zero (preto total). Se o quadrado foi deixado em branco o valor da média é 255 (branco total). Assim, idealmente, se os valores de cada quadrado de uma questão são (255, 0, 255, 255, 255), sabemos que o aluno marcou a alternativa B para essa questão. No entanto, como as folhas são processadas individualmente, o valor médio de nível de cinza para o quadrado totalmente preenchido não é necessariamente 0 (pode ser maior); da mesma forma, o valor para o quadrado não preenchido não é necessariamente 255 (pode ser menor). O prof. João determinou que os quadrados seriam divididos em duas classes: aqueles com média menor ou igual a 127 serão considerados pretos e aqueles com média maior a 127 serão considerados brancos.
	
	Obviamente, nem todas as questões das folhas de resposta são marcadas de maneira correta. Pode acontecer de um aluno se enganar e marcar mais de uma alternativa na mesma questão, ou não marcar nenhuma alternativa. Nesses casos, a resposta deve ser desconsiderada.
	
	O professor João necessita agora de um voluntário para escrever um programa que, dados os valores dos cinco retângulos correspondentes às alternativas de uma questão determine qual a alternativa corretamente marcada, ou se a resposta à questão deve ser desconsiderada.";"A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um número inteiro N indicando o número de questões da folha de respostas (1 ≤ N ≤ 255). Cada uma das N linhas seguintes descreve a resposta a uma questão e contém cinco números inteiros A, B, C, D e E, indicando os valores de nível de cinza médio para cada uma das alternativas da resposta (0 ≤ A, B, C, D, E ≤ 255).
	
	O ultimo caso de teste é seguido por uma linha que contém apenas um número zero.";Para cada caso de teste da entrada seu programa deve imprimir N linhas, cada linha correspondendo a uma questão. Se a resposta à questão foi corretamente preenchida na folha de resposta, a linha deve conter a alternativa marcada (‘A’, ‘B’, ‘C’, ‘D’ ou ‘E’). Caso contrário, a linha deve conter o caractere ‘*’ (asterisco).;False;3 / 10;9403;5277;56.12%
1130;Jogo da Velha;Ad-Hoc;10;"O jogo da velha é um dos jogos mais antigos da humanidade; os primeiros registros dele são do século I antes de Cristo, no Império Romano. João e Maria jogam bastante jogo da velha, mas depois de algum tempo eles decidiram jogar uma variante do jogo da velha tradicional, o jogo da velha 1-D.
                    
                    O jogo da velha 1-D é um jogo disputado por dois jogadores em um tabuleiro 1 × N; inicialmente, todas as casas do tabuleiro estão vazias. Os jogadores alternam-se desenhando uma cruz sobre uma casa vazia. O primeiro jogador a completar uma sequência de três ou mais cruzes em casas consecutivas ganha o jogo.
                    
                    Maria logo percebeu que, dependendo da situação do jogo, sendo sua vez de jogar, ela pode sempre garantir a vitória, independente das jogadas de João. Isto é relativamente fácil para tabuleiros menores, mas para tabuleiros maiores, mesmo após várias jogadas, esta tarefa é mais difícil; por isso, ela pediu que você escrevesse um programa que, dada a situação do tabuleiro, decide se ela tem uma estratégia vencedora.";"A entrada contém vários casos de teste. A primeira linha de caso de teste contém um inteiro N, indicando o tamanho do tabuleiro (3 ≤ N ≤ 104). A linha seguinte contém uma sequência de N caracteres indicando quais casas do tabuleiro já foram ocupadas: um ‘.’ indica que a casa correspondente está vazia, enquanto um ‘X’ indica que a casa já teve uma cruz desenhada sobre ela. A entrada nunca contém três ‘X’ consecutivos.
                    
                    O ultimo caso de teste é seguido por uma linha que contém um único número zero.";Para cada caso de teste da entrada seu programa deve imprimir uma única linha contendo um único caractere: ‘S’ caso Maria possua uma estratégia vencedora e ‘N’ caso contrário.;False;10 / 10;872;128;14.68%
1131;Grenais;Iniciante;2;"A Federação Gaúcha de Futebol contratou você para escrever um programa para fazer uma estatística do resultado de vários GRENAIS. Escreva um programa para ler o número de gols marcados pelo Inter e pelo Grêmio em um GRENAL. Logo após escrever a mensagem ""Novo grenal (1-sim 2-nao)"" e solicitar uma resposta. Se a resposta for 1, o algoritmo deve ser executado novamente solicitando o número de gols marcados pelos times em uma nova partida, caso contrário deve ser encerrado imprimindo:

	- Quantos GRENAIS fizeram parte da estatística.
	- O número de vitórias do Inter.
	- O número de vitórias do Grêmio.
	- O número de Empates.
	- Uma mensagem indicando qual o time que venceu o maior número de GRENAIS (ou ""Nao houve vencedor"", caso termine empatado).";O arquivo de entrada contém 2 valores inteiros, correspondentes aos gols marcados pelo Inter e pelo Grêmio respectivamente. Em seguida háverá um inteiro (1 ou 2), correspondente à repetição do programa.;"Após cada leitura dos gols, deve ser impressa a mensagem ""Novo grenal (1-sim 2-nao)"". Quando o algoritmo for encerrado devem ser mostradas as estatísticas conforme a descrição apresentada acima. Obs: a palavra ""Gremio"" deve ser impressa sem acento, conforme o exemplo abaixo.";False;2 / 10;35927;20371;56.70%
1132;Múltiplos de 13;Iniciante;2;Escreva um algoritmo que leia 2 valores inteiros X e Y calcule a soma dos números que não são múltiplos de 13 entre X e Y, incluindo ambos.;O arquivo de entrada contém 2 valores inteiros quaisquer, não necessariamente em ordem crescente.;Imprima a soma de todos os valores não divisíveis por 13 entre os dois valores lidos na entrada, inclusive ambos se for o caso.;False;2 / 10;48432;28192;58.21%
1133;Resto da Divisão;Iniciante;2;Escreva um programa que leia 2 valores X e Y e que imprima todos os valores entre eles cujo resto da divisão dele por 5 for igual a 2 ou igual a 3.;O arquivo de entrada contém 2 valores positivos inteiros quaisquer, não necessariamente em ordem crescente.;Imprima todos os valores conforme exemplo abaixo, sempre em ordem crescente.;False;2 / 10;55294;25683;46.45%
1134;Tipo de Combustível;Iniciante;1;"Um Posto de combustíveis deseja determinar qual de seus produtos tem a 
preferência de seus clientes. Escreva um algoritmo para ler o tipo de 
combustível abastecido (codificado da seguinte forma: 1.Álcool 
2.Gasolina 3.Diesel 4.Fim). Caso o usuário informe um código inválido 
(fora da faixa de 1 a 4) deve ser solicitado um novo código (até que 
seja válido). O programa será encerrado quando o código informado for o 
número 4.";A entrada contém apenas valores inteiros e positivos.;"Deve ser escrito a mensagem: ""MUITO OBRIGADO"" e a quantidade de 
clientes que abasteceram cada tipo de combustível, conforme exemplo.";False;1 / 10;42470;27637;65.07%
1135;Colônia de Formigas;Grafos;9;"Um grupo de formigas está muito orgulhoso pois construíram uma grande e magnífica colônia. No entanto, seu enorme tamanho tem se tornado um problema, pois muitas formigas não sabem o caminho entre algumas partes da colônia. Elas precisam de sua ajuda desesperadamente!
                
                     
                A colônia de formigas foi criada como uma série de N formigueiros conectados por túneis. As formigas, obssessivas como são, numeraram os formigueiros sequencialmente à medida que os construiam. O primeiro formigueiro, numerado 0, não necessitava nenhum túnel, mas para cada um dos formigueiros subsequentes, 1 até N-1, as formigas também construíram um único túnel que conectava o novo formigueiro a um dos formigueiros existentes. Certamente, esse túnel era suficiente para permitir que qualquer formiga visitasse qualquer formigueiro já construído, possivelmente passando através de outros formigueiros pelo percurso, portanto elas não se preocupavam em fazer novos túneis e continuavam construindo mais formigueiros.
                
                     
                O seu trabalho é: dada a estrutura de uma colônia e um conjunto de consultas, calcular, para cada uma das consultas, o menor caminho entre pares de formigueiros. O comprimento do caminho é a soma dos comprimentos de todos os túneis que necessitam ser visitados.";"Cada caso de teste se estende por várias linhas. A primeira linha contém um inteiro N representando a quantidade de formigueiros na colônia (2 ≤ N ≤ 105). Cada uma das próximas N-1 linhas contém dois inteiros que descrevem um túnel. A linha i, para 1 ≤ i ≤ N-1, contém Ai e Li, indicando que o formigueiro i foi conectado diretamente ao formigueiro Ai por um túnel de comprimento Li (0 ≤ Ai ≤ i-1 e 1 ≤ Li ≤ 109). A próxima linha contém um inteiro Q representando o número de consultas que seguem (1 ≤ Q ≤ 105). Cada uma das Q linhas seguintes descreve uma consulta e contém dois inteiros distintos S e T (0 ≤ S,T ≤ N-1), representando, respectivamente, os formigueiros de origem e destino.
                
                     
                O último caso de teste é seguido por uma linha contendo apenas um zero.";Para cada caso de teste, imprima uma única linha com Q inteiros, os comprimentos do menor caminho entre os dois formigueiros de cada consulta. Escreva os resultados para cada consulta na mesma ordem em que aparecem na entrada.;False;9 / 10;3052;849;27.82%
1136;Bingo!;Ad-Hoc;3;"Albert, Charles e Mary inventaram uma nova versão do clássico jogo de Bingo. Na versão tradicional, o jogo é presidido por um não-jogador conhecido como caller. No começo de cada partida, cada jogador recebe uma carta contendo uma única combinação de números de 0 até N dispostos em colunas e linhas. O caller opera um globo contendo N+1 bolas numeradas de 0 até N. Em cada turno, o caller sorteia uma bola do globo, anuncia o número sorteado aos jogadores e não a coloca novamente no globo. Cada jogador procura pelo número em sua carta e o marca caso o encontre. O primeiro jogador que marcar um padrão pré-definido completo em sua carta (uma linha horizontal, por exemplo) ganha um prêmio.

	 

	Na versão Albert-Charles-Mary, em cada turno, o caller sorteia uma primeira bola, coloca-a de volta no globo, sorteia uma segunda bola, coloca-a de volta no globo, e então anuncia a diferença absoluta entre os números das duas bolas. Para aumentar o entusiasmo, antes do início da partida, um subconjunto possivelmente vazio de bolas é retirado do globo, de forma que ao menos duas bolas permaneçam no globo. Eles gostariam de saber se cada número de 0 até N podem ainda ser anunciados utilizando a nova regra de sorteio e considerando apenas as bolas que permaneceram dentro do globo.";"Cada caso de teste é dado em exatamente duas linhas. A primeira linha contém dois inteiros N e B. O significado de N foi descrito acima (1 ≤ N ≤ 90), enquanto B representa o número de bolas que permaneceram no globo (2 ≤ B ≤ N+1). A segunda linha contém B inteiros distintos bi, indicando as bolas que permaneceram no globo (0 ≤ bi ≤ N).

	O último caso de teste é seguido por uma linha contendo dois zeros.";Para cada caso de teste, imprima uma única linha contendo um único caractere 'Y' se for possível anunciar todos os números de 0 até N, inclusive, ou um único caractere 'N' caso contrário.;False;3 / 10;4218;1982;46.99%
1137;Pontos Cocirculares;Geometria Computacional;8;"Você provavelmente sabe o que é um conjunto de pontos colineares: é um conjunto de pontos tal que existe uma linha reta que passa através de todos os pontos. Um conjunto de pontos cocirculares é definido da mesma forma, mas ao invés de uma linha reta, nós queremos saber se existe um círculo tal que todos os pontos do conjunto encontram-se sobre seu perímetro.

	A International Collinear Points Center (ICPC) designou a você a seguinte tarefa: dado um conjunto de pontos, calcule o tamanho do maior subconjunto de pontos cocirculares.";"Cada caso de teste se estende por várias linhas. A primeira linha contém um inteiro N representando o número de pontos no conjunto (1 ≤ N ≤ 100). Cada uma das próximas N linhas contém dois inteiros X e Y representando as coordenadas de um ponto do conjunto (-104  ≤ X,Y ≤ 104). Em cada caso de teste, não haverá dois pontos com mesma localização.

	O último caso de teste é seguido por uma linha contendo apenas um zero.";Para cada caso de teste, imprima uma única linha com um único inteiro representando o número de pontos em um dos maiores subconjuntos da entrada que são cocirculares.;False;8 / 10;642;295;45.95%
1138;Contagem de Dígitos;Ad-Hoc;8;Diana escreverá uma lista com todos os inteiros positivos entre A e B, inclusive, na base decimal e sem zeros à esquerda. Ela quer saber quantas vezes cada um dos dígitos irá ser usado.;"Cada caso de teste é dado em uma única linha que contém dois inteiros A e B (1 ≤ A ≤ B ≤ 108).
	O último caso de teste é seguido por uma linha contendo dois zeros.";Para cada caso de teste, imprima uma única linha com 10 inteiros representando o número de vezes que cada dígito é usado ao escrever todos os inteiros entre A e B, inclusive, na base decimal e sem zeros à esquerda. Escreva a contagem de cada dígito em ordem crescente do 0 até o 9.;False;8 / 10;4061;747;18.39%
1139;Necessidades Elétricas;Ad-Hoc;8;"Você irá construir uma nova fábrica na sua cidade. Já que você necessida de muita energia elétrica, ter a fábrica posicionada perto de uma estação de força é importante. Você quer construir uma lista priorizada das possíveis localizações.
	
		 
	
		A área onde a fábrica precisa ser construída pode ser representada como uma grade retangular de N linhas e M colunas de células. Algumas dessas células contem uma estação de força. A nova fábrica ocupa exatamente uma célula, e pode ser construída em qualquer célula livre (ou seja, qualquer célula que não contém uma estação de força).
	
		 
	
		Numerando as linhas de 1 até N e as colunas de 1 até M, a localização de uma célula pode ser descrita por dois inteiros. A célula ( i , j ) é a célula na linha i e coluna j. A distância entre as células (i0 , j0) e (i1 , j1) é max( |i0 - i1| , |j0 - j1| ) onde | x | representa o valor absoluto de x. A prioridade elétrica de uma localização é a menor distância até qualquer estação de força.
	
		 
	
		Com isso em mente, você vai numerar todas as possíveis localizações com inteiros consecutivos começando de 1. Você fará isso em ordem crescente de prioridade elétrica. Dentre locais com a mesma prioridade elétrica, você vai numerá-los em ordem crescente de seu índices de linha. Dentre locais com mesmas prioridade elétrica e índice de linha, você vai listá-los em ordem crescente de seu índices de coluna.
	
		 
	
		Na figura abaixo você pode ver uma grade 4 x 7. Células pretas são as células onde há uma estação de força. Células cinza escuras possuem prioridade elétrica 1, cinza claras prioridade elétrica 2 e células brancas prioridade elétrica 3. O número dentro de cada célula é o número atribuído por você à célula.
	
		 
	
		
	
		 
	
		Você receberá inúmeras consultas sobre a lista construída. Em cada consulta será dado um número representando a posição na lista final e você deverá dizer a qual célula foi atribuída a posição dada.";"Cada caso de teste se estende por várias linhas. A primeira linha contém três inteiros N, M e P, representando o número de linhas e colunas da grade (1 ≤ N,M  ≤ 109) e o número de estações de força (1 ≤ P ≤ 20). Cada uma das P linhas seguintes contém dois inteiros R e C representando a linha e a coluna de uma estação de força (1 ≤ R ≤ N e 1 ≤ C  ≤ M). Em cada caso de teste, todas as estações de força estão em células distintas. A próxima linha contém um único inteiro Q representando o número de consultas (1 ≤ Q ≤ 50). Então segue uma linha com Q inteiros p1, ... , pQ representando as posições da lista priorizada (1 ≤ pi ≤ N x M - P).

	 

	O último caso de teste é seguido de uma linha contendo três zeros.";Para cada caso de teste, imprima Q+1 linhas. A linha i das primeiras Q linhas devem conter dois inteiros representando a linha e a coluna da localização que foi atribuída ao número pi. A última linha de cada caso deve conter um único caractere '-' (hífen).;True;8 / 10;109;35;32.11%
1140;Flores Florescem da França;Ad-Hoc;2;"Fiona sempre amou poesia, e recentemente descobriu uma forma poética fascinante. Tautogramas são um caso especial de aliteração, que é a ocorrência da mesma letra no início de palavras adjacentes. Em particular, uma sentença é um tautograma se todas suas palavras começam com a mesma letra.

	

	Por exemplo, as seguintes sentenças são tautogramas:

	
		Flowers Flourish from France
	
		Sam Simmonds speaks softly
	
		Peter pIckEd pePPers
	
		truly tautograms triumph


	Fiona quer deslumbrar seu namorado com uma carta romântica repleta desse tipo de sentenças. Por favor, ajude Fiona a verificar se cada sentença que ela escreveu é um tautograma ou não.";"Cada caso de teste é dado em uma única linha que contém uma frase. Uma frase consiste de uma sequência de no máximo 50 palavras separadas por espaços simples. Uma palavra é uma sequência de no máximo 20 letras do alfabeto inglês (maiúsculas e minúsculas). Uma palavra contém ao menos uma letra e uma sentença contém ao menos uma palavra.

	

	O último caso de teste é seguido de uma linha contendo apenas o caractere '*' (asterisco).";Para cada caso de teste, imprima uma única linha contendo o caractere 'Y' se a sentença é um tautograma, ou um 'N' caso contrário.;False;2 / 10;8692;4155;47.80%
1141;Cultivando Strings;Strings;9;"Gene e Gina possuem um tipo peculiar de fazenda. Ao invés de criar animais e plantar vegetais como acontece em fazendas normais, eles cultivam strings. Uma string é uma sequência de caracteres. As strings, ao crescerem, adicionam caracteres à esquerda e/ou à direita delas mesmas, mas nunca perdem caracteres nem inserem caracteres no meio.
                    
                    Gene e Gina possuem uma coleção de fotos de algumas strings durante diferentes etapas de seus crescimentos. O problema é que a coleção não é rotulada, portanto eles esqueceram a qual string pertence cada uma das fotos. Eles querem montar um painel para ilustrar os procedimentos do cultivo de strings, mas eles necessitam sua ajuda para encontrar uma sequência de fotos apropriada.
                    
                    Cada foto ilustra uma string. A sequência de fotos precisa ter a seguinte propriedade: se si aparece imediatamente antes de si+1 na sequência, então si+1 é uma string que pode ter crescido a partir de si (ou seja, si é uma substring contígua de si+1). Além disso, eles não querem usar fotos repetidas, portanto todas as strings na sequência devem ser diferentes.
                    
                    Dado um conjunto de strings representando todas as fotos disponíveis, sua tarefa é calcular o tamanho da maior sequência que pode ser produzida com as restrições acima.";"Cada caso de teste se estende por várias linhas. A primeira linha contém um inteiro N representando o número de strings no conjunto (1 ≤ N  ≤ 104). Cada uma das próximas N linhas contém uma string não-vazia e única com no máximo 1000 caracteres minúsculos do alfabeto inglês. Em cada caso de teste, a soma dos tamanhos das strings é no máximo 106.
                    
                    O último caso de teste é seguido de uma linha contendo um zero.";Para cada caso de teste, imprima uma única linha com um único inteiro representando o tamanho da maior sequência de fotos que pode ser produzida.;False;9 / 10;3126;374;11.96%
1142;PUM;Iniciante;1;"Escreva um programa que leia um valor inteiro N. Este N é a quantidade 
de linhas de saída que serão apresentadas na execução do programa.";O arquivo de entrada contém um número inteiro positivo N.;Imprima a saída conforme o exemplo fornecido.;False;1 / 10;39880;29440;73.82%
1143;Quadrado e ao Cubo;Iniciante;1;Escreva um programa que leia um valor inteiro N (1 < N < 1000). Este N é a quantidade de linhas de saída que serão apresentadas na execução do programa.;O arquivo de entrada contém um número inteiro positivo N.;Imprima a saída conforme o exemplo fornecido.;False;1 / 10;36453;26319;72.20%
1144;Sequência Lógica;Iniciante;1;Escreva um programa que leia um valor inteiro N. N * 2 linhas de saída serão apresentadas na execução do programa, seguindo a lógica do exemplo abaixo. Para valores com mais de 6 dígitos, todos os dígitos devem ser apresentados.;O arquivo de entrada contém um número inteiro positivo N (1 < N < 1000).;Imprima a saída conforme o exemplo fornecido.;False;1 / 10;27897;21841;78.29%
1145;Sequência Lógica 2;Iniciante;5;Escreva um programa que leia dois valores X e Y. A seguir, mostre uma sequência de 1 até Y, passando para a próxima linha a cada X números.;O arquivo de entrada contém dois valores inteiros, (1 < X < 20) e (X < Y < 100000).;Cada sequência deve ser impressa em uma linha apenas, com 1 espaço em branco entre cada número, conforme exemplo abaixo. Não deve haver espaço em branco após o último valor da linha.;False;5 / 10;57969;22017;37.98%
1146;Sequências Crescentes;Iniciante;3;"Este programa deve ler uma variável inteira X inúmeras vezes (deve parar quando o valor no arquivo de entrada for igual a zero). Para cada valor lido imprima a sequência de 1 até X, com um espaço entre cada número e seu sucessor.
                    
                    Obs: cuide para não deixar espaço em branco após o último valor apresentado na linha ou você receberá Presentation Error.";O arquivo de entrada contém vários números inteiros. O último número no arquivo de entrada é 0.;Para cada número N do arquivo de entrada deve ser impressa uma linha de 1 até N, conforme o exemplo abaixo. Não deve haver espaço em branco após o último valor da linha.;False;3 / 10;52196;23511;45.04%
1147;Fuga do Cavalo;Ad-Hoc;6;"Seu amigo Pedro está aprendendo a jogar xadrez. Mas ele ainda não tem segurança de como pode movimentar o Cavalo. Desta forma, ele solicitou a você que desenvolvesse um programa que calcule, em apenas uma jogada, o número de distintos movimentos que o cavalo pode realizar, sem que o mesmo fique sobre o ataque de qualquer um dos 8 peões. Os movimentos do cavalo e dos peões são realizados conforme o jogo de xadrez tradicional, ou seja, o cavalo pode somente andar em “L”, e os peões atacar somente para frente em diagonal. Segue abaixo um exemplo:
                    
                    
                
                    
                
                Na imagem apresentada, das 8 distintas posições que o cavalo pode movimentar-se no tabuleiro, 2 delas estão sobre ataque (6b e 3e). Nas demais casas, o cavalo pode movimentar-se seguramente, conseguindo fugir do ataque de qualquer um dos peões. Note que na casa 2b já existe um peão, porém ainda é uma jogada válida, já que o cavalo pode movimentar-se nessa mesma casa e “matar” o peão.
            
                Portanto, para o exemplo apresentado, o número de movimentos seguros para o cavalo realizar são 6. Vale lembrar que os peões pretos somente podem se movimentar de cima para baixo no tabuleiro, ou seja, da linha 7 até a linha 1, não sendo permitido o seu retorno.";"A entrada consiste de diversos casos de teste. Cada caso de teste consiste em 9 linhas de entrada. A primeira linha indica a posição inicial do cavalo. As demais 8 linhas, representam as respectivas posições dos peões.
                    
                    O final da entrada consiste em uma única linha contendo somente o valor 0 (zero).";"Para cada teste de caso de entrada, seu programa deve imprimir uma única linha, contendo a seguinte descrição:
                    
                    Caso de Teste #Y: X movimento(s).
                    
                    onde Y representa o número do respectivo caso de teste, e X representa a quantidade de movimentos possíveis ao cavalo realizar, em uma única rodada, sem que fique sobre ataque de um ou mais peões.";True;6 / 10;2537;801;31.57%
1148;Países em Guerra;Grafos;7;"No ano 2050, após diversas tentativas da ONU de manter a paz no mundo, explode a terceira guerra mundial. Segredos industriais, comerciais e militares obrigaram todos os países a utilizar serviços de espionagem extremamente sofisticados, de forma que em cada cidade do mundo há ao menos um espião de cada país. Esses espiões precisam se comunicar com outros espiões, com informantes e mesmo com as suas centrais durante as suas ações. Infelizmente não existe uma forma segura de um espião se comunicar em um período de guerra, então as mensagens são sempre enviadas em código para que somente o destinatário consiga ler a mensagem e entender o seu significado.
	
	Os espiões utilizam o unico serviço que funciona no período de guerra, os correios. Cada cidade possui uma agência postal onde as cartas são enviadas. As cartas podem ser enviadas diretamente ao seu destino ou a outras agências postais, até que a carta chegue à agência postal da cidade de destino, se isso for possível.

	
	Uma agência postal na cidade A pode enviar diretamente uma carta impressa para a agência postal da cidade B se houver um acordo de envio de cartas, que determina o tempo, em horas, que uma carta leva para chegar da cidade A à cidade B (e não necessariamente o contrário). Se não houver um acordo entre as agências A e B, a agência A pode tentar enviar a carta a quantas agências for necessário para que a carta chegue ao seu destino, se isso for possível.

	
	Algumas agências são interligadas por meios eletrônicos de comunicação, como satélites e fibras ópticas. Antes da guerra, essas ligações atingiam todas as agências, fazendo com que uma carta fosse enviada de forma instantânea, mas durante o período de hostilidades cada país passou a controlar a comunicação eletrônica e uma agência somente pode enviar uma carta a outra agência por meio eletrônico (ou seja, instantaneamente) se ela estiver no mesmo país. Duas agências, A e B, estão no mesmo país se houver uma forma de uma carta impressa enviada de uma das agências ser entregue na outra agência.

	
	O serviço de espionagem do seu país conseguiu obter o conteúdo de todos os acordos de envios de mensagens existentes no mundo e deseja descobrir o tempo mínimo para se enviar uma carta entre diversos pares de cidades. Você seria capaz de ajudá-lo?";"A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros separados por um espaço, N (1 ≤ N ≤ 500) e E (0 ≤ E ≤ N2), indicando o número de cidades (numeradas de 1 a N) e de acordos de envio de mensagens, respectivamente. Seguem-se, então, E linhas, cada uma com três inteiros separados por espaços, X, Y e H (1 ≤ X, Y ≤ N, 1 ≤ H ≤ 1000), indicando que existe um acordo para enviar uma carta impressa da cidade X à cidade Y , e que tal carta será entregue em H horas.
	
	Em seguida, haverá uma linha com um inteiro K (0 ≤ K ≤ 100), o número de consultas. Finalmente, virão K linhas, cada uma representando uma consulta e contendo dois inteiros separados por um espaço, O e D (1 ≤ O, D ≤ N). Você deve determinar o tempo mínimo para se enviar uma carta da cidade O à cidade D. A entrada termina quando N = E = 0.";"Para cada caso de teste da entrada seu programa deve produzir K linhas na saída. A I-ésima linha deve conter um inteiro M , o tempo mínimo, em horas, para se enviar uma carta na I-ésima consulta. Se não houver meio de comunicação entre as cidades da consulta, você deve imprimir ”Nao e possivel entregar a carta”(sem acentos).
	
	Imprima uma linha em branco após cada caso de teste.";False;7 / 10;8681;2831;32.61%
1149;Somando Inteiros Consecutivos;Iniciante;1;Faça um algoritmo para ler um valor A e um valor N. Imprimir a soma de A para cada i com os valores (0 <= i <= N-1). Enquanto N for negativo ou ZERO, um novo N(apenas N) deve ser lido.;A entrada contém somente valores inteiros, podendo ser positivos ou negativos. Todos os valores estão na mesma linha.;A saída contém apenas um valor inteiro.;False;1 / 10;35065;17933;51.14%
1150;Ultrapassando Z;Iniciante;2;"Faça um programa que leia dois inteiros: X e Z (devem ser lidos tantos valores para Z quantos necessários, até que seja digitado um valor maior do que X para ele). Conte quantos números inteiros devem ser somados em sequência (considerando o X nesta soma) para que a soma ultrapasse a Z o mínimo possível. Escreva o valor final da contagem.   
                    A entrada pode conter, por exemplo, os valores 21 21 15 30. Neste caso, é então assumido o valor 21 para X enquanto os valores 21 e 15 devem ser desconsiderados pois são menores ou iguais a X. Como o valor 30 está dentro da especificação (maior do que X) ele será válido e então deve-se processar os cálculos para apresentar na saída o valor 2, pois é a quantidade de valores somados para se produzir um valor maior do que 30 (21 + 22).";A entrada contém somente valores inteiros, um por linha, podendo ser positivos ou negativos. O primeiro valor da entrada será o valor de X. A próxima linha da entrada irá conter Z. Se Z não atender a especificação do problema, ele deverá ser lido  novamente, tantas vezes quantas forem necessárias.;Imprima uma linha com um número inteiro que representa a quantidade de números inteiros que devem ser somadas, de acordo com a especificação acima.;False;2 / 10;26966;16644;61.72%
1151;Fibonacci Fácil;Iniciante;3;A seguinte sequência de números 0 1 1 2 3 5 8 13 21... é conhecida como série de Fibonacci. Nessa sequência, cada número, depois dos 2 primeiros, é igual à soma dos 2 anteriores. Escreva um algoritmo que leia um inteiro N (N < 46) e mostre os N primeiros números dessa série.;O arquivo de entrada contém um valor inteiro N (0 < N < 46).;Os valores devem ser mostrados na mesma linha, separados por um espaço em branco. Não deve haver espaço após o último valor.;False;3 / 10;75327;28604;37.97%
1152;Estradas Escuras;Grafos;3;"Nestes dias se pensa muito em economia, mesmo em Byteland. Para reduzir custos operacionais, o governo de Byteland decidiu otimizar a iluminação das estradas. Até agora, todas as rotas eram iluminadas durante toda noite, o que custava 1 Dólar Byteland por metro a cada dia. Para economizar, eles decidiram não iluminar mais todas as estradas e desligar a iluminação de algumas delas. Para ter certeza que os habitantes de Byteland continuem a se sentirem seguros, eles querem otimizar o sistema de tal forma que após desligar a iluminação de algumas estradas à noite, sempre existirá algum caminho iluminado de qualquer junção de Byteland para qualquer outra junção.

Qual é a quantidade máxima de dinheiro que o governo de Byteland pode economizar, sem fazer os seus habitantes sentirem-se inseguros?";"A entrada contém vários casos de teste. Cada caso de teste inicia com dois números m (1 ≤ m ≤ 200000) e n (m-1 ≤ n ≤ 200000), que são o número de junções de Byteland e o número de estradas em Byteland, respectivamente. Seguem n conjuntos de três valores inteiros, x, y e z, especificando qual será a estrada bidirecional entre x e y com z metros (0 ≤ x, y < m e x ≠ y).

A entrada termina com m=n=0. O grafo especificado em cada caso de teste é conectado. O tamanho total de todas as estradas em cada caso de teste é menor do que 231.";Para cada caso de teste imprima uma linha contendo a máxima quantidade diária de dólares de Byteland que o governo pode economizar.;False;3 / 10;8935;3258;36.46%
1153;Fatorial Simples;Iniciante;1;Ler um valor N. Calcular e escrever seu respectivo fatorial. Fatorial de N = N * (N-1) * (N-2) * (N-3) * ... * 1.;A entrada contém um valor inteiro N (0 < N < 13).;A saída contém um valor inteiro, correspondente ao fatorial de N.;False;1 / 10;41898;30765;73.43%
1154;Idades;Iniciante;2;Faça um algoritmo para ler um número indeterminado de dados, contendo cada um, a idade de um indivíduo. O último dado, que não entrará nos cálculos, contém o valor de idade negativa. Calcular e imprimir a idade média deste grupo de indivíduos.;A entrada contém um número indeterminado de inteiros. A entrada será encerrada quando um valor negativo for lido.;"A saída contém um valor correspondente à média de idade dos indivíduos.
                
                    A média deve ser impressa com dois dígitos após o ponto decimal.";False;2 / 10;46051;26341;57.20%
1155;Sequência S;Iniciante;2;"Escreva um algoritmo para calcular e escrever o valor de S, sendo S dado pela fórmula:
	S = 1 + 1/2 + 1/3 + … + 1/100";Não há nenhuma entrada neste problema.;"A saída contém um valor correspondente ao valor de S.
	O valor deve ser impresso com dois dígitos após o ponto decimal.";False;2 / 10;37639;19749;52.47%
1156;Sequência S II;Iniciante;3;"Escreva um algoritmo para calcular e escrever o valor de S, sendo S dado pela fórmula:
	S = 1 + 3/2 + 5/4 + 7/8 + ... + 39/?";Não há nenhuma entrada neste problema.;"A saída contém um valor correspondente ao valor de S.
	O valor deve ser impresso com dois dígitos após o ponto decimal.";False;3 / 10;33871;17877;52.78%
1157;Divisores I;Iniciante;1;Ler um número inteiro N e calcular todos os seus divisores.;O arquivo de entrada contém um valor inteiro.;Escreva todos os divisores positivos de N, um valor por linha.;False;1 / 10;29650;24528;82.73%
1158;Soma de Ímpares Consecutivos III;Iniciante;1;"Leia um valor inteiro N que é a quantidade de casos de teste que vem a seguir. Cada caso de teste consiste de dois inteiros X e Y. Você deve apresentar a soma de Y ímpares consecutivos a partir de X inclusive o próprio X se ele for ímpar. Por exemplo:
	para a entrada 4 5, a saída deve ser 45, que é equivalente à: 5 + 7 + 9 + 11 + 13
	para a entrada 7 4, a saída deve ser 40, que é equivalente à: 7 + 9 + 11 + 13";A primeira linha de entrada é um inteiro N que é a quantidade de casos de teste que vem a seguir. Cada caso de teste consiste em uma linha contendo dois inteiros X e Y.;Imprima a soma dos consecutivos números ímpares a partir do valor X.;False;1 / 10;30176;19242;63.77%
1159;Soma de Pares Consecutivos;Iniciante;1;O programa deve ler um valor inteiro X indefinidas vezes. (O programa irá parar quando o valor de X for igual a 0). Para cada X lido, imprima a soma dos 5 pares consecutivos a partir de X, inclusive o X , se for par. Se o valor de entrada for 4, por exemplo, a saída deve ser 40, que é o resultado da operação: 4+6+8+10+12, enquanto que se o valor de entrada for 11, por exempo, a saída deve ser 80, que é a soma de 12+14+16+18+20.;O arquivo de entrada contém muitos valores inteiros. O último valor do arquivo é zero.;Imprima a saida conforme a explicação acima e o exemplo abaixo.;False;1 / 10;32134;19496;60.67%
1160;Crescimento Populacional;Iniciante;4;"Mariazinha quer resolver um problema interessante. Dadas as informações de população e a taxa de crescimento de duas cidades quaisquer (A e B), ela gostaria de saber quantos anos levará para que a cidade menor (sempre é a cidade A) ultrapasse a cidade B em população. Claro que ela quer saber apenas para as cidades cuja taxa de crescimento da cidade A é maior do que a taxa de crescimento da cidade B, portanto, previamente já separou para você apenas os casos de teste que tem a taxa de crescimento maior para a cidade A. Sua tarefa é construir um programa que apresente o tempo em anos para cada caso de teste.
                  
                    Porém, em alguns casos o tempo pode ser muito grande, e Mariazinha não se interessa em saber exatamente o tempo para estes casos. Basta que você informe, nesta situação, a mensagem ""Mais de 1 seculo."".";"A primeira linha da entrada contém um único inteiro T, indicando o número de casos de teste (1 ≤ T ≤ 3000). Cada caso de teste contém 4 números: dois inteiros PA e PB (100 ≤ PA < 1000000, PA < PB ≤ 1000000) indicando respectivamente a população de A e B, e dois valores G1 e G2 (0.1 ≤ G1 ≤ 10.0, 0.0 ≤ G2 ≤ 10.0, G2 < G1) com um digito após o ponto decimal cada, indicando respectivamente o crescimento populacional de A e B (em percentual).
                    Atenção: A população é sempre um valor inteiro, portanto, um crescimento de 2.5 % sobre uma população de 100 pessoas resultará em 102 pessoas, e não 102.5 pessoas, enquanto um crescimento de 2.5% sobre uma população de 1000 pessoas resultará em 1025 pessoas. Além disso, não utilize variáveis de precisão simples para as taxas de crescimento.";"Imprima, para cada caso de teste, quantos anos levará para que a cidade A ultrapasse a cidade B em número de habitantes.
                    Obs.: se o tempo for mais do que 100 anos o programa deve apresentar a mensagem: Mais de 1 seculo.
                    Neste caso, acredito que seja melhor interromper o programa imediatamente após passar de 100 anos,
                    caso contrário você poderá receber como resposta da submissão deste problema ""Time Limit Exceeded"".";False;4 / 10;50411;17243;34.20%
1161;Soma de Fatoriais;Matemática;6;"Leia dois valores inteiros M e N indefinidamente. A cada leitura, calcule e escreva a soma dos fatoriais de cada um 
                    dos valores lidos. Utilize uma variável apropriada, pois cálculo pode resultar em um valor com mais 
                    de 15 dígitos.";"O arquivo de entrada contém vários casos de teste. Cada caso contém dois números inteiros M (0 ≤ M ≤ 20) e 
                    N (0 ≤ N ≤ 20). O fim da entrada é determinado por eof.";Para cada caso de teste de entrada, seu programa deve imprimir uma única linha, contendo um número que é a soma de ambos os fatoriais (de M e N).;False;6 / 10;43519;13265;30.48%
1162;Organizador de Vagões;Estruturas e Bibliotecas;3;"Na estação de trem você ainda pode encontrar o último dos “organizadores de vagões”. Um Organizador de vagões um empregado cujo trabalho é apenas reordenar os vagões do trem, trocando-os de posição. Uma vez que os vagões são organizados em uma ordem considerada ótima, o condutor pode desconectar cada vagão e colocá-los na estação.
	
	O título “organizador de vagões” é dado à pessoa que realiza esta tarefa, cuja estação fica perto de uma ponte. Ao invés da ponte poder subir ou descer, ela roda sobre um pilar que fica no centro do rio. Após rodar 90 graus, os barcos podem passar na esquerda ou direita dela. O Primeiro organizador de vagões descobriu que girando a ponte 180 graus com dois vagões em cima dela, é possível a troca de lugar entre os dois vagões. Obviamente a ponte pode operar no máximo com dois vagões sobre ela.
	
	Agora que quase todos os organizadores de vagões já faleceram, a estação gostaria de automatizar esta operação. Parte do programa a ser desenvolvido é uma rotina que decide para um dado trem com um determinado número de vagões, o número de trocas entre trens adjacentes que são necessárias para que o  trem fique ordenado. Sua tarefa é criar tal rotina.";A entrada contém na primeira linha o número de caso de testes (N). Cada caso de teste consiste de duas linhas de entrada. A primeira linha de um caso de teste contém um inteiro L, determinando o tamanho do trem (0 ≤ L ≤ 50). A segunda linha de um caso de teste contém uma permutação dos números 1 até L, indicando a ordem corrente dos vagões. Os vagões devem ser ordenados de forma que o vagão 1 venha por primeiro, depois o 2, etc, com o vagão L vindo por último.;Para cada caso de teste imprima a sentença: 'Optimal train swapping takes S swaps.' onde S é um inteiro.;False;3 / 10;6529;3769;57.73%
1163;Angry Ducks;Matemática;5;"Em uma terra distante existem duas cidades, a Nlogônia onde vivem os Nlogoneses, e Ducklogônia onde vivem seus vizinhos os Duckneses, já à algum tempo estas duas cidades estão em guerra e agora em uma tentativa de ganhar a guerra os Duckneses pretendem atacar a cidade da Nlogônia com um bodoque que atira patos, porem para que não haja erro eles pediram que você construa um programa que dados os valores da altura do bodoque (h), os pontos onde inicia  (p1) e onde termina (p2) a cidade da Nlogônia, o ângulo do disparo ( α) e a velocidade do lançamento, calcule se o projetil atingira o alvo. 
                
                    
                
                    Para os cálculos assuma que a aceleração da gravidade é g = 9.80665 e que π = 3.14159.";"Existem vários casos de teste, cada caso inicia com 1 valor de ponto flutuante h (1 ≤ h ≤ 150) indicando a altura do bodoque, a próxima linha contem 2 valores inteiros p1 e p2 (1 ≤ p1, p2 ≤ 9999) indicando onde inicia e onde termina a Nlogônia, a linha seguinte contem um inteiro n (1 ≤ n ≤ 100) indicando o numero de tentativas que serão feitas para acertar a Nlogônia, as n linhas seguintes contem dois valores de ponto flutuante com os valores do ângulo α (1 ≤ α ≤ 180) e a velocidade V (1 ≤ V ≤ 150) do disparo.
                        
                        O final do arquivo de entrada é determinado por EOF.";Para cada disparo, seu programa deve imprimir uma única linha no seguinte formato, “X -> DUCK” para quando o pato acertar a Nlogônia ou “X -> NUCK” quando o pato não acertar a Nlogônia, onde  X eh a distancia máxima que o projetil atingiu até chegar ao chão (Y=0). X deve ser impresso com 5 casas decimais.;True;5 / 10;3144;929;29.55%
1164;Número Perfeito;Iniciante;1;Na matemática, um número perfeito é um número inteiro para o qual a soma de todos os seus divisores positivos próprios (excluindo ele mesmo) é igual ao próprio número. Por exemplo o número 6 é perfeito, pois 1+2+3 é igual a 6. Sua tarefa é escrever um programa que imprima se um determinado número é perfeito ou não.;A entrada contém vários casos de teste. A primeira linha da entrada contém um inteiro N  (1 ≤ N ≤ 20), indicando o número de casos de teste da entrada. Cada uma das N linhas seguintes contém um valor inteiro X (1 ≤ X ≤ 108), que pode ser ou não, um número perfeito.;Para cada caso de teste de entrada, imprima a mensagem “X eh perfeito” ou “X nao eh perfeito”, de acordo com a especificação fornecida.;False;1 / 10;42093;23734;56.38%
1165;Número Primo;Iniciante;2;Na matemática, um Número Primo é aquele que pode ser dividido somente por 1 (um) e por ele mesmo. Por exemplo, o número 7 é primo, pois pode ser dividido apenas pelo número 1 e pelo número 7.;A entrada contém vários casos de teste. A primeira linha da entrada contém um inteiro N  (1 ≤ N ≤ 100), indicando o número de casos de teste da entrada. Cada uma das N linhas seguintes contém um valor inteiro X (1 < X ≤ 107), que pode ser ou não, um número primo.;Para cada caso de teste de entrada, imprima a mensagem “X eh primo” ou “X nao eh primo”, de acordo com a especificação fornecida.;False;2 / 10;52759;25243;47.85%
1166;Torre de Hanoi, Novamente!;Paradigmas;2;"As pessoas pararam de mover discos de uma haste para outra depois que eles descobriram o número de passos necessários para completar a tarefa. Por outro lado, elas não pararam de pensar sobre puzzles similares à Torre de Hanoi. Senhor S, como é conhecido, inventou um pequeno jogo. O jogo consiste de N astes e um MONTE de bolas. As bolas são numeradas 1,2,3... As bolas parecem comum, mas na verdade elas são mágicas. Se a soma dos números de duas bolas não for um quadrado perfeito elas irão se repelir com uma força grande quando estiverem muito perto, portanto, elas NUNCA podem ser colocadas encostando uma na outra.
                
                    

                
                O jogador deve colocar uma bola no topo de cada haste por vez. Ele deve primeiro tentar a bola 1, então a bola 2, depois a bola 3, assim por diante... Se ele falhar em fazer isto, o jogo termina. O Jogador deve tentar colocar o máximo de bolas possíveis nas hastes. Você pode ver o exemplo da figura acima, que nos mostra o melhor resultado possível de se obter utilizando 4 hastes.";A primeira linha de entrada contem um único inteiro T (1 ≤ T ≤ 50), indicando o número de casos de teste Cada caso de teste contém um único inteiro N (1 ≤ N ≤ 50), indicando o número de varetas disponíveis.;Para cada caso de teste da entrada, imprima uma linha contendo um inteiro que indica o número máximo de bolas que podem ser colocadas. Imprima -1 se um número infinito de bolas pode ser colocado.;True;2 / 10;1028;675;65.66%
1167;Acampamento de Férias;Estruturas e Bibliotecas;5;"Nas férias de Julho, várias escolas de uma mesma região resolveram 
	se organizar e levaram uma parte de seus alunos para um acampamento 
	de férias por uma semana. Nestes acampamentos os alunos são divididos em chalés coletivos por 
	gênero e idade, sempre com um supervisor ou supervisora que, além de dormirem com o grupo no chalé,
	também são responsáveis por criar e executar várias atividades interessantes e animadas, para todas 
	as idades. Dentre as diversas atividades podem-se citar jogos, excursões, Gincana Musical, Gincanas Noturnas, 
	etc. No primeiro dia de acampamento, devido à forte chuva, as atividades recreativas ficaram limitadas e as 
	crianças foram levadas para o ginásio de esportes. Foi realizada uma gincana e uma das atividades da mesma 
	consistiu em agrupar as crianças em um círculo (organizado no sentido anti-horário) do qual seriam retiradas 
	uma a uma até que sobrasse apenas uma criança, que seria a vencedora.
	
	No momento em que entra no círculo, cada criança recebe uma pequena ficha que contém um valor de 1 a 500.
	Depois que o círculo é formado, conta-se, iniciando na criança que está ao lado da primeira que entrou no círculo, o número correspondente à ficha que a primeira detém. A criança onde o número contado cair, deve ser retirada do grupo, e a contagem inicia novamente segundo a ficha da criança que acabou de ser eliminada. Para ficar mais interessante, quando o valor que consta na ficha é par, a contagem é feita no sentido horário e quando o valor que consta na ficha é ímpar, a contagem é feita no sentido anti-horário.
	
	
	A brincadeira fez muito sucesso e o administrador do acampamento pediu para que sua equipe desenvolva um programa para que no próximo evento ele saiba previamente qual criança irá ser a vencedora de cada grupo, com base nas informações fornecidas.";"A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém um inteiro N 
	(1 ≤ N ≤ 100), indicando a quantidade de crianças que farão parte de cada círculo
	e participarão da brincadeira. Em seguida, as N linhas de cada caso de teste conterão duas informações, 
	o Nome e o Valor (1 ≤ Valor ≤ 500) que consta na ficha de cada criança,
	separados por um espaço, na ordem de entrada na formação do círculo inicial. Obs: O Nome de cada criança não deverá 
	ultrapassar 30 caracteres e contém apenas letras maiúsculas e minúsculas, sem acentos, e o caractere “_”. O final da entrada é indicado pelo número zero.";"Para cada caso de teste, deve-se apresentar a mensagem Vencedor(a): xxxxxx, com um espaço após o sinal "":"" indicando qual é a criança do grupo que venceu a brincadeira.";False;5 / 10;3879;1266;32.64%
1168;LED;Strings;2;João quer montar um painel de leds contendo diversos números. Ele não possui muitos leds, e não tem certeza se conseguirá montar o número desejado. Considerando a configuração dos leds dos números abaixo, faça um algoritmo que ajude João a descobrir a quantidade de leds necessário para montar o valor.;A entrada contém um inteiro N, (1 ≤ N ≤ 1000) correspondente ao número de casos de teste, seguido de N linhas, cada linha contendo um número (1 ≤ V ≤ 10100) correspondente ao valor que João quer montar com os leds.;"Para cada caso de teste, imprima uma linha contendo o número de leds que João precisa para montar o valor desejado, seguido da palavra ""leds"".";True;2 / 10;44407;21019;47.33%
1169;Trigo no Tabuleiro;Matemática;3;"Uma rainha requisitou os serviços de um monge e disse-lhe que pagaria qualquer preço. 
	O monge, necessitando de alimentos, perguntou a rainha se o pagamento poderia ser feito em
	grãos de trigo dispostos em um tabuleiro de damas, de forma que o primeiro quadrado
	tivesse apenas um grão, e os quadrados subseqüentes, o dobro do quadrado anterior. 
	A rainha considerou o pagamento barato e pediu que o serviço fosse executado, porém,
	um dos cavaleiros que estava presente e entendia um pouco de matemática alertou-a que
	seria impossível executar o pagamento, pois a quantidade de grão seria muito alta. Curiosa, 
	a rainha solicitou então a este cavaleiro que era bom em cálculo, que fizesse um programa que
	recebesse como entrada o número de quadrados a serem usados em um tabuleiro de damas e apresentasse
	a quantidade de kg de trigo correspondente, sabendo que cada 12 grãos do cereal correspondem a uma
	grama. Finalmente, o cálculo da quantidade deverá caber em um valor inteiro de 64 bits sem sinal.";"A primeira linha de entrada contem um único inteiro N (1 ≤ N ≤ 100), indicando o número de casos de teste. 
	Cada caso de teste contém um único inteiro X (1 ≤ X ≤ 64), indicando o número de casas do tabuleiro 
	que serão utilizadas.";Para cada caso de teste, imprima a quantidade de kgs de trigo que o monge esperava receber.;False;3 / 10;14723;5421;36.82%
1170;Blobs;Matemática;3;No planeta Alpha vive a criatura Blobs, que come precisamente 1/2 de seu suprimento de comida disponível todos os dias. Escreva um algoritmo que leia a capacidade inicial de suprimento de comida (em Kg), e calcule quantos dias passarão antes que Blobs coma todo esse suprimento até restar um quilo ou menos.;A primeira linha de entrada contem um único inteiro N (1 ≤ N ≤ 1000), indicando o número de casos de teste. As N linhas seguintes contém um valor de ponto flutuante  C (1 ≤ C ≤ 1000) correspondente à quantidade de comida disponível para Blobs.;"Para cada caso de teste, imprima uma linha contendo o número de dias que Blobs irá demorar para comer todo seu suprimento de comida, seguido da palavra ""dias"".";False;3 / 10;16689;9069;54.34%
1171;Frequência de Números;Ad-Hoc;2;Neste problema sua tarefa será ler vários números e em seguida dizer quantas vezes cada número aparece na entrada de dados, ou seja, deve-se escrever cada um dos valores distintos que aparecem na entrada por ordem crescente de valor.;A entrada contém apenas 1 caso de teste. A primeira linha de entrada contem um único inteiro N, que indica a quantidade de valores que serão lidos para X (1 ≤ X ≤ 2000) logo em seguida. Com certeza cada número não aparecerá mais do que 20 vezes na entrada de dados.;Imprima a saída de acordo com o exemplo fornecido abaixo, indicando quantas vezes cada um deles aparece na entrada por ordem crescente de valor.;False;2 / 10;17524;9094;51.89%
1172;Substituição em Vetor I;Iniciante;2;Faça um programa que leia um vetor X[10]. Substitua a seguir, todos os valores nulos e negativos do vetor X por 1. Em seguida mostre o vetor X.;A entrada contém 10 valores inteiros, podendo ser positivos ou negativos.;"Para cada posição do vetor, escreva ""X[i] = x"", onde i é a posição do vetor e x é o valor armazenado naquela posição.";False;2 / 10;74891;41083;54.86%
1173;Preenchimento de Vetor I;Iniciante;1;Leia um valor e faça um programa que coloque o valor lido na primeira posição de um vetor N[10]. Em cada posição subsequente, coloque o dobro do valor da posição anterior. Por exemplo, se o valor lido for 1, os valores do vetor devem ser 1,2,4,8 e assim sucessivamente. Mostre o vetor em seguida.;A entrada contém um valor inteiro (V<=50).;"Para cada posição do vetor, escreva ""N[i] = X"", onde i é a posição do vetor e X é o valor armazenado na posição i. O primeiro número do vetor N (N[0]) irá receber o valor de V.";False;1 / 10;64219;37711;58.72%
1174;Seleçao em Vetor I;Iniciante;3;Faça um programa que leia um vetor A[100]. No final, mostre todas as posições do vetor que armazenam um valor menor ou igual a 10 e o valor armazenado em cada uma das posições.;A entrada contém 100 valores, podendo ser inteiros, reais, positivos ou negativos.;"Para cada valor do vetor menor ou igual a 10, escreva ""A[i] = x"", onde i é a posição do vetor e x é o valor armazenado na posição, com uma casa após o ponto decimal.";False;3 / 10;84439;32459;38.44%
1175;Troca em Vetor I;Iniciante;1;Faça um programa que leia um vetor N[20]. Troque a seguir, o primeiro elemento com o último, o segundo elemento com o penúltimo, etc., até trocar o 10º com o 11º. Mostre o vetor modificado.;A entrada contém 20 valores inteiros, positivos ou negativos.;"Para cada posição do vetor N, escreva ""N[i] = Y"", onde i é a posição do vetor e Y é o valor armazenado naquela posição.";False;1 / 10;56197;33610;59.81%
1176;Fibonacci em Vetor;Iniciante;4;"Faça um programa que leia um valor e apresente o número de Fibonacci correspondente a este valor lido. 
                    Lembre que os 2 primeiros elementos da série de Fibonacci são 0 e 1 e cada próximo termo é a soma dos 2 anteriores a ele.
                    Todos os valores de Fibonacci calculados neste problema devem caber em um inteiro de 64 bits sem sinal.";"A primeira linha da entrada contém um inteiro T, indicando o número de casos de teste.
                    Cada caso de teste contém um único inteiro N (0 ≤ N ≤ 60), correspondente ao N-esimo termo da série de Fibonacci.";"Para cada caso de teste da entrada, imprima a mensagem ""Fib(N) = X"", onde X é o N-ésimo termo da série de Fibonacci.";False;4 / 10;78973;24889;31.52%
1177;Preenchimento de Vetor II;Iniciante;1;Faça um programa que leia um valor T e preencha um vetor N[1000] com a sequência de valores de 0 até T-1 repetidas vezes, conforme exemplo abaixo. Imprima o vetor N.;A entrada contém um valor inteiro T (2 ≤ T ≤ 50).;"Para cada posição do vetor, escreva ""N[i] = x"", onde i é a posição do vetor e x é o valor armazenado naquela posição.";False;1 / 10;50451;28351;56.20%
1178;Preenchimento de Vetor III;Iniciante;4;"Leia um valor X. Coloque este valor na primeira posição de um vetor N[100].
	Em cada posição subsequente de N (1 até 99), coloque a metade do valor 
	armazenado na posição anterior, conforme o exemplo abaixo. 
	Imprima o vetor  N.";A entrada contem um valor de dupla precisão com 4 casas decimais.;"Para cada posição do vetor N, escreva ""N[i] = Y"", onde i é a posição do vetor e Y é o valor
	armazenado naquela posição. Cada valor do vetor deve ser apresentado com 4 casas decimais.";False;4 / 10;46718;25984;55.62%
1179;Preenchimento de Vetor IV;Iniciante;2;Neste problema você deverá ler 15 valores colocá-los em 2 vetores conforme estes valores forem pares ou ímpares. Só que o tamanho de cada um dos dois vetores é de 5 posições. Então, cada vez que um dos dois vetores encher, você deverá imprimir todo o vetor e utilizá-lo novamente para os próximos números que forem lidos. Terminada a leitura, deve-se imprimir o conteúdo que restou em cada um dos dois vetores, imprimindo primeiro os valores do vetor impar. Cada vetor pode ser preenchido tantas vezes quantas for necessário.;A entrada contém 15 números inteiros.;Imprima a saída conforme o exemplo abaixo.;False;2 / 10;38059;20061;52.71%
1180;Menor e Posição;Iniciante;2;Faça um programa que leia um valor N. Este N será o tamanho de um vetor X[N]. A seguir, leia cada um dos valores de X, encontre o menor elemento deste vetor e a sua posição dentro do vetor, mostrando esta informação.;A primeira linha de entrada contem um único inteiro N (1 < N < 1000), indicando o número de elementos que deverão ser lidos em seguida para o vetor X[N] de inteiros. A segunda linha contém cada um dos N valores, separados por um espaço.;A primeira linha apresenta a mensagem “Menor valor:” seguida de um espaço e do menor valor lido na entrada. A segunda linha apresenta a mensagem “Posicao:” seguido de um espaço e da posição do vetor na qual se encontra o menor valor lido, lembrando que o vetor inicia na posição zero.;False;2 / 10;61809;32293;52.25%
1181;Linha na Matriz;Iniciante;4;"Neste problema você deve ler um número, indicando uma linha da matriz na qual uma operação deve ser realizada, um caractere maiúsculo, indicando a operação que será realizada, e 
	todos os elementos de uma matriz M[12][12]. Em seguida, calcule e mostre a soma ou a média dos elementos que estão na área verde da matriz, 
	conforme for o caso. A imagem abaixo ilustra o caso da entrada do valor 2 para a linha da matriz, demonstrando os elementos que deverão ser 
	considerados na operação.";"A primeira linha de entrada contem um número L (0 ≤ L ≤ 11) indicando a linha que será considerada para operação. A segunda linha de entrada contém um
	único caractere Maiúsculo T ('S' ou 'M'), indicando a operação (Soma ou Média) que deverá ser realizada com os elementos da matriz. Seguem os 144 valores de ponto flutuante que compõem a matriz, sendo que a mesma é preenchida linha por linha, da linha 0 até a linha 11, sempre da esquerda para a direita.";Imprima o resultado solicitado (a soma ou média), com 1 casa após o ponto decimal.;True;4 / 10;78494;26696;34.01%
1182;Coluna na Matriz;Iniciante;3;"Neste problema você deve ler um número que indica uma coluna de uma matriz na qual uma operação deve ser realizada, um caractere maiúsculo, indicando a operação que será realizada, e 
                    todos os elementos de uma matriz M[12][12]. Em seguida, calcule e mostre a soma ou a média dos elementos que estão na área verde da matriz, 
                    conforme for o caso. A imagem abaixo ilustra o caso da entrada do valor 5 para a coluna da matriz, demonstrando os elementos que deverão ser 
                    considerados na operação.";"A primeira linha de entrada contem um número C (0 ≤ C ≤ 11) indicando a coluna que será considerada para operação. 
                    A segunda linha de entrada contém um único caractere Maiúsculo T ('S' ou 'M'), indicando a operação 
                    (Soma ou Média) que deverá ser realizada com os elementos da matriz. Seguem os 144 valores de ponto flutuante que compõem a matriz.";Imprima o resultado solicitado (a soma ou média), com 1 casa após o ponto decimal.;True;3 / 10;46767;24003;51.32%
1183;Acima da Diagonal Principal;Iniciante;4;"Leia um caractere maiúsculo, que indica uma operação que deve ser realizada e uma matriz M[12][12]. Em seguida, calcule e 
	mostre a soma ou a média considerando somente aqueles elementos que estão acima da diagonal principal da matriz, conforme ilustrado abaixo (área verde).";A primeira linha de entrada contem um único caractere Maiúsculo O  ('S' ou 'M'), indicando a operação (Soma ou Média) que deverá ser realizada com os elementos da matriz. Seguem os 144 valores de ponto flutuante que compõem a matriz.;Imprima o resultado solicitado (a soma ou média), com 1 casa após o ponto decimal.;True;4 / 10;58316;22432;38.47%
1184;Abaixo da Diagonal Principal;Iniciante;2;"Leia um caractere maiúsculo, que indica uma operação que deve ser realizada e uma matriz M[12][12]. Em seguida, calcule e 
	mostre a soma ou a média considerando somente aqueles elementos que estão abaixo da diagonal principal da matriz, conforme ilustrado abaixo (área verde).";A primeira linha de entrada contem um único caractere Maiúsculo O  ('S' ou 'M'), indicando a operação (Soma ou Média) que deverá ser realizada com os elementos da matriz. Seguem os 144 valores de ponto flutuante que compõem a matriz.;Imprima o resultado solicitado (a soma ou média), com 1 casa após o ponto decimal.;True;2 / 10;29665;17532;59.10%
1185;Acima da Diagonal Secundária;Iniciante;3;"Leia um caractere maiúsculo, que indica uma operação que deve ser realizada e uma matriz M[12][12]. Em seguida, calcule e 
	mostre a soma ou a média considerando somente aqueles elementos que estão acima da diagonal secundária da matriz, conforme ilustrado abaixo (área verde).";A primeira linha de entrada contem um único caractere Maiúsculo O  ('S' ou 'M'), indicando a operação (Soma ou Média) que deverá ser realizada com os elementos da matriz. Seguem os 144 valores de ponto flutuante que compõem a matriz.;Imprima o resultado solicitado (a soma ou média), com 1 casa após o ponto decimal.;True;3 / 10;31431;16275;51.78%
1186;Abaixo da Diagonal Secundária;Iniciante;1;"Leia um caractere maiúsculo, que indica uma operação que deve ser realizada e uma matriz M[12][12]. Em seguida, calcule e 
	mostre a soma ou a média considerando somente aqueles elementos que estão abaixo da diagonal Secundária da matriz, conforme ilustrado abaixo (área verde).";A primeira linha de entrada contem um único caractere Maiúsculo O  ('S' ou 'M'), indicando a operação (Soma ou Média) que deverá ser realizada com os elementos da matriz. Seguem os 144 valores de ponto flutuante que compõem a matriz.;Imprima o resultado solicitado (a soma ou média), com 1 casa após o ponto decimal.;True;1 / 10;28940;16316;56.38%
1187;Área Superior;Iniciante;4;"Leia um caractere maiúsculo, que indica uma operação que deve ser realizada e uma matriz M[12][12]. Em seguida, calcule e 
	mostre a soma ou a média considerando somente aqueles elementos que estão na área superior da matriz, conforme ilustrado abaixo (área verde).";A primeira linha de entrada contem um único caractere Maiúsculo O  ('S' ou 'M'), indicando a operação (Soma ou Média) que deverá ser realizada com os elementos da matriz. Seguem 144 valores com ponto flutuante de dupla precisão que compõem a matriz.;Imprima o resultado solicitado (a soma ou média), com 1 casa após o ponto decimal.;True;4 / 10;48260;16604;34.41%
1188;Área Inferior;Iniciante;1;"Leia um caractere maiúsculo, que indica uma operação que deve ser realizada e uma matriz M[12][12]. Em seguida, calcule e 
	mostre a soma ou a média considerando somente aqueles elementos que estão na área inferior da matriz, conforme ilustrado abaixo (área verde).";A primeira linha de entrada contem um único caractere Maiúsculo O  ('S' ou 'M'), indicando a operação (Soma ou Média) que deverá ser realizada com os elementos da matriz. Seguem os 144 valores de ponto flutuante de dupla precisão (double) que compõem a matriz.;Imprima o resultado solicitado (a soma ou média), com 1 casa após o ponto decimal.;True;1 / 10;22346;13767;61.61%
1189;Área Esquerda;Iniciante;2;"Leia um caractere maiúsculo, que indica uma operação que deve ser realizada e uma matriz M[12][12]. Em seguida, calcule e 
                    mostre a soma ou a média considerando somente aqueles elementos que estão na área esquerda da matriz, conforme ilustrado abaixo (área verde).";A primeira linha de entrada contem um único caractere Maiúsculo O  ('S' ou 'M'), indicando a operação (Soma ou Média) que deverá ser realizada com os elementos da matriz. Seguem os 144 valores de ponto flutuante que compõem a matriz.;Imprima o resultado solicitado (a soma ou média), com 1 casa após o ponto decimal.;True;2 / 10;23125;13454;58.18%
1190;Área Direita;Iniciante;2;"Leia um caractere maiúsculo, que indica uma operação que deve ser realizada e uma matriz M[12][12]. Em seguida, calcule e 
	mostre a soma ou a média considerando somente aqueles elementos que estão na área direita da matriz, conforme ilustrado abaixo (área verde).";A primeira linha de entrada contem um único caractere Maiúsculo O  ('S' ou 'M'), indicando a operação (Soma ou Média) que deverá ser realizada com os elementos da matriz. Seguem os 144 valores de ponto flutuante que compõem a matriz.;Imprima o resultado solicitado (a soma ou média), com 1 casa após o ponto decimal.;True;2 / 10;21789;14064;64.55%
1191;Recuperação da Árvore;Grafos;3;"A pequena Valentina gostava muito de brincar com árvores binárias. Seu jogo favorito era construir árvores binárias aleatórias com letras em maiúsculo nos nodos.
                    
                    Este é um exemplo de uma de suas criações:
                     
                
                    D
                        / \
                        /   \
                        B     E
                        / \     \
                        /   \     \
                        A     C     G
                                  /
                                /
                              F
                     
                
                    Para salvar suas árvores para uso futuro, ela escreveu duas strings para cada árvore: o percurso prefixo (raíz, sub-árvore esquerda, sub-árvore direita) e o percurso infixo (sub-árvore esquerda, raíz, sub-árvore direita).
                    
                    Para o desenho acima o percurso prefixo é DBACEGF e o infixo é ABCDEFG.
                    
                    Agora, anos depois, olhando para as strings, ela notou que reconstruir as árvores era realmente possível, mas só porque ela não havia usado a mesma letra duas vezes na mesma árvore.
                    
                    Reconstruir a árvore a mão tornou-se chato.
                    
                    Então agora ela pede que você escreva um programa que faça o trabalho por ela!";"A entrada irá conter um ou mais casos de teste. Cada caso de teste consiste em uma linha contendo duas strings representando o percurso prefixo e infixo de uma árvore binária. Ambas as strings consistem de letras maiúsculas, sem repetir. (Então elas não são maiores de 26 caracteres.)
                    
                    Entrada termina com EOF (fim de arquivo).";Para cada caso de teste, imprima uma linha com o percurso posfixo (sub-árvore esquerda, sub-árvore direita, raíz).;False;3 / 10;3257;1622;49.80%
1192;O jogo Matemático de Paula;Ad-Hoc;1;"Paula simplesmente adora matemática. Seu maior passatempo é ficar inventando jogos ou atividades que a envolvam para brincar com seus amiguinhos. Obviamente, nem todos eles não são tão apaixonados assim por matemática e têm muita dificuldade para resolver as brincadeiras propostas por ela. Agora Paula inventou um pequeno passatempo que envolve 3 caracteres: um dígito numérico, uma letra e outro dígito numérico.
	
	Se a letra for maiúscula, deve-se subtrair o primeiro dígito do segundo. Se a letra for minúscula, deve-se somar ambos os dígitos e se os DÍGITOS forem iguais, deve-se desconsiderar a letra e mostrar o produto entre os dois dígitos. Ela pediu para seu amigo Marcelo, que é bom em programação, para criar um programa para que encontre a solução para cada uma das sequências que Paula lhe apresentar.";"A entrada contém vários casos de teste. A primeira linha da entrada contém um inteiro N, indicando o número de casos de teste que virão a seguir. Cada caso de teste é uma sequência de três caracteres criada por Paula. Esta sequência contém na primeira posição um caractere de '0' a '9', 
	na segunda posição uma letra maiúscula ou minúscula do alfabeto e na terceira posição outro caractere de '0' a '9'.";Para cada caso de teste, deve ser impressa uma linha com um valor inteiro que representa a solução da sequência proposta por Paula.;False;1 / 10;10421;6269;60.16%
1193;Conversão entre Bases;Matemática;4;O professor de matemática de Juliano marcou uma prova cujo conteúdo será apenas conversão entre valores decimais, hexadecimais e binários. Uma das coisas mais complexas para Juliano é fazer estas conversões de base entre números. Por mais que estude, tem muita dificuldade para entender. Portanto, como você entende de computação e é amigo(a) de Juliano, ele solicitou a tua ajuda para que faça um programa que verifique se as conversões feitas por ele estão correta.;A entrada contém vários casos de teste. A primeira linha da entrada contém um inteiro N, indicando o número de casos de teste que virão a seguir, um por linha. Cada caso de teste contém um valor X (X > 0) seguido de um texto Y com três caracteres, indicando se o valor X está no formato binário, decimal ou hexadecimal. Independente do formato, qualquer dos números deverá caber em um inteiro de 32 bits.;"Para cada caso de teste, você deve apresentar o número de caso de teste seguido por duas linhas, que  
contém a conversão do valor fornecido para as outras duas bases. 
A sequência das bases de saída será sempre: decimal, hexadecimal (em minúsculo) e binário, ou seja deve-se respeitar esta ordem excluindo obviamente o formato de entrada.
	Obs: deverá ser impressa uma linha em branco após cada caso de teste, inclusive após o último caso de teste.";False;4 / 10;8294;2813;33.92%
1194;Prefixa, Infixa e Posfixa;Grafos;3;"Um problema comum em estrutura de dados é determinar o percurso transversal de uma árvore binária.
                    
                    Há tres formas clássicas de fazer isto:
                    Prefixa: Você deve visitar a raiz, sub-árvore esquerda e sub-árvore direita.
                    Infixa: Você deve visitar a sub-árvore esquerda, a raiz e a sub-árvore direita.
                    Posfixa: Você deve visitar a sub-árvore esquerda, a sub-árvore direita e a raiz.
                    
                    Veja a figura abaixo:
                
                    
                    
                
                    O percurso prefixo, infixo e posfixo são, respectivamente ABCDEF, CBAEDF and CBEFDA. Neste problema, você deve computar a forma posfixa da árvore dados os percursos infixo e prefixo";A primeira linha de entrada contém um número positivo C (C ≤ 2000), que indica o número de casos de teste. Seguem C linhas, uma para cada caso de teste. Cada caso de teste inicia com um número N (1 ≤ N ≤ 52), o número de nodos da árvore binária. Depois haverá duas strings S1 e S2 que descrevem o percurso prefixo e infixo da árvore. Os nodos da árvore são nomeados com diferentes caracteres dentro do intervalo a..z e A..Z. O valor de N, S1 e S2 são separados por um espaço em branco.;Para cada conjunto de entrada, você deve imprimir uma linha contendo o percurso posfixo da corrente árvore.;True;3 / 10;2012;1179;58.60%
1195;Árvore Binária de Busca;Grafos;6;"Em computação, a árvores binária de busca ou árvore binária de pesquisa é uma estrutura baseada em nós (nodos), onde todos os nós da subárvore esquerda possuem um valor numérico inferior ao nó raiz e todos os nós da subárvore direita possuem um valor superior ao nó raiz (e assim sucessivamente). 
                    O objetivo desta árvore é estruturar os dados de forma flexível, permitindo a busca binária de um elemento qualquer da árvore. 
                
                
                    A grande vantagem das árvores de busca binária sobre estruturas de dados convencionais 
                    é que os algoritmos de ordenação (percurso infixo) e pesquisa que as utilizam são muito eficientes.	 
                    
                
                    Para este problema, você receberá vários conjuntos de números e a partir de cada um dos conjuntos, 
                    deverá construir uma árvore binária de busca. Por exemplo, a sequência de valores: 8 3 10 14 6 4 13 7 1 resulta
                    na seguinte árvore binária de busca:";"A entrada contém vários casos de teste. A primeira linha da entrada contém um inteiro C (C ≤ 1000), indicando o número de casos de teste 
                    que virão a seguir. Cada caso de teste é composto por 2 linhas. A primeira linha contém um inteiro N (1 ≤ N ≤ 500) que 
                    indica a quantidade de 	números que deve compor cada árvore e a segunda linha contém N inteiros distintos e não negativos, 
                    separados por um espaço em branco.";"Cada linha de entrada produz 3 linhas de saída. Após construir a árvore binária de busca com os elementos de entrada, 
                    você deverá imprimir a mensagem ""Case n:"", onde n indica o número do caso de teste e
                    fazer os três percursos da árvore: prefixo, infixo e posfixo, apresentando cada um deles em uma linha com uma mensagem 
                    correspondente conforme o exemplo abaixo, separando cada um dos elementos por um espaço em branco.
                    Obs: Não deve haver espaço em branco após o último item de cada linha e há uma linha em branco após cada caso de teste, inclusive após o último.";True;6 / 10;7932;2925;36.88%
1196;WERTYU;Ad-Hoc;5;"Um erro comum de digitação é colocar as mãos no teclado uma posição à direita da correta posição. Desta forma, ""Q"" é digitado como ""W"" e ""J"" é digitado como ""K"" e assim por diante. Você deve decodificar a mensagem desta maneira.";A entrada consiste em várias linhas de texto. Cada linha pode conter dígitos, espaços e letras maiúsculas. (exceto Q, A, Z), ou pontuação, exceto crase (`) conforme mostrado acima. Teclas rotuladas como palavras [Tab, BackSp, Control, etc.] não são representados na entrada. Você deverá repassar cada letra ou símbolo de pontuação pelo símbolo imediatamente à esquerda. Os espaços de entrada simplesmente deverão ser ecoados (impressos) na saída. ;Para cada linha de entrada, imprima uma linha de saída correspondente com a mensagem decodificada.;True;5 / 10;7773;2788;35.87%
1197;Volta à Faculdade de Física;Matemática;2;Uma partícula tem velocidade inicial e aceleração constante. Se a sua velocidade após certo momento é v então qual será seu deslocamento no dobro deste tempo?;"A entrada contém vários casos de teste. Cada linha da entrada é um caso de teste e contém dois inteiros v (-100 ≤ v ≤ 100) e t (0 ≤ t  ≤ 200) ( t  significa o momento no qual a partícula ganha aquela velocidade).
	O final da entrada é determinado por EOF.";Para cada linha de entrada imprima um único inteiro que denota o deslocamento no dobro do tempo fornecido.;False;2 / 10;11177;7220;64.60%
1198;O Bravo Guerreiro Hashmat;Matemática;5;"Hashmat é um guerreiro cujo seu grupo de soldados se move de um local a outro para lutar contra os seus oponentes. 
                    Antes da luta ele apenas calcula uma coisa. A diferença entre a quantidade de soldados que possui e a quantidade de soldados oponentes. 
                    A partir desta diferença ele decide se vai ou não lutar. Às vezes Hashmat tem mais soldados do que o seu oponente, mas na maioria das vezes não.";A entrada contém dois números inteiros em cada linha. Estes dois números denotam respectivamente a quantidade de soldados do exército de Hashmat e do seu oponente.  Nenhum número de entrada é maior do que  232. A entrada termina com fim de arquivo (EOF).;Para cada linha de entrada imprima a diferença entre o número de soldados de Hashmat e do seu oponente. Cada saída deve ser impressa em uma linha separada.;False;5 / 10;22340;7303;32.69%
1199;Conversão Simples de Base;Matemática;4;Neste problema você é solicitado a escrever um simples programa de conversão de base. A entrada será um valor hexadecimal ou decimal. Você deverá converter cada valor da entrada. Se o valor for hexadecimal, você deve convertê-lo para decimal e vice-versa. O valor hexadecimal inicia sempre com “0x” ou também, é aquele valor cuja segunda casa contém a letra 'x'.;A entrada contém vários casos de teste. Cada linha de entrada, com exceção da última, contém um número não-negativo, decimal ou hexa. O valor decimal será menor ou igual a 231. A última linha contém um número negativo que não deve ser processado, indicando o encerramento do programa.;Para cada linha de entrada (exceto a última) deve ser produzido uma linha de saída. Todo número hexadecimal deve ser precedido na saída por '0x' (zero xis).;True;4 / 10;7844;3320;42.33%
1200;Operações em ABP I;Grafos;5;"Marcela recebeu como trabalho de Algoritmos a tarefa de fazer um programa que implemente uma Árvore Binária de Pesquisa (ou Busca). 
                    O Programa deve aceitar os seguintes comandos:
                
                    
                        I n: Insere na árvore binária de pesquisa o elemento n.
                    
                        INFIXA: lista os elementos já cadastrado segundo o percurso infixo
                    
                        PREFIXA: lista os elementos já cadastrado segundo o percurso prefixo
                    
                        POSFIXA: lista os elementos já cadastrado segundo o percurso posfixo
                    
                        P n: pesquisa se o elemento n existe ou não.
                
                
                    A qualquer momento pode-se inserir um elemento, visitar os elementos previamente inseridos na ordem infixa, prefixa ou posfixa 
                    ou ainda procurar por um elemento na árvore para saber se o elemento existe ou não.";"A entrada contém N operações utilizando letras (A-Z,a-z) sobre uma árvore binária de Busca, que inicialmente se encontra vazia. 
                        A primeira linha de entrada contém a inserção de algum elemento. As demais linhas de entrada podem conter quaiquer um dos comandos descritos acima, 
                        conforme exemplo abaixo. O final da entrada é determinado pelo final de arquivo (EOF).
                    
                        Obs: Considere que não serão inseridos elementos repetidos na árvore.";"Cada linha de entrada, com exceção das linhas que contém o comando ""I"", deve produzir uma linha de saída. 
                        A saída deve ser de acordo com o exemplo fornecido abaixo. Não deve haver espaço em branco após o último caractere de cada linha, 
                        caso contrário, sua submissão receberá Presentation Error.";False;5 / 10;3258;1299;39.87%
1201;Operações em ABP II;Grafos;7;"Marcela nem terminou de fazer o programa anterior e o professor já lhe pediu um novo programa, com aprimoramentos sobre o programa anterior. 
	Este novo programa é a implementação de uma Árvore Binária de Pesquisa (ou Busca) mas utilizando números inteiros agora, e que deve aceitar um comando 
	extra (R) com relação ao programa anterior:

	
		I n: Insere na árvore binária de pesquisa o elemento n.
	
		INFIXA: lista os elementos já inseridos segundo o percurso infixo
	
		PREFIXA: lista os elementos já inseridos segundo o percurso prefixo
	
		POSFIXA: lista os elementos já inseridos segundo o percurso posfixo
	
		P n: Pesquisa se o elemento n existe ou não na árvore.
	
		R n: Remove o elemento n da árvore, caso ele exista.

	 A qualquer momento pode-se inserir um elemento, visitar os elementos previamente inseridos na ordem infixa, prefixa ou posfixa, procurar por um elemento na árvore para saber se o elemento existe ou não ou ainda retirar um elemento. 
     Nota: Se um elemento com duas sub-árvores (direita e esquerda) for removido, o antecessor (o elemento maior de sub-árvore esquerda, deve ocupar o seu lugar e ao tentar retirar um elemento que não existe, nenhuma mensagem deve ser apresentada.";"A entrada contém N operações utilizando números inteiros (1-106) sobre uma árvore binária de Busca, que inicialmente se encontra vazia. 
		A primeira linha de entrada contém a inserção de algum elemento. As demais linhas de entrada podem conter quaiquer um dos comandos descritos acima, 
		conforme exemplo abaixo. O final da entrada é determinado pelo final de arquivo (EOF).



                Saída

                
                    
	Cada linha de entrada, com exceção das linhas que contém os comandos ""I"" ou ""R"", deve produzir uma linha de saída. 
	A saída deve ser de acordo com o exemplo fornecido abaixo. Não deve haver espaço em branco após o último caractere de cada linha, 
	caso contrário, sua submissão receberá Presentation Error.

                

                

                
                    
                        
                            Exemplo de Entrada
                            Exemplo de Saída
                        
                    
                    
                        
                            
                                
	I 5
	I 2
	I 4
	I 1
	INFIXA
	PREFIXA
	POSFIXA
	P 3
	P 1
	INFIXA
	R 1
	INFIXA
	
                            
                                
	1 2 4 5
	5 2 1 4
	1 4 2 5
	3 nao existe
	1 existe
	1 2 4 5
	2 4 5";"Cada linha de entrada, com exceção das linhas que contém os comandos ""I"" ou ""R"", deve produzir uma linha de saída. 
	A saída deve ser de acordo com o exemplo fornecido abaixo. Não deve haver espaço em branco após o último caractere de cada linha, 
	caso contrário, sua submissão receberá Presentation Error.";False;7 / 10;4304;855;19.87%
1202;Festival das Noites Brancas;Matemática;6;"Todos os anos, na época das chamadas “noites brancas” em que o sol não se põe sobre a cidade de São Petersburgo ocorre o “festival de artes das noites brancas”, que consiste de uma série de apresentações musicais, concertos, balés, e muito mais que atraem artistas de todo o mundo.
	
	É considerado uma das maiores manifestações populares de toda a Russia, uma vez que no auge das noites brancas, o festival costuma ter até um milhão de participantes circulando pelas ruas da cidade. O Teatro Mariinski recebe alguns dos melhores espetáculos e, uma vez que não tem ingressos suficientes para todos os que desejam assistir `as performances, costuma utilizar um sistema curioso e divertido para sortear os que poderão entrar no teatro.
	
	Cada pessoa que entra no teatro, interessado em assistir a uma apresentação escolhe uma fileira na qual gostaria de sentar e recebe um cartão com um número de 000 a 999 escrito nele. Este número é o código do sorteio daquela pessoa. Ao chegar `a entrada o atendente verifica a situação da fila na qual a pessoa sentará. A fila é descrita por uma sequência de ’1’s e ’0’s, onde 1 indica cadeira livre e 0 indica cadeira ocupada. Essa sequência é então interpretada como a representação binária do número n. A pessoa entrará com seus acompanhantes se o n-ésimo número da sequência de Fibonacci terminar exatamente com o número escrito no seu cartão. Assim, por exemplo, se a descrição da fileira é 100 a pessoa só entrará se possuir o cartão com o número 003.";"A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias.
	Cada instância consiste em uma linha contendo uma descrição de fileira com até 10000 dígitos. A descrição de uma fileira é uma sequência de ’1’s e ’0’s, nunca começando com ’0’ (a primeira cadeira de todas as fileiras estão reservadas).";Para cada instância imprima os 3 dígitos que devem estar escrito no cartão para a pessoa entrar no teatro.;False;6 / 10;2629;751;28.57%
1203;Pontes de São Petersburgo;Paradigmas;7;"Todos conhecem o famoso problema das pontes de Königsberg, cidade da Prússia que ficou famosa pelo problema resolvido por Euler ainda no século XVIII. Poucos conhecem, entretanto, o problema das pontes de São Petersburgo. A cidade de São Petersburgo localiza-se às margens do Rio Neva, e é cruzada por dezenas de pontes que ligavam as margens do rio às centenas de pequenas ilhas que o rio possui. Os moradores da cidade, conhecedores do famoso problema das pontes de
	Königsberg, criaram seu próprio problema. Os moradores sabem que existem K pontes na cidade, que são R regiões distintas na cidade e que cada ponte liga exatamente 2 regiões distintas da cidade. Os moradores querem saber se, para a cidade deles, é possível escolher algumas destas regiões tais que o número de pontes que incide em todas elas é igual a K. Note que, se duas destas regiões escolhidas tiverem uma ponte entre elas, esta ponte será contada duas vezes.";"A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada caso de teste contém dois números, R (2  ≤ R  ≤ 100) 
	e K (1  ≤ K  ≤ R * (R-1) / 2), o 
	número de regiões e pontes da cidade, respectivamente. Por efeito de simplificação, as regiões são enumeradas de 
	1 até R, inclusive. A seguir temos K linhas, cada uma delas contendo dois números 
	A e B, informando que existe uma ponte ligando as regiões 
	A e B da cidade.";"Para cada caso de teste imprima uma linha apenas com ""S"" (aspas apenas para evidenciar), se é possível escolhermos as regiões da maneira descrita anteriormente, ou ""N"" (idem), se não for possível.";False;7 / 10;2324;800;34.42%
1204;Myachowski, o Futebol Russo;Geometria Computacional;9;"Muitas origens diferentes são atribuídas ao futebol. A atividade mais antiga que se assemelha ao futebol era praticada na China entre os séc. III e II a.C. e chamava-se ts’uh Kúh (cuju), e consistia em jogar uma pequena bola com os pés para uma rede. No Japão existe o kemari, praticado até hoje em eventos culturais. Em Roma jogava-se o harpastum, e na Grécia o epislcyros. Com a descoberta do novo mundo descobriu-se também um jogo maia muito semelhante ao futebol, o pok ta pok que teria mais de 3 000 anos de história. Na idade média jogava-se em Florença o calcio florentino, que muitos reputam ser o berço do futebol moderno. Até hoje índios do Amazonas jogam um jogo muito semelhante em que uma bola é empurrada usando apenas a cabeça em direção às metas inimigas. Seja como for, é quase  impossível dizer qual o jogo que deu origem ao futebol hoje jogado, cujas regras foram formalmente estabelecidas pelos ingleses no final do século XIX.
	Pouco se tem notícia de um jogo russo, também ancestral do futebol e com regras bastante claras (como diria o Arnaldo). É o Myachowski, também conhecido como Otskok. O nome vem provavelmente de 
	Myach que significa ""bola"" em russo. No jogo um jogador entra em um campo que é uma elipse fechada e deve acertar um buraco localizado na parede do campo. Porém, o ponto só é computado se a bola entra no buraco após ser chutada contra as paredes do campo, sendo desviada para dentro do buraco.
	Dadas a posição inicial da bola, a direção na qual ela está se movimentando e a descrição do campo, sua tarefa é determinar os próximos dois pontos de contato da bola com a parede do campo. Considere que o centro do campo é a posição (0; 0).
	
	Reflexão da Bola: Suponha para esse problema que a bola é refletida perfeitamente quando atinge a parede do campo. Isso é, o ângulo que o vetor de entrada faz com a reta tangente à parede do campo no ponto de contato é o mesmo que ângulo de saída. A Figura abaixo exemplifica esse comportamento.
	
	
	
	
	Ângulo de entrada é igual ao ângulo de saída";"A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância consiste em uma linha contendo 6 inteiros, X, Y, Dx, Dy, (-1000 <= Dx,Dy <= 1000), A e B, (1 <= A,B <= 500). A posição inicial da bola é dada pelo ponto (X; Y ) dentro da elipse e a direção pelo vetor (Dx;Dy).
	 O campo tem o formato de uma elipse descrita pela equação
	
	x²    y² 
	    -  +  -  = 1.
	A²    B² ";Para cada instância imprima duas linhas. A primeira linha deve conter o primeiro ponto de contato da bola com a parede do campo e a segunda linha deve conter o segundo ponto de contato. Um ponto de contato deve ser impresso como dois números racionais separados por um espaço. Imprima os números com exatamente 3 casas decimais.;True;9 / 10;229;96;41.92%
1205;Cerco a Leningrado;Grafos;7;"A cidade de São Petersburgo mudou de nome depois da revolção russa em 1914 para Petrogrado. Após a morte de Lênin, em homenagem ao grande líder o nome da cidade mudou novamente para Leningrado em 1924, e assim permaneceu até o fim da União Soviética. Em 1991, a cidade voltou a ter o nome antigo. Durante a segunda guerra mundial a cidade de Leningrado sofreu um cerco das tropas alemãs que durou cerca de 900 dias. Foi uma época terrível, de muita fome e perdas humanas, que terminou em 27 de janeiro de 1944 com a vitória dos soviéticos. É considerada uma das vitórias mais custosas da história em termos de vidas humanas perdidas.
	
	No auge da ofensiva alemã, no ano de 1942, vários atiradores de elite foram espalhados pela cidade, inclusive, em alguns pontos estratégicos da cidade mais de um atirador aguardavam soldados inimigos. A espionagem russa tinha informações detalhadas das habilidades desses atiradores, mas seus esconderijos eram excelentes, tornando a tarefa de um soldado soviético que desejasse cruzar a cidade extremamente difícil. Os soldados soviéticos eram bem treinados, mas com o passar do tempo e a continuação do cerco à cidade, os melhores soldados foram sendo dizimados, uma vez que se errassem o alvo na primeira tentativa certamente eram mortos pelos soldados alemães na tocaia.
    
	Sabendo a probabilidade de um soldado em matar um atirador alemão e sabendo também o número de balas que ele tinha à sua disposição, desejamos saber a probabilidade desse soldado conseguir chegar a um ponto estratégico de destino, partindo de um ponto estratégico de origem. O soldado, sendo muito experiente, sempre usava um caminho que maximizava a probabilidade de sucesso. Note que o soldado deve matar todos os atiradores presentes no caminho usado, inclusive os que estiverem nos pontos estratégicos de origem e destino.";"A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém 3 inteiros, N 
	(2 ≤ N ≤ 1000), M, e K (0 ≤ K ≤ 1000) e a 
	probabilidade P (0 ≤ P ≤ 1) do soldado matar um atirador. Os inteiros N, M, e K representam respectivamente os números de pontos estratégicos, estradas ligando pontos estratégicos e balas carregadas pelo soldado soviético. Os pontos estratégicos são numerados de 1 a N.
	
	Cada uma das próximas M linhas contém um par de inteiros i e j indicando que existe uma estrada ligando o ponto i ao j. Em seguida tem uma linha contendo um inteiro A (0 ≤ A ≤ 2000), correspondendo ao número de atiradores na cidade, seguido por A inteiros indicando a posição de cada atirador. 
	A última linha de cada instância contém dois inteiros indicando o ponto de partida e o destino do soldado.";Para cada instância imprima uma linha contendo a probabilidade de sucesso do soldado soviético. A probabilidade deve ser impressa com 3 casas decimais.;False;7 / 10;1490;522;35.03%
1206;Desafio de São Petersburgo;Ad-Hoc;10;"A Russia sempre foi berço de grandes mestres de xadrez. Poucos sabem, mas a FIDE (Federação Internacional de Xadrez), 
	que é o órgão máximo regulador do jogo de xadrez foi fundada em 1924, a partir de um movimento iniciado 10 anos antes 
	no campeonato mundial da modalidade que ocorreu em São Petersburgo em 1914. Hoje, entre os 10 melhores jogadores do mundo, 
	segundo a FIDE, três são russos.
    
	O torneio de São Petersburgo ficou também conhecido pelas tentativas dos grandes mestres de popularização do jogo. Na época 
	os maiores mestres (como Capablanca) foram às ruas propor desafios para as pessoas com o objetivo de interessá-las a 
	praticar o jogo. Um desses desafios ficou conhecido como o desafio de São Petersburgo. O grande mestre montava uma 
	situação em que as peças brancas tinham apenas o rei, e o objetivo era que a pessoa dissesse se o rei branco estava ou 
	não em xeque mate.
    
	Na situação descrita acima, o rei branco está em xeque mate se ele está sendo atacado e qualquer movimento que ele faça o leva para uma casa que também está sendo atacada.
    
	O que você precisa saber sobre xadrez
	
	Considere que inicialmente as peças do jogador preto ficam nas linhas 7 e 8 enquanto as do jogador branco iniciam nas linhas 1 e 2. Não pode haver duas peças na mesma casa. As peças consideradas no problema (peão, torre, bispo, rainha e rei) não podem passar por cima de outras peças, ou seja, se durante sua movimentação existir alguma peça no seu caminho você deve parar antes ou atacar a peça (se ela for do oponente), tomando o seu lugar. A movimentação e o ataque de cada tipo de peça são da seguinte forma:
	
	# Peão: anda apenas uma casa para frente (em direção a linha 1) podendo atacar em qualquer uma das duas diagonais imediatamente a sua frente;
	# Torre: anda/ataca quantas casas quiser ou na horizontal, ou na vertical;
	# Bispo: anda/ataca quantas casas quiser na diagonal;
	# Rainha: anda/ataca quantas casas quiser ou na horizontal, ou na vertical, ou na diagonal;
	# Rei: anda/ataca apenas uma casa ou na horizontal, ou na vertical, ou na diagonal.";"A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). 
	A primeira linha de cada instância contém um inteiro N (2 ≤ N ≤ 10) indicando o número de peças pretas. 
	A linha seguinte contém a descrição das posições das N peças pretas separadas por um espaço. A terceira linha 
	contém a descrição do rei branco.
	Uma descrição de uma peça de xadrez consiste em 3 caracteres. O primeiro indica se a peça é um peão (P), torre (T), 
	bispo (B), rainha (R) ou rei (W). Note que o grande mestre não usava cavalos para facilitar para que ainda estava 
	começando a aprender o jogo. O segundo caracter, entre ’a’ e ’h’, indica a coluna na qual a peça está e o terceiro, 
	de ’1’ a ’8’ indica a linha.
	Em nenhuma das instâncias ocorre a situação na qual o rei branco e o rei preto são adjacentes.";"Para cada instância, imprima uma linha com a palavra SIM, se o rei branco está em xeque mate, ou a palavra NAO, 
	caso contrário.";False;10 / 10;943;232;24.60%
1207;Os Benefícios da Vodka;Grafos;9;"São Peterburgo é conhecida como a capital da cerveja russa e abriga diversas cervejarias importantes. Dizem que a qualidade da água da cidade é responsável por uma cerveja de excelente qualidade. Além de fábricas tradicionais, como a Heineken, algumas marcas locais são destacadas, como a Tinkoff e a Baltika. Também na cidade são produzidas algumas das melhores vodkas do mundo. A mais antiga, chamada Liviz, data de 1897. Esta destilaria produz vodkas de  excelente qualidade, medida por padrões internacionais. Curiosamente, alguns tipos de vodkas, quando consumidos juntos, acabam tendo, segundo os  especialistas, sabor muito melhor. Dessa forma, alguns tipos de vodka são reunidos em categorias que, quando compradas totalmente pelo consumidor, trazem um benefício agregado medido segundo padrões internacionais de qualidade. Cada uma das vodkas tem um preço associado, e sua tarefa é encontrar uma compra que maximize o benefício total menos o custo das vodkas adquiridas.
    
	Reescrevendo, cada vodka tem um custo Cj e existem M categorias diferentes, cada qual com um benefício Bi. Um benefício só é computado se todos os tipos de vodka que compõem a categoria são adquiridos. Uma mesma garrafa de vodka pode participar de mais de uma categoria para computar o benefício. Sua tarefa é determinar quais tipos de vodka comprar de forma a maximizar a soma dos benefícios adquiridos menos o custo dos itens  comprados. Você pode supor que foi à Russia com dinheiro suficiente para comprar todos os tipos de vodka produzidos pela Liviz (oba!! :D).";"A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). 
	A primeira linha de cada instância contém dois inteiros N (1 ≤ N ≤ 600) e M (1 ≤ M ≤ 400) 
	representando, respectivamente, a quantidade de tipos diferentes de vodka a venda e o número de categorias existentes. 
	Os tipos de vodka são identificados por números de 1 a N e as categorias por números de 1 a M.
    
	A linha seguinte contém N inteiros, Cj (1 ≤ Cj ≤ 1000) para (1 ≤ j ≤ N), 
	separados por espaço, correspondendo ao custo da vodka j. Na próxima linha existem M inteiros, Pi 
	(1 ≤ Pi ≤ N) 
	para (1 ≤ i  ≤ M), separados por espaço, indicando quantos tipos diferentes de vodkas compõe a categoria i. 
	Cada uma das M linhas seguintes descreve uma categoria começando com um inteiro, 
	Bi (1 ≤ Bi ≤ 1000) para (1 ≤ i ≤ M), indicando seu benefício, 
	seguido pelos tipos de vodka que a 
	compõe, separados por espaços.";Para cada instância imprima, em uma única linha, o maior valor que pode ser obtido da soma dos benefícios das categorias adquiridas menos o custo dos tipos de vodkas compradas.;False;9 / 10;298;106;35.57%
1208;As dinastias de São Petersburgo;Grafos;7;"São Petersburgo foi fundada no dia 27 de maio de 1703 pelo czar Pedro, o Grande, e foi capital imperial da Rússia por 
	um período curto logo após (de 1713 a 1728) e depois por quase dois séculos, de 1732 a 1918. Neste último período o trono imperial russo acabou sendo ocupado por diversos imperadores, muitas vezes de linhas de dinastia diferentes. Na tradição imperial russa chama-se de текущий (lê-se текущий 1*) uma sequência de descendentes dentro de uma dinastia, ou seja, um elemento, seu filho, seu neto, e assim por diante. A determinação destas текущий é fundamental quando se deseja determinar o sucessor do atual imperador, uma vez que o próximo imperador é o elemento vivo de uma текущий que esteja mais próxima do atual imperador.
	
	É claro que uma árvore genealógica pode ser dividida em текущий de várias formas diferentes. O interessante é encontrar uma partição que minimize o número de текущий necessário para cobrir todos os elementos da dinastia.
	
	Sua tarefa neste problema é determinar, dada a árvore genealógica da família imperial russa, o menor número de текущий que particionam toda a família imperial, isso é, todos os imperadores tem que pertencer à exatamente uma текущий e essas têm que ser o menor número possível.";"A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). 
	A primeira linha de cada instância contém dois inteiros N (1 ≤ N ≤ 1000) 
	e (M 0 ≤ M ≤ 10000) representando, respectivamente, a quantidade de imperadores 
	e o número de relações de filiação naquela instância. Os imperadores são identificados por números de 1 
	à N. Cada uma das próximas M linhas contém dois 
	inteiros Pi (1 ≤ Pi < Fi) e 
	Fi (Pi < Fi ≤ N), 
	indicando que Pi é pai de Fi. 
	Uma particularidade da da árvore genealógica dada é que em caso de dúvidas de paternidade, todos os possíveis pais eram indicados, ou seja, uma pessoa pode ter qualquer número de pais.";Para cada instância imprima uma linha contendo um único número inteiro, que é o número mínimo de текущий necessários para particionar todos os imperadores daquela instância.;False;7 / 10;264;137;51.89%
1209;Festas de São Petersburgo;Ad-Hoc;7;"São Petersburgo tornou-se após o fim da cortina de ferro, no início dos anos 90, uma das principais cidades da cena alternativa em todo o mundo. Grupos de punks, diversas bandas de hardcore e outros representantes da cena alternativa mudaram-se para a cidade, atraídas pela grande quantidade de jovens. Com o surgimento das comunidades virtuais, alguns anos mais tarde, notou-se o enorme potencial do uso destas comunidades para combinar encontros, festas, raves, etc.
    
	Nestas festas de São Petersburgo é sempre muito importante que cada um dos participantes tenha pelo menos um certo número de amigos na rede social. E, ao mesmo tempo, desejamos convidar o maior número possível de pessoas de São Petersburgo desde que a restrição com relação ao número de amigos seja satisfeita. Tal restrição diz que, para ser convidada a festa, a pessoa precisa ter pelo menos um número K de amigos na lista de convidados.
    
	Sua tarefa neste problema é, dado o conjunto de pessoas da comunidade e a lista de suas relações, determinar quais devem ser chamadas para que a festa tenha a maior quantidade possível de participantes satisfazendo a restrição.";A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém três inteiros N (1 ≤ N ≤ 1000), M e K (O ≤ K ≤ N) representando respectivamente o número de pessoas na comunidade, o número de relações de amizade nessa comunidade e o número mínimo de amigos convidados uma pessoa precisa ter para ser convidada. Cada pessoa da comunidade é identificada por números de 1 a N. Cada uma das próximas M linhas contém um par de pessoas indicando que elas são amigas na rede social.;Para cada instância imprima uma única linha contendo a lista das pessoas a serem convidadas separadas por um espaço em branco. A lista deve estar ordenada em ordem crescente. Caso ninguém possa ser convidado, imprima o número 0.;False;7 / 10;2662;555;20.85%
1210;Produção Ótima de Ótima Vodka;Paradigmas;6;"A produção de vodka da cidade de São Petersburgo é famosa em todo o mundo. Conta a lenda que a vodka produzida é distribuída diretamente na casa de alguns dos funcionários mais graduados da empresa através do sistema de abastecimento de água. Ou seja, basta abrir a torneira e a vodka jorra geladinha (afinal os canos estão correndo a uma temperatura negativa na maior parte do ano) do cano. Isso causa diversos problemas de segurança, afinal as pessoas escavam as ruas procurando os supostos canos de vodka que saem da empresa.
                    
                    Este não é o único problema enfrentado na produção de vodka da cidade. Para garantir o 
                    padrão de qualidade exigido da bebida, ela é produzida em apenas um  destilador, que tem uma vida 
                    útil bem definida, de M anos. Sua manutenção varia dependendo da idade do equipamento. O custo de manutenção é Ci , onde i é a idade do destilador, e deve ser pago todo ano, até mesmo para destiladores novos. Estes destiladores têm um preço P quando comprados novos (idade 0) e os destiladores usados em fábricas russas são disputados por destilarias de todo o mundo, onde são usados ainda por muitos anos, e por museus. O preço de venda de um destilador com idade i é Vi.
                    
                    Note que um destilador com idade M não pode mais ser usado e deve ser vendido. Sua tarefa neste problema é decidir em quais instantes a empresa deverá trocar o destilador de forma a minimizar o custo de produção ao final de N anos (a partir do ano 1). Considere que a troca de destiladores só pode ser feita no início do ano.";"A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância possui 4 inteiros, N (1 ≤ N ≤ 2000), I (1 ≤ l ≤ M), M (1 ≤ M ≤ 2000) e P (1 ≤ P ≤ 1000) representando, respectivamente, o período de produção, 
                    a idade inicial do destilador, a idade máxima do destilador e o preço de um destilador novo. 
                    
                    A linha seguinte contém M inteiros, separados por espaços, correspondendo ao custo de manutenção Ci (1 ≤ Ci ≤ 1000), para i = 0,1,2, ... M - 1. A próxima e última linha contém M inteiros, separados por espaços, correspondendo ao valor de venda Vi (1 ≤ Vi ≤ P), para i = 1,2, ..., M.";"Para cada instância a saída deve conter duas linhas. Na primeira, imprima o custo mínimo para o período dado. Na segunda, 
                    uma sequência crescente de inteiros, separados por espaços, indicando
                    os anos nos quais são trocadas as máquinas. Se a máquina nunca é trocada, então imprima apenas um 0. 
                    Caso exista mais de uma sequência possível, escolha aquela na qual as máquinas são trocadas
                    o mais cedo possível e sempre que possível (por exemplo, entre as sequências “1 4 7” e “1 2 8 10 14” escolha a segunda).";False;6 / 10;946;416;43.97%
1211;Lista Telefônica Econômica;Estruturas e Bibliotecas;5;"Devido ao grande número de reclamações, a companhia telefônica de São Petersburgo está sendo obrigada a investir pesado na melhora de seus serviços. Para isso a companhia decidiu diminuir o orçamento de alguns setores para aumentar o de outros mais essenciais. Um dos setores que terá seu orçamento reduzido é o de impressão de listas telefônicas.
	
	Com um orçamento reduzido, o setor de impressão de listas telefônicas 
	não consegue comprar toner suficiente para imprimir as listas completas. 
	Como os números de telefone são impressos alinhados na vertical, foi sugerida 
	a seguinte solução: a partir do segundo número de telefone impresso, os dígitos 
	iniciais do próximo número a ser impresso que coincidirem com os do número acima 
	são omitidos, ficando apenas um espaço em branco. Por exemplo, para os números 
	535456,	535488, 536566 e 835456 a impressão é a seguinte:

	5 3 5 4 5 6
	        8 8
	    6 5 6 6
	8 3 5 4 5 6
	

	Note que esta impressão economizou a impressão de 6 caracteres. A companhia telefonica cogitou também não imprimir os sufixos repetidos, mas nos testes feitos viram que a resposta não foi boa para o usuário e decidiram, portanto, fazer apenas a eliminação em prefixos. Para saber se a economia será suficiente, o setor de impressão quer saber o número máximo de caracteres que podem ser omitidos. No entanto, como em qualquer cidade grande, são vários os números telefônicos e eles não querem gastar homens-hora para calcular manualmente este valor. Então cabe a você, novo empregado da companhia, automatizar a economia feita pelo toner, no número de caracteres.";"A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada caso de teste contém um inteiro 
	N, que informa o número de telefones na lista. As próximas N 
	(1 ≤ N	≤ 105) linhas possuem, cada uma delas, um telefone Xi, 
	de até 200 caracteres. Para um mesmo caso de teste os números de telefone têm a mesma quantidade de caracteres. 
	Um número de telefone pode começar com o caracter ’0’.";Para cada caso de teste imprima uma linha informando o maior número possível de caracteres economizados por este processo.;False;5 / 10;8365;2360;28.21%
1212;Aritmética Primária;Matemática;7;"As crianças são ensinadas a adicionar vários dígitos da direita para a 
esquerda, um dígito de cada vez. Muitos acham a operação ""vai 1"" (em inglês chamada de 
""carry"", na qual o valor 1 é carregado de uma posição para ser adicionado ao 
dígito seguinte) um desafio significativo. Seu trabalho é para contar 
o número de operações de carry para cada um dos problemas de adição apresentados 
para que os educadores possam avaliar a sua dificuldade.";Cada linha de entrada contém dois inteiros sem sinal com no máximo 9 dígitos. A última linha de entrada contém 0 0.;"Para cada linha de entrada, com exceção da última, você deve computar e imprimir a quantidade de operações ""leva 1"" que resultam da adição dos 2 números, no formato apresentado no exemplo abaixo.";False;7 / 10;13992;3543;25.32%
1213;Ones;Matemática;5;"Dado qualquer inteiro n (1 ≤ n ≤ 10000) não divisível por 2 
 ou por 5, algum múltiplo de n deve ser um número que é uma sequência de
números 1. Você deve então calcular e mostrar quantos dígitos tem o menor múltiplo de n que tem todos seus dígitos iguais a 1.";A entrada consiste de vários casos de teste e termina com EOF. Cada caso de teste contém um inteiro n (1 ≤ n ≤ 10000) não divisível por 2 ou por 5.;Para cada caso de teste, imprima quantos dígitos tem o múltiplo de n que atende os requisitos acima.;True;5 / 10;4399;1795;40.80%
1214;Acima da Média;Matemática;4;Sabe-se que 90% dos calouros tem sempre a expectativa de serem acima da média no início de suas graduações. Você deve checar a realidade para ver se isso procede.;A entrada contém muitos casos de teste. A primeira linha da entrada contém um inteiro C, indicando o número de casos de teste. Seguem C casos de teste ou instâncias. Cada caso de teste inicia com um inteiro N, que é o número de pessoas de uma turma (1 ≤ N ≤ 1000). Seguem N inteiros, separados por espaços, cada um indicando a média final (um inteiro entre 0 e 100) de cada um dos estudantes desta turma.;Para cada caso de teste imprima uma linha dando o percentual de estudantes que estão acima da média da turma, com o valor arredondado e com 3 casas decimais.;True;4 / 10;10151;5103;50.27%
1215;Primeiro Dicionário de Andy;Estruturas e Bibliotecas;7;"Andy de 
	apenas 8 anos tem um sonho - ele deseja criar o seu próprio dicionário. Isto não é uma tarefa fácil para ele, pois conhece poucas palavras. Bem, ao invés de pensar nas palavras que sabe, ele teve uma idéia brilhante. A partir do seu livro de histórias favorito, ele vai criar um dicionário com todas as palavras distintas que existem nele. Ordenando estas palavras em ordem alfabética, o trabalho estará feito. É claro, isso é uma tarefa que toma um certo tempo e portanto, a ajuda de um programador de computador como você é muito bemvinda.
	
	Você foi convidado a escrever um programa que liste todas as diferentes palavras que existem em um texto. Neste caso, uma palavra é definida como uma sequência de letras, maiúsculas ou minúsculas. Palavras com apenas uma letra também deverão ser consideradas. Portanto, seu programa deverá ser ""CaSe InSeNsItIvE"". Por exemplo, palavras como ""Apple"", ""apple"" ou ""APPLE"" deverão ser consideradas como a mesma palavra.";A entrada contém no máximo 10000 linhas de texto, cada uma delas com no máximo 200 caracteres. O fim de entrada é determinado pelo EOF.;Você deve imprimir uma lista de diferentes palavras que aparecem no texto, uma palavra por linha. Todas as palavras devem ser impressas com letras minúsculas, em ordem alfabética. Deverá haver no máximo 5000 palavras distintas.;True;7 / 10;4887;1671;34.19%
1216;Getline One;Ad-Hoc;3;Mangojata está aprendendo programação. Ela acha tudo muito fácil, muito simples. Ela está prestes a fazer um pequeno programa que leia o nome dos seus amigos e a distância de sua casa até cada um deles. Desta forma, ela quer simplesmente calcular qual é a distância média que deve ser percorrida para chegar na casa de qualquer um de seus amigos (em metros). Porém Aristoclenes, que é um programador mais experiente, lhe alertou que às vezes o que parece muito simples tem lá seus detalhes, dependendo da linguagem que é utilizada para implementação.;A entrada contém vários casos de teste e termina com EOF (Fim de Arquivo). Cada caso de teste consiste de duas linhas de entrada. A primeira linha contém o nome de um amigo de Mangojata e a segunda linha contém um valor inteiro que indica a distância aproximada da casa deste amigo até a casa de Mangojata.;A saída deve ser um único valor com uma casa decimal (utilize uma variável de dupla precisão - double) indicando a distância média entre a casa de Mangojata e de seus amigos, conforme exemplo abaixo.;False;3 / 10;12190;5236;42.95%
1217;Getline Two - Frutas;Ad-Hoc;3;Dona Parcinova, mãe de Mangojata, pediu a ela que ajudasse a calcular o consumo de frutas da casa e a quantidade gasta por dia nestas frutas. Mangojata agora deve então fazer um programa a partir de uma tabela que sua mãe estava utilizando para anotações há quase um ano. Nesta tabela, dona Parcinova anotou a quantidade de dias e depois o valor gasto cada dia e as frutas compradas naquele dia, sempre na quantidade de um KG por tipo de fruta.;A primeira linha de entrada contém um inteiro N (1 ≤ N ≤ 365) que indica o número de casos de teste que vem a seguir. Cada caso de teste é composto por 2 linhas. A primeira linha contém um valor de ponto flutuante V (0.10 ≤ V ≤ 20.00) indicando o valor gasto no dia e a segunda linha contém o nome de cada uma das frutas que dona Parcinova comprou.;"Para cada caso de teste, imprima quantos kg de frutas dona Parcinova comprou em cada dia, com mensagem 
                    correspondente em inglês, conforme exemplo abaixo. No final, apresente o consumo médio em kg 
                    por dia com 2 casas decimais seguido da mensagem correspondente e a média de gasto por dia com as frutas, 
                    também em inglês e com mensagem correspondente, conforme o exemplo abaixo. Obs.: Todas as letras da saída devem 
                    ser impressas em minúsculas, com exceção do ""R"" de ""R$""";True;3 / 10;6340;3030;47.79%
1218;Getline Three -  Calçados;Ad-Hoc;5;Agora que Mangojata resolveu alguns problemas que utilizavam getline, acha que está apta a dar um passo adiante. Ela está prestes a fazer um novo programa para auxiliar a sua irmã, Overlaine. Overlaine é vendedora de calçados e por um acidente, misturou todos os pares de calçados que tinha para vender. Ela quer informar um número qualquer N e contar quantos calçados de uma determinada caixa são deste tamanho (N). O problema é que Overlaine não tem a menor idéia de quantos calçados existem em cada caixa. A única coisa que sabe é que cada calçado pode ter numeração de 20 a 44, podendo ser masculino ou feminino.;A entrada contém vários casos de teste e termina com EOF (Fim de Arquivo). Cada caso de teste consiste de duas linhas de entrada. A primeira linha contém uma numeração N (20 ≤ N ≤ 44) de calçado que Overlaine informa e a segunda linha contém o número de cada par que está dentro da caixa seguido de M ou F indicando se o par é de calçado Masculino ou Feminino.;"Para cada caso de teste imprima quatro linhas, conforme exemplo abaixo. A primeira linha deve apresentar a mensagem “Caso n:”, onde n é o número do caso de teste. A segunda linha deve informar quantos pares da caixa de calçados são iguais ao número que Overlaine quer encontrar, com mensagem correspondente. Seguem duas linhas com a quantidade respectiva de calçados Femininos (F) e Masculinos (M), com mensagem correspondente.
	
	Imprima uma linha em branco entre as saídas de dois casos de teste consecutivos.";False;5 / 10;5601;1996;35.64%
1219;Flores Coloridas;Matemática;5;"""Roses are red, violets are blue...""
                    
                    Mr Smith é um milionário muito conhecido – não por sua saúde, mas por seu senso de ""arte""... Mr Smith Fez um jardim circular. Nos limites ele marcou três pontos e fez um triângulo. Ele então encontrou o maior círculo dentro da região triangular. Mais ou menos conforme a figura abaixo:
                
                    
                
                    Mr Smith então plantou girassóis amarelos, violetas azuis e rosas vermelhas, como mostrado na figura acima. (Combinaçào legal, não? :-) Dado os tamanhos dos 3 lados do triângulo, você deve encontrar as áreas que correspondem respectivamente aos 3 tipos de flores: amarelas, azuis e vermelhas.";Cada linha de entrada contém 3 inteiros a, b, c, que são os tamanhos dos 3 lados da região triangular, com 0 < a ≤ b ≤ c ≤ 1000. A entrada é terminada por final de arquivo (EOF).;Para cada caso, seu programa deverá mostrar as saídas das áreas com girassóis, violetas e rosas respectivamente. Imprima suas respostas corretamente com 4 casas decimais.;True;5 / 10;3526;1634;46.34%
1220;A Viagem;Matemática;7;Alguns estudantes são membros de um clube que viaja anualmente para locais exóticos. Os seus destinos no passado incluíram Indianapolis, Phoenix, Nashville, Filadélfia, San Jose, e Atlanta. Nesta primavera eles estão planejando uma viagem para Eindhoven. O grupo concorda com antecedência em dividir as despesas de forma igual, mas não é prático ficar fazendo acerto a cada despesa nova que ocorre. Assim, cada indivíduo do grupo paga por coisas específicas, como refeições, hotéis, passeios de táxi, bilhetes de avião, etc. Após a viagem, as despesas de cada aluno são computados e dinheiro é trocado de modo a que o custo final para cada um deles é o mesmo, com diferença de no máximo um centavo. No passado, esta troca de dinheiro tem sido tediosa e demorada. Seu trabalho é calcular, a partir de uma lista de despesas,a quantidade mínima de dinheiro que tem de mudar de mãos, a fim de equalizar (dentro de um centavo) os custos de todos os estudantes.;"A entrada contém a informação de diversas viagens. A informação de cada viagem consiste de uma linha contendo um inteiro positivo  n  (1 ≤  n  ≤ 1000) indicando o número de alunos na viagem, seguida por  n  linhas de entrada, cada uma contendo a quantidade em dólares e centavos, gastos por cada um dos estudantes. Nenhum estudante gastou mais de R$ 10.000,00.
                    
                    Uma única linha contendo 0 vem logo após a última viagem e determina o fim da entrada.";Para cada viagem, imprima uma linha com a quantidade de dinheiro (em dólares e centavos), que deve ser trocada para equalizar os custos dos estudantes.;False;7 / 10;3266;831;25.44%
1221;Primo Rápido;Matemática;6;"Mariazinha sabe que um Número Primo é aquele que pode ser dividido somente por 1 (um) 
	e por ele mesmo. Por exemplo, o número 7 é primo, pois pode ser dividido apenas pelo número 1 e pelo número 7 sem que haja resto. 
Então ela pediu para você fazer um programa que aceite diversos valores e diga se cada um destes valores é primo ou não. Acontece que a 
paciência não é uma das virtudes de Mariazinha, portanto ela quer que a execução de todos os casos de teste que ela selecionar (instâncias) aconteçam 
no tempo máximo de um segundo, pois ela odeia esperar.";"A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 200), correspondente ao número de casos de teste.
	Seguem N  linhas, cada uma contendo um valor inteiro X (1 < X < 231) que pode ser ou não, 
	um número primo.";Para cada caso de teste imprima a mensagem “Prime” (Primo) ou “Not Prime” (Não Primo), de acordo com o exemplo abaixo.;False;6 / 10;26727;7828;29.29%
1222;Concurso de Contos;Strings;4;Machado gosta muito de escrever. Já escreveu muitos contos, resenhas, relatos de viagens que fez, além de um pequeno romance. Agora Machado quer participar de um concurso de contos, que tem regras muito rígidas sobre o formato de submissão do conto. As regras do concurso especificam o número máximo de caracteres por linha, o número máximo de linhas por página, além de limitar o número total de páginas. Adicionalmente, cada palavra deve ser escrita integralmente em uma linha (ou seja, a palavra não pode ser separada silabicamente em duas linhas). Machado quer escrever um conto com o maior número de palavras possível, dentro das regras do concurso, e precisa de sua ajuda. Dados o número máximo de caracteres por linha, o número máximo de linhas por página, e as palavras do conto que Machado está escrevendo, ele quer saber o número mínimo de páginas que seu conto utilizaria seguindo as regras do concurso.;"A primeira linha de um caso de teste contém três inteiros N (2 ≤ N ≤ 1000), L (1 ≤ L ≤ 30 ) e C (1 ≤ C ≤ 70) , que indicam, respectivamente, o número de palavras do conto de Machado, o número máximo de linhas por página e o número máximo de caracteres por linha. O conto de Machado é inovador e não contém nenhum caractere além de letras maiúsculas e minúsculas e espaços em branco, sem letras acentuadas e sem cedilha. A segunda linha contém o conto de Machado, composto de N palavras (1 ≤ comprimento de cada palavra ≤ C) separadas por espaços em branco; há espaço em branco somente entre duas palavras, e entre duas palavras há exatamente um espaço em branco. O final da entrada é determinado pelo final de arquivo (EOF).";Para cada caso de teste imprima uma única linha, contendo um único número inteiro, indicando o número mínimo de páginas que o conto de Machado ocupa, considerando as regras do concurso.;False;4 / 10;7823;2296;29.35%
1223;Tobogan de Bolinhas;Geometria Computacional;8;"Uma fábrica quer produzir um tobogan de brinquedo como o da figura abaixo, composto de duas hastes de madeira sustentando aletas que se alternam nas duas hastes. Uma bolinha de aço é solta na aleta mais alta do tobogan; sob efeito da gravidade, a bolinha desliza pelas aletas, 
	terminando por sair do brinquedo.
	 

	 

	
	O projeto do brinquedo, contendo as especificações do tamanho, posição e inclinação das hastes e de cada aleta, foi feito pelo dono da fábrica, e milhares de unidades já estão sendo confeccionadas na China. O gerente da fábrica foi incumbido de comprar as bolinhas de aço, mas antes de fazer o pedido das milhares de bolinhas quer saber o diâmetro máximo da bolinha, para que esta não pare no meio do brinquedo.
	 

	 

	
	Figura 1: Dois exemplos: em (a) a bolinha chega ao final, e (b) a bolinha para no meio do brinquedo e não chega ao final.
	
	O gerente da fábrica quer que você escreva um programa que, dadas as especificações do brinquedo, determine o diâmetro máximo da bolinha para que esta não pare no meio do brinquedo.";"A primeira linha de um caso de teste contém um inteiro N (1 ≤ N ≤ 103) indicando o número de aletas do brinquedo. A segunda linha contém dois inteiros L (1 ≤ L ≤ 103) e H (1 ≤ H ≤ 103), indicando respectivamente a distância entre as hastes e a altura das hastes do brinquedo. A haste esquerda do brinquedo está na posição 0 do eixo de ordenadas X, de forma que a haste direita está na posição L do eixo X.
	
	Cada uma das N linhas seguintes descreve uma aleta. As aletas são descritas da mais alta para a mais baixa, de forma alternada em relação à haste na qual a aleta está conectada. A aleta mais alta do brinquedo (a primeira a ser descrita) tem a extremidade ligada à haste esquerda; a segunda aleta mais alta (a segunda a ser descrita) tem a extremidade ligada à haste direita, assim alternadamente. As aletas ímpares têm a extremidade ligada à haste esquerda, as aletas pares têm a extremidade ligada à haste direita.
	
	Cada aleta é descrita em uma linha contendo três números inteiros Yi, Xf (0 < Xf < L) e Yf (0 ≤ Yf ≤ H), separados por um espaço em branco. (Xf , Yf) indica a coordenada do final da aleta; para aletas ímpares a coordenada do início da aleta  é (0, Yi (0 ≤ Yi ≤ H)), e para aletas pares a coordenada do início da aleta é (L, Yi ). 
	
	Para todas as aletas Yi > Yf  (ou seja, há um declive entre o início e o final da aleta), e o comprimento da aleta é menor do que a largura do brinquedo. Além disso, para duas aletas consecutivas A e B, Yfa >= YiB  (ou seja, o final da aleta A tem altura maior do que ou igual ao início da aleta B). Considere que as aletas são muito finas, de forma que a sua espessura pode ser desconsiderada, e que a sua largura é sempre maior do que o diâmetro da bolinha (ou seja, a bolinha sempre tem espaço lateral para deslizar pela aleta).";Para cada caso de teste imprima uma linha contendo um único número, com exatamente duas casas decimais, indicando o maior diâmetro de bolinha tal que esta consiga percorrer todo o brinquedo.;True;8 / 10;1313;416;31.68%
1224;Cartões;Paradigmas;9;"Dois jogadores, Alberto e Wanderley, disputam um jogo. Um conjunto com um número par de cartões contendo números inteiros é disposto sobre uma mesa, um ao lado do outro, formando uma sequência. Alberto começa, e pode pegar um dos dois cartões das pontas. Wanderley então pode pegar um dos dois cartões das pontas e novamente Alberto pode pegar um cartão das pontas, e assim por diante, até Wanderley pegar o último cartão.
    
	Alberto, o primeiro a jogar, tem como objetivo maximizar o número total de pontos que ele consegue, somando os valores dos cartões escolhidos. Wanderley, o segundo jogador, quer atrapalhar o Alberto e fazer com que ele consiga o menor número de pontos possível. Em suma, ambos querem fazer o melhor possível, Alberto querendo maximizar sua soma e Wanderley querendo minimizar a soma de Alberto.
    
	Você deve escrever um programa que, dada a sequência de cartões, determine o maior número de pontos que Alberto consegue obter.";Cada caso de teste é descrito em duas linhas. A primeira linha contém um inteiro par N (2 ≤ N ≤ 104), que indica o número de cartões sobre a mesa. A segunda contém N inteiros, que descrevem a sequência de cartões. Cada um dos N inteiros cabem em um inteiro de 32 bits.;Para cada caso de teste seu programa deve imprimir uma única linha, contendo um único inteiro, o maior número de pontos que Alberto consegue obter.;False;9 / 10;3516;734;20.88%
1225;Coral Perfeito;Ad-Hoc;4;"A Maestrina do coral está planejando o espetáculo que apresentará na famosa Semana Brasileira de Corais. Ela pensou em preparar uma nova música, definida da seguinte maneira:
	
	• cada um dos integrantes do coral inicia cantando uma nota, e somente muda de nota quando determinado pela Maestrina;
	
	• ao final de cada compasso, a Maestrina determina que exatamente dois integrantes alterem a nota que cantam: um integrante passa a cantar a nota imediatamente acima da nota que cantava, e o outro integrante passa a cantar a nota imediatamente abaixo da nota que cantava;
	
	• a música termina ao final do primeiro compasso em que todos os integrantes do coral cantam a mesma nota.
	
	A Maestrina já tem várias ideias de como distribuir as notas no início da música entre os integrantes do coral, de forma a criar o efeito desejado. No entanto, ela está preocupada em saber se, dada uma distribuição de notas entre os integrantes, é possível chegar ao final da música da forma desejada (todos cantando a mesma nota) e, caso seja possível, qual o número mínimo de compassos da música. Você pode ajudá-la?";"A primeira linha de um caso de teste contém um inteiro N (2 ≤ N ≤ 104) indicando
	o número de integrantes do coral. As notas serão indicadas por números inteiros. A segunda linha contém N números inteiros,
	indicando as notas iniciais (−105 ≤ notai ≤105), onde 0 ≤ i ≤ N−1, que cada integrante deve cantar. As notas são dadas em ordem não decrescente de altura (notai ≤notai+1).";Para cada caso de teste imprima uma linha contendo um único número inteiro indicando o número mínimo de compassos que a música terá. Se não é possível terminar a música com todos os integrantes cantando a mesma nota, imprima o valor−1.;False;4 / 10;1976;1048;53.04%
1226;Elevador Espacial;Paradigmas;8;"A China está construindo um elevador espacial, que permitirá o lançamento de sondas e satélites a um custo muito mais baixo, viabilizando não só projetos de pesquisa científica como o turismo espacial.
	
	No entanto, os chineses são muito supersticiosos, e por isso têm um cuidado muito especial com a numeração dos andares do elevador: eles não usam nenhum número que contenha o dígito “4” ou a sequência de dígitos “13”. Assim, eles não usam o andar 4, nem o andar 13, nem o andar 134, nem o andar 113, mas usam o andar 103. Assim, os primeiros andares são numerados 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, . . .
	
	Como o elevador espacial tem muitos andares, e eles precisam numerar todos os andares do elevador, os chineses pediram que você escrevesse um programa que, dado o andar, indica o número que deve ser atribuído a ele.";Cada caso de teste consiste de uma única linha, contendo um inteiro N (1 ≤ N ≤ 1018) que indica o andar cujo número deve ser determinado.;Para cada caso de teste, imprima uma linha contendo um único número inteiro indicando o número atribuído ao N-ésimo andar.;False;8 / 10;1000;291;29.10%
1227;Perdido na Noite;Grafos;7;"Numa cidade da Nlogônia, o sistema viário é composto de N rotatórias e N−1 ruas, sendo que cada rua liga duas rotatórias distintas. Utilizando o sistema viário, é possível ir de qualquer rotatória para qualquer outra rotatória da cidade.
	
	A cidade possui apenas dois hotéis: um barato, localizado na rotatória B, e um caro, localizado na rotatória C. Um turista veio à cidade para celebrar o aniversário de um amigo, cuja festa está sendo realizada em um clube localizado na rotatória A. Como o turista não fez reserva em nenhum dos hotéis e a noite está agradável, após a festa ele decidiu passear a pé pelas ruas e rotatórias até encontrar um dos hotéis (ele também decidiu hospedar-se no primeiro hotel que encontrar).
	
	Seu plano foi dificultado porque como ele não conhece a cidade e bebeu um pouco além da conta, todas as ruas lhe parecem iguais. Assim, ele decidiu usar a seguinte estratégia: a cada rotatória ele escolhe, com probabilidade uniforme, uma das ruas que saem da rotatória, e usa essa rua para ir a uma outra rotatória, até chegar à rotatória onde um dos hotéis está localizado. Note que como o turista não consegue distinguir as ruas, pode ocorrer de ele escolher a mesma rua pela qual chegou à rotatória.
	
	Você deve escrever um programa que, dadas a descrição do sistema viário, a localização A da festa de aniversário, a localização B do hotel barato e a localização C do hotel caro, determine a probabilidade de o turista chegar ao hotel barato antes de chegar ao hotel caro.";"A primeira linha de um caso de teste contém quatro inteiros N (3 ≤ N ≤ 100), A (1 ≤ A), B e C (C ≤ N), indicando respectivamente o número de rotatórias do sistema viário, a rotatória onde a festa de aniversário foi realizada, a rotatória onde o hotel barato está localizado, e a rotatória onde o hotel caro está localizado. Cada uma das N−1 linhas seguintes contém dois inteiros X (1 ≤ X) e Y (Y ≤ N), indicando que existe uma rua que liga as rotatórias X e Y.
	
	Nota: B != C, A != B, A != C e X != Y";Seu programa deve imprimir uma única linha, contendo a probabilidade de o turista chegar ao hotel barato antes de chegar ao hotel caro, com 6 casas decimais.;False;7 / 10;707;257;36.35%
1228;Grid de Largada;Ad-Hoc;3;Na Nlogônia, vai ser realizada a sensacional final mundial da fórmula 17. Os competidores se alinham na largada e disputam a corrida. Você vai ter acesso aos grids de largada e de chegada. A questão é determinar o número mínimo de ultrapassagens que foram efetuadas durante a competição.;Cada caso de teste utiliza três linhas. A primeira linha de um caso de teste contém um inteiro N (2 ≤ N ≤ 24) indicando o número de competidores. Cada competidor é identificado com um número de 1 a N. A segunda linha de cada caso tem os N competidores, em ordem do grid de largada. A terceira linha de cada caso tem os mesmos competidores, porém agora na ordem de chegada.;Para cada caso de teste imprima uma linha contendo um único número inteiro, que indica o número mínimo de ultrapassagens necessárias para se chegar do grid de largada ao grid de chegada.;False;3 / 10;4325;1944;44.95%
1229;Combate ao Câncer;Paradigmas;7;"Pesquisadores da Fundação Contra o Câncer (FCC) anunciaram uma descoberta revolucionária na Química: eles descobriram como fazer átomos de carbono ligarem-se a qualquer quantidade de outros átomos de carbono, possibilitando a criação de moléculas muito mais complexas do que as formadas pelo carbono tetravalente. Segundo a FCC, isso permitirá o desenvolvimento de novas drogas que poderão ser cruciais no combate ao câncer.
	
	Atualmente, a FCC só consegue sintetizar moléculas com ligações simples entre os átomos de carbono e que não contêm ciclos em suas estruturas: por exemplo, a FCC consegue sintetizar as moléculas (a), (b) e (c) 
	abaixo, mas não a molécula (d).

	

	Devido à agitação térmica, uma mesma molécula pode assumir vários formatos. Duas moléculas são equivalentes se for possível mover os átomos de uma das moléculas, sem romper nenhuma das ligações existentes nem criar novas ligações químicas, de forma que ela fique exatamente igual à outra molécula. Por exemplo, na figura acima, a molécula (a) não é equivalente à molécula (b), mas é equivalente à molécula (c).
	
	Você deve escrever um programa que, dadas as estruturas de duas moléculas, determina se elas são equivalentes.";"A primeira linha de um caso de teste contém um inteiro N indicando o número de átomos nas duas moléculas. Os átomos são identificados por números inteiros de 1 a N (2 ≤ N ≤ 104). Cada uma das 2N − 2 linhas seguintes descreve uma ligação química entre dois átomos: as primeiras N − 1 linhas descrevem as ligações da primeira molécula; as N − 1 últimas descrevem as ligações químicas da segunda molécula. Cada linha contém dois inteiros A (1 ≤ A ) e B (B ≤ N) indicando que existe uma ligação química entre os átomos A e B.";Para cada caso de teste seu programa deve imprimir uma única linha, contendo um único caractere: S se as moléculas são equivalentes ou N caso contrário.;True;7 / 10;741;306;41.30%
1230;Integral;Matemática;10;"Dado um inteiro positivo n, denotaremos por [n] o intervalo real {x : 0 ≤ x ≤ n}. Uma função f : [n] ⇒ R é parcialmente especificada, sendo fornecidos valores de f apenas em pontos de um subconjunto S de [n].
                	O conjunto S satisfaz as seguintes propriedades:
                	1. Os pontos em S são todos inteiros.
                	2. Os extremos 0 e n de [n] estão ambos em S.
                	A função f satisfaz as seguintes propriedades:
                	1. Os valores def nos pontos inteiros de [n] são inteiros.
                	2. Para cada ponto inteiro x em [n] \ S (ou seja, nos pontos inteiros de [n] que não estão em S), a função f é monótona no intervalo [x − 1, x + 1]. Em outras palavras, pelo menos uma das desigualdades f(x − 1) ≤ f(x) ≤ f(x + 1) ou f(x − 1) ≥ f(x) ≥ f(x + 1) é satisfeita.
                	3. Para cada ponto não inteiro x em [n], o valor de f(x) é dado pela interpolação linear de f(⌊x⌋) e f(⌈x⌉), isto é,  f(x) = (x − ⌊x⌋)f(⌊x⌋) + (⌈x⌉  − x)f(⌈x⌉).
                    Temos ainda a liberdade de especificar os valores de  f nos pontos inteiros de [n] \ S (note no entanto que S pode conter todos os pontos inteiros de [n]). Gostaríamos de utilizar essa flexibilidade para fazer com que f(x)dx = y, isto é, a área sob f(x) entre os extremos 0 e n seja igual a y, um valor dado.
                    Seu problema então é decidir se isso é possível ou não.";"A primeira linha de um caso de teste contém três inteiros, N (1 ≤ N ≤ 106), M e Y (0 ≤ Y ≤ 109), respectivamente a amplitude do intervalo, o tamanho do conjunto S e o valor de y. Cada uma das M linhas seguintes descreve a função f em um ponto de S, contendo dois inteiros X (0 ≤ X ≤ N, ∀X ∈ S) e F (0 ≤ F ≤ 106), representando f(X) = F. Os valores de X não estão necessariamente em ordem crescente.
	               Obs.:  f(x)dx ≤ 109 para qualquer atribuição de valores a f(x) para x ∈ [n] \ S satisfazendo as \restrições do enunciado.";Para cada caso de teste, determine se existe atribuição de valores a f(x) para os pontos inteiros x ∈ [n] \ S tal que f(x)dx = y, isto é, a área sob f(x) entre os extremos 0 e n seja igual a y. Em caso negativo, seu programa deve imprimir uma linha contendo apenas o caractere ‘N’. Em caso afirmativo, seu programa deve imprimir uma linha contendo o caractere ‘S’, seguido dos valores de f(x) para os pontos inteiros x ∈ [n] \ S, e, em ordem crescente de valores de x. O caractere inicial e os valores seguintes, se houver, devem ser separados por um espaço em branco. Caso mais de uma solução seja possível, imprima aquela que for lexicograficamente menor.;True;10 / 10;216;50;23.15%
1231;Palavras;Paradigmas;6;"Dados dois conjuntos de palavras formadas por zeros e uns, você deve escrever um programa para determinar se existem concatenações de palavras de cada um dos conjuntos que gerem uma mesma palavra. Por exemplo, se um conjunto A contém as palavras 010 e 11 e outro conjunto B contém as palavras 0 e 101, então a palavra 01011010 pode ser formada tanto por contatenações de palavras 
                    de A como por contatenações de palavras de B:
                
                    010 · 11 · 010 = 01011010 = 0 · 101 · 101 · 0";"A primeira linha de um caso de teste contém dois inteiros, N1 (1 ≤ N1), e N2 (N2 ≤ 20), que indicam respectivamente o número de palavras do primeiro e do segundo conjunto de palavras. Cada uma das N1 linhas seguintes contém uma palavra do primeiro conjunto. Cada uma das N2 linhas seguintes contém uma palavra do segundo conjunto.
                    
                    Obs: cada palavra tem no mínimo um caractere e no máximo 40 caracteres, todos zeros e uns.";Para cada caso de teste seu programa deve imprimir uma única linha, contendo um único caractere. Se for possivel encontrar uma concatenação de uma ou mais palavras do primeiro conjunto que seja igual a uma concatenação de uma ou mais palavras do segundo conjunto então o caractere deve ser S, caso contrário deve ser N.;False;6 / 10;260;124;47.69%
1232;Ciclo de Rubik;Matemática;5;"Provavelmente todos conhecem o Cubo de Rubik, um passatempo 3-D desafiador, que tem cada uma das seis faces cobertas com nove etiquetas, cada etiqueta de uma cor (azul, amarelo, laranja, branco, verde e vermelho). No estado inicial, todas as nove etiquetas de uma face têm a mesma cor. Um mecanismo engenhoso permite que cada face seja rotacionada independentemente, fazendo com que as cores das etiquetas nas faces possam ser misturadas.
	
	Cada uma das faces do Cubo de Rubik é denotada por uma letra: F, B, U, D, L, e R, como ilustrado na figura abaixo.

	

	U F D R L B A rotação de uma face é denominada de um movimento. Para descrever os movimentos utilizamos as letras identificadoras das faces:

	
		uma letra maiúscula representa um giro de 90o no sentido horário da face correspondente;
	
		uma letra minúscula representa um giro de 90o no sentido anti-horário da face correspondente.


	
	Por exemplo, F representa um giro de 90o no sentido horário da face F; r representa um giro de 90o no sentido anti-horário da face R. Uma sequência de movimentos é denotada por uma sequência de letras identificadoras de faces. Assim, rDF representa um giro de 90o no sentido anti-horário da face R, seguido de um giro de 90o no sentido horário da face D, seguido de um giro de 90o no sentido horário da face F.
	
	Uma propriedade interessante do Cubo de Rubik é que qualquer sequência de movimentos, se aplicada repetidas vezes, faz com que o cubo retorne ao estado original (estado que tinha antes da primeira aplicação da sequência). Por exemplo, após quatro aplicações da sequência B o cubo retorna ao estado original.
	
	Você deve escrever um programa que, dada uma sequência de movimentos, determine o menor número de aplicações completas dessa sequência para que o cubo retorne ao seu estado original.";Cada caso de teste é descrito em uma única linha, que contém a sequência de movimentos. Obs: Cada sequência tem no mínimo um movimento e no máximo 80 movimentos.;Para cada caso de teste seu programa deve imprimir uma única linha, contendo um único inteiro, indicando o menor número de aplicações completas da sequência para que o cubo retorne ao seu estado original.;True;5 / 10;310;205;66.13%
1233;Estrela;Matemática;7;"Fernando ganhou um compasso de aniversário, e agora sua diversão favorita é desenhar estrelas: primeiro, ele marca N pontos sobre a circunferência, dividindo-a em N arcos iguais; depois, ele liga cada ponto ao k-ésimo 
	ponto seguinte, até voltar ao ponto inicial.
	
	Dependendo do valor de k, Fernando pode ou não atingir todos os pontos marcados sobre a circunferência; quando isto acontece, a estrela é chamada de completa. Por exemplo, quando N = 8, as possíveis estrelas são as mostradas no desenho abaixo; as estrelas (a) e (c) são completas, 
	enquanto as estrelas (b) e (d) não o são. 

	

	Dependendo do valor de N, pode ser possível desenhar muitas estrelas diferentes; Fernando pediu que você escrevesse um programa que, dado N, determina o número de estrelas completas que ele pode desenhar.";Cada caso de teste contém de uma única linha, contendo um único inteiro N (3 ≤ N < 231), indicando o número de arcos no qual a circunferência foi dividida.;Para cada caso de teste, seu programa deve imprimir uma única linha contendo um único inteiro, indicando o número de estrelas completas que podem ser desenhadas.;True;7 / 10;2152;768;35.69%
1234;Sentença Dançante;Strings;4;"Uma sentença é chamada de dançante se sua primeira letra for maiúscula e cada letra subsequente for o oposto 
                    da letra anterior. Espaços devem ser ignorados ao determinar o case (minúsculo/maiúsculo) de uma letra. 
                    Por exemplo, ""A b Cd"" é uma sentença dançante porque a primeira letra ('A') é maiúscula, a próxima letra ('b') 
                    é minúscula, a próxima letra ('C') é maiúscula, e a próxima letra ('d') é minúscula.";"A entrada contém vários casos de teste. Cada caso de teste é composto por uma linha que contém uma sentença, que é 
                    uma string que contém entre 1 e 50 caracteres ('A'-'Z','a'-'z' ou espaço ' '), inclusive, ou no mínimo 
                    uma letra ('A'-'Z','a'-'z').";"Transforme a sentença de entrada em uma sentença dançante (conforme o exemplo abaixo) trocando as letras para minúscula ou maiúscula
                    onde for necessário. Todos os espaços da sentença original deverão ser preservados, ou seja, 
                    "" sentence "" deverá ser convertido para "" SeNtEnCe "".";False;4 / 10;24050;7821;32.52%
1235;De Dentro para Fora;Strings;3;"A sua impressora foi infectada por um vírus e está imprimindo de forma incorreta. 
                    Depois de olhar para várias páginas impressas por um tempo, você percebe que ele está imprimindo cada 
                    linha de dentro para fora. Em outras palavras, a metade esquerda de cada linha está sendo impressa 
                    a partir do meio da página até a margem esquerda. Do mesmo modo, a metade direita de cada linha está sendo 
                    impressa à partir da margem direita e prosseguindo em direção ao centro da página.
                    
                    Por exemplo a linha:
                    THIS LINE IS GIBBERISH
                    
                    está sendo impressa como:
                    I ENIL SIHTHSIREBBIG S
                    
                    Da mesma foma, a linha "" MANGOS "" está sendo impressa incorretamente como ""NAM  SOG"". Sua tarefa é desembaralhar (decifrar) a string a partir da forma como ela foi impressa para a sua forma original. Você pode assumir que cada linha conterá um número par de caracteres.";A entrada contém vários casos de teste. A primeira linha de entrada contém um inteiro N que indica a quantidade de casos de teste. Seguem N linhas, cada uma com uma frase com no mínimo 2 e no máximo 100 caracteres de letras maiúsculas e espaços que deverá ser desembaralhada (decifrada) à partir da forma impressa para a sua forma original, conforme especificação acima.;Para cada linha de entrada deverá ser impressa uma linha de saída com a frase decifrada, conforme a especificação acima.;False;3 / 10;13478;5761;42.74%
1236;Compactação de Nulos e Brancos;Estruturas e Bibliotecas;7;"O Professor Francisco solicitou sua ajuda para compactar alguns arquivos de texto que ele possui. Como os arquivos basicamente possuem muito espaço em branco e valores nulos (0), o compactador deve ser algo bem simples. O texto somente contém letras do alfabeto, espaços e números. Para simplificar, vamos considerar o $ como símbolo para compactação de espaços em branco e o # como símbolo para compactação de zeros. Só lembre de 2 detalhes:
                
                    
                        É o caractere da tabela AscII correspondente à frequência que deve ser gravado, e não o número decimal.
                    
                        caso apareça mais do que 255 caracteres seguidos de nulos ou brancos, a gravação deverá ser feita em mais do que um bloco. Por exemplo, para compactar 380 zeros seguidos, o primeiro bloco compacta as 255 ocorrências e o segundo bloco as 125 restantes, e assim por diante. O resultado seria ""# #}"". Note que o caractere 255 é invisível (aparece como se fosse um espaço em branco).
                
                
                    Para você entender um pouco melhor a entrada e a saída, considere a tabela ASCII abaixo: Por exemplo CHR(3) equivale ao “ETX” 
                
                    
                
                 Observações:         
                
                    Não compactar quando ocorrerem apenas dois zeros ou apenas dois espaços seguidos (""*00*"" ou ""*  *""), pois a compactação não teria efeito.
                    o nosso toolkit pode não mostrar alguns caracteres especiais exigidos no output deste problema.";A entrada contém vários casos de teste. A primeira linha contém um valor N que indica a quantidade de casos de teste. Cada caso de teste contém uma linha com até 2000 caracteres para serem compactados.;Cada linha de entrada deve produzir uma linha de saída que é a compactação da linha de entrada, conforme exemplo abaixo.;True;7 / 10;2030;498;24.53%
1237;Comparação de Substring;Strings;5;Encontre a maior substring comum entre as duas strings informadas. A substring pode ser qualquer parte da string, inclusive ela toda. Se não houver subseqüência comum, a saída deve ser “0”. A comparação é case sensitive ('x' != 'X').;A entrada contém vários casos de teste. Cada caso de teste é composto por duas linhas, cada uma contendo uma string. Ambas strings de entrada contém entre 1 e 50 caracteres ('A'-'Z','a'-'z' ou espaço ' '), inclusive, ou no mínimo uma letra ('A'-'Z','a'-'z').;O tamanho da maior subsequência comum entre as duas Strings.;False;5 / 10;10860;3125;28.78%
1238;Combinador;Strings;1;"Implemente um programa denominado combinador, que recebe duas strings e deve combiná-las, 
                    alternando as letras de cada string, começando com a primeira letra da primeira string, seguido pela primeira letra da 
                    segunda string, em seguida pela segunda letra da primeira string, e assim sucessivamente. 
                    As letras restantes da cadeia mais longa devem ser adicionadas ao fim da string resultante e retornada.";"A entrada contém vários casos de teste. A primeira linha contém um inteiro N que indica a quantidade 
                    de casos de teste que vem a seguir. Cada caso de teste é composto por uma linha que contém duas cadeias de caracteres, 
                    cada cadeia de caracteres contém entre 1 e 50 caracteres inclusive.";Combine as duas cadeias de caracteres da entrada como mostrado no exemplo abaixo e exiba a cadeia resultante.;False;1 / 10;18773;9388;50.01%
1239;Atalhos Bloggo;Strings;3;"Você está ajudando a desenvolver um sistema de gerenciamento de weblog chamado bloggo. Embora bloggo coloque todo o conteúdo direto no website em HTML, nem todos autores apreciam usar tags HTML em seus textos. Para tornar a vida deles mais fáceis, bloggo oferece uma sintaxe simples chamada atalhos para obter alguns efeitos textuais em HTML. Sua tarefa é, dado um documento escrito com atalhos, traduzi-lo para o HTML apropriado.
                
                    Um atalho é usado para colocar texto em itálico. HTML faz isto com as tags <i> e </i>, mas no bloggo um autor pode simplesmente colocar um pedaço de texto entre dois caracteres de sublinhado, '_'. Portanto, onde um autor escreve 
                  You _should_ see the baby elephant at the zoo!
                
                
                    bloggo vai publicar o seguinte:
                  You <i>should</i> see the baby elephant at the zoo!
                
                
                    Outro atalho serve para colocar texto em negrito, o que, em HTML, é feito com as tags <b> e </b>. Bloggo permite aos autores fazer o mesmo com pares do caractere asterisco, '*'. Quando um autor escreve o texto
                  Move it from *Receiving* to *Accounts Payable*.
                
                
                    ele vai sair no website assim:
                  Move it from <b>Receiving</b> to <b>Accounts Payable</b>.";"A entrada contem vários casos de teste. Cada caso de teste é composto por uma linha que 
                    contem uma string texto, com zero ou mais usos dos atalhos itálico e negrito. Cada texto tem de 1 a 50 caracteres, inclusive. Os únicos caracteres permitidos no texto são os caracteres alfabéticos (de 'a' a 'z' e de 'A' a 'Z'), o sublinhado ('_'), o asterisco ('*'), o caractere de espaço e os símbolos de pontuação ',', ';', '.', '!', '?', '-', '(' e ')'. O caractere sublinhado '_' ocorre no texto um número par de vezes. O asterisco '*' também aparece um número par de vezes no texto. Nenhuma substring do texto entre um par de sublinhados ou entre um par de asteriscos pode conter outros sublinhados ou asteriscos, respectivamente.";"Para cada linha de entrada seu programa deve gerar uma linha de saída com o texto traduzido
                    para HTML como demonstrado nos exemplos abaixo. Para tornar itálico um pedaço de texto no HTML, você deve iniciar este pedaço com a tag <i> e terminá-lo com a tag </i>. Para texto em negrito, inicie com <b> e termine com </b>.
                    O final da entrada é determinado por EOF.";False;3 / 10;6063;3135;51.71%
1240;Encaixa ou Não I;Matemática;2;Paulinho tem em suas mãos um pequeno problema. A professora lhe pediu que ele construísse um programa para verificar, à partir de dois valores inteiros A e B, se B corresponde aos últimos dígitos de A.;A entrada consiste de vários casos de teste. A primeira linha de entrada contém um inteiro N que indica a quantidade de casos de teste. Cada caso de teste consiste de dois inteiros A (1 ≤ A < 231 ) e B (1 ≤ B < 231) positivos.;Para cada caso de entrada imprima uma mensagem indicando se o segundo valor encaixa no primeiro valor, confome exemplo abaixo.;False;2 / 10;13044;5975;45.81%
1241;Encaixa ou Não II;Strings;2;"Paulinho tem em suas mãos um novo problema. Agora a sua professora lhe pediu que construísse um programa 
                    para verificar, à partir de dois valores muito grandes A e B, se B corresponde aos últimos dígitos de A.";"A entrada consiste de vários casos de teste. A primeira linha de entrada contém um inteiro N que indica a quantidade de 
                    casos de teste. Cada caso de teste consiste de dois valores A e B maiores que zero, cada um deles podendo ter 
                    até 1000 dígitos.";Para cada caso de entrada imprima uma mensagem indicando se o segundo valor encaixa no primeiro valor, confome exemplo abaixo.;False;2 / 10;12509;6663;53.27%
1242;Ácido Ribonucleico Alienígena;Estruturas e Bibliotecas;4;"Foi descoberta uma espécie alienígena de ácido ribonucleico (popularmente conhecido como RNA). Os cientistas, por falta de criatividade, batizaram a descoberta de ácido ribonucleico alienígena (RNAA). Similar ao RNA que conhecemos, o RNAA é uma fita composta de várias bases. As bases são B C F S e podem ligar-se em pares. Os únicos pares possíveis são entre as bases B e S e as bases C e F.
	Enquanto está ativo, o RNAA dobra vários intervalos da fita sobre si mesma, realizando ligações entre suas bases. Os cientistas perceberam que:
    
	- Quando um intervalo da fita de RNAA se dobra, todas as bases neste intervalo se ligam com suas bases correspondentes;
	- Cada base pode se ligar a apenas uma outra base;
	- As dobras ocorrem de forma a maximizar o número de ligações feitas sobre fitas;
    
	As figuras abaixo ilustram dobras e ligacões feitas sobre fitas.
    
	
		
		
            Sua tarefa será, dada a descrição de uma tira de RNAA, determinar quantas ligações serão realizadas entre suas bases se a tira ficar ativa.";"A entrada é composta por diversos casos de teste e termina com EOF. Cada caso de teste possui uma linha descrevendo a sequência de bases da fita de RNAA. 
	Uma fita de RNAA na entrada contém pelo menos 1 e no máximo 300 bases. Não existem espaços entre bases de uma fita da entrada. 
	As bases são 'B', 'C', 'F' e 'S'.";Para cada instância imprima uma linha contendo o número total de ligações que ocorre quando a fita descrita é ativada.;True;4 / 10;2113;864;40.89%
1243;O Quão Fácil é...;Strings;6;"TopCoder decidiu automatizar o processo de atribuição de níveis de dificuldade para os problemas. 
                    Os desenvolvedores do TopCoder concluíram que a dificuldade do problema esta relacionado apenas ao 
                    comprimento médio das palavras do enunciado do problema.
                    Se o comprimento médio das palavras do enunciado é menor ou igual a 3, o problema recebe dificuldade de 250 pontos.
                    Se o comprimento médio das palavras do enunciado for 4 ou 5, o problema recebe dificuldade de 500 pontos.
                    Se o comprimento médio das palavras do enunciado for maior ou igual a 6, o problema recebe dificuldade de 1000 pontos.
                
                
                    Definições:
                    Símbolo: um conjunto de carateres ligados em ambos os lados por espaços, ou pelo início da 
                    descrição do problema, ou ainda pelo fim da descrição do problema.
                    Palavra: um símbolo que contenha apenas letras a-z ou A-Z, e pode terminar com um único ponto.
                    Comprimento da palavra: número de letras de uma palavra (um ponto não é uma letra).
                	
                    Exemplos de símbolos que são palavras (aspas duplas apenas para exemplificar): ""AB"", ""ab"".
                    Exemplo de símbolos que não são palavras: ""ab.."", ""a.b"", "".ab"", ""a.b."", ""a2b."", ""."".
                
                    O comprimento médio das palavras é dado pela soma dos tamanhos das palavras do enunciado dividido 
                    pelo numero de palavras, a divisão é feita por números inteiros. Se o número de palavras for zero, 
                    então o comprimento médio das palavras é zero.
                
                    Sua tarefa é dado o enunciado do problema, computar a sua classificação de dificuldade do problema, 
                    que poderá ser 250, 500, ou 1000.";"A entrada contém vários casos de teste. Cada caso de teste é composto por uma linha que contém o 
                    enunciado de um problema, é uma string que contém entre 1 e 50 caracteres ('A'-'Z', 'a'-'z', '0'-'9', ' ', '.'), 
                    inclusive.
                    O final da entrada é determinado por EOF.";"Compute o comprimento médio das palavras do enunciado do problema, e mostre a classificação do problema, 
                    para mais detalhes olhe o exemplo abaixo.";False;6 / 10;5749;1247;21.69%
1244;Ordenação por Tamanho;Estruturas e Bibliotecas;4;"Crie um programa para ordenar um conjunto de strings pelo seu tamanho. Seu programa deve receber um 
                    conjunto de strings e retornar este mesmo conjunto ordenado pelo tamanho das palavras, se o 
                    tamanho das strings for igual, deve-se manter a ordem original do conjunto.";"A primeira linha da entrada possui um único inteiro N, que indica o número de casos de teste. 
                    Cada caso de teste poderá conter de 1 a 50 strings inclusive, e cada uma das strings 
                    poderá conter entre 1 e 50 caracteres inclusive. Os caracteres poderão ser espaços, letras, ou números.";A saída deve conter o conjunto de strings da entrada ordenado pelo tamanho das strings. Um espaço em branco deve ser impresso entre duas palavras.;False;4 / 10;10253;3900;38.04%
1245;Botas Perdidas;Ad-Hoc;4;"A divisão de Suprimentos de Botas e Calçados do Exército comprou um grande número de pares de botas de vários tamanhos para seus soldados. No entanto, por uma falha de empacotamento da fábrica contratada, nem todas as caixas entregues continham um par de botas correto, com duas botas do mesmo tamanho, uma para cada pé. O sargento mandou que os recrutas retirassem todas as botas de todas as caixas para reembalá-las, desta vez corretamente.
	
	Quando o sargento descobriu que você sabia programar, ele solicitou com a gentileza habitual que você escrevesse um programa que, dada a lista contendo a descrição de cada bota entregue, determina quantos pares corretos de botas poderão ser formados no total.";"A entrada é composta por diversos casos de teste e termina com final de arquivo (EOF). A primeira linha de um caso de teste contém um inteiro 
	N (2 ≤ N ≤ 10 4), N é par, indicando o número de botas individuais entregues. Cada uma das
	N linhas seguintes descreve uma bota, contendo um número inteiro M (30 ≤ M ≤ 60) e uma letra
	L, separados por uma espaço em branco. M indica o número da bota e L indica o pé da bota:
	L = 'D' indica que a bota é para o pé direito, L = 'E' indica que a bota é para o pé esquerdo.";Para cada caso de teste imprima uma linha contendo um único número inteiro indicando o número total de pares corretos que podem ser formados.;False;4 / 10;13347;4706;35.26%
1246;Estacionamento;Ad-Hoc;5;"Um estacionamento utiliza um terreno em que os veículos têm que ser guardados em fila única, um atrás do outro. A tarifa tem o valor fixo de R$ 10,00 por veiculo estacionado, cobrada na entrada, independente de seu porte e tempo de permanência. Como o estacionamento é muito concorrido, nem todos os veículos que chegam ao estacionamento conseguem lugar para estacionar.
	
	Quando um veículo chega ao estacionamento, o atendente primeiro determina se há vaga para esse veículo. Para isso, ele percorre a pé o estacionamento, do início ao fim, procurando um espaço que esteja vago e tenha comprimento maior ou igual ao comprimento do veículo. Para economizar seu tempo e energia, o atendente escolhe o primeiro espaço adequado que encontrar; isto é, o espaço mais próximo do início.
	
	Uma vez encontrada a vaga para o veículo, o atendente volta para a entrada do estacionamento, pega o veículo e o estaciona no começo do espaço encontrado. Se o atendente não encontrar um espaço adequado, o veículo não entra no estacionamento e a tarifa não é cobrada. Depois de estacionado, o veículo não é movido até o momento em que sai do estacionamento.
	
	O dono do estacionamento está preocupado em saber se os atendentes têm cobrado corretamente a tarifa dos veículos estacionados e pediu para você escrever um programa que, dada a lista de chegadas e saídas de veículos no estacionamento, determina o faturamento total esperado.";"A entrada é composta por diversos casos de teste. A primeira linha de um caso de teste contém dois números inteiros 
	C (1 ≤ C ≤ 1000) e N (1 ≤ N ≤ 10000) que indicam 
	respectivamente o comprimento em metros do estacionamento e o número total de eventos ocorridos (chegadas e saídas de veículos). 
	Cada uma das N linhas seguintes descreve uma chegada ou saída. Para uma chegada de veículo, a linha contém a letra 'C', 
	seguida de dois inteiros P (1000 ≤ P ≤ 9999) e Q (1 ≤ Q ≤ 1000), 
	todos separados por um espaço em branco. P indica a placa do veículo e Q o seu comprimento. 
	Para uma saída de veículo, a linha contém a letra 'S' seguida de um inteiro P , separados por um espaço em branco, onde P 
	indica a placa do veículo. As ações são dadas na ordem cronológica, ou seja, na ordem em que acontecem.
	
	No início de cada caso de teste o estacionamento está vazio. No arquivo de entrada, um veículo sai do estacionamento somente se está realmente estacionado, e a placa de um veículo que chega ao estacionamento nunca é igual a placa de um veículo já estacionado.";Para cada caso de teste seu programa deve imprimir uma linha contendo um número inteiro representando o faturamento do estacionamento, em reais.;False;5 / 10;3985;1024;25.70%
1247;Guarda Costeira;Matemática;4;"""Pega ladrão! Pega ladrão!"" Roubaram a bolsa de uma inocente senhora que caminhava na praia da Nlogônia e o ladrão fugiu em direção ao mar. Seu plano parece obvio: ele pretende pegar um barco e escapar!
	
	O fugitivo, que a essa altura já está a bordo de sua embarcação de fuga, pretende seguir perpendicularmente à costa em direção ao limite de aguas internacionais, que fica a 12 milhas náuticas de distância, onde estará são e salvo das autoridades locais. Seu barco consegue percorrer essa distância a uma velocidade constante de VF nós.
	
	A Guarda Costeira pretende interceptá-lo, e sua embarcacão tem uma velocidade constante de VG nós. Supondo que ambas as embarcações partam da costa exatamente no mesmo instante, com uma distância de D milhas náuticas entre elas, será possível a Guarda Costeira alcançar o ladrão antes do limite de aguas internacionais?
	
	Assuma que a costa da Nlogônia é perfeitamente retilínea e o mar bastante calmo, de forma a permitir uma trajetória tão retilínea quanto a costa.";"A entrada é composta por diversos casos de teste e termina com final de arquivo (EOF). Cada caso de teste é descrito em um linha contendo três inteiros, D 
	(1 ≤ D ≤ 100), VF (1 ≤ VF ≤ 100) e VG (1 ≤ VG ≤ 100),
	indicando respectivamente a distância inicial entre o fugitivo e a Guarda Costeira, a velocidade da embarcação do fugitivo e a velocidade da
	embarcação da Guarda Costeira.";Para cada caso de teste imprima uma linha contendo ‘S’ se for possível que a Guarda Costeira alcance o fugitivo antes que ele ultrapasse o limite de águas internacionais ou ‘N’ caso contrário.;False;4 / 10;7918;2968;37.48%
1248;Plano de Dieta;Strings;4;"O doutor deu a você a sua dieta, na qual cada caractere corresponde a
                    algum alimento que você deveria comer. Você também sabe o que você tem comido
                    no café da manha e no almoço, nos quais cada caractere corresponde a um
                    tipo de alimento que você deveria ter comido aquele dia. Você decidiu que irá
                    comer todo o restante de sua dieta durante o jantar, e você quer imprimi-la como
                    uma String (ordenada em ordem alfabética). Se você trapaceou de algum modo (ou 
                    por comer muito de tipo de alimento, ou por comer algum alimento que não está
                    no plano de dieta), você deveria imprimir a cadeia ""CHEATER"" (significa trapaceiro),
                    sem as aspas.";"A entrada contém vários casos de teste. A primeira linha de entrada contém um inteiro 
                    N que indica a quantidade de casos de teste. 
                    Cada caso de teste é composto por três linhas, cada uma delas com uma string com até 
                    26 caracteres de 'A'-'Z' ou vazia, representando respectivamente os alimentos da dieta, do café da manhã e do almoço.";"Para cada caso de teste imprima uma string que representa os alimentos que você deveria consumir no jantar, ou ""CHEATER"" caso você tenha trapaceado na sua dieta.";False;4 / 10;3399;1868;54.96%
1249;Rot13;Strings;2;"Escreva um programa que receba uma mensagem ""secreta"" e retorne esta mensagem codificada.
                    A mensagem é codificada com uma cifra chamada rot13. Rot13 funciona da seguinte maneira, 
                    é atribuido para cada letra um índice, baseado em sua posição no alfabeto. a = 1, b = 2, c = 3, ..., z = 26. 
                    Cada letra da mensagem deve ser deslocada 13 posições para a direita, se o fim do alfabeto 
                    for atingido, a contagem recomeça no primeiro caracter do alfabeto. Por exemplo, o caracter ""a"" 
                    (aspas apenas para evidenciar), seria mapeado para ""n"", ""y"" para ""l"", ""f"" para ""s"", e assim por diante.
                    O mesmo processo é feito para letras maiúsculas também. Quaisquer caracteres não-alfabéticos 
                    devem ser repassados para a saída sem alterações.";"A entrada contém vários casos de teste e termina com final de arquivo (EOF). Cada caso de teste consiste de uma linha que 
                    contém uma mensagem com no mínimo 1 no máximo 50 caracteres inclusive, 
                    contendo letras, números, e os símbolos: !@#$%^&*()-_=+[]{}|;':,./<>?""";Para cada linha da entrada, imprima uma linha na saída com a mensagem cifrada pelo método rot13.;False;2 / 10;8645;4306;49.81%
1250;KiloMan;Ad-Hoc;1;"Você chegou a um dos últimos chefões no novo jogo de ação
                    2-D de deslocamento lateral, KiloMan. O chefão tem uma arma
                    grande que pode atirar projéteis em várias alturas. Para cada
                    tiro, KiloMan pode ficar parado ou pular. Se ele ficar parado e
                    o tiro estiver na altura 1 ou 2, ele será atingido. Se ele
                    pular e o tiro estiver a uma altura maior que 2, então ele
                    também será atingido. Caso contrário, ele não é atingido. Dada
                    a altura de cada tiro e a sequência de pulos, quantas vezes
                    KiloMan será atingido?";"A entrada contém vários casos de teste. A primeira linha da
                    entrada contém um inteiro N que indica o número de
                    casos de teste. Cada caso de teste é composto por 3 linhas. A primeira linha contém um inteiro 
                    T (1 ≤ T ≤ 50) que indica o número de tiros. A segunda linha contém T
                    inteiros, que representam a sequência das alturas às quais os
                    tiros estão sendo disparados. Cada elemento da sequência será
                    entre 1 e 7, inclusive. A terceira linha da entrada contém a
                    string ""pulos"", que representa a sequência de pulos que KiloMan
                    tentará; 'J' significa que ele irá pular e 'S' significa que
                    ele ficará parado. Por exemplo, se o primeiro número da
                    sequência de tiros for 3 e o primeiro caractere de ""pulos"" for
                    'J', então KiloMan pulará assim que o chefão atirar a uma
                    altura 3 (e, portanto, ele será atingido).";"Para cada caso, seu programa deve imprimir um inteiro
                    representando o número de vezes que KiloMan é atingido.";False;1 / 10;3816;2638;69.13%
1251;Diga-me a Frequência;Estruturas e Bibliotecas;6;Dada uma linha de texto, você deve encontrar as frequências de cada um dos caracteres presentes nela. As linhas fornecidas não conterão nenhum dos primeiros 32 ou dos últimos 128 caracteres da tabela ASCII. É claro que não estamos levando em conta o caracter de fim de linha.;A entrada contém vários casos de teste. Cada caso de teste é composto por uma única linha de texto com até 1000 caracteres.;Imprima o valor ASCII de todos os caracteres presentes e a sua frequência de acordo com o formato abaixo. Uma linha em branco deverá separar 2 conjuntos de saída. Imprima os caracteres ASCII em ordem ascendente de frequência. Se dois caracteres estiverem presentes com a mesma quantidade de frequência, imprima primeiro o caracter que tem valor ASCII maior. A entrada é terminada por final de arquivo (EOF).;False;6 / 10;7006;2126;30.35%
1252;Sort! Sort!! e Sort!!!;Estruturas e Bibliotecas;5;"Hmm! Aqui você foi solicitado a fazer uma simples ordenação. A você serão dado N números 
	e um inteiro positivo M. Você terá que ordenar estes N números em ordem 
	ascendente de seu módulo M. Se houver um empate entre um número ímpar e um número par 
	(para os quais o seu módulo M dá o mesmo valor) então o número impar irá preceder o número par. 
	Se houver um empate entre dois números ímpares (para os quais o seu módulo M dá o 
	mesmo valor), então o maior número ímpar irá preceder o menor número ímpar. Se houve um empate entre dois números 
	pares (para os quais o seu módulo M dá o mesmo valor), então o menor número par irá 
	preceder o maior número par. Para o resto de valores negativos siga a regra de linguagem de programação 
	C: um número negativo nunca pode ter módulo maior do que zero. Por exemplo, -100 MOD 3 = -1, -100 MOD 4 = 0, etc.";A entrada contém vários casos de teste. Cada caso de teste inicia com dois inteiros  N (0 < N ≤ 10000) e M (0 < M ≤ 10000) que denotam quantos números existirão neste conjunto. Cada uma das próximas N linhas conterá um número cada. Estes números deverão caber em um inteiro de 32 bits com sinal. A entrada é terminada por uma linha que conterá dois valores nulos (0) e não deve ser processada.;A primeira linha de cada conjunto de saída irá contér os valores de N e M. As próximas N linhas irão contér N números, ordenados de acordo com as regras acima mencionadas. Imprima os dois últimos zeros da entrada para a saída padrão.;False;5 / 10;5814;1847;31.77%
1253;Cifra de César;Strings;1;"Júlio César usava um sistema de criptografia, agora conhecido como Cifra de César, que trocava cada letra pelo equivalente em duas posições à Esquerda no alfabeto (por exemplo, 'C' vira 'A', 'T' vira 'R', etc.). Ao começo do alfabeto nós voltamos para o fim, isto é 'A' vira 'Y'.
                    Nós podemos, é claro, tentar trocar as letras com quaisquer número de posições.";"A entrada contém vários casos de teste. A primeira linha de entrada contém um inteiro N
                    	que indica a quantidade de casos de teste. Cada caso de teste é composto por duas linhas. 
                    A primeira linha contém uma string com até 50 caracteres maiúsculos ('A'-'Z'), que é a sentença após ela ter sido codificada através desta Cifra de César modificada. A segunda linha contém um número que varia de 0 a 25 e que representa 
                    quantas posições cada letra foi deslocada para a direita.";"Para cada caso de teste de entrada, imprima uma linha de saída com o texto decodificado (transformado novamente para o texto original) conforme as regras acima e 
                    o exemplo abaixo.";False;1 / 10;17958;10449;58.19%
1254;Substituição de Tag;Strings;4;"Você está no comando de um sistema de documentos que utiliza tags de código numérico para renderizar 
                    documentos para impressão. Há um lote de documentos com o texto baseado em tags, que você deve analisar 
                    e converter para tags numéricas para a entrada no sistema.
                    Uma tag é iniciada por um caracter '<', que pode ser seguida por letras, números, barras ou espaços, 
                    e para finalizar a tag um caracter '>'. As tags não podem ser encaixadas umas nas outras.
                
                    As seguintes tags não são válidas:
                    "">HI"", ""<a<b>c>"", ""<a b c><"", ""<a<b>"".
                
                    As seguintes tags são válidas:
                    ""/=<>HI"", ""/<>H=I<>/"", ""<><><><>"", ""<a=/><b==//bb><c223>"", ""<a b c>"".
                
                    Para as comparações entre caracteres deve ser desconsiderado o case sensitive.";"A entrada contém vários casos de teste. Cada caso de teste é composto de três linhas. A primeira linha contém a tag original 
                    presente no texto do documento, que irá conter apenas letras (a-z, A-Z), e seu tamanho será entre 1 e 10 caracteres inclusive. 
                    A segunda linha contém um valor numérico pela qual a tag original deverá ser substituida, que será um número 
                    entre 1 e 1000 inclusive. A terceira e última linha terá entre 1 e 50 caracteres inclusive, 
                    e poderá conter os letras (a-z, A-Z), números (0-9), sinal de menor (<), sinal de maior (>), 
                    sinais de igual (=), barras (/), ou espaços em branco. Todos os '<' e '>' são usados apenas em tags.";"Converto o texto do documento que é dado na entrada, utilizando as específicações dadas acima e 
                    imprima em uma única linha, o novo texto do documento com as novas tags, para maiores 
                    esclarecimentos consulte o exemplo abaixo.";False;4 / 10;2457;954;38.83%
1255;Frequência de Letras;Strings;3;"Neste problema estamos interessados na frequência das letras em uma dada linha de texto.
    
	Especificamente, deseja-se saber qual(is) a(s) letra(s) de maior frequência do texto, ignorando o “case sensitive”, ou seja maiúsculas ou minúsculas (sendo mais claro, “letras” referem-se precisamente às 26 letras do alfabeto).";A entrada contém vários casos de teste. A primeira linha contém um inteiro N que indica a quantidade de casos de teste. Cada caso de teste consiste de uma única linha de texto. A linha pode conter caracteres “não letras”, mas é garantido que tenha ao menos uma letra e que tenha no máximo 200 caracteres no total.;Para cada caso de teste, imprima uma linha contendo a(s) letra(s) que mais ocorreu(ocorreram) no texto em minúsculas (se houver empate, imprima as letras em ordem alfabética).;True;3 / 10;8273;4037;48.80%
1256;Tabelas Hash;Estruturas e Bibliotecas;5;"As tabelas Hash, também conhecidas como tabelas de dispersão, armazenam elementos com base no valor absoluto de suas chaves e em técnicas de tratamento de colisões. Para o cálculo do endereço onde deve ser armazenada uma determinada chave, utiliza-se uma função denominada função de dispersão, que transforma a chave em um dos endereços disponíveis na tabela.
                    
	Suponha que uma aplicação utilize uma tabela de dispersão com 13 endereços-base (índices de 0 a 12) e empregue a função de dispersão h(x) = x mod 13, em que x representa a chave do elemento cujo endereço-base deve ser calculado.
                    
	Se a chave x for igual a 49, a função de dispersão retornará o valor 10, indicando o local onde esta chave deverá ser armazenada. Se a mesma aplicação considerar a inserção da chave 88, o cálculo retornará o mesmo valor 10, ocorrendo neste caso uma colisão. O Tratamento de colisões serve para resolver os conflitos nos casos onde mais de uma chave é mapeada para um mesmo endereço-base da tabela. Este tratamento pode considerar, ou o recálculo do endereço da chave ou o encadeamento externo ou exterior.
                    
	O professor gostaria então que você o auxiliasse com um programa que calcula o endereço para inserções de diversas chaves em algumas tabelas, com funções de dispersão e tratamento de colisão por encadeamento exterior.";"A entrada contém vários casos de teste. A primeira linha de entrada contém um inteiro N indicando a quantidade de casos de
	teste. Cada caso de teste é composto por duas linhas. 
	A primeira linha contém um valor M (1 ≤ M ≤ 100) que indica a quantidade de 
	endereços-base na tabela (normalmente um número primo) seguido por um espaço e um 
	valor C (1 ≤ C ≤ 200) que indica a quantidade de chaves a serem armazenadas. 
	A segunda linha contém cada uma das chaves (com valor entre 1 e 200), separadas por um espaço em branco.";A saída deverá ser impressa conforme os exemplos fornecidos abaixo, onde a quantidade de linhas de cada caso de teste é determinada pelo valor de M. Uma linha em branco deverá separar dois conjuntos de saída.;False;5 / 10;9389;3193;34.01%
1257;Array Hash;Strings;1;"Você terá como uma entrada várias linhas, cada uma com uma string. O valor de cada caracter é computado como segue:
                    
                    Valor = (Posição no alfabeto) + (Elemento de entrada) + (Posição do elemento)
                    
                    Todas posições são baseadas em zero. 'A' tem posição 0 no alfabeto, 'B' tem posição 1 no alfabeto, ... O cálculo de hash retornado é a soma de todos os caracteres da entrada. Por exemplo, se a entrada for:
                    CBA
                    DDD
                    
                    então cada caractere deverá ser computado como segue:
                    
                        
                            2 = 2 + 0 + 0 : 'C' no elemento 0 posição 0
                            2 = 1 + 0 + 1 : 'B' no elemento 0 posição 1
                            2 = 0 + 0 + 2 : 'A' no elemento 0 posição 2
                            4 = 3 + 1 + 0 : 'D' no elemento 1 posição 0
                            5 = 3 + 1 + 1 : 'D' no elemento 1 posição 1
                            6 = 3 + 1 + 2 : 'D' no elemento 1 posição 2
                        
                    
                        O cálculo final de hash será 2+2+2+4+5+6 = 21.";"A entrada contém vários casos de teste. A primeira linha de entrada contém um inteiro N que 
                    indica a quantidade de casos de teste. Cada caso de teste inicia com um inteiro L 
                    (1 ≤ L ≤ 100) que indica a quantidade 
                    de linhas que vem a seguir. Cada uma destas L linhas contém uma string com até 50 letras maiúsculas 
                    ('A' - 'Z').";Para cada caso de teste imprima o valor de hash que é calculado conforme o exemplo apresentado acima.;False;1 / 10;5674;3935;69.35%
1258;Camisetas;Estruturas e Bibliotecas;5;"O professor Rolien organizou junto às suas turmas de Ciência da Computação a confecção de uma camiseta polo 
                    que fosse ao mesmo tempo bonita e barata. Após algumas conversas, ficou decidido com os alunos que seriam feitas 
                    somente camisetas da cor preta, o que facilitaria a confecção. Os alunos poderiam escolher entre o logo do curso e os detalhes em branco ou vermelho. Assim sendo, Rolien precisa de sua ajuda para organizar as listas de quem quer a camiseta em cada uma das turmas, relacionando estas camisetas pela cor do logo do curso, tamanho (P, M ou G) e por último pelo nome.";"A entrada contém vários casos de teste. Cada caso de teste inicia com um valor N, 
                    (1 ≤ N ≤ 60) inteiro e positivo, que indica a quantidade 
                    de camisetas a serem feitas para aquela turma. As próximas N*2 linhas contém informações de cada uma das camisetas (serão duas linhas de informação para cada camiseta). A primeira linha irá conter o nome do estudante e a segunda linha irá conter a cor do logo da camiseta (""branco"" ou ""vermelho"") seguido por um espaço e pelo tamanho da camiseta ""P"" ""M"" ou ""G"". A entrada termina quando o valor de N for igual a zero (0) e esta valor não deverá ser processado.";"Para cada caso de entrada deverão ser impressas as informações ordenadas pela cor dos detalhes em ordem ascendente, 
                    seguido pelos tamanhos em ordem descendente e por último por ordem ascendente de nome, conforme o exemplo abaixo.
                    
                    Obs.: Deverá ser impressa uma linha em branco entre dois casos de teste.";True;5 / 10;6680;2424;36.29%
1259;Pares e Ímpares;Estruturas e Bibliotecas;3;"Considerando a entrada de valores inteiros não negativos, ordene estes valores segundo o seguinte critério:

	
		Primeiro os Pares
	
		Depois os Ímpares


	Sendo que deverão ser apresentados os pares em ordem crescente e depois os ímpares em ordem decrescente.";A primeira linha de entrada contém um único inteiro positivo N (1 < N < 105) Este é o número de linhas de entrada que vem logo a seguir. As próximas N linhas conterão, cada uma delas, um valor inteiro não negativo.;"Apresente todos os valores lidos na entrada segundo a ordem apresentada acima. 
					    Cada número deve ser impresso em uma linha, conforme exemplo abaixo.";False;3 / 10;16894;7162;42.39%
1260;Espécies de Madeira;Estruturas e Bibliotecas;5;"Coníferas e folhosas (softwoods e hardwoods) são dois grandes grupos de vegetais produtores de madeira. As folhosas são aquele grupo de árvores que têm folhas largas, produzem uma fruta ou castanha e geralmente ficam dormentes no inverno.

	Os climas temperados da América produzem florestas com centenas de espécies de madeira de lei - árvores que compartilham certas características biológicas. Embora o carvalho, bordo e cereja sejam tipos de árvores de madeira de lei, são espécies diferentes. Juntas, todas as espécies de madeira folhosas representam 40 por cento das árvores nos Estados Unidos.

	Por outro lado, as madeiras macias (Softwoods) ou coníferas, chamadas ""cone-bearing"", são resinosas amplamente disponíveis EUA. Incluem cedro, abeto, cicuta, pinho, abeto vermelho e cipreste. Em uma casa, os resinosas são utilizados principalmente como madeira de viga estrutural, mas também podem ser utilizadas em algumas aplicações decorativas.

	Usando tecnologia de imagem por satélite, o Departamento de Recursos Naturais elaborou um inventário de todas as árvores de um local específico em um determinado dia. Você deverá calcular a fração da população de cada árvore representada por cada uma das espécies.";A entrada possui vários casos de teste. A primeira linha de entrada contém um inteiro N que indica o número de casos de teste, seguido por uma linha em branco. Cada caso de teste consiste de uma lista com a espécie de cada árvore observada pelo satélite, uma árvore por linha. Nenhum nome de espécie é superior a 30 caracteres. Não existem mais de 10.000 espécies e não mais de 1.000.000 árvores. Há uma linha em branco entre cada caso de teste consecutivo.;Para cada caso de teste imprima o nome de cada espécie representada na população, em ordem alfabética, seguida pelo percentual da população que representa, com 4 casas decimais. Imprima uma linha em branco entre dois conjuntos de dados consecutivos.;True;5 / 10;5776;2016;34.90%
1261;Pontos de Feno;Estruturas e Bibliotecas;2;"Cada funcionário de um serviço burocrático tem uma descrição do cargo - alguns parágrafos que descrevem as responsabilidades do trabalho. A descrição do cargo combinado com outros fatores, como por exemplo tempo de serviço, é utilizado para determinar qual é o salário deste funcionário.
    
	Um sistema denominado Pontos de Feno (Hay Points) libera o departamento de Recursos Humanos de ter que fazer um julgamento inteligente do valor de cada empregado para a empresa. A descrição de um cargo ou função é feita através da verificação de palavras e frases que indicam responsabilidade. Em particular, descrições de cargo que indicam o controle sobre um grande orçamento ou gestão sobe um grande número de pessoas geram escores altos neste sistema.
    
	Você deve implementar um sistema de Ponto de Feno simplificado. Você terá como informações um dicionário Hay Point que conterá algumas palavras-chaves que são as descrições dos cargos e um valor em dólares americanos associado com cada um destes cargos. Para cada descrição de trabalho você deverá calcular o salário associado com o trabalho, de acordo com este sistema.";"A entrada contém vários casos de teste. A primeira linha da entrada contém dois números inteiros positivos: M (M ≤ 1000), que é o número de palavras no dicionário Hay Point, e um número inteiro N (N ≤ 100) que corresponde à quantidade de descrições de cargos ou funções. M linhas seguem, cada um contém uma palavra (uma seqüência de até 16 letras minúsculas) e um valor de dólar (um número real entre 0 e 1000000). Logo na sequência, após o dicionário, estão as descrições de cada uma dos cargos N.
	
	Cada descrição de cargo consiste em uma ou mais linhas de texto. Para sua conveniência, o texto contém somente letras minúsculas (de 'a' até 'z'). Cada descrição de cargo é finalizada por uma linha contendo um ponto ""."".";Para cada caso de teste de entrada, imprima o salário do funcionário que é calculado através deste sistema Pontos de Feno (que nada mais é do que a soma do valor de todas as palavras que aparecem na descrição do cargo). Obs.: o valor das palavras que não aparecem no dicionário é zero (0).;True;2 / 10;2746;1756;63.95%
1262;Leitura Múltipla;Strings;2;"Em diversos sistemas de computação, vários processos podem ler de um mesmo recurso durante o mesmo ciclo de máquina,
                    mas somente um processo pode escrever no recurso durante o ciclo de máquina. Leituras e gravações não podem se misturar
                    em um mesmo ciclo de máquina. Dado um histórico de leituras e gravações que ocorreram durante a execução de um determinado
                    processamento, e um número inteiro que representa o número de processos usados, calcule a duração mínima do processamento,
                    em ciclos de máquina. O rastro de histórico representa cada leitura por uma letra 'R' e cada gravação por uma letra
                    'W'.
                    
                    Por exemplo, se o rastro de histórico é ""RWWRRR"" e o número de processos é 3, então o número mínimo
                de ciclos de máquina será 4: um para a primeira leitura, um para cada uma das gravações e apenas um para todo o último
                grupo de leituras.";"A entrada contém diversos casos de testes. Cada caso é composto por duas linhas. A primeira linha contém o rastro de
                    processamento em uma sequência de caracteres 'R' ou 'W' formando um String de 1 a 50 caracteres. A segunda linha contém um
                    valor inteiro P (1 ≤ P ≤ 10), representando o número de processos,
                    ou seja, uma indicação de quantas operações de leitura podem ser processadas simultaneamente. A entrada termina em EOF.";Para cada caso de teste determine e imprima o número mínimo de ciclos de máquina necessários para se processar o rastro informado. Vide exemplos abaixo.;False;2 / 10;3212;2066;64.32%
1263;Aliteração;Strings;2;Uma aliteração ocorre quando duas ou mais palavras consecutivas de um texto possuem a mesma letra inicial (ignorando maiúsculas e minúsculas). Sua tarefa é desenvolver um programa que identifique, a partir de uma sequência de palavras, o número de aliterações que essa sequência possui.;"A entrada contém diversos casos de testes. Cada caso é expresso como um texto em uma única linha, contendo
    de 1 a 100 palavras separadas por um único espaço, cada palavra tendo de 1 a 50 letras minúsculas ou
    maiúsculas ('A'-'Z','a'-'z').  A entrada termina em EOF.";Para cada caso de teste imprima o número de aliterações existentes no texto informado, conforme exemplos abaixo.;False;2 / 10;5724;2688;46.96%
1264;Um Problema Fácil!;Matemática;7;"Você já ouviu a expressão “A base de todo sistema normal de numeração é 10”? É claro, eu não estou falando de sistemas tais como o sistema de numeração ""Stern Brockot"". Este problema não tem nada a ver com este fato mas pode ter algumas similaridades.
                    
	Você tem um número R com base N e a garantia de que R é divisível por (N-1). Você deve então imprimir o menor valor possível para N. Os dígitos para um número com base 62 seriam (0..9, A..Z e a..z). Similarmente, os símbolos dos dígitos para um número com base 61 seriam (0..9, A..Z e a..y) e assim por diante. Você terá que determinar qual é a menor base possível daquele número para as condições dadas. Nenhum número inválido será dado como entrada.";Cada linha da entrada deverá conter um número inteiro N de qualquer base inteira (de 2 a 62) com até 1024 dígitos (como definido na matemática). Você terá que determinar qual é a menor base possível daquele número para as condições dadas. Nenhum número inválido será dado como entrada.;Se o número com as condições dadas não for possível, imprima a linha “such number is impossible!”. Para cada linha de entrada deverá haver apenas uma linha de saída. A saída deverá ser apresentada sempre na base de numeração decimal.;False;7 / 10;1594;370;23.21%
1265;DJ da Computação;Paradigmas;8;"Um DJ muito famoso foi recentemente convidado para atuar em uma festa fechada de uma conferência de Ciência da Computação. Na tentativa de impressionar os participantes do evento, ele decidiu usar um programa que escolhesse automaticamente os sons que iriam tocar nesta festa. Entretanto, o resultado foi um desastre, uma vez que o modo como o programa escolhia os sons foi muito estranho e repetitivo.
                    
	Antes de tudo o DJ selecionou N sons a partir de um conjunto que ele tinha disponível. O programa usado pelo DJ então rotulava cada um dos sons utilizando um caracter de 'A' até 'Z'. O enésimo som é rotulado atrávés do uso do enésimo caracter da sequência. O programa escolhe o som a ser tocado na festa a fim de que seus títulos apareçam na seguinte sequência infinita de caracteres: primeiro viriam todas as palavras com um caracter em ordem lexicográfica; na sequência todas as palavras com dois caracterem em ordem lexicográfica. Depois viriam todas as palavras com três caracteres, também em ordem lexicográfica, e assim por diante. Para N = 3 , esta sequência seria:
	ABCAAABACBABBBCCACBCCAAAAABAACABAABBABC...
                    
	No final da festa, algumas pessoas perguntaram ao DJ se ele lembrava qual tinha sido o primeiro som que havia sido tocado. Outros queriam saber qual tinha sido o sétimo som e assim por diante. O DJ não conseguia lembrarr nada além do estranho padrão de repetição dos sons, portanto, ele precisa da tua ajuda urgente para escrever um programa que responda a estas consultas ou perguntas.";A entrada contém diversos casos de teste. Cada caso de teste consiste de três linhas. A primeira linha contém dois inteiros N e Q que indicam respectivamente o número de sons escolhidos pelo DJ e o número de consultas feitas pelos participantes ( 1 ≤ N ≤ 26 e 1 ≤ Q ≤ 1000 ). A segunda linha conterá N títulos de sons (o título de um som é a cadeia de caracteres alfanuméricos de pelo menos um e no máximo 100 caracteres) separados por um espaço simples. A última linha de um caso de teste contém a sequência de consultas. Cada consulta é um número k (1 ≤ k ≤ 100000000) que corresponde ao k-ésimo som tocado na festa. O final da entrada é indicado por N = Q = 0.;Para cada consulta k em um caso de teste, você deverá imprimir uma única linha contendo o k-ésimo som tocado na festa. Uma linha em branco deve ser impressa após cada caso de teste.;False;8 / 10;514;155;30.16%
1266;Tornado!;Ad-Hoc;7;"É este tempo louco o resultado da interferência contínua da humanidade no meio ambiente? Ou é simplesmente o ciclo normal das mudanças climáticas através dos tempos? Ninguém parece saber ao certo, mas o fato é que os fenômenos naturais, como tornados e furacões atingem nosso país com mais força e freqüência do que nas décadas passadas.
    
	Um tornado acaba de atingir a fazenda Silverado, produtora de gado e de leite, e fez estragos. O telhado do celeiro foi rasgado, várias árvores foram arrancadas, o caminhão da fazenda foi derrubado... Mas o pior é que o tornado destruiu várias seções da cerca que rodeava a propriedade. A cerca foi muito bem construída, com postes de concreto a cada dois metros, e arame farpado encerrando o perímetro de toda a fazenda (o perímetro, em metros, é um número par, o que torna a cerca perfeitamente regular).
    
	Agora vários postes estão quebrados ou faltando, e há falhas na cerca. Para evitar que o gado fique de fora da propriedade, a cerca deve ser restaurada o mais rápido possível. Reconstruindo o muro à sua forma original, com postes de concreto, vai levar um longo tempo. Enquanto isso, os proprietários da fazenda decidiram fechar as lacunas com uma cerca temporária, feita com postes de madeira. Postes de madeira serão colocados exatamente nos mesmos pontos onde os postes estão faltando ou foram quebrados. No entanto, a fim de tornar a reconstrução temporária mais rápida e menos dispendiosa, os donos decidiram utilizar menos postes: um poste de madeira será utilizado para substituir um poste de concreto ausente / quebrado somente se o comprimento do arame farpado necessário para fechar a distância até o próximo poste (de madeira ou concreto) for superior a quatro metros.

	

	Dada a descrição de quantos postes estão quebrados ou faltando, você deve escrever um programa que determine a menor quantidade de postes de madeira que são necessários para fechar as lacunas da cerca, de acordo com a decisão dos proprietários.";A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um N indicando o número original de postes de concreto da cerca(5 ≤ N ≤ 5000). A segunda linha de um caso de teste irá conter N inteiros Xi indicando o estado de cada poste de concreto após a passagem do tornado (0 ≤ Xi ≤ 1 para 1 ≤ i ≤ N) . Se Xi = 1 o poste i esté em boas condições, se Xi = 0 o poste i está quebrado ou faltando. Note que o poste N é ao lado do poste 1. O final da entrada é indicado por N = 0 .;Para cada caso de teste da entrada seu programa deve produzir uma linha de saída, contendo um inteiro indicando o menor número de postes de madeira que são necessários para restaurar o muro, de acordo com a decisão dos proprietários.;True;7 / 10;5169;1301;25.17%
1267;Biblioteca Pascal;Ad-Hoc;4;"A Universidade Pascal é uma das mais antigas do país e precisa renovar seu edifício da biblioteca, porque depois de todos esses séculos o edifício começou a mostrar os efeitos de suportar o peso da enorme quantidade de livros que abriga.
                
                    Para ajudar na renovação, a Associação de Antigos Alunos da Universidade decidiu organizar uma série de jantares para angariação de fundos, para os quais todos os alunos foram convidados. Estes eventos provaram ser um enorme sucesso e vários foram organizados durante o ano passado. (Uma das razões para o sucesso desta iniciativa parece ser o fato de que os alunos que passaram pelo sistema de ensino Pascal tem boas lembranças daquele tempo e gostariam de ver a Biblioteca da Universidade renovada.)
                
                    Os organizadores mantiveram uma planilha indicando quais alunos participaram de cada jantar. Agora eles querem sua ajuda para determinar se algum aluno ou aluna participou de todos os jantares.";A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros N e D, respectivamente, indicando o número de Alumni e o número de jantares (dinners em inglês) organizados (1 ≤ N ≤ 100 e 1 ≤ D ≤ 500). Alumni são identificados por inteiros de 1 a N. Cada uma das próximas D linhas descreve os participantes de um jantar, e contém N inteiros Xi indicando se o alumnus/alumna participará (Xi = 1) ou não (Xi = 0) daquele jantar. O fim da entrada é determinado por N = D = 0.;"Para cada caso de teste da entrada seu programa deve produzir uma linha de saída, contendo ou a palavra ‘yes’, no caso de existir existe pelo menos um alumnus/alumna que participou de todas as jantares, ou a palavra ‘no’ caso contrário. A saída deve ser escrita na saída padrão.
                    
                    Alumna: um ex-aluno do sexo feminino de uma escola particular, faculdade ou universidade.
                    Alumnus: um ex-aluno do sexo masculino de uma escola particular, faculdade ou universidade.
                    Alumni: os ex-alunos de ambos os sexos de uma determinada escola, faculdade ou universidade.";False;4 / 10;4919;2438;49.56%
1268;Missão Impossível;Geometria Computacional;8;"Você foi contratado para explorar o território inimigo. É um negócio arriscado, você sabe disso. Então, é melhor você estar preparado! O inimigo colocou uma série de pontos de segurança por todo o país, a partir do qual os radares estão detectando qualquer veículo em movimento dentro de sua faixa de cobertura. Qualquer objeto detectado será imediatamente destruído. Felizmente lhe foi dado pelo seu governo um mapa do território inimigo, consistindo de coordenadas e dos raios de cobertura de cada radar. Você também tem uma lista de informantes locais (juntamente com suas localizações) com os quais poderá entrar em contato para obter informações valiosas. Sua missão é tentar entrar em contato com um desses informantes, de preferência aquele com maior coeficiente de infiltração. O coeficiente de infiltração de cada informante é simplesmente a distância do informante até a borda do país, onde tal distância é definida como o mínimo sobre todas as distâncias a partir da localização do informante até cada ponto da fronteira. Em sentido intuitivo, o informante com o maior coeficiente de infiltração é aquele que está localizado o máximo possível dentro do país e, presumivelmente, terá informações mais valiosas sobre o país.
                    
                    Seu primeiro pensamento é então projetar um programa de computador que vai verificar se existe um caminho de sua posição inicial, sempre o ponto (2000, 2000), até a localização de qualquer um dos informantes, sem cruzar qualquer região que é coberta pelo radar. Sempre que possível, o programa deve indicar qual informante alcançável é aquele que deverá ser contactado, de acordo com os critérios de coeficiente de infiltração acima descritos.
                
                    
                        
                    
                        Figura 1: Cenário Possível: o país inimigo tem a forma de um polígono simples (não necessariamente convexo).
                
                
                     
                
                    Lembre-se que um polígono é chamado de simples se ele é descrito por um único limite não intersectado. As fronteiras do país serão dadas como uma seqüência de coordenadas X, Y correspondentes à seqüência de vértices do polígono. Você pode considerar que todos os centros do radar e coordenadas dos informantes estão localizados dentro das fronteiras do país. Note contudo, que a área coberta pelos radares podem incluir regiões de fora da fronteira.
                
                     
                
                    No cenário exemplo da Figura 1, o informante I1 não pode ser conectado uma vez que ele está dentro da região coberta pelos radares. O informante I2, embora fora da região do radar, também não pode ser contactado uma vez que qualquer deslocamente até a localização dele irá através de regiões cobertas por radar, que são fatais. Ambos informantes I3 e I4 podem ser contactados e portanto, o informante I4 é o escolhido uma vez que o seu coeficiente de infiltração é maior do que o coeficiente do I3.";"A entrada consiste de diversos casos de teste. A primeira linha de cada caso de teste descreve a borda do país inimigo, no formato:
                    
                    B X1 Y1 X2 Y2 ... XB YB 
                    
                    onde 3 ≤ B ≤ 1000 é o número de pontos na borda, e cada Xi Yi é a coordenada do enésimo ponto na borda. A borda do país consiste de segmentos de linha entre os pontos i e i + 1, e entre os pontos B e 1. A segunda linha denota o número de informantes e as suas respectivas posições, no formato:
                    
                    N X1 Y1 X2 Y2 ... XN YN 
                    
                    onde 1 ≤ N ≤ 1000 é o número de informantes, e Xi Yi é a coordenada do enésimo(i-th) informante. A terceira linha descreve a posição e o raio dos radares, no formato:
                    
                    M X1 Y1 R1 X2 Y2 R2 ... XM YM RM 
                    
                    onde 1 ≤ M ≤ 30 é o número de radares, Xi Yi é a coordenada do enésimo (i-th) radar, e Ri é o raio do enésimo (i-th) radar. Todas as coordenadas não inteiros 0 ≤ X, Y ≤ 1000. O raio dos radares são inteiros no intervalo 1 ≤ R ≤ 1000. Um caso de teste onde B = N = M = 0 indica o final da entrada. Este caso de teste não deverá ser processado.";"Para cada caso de teste da entrada, seu programa deve produzir uma linha contendo ou “Mission impossible” ou “Contact informer K”, onde ""K"" é o índice do informante (como dado na entrada) com o maior coeficiente de infiltração, que pode ser alcançado pelo espião sem ir dentro de qualquer área de cobertura de radar. Se houver mais do que um informante que satisfaça esta condição, seu programa deve imprimir aquele te tiver o menor índice.";True;8 / 10;91;29;31.87%
1269;ICPC Ataca Novamente;Paradigmas;9;"A Companhia Internacional de Projetos Concretos (ICPC) é uma empresa de construção especializada na construção de casas para o mercado high-end. A empresa é mais rentável do mundo devido a um método muito eficiente em divisão de terras que tem sido usado em seus projetos de desenvolvimento de habitações desde o ano passado. Recentemente houve um caos na ICPC, porque os funcionários se recusaram a trabalhar alegando que eles não ganhavam o suficiente. Preocupado com a perda de lucros devido à greve, a diretoria da empresa propôs um novo método para calcular os salários, que foi felizmente aceito por todos.	
	O salário de um trabalhador reflete na importância das tarefas que ele / ela tem para realizar e é influenciado pela forma como as tarefas dependem uma das outras.
    
	Uma tarefa X depende de uma tarefa Y se (i) X depende diretamente de Y, ou (ii) existe uma tarefa T tal que X depende diretamente de T e T depende de Y. Uma vez que todas as tarefas em ICPC devem ser realizadas, não há circularidade da relação de dependência da tarefa. Além disso, a tarefa pode ser realizada por mais do que um trabalhador. Um significado básico está associado com cada tarefa que reflete na sua importância (por exemplo, o desenvolvimento de um método eficiente na divisão de terras é mais importante do que a construção de casas em si). O significado de uma tarefa T é então definido como o significado básico de T mais o significado de cada tarefa que depende diretamente de T.
    
	Note que se nenhuma outra tarefa depende diretamente da tarefa T, o significado básico e o significado de T são iguais.
    
	O salário de um trabalhador é a soma dos significados de todas as tarefas que ele executa as quais não dependem de qualquer outra tarefa realizada por ele. Em outras palavras, um valor igual ao significado da tarefa X será adicionado ao salário de um trabalhador W que trabalha em uma tarefa X se não houver nenhuma outra tarefa Y da qual X depende, e na qual W trabalha também em Y.
    
	ICPC deseja que você ajude-os a determinar o salário de cada um de seus funcionários.";"A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros T e E indicando, respectivamente, o número de tarefas e do número de empregados (1 ≤ T ≤ 1000 e 1 ≤ E ≤ 1000). As tarefas são numeradas de 1 a T e empregados de 1 a E.
    
	Em seguida, vai vir uma sequência de linhas que descrevem as tarefas 1 a T em ordem crescente. Cada tarefa é descrita por duas linhas. A primeira dessas linhas contém três inteiros BS, ND e NE, representando respectivamente o significado básico da tarefa, o número de tarefas que dependem diretamente sobre ela, e o número de empregados que executam-la (1 ≤ BS ≤ 1000, 0 ≤ ND < T e 1 ≤  NE ≤ E). A segunda linha contém inteiros ND + NE correspondentes primeiro ao ND que tem tarefas diretamente dependentes e depois os funcionários NE que executaram a tarefa. O fim da entrada é indicado por T = E = 0.";"Os casos de teste devem ser respondidos na ordem em que foram apresentados. Para cada caso de teste, você deve imprimir:
	• uma única linha contendo cinco estrelas ***** indicando o início do processo
	• para cada empregado i, uma linha com dois inteiros i e s, separados por um espaço em branco, o que significa que i tem um salário de s.";False;9 / 10;191;56;29.32%
1270;Fibra Óptica;Grafos;8;"Um país em desenvolvimento está tentando melhorar sua infra-estrutura de comunicação. Atualmente, cada cidade do país tem a sua rede de computadores local, mas não há uma comunicação rápida entre as cidades. O Ministério Autônomo das Comunicações (ACM) do país decidiu criar uma rede de fibra óptica de grande velocidade que ligará todas as cidades. A fim de fazer isso, eles decidiram fazer a seguinte abordagem. Pares de cidades foram escolhidas para ter uma ligação de fibra óptica instalada entre elas. A escolha foi tal que haverá apenas um caminho de fibra entre qualquer par de cidades, a fim de reduzir o custo. Os pares de cidades foram escolhidos considerando diversos fatores, incluindo a análise de demanda estimada e a distância entre as cidades.
                    
	Cada cidade terá um roteador óptico instalado, o qual será utilizado para conectar todas as ligações óticas com uma extremidade da cidade. Em cada cidade, há muitos locais diferentes onde o roteador óptico pode ser instalados. Sua tarefa, como engenheiro que está trabalhando neste projeto, é desenvolver um programa de computador que receba as localizações de cada uma das cidades e minimize o tamanho total de fibra que seria necessária para este projeto.";A entrada consiste de vários casos de teste. Cada caso de teste começa com uma linha contendo o número de cidades N (1 ≤ N ≤ 1000) no país. A seguir, para cada cidade, há uma sequência de linhas. A primeira linha contém o nome (único) da cidade (apenas letras maiúsculas, no máximo de 15 letras), e o número de locais candidatos Ci (1 ≤ Ci ≤ 50) em que o roteador óptico pode ser instalado. Então, existe uma linha para cada local candidato, contendo dois inteiros X e Y que representam as coordenadas do local (-10000 ≤ X, Y ≤ 10000). Você deve usar a distância euclidiana entre os sites para calcular o comprimento da fibra correspondente necessário para ligá-los. Depois da descrição de cada cidade, com seus sites candidatos, haverá N - 1 linhas, cada uma delas contendo o nomes de duas cidades que terão um link de fibra instalado entre elas. O final da entrada é indicado por N = 0.;Para cada caso de teste, seu programa deve imprimir uma linha com o comprimento total mínimo de fibra óptica necessária para ligar as cidades informadas. Sua resposta deve ser arredondada para um dígito decimal.;False;8 / 10;293;105;35.84%
1271;Onde estão meus Genes;Ad-Hoc;4;"Uma maneira que os cientistas tem para tentar medir como uma espécie evoluiu para outra é investigando como o genoma do ancestral se modificou para se transformar nesta outra espécie. Espécies intimamente relacionadas têm vários genes em comum e verifica-se que uma boa maneira de compará-las é através da comparação de como os genes comuns mudaram de lugar.
                
                    Uma das mutações mais comuns que alteram a ordem dos genes de genomas é a inversão. Se modelarmos um genoma como uma sequência de N genes sendo cada gene um número inteiro de 1 a N,então uma inversão é uma mutação que altera o genoma revertendo a ordem de um bloco de genes consecutivos. A inversão pode ser descrita por dois índices (i, j), (1 ≤ i ≤ j ≤ N), indicando que ela inverte a ordem dos genes dentro de índices de i até j.
                
                    Assim, quando isto é aplicado para um genoma [g1,. . . , gi-1, gi , gi+1,. . . , gj-1, gj , gj+1,. . . , gN], obtém-se o genoma [g1,. . . , gi-1, gj , gj-1,. . . , gi+1, gi , gj+1,. . . , gN]. Como um exemplo, a inversão de (3, 6), aplicado à genoma [1, 2, 3, 4, 5, 6, 7] dá [1, 2, 6, 5, 4, 3, 7]. Se depois que a inversão (1, 3) é aplicada, obtém-se o genoma [6, 2, 1, 5, 4, 3, 7].
                
                    Um cientista que está estudando a evolução de uma espécie deseja tentar uma série de inversões no genoma desta espécie. Em seguida, ele quer consultar a posição final de vários genes. Será que você aceita o desafio de ajudá-lo?";A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um inteiro N indicando o número de genes no genoma (1 ≤ N ≤ 50000). Você pode supor que o ordem inicial dos genes é a sequência de números inteiros de 1 a N em ordem crescente. A segunda linha de um caso de teste contém um inteiro R (0 ≤ R ≤ 1000) que indica o número de inversões a serem aplicadas ao genoma. Então, R linhas seguem, cada uma contendo dois inteiros i, j (1 ≤ i ≤ j ≤ N), separados por um único espaço, o qual indicam os dois índices que definem a inversão correspondente. Após a descrição das inversões há uma linha contendo um inteiro Q (0 ≤ Q ≤ 100), que indica o número de consultas para os genes, seguido de Q linhas, onde cada linha contém um inteiro representando um gene cuja posição final você deve determinar. O final da entrada é indicada por N = 0.;"Para cada caso de teste da entrada seu programa deve produzir Q + 1 linhas de saída. A primeira linha deve conter a string ""Genome"", seguido do número do caso de teste. As seguintes Q linhas devem conter um número inteiro, cada um representando as respostas das consultas.";False;4 / 10;1637;707;43.19%
1272;Mensagem Oculta;Strings;3;"Textos podem conter mensagens ocultas. Neste problema a mensagem oculta em um texto é composto pelas primeiras letras
                    de cada palavra do texto, na ordem em que aparecem.
                
                    É dado um texto composto apenas por letras minúsculas ou espaços.
                    Pode haver mais de um espaço entre as palavras. O texto pode iniciar ou terminar em espaços, ou mesmo conter somente espaços.";"A entrada contém vários casos de testes. A primeira linha de entrada contém um inteiro N que indica a quantidade de casos de teste que vem a seguir. Cada caso de teste consiste de uma única linha contendo de um a 50 caracteres, formado por letras minúsculas (‘a’-‘z’) ou espaços (‘ ’).
                    Atenção para possíveis espaços no início ou no final do texto!
                
                    Nota: No exemplo de entrada os espaços foram substituídos por pequenos pontos (‘·’) para facilitar o entendimento dos exemplos.";Para cada caso de teste imprima a mensagem oculta no texto de entrada.;False;3 / 10;13367;5592;41.83%
1273;Justificador;Strings;7;Nós temos algumas palavras e queremos justificá-las à direita, ou seja, alinhar todas elas à direita. Crie um programa que, após ler várias palavras, reimprima estas palavras com suas linhas justificadas à direita.;"A entrada contém diversos casos de testes. A primeira linha de cada caso de teste conterá um inteiro N (1 ≤ N  ≤ 50), que indicará
                    o número de palavras que virão a seguir. Cada uma das N palavras contém no mínimo uma letra e no máximo 50 letras
                    maiúsculas (‘A’-‘Z’). O fim da entrada é indicado por N = 0.";"Para cada caso de teste imprima as palavras inserindo tantos espaços quanto forem necessários à esquerda de cada palavra,
                    para que elas apareçam todas alinhadas à direita e na mesma ordem da entrada. Deixe uma linha em branco entre os casos
                    de teste. Não deixe espaços sobrando no final de cada linha nem imprima espaços desnecessários à esquerda, de
                    modo que pelo menos uma das linhas impressa em cada texto inicie com uma letra.";False;7 / 10;13391;3539;26.43%
1274;P-Networks;Estruturas e Bibliotecas;5;"Pretty Networks Inc. é uma empresa que constrói alguns artefatos curiosos, cujo propósito é transformar um conjunto de valores de entrada de uma determinada maneira. A transformação é determinada por aquilo que eles chamam de uma P-Network. A imagem abaixo mostra um exemplo de uma P-Network.
                
                    
                
                    No caso geral, uma P-Network de ordem N e tamanho M, tem N fios horizontais numerados de 1, 2,. . . N, e M cursos verticais. Cada curso conecta dois fios consecutivos. Não há dois cursos diferentes tocando o mesmo ponto de nenhum fio e não há nenhum curso tocando o ponto mais à esquerda ou mais à direita de qualquer fio. O exemplo acima é uma P-Network de ordem 5 e tamanho 9.
                    
                    A transformação determinada por uma P-Network pode ser explicada através de um conjunto de regras que governam a maneira como um P-Network deve ser percorrida:
                    1. comece no ponto mais à esquerda de um fio, e vá para a direita;
                    2. cada vez que um curso aparecer mude para o fio conectado, e continue indo da esquerda para a direita;
                    3. pare quando o ponto mais à direita de um fio for alcançado.
                    Se partindo do fio i a travessia termina no fio j, dizemos que o P-Network transforma i em j, e denotamos isso com i → j. No exemplo acima, o P-Network determina o conjunto de transformações
                
                    {1 → 3, 2 → 5, 3 → 4, 4 → 1, 5 → 2}.
                
                    A empresa Pretty Networks contratou você para resolver o seguinte problema de projeto da P-Network: dado um número N e um conjunto de transformações {1 → i1, 2 → i2, . . . N → iN}, decida se uma P-Network de ordem N pode ser construída para realizar estas transformações e, nesse caso, forneça uma P-Network que faça isto.
                    
                    Quando existe uma solução com um determinado tamanho, em muitos casos há uma outra solução com um tamanho maior. Cientistas da Pretty Networks afirmaram que se existe uma solução para um problema de projeto da P-Network, então esta solução tem tamanho inferior a 4N2 . Portanto, eles estão interessados apenas em soluções com um tamanho inferior a este limite.";A entrada tem um certo número de problemas de projeto da P-Network. Cada problema é descrito em apenas uma linha que contém os valores N, i1, i2,. . . iN, separados por um único espaço em branco. O valor de N é a ordem da P-Network desejada, isto é, o seu número de fios (1 ≤ N ≤ 20). Os valores i1, i2,. . . iN representam que a P-Network deve determinar o conjunto de transformações {1 → i1, 2 → i2,. . . N → iN} (1 ≤ ij ≤ N, para cada 1 ≤ j ≤ N). A entrada termina com uma linha com N = 0 e que não deve ser processada.;"Cada problema de projeto da P-Network na entrada deverá gerar uma única linha de saída. Se o problema não tem solução a saída deve ser No solution. Caso contrário, a linha deverá conter uma descrição de uma P-Network qualquer (com N fios e menos do que 4N2 cursos), que realiza o conjunto de transformações solicitado. A descrição é dada por um conjunto de valores M, s1, s2, . . . sM, em que os valores consecutivos são separados por um único espaço em branco. O valor de M é o tamanho da P-Network, isto é, o número de cursos. Os valores de s1, s2, . . . sM descrevem os cursos da P-Network; isto deve ser entendido como o i-ésimo curso da esquerda para a direita, que liga os fios si e 1 + si (1 ≤ i ≤ M). Observe que 0 ≤ M < 4N2 , enquanto 1 ≤ si < N para cada 1 ≤ i ≤ M.";True;5 / 10;253;139;54.94%
1275;Light Up;Grafos;8;"Light Up (Iluminar - em português) é um enigma ou jogo definido em uma placa retangular dividida em quadrados menores. Alguns quadrados desta placa são ""vazios"" (quadrados brancos na figura abaixo) e outros quadrados são ""barreiras"" (quadrados escuros na figura abaixo). Um quadrado que indica uma barreira pode ter um número inteiro i associado a ele (0 ≤ i ≤ 4).

	

	Figura: (a) Puzzle com 6 linhas, 7 colunas e 7 barreiras; (b) uma solução para o enigma.
    
	Neste puzzle o objetivo é ""iluminar"" todos os quadrados vazios, colocando lâmpadas em alguns dos quadrados (as lâmpadas são representadas como círculos na figura). Cada lâmpada ilumina o quadrado em que está além de todos os quadrados alinhados com ele, horizontalmente ou verticalmente até um quadrado que contenha uma barreira ou até o fim do tabuleiro.
	Uma configuração vencedora satisfaz as seguintes condições:
	• todos os quadrados vazios devem ser acesos;
	• a luz não pode ser acesa por outra lâmpada;
	• todos os quadrados numerados como barreira devem ter exatamente o número de lâmpadas adjacentes a eles (nos seus quatro lados acima, abaixo, e para o lado);
	• quadrados que indicam uma barreira não numerados podem ter qualquer número de lâmpadas adjacentes a eles.
                
	Você deve escrever um programa para determinar o menor número de lâmpadas que são necessárias para alcançar uma configuração vencedora.";A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois números inteiros N, M indicando respectivamente o número de linhas e o número de colunas da placa (1 ≤ N ≤ 7, 1 ≤ M ≤ 7). A segunda linha contém um B inteiro que indica o número de quadrados do tipo barreira (0 ≤ B ≤ N × M). Cada uma das B linhas seguintes descrevem uma barreira, que contém três inteiros R, C e K, representando, respectivamente, o número da linha (1 ≤ R ≤ N), o número da coluna (1 ≤ C ≤ M) e o número da barreira (-1 ≤ K ≤ 4). K = -1 significa que a barreira é não numerada. O final da entrada é indicado por N = M = 0.;Para cada caso de teste da entrada seu programa deverá produzir uma linha de saída, contendo ou um inteiro indicando o menor número de lâmpadas necessárias para alcançar uma configuração vencedora caso ela existir. Caso contrário, seu programa deverá imprimir a mensagem ‘No solution’, conforme exemplo abaixo.;True;8 / 10;80;32;40.00%
1276;Faixa de Letras;Strings;3;"Uma faixa de letras é um conjunto de letras minúsculas alfabeticamente consecutivas tomadas de 'a' até 'z'. A menor e maior letras da faixa, separadas por dois pontos (o caractere ':'), são usadas para representar a faixa de letras. Por exemplo, a faixa ""a:c"" representa as letras consecutivas 'a', 'b' e 'c'. (as aspas não fazem parte da faixa). A faixa ""w:z"" representa as letras 'w', 'x', 'y' e 'z'. A faixa ""m:m"" representa apenas a letra 'm'.";"Cada linha de entrada é um caso de teste. Cada caso de teste contém uma string, que pode ser vazia e cujas letras podem não estar em ordem alfabética, de letras minúsculas (a-z) e espaços.
                
                    A string conterá entre 0 e 50 caracteres, inclusive.";"Para cada caso de teste de entrada, seu programa deverá imprimir as faixas de letras ordenadas alfabeticamente pelo menor valor de cada faixa. Faixas de letras a serem impressas devem representar a maior sequencia possível de letras de entrada em ordem crescente. Ignore espaços e letras duplicadas contidas na entrada.
                
                    Se a string for vazia, apenas imprima uma nova linha.
                
                    Por exemplo, a string ""fb xee ac"" tem três faixas de letras, ""a:c"" (as letras 'a', 'b' e 'c'), ""e:f"" (as letras 'e' e 'f') e ""x:x"" (a letra 'x'). Por favor, recorra aos exemplos.";False;3 / 10;2253;1129;50.11%
1277;Pouca Frequência;Strings;4;"Os estudantes da tua universidade recentemente adquiriram o desagradável hábito de cabular as aulas. Para enfrentar este
                    problema o seu Conselho de Professores decidiu somente permitir que estudantes com ao menos 75% de presença prestem os exames. A partir de uma lista de nomes de estudantes e seus respectivos registros de frequência, imprima o nome dos estudantes que não
                    obtiveram o mínimo de presença às aulas e que consequentemente não poderão prestar os exames.";"A entrada possui diversos casos de testes. A primeira linha da entrada contém um inteiro
                    T, que indica o número de casos de testes que se seguem.
                    
                    Cada caso de teste é composto por três linhas:
                    
                        A primeira linha de um caso de teste irá conter um inteiro
                        N (0 ≤ N ≤ 100) que indica o número de estudantes na turma.
                        A segunda linha conterá N nomes de estudantes com até 50 caracteres cada nome, separados por um único espaço.
                        Todos os nomes irão conter somente letras maiúsculas e minúsculas
                        (‘A’-‘Z’,‘a’-‘z’).
                        A terceira linha conterá N registros de frequência, correspondentes aos respectivos estudantes da
                        linha anterior. Os registros virão separados por um único espaço, e contêm
                        apenas os caracteres ‘A’, ‘P’ e ‘M’. Um ‘P’ indica que o estudante estava presente à
                        aula, ‘A’ indica que ele estava ausente (ele cabulou à aula) e ‘M’ mostra que, apesar de não ir à aula,
                        ele entregou um atestado médico, então esta aula não deverá ser considerada no cálculo da frequência do estudante.
                        Registros de frequência conterão ao menos um caracter ‘A’ ou ‘P’.";"Para cada caso de teste imprima os nomes de todos os estudantes que não cumpriram a presença mínima requerida, separados por
                    um espaço.  Não deixe espaços sobrando no final da linha.";False;4 / 10;6274;2144;34.17%
1278;Justificador II;Strings;5;"Nós temos alguns textos e queremos formatá-los e justificá-los à direita, ou seja, alinhar suas linhas à
                    margem direita de cada um. Crie um programa que, após ler um texto, reimprima esse texto com apenas um espaço entre as palavras e suas linhas
                    justificadas à direita em todo o texto.";"A entrada contém diversos casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 100) que indica o número de linhas de texto que virão a seguir. Cada uma destas N linhas de texto contém de 1 a 50 letras maiúsculas (‘A’-‘Z’) ou espaços (‘ ’). Todas as linhas de texto contém no mínimo uma letra. Poderá haver mais de um espaço entre as palavras. É também possível haver espaços no
                    início e no final da linha. O fim da entrada é indicado por N = 0.";"Para cada caso de teste imprima o texto com apenas um espaço entre as palavras, e inserindo tantos espaços quanto forem
                    necessários à esquerda de cada linha do texto, para que elas apareçam alinhadas à margem direita daquele
                    texto, e na mesma ordem da entrada. Deixe uma linha em branco entre os casos de testes. Não imprima espaços no
                    final de cada linha, nem espaços desnecessários à esquerda, de modo que pelo menos uma das linhas impressa
                    em cada texto inicie com uma letra.";False;5 / 10;4541;1411;31.07%
1279;Ano Bissexto ou Ano não Bissexto;Matemática;8;A antiga raça de Gulamatu é muito avançada no seu esquema de cálculo dos anos. Eles entendem o que é ano bissexto (ano que é divisível por 4 e não é divisível por 100, com a ressalva de que ano que são divisíveis por 400 são também anos bissextos.), E têm também alguns anos que ocorrem alguns festivais. Um deles é o festival Huluculu (acontece em anos divisíveis por 15) e o festival Bulukulu (acontece em anos divisíveis por 55 desde que também seja um ano bissexto). Dado um ano você terá de indicar quais propriedades este ano tem. Se o ano não é ano bissexto e nem ano de festival imprima a linha 'This is an ordinary year.', ou seja, que é um ano comum. A ordem de impressão das propriedades dos anos (se presente) é leap year -> huluculu -> bulukulu.;A entrada conterá vários casos de teste. Cada caso de teste consiste de uma linha contendo um ano que nunca será menor do que 2000 (para evitar regras anteriores diferentes para anos bissextos), mas pode ter mais do que 1.000 dígitos. O final da entrada é determinado por fim de arquivo (EOF).;Para cada entrada, imprima as diferentes propriedades dos anos em diferentes linhas de acordo com a descrição anterior e os exemplos fornecidos abaixo.  Uma linha em branco deve separar cada caso de teste de saída. Note que existem quatro diferentes propriedades. Obviamente não deverá ter uma linha em branco após o último caso de teste.;False;8 / 10;10431;1570;15.05%
1280;Amigos;Matemática;10;"João realizou uma tarefa para seu amigo José, mas os dois não chegaram a um acordo quanto ao pagamento pela realização da tarefa. Depois de muita discussão, João, que é muito bom em matemática, propôs um acordo. Inicialmente cada um deﬁniria, sem que o outro o soubesse, um determinado valor, ou seja, João especiﬁcaria um valor n e José um valor m.  Assim, se José propusesse não pagar nada, então ele teria que pagar n + 1 reais! Se João não quisesse receber nada e José propusesse pagar um ou mais reais, José pagaria o mesmo valor que teria que pagar caso João pedisse 1 real e José propusesse pagar apenas m - 1 reais!! Se ambos os valores fossem superiores a zero, então José pagaria o mesmo valor que teria que pagar caso José propusesse m - 1 reais e João quisesse receber o mesmo que receberia se José propusesse m reais e ele pedisse n - 1 reais!!! Eles também estipularam que se José estivesse disposto a pagar no máximo 3 reais, então João poderia pedir até 200 reais. Por outro lado, se José estivesse disposto a pagar 4 reais, então João só poderia pedir até 2 reais!
    
	Depois de horas discutindo essas regras, eles ﬁnalmente concordaram que seria muito trabalhoso calcular o valor devido por José. Portanto, escreva um programa que calcule o valor que José terá que pagar a João, segundo essas regras.";A primeira linha da entrada contém um inteiro T que é o número de casos de testes. As T linhas seguintes conterão dois inteiros m (0 ≤ m ≤ 4) e n (0 ≤ n ≤ 200), separados por um espaço, que representam os valores que José quer pagar e que João quer receber, respectivamente.;A saída deverá conter, para cada caso de teste, um inteiro igual ao valor que José terá que pagar a João.;False;10 / 10;865;119;13.76%
1281;Ida à Feira;Estruturas e Bibliotecas;1;Dona Parcinova costuma ir regularmente à feira para comprar frutas e legumes. Ela pediu então à sua filha, Mangojata, que a ajudasse com as contas e que fizesse um programa que calculasse o valor que precisa levar para poder comprar tudo que está em sua lista de compras, considerando a quantidade de cada tipo de fruta ou legume e os preços destes itens.;A primeira linha de entrada contém um inteiro N que indica a quantidade de idas à feira de dona Parcinova (que nada mais é do que o número de casos de teste que vem a seguir). Cada caso de teste inicia com um inteiro M que indica a quantidade de produtos que estão disponíveis para venda na feira. Seguem os M produtos com seus preços respectivos por unidade ou Kg. A próxima linha de entrada contém um inteiro P (1 ≤ P ≤ M) que indica a quantidade de diferentes produtos que dona Parcinova deseja comprar. Seguem P linhas contendo cada uma delas um texto (com até 50 caracteres) e um valor inteiro, que indicam respectivamente o nome de cada produto e a quantidade deste produto.;Para cada caso de teste, imprima o valor que será gasto por dona Parcinova no seguinte formato: R$ seguido de um espaço e seguido do valor, com 2 casas decimais, conforme o exemplo abaixo.;True;1 / 10;8864;4491;50.67%
1282;Organizando Pacotes;Paradigmas;8;"Uma empresa de mineração extrai térbio, um metal raro usado para a construção de ímãs leves, a partir de areia de rio. Eles mineram um grande rio em N pontos de mineração, cada um deles identificado por sua distância a partir da origem do rio. Em cada ponto de mineração, uma pequena pilha ou amontoado de minério mineral altamente valorizado é extraido do rio.
                    Para recolher o minério mineral, a empresa reagrupa os N amontoados produzidos em um menor número de K pilhas ou montes maiores, cada um localizado num dos pontos de extração inicial. Os montes recém-formados são então recolhidos por caminhões.
                
                    Para reagrupar os N montes eles usam uma barca, o que na prática pode levar qualquer quantidade de minério mineral por ser bem larga. A barcaça começa na origem do rio e somente pode viajar rio abaixo, de modo que o amontoado de mineral produzido em um ponto X de mineração pode ser levado para um ponto Y de mineração somente se Y > X. Cada monte é movimentado completamente para outro ponto de mineração, ou não se move. O custo de mover um monte com peso W a partir de um ponto X de mineração para um ponto Y de mineração é W (Y - X). O custo total do agrupamento é a soma dos custos de cada movimento de um monte. Nota-se que um monte que não é movido não tem influência sobre o custo total.
                
                    Dados os valores de N e K, os N pontos de mineração, e o peso da pilha ou amontoado produzido de cada ponto de mineração, escreva um programa que calcule o custo total mínimo para reagrupar estes N montinhos iniciais em K pilhas ou montes maiores.";Cada caso de teste é descrito usando várias linhas. A primeira linha contém dois inteiros N e K os quais denotam espectivamente, o número de montes ou pilhas iniciais e o número desejado de montes após o reagrupamento (1 ≤ K < N ≤ 1000). Cada uma das seguintes N linhas descrevem um dos montes iniciais com dois números inteiros X e W indicando que o ponto X de mineração produziu um amontoado com peso de W (1 ≤ X, W ≤ 106 ). Dentro de cada caso de teste, os montes ou pilhas são dados estritamente em ordem ascendente, considerando os seus pontos de mineração.;Para cada caso teste de saída terá uma linha com um inteiro representando o mínimo custo total, para reagrupar os N amontoados iniciais em K montes maiores.;False;8 / 10;463;192;41.47%
1283;Caixas e Pedras;Paradigmas;5;"Paulo e Carolina gostam de jogar um jogo com S pedras e B caixas enumeradas de 1 até B. Antes de iniciar o jogo, eles arbitrariamente distribuem as S pedras entre as caixas desde a caixa 1 até a caixa B - 1, deixando a caixa B vazia. O jogo então avança algumas rodadas. Em cada rodada, primeiro Paulo escolhe um subconjunto P das pedras que estão nas caixas; ele pode escolher tantas pedras quantas deseja a partir de tantas caixas quantas ele quiser, ou ele pode simplesmente não escolher nenhuma pedra, e neste caso P é vazio. Então, Carole decide o que fazer a seguir: ela pode ou promover o subconjunto P e descartar as pedras restantes (isto é, aquelas pedras não escolhidas por Paulo na primeira etapa), ou ela pode descartar o subconjunto P e promover as pedras restantes.
	Promover um dado subconjunto significa pegar cada pedra deste subconjunto e movê-la para a caixa com o próximo número na sequência, de modo que, se houver uma pedra neste subconjunto dentro de uma caixa b, ela é movida para a caixa b + 1. Descartar um determinado subconjunto significa remover todas as pedras deste subconjunto de sua correspondente caixa, de modo que essas pedras não sejam utilizadas ​​no jogo para as rodadas restantes. A figura abaixo mostra um exemplo das duas primeiras rodadas de um jogo.

	

	Paulo e Carolina jogam até que pelo menos uma pedra atinja uma caixa com número B, caso em que Paulo vence o jogo, ou até que não haja mais pedras deixadas nas caixas, caso em que Carolina ganha o jogo. Paulo é um jogador muito racional, mas Carolina é um rival digno, porque ela não é apenas extremamente boa nesse jogo, mas também tem muita sorte. Gostaríamos de saber quem é o melhor jogador, mas antes disso temos que compreender como o resultado de um jogo depende da distribuição inicial das pedras. Em particular, gostaríamos de saber de quantas maneiras as pedras S poderiam ser distribuídas inicialmente entre as primeiras B - 1 caixas de modo que Carolina possa ter certeza de que irá ganhar o jogo se jogar da melhor maneira possível, mesmo que Paulo nunca cometa nenhum erro.";Cada caso de teste é composto por uma linha. A linha contém dois inteiros S (1 ≤ S ≤ 200) e B (2 ≤ B ≤ 100), representando respectivamente, o número de pedras e o número de caixas no jogo.;Para cada caso de teste deverá ser impressa uma linha com um número inteiro que representa o número de maneiras nas quais as S pedras podem ser distribuídas entre as primeiras B - 1 caixas, de modo que Carolina fique certa que ela pode ganhar o jogo. Como este número poderá ser muito grande, você é obrigado a imprimí-lo como o restante deste número dividido por 109 + 7.;True;5 / 10;64;36;56.25%
1284;Digitando no Telefone Celular;Strings;6;"Uma equipe de pesquisadores está desenvolvendo uma nova tecnologia para economizar tempo ao digitar mensagens de texto em dispositivos móveis. Eles estão trabalhando em um novo modelo que tem um teclado completo, assim os usuários podem digitar qualquer letra pressionando a tecla correspondente. Desta forma, um usuário precisa pressionar P teclas para digitar uma palavra de comprimento P.
                    No entanto, isto não é suficientemente rápido. A equipe vai montar um dicionário de palavras comuns que um usuário pode digitar. O objetivo é reduzir o número médio de teclas pressionadas necessárias para digitar palavras que constam no dicionário. Durante a digitação de uma palavra, sempre que houver apenas uma possibilidade para a seguinte letra, o sistema de telefone celular irá introduzí-la automaticamente, sem a necessidade de digitação. Para ser mais preciso, o comportamento do sistema de telefone celular irá ser determinado pelas seguintes regras:
                
                    1. O sistema nunca irá adivinhar a primeira letra de uma palavra, ou seja, para a primeira letra sempre terá que ser pressionada a tecla correspondente.
                
                    2. Se uma sucessão não-vazia de letras c1c2...cn for introduzida, e houver uma letra c tal que cada palavra no dicionário que começa com c1c2...cn também começa com c1c2 ... cnc, em seguida, o sistema coloca a entrada c automaticamente, sem a necessidade de uma combinação de teclas. Caso contrário, o sistema aguarda o usuário.
                
                    Por exemplo, se o dicionário é composto das palavras ""hello"", ""hell"", ""heaven"" e ""goodbye"", e o usuário pressiona ""h"", o sistema colocará a letra ""e"" automaticamente, porque cada palavra que começa com ""h"" também começa com ""he"". No entanto, uma vez que existem palavras que começam com ""hel"" e com ""hea"", o sistema precisa agora esperar a próxima digitação do usuário. Se o usuário pressionar então o ""l"", obtendo-se a palavra parcial ""hel"", o sistema de entrada incluirá um segundo ""l"" automaticamente. Quando se tem o ""hell"" como entrada, o sistema não pode supor nada, porque é possível que a palavra terminou, ou também é possível que o usuário pode querer pressionar ""o"" para obter ""hello"". Desta forma, para digitar a palavra ""hello"" o usuário precisa de três teclas, ""hell"" exige duas e ""heaven"" também requer duas, porque quando a entrada é ""hea"" o sistema pode colocar automaticamente o restante da palavra aplicando repetidamente a segunda regra. Da mesma forma, a palavra ""goodbye"" precisa de apenas uma tecla, porque depois de pressionar a inicial ""g"", a sistema irá preencher automaticamente a palavra inteira. Neste exemplo, o número médio de teclas necessário digitar uma palavra no dicionário é, então, (3 + 2 + 2 + 1) / 4 = 2.00.
                
                    Dado um determinado dicionário, sua tarefa então é calcular o número médio de teclas necessárias para escrever uma palavra no dicionário com o novo sistema para celular desenvolvido pelos pesquisadores.";Cada caso de teste é descrito por várias linhas. A primeira linha contém um número inteiro N representando o número de palavras no dicionário (1 ≤ N ≤ 105 ). Cada uma das próximas N linhas contém uma string não-vazia de no máximo 80 letras minúsculas do alfabeto inglês, representando uma palavra no dicionário. Dentro de cada caso de teste todas as palavras são diferentes, e a soma dos comprimentos de todas as palavras é, no máximo, 106.;Para cada caso de teste de entrada imprima um número com duas casas decimais (arredondado caso necessário) que representa o número médio de pressionamentos de tecla necessários para digitar uma palavra no dicionário.;False;6 / 10;1106;506;45.75%
1285;Dígitos Diferentes;Ad-Hoc;3;"Os habitantes de Nlogônia são muito supersticiosos. Uma de suas crenças é que os números das casas de rua que têm um dígito repetido traz sorte ruim para os moradores. Portanto, eles nunca iriam viver em uma casa que tem o número 838 ou 1004, por exemplo.
    
	A rainha de Nlogônia ordenou a construção de uma nova avenida à beira-mar e quer atribuir para as novas casas apenas números sem dígitos repetidos, para evitar desconforto entre os seus súditos. Você foi nomeado por Sua Majestade para escrever um programa que, dado dois inteiros N e M, determine a quantidade máxima possível de casas que podem assumir um número entre N e M inclusive, sem que ocorram dígitos repetidos nestes números.";Cada teste é descrito usando uma linha. A linha contém dois inteiros N e M, conforme descrito acima (1 ≤ N ≤ M ≤ 5000).;Para cada caso de teste imprima um valor inteiro que representa a quantidade máxima possível de números de casa entre N e M inclusive, sem dígitos repetidos.;False;3 / 10;6014;2749;45.71%
1286;Motoboy;Paradigmas;4;"José é um motoboy e trabalha fazendo entregas para uma pizzaria. Seu salário é baseado no número de pizzas entregues. Só que esta pizzaria está com muito movimento e ele pediu auxílio a seu amigo Roberto para que o ajudasse nas entregas. Como Roberto é camarada e está sem trabalho no momento, ele concordou em pegar aqueles pedidos cujas entregas serão mais demoradas.
                
                    Assim, sempre que chegam à pizzaria, antes de partirem para novas entregas José determina a quantidade de pizzas que Roberto deverá entregar e seleciona para ele os pedidos mais demorados. Por exemplo, se há 22 pizzas para serem entregues e José determinar que Roberto entregue no máximo 10 destas pizzas (pode ser menos), estas devem estar obrigatoriamente entre os pedidos que levarão mais tempo para serem entregues. Isso é ilustrado no primeiro caso de teste, onde Roberto deverá fazer a entrega do segundo, terceiro e sexto pedido, somando 8 pizzas e 62 minutos (23 + 21 + 18). Se Roberto fosse realmente entregar 10 pizzas, ele teria que atender o segundo, terceiro e quarto pedido e isto levaria 59 minutos (23 + 21 + 16), o que não é o objetivo de José, pois levaria menos tempo do que a primeira opção, ou seja, a relação pizzas/tempo não importa muito para José (isso pode ser observado no segundo caso de teste do exemplo abaixo).
                
                    Para poder fazer a divisão do trabalho, José pediu a um amigo acadêmico em Ciência da Computação que desenvolvesse um programa que determinasse quanto tempo seu amigo Roberto irá levar para entregar estes pedidos mais demorados.";A entrada contém vários casos de teste. Cada caso de teste contém na primeira linha um valor inteiro N (1 ≤  N ≤ 20) que indica o número de pedidos. A linha seguinte contém um valor inteiro  P (1 ≤ P ≤ 30) indicando o número máximo de pizzas que podem ser entregues por Roberto. Cada uma das próximas N linhas contém um pedido com o tempo total para ser entregue e a quantidade de pizzas do pedido, respectivamente. A final da entrada é determinado por N = 0, e não deverá ser processado.;Para cada caso de teste de entrada deve ser impresso um valor inteiro que determina o tempo que Roberto irá levar para entregar as suas pizzas seguido de um espaço em branco e do texto “min.”, conforme exemplo abaixo.;False;4 / 10;5065;2556;50.46%
1287;Processador Amigável de Inteiros;Strings;8;"Computadores estão presentes em uma porcentagem significante de casas pelo mundo e, como programadores, somos responsáveis por criar interfaces que todos possam usar. Interfaces de usuário precisam ser flexíveis de forma que se um usuário comete um erro não fatal, a interface ainda pode deduzir o que o usuário queria dizer.
                
                    Sua tarefa é escrever um programa que processe um texto de entrada representando um inteiro, porém, como esta é uma interface de usuário, não seremos muito rígidos com o usuário:
                
                    1. Se o usuário digita a letra ""O"" ou ""o"", assumimos que ele queria digitar o número ""0"".
                
                    2. Se o usuário digita a letra ""l"", assumimos que ele queria digitar o número ""1"".
                
                    3. Vírgulas e espaços são permitidos, porém não são processados (são ignorados).
                
                    Se, mesmo com as regras acima, o usuário não entrou um número não-negativo, imprima a string ""error"". Overflow (um valor maior que 2147483647) é considerado inválido e ""error"" deve ser impresso.";"Cada linha da entrada é um caso de teste e contém uma string n.
                
                    n conterá entre 0 e 50, inclusive, letras, dígitos, espaços ou vírgulas";"Para cada caso de teste, seu programa deverá imprimir um
                    inteiro representado pela string n ou ""error"" se n não é um
                    inteiro não-negativo válido.
                
                    Nota: Uma string vazia não representa um inteiro
                    válido.";False;8 / 10;5964;1253;21.01%
1288;Canhão de Destruição;Paradigmas;5;"O jogo canhão de destruição é um jogo muito simples de ser entendido. Você recebeu como missão destruir um determinado castelo, sendo que o mesmo possui como característica um número inteiro R que é a sua resistência. Para tentar completar sua missão, você recebeu um canhão que é carregado com projéteis de chumbo, sendo que este canhão pode ser carregado com quantos projéteis forem possíveis desde que a soma do peso deles em quilos não exceda a capacidade de carga do canhão. Podem existir projéteis com pesos iguais e poder de destruição diferentes devido ao seu formato, embora isso não seja tão importante. Ao atingir o castelo, um projétil faz com que o seu valor de destruição seja diminuído da resistência do castelo.
                
                    Levando em consideração que o canhão pode ser carregado uma única vez, respeitando o seu limite de quilos, a sua tarefa é carregar o canhão com projéteis que não ultrapassem o seu limite de carga mas que façam o maior estrago possível, para saber se a missão foi completada ou não.";A primeira linha de entrada contém o número de casos de teste. Cada caso de teste inicia com uma linha contendo um número inteiro  N (1 ≤ N ≤ 50), que representa o número de projéteis de chumbo disponíveis. Seguem N linhas contendo dois inteiros X e Y, representando respectivamente o poder de destruição do projétil e o peso do projétil. A próxima linha contém um inteiro K (1 ≤ K ≤ 100) que representa a capacidade de carga do canhão e a última linha do caso de teste contém um inteiro R que indica a resistência total do castelo.;Se o dano total das cargas carregadas for maior ou igual à resistência do castelo então deverá ser impressa a mensagem “Missao completada com sucesso”, caso contrário, deverá ser impressa a mensagem “Falha na missao”.;False;5 / 10;3926;1822;46.41%
1289;Qual é a Probabilidade?;Matemática;6;"Probabilidade sempre foi uma parte importante de algoritmos. Os algoritmos probabilísticos vem para suprir uma lacuna deixada pelos algoritmos determinísticos, que não conseguem resolver determinados problemas em curto espaço de tempo. Neste problema, não estamos lidando com qualquer algoritmo probabilístico. Vamos apenas tentar determinar a probabilidade de ganhar de um determinado jogador.
                 
                    ​Um jogo é jogado através do arremesso de um dado(que não se deve presumir que ele tem seis lados como um dado comum). Se um determinado evento ocorre quando um jogador joga os dados (tal como a obtenção de um 3, ficando lado verde em cima ou seja lá o que for) este é declarado o vencedor. Tal jogador pode ser o jogador N. Assim, o primeiro jogador vai jogar os dados, depois o segundo e, finalmente, o jogador N e, novamente, o primeiro e assim por diante. Quando um jogador obter um determinado resultado ele é declarado vencedor e o jogo termina. Você terá que determinar a probabilidade de ganhar de um (O enésimo) destes jogadores.";"A primeira linha de entrada irá conter um inteiro S (S ≤ 1000), que indica a quantidade de casos de teste. Cada caso de teste é composto por uma única linha contendo 3 valores, separados por um espaço em branco. O primeiro destes 3 valores é um inteiro N (N ≤ 1000) que indica o número de jogadores. Segue um número de ponto flutuante P que indica a probabilidade de ocorrência de um evento desejado ou bem sucedido em um único lançamento de dado (Se por exemplo, ""bem sucedido"" significa conseguir um número 3, então P é a probabilidade de obter 3 em uma partida. Para um dado normal a probabilidade de se obter 3 é 1/6). O terceiro e último valor de cada caso de teste é um inteiro I (I ≤ N) que é o número de série do jogador cuja probabilidade de vencer deverá ser determinado (varia de 1 até N, inclusive). Você pode assumir que nenhum valor inválido de probabilidade (P) será fornecido como entrada.";Para cada conjunto de entrada, deve ser impresso um único valor com 4 casas decimais indicando a probabilidade de ganhar do jogador I, conforme apresentado no exemplo abaixo.;False;6 / 10;782;324;41.43%
1290;Caixas Muito Especiais;Ad-Hoc;8;"Special Box Company (SBC) é uma empresa familiar que produz caixas de papelão decoradas para embalar presentes. As caixas são feitas à mão, produzidas individualmente a partir de materiais nobres. Ao aceitar uma encomenda de um cliente, eles sempre produzem algumas caixas a mais do que o necessário, para manter um estoque de caixas para ser vendido no futuro. Ao longo dos anos seu estoque tem crescido, com caixas em todo o lugar, e eles decidiram que precisavam se organizar um pouco mais. Eles têm, portanto, feito uma lista registrando as dimensões de cada caixa em seu estoque.
                SBC acaba de receber um pedido de um cliente que deve ser entregue amanhã, por isso não há tempo para produzir novas caixas. O cliente quer uma certo número N de caixas, todas do mesmo tamanho; cada caixa irá ser usada para embalar um item de dimensões X, Y e Z. Como o papelão utilizado nas caixas é muito fino, você pode assumir que em uma caixa de tamanho (X, Y, Z) se encaixaria perfeitamente o item que o cliente quer embrulhar. Se não houver pelo menos N caixas que encaixam perfeitamente o item, o cliente quer caixas de N que se encaixam os itens tão firmemente quanto possível. O tamanho da caixa que se encaixa os itens tão firmemente quanto possível é a que minimiza o espaço vazio quando o item é colocado dentro da caixa. Um item pode ser rotacionado em qualquer direção para ser acomodado dentro de uma caixa, por isso, uma caixa de tamanho (X, Y, Z) é tão boa como uma caixa de tamanho (Y, Z, X).
                Você pode ajudar a SBC a descobrir se eles podem atender a ordem do cliente?";A entrada consiste em vários casos de teste. A primeira linha de cada caso de teste contem dois inteiros N e M, indicando respectivamente o número de caixas que o cliente deseja comprar (1 ≤ N ≤ 1500) e o número de caixas na lista de estoque (1 ≤ M ≤ 1500). A segunda linha contém três inteiros X, Y e Z, representando as dimensões do item que o cliente deseja embrulhar (0 < X, Y, Z ≤ 50). Cada uma das M linhas seguintes contém três inteiros A, B e C representando as dimesões de uma das caixas da lista de estoque (0 < A, B, C ≤ 50). O caso de teste com N = 0 indica o fim da entrada.;"Para cada caso de teste da entrada o seu programa deve produzir uma linha de saída, contendo:

                
                    somente a palavra 'impossible', caso não seja possível atender ao pedido do cliente (porque não existem pelo menos N caixas do mesmo tamanho no estoque que podem conter o item); ou
                    um inteiro V, que especifica o volume do espaço que sobra quando um dos N itens é colocado em uma das caixas escolhidas.";False;8 / 10;923;213;23.08%
1291;Será Isso Integração?;Geometria Computacional;4;"Na imagem abaixo você pode ver um quadrado ABCD, onde AB = BC = CD = DA = a. Quatro arcos são desenhados tomando os quatro vértices A, B, C, D como centros e a distância a como o raio. O arco que é desenhado tendo o vértice A como seu centro, tem início no vértice vizinho B e termina no vértice vizinho D. Todos os outros arcos são desenhados de forma semelhante. Desta forma são criadas regiões distintas que são preenchidas (hachuradas) por três padrões diferentes e que podem ser observadas na imagem abaixo. Você terá que determinar a área total de cada uma destas 3 regiões.

                ​";A entrada contém vários casos de teste e termina com fim de arquivo (EOF). Cada caso de teste é composto por uma linha contendo um número de ponto flutuante a (0 ≤ a ≤ 10000) que indica o tamanho de um lado do quadrado.;Para cada linha de entrada, imprima uma única linha com a área total dos três tipos de regiões (preenchido com padrões diferentes conforme a imagem acima). Estes três números deverão ser números de ponto flutuante com três dígitos depois do ponto decimal. O primeiro número irá indicar a área da região listrada (central), o segundo número irá indicar a área total das regiões com pontos e o terceiro número irá indicar a área da região quadriculada (mais externa).;True;4 / 10;1187;578;48.69%
1292;Problema com um Pentágono;Geometria Computacional;3;"Solicitaram que você colocasse o maior quadrado possível dentro de um pentágono regular (cujo internos ângulos são iguais assim como todos os seus lados). Sabe-se que um vértice do quadrado vai ser coincidente com outro vértice do quadrado como é mostrado na figura abaixo. Você tem que encontrar o comprimento de um dos lados do quadrado, uma vez que você tem a informação de um dos lados do pentágono regular.

                
                    
                    ​Fig.: quadrado em um pentágono.";A entrada contém vários casos de teste e termina com final de arquivo (EOF). Cada caso de teste é composto por uma linha contendo um número de ponto flutuante F (0 ≤ F ≤ 100000) que indica o tamanho de um lado do pentágono.;Para cada caso de teste imprima uma linha de saída que contém um número de ponto flutuante com 10 dígitos depois do ponto decimal. Este número indica o maior lado possível de um quadrado que se encaixa no pentágono. ;True;3 / 10;1853;1135;61.25%
1293;Romeu e Julieta!;Geometria Computacional;6;"Neste problema, vamos discutir os problemas de um Romeu moderno e uma Julieta moderna. Você está convidado a resolver os problemas deles para que eles não tenham que ser um par trágico como o de Shakespeare. Como de costume as famílias de Romeu e Julieta têm relações hostis e por isso eles estão trancados em dois lugares diferentes M e N. Dois canhões são colocados no local A e dois canhões são colocados no local B. Um canhão na localização A é apontado para M e o outro é apontado para N. a mesma coisa se ​​aplica aos dois canhões de localização B. M e N estão sempre no lado oposto de AB.

                
                    ​Fig: Cenário parcial de Romeu e Julieta

                
                    Os movimentos dos canhões, que estão visando M, estão interrelacionados, ou seja, o ângulo entre suas direções é constante. Portanto o ângulo CMD ((5 graus) ≤ (ângulo CMD) <(80 graus)) é constante. A mesma regra se aplica aos outros dois canhões. Ou seja, o ângulo ENF ((5 graus) ≤ (ângulo ENF) <(80 graus)) também é constante. Todas essas coisas são mostradas na imagem acima. Mas outra coisa que é importante e que está faltando na figura acima é que os locais N, A, M, são mantidos sempre em uma linha reta. A razão por trás disso é muito estranha. Um robô foi contratado como guarda de Romeu e Julieta. Ele tem dois olhos em lados opostos da sua cabeça e este robô é posicionado no ponto A. Para ser mais preciso, A, B e ângulo de CMD e ângulo ENF são constantes em um cenário e todas as outras posições ou valores são variáveis. Também lembro que o ponto M deve permanecer sempre apontado pelos dois canhões. A mesma coisa se ​​aplica ao ponto N.
                
                    O problema é que, nas noites estreladas Romeu canta a música ""Noites Azuis"" de ""Michael Learns to Rock"" em voz alta e ambos os pais não querem que Julieta ouça essa música. Então, eles querem colocar as casas (M e N), tão distantes uma da outra quanto for possível para preservar todas as restrições explicadas antes. Seu trabalho é medir esta máxima distância entre M e N e informá-la a Romeu, para que ele possa decidir se ele deve ou não cantar ou qual o volume de voz que deve usar.";A entrada contém vários casos de teste e termina com final de arquivo (EOF). Cada caso de teste é composto por uma linha que coném seis valores de ponto-flutuante, x1, y1, x2, e y2 (0 ≤ x1, y1, x2, y2 ≤10000) CMD, ENF. Aqui (x1, y1) é a coordenada de A, (x2, y2) é a coordenada de B, CMD é o ângulo entre as direções dos canhões apontados na direção de M e ENF é o valor similar para o ponto N.;Para cada linha de entrada, você deve produzir uma linha de saída, que contém um número de ponto flutuante F. F é a maior distância possível entre a casa de Romeu e casa de Julieta, e tem três dígitos após o ponto decimal.;True;6 / 10;130;76;58.46%
1294;A Maior e Menor Caixa;Geometria Computacional;5;"Na figura a seguir você pode ver um cartão retangular. A largura do cartão é W e comprimento do cartão é L, com espessura é igual a zero. Quatro quadrados (x * x) são cortados a partir dos quatro cantos do cartão mostrado pelas linhas com tracejado preto. Em seguida, o cartão é dobrado ao longo das linhas em vermelho para fazer uma caixa sem tampa.

                ​

                Fig.: Corte e Dobra o Cartão.

                
                    Dada a largura e altura da caixa, você terá que encontrar o valor de x para o qual a caixa teria inicialmente o máximo e posteriormente o mínimo volume possíveis, separados por espaços.";A entrada contém vários casos de teste. Cada caso de teste é composto por uma linha que contém dois valores positivos de ponto flutuante L (0 < L < 10000) e W (0 < W < 10000), o que indicam respectivamente o comprimento e a largura do cartão.;A entrada contém vários casos de teste e termina com final de arquivo (EOF). Cada linha de entrada deve produzir uma linha de saída, que deverá conter dois ou mais números de ponto flutuante com três dígitos após o ponto decimal, separados por um único espaço. O primeiro número indica o valor para o qual o volume da caixa é o máximo possível e os valores seguintes (classificados em ordem crescente) indicam os valores para os quais o volume da caixa é o mínimo possível. ;True;5 / 10;1006;402;39.96%
1295;Problema dos Pares Mais Próximos;Geometria Computacional;8;Dado um conjunto de pontos em um espaço bidimensional, você deverá encontrar a distância entre os pontos mais próximos.;O arquivo de entrada contém vários casos de teste. Cada caso de teste começa com um número inteiro N (0 ≤ N ≤ 10000), que denota o número de pontos neste conjunto. As N linhas seguintes contêm, cada uma delas, dois valores que são as coordenadas dos N pontos bidimensionais. O primeiro destes dois valores indica a coordenada X e o último indica a coordenada Y. A entrada é terminada por um conjunto cujo N = 0. Esta entrada não deve ser processada. O valor das coordenadas será um número não-negativo menor do que 40000.;"Para cada conjunto de entrada imprima uma única linha de saída contendo um valor de ponto flutuante (com 4 dígitos após o ponto decimal) o qual denotará a distância entre os dois pontos mais próximos. Se não existirem tais dois pontos na entrada cuja distância for menor do que 10000, imprima a mensagem ""INFINITY"" sem as aspas.";False;8 / 10;5603;1171;20.90%
1296;Medianas;Geometria Computacional;4;Dado o comprimento das três medianas de um triângulo, você terá que descobrir a área deste triângulo. Se você não tem muito conhecimento sobre geometria é importante que saiba que a mediana de um triângulo é formada pela conexão de qualquer vértice de um triângulo ao ponto central(médio) de sua borda oposta. Assim, um triângulo tem três medianas.;A entrada contém aproximadamente 1000 casos de teste. Cada caso de teste é composto por três números que denotam o comprimento das medianas do triângulo. Todos os valores da entrada são menores do que 100. O final da entrada é determinado pelo final de arquivo (EOF).;Para cada linha de entrada seu programa deverá produzir uma linha de saída. Esta linha deve conter a área do triângulo para a correspondente entrada. Se não for possível formar um triângulo com as medianas fornecidas, deverá ser impresso o valor -1. As áreas devem ser arredondadas no terceiro dígito após o ponto decimal.;False;4 / 10;1050;473;45.05%
1297;Proteção do Meio Ambiente;Matemática;9;"Arsênico & Cyanide Mineração (ACM) é uma empresa que recentemente decidiu começar a desenvolver suas minas nas terras perto de sua cidade natal. Como um membro do comité de regulamentação dos cidadãos para as operações da ACM, sua tarefa é controlar o quanto a empresa pode extrair dessas terras, de modo que você terá que manter os empregos e os benefícios de sem sacrificar o meio ambiente e a saúde da população local.

                
                    A ACM tem planos para minerar vários pedaços retangulares de terra. Um pedaço de terra tem a largura W, pode ser desenterrado para uma profundidade máxima D, e tem uma superfície plana a qual nós consideramos ser a profundidade 0. Os minerais em um pedaço de terra estão organizados em três camadas, que podem variar na sua profundidade ao longo da largura deste pedaço, mas sempre tem o mesmo perfil ao longo do seu comprimento total. Por isso, a ACM está apenas interessado no perfil ao longo da largura de cada pedaço, e tem realizado trabalhos exploratórios, a fim de determinar com precisão a sua forma.

                
                    Como resultado, eles descobriram que as duas interfaces entre as três camadas de minerais pode ser representada por duas funções y1(x) e y2(x), em que a primeira descreve o limite entre a camada superior e da camada do meio, e o segundo descreve o limite entre a camada intermédia ea camada inferior. Estas funções são de tal forma que sempre

                -D < y2(x) < y1(x) < 0 for 0 ≤ x ≤ W ,

                
                    ou seja, os limites das camadas não se tocam. Além disso, cada função está na forma yi(x) = pi(x)/qi(x), onde

                ​
                
                
                    para i = 1, 2 e um determinado inteiro K. A figura abaixo mostra o perfil dos dois pedaços de terra no formato representado pela ACM. O pedaço da esquerda tem largura W = 6 e profundidade D = 9, enquanto que o pedaço da direita tem W = 8 e D = 10. Os limites das camadas de cada pedaço são descritos pelas funções definidas abaixo deles.

                ​
                
                
                    A ACM vai cavar tudo em um pedaço de terra até uma certa profundidade de escavação d, e, em seguida, vender todos os minerais assim obtidos para lucrar com isso. No entanto, os minerais da parte superior e das camadas inferiores são essencialmente sem valor, de modo que o lucro de toda a operação vem exclusivamente a partir desses minerais na camada do meio. Na verdade, o lucro é proporcional a área A da camada do meio no perfil que está a uma profundidade de pelo menos d. Dada a descrição de um pedaço de terra e um inteiro A, você gostaria de saber a profundidade de escavação d que você deve permitir que o ACM escave a fim de que peguem uma área de minerais na camada do meio com o perfil exato A.
                    
                    Na figura abaixo você pode ver a resposta dos dois casos de teste para a mesma entrada. Para o pedaço da esquerda, a fim de pegar uma área A = 14, a profundidade de escavação deve ser de pelo menos d = 4.00000, enquanto que para o pedaço da direita de área também igual a 14, requer uma profundidade de escavação d = 5.51389.";Cada caso de teste é descrito usando 5 linhas. A primeira linha contém 4 inteiros W, D, A e K, onde W é a largura do pedaço de terra que a ACM deseja minerar (1 ≤ W ≤ 8), D é a profundidade (1 ≤ D ≤ 10), A é a área da camada do meio com o perfil que a ACM deseja(1 ≤ A ≤ W x D), e K permite a definição das interfaces y1(x) e y2(x) conforme explicado acima (0 ≤ K ≤ 8). Cada uma das outras linhas contém K + 1 inteiros entre -108 e 108, inclusive. A segunda linha contem os coeficientes de p1(x) desde P1,0 até P1,K. A terceira linha contém os coeficientes de q1(x) desde Q1,0 até Q1,K. A quarta linha contém os coeficientes de p2(x) desde P2,0 até P2,K. A quinta linha contém os coeficientes de q2(x) desde Q2,0 até Q2,K. Em cada caso de teste, A é estritamente menor que a area total da camada do meio do perfil e existe um único valor d tal que de tal forma que uma profundidade de escavação d origina uma área de minerais a partir da camada do meio em um perfil exato A. Além disso, q1(x) 6= 0, q2(x) 6= 0 e -D < y2(x) < y1(x) < 0, para 0 ≤ x ≤ W.;Para cada caso de teste de saída imprima uma linha com um número racional que representa a profundidade d que deve ser permitido à ACM cavar o pedaço de terra, de modo que eles peguem uma área de minerais a partir da camada do meio no perfil exato A. O resultado deve ser saída como um número racional com exatamente cinco dígitos depois do ponto decimal, arredondado, se necessário.;True;9 / 10;272;170;62.50%
1298;Corrija o Labirinto;Grafos;5;"A fazenda de camarão usa um lago retangular construído como uma grade com linhas 2N e colunas 2N + 1 de células quadradas, para um dado inteiro N. Cada lado da célula tem um metro de comprimento. A lagoa tem exatamente (2N-1) x N barreiras de dois metros de comprimento, usado para isolar temporariamente seções menores dentro da lagoa para criação de diferentes tipos de camarão. As barreiras têm os seus pontos médios fixados precisamente nas coordenadas inteiro (a, b), para todo 0 <a <2N e 0 <b <2N + 1, onde a e b são ímpares, ou pares.
                
                    ​​Cada barreira pode ser girada em torno do seu ponto central para alterar a configuração do tanque, no entanto, sendo girada, uma barreira muda entre apenas duas posições possíveis, sempre sendo estas posições paralelas aos lados da lagoa, vertical ou horizontal. A parte esquerda da figura abaixo mostra uma configuração de tanque, com N = 3.
                    ​

                

                
                    
                    No final de cada temporada a lagoa é fechada para manutenção e limpeza. Em seguida, deve ser reconfigurada para que uma máquina especial possa varrer o chão da lagoa. A máquina inicia o seu trabalho na célula superior esquerda, e precisa passar por todas as células exatamente uma vez, terminando na célula inferior esquerda. A parte direita da figura mostra uma reconfiguração tal, onde seis barreiras foram trocados. Para este exemplo, porém, quatro chaves de barreira seriam suficientes.
                
                    Você deve escrever um programa que, dada uma configuração de lagoa, determina o número mínimo de interruptores de barreira necessários para reconfigurar a lagoa, conforme especificado acima. Existe sempre, pelo menos, uma maneira possível para reconfigurar o tanque de acordo com a especificação.";Cada caso de teste consiste de diversas linhas. A primeira linha contém um inteiro N que indica que a lagoa tem 2N linhas 2N + 1 colunas ( 1 ≤ N ≤ 300). Cada uma das próximas 2N - 1 linhas contém uma string de N caracteres descrevendo a orientação das barreiras. Na enésima (i-th) linha, o enésimo (j-th) caractere indicata a orientação da barreira cujo ponto central tem coordenadas (i, 2j - 1) se i for ímpar, ou (i, 2j) caso i for par, para i = 1, 2,..., 2N - 1 e j = 1, 2,..., N. O caracter é a letra maiúscula 'V' se a orientação for vertical ou a letra maiúscula 'H' se ela for horizontal.;Para cada caso de teste imprima uma linha com um número inteiro que representa o número mínimo de interruptores de barreira necessárias para reconfigurar o tanque conforme especificado.;True;5 / 10;166;97;58.43%
1299;Jogo de Mosaicos;Paradigmas;8;"Jogo de mosaicos ou de ladrilhos é um jogo para dois jogadores, jogado sobre uma placa rectangular na forma de uma tabela de R linhas e C colunas de  células quadradas chamados mosaicos. No início do jogo, alguns dos quadrados podem ser pintados de preto e o restante permanece branco. Em seguida, o jogador 1 e jogador 2 alternam jogadas e o primeiro que não pode fazer um movimento válido perde o jogo. O primeiro movimento do jogo é feito por um jogador e consiste na escolha de um ladrilho branco  escrevendo o número do 1 nele. Depois disso, cada movimento subsequente i consiste em escrever o número i em um azulejo branco não utilizado que é adjacente horizontalmente ou verticalmente (mas não na diagonal)  ao ladrilho numerado i - 1. Note que o jogador 1 sempre escreve números ímpares e jogador 2 sempre escreve números pares.
                    
                    ​A figura a seguir mostra três exemplos possíveis de configurações de uma placa com R = 3 e C = 4, durante um jogo. À esquerda ela mostra a configuração inicial. No centro, mostra um estado intermediário, onde as células em cinza marca os movimentos possíveis para o jogador 2. E à direita mostra a configuração quando o jogo é ganho pelo jogador 2, que escolheu o movimento apropriado. 

                

                
                    Sua tarefa é escrever um programa que, dada a configuração inicial do tabuleiro, determina qual jogador irá ganhar, se ambos jogarem de maneira perfeita.";Cada caso de teste é descrito utilizando várias linhas. A primeira linha contém dois inteiros R e C que representam respectivamente o número de linhas e o número de colunas do tabuleiro (1 ≤ R, C ≤ 50). A enésima (i-th) das próximas R linhas contém uma string Bi de C caracteres que descreve a enésima (i-th) linha do tabuleiro inicial. O enésimo (j-th) caracter de Bi é ou `.' (ponto) ou a letra maiúscula 'X', representando que o ladrilho na linha i e coluna j é respectivamente branco ou preto. Dentro de cada caso de teste pelo menos um dos ladrilhos ou mosaicos é branco.;Para cada caso de teste imprima uma linha com um inteiro que representa o número do jogador (1 ou 2) que vai ganhar o jogo, se ambos jogarem de maneira perfeita.;True;8 / 10;111;55;49.55%
1300;Horas e Minutos;Ad-Hoc;2;"Heidi tem um relógio analógico discreto com a forma de um círculo, como o mostrado na figura ao lado. Dois ponteiros giram em torno do centro do círculo, indicando as horas e minutos. O relógio tem 60 marcas colocadas em torno do seu perímetro, com a distância entre cada uma das marcas consecutivas sendo constante.

                
                    O ponteiro dos minutos se move de sua marca atual para o próximo exatamente uma vez a cada minuto. Por sua vez, o ponteiro das horas se move de sua marca atual para a próxima exatamente uma vez a cada 12 minutos, de modo que avança cinco marcas a cada hora.

                
                    Consideramos que os dois ponteiros movem-se discretamente e instantaneamente, o que significa que eles estão sempre posicionados exatamente sobre uma das marcas e nunca entre as marcas.

                
                    À meia-noite ambos os ponteiros alcançam ao mesmo tempo a marca no topo, o que indica zero horas e zero minutos. Após exatamente 12 horas ou 720 minutos, ambos os ponteiros alcançam a mesma posição novamente, e este processo é repetido várias vezes. Note que quando o ponteiro dos minutos se move, o ponteiro das horas pode não se mover, no entanto, quando o ponteiro das horas se move, o ponteiro dos minutos também se move.

                
                    Heidi gosta de geometria, e ela gosta de medir o ângulo mínimo entre os dois ponteiros do relógio em diferentes momentos do dia. Ela tem anotado algumas medidas, mas depois de vários anos e uma longa lista, ela notou que alguns ângulos se repetiam enquanto alguns outros nunca apareciam. Por exemplo, a lista de Heidi indica que tanto às três horas quanto às nove horas o ângulo mínimo entre os dois ponteiros é de 90 graus, enquanto um ângulo de 65 graus não aparece na lista. Heidi decidiu verificar, para qualquer número inteiro A entre 0 e 180, se existe pelo menos uma vez no dia um ângulo mínimo entre os dois ponteiros do relógio com exatamente A graus. Ajude Heide com um programa que responda a esta pergunta.";Cada caso de teste é descrito usando uma única linha. A linha contém um número inteiro A (0 ≤ A ≤ 180) que representa o ângulo a ser verificado.;Para cada caso de teste uma linha contendo um caracter. Se existe pelo menos uma hora do dia de tal forma que o ângulo mínimo entre os dois ponteiros com exatamente A graus, então escreva a letra maiúscula 'Y'. Caso contrário escreva a letra maiúscula 'N'.;True;2 / 10;3508;2346;66.88%
1301;Produto do Intervalo;Estruturas e Bibliotecas;6;"É normal sentir-se preocupado e tenso o dia antes de uma competição de programação. Para relaxar, você saiu para beber com alguns amigos em um pub. Para manter sua mente afiada para o dia seguinte, você decidiu jogar o seguinte jogo. Para começar, seus amigos vão dar-lhe uma seqüência de N inteiros X1, X2, ..., XN. Em seguida, haverá K rodadas; a cada rodada, seus amigos vão emitir um comando, que pode ser:

                
                    um comando de alteração, quando seus amigos querem mudar um dos valores na seqüência, ou
                    um comando de produto, quando seus amigos lhe dar dois valores I, J e perguntar-lhe se o produto XI x XI+1 x ... x XJ-1 x XJ é positivo, negativo ou zero.
                    ​
                


                
                    Uma vez que você está em um pub, foi decidido que a pena para uma resposta errada é beber um copo de cerveja. Você está preocupado como isso poderia afetá-lo negativamente na competição do dia seguinte, e você não quer verificar se a teoria do pico de Ballmer é correta. Felizmente, seus amigos lhe deram o direito de usar o seu notebook. Uma vez que você confia mais nas suas habilidades de codificação do que na sua matemática, você decidiu escrever um programa que o ajudasse no jogo.";Cada caso de teste é descrito usando várias linhas. A primeira linha contém dois inteiros N e K respectivamente, indicando o número de elementos na seqüência e o número de rodadas do jogo (1 ≤ N, K ≤ 105). A segunda linha contém N inteiros Xi que representam os valores iniciais da sequência (-100 ≤ Xi ≤ 100 para i = 1, 2, ..., N). Cada uma das próximas K linhas descreve um comando e começa com uma letra maiúscula 'C' ou 'P'. Se a letra é 'C', a linha descreve um comando de mudança, e a letra é seguida por dois inteiros I e V,indicando que os XI devem receber o valor V (1 ≤ I ≤ N e -100 ≤ V ≤ 100). Se a letra for 'P', a linha de comando descreve um produto, e a letra é seguida por dois números inteiros I e J, indicando que o produto a partir de XI até XJ, inclusive deve ser calculado (1 ≤ I ≤ J ≤ N). Dentro de cada teste há pelo menos um comando de produto.;Para cada caso de teste imprima uma linha com uma string que representa o resultado de todos os comandos de produto do caso de teste. O caracte i da string representa o resultado do enésimo (i-th) comando de produto. Se o resultado do comando for positivo, o caractere deve ser '+' (mais), se o resultado for negativo, o caractere deve ser '-' (menos), se o resultado é zero, o caractere deve ser '0' (zero) .;False;6 / 10;3673;1207;32.86%
1302;Juntando Casais;Grafos;7;"Regulamentos de tráfego aéreo na Nlogônia exigem que cada cidade deve registrar exatamente um vôo de saída para outra cidade. Os passageiros podem usar esse vôo somente na direção registrada, ou seja, pode haver um vôo registrado da cidade X para a cidade Y e nenhum vôo registrado da cidade Y para a cidade X. Assim, o número de vôos registados é igual ao número de cidades. Esta regra, como se pode imaginar, torna as viagens aéreas um pouco complicadas, mas a tradição e uma decisão forte da Rainha torna qualquer alteração difícil. Além disso, algumas empresas até tem lucro por causa dos problemas causados ​​pela regra.
                
                    A Associação para a Correspondência de Casal (ACM) é a criação de um novo serviço para ajudar os clientes a encontrarem as suas  almas gêmeas: o Programa Internet para conexão de Casais (ICPC). O serviço consiste em calcular o número mínimo total de vôos que um casal precisa tomar para se encontrarem (talvez em uma cidade onde nenhum deles viva). Assumindo que as cidades de partida do casal são  A  e  B , a agência vai tentar encontrar uma cidade  C  tal que  C  é acessível por transporte aéreo de ambos  A  e  B , e a soma do número de voos necessários para ir de  A  para  C  e do número de voos necessárias para ir de  B  para  , C  é minimizado. Note que  C  pode ser igual a  A  ou B ou igual a ambos. Você terá a lista de todos os voos disponíveis e uma lista de consultas consistindo de pares de cidades onde os indivíduos de cada casal vivem. Para cada consulta, você deve calcular o número mínimo total de vôos que são necessárias para que eles se encontram.";Cada caso de teste é descrito usando várias linhas. A primeira linha contém um inteiroN representando o número de cidades ( 2 ≤ N ≤ 105). Cidades são identificadas por diferentes inteiros de 1 até N. A segunda linha contém N inteiros Fi, onde Fi indica que o vôo de saida registrado da cidade i é para a cidade Fi ( 1 ≤ Fi ≤ N, Fi = i for i = 1, 2,..., N). A terceira linha contém um inteiro Q representando o número de consultas ( 1 ≤ Q ≤ 105). Cada uma das próximas Q linhas descreve uma consulta com dois inteiros A e B indicando a cidade inicial do casal( 1 ≤ A, B ≤ N). Em cada caso de teste, se for possível viagar por via aérea da cidade X até a cidade Y, o número máximo de vôos necessários deverá ser 104.;"Para cada caso de teste imprima Q linhas. Na enésima ( i-th ) linha escreva um inteiro com a resposta para a enésima (i-th) consulta. Se o casal correspondente pode se encontrar através de viagens aéreas, escreva o número mínimo total de vôos que o casal deve tomar para encontrar-se. Se for impossível para o casal encontrar-se por viagens aéreas, escreve o número ""-1"".";False;7 / 10;452;174;38.50%
1303;Spurs Rocks;Estruturas e Bibliotecas;8;"O San Antonio é o time da cidade na NBA. Já foi algumas vezes campeão de sua conferência e revelou vários excelentes jogadores. 
                
                    Em um campeonato de basquete os times jogam todos entre si em turno único. A vitória vale dois pontos e a derrota vale um ponto (não há empates no basquete). Havendo empates na pontuação do campeonato ﬁca na frente o time com melhor “cesta average” que é dado pela razão entre o número de pontos marcados pelo time dividido pelo número de pontos recebidos (na improvável hipótese de um time vencer todos os jogos do campeonato sem levar cestas seu cesta average é dado pelo número de pontos marcados). Persistindo o empate, leva vantagem quem marcou mais pontos. Ainda havendo empate, o time com menor número de inscrições na liga ﬁca na frente. 
                
                    Sua tarefa neste problema é fazer um programa que recebe os resultados dos jogos de um campeonato e imprime a classiﬁcação ﬁnal.";São dadas várias instâncias. Para cada instância é dada o número 0 ≤ n ≤ 100 de times no campeonato. O valor n = 0 indica o ﬁm dos dados. A seguir vêm n (n−1) / 2 linhas indicando os resultados das partidas. Em cada linha são dados quatro inteiros x, y, z e w. Os inteiros x e z pertencem ao conjunto {1, 2, . . . , n} e representam os números de inscrição dos times na liga. Os inteiros y e w são, respectivamente, os números de pontos do time x e do time z na partida descrita.;"Para cada instância solucionada, você deverá imprimir um identiﬁcador ""Instancia h"" em que h é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte, deve ser impressa a permutação dos inteiros 1 a n da classiﬁcação do campeonato.   Obs: Um espaço em branco deve ser impresso entre cada um desses inteiros e uma linha em branco deve deve ser impressa entre as saídas de dois casos de teste.";False;8 / 10;5269;1054;20.00%
1304;Velocidade Média;Matemática;6;Você comprou um carro para dirigir de Waterloo para uma cidade grande. O odômetro do seu carro está quebrado, então você não pode medir a distância. Mas o velocímetro e o Cruise Control (sistema que mantém a velocidade, previamente programada, do veículo constante) estão funcionando, de modo que o carro pode manter uma velocidade constante, que pode ser ajustada de tempos em tempos em resposta aos limites de velocidade, engarrafamentos ou filas nas fronteiras. Você tem um cronômetro e anota o tempo decorrido toda vez que a velocidade muda. De vez em quando você se pergunta: “O quão longe eu estou?”. Para resolver este problema, você deve escrever um programa para ser executado em seu computador portátil no banco do passageiro.;A entrada padrão contém várias linhas de entrada: Cada alteração de velocidade é indicada por uma linha específica com o tempo decorrido desde o início da viagem (hh:mm:ss), seguido da nova velocidade em km/h. Cada consulta é indicada por uma linha que contém o tempo decorrido. No início da viagem o carro está parado. O tempo decorrido é dado em ordem não decrescente e há, no máximo, uma variação de velocidade por linha de entrada.;Para cada consulta na entrada padrão, você deve imprimir uma linha dando o tempo e a distância percorrida, no formato abaixo, utilizando o arredondamento padrão da linguagem.;False;6 / 10;2013;781;38.80%
1305;Arredondamento por Valor de Corte;Strings;3;"Frequentemente, ao arredondar um número real para um inteiro nós o fazemos para cima se a parte fracionária é maior ou igual a 0,5 e para baixo se a parte fracionária é menor do que 0,5. Neste problema você recebe uma string num contendo um número real e uma string cutoff contendo um valor de corte. A string cutoff será formatada exatamente como ""0.####"", onde cada '#' representa um dígito ('0'-'9'). Pelo menos um dos dígitos da parte fracionária de cutoff será diferente de zero. Sua tarefa é arredondar num para cima se a parte fracionária é maior do que o valor de corte e para baixo caso contrário, devolvendo o resultado como um inteiro. Para evitar problemas com imprecisão de representação em ponto flutuante a parte fracionária de num não será exatamente igual a cutoff. Assim, o método tradicional de arredondamento descrito na frase inicial seria representado por cutoff = ""0.5000""";"A entrada contem vários casos de teste. Cada caso de teste é composto por duas linhas. A string num está na primeira linha e a string cutoff fica na segunda linha. A string num é formada por 1 ou mais dígitos ('0' a '9') com um ponto decimal opcional ('.'). A string num tem de 1 a 10 caracteres. A string cutoff é formatada exatamente como ""0.####"", onde cada '#' representa um dígito ('0' a '9'). Além disso, a parte fracionária de num NÃO será exatamente igual a cutoff.

                    O final da entrada é determinado por EOF.";Para cada caso de teste da entrada seu programa deve gerar uma linha de saída somente com a parte inteira de num arredondada de acordo com o valor de corte em cutoff.;False;3 / 10;2692;1470;54.61%
1306;Numerando Estradas;Matemática;3;"No meu país, as ruas não têm nomes, cada uma delas tem apenas um número como nome. Estes números devem ser únicos, mas nem sempre este é o caso. O governo local aloca alguns inteiros para citar as estradas e, em muitos casos, o número de inteiros alocados é menor do que o número total de estradas. Nesse caso, para que os nomes das estradas sejam único, alguns sufixos de caracteres únicos são utilizados. Assim, as estradas são nomeadas como 1, 2, 3, 1A, 2B, 3C etc. É claro que o número de sufixos também é sempre limitado a 26 (A, B, …, Z). Por exemplo, se existem 4 estradas e dois inteiros diferentes são alocados para nomear, então algumas declarações de nomes possíveis podem ser:

                
                    

                        
                            
                                
                                    1, 2, 1A, 2B
                                
                            
                            
                                
                                    1, 2, 1A, 2C
                                
                            
                            
                                
                                    3, 4, 3A, 4A
                                
                            
                            
                                
                                    1, 2, 1B, 1C
                                
                            
                        
                    
                
                
                    Dado o número de estradas (R) e os números de inteiros alocados para a nomeação (N), o seu trabalho é determinar o número mínimo de sufixos diferentes necessários (de todas as nomeações possíveis) para nomear as ruas, assumindo que não existam duas ruas com o mesmo nome.";"O arquivo de entrada pode conter até 10002 linhas de entrada. Cada linha contém dois inteiros R e N (R < 10001, 0 < N). Aqui R é o número total de ruas a serem nomeadas e N indica o número de inteiros alocados para a nomeação. A entrada termina com ""0 0"" que não deve ser processado.";Para cada linha de entrada, você de produzir uma linha de saída. Esta linha contém o número de série de saída, seguido por um inteiro D que indica o número mínimo de sufixos necessários para nomear as ruas. Se não é possível nomear todas as ruas, você deve imprimir “impossible” no lugar (sem as aspas).;True;3 / 10;2611;1276;48.87%
1307;Tudo o que Você Precisa é Amor;Matemática;5;"""All you need is love. All you need is love.
                        All you need is love, love... love is all you need.""
                        The Beatles
                    
                
                Foi inventado um novo dispositivo poderoso pela Beautifull Internacional Machines Corporation chamado de ""Máquina do amor!"". Dada uma string feita de dígitos binários, a máquina do amor responde se isto é feito somente de amor, ou seja, se tudo o que você irá precisar para construir aquela string for somente amor. A definição de amor para a Máquina do amor é outra string de dígitos binários, fornecida por um operador humano. Vamos supor que nós temos uma string L que representa ""love"" e forneçamos uma string S para a máquina do amor. Diremos então que tudo o que você precisa é amor para construir S se pudermos repetidamente subtrair L de S até que sobre apenas L. A subtração definida aqui é a mesma subtração aritmética binária na base 2. Por definição é fácil de ver que L > S (em binário), então S não é feito de amor. Se S = L então S é obviamente feito de amor.
                
                Por exemplo, suponha S = ""11011"" e L = ""11"". Se repetidamente subtrairmos L de S, obteremos: 11011, 11000, 10101, 10010, 1111, 1100, 1001, 110, 11. Portanto, dado este L, tudo o que você necessita é amor para construir S. Devido a algumas limitações da Máquina do Amor, não será possível lidar com strings com zero à esquerda. Por exemplo ""0010101"", ""01110101"", ""011111"" etc. são string Inválidas. Strings que contenham apenas um dígito também são strings inválidas (isto é outra limitação).
                
                Sua tarefa para este problema é: dadas duas strings binárias válidas, S1 e S2, veja se é possível ter uma string L válida tal que ambas, S1 e S2 possam ser feitas apenas de L (i.e. dadas duas strings válidas S1 e S2, indique se existe pelo menos uma string L válida tal que ambas S1 e S2 sejam feitas apenas de L). Por exemplo, para S1 = 11011 e S2 = 11000, nós podemos ter L = 11 tal que S1 e S2 são feitas ambas somente de L (como pode ser visto no exemplo abaixo).";A primeira linha de entrada contém um valor inteiro positivo N (N < 10000) que indica o número de casos de teste. Então, 2*N linhas vem a seguir. Cada par de linhas consiste de um caso de teste. Cada par de linhas contém respectivamente S1 e S2 que serão inseridas como entrada para a máquina do amor. Nenhuma string conterá menos do que 2 ou mais do que 30 caracteres. Você pode assumir que as strings de entrada serão válidas e estarão de acordo com as regras acima.;"Para cada par de strings, seu programa deve imprimir uma das seguintes mensagens:
                
                    Pair #p: All you need is love!
                    Pair #p: Love is not all you need!
                
                    Onde p representa o número do par de entrada (que inicia em 1). Seu programa deve imprimir a primeira mensagem no caso de existir pelo menos uma string L válida tal que ambas strings S1 e S2 possam ser feitas somente de L. Caso contrário, imprima a segunda linha.";False;5 / 10;2738;1427;52.12%
1308;Guerreiros Etruscos Nunca Jogam Xadrez;Matemática;4;"Uma tropa de guerreiros etruscos está organizada da seguinte forma. Na primeira linha, há apenas um guerreiro; a segunda fila contém dois guerreiros; a terceira fila contém três guerreiros, e assim por diante. Em geral, cada linha  i contém i guerreiros.

                
                    Nós sabemos o número de guerreiros etruscos de uma tropa dada. Você tem que calcular o número de linhas em que eles estão organizados.

                 
                    Favor notar que podem haver guerreiros restantes (isso pode acontecer se eles não são suficientes para formar a próxima linha). Por exemplo, três guerreiros estão organizados em duas linhas. Com seis guerreiros você pode formar três linhas, mas você também pode formar três linhas com 7, 8 ou 9 guerreiros.";A primeira linha da entrada contém um inteiro que indica o número de casos de teste. Cada caso de teste contém um único inteiro N (0 ≤ N ≤ 1018), indicando o número de guerreiros etruscos.;Para cada caso de teste, o resultado deve conter um único número inteiro que indica o número de linhas que podem ser formadas.;False;4 / 10;4039;1505;37.26%
1309;Formatação Monetária;Matemática;3;"Frequentemente é necessário escrever valores monetários em um formato padrão.

                    Decidimos a formatação de quantidades na seguinte forma: 

                       1. O montante deve começar com '$';
                       2. A quantidade deve terminar com um ponto decimal e exatamente dois dígitos seguintes;
                       3. Os dígitos à esquerda do ponto decimal devem ser separador em grupos de três por vírgulas.

                
                    Sua tarefa neste problema é criar um programa que, recebendo dois valores inteiros dólares e centavos retorne a String formatada corretamente.";A entrada é composta por vários casos de teste. Cada caso de teste é composto por dois valores inteiros, dolares (0 ≤ dolares ≤ 2 * 109) e centavos (0 ≤ centavos ≤ 99), respectivamente.;Para cada caso de teste imprima a string formatada de acordo com os regras de formatação.;False;3 / 10;3905;1819;46.58%
1310;Lucro;Paradigmas;2;"George é dono de um circo e traz seu circo de cidade em cidade. Ele sabe o quanto de receita ele pode obter em qualquer dia de uma série de dias em uma cidade. Ele também sabe o custo constante diário para manter o seu circo. George quer trazer seu circo à cidade para a série de dias que resulta em maior lucro.
                
                    Por exemplo, se em uma determinada cidade o custo for de $ 20 por dia em um exemplo com 6 dias, sendo que as receitas previstas por dia são {$ 18, $ 35, $ 6, $ 80, $ 15, $ 21}, George pode obter o máximo de lucro trazendo o seu circo para esta cidade do dia 2 ao dia 4. Desta forma ele pode lucrar (35 + 80 + 6) - (3 * 20) = $ 61.
                
                    Nota: A série de dias que George traz seu circo para a cidade pode ser entre 0 e o número máximo de dias, inclusive. Obviamente, se George traz seu circo para a cidade por 0 dias, ele obtém $ 0 de lucro.";A entrada contém muitos casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 50) que representa o número de dias que George pode trazer o seu circo para a cidade. A segunda linha do caso de teste contém um número inteiro custoPorDia (0 ≤ custoPorDia < 1000) que representa o custo em manter o circo na cidade. Segue N linhas (uma por cada dia), contendo cada um um inteiro receita (0 ≤ receita < 1000) representa a receita que o circo obtem em cada dia. O final da entrada é indicado por EOF (fim de arquivo).;Para cada caso de teste imprima o máximo de dinheiro que George pode ganhar trazendo o seu circo para a cidade de acordo com o exemplo abaixo.;False;2 / 10;5380;2750;51.12%
1311;Companheiros de Exército;Ad-Hoc;6;"Nlogonia está lutando uma guerra implacável contra seu país vizinho Cubicônia. O General Chefe do Exército da Nlogônia decidiu atacar o inimigo com uma formação linear de soldados, que avançariam juntos até conquistar o país vizinho. Antes de lutar, o General Chefe ordenou que cada soldado na linha de ataque, além de proteger a si mesmo e atacar, deveria também proteger seus dois vizinhos (mais próximos) na linha, se tais vizinhos existissem (porque o soldado mais a esquerda não possui um vizinho mais a esquerda e o soldado mais a direita não possui um vizinho mais a direita). O General Chefe também disse aos soldados que proteger seus companheiros era muito importante para previnir que a linha de ataque fosse quebrada. Tão importante que, se o companheiro a esquerda ou a direita de um soldado é morto, então o próximo soldado vivo a esquerda ou a direita daquele soldado, respectivamente, deveria se tornar seu companheiro.
                
                    A batalha é violenta, e muitos soldados na linha de ataque estão sendo mortos por tiros, granadas e bombas. Mas seguindo as ordens do General Chefe, imediatamente após tomar conhecimento das baixas na linha de ataque, a divisão de sistemas de informação do Exército tem que informar aos soldados quem são seus novos companheiros.
                
                    ​Serão dados o número de soldados na linha de ataque, e uma sequencia de relatórios de baixa. Cada relatório de baixa descreve um grupo de soldados contíguos na linha de ataque que acabaram de ser mortos na batalha. Escreva um programa que, para cada relatório de baixa, imprime os novos companheiros formados.";"Cada caso de teste é descrito usando várias linhas. A primeira linha da entrada contém dois inteiros S e B representando respectivamente o número de soldados na linhas de ataque, e o número de relatórios de baixa (1 ≤ B ≤ S ≤ 105). Os soldados são identificados por números diferentes de 1 até S, de acordo com usas posições na linha de ataque, sendo que 1 o soldado mais a esquerda e S o soldado mais a direita. Cada uma da B linhas seguintes descrevem um relatório de perda usando dois inteiros L (esquerda) e R (direita), significando que os soldados de L até R foram mortos (1 ≤ L ≤ R ≤ S). Você pode assumir que até o momento aqueles soldados estavam vivos e acabaram de ser mortos.
                
                    ​O último caso de teste é seguido por uma linha contendo dois zeros.";Para cada caso de teste imprima B+1 linhas. Na i-ésima linha da saída escreva os novos companheiros formados por remover da linha de ataque os soldados que acabaram de ser mortos de acordo com o i-ésimo relatório de baixa. Ou seja, para cada relatório de baixa 'L R', imprima o primeiro soldado sobrevivente a esquerda de L, e o primeiro soldado sobrevivente a direita de R. Para cada direção, imprima o caractere '*' (asterisco) se não existe soldado sobrevivente naquela direção. Imprima uma linha contendo um único caractere '-' (hifen) após cada caso de teste.;False;6 / 10;901;437;48.50%
1312;Empilhamento de Bolas;Paradigmas;6;"O canal de TV XYZ está desenvolvendo uma novo game show, onde o competidor tem que fazer algumas escolhas de modo a obter um prêmio. O jogo consiste de uma pilha triangular de bolas, cada uma delas tendo um valor inteiro, como mostrado no exemplo a seguir.

                ​

                
                    O competidor deve escolher quais bolas ele irá levar e seu prêmio é a soma dos valores destas bolas. Entretanto, o competidor pode levar uma bola apenas se ele também levar todas as bolas diretamente acima dela. Isto pode requerer levar bolas adicionais usando a mesma regra. Note que o competidor pode escolher não levar bola alguma, caso no qual o prêmio é zero.

                
                    O diretor do programa de TV está preocupado a respeito do prêmio máximo que um competidor pode obter dada uma pilha. Como ele é seu chefe e ele não sabe como responder essa questão, ele atribuiu esta tarefa a você.";"Cada caso de teste é descrito usando várias linhas. A primeira linha contém um inteiro N representando o número de linhas da pilha (1 = N = 1000).

                
                    A i-ésima das próximas N linhas contém i inteiros Bij(-105 ​≤ Bij ≤ 105 e 1 ≤ j ≤ i ≤ N); o número Bij é o valor da j-ésima bola na i-ésima linha da pilha (a primeira linha é a mais ao topo, e em cada linha a primeira bola é a mais a esquerda).

                
                    O último caso de teste é seguido por uma linha contendo um zero.";Para cada caso de teste imprima uma linha com um inteiro representando o prêmio máximo que um competidor pode fazer a partir da pilha.;True;6 / 10;1119;433;38.70%
1313;Dicionário Portuñol;Strings;8;"Portuñol é um idioma especial que foi naturalmente desenvolvido na América Latina. Como quase metade da América Latina fala Português e quase metade fala Espanhol (Español), a mistura de ambos os idiomas é natural.

                
                    Cada palavra em Portuñol é construída tomando um prefixo não-vazio de um palavra em Português e um sufixo não-vazio de uma palavra em Espanhol, e concatenando-os. Um prefixo de uma palavra é qualquer palavra que possa ser obtida apagando zero ou mais caracteres da sua extremidade direita. Um sufixo de uma palavra é qualquer palavra que possa ser obtida apagando zero ou mais caracteres da sua extremidade esquerda. O nome do prórpio idioma tem origem tomando um prefixo da palavra ""Português"" (Portu) e um sufixo da palavra ""Español"" (ñol), e concatenando-os.

                
                    É claro, que nem toda maneira possível de combinar duas palavras resultará em algo que faz sentido, ou nem mesmo pronunciável, mas isso não é importante. Nós queremos que você escreva um programa para contar o número de diferentes palavras em Portuñol.

                
                    Será dado a você dois conjuntos não-vazios de palavras para testar o seu programa. O primeiro conjunto representará as palavras em Português e o segundo conjunto representará as palavras em Espanhol. Você precisa calcular o número de palavras diferentes em Portuñol que podem ser construídas usando as regras de prefixo e sufixo descritas acima. Note que a mesma palavra pode ser construída de várias maneiras, mas ela precisa ser contada apenas como uma. Também note que os conjuntos de entrada são apenas para testar o seu programa, então eles não precisam necessariamente ser feitos de palavras atuais do Português ou do Espanhol.";"Cada caso de teste é descrito usando várias linhas. A primeira linha contém dois inteiros P e S representando respectivamente o número de palavras em Português e o número de palavras em Espanhol. (1 ≤ P, S ≤ 1000). Cada uma das próximas P linhas contém uma palavra em Português, e cada uma das próximas S linhas contém uma palavra em Espanhol. Cada palavra é uma cadeia não-vazia de no máximo 1000 caracteres. Cada caracteres é uma das 26 letras minúsculas (de 'a' até 'z'). Você pode assumir que dentro de cada caso de teste duas palavras em Português não são iguais, e que a soma dos comprimentos de todas as palavras em Português é no máximo 105. O mesmo se aplica às palavras em Espanhol.

                
                    O último caso de teste é seguido por uma linha contendo dois zeros.";Para cada caso de teste imprima uma linha contendo um inteiro representando o número de diferentes palavras que podem ser construídas concatenando-se um prefixo não-vazio de uma palavra no primeiro conjunto (palavras em Português) e um sufixo não-vazio de uma palavra no segundo conjunto (palavras em Espanhol).;False;8 / 10;365;135;36.99%
1314;Labirintos de Cerca Viva;Grafos;9;"A Rainha da Nlogônia é uma fã de labirintos, e então os arquitetos do reino construiram vários labirintos em volta do palácio da Rainha. Todo labirinto construido para a Rainha é feito de salas conectadas por corredores. Cada corredor conecta um par diferente de salas distintas e pode ser atravessado em ambas as direções.

                
                    A Rainha ama passear pelas salas e corredores do labirinto nos finais de tarde. Seus serventes escolhem um desafio diferente todo dia, que consiste em encontrar um caminho simples de uma sala inicial até uma sala final no labirinto. Um caminho simples é uma sequência de salas distintas tal que cada par de salas consecutivas é conectado por um corredor. Neste caso a primeira sala da sequência deve ser a sala inicial, e a última sala deve ser a sala final. A Rainha acha que um desafio é bom quando, dentre as rotas da sala inicial até a sala final, exatamente uma delas é um caminho simples. Você pode ajudar os serventes da Rainha a escolher um desafio que agrada a Rainha?

                
                    Para tal, escreva um programa que dados a descrição de um labirinto e uma lista de consultas definindo a sala inicial e a sala final, determina para cada consulta se aquela escolha é um bom desafio ou não.";"Cada caso de teste é descrito usando várias linhas. A primeira linha contém três inteiros R, C e Q representando respectivamente o número de salas do labirinto (2 ≤ R ≤ 104), o número de corredores (1 ≤ C ≤ 105), e o número de consultas (1 ≤ Q ≤ 1000). As salas são identificadas por inteiros de 1 até R. Cada uma das próximas C linhas descreve um corredor usando dois inteiros distintos A e B, indicando que existe um corredor conectando as salas A e B (1 ≤ A, B ≤ R). Após isso, cada uma das próximas Q linhas descreve uma consulta usando dois inteiros distintos S e T indicando respectivamente as salas inicial e final do desafio (1 ≤ S, T ≤ R). Você pode assumir que em cada caso de teste existe no máximo um corredor conectando cada par de salas, e não haverá duas consultas iguais.

                
                    O último caso de teste será seguido por uma linha contendo três zeros.";Para cada caso de teste imprima Q + 1 linhas. Na i-ésima linha escreva a resposta para a i-ésima consulta. Se as salas formam um bom desafio, então escreva o caractere 'Y' (maiúsculo). Caso contrário escreva o caractere 'N' (maiúsculo). Imprima uma linha contendo um único caractere '-' (hífen) depois de cada caso de teste.;False;9 / 10;873;294;33.68%
1315;Não tão Convexo;Geometria Computacional;9;"Pregos e Elásticos. Este é um nome sugestivo de um jogo que é disputado por um grupo de crianças (todas elas, filhas de professores de geometria). As crianças determinam um número de pregos em um plano de madeira, colocados aleatoriamente. Então, elas escolhem um dos pregos para ser a origem, e um número B de elásticos. O desafio é usar todos B elásticos para envolver os pregos, de modo que: (i) cada elástico envolve um subconjunto de pregos; (ii) todos os pregos estão dentro de um invólucro; (iii) invólucros não sobrepõe uns aos outros, exceto o prego de origem, que é tocado por todos os elásticos; (iv) os elásticos devem formar invólucros que são polígonos convexos, com no mínimo três cantos; e (v) a área total dentro de um invólucro é a maior de todas as formas possíveis de envolver os pregos. Uma instância do jogo é mostrada na Figura 1.

                

                Figura 1: Um jogo com 19 pregos e 2 elásticos.";"Seu programa deve resolver diversas instâncias do jogo. Cada descrição do jogo inicia com uma linha contendo dois inteiros B e N, indicando, respectivamente, o número de elásticos e o número de pregos ( 2 ≤ B ≤ 50 e 2B + 1 ≤ N ≤ 101 ). As seguintes N linhas descrevem a posição dos pregos, cada linha contendo dois inteiros X e Y ( -10000 ≤ X, Y, ≤ 10000 ). A origem é o primeiro prego na entrada. O final da entrada é indicado por B = N = 0.

                
                    Em todas as instâncias da entrada:

                
                    Não há dois pregos no mesmo ponto;
                    Não há três pregos na mesma linha;
                    O prego de origem não pertence ao fecho convexo de todos os pregos (isto é, se você usa um elástico para envolver todos os pregos, ele não toca o prego de origem);";Para cada jogo na entrada, seu programa deve imprimir uma linha na saída, descrevendo a menor área total dentro dos invólucros. A área deve ser impresa como um número real, com duas casas decimais de precisão, e o último dígito deve ser arrredondado. A entrada não conterá casos de teste onde as diferenças de arredondamento serão significantes.;True;9 / 10;164;58;35.37%
1316;Compra Livre de Impostos;Matemática;8;"Pedro viajou para a Europa para participar da Olimpíada Internacional de Informática e está voltando para casa. Já que todos os seus amigos pediram para que ele trouxesse alguns presentes, ele comprou dois grandes pacotes de chocolate (um do Mindt e um do Lilka). Cada um desses pacotes contém em certo número de pequenos chocolates. Comprar os dois grandes pacotes foi bem menos caro que comprar as caixas individuais dos mesmos. Em casa, Pedro tinha algumas caixas que guardou de outras viagens. Pedro pretende distribuir os chocolates que recém comprou nessas caixas, para dá-las a seus amigos.
                
                    Assim que Pedro começou a encher as caixas, ele percebeu um grande problema: já que ele tem dois tipos de chocolates, se ele misturar chocolates de diferentes tipos nas caixas, o amigo que receber a caixa perceberá o truque de Pedro para economizar dinheiro, e ficará magoado com ele.
                
                    Você deve ajudar o pobre Pedro a distribuir os chocolates nas caixas de maneira a que cada caixa esteja cheia e com apenas um tipo de chocolate. Um certo número de pedaços podem acabar sobrando (Pedro ficará com eles se for o caso).";O arquivo de entrada contém vários casos de teste. Cada caso consiste em três linhas. A primeira linha contém dois inteiros M e L que indicam respectivamente o número de chocolates Mindt e Lilka que Pedro comprou, sendo (0 ≤ M, L ≤ 1000). A próxima linha contém um inteiro N representando o número de caixinhas que Pedro tem, sendo (N ≤ M + L). A terceira linha contém N inteiros indicando a capacidade Ci (Ci ≥ 0), onde Ci é o número de chocolates necessário para encher a caixa i. O final da entrada é indicado por M = L = 0.;"Para cada caso de teste o programa deverá produzir uma linha de saída. Se for possível distribuir os chocolates como foi relatado na declaração do problema, imprima o número de caixas a ser preenchido com chocolate Mindt, seguido de espaço, seguido pela lista do número de caixas, em ordem ascendente. Cada número de caixa na lista deve ser seguido de espaço. Se for impossível distribuir os chocolates, imprima ""Impossible to distribute"". Se existem mais que uma solução, imprima qualquer uma. ";False;8 / 10;209;70;33.49%
1317;Eu Odeio SPAM, Mas Algumas Pessoas Amam;Grafos;6;"Hoje em dia, infelizmente, mensagens de SPAM estão ficando mais e mais comuns. Algumas delas têm efeito de multiplicação, já que pedem que repasses para teus amigos. Algumas mensagens de SPAM desejam boa sorte, outras, prometem que tornar-se-á rico, e outras apenas lhe lembram o quão importante é contar a seus amigos o quanto você se importa com suas amizades. Eis um exemplo de SPAM:
                
                       De: Alice
                       Para: Bob, Mary, Julia, Paul
                       Olá, este é um e-mail de boa sorte. Desejo que se torne milionário, mas 
                       isso depende de você. Se você:
                        * mandar esse e-mail para 10 pessoas você se ficará milionário
                        * mandar esse e-mail para 5 ou mais pessoas você ficará rico
                        * mandar esse e-mail para menos de 5 pessoas você será pobre
                       Como eu disse, depende de você. Escreve seu e-mail e seja rico! :-)

                        Alice
                

                
                    Pessoas normalmente reagem de dois modos diferentes quando recebem SPAM:
                
                    Eles descartam a mensagem imediatamente sem ao menos lê-la (eles odeiam SPAM);
                    Eles encaminham a mensagem para todos que conhecem (eles amam SPAM).
                

                
                    Para esse problema, nós assumiremos que todos amam SPAM, mas ninguém manda a mesma mensagem duas vezes. Cada mensagem de SPAM tem um efeito baseado no número de amigos que você manda as mensagens. Por exemplo: uma mensagem de SPAM poderá lhe dizer que ficarás pobre se mandares a mensagem para 5 amigos, mas serás rico se mandares para 10, e serás o mais rico do mundo se mandares para 20 amigos, e assim vai.

                
                    Consideraremos apenas as mensagens de SPAM similares ao exemplo acima. Mais especificamente, uma mensagem de SPAM definirá dois valores limiares T1 e T2 e três atribuidores A1, A2 e A3. Uma pessoa adquire um dos três valores dependendo do número de mensagens enviadas para aquele SPAM específico. Se a pessoa encaminha T mensagens e T < T1 então o atributo dele/dela é A1, se T1 ≤ T < T2 então o atributo dele/dela é A2, caso contrário o atributo dela é A3.

                
                    Lhe será dado os nomes de um grupo de pessoas, e para cada pessoa do grupo, um conjunto de amigos que ele/ela conhece o endereço de e-mail. Lhe será dado um conjunto distinto de mensagens de SPAM, e para cada mensagem de SPAM ela limita valores e atributos, e a informação sobre cada pessoa que iniciou a proliferação do SPAM. Você tem que escrever um programa que determine, para cada pessoa no grupo dado, quais atributos ele/ela adquiriu, baseado no SPAM encaminhado.

                
                    Você assumirá que o originador do SPAM tenha pelo menos um amigo (em outras palavras, ele/ela enviará pelo menos uma mensagem), e a pessoa não mandará para si mesma.";"Seu programa deverá processar vários casos de teste. A primeira linha do caso de teste contém um inteiro N indicando o número de pessoas no grupo (2 ≤ N ≤ 20). Na entrada a pessoa é identificada por um inteiro de 1 a N. As N linhas seguintes contêm cada, uma lista de amigos de cada pessoa (a linha i contém a lista de amigos da pessoa i). A lista de amigos da pessoa i descreve os amigos que a pessoa i conhece o endereço de e-mail, e consiste de uma lista de inteiros Fi (1 ≤ Fi ≤ N, Fi ≠ i) terminada pelo valor 0 (zero). Seguindo a lista de amigos vem a descrição das mensagens de SPAM (terá no máximo 100 mensagens). Cada descrição aparece em uma linha diferente. A descrição consiste de um inteiro P identificando a pessoa originadora do SPAM (2 ≤ P ≤ N); dois inteiros T1 e T2 representando os valores limites; e os três atributos A1, A2 e A3 (cada atributo é uma palavra de não mais que vinte letras). A lista de SPAM acaba com uma linha contendo apenas o valor 0 (zero). As N linhas contém cada, um nome, que é uma palavra apenas, com não mais que vinte letras. O nome na linha de i é o nome da pessoa número i. O fim da entrada é indicado por N = 0.";"Para cada caso de teste seu programa deverá exibir uma lista de nomes seguida dos atributos que adquiriram. Seu programa deve escrever os nomes das pessoas na ordem em que aparecerem na entrada, seguido de ‘:’ e de um espaço, seguido de seus atributos de acordo com os SPAM que enviaram. Os atributos devem ser escritos na ordem que apareceram na entrada; cada atributo deve ser seguido de espaço.";False;6 / 10;491;234;47.66%
1318;Bilhetes Falsos;Ad-Hoc;4;"Sua escola organizou uma grande festa para celebrar a brilhante vitória do seu time no prestigiado, e mundialmente famoso CCIP (Competição Colegial Internacional de Poesia). Todos na sua escola foram convidados para a noite, que incluía coquetel, jantar e uma sessão onde a poesia de seu time era lida para a audiência. O evento foi um sucesso – mais pessoas mostraram interesse em sua poesia do que você esperava – porém alguns de seus críticos disseram que tamanho público esteve presente graças à comida, e não graças a sua poesia.

                
                    Independente do motivo, no dia seguinte você descobriu o motivo pelo qual o salão esteve tão cheio: o diretor da escola lhe confidenciou que diversos dos bilhetes usados pelos visitantes eram falsos. O número real de bilhetes foram numerados sequencialmente de 1 a N (N ≤ 10000). O diretor suspeita que algumas pessoas usaram o scanner e a impressora da Sala da Computação para produzir cópias dos bilhetes verdadeiros. O diretor lhe deu um pacote contendo todos os bilhetes coletados dos visitantes na entrada da festa, e lhe pediu para que determinasse quantos bilhetes no pacote continham “clones”, isto é, outro bilhete com o mesmo número da sequência.";A entrada contém dados de diversos casos de teste. Cada caso de teste contém duas linhas. A primeira linha contém dois inteiros N e M, que indicam, respectivamente, o número de bilhetes originais e o número de pessoas presentes na festa (1 ≤ N ≤ 10000 e  1 ≤ M ≤  20000). A segunda linha do caso de testes contém M inteiros Ti representando os números dos bilhetes contidos no pacote que o diretor lhe deu (1 ≤ Ti ≤ N). O final da entrada é indicado por N = M = 0.;Para cada caso de teste seu programa deverá imprimir uma linha, contendo o número de bilhetes do pacote que contém outro bilhete com o mesmo número da sequência.;False;4 / 10;7381;3614;48.96%
1319;Garota Hiperativa;Paradigmas;9;"Helen é uma garota hiperativa. Ela quer agendar suas atividades de forma que em qualquer momento do dia haja ao menos uma atividade que ela possa fazer. Ela não se importa se suas atividades se sobrepõem no tempo, desde que cada momento do seu dia tenha uma atividade agendada.
                
                    Helen dividiu o dia de uma forma particular. O dia começa no tempo 0 e termina no tempo M. Cada momento do dia é representado por um número real entre 0 e M, inclusive. Helen fez uma lista de todas as possíveis atividades, com seus tempos de início e fim. Agora ela precisa escolher qual subconjunto de atividades vai agendar.
                
                    Se uma atividade começa no instante S e termina no instante F, então dizemos que ela cobre todo o período entre S e F, inclusive. Helen não quer desperdiçar nenhuma atividade, portanto ela vai escolher apenas subconjuntos mínimos de atividades que cobrem o dia a ser agendado. Um subconjunto de atividades é um subconjunto mínimo que cobre o dia se e somente se:
                
                    1. Cada instante do dia é coberto por ao menos uma atividade do subconjunto;
                    2. Remover qualquer uma das atividades do subconjunto deixaria ao menos um instante do dia descoberto.
                
                    Note que alguns instantes do dia podem ser cobertos por mais de uma atividade.
                
                    ​Dada a lista de possíveis atividades para um dia, você deve ajudar Helen determinando quantos subconjuntos mínimos distintos de atividades cobrem o dia inteiro.";"Cada caso de teste se estende por várias linhas. A primeira linha contém dois inteiros M e N, representando respectivamente o maior valor de tempo do dia (1 ≤ M ≤ 109) e o número de possíveis atividades para o dia (1 ≤ N ≤ 100). Cada uma das próximas N linhas descreve uma possível atividade e contém dois inteiros S e F, representando respectivamente os tempos de início e fim da atividade (0 ≤ S < F ≤ M).
                
                    ​O último caso de teste é seguido de uma linha contendo dois zeros.";Para cada caso de teste, imprima uma única linha com um único inteiro representando a quantidade de subconjuntos que cobrem o dia. Para tornar sua vida mais fácil, imprima apenas o resto ao dividir a solução por 108.;False;9 / 10;306;118;38.56%
1320;Metrô Engenhoso;Ad-Hoc;5;"O Rei da Logônia em breve irá inaugurar um novo e revolucionário metrô, baseado numa invenção dos Engenheiros Reais, que permite teletransporte.
                
                    O novo metrô consiste de um longo túnel com uma estação a cada quilômetro. Existem também T teletransportadores, que estão localizados em algumas das estações. Em cada estação existe um teclado com T teclas, onde cada tecla corresponde a um teletransportador. A figura abaixo ilustra um sistema de metrô com três teletransportadores localizados nas estações marcadas como A, B e C.

                
                
                    O metrô funciona da seguinte maneira: o usuário vai até uma estação (a estação inicial) e pressiona a tecla correspondente ao teletransportador que ele quer usar. O usuário então é teletransportado para a estação que está à mesma distância do teletransportador que a estação inicial, mas do lado oposto ao teletransportador. Mais precisamente, se a localização da estação inicial é i e o usuário pressiona a tecla correspondente ao teletransportador localizado na posição j, ele será levado à estação localizada na posição 2 x j - i. Por exemplo, se o usuário está na estação 6 e quer ir até a estação -2, ele pode usar o teletransportador C (e ir do 6 ao 10) e depois o teletransportador A (e ir do 10 ao -2).
                
                ​
                    O Rei, no entanto, sabe que é possível que não exista uma sequência de teletransportadores que leve um usuário de uma estação X até uma estação Y. Para evitar que os usuários tentem ir para um lugar inacessível, ele quer criar um programa disponível na Internet para os ajudar. O Rei quer que você escreva um programa que, dadas as posições de cada teletransportador, responda uma sequência de consultas. Para cada consulta, as estações inicial e final são dadas, e seu programa deve determinar se é possível para um usuário ir da estação inicial até a estação final.";"Cada caso de teste se estende por várias linhas. A primeira linha contém dois inteiros T e Q indicando, respectivamente, o número de teletransportadores (1 ≤ T ≤ 105) e o número de consultas (1 ≤ Q ≤ 10). A segunda linha contém T inteiros distintos ti indicando a posição do i-ésimo teletransportador (-107 ≤ ti ≤ 107). Cada uma das Q linhas seguintes descreve uma consulta e contém dois inteiros distintos S e D indicando a posição das estações inicial e final (-107 ≤ S, D ≤ 107).
                
                    ​O último caso de teste é seguido de uma linha contendo dois zeros.";Para cada caso de teste, imprima uma única linha contendo as respostas para as Q consultas, na mesma ordem em que as consultas aparecem na entrada e separadas por um espaço em branco. Para cada consulta, você deve imprimir um caractere 'Y' se for possível chegar ao destino a partir da estação inicial usando o metrô, ou 'N' caso contrário.;True;5 / 10;92;48;52.17%
1321;Jollo;Ad-Hoc;4;"Jollo é um simples jogo de cartas que as crianças da Logônia adoram jogar. É um jogo entre dois jogadores usando um baralho normal de 52 cartas. No jogo, as cartas são ordenadas de acordo com seu valor e naipe, produzindo uma sequência de 52 valores distintos.
                
                    ​O jogo é composto de três turnos, jogados em uma série melhor de três (um jogador deve ganhar dois turnos para ganhar o jogo). No início do jogo, o baralho é embaralhado e cada jogador recebe três cartas. Em cada turno, os jogadores mostram uma carta ao adversário e o jogador com a carta mais alta ganha o turno. As cartas usadas no turno são descartadas (ou seja, não podem ser usadas novamente).
                
                    O filho do Rei adora jogar este jogo, mas ele não é muito esperto, perdendo frequentemente para sua irmã mais nova. E quando perde, ele chora tão alto que ninguém aguenta escutar. O criado que embaralha as cartas para o Príncipe e sua irmã tem medo de ser mandado para a prisão caso o Príncipe continue perdendo. O criado pode ver as cartas que ele entrega, e após distribuir cinco cartas (três à Princesa e duas ao Príncipe) quer saber qual a carta mais baixa que ele deve entregar ao Príncipe tal que não exista nenhuma possibilidade de ele perder o jogo, não importando a maneira como jogue.";"Cada caso de teste é dado em uma única linha que contém cinco inteiros distintos A, B, C, X e Y, descrevendo as cartas já distribuídas aos jogadores. As primeiras três cartas são dadas à Princesa (1 ≤ A,B,C ≤ 52) e as últimas duas cartas são dadas ao Príncipe (1 ≤ X,Y ≤ 52).
                
                
                    ​O último caso de teste é seguido de uma linha contendo cinco zeros.";Para cada caso de teste, imprima uma única linha. Se existe uma carta que fará o Príncipe ganhar independente do modo como jogar, você deve imprimir a menor carta possível. Caso contrário, imprima -1.;False;4 / 10;1281;494;38.56%
1322;Desejos das Crianças;Grafos;7;Kevin é uma criança. Ele almoça na escola junto com muitas outras crianças. Eles costumam ir até o pátio e almoçar sentados no chão. Eles adoram formar um grande círculo onde cada criança tem exatamente dois vizinhos, um na esquerda e outro na direita. Às vezes a professora tem problemas para organizar o círculo pois muitas crianças desejam sentar ao lado de outras crianças. Cada criança pode desejar sentar ao lado de no máximo duas outras crianças já que cada criança tem apenas dois vizinhos. A professora quer saber se é possível organizar o círculo de forma que todos os desejos de todas as crianças sejam satisfeitos. Você limpa o lugar quando o almoço termina. Já que você quer terminar seu trabalho o mais cedo possível, ajude a professora a responder essa questão.;"Cada caso de teste se estende por várias linhas. A primeira linha contém dois inteiros K e W representando respectivamente o número de crianças (3 ≤ K ≤ 109) e o número de desejos (0 ≤ W ≤ 105). Crianças são identificadas por números inteiros entre 1 e K. Cada uma das próximas W linhas descreve um desejo através de dois inteiros distintos A e B (1 ≤ A, B ≤ K); esses valores significam que a criança A deseja sentar ao lado da criança B. Cada criança possui no máximo dois desejos.
                
                    ​O último caso de teste é seguido de uma linha contendo dois zeros.";Para cada caso de teste, imprima uma única linha contendo um caractere 'Y' se é possível organizar o círculo de forma que todas crianças tenham seus desejos atendidos, ou um 'N' caso contrário.;False;7 / 10;643;195;30.33%
1323;Feynman;Matemática;1;"Richard Phillips Feynman era um físico americano muito famoso e ganhador do Prêmio Nobel de Física. Ele trabalhava em física teórica e também foi pioneiro no campo da computação quântica. Ele visitou a América do Sul por dez meses, dando palestras e aproveitando a vida nos trópicos. Ele também é conhecido pelos livros ""Surely You’re Joking, Mr. Feynman!"" e ""What Do You Care What Other People Think?"", que inclui algumas de suas aventuras abaixo do equador.

                
                    Sua paixão da vida inteira era resolver e criar quebra-cabeças, trancas e códigos. Recentemente, um fazendeiro idoso da América do Sul, que hospedou o jovem físico em 1949, achou alguns papéis e notas que acredita-se terem pertencido a Feynman. Entre anotações sobre mesóns e eletromagnetismo, havia um guardanapo onde ele escreveu um simples desafio: ""quantos quadrados diferentes existem em um quadriculado de N x N quadrados?"".

                
                    No mesmo guardanapo havia um desenho, que está reproduzido abaixo, mostrando que para N = 2, a resposta é 5.

                ​";"A entrada contém diversos casos de teste. Cada caso de teste é composto de uma única linha, contendo apenas um inteiro N, representando o número de quadrados em cada lado do quadriculado (1 ≤ N ≤ 100).

                
                    O final da entrada é indicado por uma linha contendo apenas um zero.";Para cada caso de teste na entrada, seu programa deve imprimir uma única linha, contendo o número de diferentes quadrados para a entrada correspondente.;True;1 / 10;6557;4744;72.35%
1324;Bóson de Higgs;Matemática;9;"Já passaram-se 100 anos desde a detecção do primeiro Bóson de Higgs e agora a física de partículas é uma matéria principal em todas escolas de ensino médio. Obviamente, as crianças adoram o fato de poderem criar pequenos buracos negros usando apenas seus aceleradores de partículas portáteis e mostrá-los para amigos e colegas. Apesar da criação de grandes buracos negros que poderiam engolir o planeta inteiro ser possível mesmo com esses aceleradores portáteis, os aparelhos estão programados para lançar partículas apenas quando esse efeito colateral indesejável não puder acontecer.

                
                    Sua neta está tentando criar buracos negros com um kit acelerador portátil, que é composto de dois pequenos aceleradores de partículas que jogam, cada um, uma partícula do tamanho de um bóson. Ambas partículas são jogadas simultaneamente, e um buraco negro aparece quando as partículas colidem. Entretanto, sua neta não sabe quanto tempo ela vai ter que esperar antes disso acontecer. Felizmente, cada acelerador pode prever a trajetória da partícula, mostrando quatro valores inteiros em seu mostrador, chamados A, B, C e D. Cada valor pode ser substituído nas seguintes equações:

                
                    r = At + B

                
                    θ = Ct + D

                
                    para determinar a trajetória da partícula, em coordenadas polares. O raio (r) é representado em unidades de distância e o ângulo (θ) em graus. O tempo (t) é dado em unidades de tempo e é sempre um valor racional que pode ser representado por uma fração irredutível. Sua neta sabe que em coordenadas polares um ponto tem infinitas representações. Em geral, o ponto (r, θ) pode ser representado como (r, θ ± k x360°) ou (-r, θ ± (2k + 1) x 180°), onde k é qualquer inteiro. A origem (r = 0) pode ser representada como (0, θ) para qualquer θ.

                
                    Usando esses parâmetros informados por cada acelerador de partículas, sua neta quer determinar se as partículas vão colidir e, se forem colidir, o momento em que o farão. Depois da primeira colisão é impossível prever a trajetória da partícula, portanto, apenas a primeira possível colisão deve ser considerada.

                
                    Apesar de sua neta ser muito inteligente e ter um profundo conhecimento de física de partículas, ela não sabe programar computadores e está procurando no carderno de seu avô (ou avó) por anotações (não se esqueça, ela é sua neta!). Felizmente para você, existe uma anotação no seu caderno que fala que você escreveu aquele código durante a Competição Regional Sul-Americana do ICPC de 2008 (ou, para ser mais exato, essa competição).";"A entrada consiste de vários casos de teste, um por linha. Cada caso de teste contém oito números inteiros separados por espaços, A1 B1 C1 D1 A2 B2 C2 D2 (-104 ≤ A1 B1 C1 D1 A2 B2 C2 D2 ≤ 104). Os primeiros quatro valores (A1, B1, C1, D1) correspondem aos quatro parâmetros mostrados pelo primeiro acelerador portátil e os valores de entrada seguintes (A2, B2, C2, D2) correspondem aos quatro parâmetros mostrados pelo segundo acelerador portátil quando ambas partículas são lançadas. O final da entrada é representado por A1 = B1 = C1 = D1, A2 = B2 = C2 = D2 = 0, que não deve ser processado como um caso de teste, uma vez que esses são os valores mostrados pelo acelerador de partículas quando um grande buraco negro seria criado se as partículas fossem lançadas. Embora o final da entrada seja representado por uma linha com oito zeros, note que o número zero é um valor de entrada possível.

                
                    A entrada deve ser lida da entrada padrão.";"Para cada caso de teste, seu programa deve imprimir uma linha contendo dois inteiros não-negativos ta e tb separados por um espaço. Se não houver possibilidade de colisão, ta = tb = 0, caso contrário ta/tb deve ser uma fração irredutível representando o tempo da primeira colisão. Mesmo se a fração resultar em um valor inteiro, você ainda deve imprimir o número 1 como denominador (veja os exemplos abaixo).

                
                    A saída deve ser escrita na saída padrão.";False;9 / 10;162;26;16.05%
1325;Mapas Bolha;Paradigmas;4;"A Bubble Inc. está desenvolvendo uma nova tecnologia para a navegação em um mapa em diferentes níveis de zoom. Sua nova tecnologia assume que a região a ser mapeada é uma superfície retangular plana, e que divide sua superfície em sub-regiões retangulares, as quais representam níveis de zoom mais profundos. A tecnologia da Bubble Inc. representa um mapa usando uma estrutura conhecida como quad-tree. Em uma quad-tree, uma região retangular chamada x pode ser dividida pela metade, tanto horizontal como verticalmente, resultando em 4 sub-regiões retangulares de tamanhos iguais. Estas sub-regiões são chamadas de regiões filhas de x, e são nomeadas de xp para o canto superior esquerdo, xq para o superior direito, xr para o inferior direito e xs para o inferior esquerdo, onde xc representa a concatenação da string x e o caracter c = 'p', 'q', 'r' e 's'. Por exemplo, se a região base a ser mapeada é chamada de m, então as regiões filhas de m são, à partir do canto superior esquerdo e em sentido horário: mp, mq, mr e ms, como ilustrado abaixo.

                

                
                    Qualquer região pode ser subdividida. Por exemplo, a região chamada ms pode ser subdividida em sub-regiões msp, msq, msr e mss, como ilustrado abaixo.

                

                
                    Como outro exemplo, a figura abaixo mostra o resultado da subdivisão das sub-regiões filhas da região chamada msr.

                

                
                    Sub-regiões com nomes de mesmo comprimento tem o mesmo nível de zoom, uma vez que eles representam regiões de mesmo tamanho. Sub-regiões no mesmo nível de zoom e que compartilham um lado comum são considerados vizinhos.

                
                    Qualquer coisa que esteja fora da região base m não está mapeada e, para todo nível de zoom, todas as sub-regiões de m são mapeadas.

                
                    A tecnologia de mapa da Bubble Inc. fornece um meio para o usuário navegar a partir de uma sub-região dada até as sub-regiões vizinhas, nas quatro direções: cima, baixo, esquerda e direita. Sua missão é ajudar a Bubble Inc. na procura pelas sub-regiões vizinhas de uma sub-região dada. Isto é, dado o nome de uma sub-região retangular, você deve determinar os nomes de suas quatro sub-regiões vizinhas.";"A entrada contém diversos casos de teste. A primeira linha contém um inteiro N indicando o número de casos de teste. Cada uma das N linhas representam um caso de teste, contendo o nome da região composta por C caracteres ( 2 ≤ C ≤ 5000 ), sendo que o primeiro sempre será o caractere 'm', e os seguintes serão ou 'p', 'q', 'r' ou 's'.

                
                    A entrada deve ser lida da entrada padrão.";"Para cada caso de teste na entrada seu programa deve produzir uma linha na saída, contendo os nomes das quatro regiões vizinhas da região informada, na seguinte ordem de direção: cima, baixo, esquerda, direita. Para os vizinhos que não estão mapeados, você deve escrever na saída <none> ao invés do nome. Deixe um espaço em branco entre dois nomes consecutivos.

                
                    A saída deve ser escrita na saída padrão.";True;4 / 10;172;95;55.23%
1326;Química;Estruturas e Bibliotecas;7;"Internacional Chemical Products Company (ICPC) é uma empresa conhecida mundialmente pelos seus bons produtos e acessíveis, o que inclui shampoos, produtos de limpeza, matadores de insetos, e alguns tipos de vacinas. Os engenheiros da ICPC sempre estão procurando meios de reduzir o custo de fabricação de seus produtos, sem perder a qualidade.
                
                    Um dos engenheiros, Sr. Poucher, tem uma nova ideia de reduzir o custo, que visa reduzir o número de recipientes necessários para manter as substâncias durante a sequência de reações químicas para se obter uma última substância. Essas substâncias finais são obtidas através de uma sequência de reações na forma de X + Y → Z, onde X e Y são substâncias iniciais ou intermediarias (que já foram geradas em reações anteriores). Essas reações são feitas dentro de um recipiente de reações, que quando vazio pode ser limpo e usado novamente. O processo de gerar a substância final pode ser descrevido por uma sequência de duas simples operações:
                
                    Colocar uma substância disponível em um recipiente de reação vazio C;
                    Realizar a reação de X + Y → Z ou colocando X no recipiente de reação contendo Y, ou colocando Y no recipiente de reação contendo X. A ordem não afeta o resultado final da reação.
                
                
                    O que Sr. Poucher percebeu é que escolhendo a sequência de reação correta, ICPC poderia cortar o número de reações necessárias na companhia drasticamente . Por exemplo, considerando a seguinte sequência de reações químicas usadas para obter a substância final P:
                
                    1) A + B -> T1
                    2) C + D -> T2
                    3) E + F -> T3
                    4) T2 + T3 -> T4
                    5) T4 + T1 -> P
                
                    Nesse exemplo, A, B, C, D, E e F são as substância iniciais (somente aparecem no lado esquerdo das reações), T1, T2, T3 e T4 são substâncias intermediarias (aparecem no lado esquerdo pelo menos uma vez, e exatamente uma na direita de alguma outra reação) e P é a substância final (só aparece na direita de uma única reação, que vai ser a última listada). Se a sequência de reações é realizada como foi dito então três recipientes são necessários em ordem para produzir a substância final P:
                
                    Recipientes
                    Operações C1 C2 C3
                
                    colocar A em C1: A - -
                    adicionar B para C1: T1 - -
                    colocar C em C2: T1 C -
                    adicionar D para C2: T1 T2 -
                    colocar E em C3: T1 T2 E
                    adicionar F para C3: T1 T2 T3
                    colocar T2 em C3: T1 - T4
                    colocar T4 em C1: P - -
                
                    Nota-se, contudo, que se as reações são realizadas na sequência 2, 3, 4, 1, 5, dois recipientes são suficientes:
                
                    Recipientes
                    Operações C1 C2
                
                    colocar C em C1: C
                    adicionar D para C1: T2
                    colocar E em C2: T2 E
                    adicionar F para C2: T2 T3
                    colocar T2 em C2: - T4
                    colocar A em C1: A T4
                    adicionar B para C1: T1 T4
                    colocar T1 em C2: - P
                
                    Você foi contratado pela ICPC, e sua tarefa é criar um programa de computador que determine o número minimo de recipientes necessárias para executar a sequência de reações necessárias para obter a substância final.
                
                    Você deve assumir que:
                
                    A reação de produção da substância final é a última listada, e a reação que produz uma substância intermediária sempre vai preceder as reações onde essa substância intermediária é usada.
                    Uma sequência de reações que produzem a última substância é sempre possível.
                    ICPC tem um suprimento ilimitado de substâncias iniciais.
                    No início do processo de produção, cada substância inicial está em um recipiente de armazenamento, usado para guardar todo estoque de substâncias da ICPC. Tais recipientes não podem ser utilizados como recipiente de reação para armazenar produtos intermediários da reação.
                    Todos os recipientes de reação são grandes o suficiente para manter todas as substâncias resultantes.
                    A quantidade de substâncias geradas por uma única reação é suficiente para ser usada como entrada para uma única outra reação. Por exemplo, se um produto intermediário Z é necessário como entrada para duas diferentes reações, este produto deve ser produzido duas vezes.
                    Cada reação usa exatamente duas substâncias diferentes e gera também uma substância distinta, isto é, toda reação tem a forma X + Y → Z, onde X, Y e Z são distintos.";"A entrada consiste de vários casos de teste. Cada caso de teste começa com uma linha contento um inteiro R, indicando o número de reações para serem consideradas(1 <= R <= 5000). A seguir R linhas são da forma:
                
                    S1 + S2 → S3
                
                    Descreve uma reação que consome S1 e S2 e produz S3 como resultado. Os nomes de todas as substâncias são cadeias-alfanumericas de tamanho no máximo 5. Um caso de teste com R = 0 indica o final da entrada.";Para cada caso de teste da entrada, seu programa deve produzir uma linha, contendo a string 'PRODUCT requires N containers', onde o PRODUCT é a substância final e N é o número de recipientes necessários para produzi-lo.;False;7 / 10;79;23;29.11%
1327;Drop Out;Ad-Hoc;7;"Drop Out é o nome de um simples jogo de cartas, que é jogado com um baralho normal de 52 cartas. As cartas são ordenadas da seguinte maneira: (Ás, 2, 3, 4, 5, 6, 7, 8, 9, 10, Valete, Rainha, Rei), com o Ás sendo o menor deles, e o Rei o maior. O naipe das cartas é desconsiderado. Os jogadores (no mínimo dois) sentam em volta de uma mesa, um baralho é embaralhado e colocado no centro da mesa, com as cartas de face voltada para baixo. No início do jogo, todos os jogadores estão ""ativos"". O jogo se prossegue em turnos. Em cada turno, os jogadores ativos recebem uma carta do baralho, no sentido horário, independente da posição onde estão sentados. Os jogadores que recebem a menor carta no turno são eliminados do jogo e tornam-se ""inativos"". Note que até quatro jogadores podem ser eliminados em cada turno. O jogo termina quando resta somente um jogador ativo, o qual é o vencedor. Se todo o baralho acabar antes dos turnos terminarem, o jogo termina e todos os jogadores ativos no início do último turno são vencedores.

                
                    Dado o número de jogadores, seus nomes e um baralho de cartas embaralhadas, você deve escrever um programa que simule o jogo e determine o vencedor ou vencedores.";"A entrada contém diversos casos de teste. Cada caso de teste consiste de seis linhas. A primeira linha contém um inteiro N, indicando o número de jogadores no jogo (2 ≤ N ≤ 20). A segunda linha contém uma lista dos nomes dos jogadores, separados por espaços. O nome de um jogador é composto de no máximo 16 letras do alfabeto inglês (de 'A' até 'Z' e 'a' até 'z'). As cartas são entregues aos jogadores na ordem dada na lista. As próximas quatro linhas contém a descrição do baralho embaralhado. As cartas são representadas por inteiros de 1 a 13 (1, 11, 12 e 13 representam, respectivamente, as cartas Ás, Valete, Rainha e Rei). O baralho é descrito em quatro linhas de treze inteiros cada, separados por um único espaço. O baralho é listado de cima para baixo, então a primeira carta entregue é a primeira carta listada. O final da entrada é indicado por N = 0.

                
                    A entrada deve ser lida da entrada padrão.";"Para cada caso de teste na entrada, seu programa deve produzir uma linha de saída, contendo o nome do vencedor ou vencedores. A lista de vencedores deve aparecer na mesma ordem dada na entrada, e cada nome deve ser seguido por um espaço.

                
                    A saída deve ser escrita na saída padrão.";False;7 / 10;718;227;31.62%
1328;Vá com Calma;Grafos;7;"O prefeito de uma cidade pretende introduzir um novo sistema de transporte para simplificar a vida de seus habitantes. Isso será feito através da utilização de um cartão de débito, que o prefeito nomeou ""GoEasy"". Há dois meios de transporte na cidade: trens e ônibus. O sistema de trem é ""baseado em zonas"", enquanto o sistema de ônibus é ""baseado em jornadas"". A tarifa para a viagem é calculada como segue:

                
                    Primeiramente há uma taxa de duas unidades monetárias para entrar no sistema de transporte, independentemente do meio inicial de transporte.
                    Quando viajar de trem um cliente paga quatro unidades monetárias para cada mudança de zona.
                    Ao viajar de ônibus a cliente paga uma unidade monetária a cada vez que ele/ela embarca num ônibus.
                

                
                    Um mapa do sistema de transporte irá proporcionar informações sobre as estações pertencentes a cada zona, e a seqüência de estações para cada itinerário de ônibus e trem. Ônibus e trens se movem em ambas as direções em cada itinerário, e nenhum trem ou ônibus passa pela mesma estação duas vezes durante uma única viagem através de um itinerário. É sempre possível ir de qualquer estação a qualquer outra estação usando trens e/ou ônibus. As regras para as tarifas de computação são rígidas: se durante uma viagem de trem um cliente entra em uma determinada zona duas vezes, ele/ela é cobrado(a) duas vezes, da mesma forma, se durante uma viagem de ônibus o cliente utiliza duas vezes o ônibus para o mesmo itinerário, ele/ela é cobrado(a) duas vezes.

                ​

                
                    No mapa do transporte acima um cliente pode viajar da estação 2 para a estação 4 pagando apenas duas unidades monetárias, usando a linha T1, uma vez que elas estão na mesma zona. Mas se o cliente precisa ir da estação 2 à 5, então o melhor é tomar o ônibus B3 para a estação 10 e, em seguida, tomar o ônibus B2 para a estação 5, pagando um total de quatro unidades monetárias. Ao invés de rastrear toda a viagem de cada passageiro, a idéia do prefeito é que máquinas sejam colocadas em todas as estações, e os viajantes devem passar seu cartão pessoal GoEasy apenas no começo e término de toda a viagem. Uma vez que todas as máquinas são interligadas em rede, com base na saída e entrada do sistema de estações, pode-se calcular o custo mínimo possível para a viagem, e qual o valor será cobrado do cartão de débito do viajante. Tudo o que falta é um sistema de computador para fazer os cálculos para a tarifa a ser deduzida. Assim, dado o mapa do sistema de transporte na cidade, você deve escrever um programa para calcular a tarifa mínima que o cliente deve pagar para viajar entre duas paradas/estações dadas.";A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros Z e S, que indicam, respectivamente, o número de zonas (1 ≤ Z ≤ 30) e o número de estações de trem/ônibus na cidade (1 ≤ S ≤ 100). Cada estação tem um único número de identificação variando de 1 a S, e cada estação pertence exatamente a uma zona. Cada uma das seguintes Z linhas descreve as centrais pertencentes a uma zona. A descrição de uma zona começa com um K inteiro que indica o número de estações (1 ≤ K ≤ S) na zona, seguido de K inteiros representando as estações na zona. Depois disso vem uma linha com dois números inteiros T e B, representando, respectivamente, o número de itinerários de trem (1 ≤ T ≤ 50) e o número de itinerários de ônibus (1 ≤ B ≤ 50). Em seguida, vem T linhas descrevendo itinerários de trem, seguido por B linhas descrevendo itinerários de ônibus. A descrição de cada itinerário é composto de uma linha contendo L um inteiro que indica o número de estações (2 ≤ L ≤ S) no itinerário, seguido por L inteiros especificando a seqüência de estações no itinerário. Finalmente, vem uma linha com dois inteiros X e Y (1 ≤ X ≤ S, 1 ≤ Y ≤ S e X ≠ Y), especificando que o cliente viajou da estação X para a estaçãoY. O final da entrada é indicado por Z = S = 0.;Para cada caso de teste seu programa deve imprimir uma linha, contendo um inteiro representando o valor a ser deduzido do cartão GoEasy do viajante.;True;7 / 10;86;46;53.49%
1329;Cara ou Coroa;Ad-Hoc;2;"João e Maria são amigos desde que se conheceram na creche. Desde então, eles compartilham uma rotina de brincadeiras: todas as vezes que eles se encontram, eles jogam Cara ou Coroa com uma moeda, e quem ganhar tem o privilégio de decidir quais brincadeiras eles irão jogar durante o dia. Maria sempre escolhe cara, e João sempre escolhe coroa.

                
                    Hoje em dia eles estão na faculdade, mas continuam sendo bons amigos. Sempre que se encontram, eles ainda jogam Cara ou Coroa, e o vencedor decide que filme assistir, ou em que restaurante jantar, e assim por diante.

                
                    Ontem Maria contou a João que ela guarda um registro de todas as vezes que eles jogaram, desde os tempos da creche. João ficou espantado. Porém João está estudando Ciência da Computação e decidiu que essa era uma boa oportunidade para mostrar a Maria suas habilidades em programação, escrevendo um programa que mostrasse o número de vezes que cada um deles venceu ao longo de todos esses anos.";A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um único inteiro N indicando o número de vezes jogadas (1 ≤ N ≤ 10000). A linha seguinte contém N inteiros Ri, separados por um espaço, descrevendo a lista de resultados. Se Ri = 0 então Maria venceu o iésimo jogo, se Ri = 1 então João venceu o iésimo jogo (1 ≤ i ≤ N). O fim da entrada é indicado por N = 0.;"Para cada caso de teste na entrada, seu programa deverá escrever uma linha contendo a sentença ""Mary won X times and John won Y times"" (""Maria venceu X vezes e Joao venceu Y vezes""), onde 0 ≤ X e 0 ≤ Y.";False;2 / 10;17275;9366;54.22%
1330;A Terra Herdada por Tio Tom;Grafos;8;Seu velho tio herdou um pedaço de terra de seu tetravô. Originalmente, a propriedade tinha forma retangular. Contudo, a muito tempo atrás, seu tetravô decidiu dividir a terra em uma grade de pequenos quadrados. Ele transformou alguns dos quadrados em lagos, porque ele adorava caçar patos e procurava atraí-los para sua propriedade. (Você não tem certeza, pois ainda não foi ao local, mas ele pode ter feito tantos lagos que a terra agora pode se consistir em várias ilhas desconectadas.) Seu tio Tom quer vender a terra herdada, mas regras locais regulamentam a venda de imóveis. Seu tio foi informado que, a pedido do seu tetravô, uma lei estabelece que a propriedade só possa ser vendida em partes retangulares do tamanho de dois quadrados da propriedade do seu tio. Além disso, não é permitido vender os lagos da propriedade. Seu tio pediu a você para ajudar a determinar o maior número de propriedades que ele poderia vender (os quadrados restantes tornariam-se parques de recreação).;A entrada deverá incluir diversos casos de teste. A primeira linha do caso de teste contém dois inteiros N e M, repesentando respectivamente, o número de linhas e colunas da terra (1 ≤ N, M ≤ 100). A segunda linha contém um inteiro K indicando o número de quadrados que foi transformados em lagos ((N x M) - K ≤ 50). Cada uma das próximas K linhas contém dois inteiros X e Y que descrevem a posição dos quadrados que se transformaram em lagos (1 ≤ X ≤ N e 1 ≤ Y ≤ M). O fim da entrada é indicado por N = M = 0.;Para cada caso de teste de entrada seu programa deverá produzir uma saída, contendo um valor inteiro representando o número máximo de propriedades que podem ser vendidas.;True;8 / 10;980;256;26.12%
1331;Blocos;Ad-Hoc;9;"Alguns de vocês já podem ter jogado um jogo chamado ""blocos"". Há n blocos em uma linha, cada caixa tem uma cor. Aqui está um exemplo: Ouro, Prata, Prata, Prata, Bronze, Prata, Bronze, Ouro, Bronze.
                
                    Veja a imagem correspondente abaixo:
                
                
                    Se algumas caixas adjacentes são da mesma cor, e tanto a caixa para sua esquerda (se existir) e para sua direita (se existir), são de alguma outra cor, nós a chamamos de ""segmento de caixa"". Há quatro segmentos de caixa. Ou seja: ouro, prata, bronze, ouro. Existem 1, 4, 3, 1 caixa(s), no segmento, respectivamente.

                
                    Todo o tempo, você pode clicar em uma caixa, então todo o segmento que contém essa caixa DESAPARECE. Se esse segmento é composto de k caixas, você vai ganhar k * k pontos. Por exemplo, se você clicar em uma caixa prata, o segmento prata desaparece e você ganha 4 * 4 = 16 pontos.
                
                    Agora vejamos a figura abaixo:

                
                
                
                A primeira opção é a ideal.

                
                    Encontre a maior pontuação que você pode obter, dado um estado inicial do jogo.";A primeira linha contém o número de casos de teste t (1 ≤ t ≤ 15). Cada caso contém duas linhas. A primeira linha contém um inteiro n (1 ≤ n ≤ 200), o número de caixas. A segunda linha contém n inteiros, representando as cores de cada caixa. Os inteiros estão no intervalo 1~n.;Para cada caso de teste, imprima o número do caso de teste e a maior pontuação possível.;True;9 / 10;415;100;24.10%
1332;Um-Dois-Três;Strings;2;Seu irmão mais novo aprendeu a escrever apenas um, dois e três, em Inglês. Ele escreveu muitas dessas palavras em um papel e a sua tarefa é reconhecê-las. Nota-se que o seu irmão mais novo é apenas uma criança, então ele pode fazer pequenos erros: para cada palavra, pode haver, no máximo, uma letra errada. O comprimento de palavra é sempre correto. É garantido que cada palavra que ele escreveu é em letras minúsculas, e cada palavra que ele escreveu tem uma interpretação única.;A primeira linha contém o número de palavras que o seu irmão mais novo escreveu. Cada uma das linhas seguintes contém uma única palavra com todas as letras em minúsculo. As palavras satisfazem as restrições acima: no máximo uma letra poderia estar errada, mas o comprimento da palavra está sempre correto. Haverá, no máximo, 1000 palavras de entrada.;Para cada caso de teste, imprima o valor numérico da palavra.;False;2 / 10;17855;8547;47.87%
1333;Os Doces de Candy;Ad-Hoc;6;"Candy possui um estoque de doces de F diferentes sabores. Ela irá fazer vários pacotes de doces para então vendê-los. Cada pacote deverá ser ou um pacote contendo doces de um único sabor, ou um pacote sortido, contendo doces de cada sabor. Ela decidiu que um bom empacotamento deve honrar as seguintes condições:

                
                    Cada doce deve ser colocado em exatamente um pacote.
                    Cada pacote, independente de seu tipo, deve conter pelo menos dois doces.
                    Cada pacote, independente de seu tipo, deve conter o mesmo número de doces.
                    Dentro de cada pacote sortido, o número de doces de cada sabor deve ser o mesmo.
                    Deve haver ao menos um pacote sortido.
                    Deve haver ao menos um pacote de cada sabor.
                

                
                    Candy estava pensando sobre quantos tipos de bons empacotamentos de doces ela poderia fazer. Dois bons empacotamentos de doces são considerados diferentes se e somente se eles diferem no número de pacotes sortidos, ou no número de doces por pacote. Como Candy irá vender seus doces durante a cerimônia de encerramento desta competição, você foi encorajado a responder sua questão tão rápido quanto possível.";"Cada caso de teste é descrito usando duas linhas. A primeira linha contém um inteiro F indicando o número de sabores (2 ≤ F ≤ 105). A segunda linha contém F inteiros Ci , indicando o número de doces de cada sabor (1 ≤ Ci ≤ 109 para cada 1 ≤ i ≤ F).

                
                    O último caso de teste é seguido por uma linha contendo um zero.";Para cado caso de teste imprima um linha com um inteiro representando o número de diferentes bons empacotamentos de doces, de acordo com as regras dadas acima.;False;6 / 10;53;31;58.49%
1334;Poluição Elétrica;Grafos;9;"Sortônia é a capital da província da Logônia do Norte. A cidade é definida com quase todas as suas ruas em uma grade quadrada alinhadas na direção Norte-Sul ou na direção Oeste-Leste. A única exceção é a Avenida Merge que vai na direção Sudoeste-Nordeste, dividindo os blocos da cidade ao longo de suas diagonais.

                
                    Sortônia é também uma das cidades mais verdes da Nlogônia. A universidade local desenvolveu uma tecnologia para aproveitar o campo magnético da Terra para geração de energia. Como consequência, todas as interseções da Avenida Merge possuem geradores de força instalados, abastecendo todas as casas e comércios da cidade.

                
                    A tecnologia foi elogiada pelos ambientalistas na época por ter eliminado a emissão de carbono da Sortônia, mas logo após sua introdução, milhares de abelhas e pássaros foram encontrados mortos na cidade. Confusa, a Rainha da Nlogônia ordenou os biofísicos do reino que investigassem o fenômeno.

                
                    Após muito meses de estudos, eles descobriram que os geradores usados pelos Sortonianos criaram anomalias no campo magnético local. Os pássaros e abelhas que usam o campo magnético da Terra para guiar seu voo foram confundidos por essas anomalias, começaram a voar em círulos e eventualmente morreram por exaustão.

                
                    De acordo com os modelos teóricos dos biofísicos, cada gerador cria uma anomalia que é representada por um valor inteiro. Cada anomalia propaga indefinidamente nas quatro direções cardeais. Pontos que não estão diretamente ao norte, sul, oeste ou leste do gerador não são afetados por ele. Por outro lado, se um ponto está alinhado com dois geradores então a anomalia naquele ponto é a soma das duas anomalias produzidas por esses geradores. Por exemplo, considere a figura abaixo que representa uma certa porção da Sortônia. A anomalia no ponto R é apenas aquela produzida pelo gerador naquele ponto enquanto a anomalia no ponto T é a soma das anomalia produzidas pelos geradores no ponto R e no ponto S.

                ​

                
                    Os biofísicos gostariam de medir as anomalias para algumas das interseções da cidade, mas essas medições requerem equipamentos caros e perícia técnica. Então eles planejam medir apenas um subconjunto das interseções da cidade e extrapolar os outros dados a partir deles. Prever uma anomalia a partir de um conjunto de medições pode requerer combinar várias delas de modos complicados. Então, a Rainha da Nlogônia ordenou que você escrevesse um programa que prevê as anomalias em certas interseções dadas as medidas préviamente feitas.";"Cada caso de teste é descrito usando várias linhas. A primeia linha contém cois inteiros M e Q representando respectivamente o número de medições e o número de consultas (1 ≤ M, Q ≤ 104). Cada uma das próximas M linhas descreve uma medição usando três inteiros X, Y e A, indicando que a anomalia medida no ponto (X, Y) é A (-107 ≤ X, Y ≤ 107 e -104 ≤ A ≤ 104). Após isso, cada uma das próximas Q linhas descreve uma consulta usando dois inteiros X' e Y', indicando que a anomalia no ponto (X', Y') deve ser prevista (-107 ≤ X', Y' ≤ 107). Todas as posições são medidas em blocos da cidade; o primeira coordenada aumenta de Oeste para Leste, enquanto a segunda coordenada aumenta de Sul para Norte. O ponto (0,0) está localizado na Avenida Merge. Você pode assumir que em cada caso de teste cada ponto não será medido mais de uma vez. Da mesma maneira, cada ponto não será consultado mais de uma vez. Você pode assumir que todas as medições são consistentes.

                
                    O último caso de teste é seguido por uma linha contendo dois zeros.";Para cada caso de teste imprima Q + 1 linhas. Na i-ésima linha escreva a resposta para a i-ésima consulta. Se a informação dada pelas medições é suficiente para prever a anomalia no ponto consultado, então escreva um inteiro representando a anomalia no ponto consultado. Caso contrário escreva o caractere '*' (asterisco). Imprima uma linha contendo um único caractere '-' (hífen) após cada caso de teste.;True;9 / 10;108;47;43.52%
1335;Recuperação de Arquivos;Strings;10;"O sistema operacional do seu computador indexa os arquivos do seu disco rígido baseado no seu conteúdo, e provê busca textual sobre eles. O conteúdo de cada arquivo é uma cadeia não-vazia de caracteres minúsculos. Para realizar uma pesquisa, você especifica uma chave, que é também uma cadeia não-vazia de letras minúsculas. O resultado é uma lista de todos os arquivos que contém a chave como uma subcadeia. Uma cadeia s é uma subcadeia de uma cadeia t se t contém todos os caracteres de s como uma sequência contígua. Por exemplo, ""foofoo"", ""cafoo"", ""foota"" e ""foo"" todas contém ""foo"" como uma subcadeia, enquanto ""foa"", ""fofo"", ""fioo"" e ""oofo"" não contém.

                
                    Você sabe o conteúdo de cada arquivo no seu disco rígido, e gostaria de saber se cada subconjunto dos arquivos é pesquisável. Um subconjunto dos arquivos é pesquisável se existe pelo menos uma chave que produz exatamente a lista desses arquivos como resultado. Dado os conteúdos dos arquivos on seu disco rígido, você deve computar o número de subconjuntos não-vazios pesquisáveis.";"Cada caso de teste é descrito usando várias linhas. A primeira linha contém um inteiro F representando o número de arquivos do seu disco rígido (1 ≤ F ≤ 60). Cada uma das F linhas sequintes indica o conteúdo de um dos arquivos. O conteúdo de um arquivo é uma cadeia não-vazia de no máximo 104 caracteres; cada caracteres é uma das 26 letras minúsculas (de 'a' até 'z').

                
                    O último caso de teste é seguido por uma linha contendo um zero.";Para cada caso de teste imprima uma linha com um inteiro representando o número de conjuntos não-vazios pesquisáveis.;False;10 / 10;207;75;36.23%
1336;Cerca do Jardim;Geometria Computacional;8;"Gary é um jardineiro cuidadoso que possui um campo retangular repleto de árvores. Existem dois tipos de árvores em suas terras: pinheiros e larícios. Para melhorar suas vitalidades, ele decidiu começar a usar um fertilizante específico para cada tipo de árvore, em vez do fertilizante genérico que ele estava usando até agora.

                
                    Como Gary possui muitas árvores, fertilizantes não podem ser colocados individualmente em cada árvore. Por este motivo ele decidiu construir uma cerca que separa o campo em dois, e usar o fertilizante de pinheiro em um lado e o fertilizante de larício no outro lado. A nova cerca será construída sobre uma linha reta conectando dois pontos distintos localizados na fronteira das terras.

                
                    Infelizmente, cada fertilizante é ótimo para o tipo de árvore que ele foi projetado, mas mortal para o outro. Depois de construir a cerca e decidir que fertilizante ele irá usar em cada lado, os larícios do lado dos pinheiros e os pinheiros do lado dos larícios serão derrubados, para previnir uma morte lenta que irá arruinar a paisagem. Além disso, antes de construir a cerca é necessário derrubar qualquer árvore que esteja exatamente sobre a linha onde a cerca será construída.

                
                    É claro, Gary ama suas árvores. Dependendo do seu tipo, idade e outros fatores, cada árvore possui um certo valor. O jardineiro quer construir a cerca e selecionar onde usar cada fertilizante de tal modo que sua perda seja minimizada, onde a perda é a soma dos valores das árvores que serão derrubadas.

                
                    Você foi contratado para construir a cerca. Antes de começar seu trabalho, diga a Gary quanto ele perderá quando escolher otimamente a localização da cerca e o fertilizante para cada lado.";"Cada caso de teste é descrito usando várias linhas. A primeira linha, contém dois inteiros P e L, representando respectivamente o número de pinheiros e larícios (1 ≤ P, L ≤ 1000). Cada uma das próximas P linahs descreve um pinheiro. Depois disso, cada uma das L linhas seguintes descreve um larício. As árvores são modeladas como pontos no plano XY. Cada árvore é descrita usando três inteiros X, Y e V , onde X e Y são as coordenadas da árvore (-105 ≤ X, Y ≤ 105), e V é seu valor (1 ≤ V ≤ 1000). Você pode assumir que em cada caso de teste duas árvores não terão a mesma localização.

                
                    O último caso de teste é seguido por uma linha contendo dois zeros.";Para cada caso de teste imprima uma linha com um inteiro representando a mínima perda possível para o jardineiro.;False;8 / 10;94;47;50.00%
1337;Poker do Rei;Ad-Hoc;4;"Poker é um dos jogos de cartas mais jogados, e o Poker do Rei é uma das suas variações. O jogo é jogado com um baralho normal de 52 cartas. Cada carta tem um dos quatro naipes e uma das 13 categorias. Entretanto, no Poker do Rei os naipes das cartas não são relevantes, enquanto as categorias são Ás (categoria 1), 2, 3, 4, 5, 6, 7, 8, 9, 10, Valete (categoria 11), Rainha (categoria 12) e Rei (categoria 13). O nome do jogo vem do fato de que no Poker do Rei, o Rei é a carta com a categoria mais alta. Mas esta não é a única diferença entre o Poker regular e o Poker do Rei. Aos jogadores do Poker do Rei são distribuídos uma mão de apenas três cartas. Existem três tipos de mãos:

                
                    Um set, feito de três cartas da mesma categoria.
                    Um par, que contém duas cartas da mesma categoria, com a outra carta sem correspondente.
                    Um não-par, onde não tem-se duas cartas da mesma categoria.
                

                
                    As mão são classificadas usando as seguintes regras:

                
                    Qualquer set derrota qualquer par e não-par.
                    Qualquer par derrota qualquer não-par.
                    Um set formado com cartas de categoria maior derrota qualquer set formado com cartas de categoria menor.
                    Se as cartas emparelhadas de dois pares têm categorias diferentes, então o par com as cartas emparelhadas de maior categoria derrota o par com as cartas emparelhadas de menor categoria.
                    Se as cartas emparelhadas de dois pares têm a mesma categoria, então a cartas não emparelhadas de ambos os pares são comparadas; o par com carta não emparelhada de maior categoria derrota o par com carta não emparelhada de menor categoria, a menos que ambas as cartas não emparelhadas sejam da mesma categoria, caso no qual temos um empate.
                

                
                    Uma nova empresa de software quer oferecer jogos de Poker do Rei no seu site de jogos, e precisa de um software que, dada uma mão de Poker do Rei, determine o set ou o par com menor categoria que derrota a mão dada. Você pode codificá-lo?";"Cada caso de teste é descrito usando uma única linha. A linha contém três inteiros A, B e C representando as categorias das cartas entregues na mão (1 ≤ A, B, C ≤ 13).

                
                    O último caso de teste é seguido por uma linha contendo três zeros.";Para cada caso de teste imprima uma única linha. Se existe um set ou um par que derrota a mão dada, escreva a menor mão que o faz. A mão vencedora deve ser escrita especificando as categorias de suas cartas, em ordem não-descrescente. Se nenhum set ou par derrota a mão dada, escreva o caractere '*' (asterisco).;False;4 / 10;850;468;55.06%
1338;It-Miha;Matemática;8;"No Egito antigo as construções das pirâmides são cercadas de muitos mistérios. Muitos pesquisadores consideram que a tecnologia necessária para construí-las não estava disponível na época, e suspeitam que os egípcios tiveram ajuda de extraterrestres para fazê-las. Um exemplo de um desses mistérios são os números de “It-miha”. Na província egípcia de It-miha foi encontrada uma pedra em que uma sequência de números estava gravada. Aparentemente os números não tinham qualquer ligação, até que Poincaré, no final do século XIX conjecturou que os números gravados naquela pedra eram os 500 primeiros inteiros livres de divisores quadrados perfeitos. Um quadrado perfeito é um número que possui raiz quadrada inteira, como 1, 4, 9, 16, 25, etc. Dizemos que um número é livre de divisores quadrados perfeitos se não for divisível por um quadrado perfeito maior que 1. Pode parecer simples para nós, hoje, determinar tais números, mas devemos pensar que naquela época, há mais de 3500 anos, mesmo o sistema de numeração utilizado era outro, e tornava qualquer conta muito difícil. Vale lembrar que os números de “It-miha” são muito frequentes nas construções das pirâmides. A base da pirâmide de Quéops, por exemplo é de 210 x 210 e sua altura 105 metros. Todas as dimensões são números de “It-miha”!!!
                    Os primeiros dez números de “It-Miha” são 1, 2, 3, 5, 6, 7, 10, 11, 13, 14. Sua tarefa neste
                    exercícios será dado N determinar o N -ésimo número de “It-miha”.";"A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro
                    T indicando o número de instâncias.
                    A primeira (e única) linha de cada instância contém um inteiro N , onde 1 ≤ N ≤ 20 000 000 000.";"Para cada instância seu programa deve imprimir uma linha que contém o N -ésimo número livre
                    de divisores quadrados perfeitos.";False;8 / 10;278;108;38.85%
1339;O Cubo Mágico do Avô;Ad-Hoc;6;"O famoso brinquedo/passatempo, chamado Cubo Mágico, consiste em um cubo como mostrado na Figura 1a, onde letras representam cores (e.g. B para azul, R para vermelho). O objetivo do jogo é rotacionar as faces do cubo de modo que no final cada face do cubo contenha uma cor diferente, como mostrado na Figura 1b. Note que,

                

                  (a) Embaralhado                               (b) Posição vencedora

                Figura 1: Cubo Mágico

                
                    quando uma face é rotacionada, as configurações das cores em todas as faces adjacentes trocam. Figura 2a ilustra a rotação de uma das faces. Dada uma configuração embaralhada, chegar até a posição final pode ser bem desafiador, como você já deve saber.

                

                Figura 2: Exemplo de rotação

                
                    Mas seu avô tem muitos anos de experiência, e diz que, dada qualquer configuração do Cubo Mágico, ele consegue apresentar uma sequência de rotações que levam a uma configuração vencedora.

                
                    Para que todas as faces do cubo estejam visíveis, nós iremos representar o cubo como mostrado na Figura 3a. As seis cores são Amarelo, Vermelho, Azul, Verde, Branco e Magenta, representadas pelas respectivas letras, Y, R, B, G, W e M.

                
                    Você receberá uma configuração inicial e uma lista de rotações. Uma rotação será representada por um valor inteiro, indicando a face que será rotacionada e a direção da rotação (um valor positivo significa rotação no sentido horário, um valor negativo significa rotação no sentido anti-horário). As faces do cubo são numeradas como mostrado na Figura 3b. Você deverá escrever um programa que checa se a lista de rotações irá levar a uma configuração vencedora.

                

                        (a) Cores                                                    (b) Identificadores de face para rotação

                Figura 3: Representação do cubo";A entrada contém diversos casos de teste. A primeira linha da entrada é um inteiro que indica o número de testes. Cada descrição do teste contém dez linhas de entrada. As primeiras nove linhas do teste irão descrever a configuração inicial, no formato mostrado na Figura 3a. A próxima linha irá conter uma lista de rotações, terminando com o valor 0.;Para cada caso de teste seu programa deverá imprimir uma linha. Se seu avô estiver correto, imprima “Yes grandpa!”, caso contrário imprima “No, you are wrong!”.;True;6 / 10;153;69;45.10%
1340;Eu Posso Adivinhar a Estrutura de Dados!;Estruturas e Bibliotecas;4;"Existe uma estrutura de dados do tipo sacola, suportando duas operações:
                
                    1 x
                    Jogue um elemento x na sacola.
                
                    2
                    Tire um elemento da sacola.
                
                    Dada uma sequencia de operações que retornam valores, você vai adivinhar a estrutura de dados. É uma pilha (último-dentro, primeiro-fora), uma fila (primeiro-dentro, primeiro-fora), uma fila de prioridade (sempre tire os elementos grandes por primeiro) ou qualquer outra coisa que você dificilmente consegue imaginar!";Existem muitos casos de testes. Cada caso de teste começa com a linha contando um único inteiro n (1 <= n <= 1000). Cada uma das seguintes n linhas é um comando do tipo 1, ou um número inteiro 2, seguido de um número inteiro x. Isso significa que depois de executar um comando do tipo 2, obtemos um elemento x sem erros. O valor de x é sempre um número inteiro, positivo e não maior do que 100. O final da entrada é determinado pelo final do arquivo (EOF). O tamanho do arquivo de entrada não excede 1MB.;"Para cada caso de teste, mostre um dos seguintes:
                stack
                
                    É definitivamente uma pilha.
                queue
                
                    É definitivamente uma fila.
                priority queue
                
                    É definitivamente uma fila de prioridade.
                impossible
                
                    Não pode ser uma pilha, uma fila ou uma fila de prioridade.
                not sure
                
                    Pode ser mais de uma das três estruturas mencionadas acima.";False;4 / 10;5733;2398;41.83%
1341;Crianças em uma Grade;Strings;8;"Duas crianças estão caminhando em uma grade com H linhas e W colunas. Cada quadrado da grade contém um caractere (cujo código ASCII está entre 33 e 127). Ambas as crianças podem se mover ao norte, a leste, a oeste ou ao sul a cada passo. A primeira criança já deu N passos, enquanto a segunda já deu M passos (0 ≤ N ≤ M ≤ 500).

                
                    Se escrevermos todos os caracteres nos quais cada criança andou em sequência, obtemos duas strings SA e SB. Sua tarefa é remover o menor número possível de caracteres dessas strings de tal forma que elas se tornem iguais.";"A primeira linha da entrada contém um inteiro t (1 ≤ t ≤ 1000), o número de casos de teste. Cada caso de teste é descrito por várias linhas.

                
                    A primeira linha contém dois inteiros H e W (1 ≤ H, W ≤ 20). As próximas H linhas descrevem a grade. A linha seguinte contém três inteiros N, X0 e Y0 (1 ≤ X0 ≤ H, 1 ≤ Y0 ≤ W), indicando que a primeira criança deu N passos, começando no quadrado de coordenadas (X0, Y0). A coordenada X cresce de norte a sul, enquanto a coordenada Y cresce de oeste a leste. A próxima linha contém uma string de tamanho N contendo os caracteres 'N' (norte), 'E' (leste), 'W' (oeste) ou 'S' (sul), indicando o caminho percorrido pela primeira criança. Seguem-se então as informações da segunda criança, no mesmo formato.

                
                    Você pode assumir que as sequências de passos são sempre corretas, isto é, nenhuma criança irá sair da grade.";"Para cada caso, imprima o número do caso de teste e dois inteiros XA e XB, indicando o número de caracteres removidos de SA e SB, respectivamente. Formate a saída como apresentado no exemplo de saída.

                
                    Nota: No primeiro exemplo, SA = ABCDG e SB = ADEB. Se removermos 3 caracteres de SA e 2 caracteres de SB, podemos obter SA = SB = AB (SA = SB = AD também é possível).";False;8 / 10;690;218;31.59%
1342;Dado;Ad-Hoc;5;"Um simples jogo de tabuleiro que gerações de crianças jogaram consiste em um tabuleiro contendo uma trilha de quadrados e um conjunto de peças coloridas. No começo do jogo cada peça é atribuída a um jogador; todas as peças são inicialmente posicionadas antes do primeiro quadrado da trilha.

                
                    O jogo procede em rodadas. A cada rodada, jogadores lançam um par de dados e movem suas peças um número de quadrados para frente igual ao resultado rolado. Os jogadores jogam os dados sempre na mesma ordem (jogador A, depois jogador B, etc.) em cada rodada.

                
                    Maioria dos quadrados no tabuleiro são quadrados planos (ou quadrados vazios), mas alguns são “armadilhas”. Se a peça de um jogador cair em um quadrado armadilha no fim de seu movimento, o jogador perde sua próxima jogada. Ou seja ele/ela não pode jogar os dados, e seu/sua peça fica uma rodada sem se movimentar.

                
                    Haverá exatamente três armadilhas na trilha:

                

                
                    O vencedor do jogo é o jogador que sua peça chega no fim da trilha primeiro. O fim da trilha é depois do último quadrado do tabuleiro. Considere, por exemplo, o tabuleiro da imagem acima, que tem quadrados numerados de 1 à 48. No começo, as peças são posicionadas no local marcado “Begin (início)” na figura, ou seja, antes do quadrado de número 1. Portanto, se um jogador rola um 7 (dados mostrando 2 e 5 por exemplo) seu/sua peça estará posicionada no quadrado de número 7 no fim da primeira rodada do jogo. Além disso, se a peça de um jogador está posicionada no quadrado de número 41, o jogador precisa de um resultado de no mínimo 8 para chegar ao fim da trilha e ganhar o jogo. Note também que não haverá empate no jogo.

                
                    Será dado a você um número de jogadores, o número de quadrados na trilha, o local das armadilhas e uma lista de resultados jogados nos dados. Você deve escrever um programa que determina o ganhador.";"Seu programa deve processar vários casos de teste. A primeira linha de um teste contém dois inteiros P e S representando respectivamente o número de jogadores e o número de quadrados na trilha (1 <= P <= 10 e 3 <= S <= 10000). A segunda linha descreve as armadilhas, representadas por três inteiros diferentes T1, T2 e T3, mostrando suas posições na trilha (1 <= T1, T2, T3 <= S). A terceira linha contém um único inteiro N indicando o número de rolagem de dados no teste. Cada uma das N linhas seguintes contém dois inteiros D1 e D2 (1 <= D1, D2, <= 6), representando os resultados da rolagem dos dados. O fim da entrada é indicado por P = S = 0. O conjunto de rolagem dos dados em um teste será sempre um número exato necessário para que um jogador ganhe o jogo.

                
                    Um jogador é identificado por um número de 1 até P. Os jogadores jogam em uma rodada de uma forma sequencial de 1 para P.

                
                    A entrada deve ser lida de uma forma padrão.";"Para cada teste em sua entrada, seu programa deve apresentar um único inteiro: o número representando o jogador.

                
                    A saída deve ser escrita de uma forma padrão.";True;5 / 10;1348;622;46.14%
1343;Runner Pawns;Ad-Hoc;6;"O jogo ""Runner Pawns"" é uma variante do clássico Xadrez que é jogado por apenas uma pessoa. O tabuleiro usado nesse jogo é semelhante ao tabuleiro do Xadrez, dividido em 8x8 quadrados. Como no Xadrez, cada quadrado pode conter apenas uma peça por vez. As peças do jogo são uma série de peões (os ""Runner Pawns""), e um único cavalo, que é a única peça que o jogador comanda. O objetivo é capturar todos os peões antes de chegarem a ultima linha e se tornarem reis.

                

                
                    Possíveis movimentos do cavalo

                
                    Os movimentos do cavalo são ditos em forma de 'L', uma vez que o cavalo sempre anda dois quadrados em uma direção e mais um quadrado perpendicular a essa direção. A figura acima ilustra os movimentos do cavalo, onde o caractere 'H' indica a posição atual do cavalo e o caractere '•' indica um possível movimento do cavalo. Nota-se que a representação usando quadrados pretos e brancos do tabuleiro de Xadrez não é distinguida.

                
                             01 02 03 04 05 06 07 08
                             09 10 11 12 13 14 15 16
                             17 18 19 20 21 22 23 24
                             25 26 27 28 29 30 31 32                   Da posição 22, o cavalo pode se mover para as posições 05,
                             33 34 35 36 37 38 39 40                   07, 12, 16, 28, 32, 37 ou 39. Da posição 57, o cavalo pode se
                             41 42 43 44 45 46 47 48                   mover para as posições 42 ou 51.
                             49 50 51 52 53 54 55 56
                             57 58 59 60 61 62 63 64

                
                    O tabuleiro com as células numeradas

                
                    Os movimentos dos peões são um pouco diferentes do Xadrez, uma vez que o peão só pode se mover um quadrado para frente e todos os outros peões se movem ao mesmo tempo. Eles nunca se movem em diagonal. As casas do tabuleiro são numeradas de 1 a 64, como mostrado acima. Os peões se movem na direção vertical de cima para baixo, de modo que os quadrados numerados 57-64 são os objetivos dos peões.

                
                    Cada rodada do jogo é composta por um movimento do cavalo seguido por um movimento simultâneo de todos os peões ainda não capturados.

                
                    A fim de capturar um peão, o jogador deve mover o cavalo para o quadrado onde está o peão. O peão capturado deixa o tabuleiro e somente os peões restantes avançam para a próxima rodada. Para vencer o jogo, o jogador deve capturar todos os peões. Se um peão conseguir chegar a última linha, torna-se um rei. Com isso o cavalo tem apenas mais um movimento para captura-lo. Se isso não acontecer, o rei se move e isso significa que o jogo acaba e o jogador perde. Além disso, se o cavalo se mover para um quadrado que vai ser ocupado por um peão, no próximo movimento dos peões o cavalo é capturado pelo peão e o jogador perde.

                
                    Sua tarefa é escrever um programa que analise um tabuleiro de ""Runner Pawns"" e responda se existe uma sequencia de movimentos para o cavalo vencer. Se for possível, o programa deve determinar o número mínimo de movimentos necessários para o cavalo capturar todos os peões.";A entrada contém várias instâncias do problema, uma por linha. Cada exemplo começa com um inteiro P que representa o número de peões (0 ≤ P ≤ 8), seguido por P inteiros (1 ≤ A1, A2, ..., Ap ≤ 64) que descrevem a posição inicial de cada peão seguido de um inteiro H (1 ≤ H ≤ 64) que representa a posição inicial do cavalo. O fim da entrada é indicado quando P = 0.;Para cada instancia do problema da entrada, seu programa deve imprimir uma única linha, contendo a resposta para o problema. Se houver uma sequencia de movimentos para o cavalo que capture todos os peões (e sem que o cavalo seja capturado por um peão), o programa deve imprimir o comprimento da menor sequencia de movimentos possível. Caso contrário, seu programa deve imprimir a palavra 'impossivel'.;True;6 / 10;126;64;50.79%
1344;Parceiros de Telecomunicação;Grafos;7;"A ICPC, uma companhia de telecomunicação internacional, quer melhorar sua relação com as empresas que utilizam os seus serviços, oferecendo a estas descontos nas ligações feitas para um determinado conjunto de telefones, sendo este selecionado por cada empresa cliente. Para ajudar a ICPC a decidir o custo para este novo serviço, as empresas clientes da ICPC fizeram uma busca em suas bases de dados e produziram uma lista de chamadas telefônicas feitas de uma empresa para a outra no último ano. Se uma empresa se comunicou com outra (efetuando ou recebendo uma chamada) durante o último ano, diremos que estas são Parceiras de Negócios.

                
                    Você foi contratado pela ICPC para processar a lista de ligações do último ano e determinar o tamanho (em número de empresas) do maior conjunto de empresas que são Parceiras de Negócios de pelo menos K outras empresas neste mesmo conjunto e que todas as empresas desse conjunto possam fazer tratos de negócios diretamente ou indiretamente com qualquer outra empresa nesse conjunto (uma empresa pode fazer tratos diretamente com outra, se forem parceiros de negócios e as duas estiverem no conjunto). Isto é, você deve encontrar um conjunto S de empresas tal que toda empresa que pertence a S tem pelo menos K parceiros de negócios que também estão em S (e possivelmente parceiros que estão fora de S), onde K é um parâmetro definido pela ICPC.";"Seu programa deverá processar diversos casos de teste. A primeira linha de um caso de teste contém três inteiros N, P e K. N representa o número total de empresas clientes da ICPC (1 ≤ N ≤ 1000); empresas são identificadas por um número entre 1 e N. P representa o total de pares de parceiros de negócios produzidos pela lista de ligações do último ano; e K é o número mínimo de parceiros que uma empresa necessita para pertencer ao conjunto final (1 ≤ K ≤ N-1), como descrito acima. As próximas P linhas descrevem cada par de parceiros de negócios, representados por dois inteiros X e Y, onde X e Y são empresas (1 ≤ X ≤ N, 1 ≤ Y ≤ N e X ≠ Y). O valor N = 0 indica o fim da entrada.";Para cada caso de teste da entrada, seu programa deverá imprimir uma única linha, contendo o tamanho do maior conjunto de empresas encontrado pelo seu programa.;False;7 / 10;188;98;52.13%
1345;Região Segura;Geometria Computacional;9;"Você foi contratado pela Minas Nunca Mais, uma organização não-governamental que tem como objetivo o banimento do uso de minas terrestres. Além de trabalhar no aspecto político, tal como convencer governantes a entrar na Campanha Internacional de Banimento das Minas Terrestres, MNM também trabalha desarmando minas deixadas por guerras passadas.

                
                    Hoje em dia, minas são detectadas por satélites ou aviões de vigilância. Mas para desarmar uma mina você precisa chegar próximo a ela. Na maioria dos casos, a única maneira de se aproximar de um campo minado é de helicóptero. Para limpar o campo, você precisa encontrar a região mais segura dentro do campo para que o helicóptero possa pousar nela. Esta região é um retângulo com lados paralelos aos eixos das coordenadas, sem nenhuma mina dentro e sendo o menor lado o maior possível. Mais precisamente, seja A e B o comprimento dos lados de todos os possíveis retângulos com não contém nenhuma mina e A <= B; a região mais segura é um retângulo com o maior valor de A e o maior valor de B. Isto é, entre todos os retângulos que não contém nenhuma mina e nos quais o menor lado é o A (maior possível), a região mais segura é o retângulo que contém o maior B.

                
                    Dado o limite do retângulo de um campo minado e as posições de todas as minas dentro deste, você deverá escrever um programa para encontrar o tamanho da região mais segura.";Seu programa deverá processar dados de diversos casos de teste. A primeira linha de um campo minado contém quatro inteiros X1, Y1, X2 e Y2 os quais são os limites do campo. (X1, Y1) são as coordenadas do canto inferior esquerdo do campo, (X2, Y2) são as coordenadas do canto superior direito do campo (-20000 ≤ X1 < X2 ≤ 20000 e -20000 ≤ Y1 < Y2 ≤ 20000). A segunda linha contém um único inteiro N indicando o número de minas detectadas no campo (1 ≤ N ≤ 300). As seguintes N linhas contém dois inteiros X e Y cada, descrevendo a posição da uma mina (X1 ≤ X ≤ X2 e Y1 ≤ Y ≤ Y2). Duas minas não compartilham a mesma posição. O final da entrada é indicado quando X1 = Y1 = X2 = Y2 = 0.;Para cada campo minado de sua entrada seu programa deverá escrever uma linha com dois inteiros A e B, onde A ≤ B, descrevendo o tamanho da posição mais segura.;False;9 / 10;72;26;36.11%
1346;Brincadeira de Criança;Matemática;10;"Nativos da pequena ilha de Tookutoo estão interessados em matemática, e em ensinar seus filhos a jogar vários jogos orientados a matemática. Um quebra-cabeça popular em Tookutoo é jogado com placas de cerâmica como mostradas na figura abaixo.

                ​

                
                    Como pode ser visto na figura acima, as placas são semelhantes ao dominó, sendo divididas em duas partes, em cada peça um valor inteiro é impresso. As peças acima possuem valores [2, 1], [6, 3] e [3, 1]. Note que uma placa [a, b] também pode ser escrita como [b, a]. O quebra-cabeça começa com um jogador a receber um conjunto de placas escolhidas aleatoriamente de um conjunto amplo e variado. Usando o dado conjunto de placas, o jogador tem de encontrar uma combinação em que as placas são colocadas lado a lado sobre a mesa, de tal modo que a soma dos valores do lado superior é igual à soma dos valores no lado inferior. Por exemplo, para o conjunto da figura anterior, um arranjo correto é

                
                    1 6 1
                    2 3 3

                
                    Se não for possível encontrar uma combinação utilizando todas as placas escolhidas, o jogador pode descartar uma das placas, mas o valor da soma no arranjo deve ser o mais alto possível. Além disso, se mais de uma placa puder ser eliminada, deixando a mesma soma, o jogador deverá descartar a placa [a, b] de tal forma que a ≤ b e a seja o menor valor possível, considerando todas as placas possíveis a serem descartadas. Você deve escrever um programa que, dado um conjunto de placas, tenta encontrar uma combinação que satisfaça as condições do quebra-cabeça, descartando uma placa, se necessário.";Seu programa deve processar vários casos de teste. A primeira linha de um caso de teste contém um inteiro N, o número de placas em ensaio (0 ≤ N ≤ 400). Cada uma das N linhas seguintes contém dois inteiros Xi e Yi descrevendo uma placa que foi dada ao jogador (0 ≤ Xi ≤ 1000 e 0 ≤ Yi ≤ 1000). O valor N = 0 indica o final da entrada.;"Para cada caso de teste seu programa deve produzir uma linha que descreva o resultado. Se não for possível encontrar uma combinação, imprima a palavra 'impossible'. Se for possível encontrar uma combinação, imprima a soma e a descrição da placa descartada (se houver). Se você tiver que descartar uma placa, descreva na forma 'discard X Y', onde X ≤ Y; caso contrário imprima 'discard none'.";True;10 / 10;94;23;24.47%
1347;Mina Kriptonita;Matemática;10;"No ano de 2222, um terrível desastre aconteceu na mina de kryptonita em Marte: um marsquake sacudiu parte do planeta. Diferentemente de terremotos na Terra, marsquakes não são incomuns em Marte. Este, no entanto, gerou uma mina que começou a afundar-se lentamente para o solo. A mina tem uma forma externa retangular, e seu interior é como um labirinto, com elevações, paredes retas e, mais o importante, teletransportes. Teletransporte, como você sabe, pode transportar pessoas instantaneamente de um lugar para outro. O teletransporte da mina são dos modelos antigos, usando a tecnologia antiga, e só pode teleportar pessoas se houver uma clara visão a partir de uma outra cabine de teletransporte (isto é, se não existem obstáculos ou paredes entre as cabines). Você pode ver o mapa da mina na figura abaixo.

                ​​

                
                    Você está preso sozinho dentro da mina. Felizmente, você tem um mapa de toda a minha, conhece a sua posição atual, a posição das paredes, os locais de saída e todas as cabinas de teletransporte. Infelizmente, o marsquake afetou o sistema de energia, e você sabe que o teletransporte só pode ser usado por um período e número limitado de vezes.

                
                    Você quer sair andando o mínimo possível, já que torceu o tornozelo durante o marsquake. Você deve encontrar o caminho do seu local atual para a saída que exige a mínima quantidade de caminhada.";A entrada é constituída por vários casos de teste. A primeira linha de um caso de teste contém três inteiros N, M e L, que indicam, respectivamente, o número de vezes que os teletransportes podem ser usados, o número de paredes da mina e o número de cabines do teletransporte (0 ≤ N, M, L ≤ 50). Cada uma das linhas seguintes contém M quatro inteiros X1, Y1, X2 e Y2, que representam as coordenadas dos pontos de extremidade de uma parede. Você pode ignorar a espessura das paredes e assumir que eles não se cruzam entre si (-20.000 ≤ X1 < X2 ≤ 20.000 e -20000 ≤ Y1 ≤ Y2 20.000). As próximas L linhas contêm a localização dos estandes de teletransporte, dada por dois inteiros Xp e Yp. A última linha de cada caso de teste contém quatro inteiros Xb, Yb, Xe e Ye onde (Xb, Yb) são as coordenadas da sua localização e (Xe, Ye) são as coordenadas para sair da mina. O fim da entrada é indicado por M = N = L = 0.;Para cada caso de teste da entrada, seu programa deverá imprimir uma única linha, contendo um número inteiro representando a distância que você precisa para andar para sair da mina. Claro, você não deve considerar as distâncias que você se teletransportou. A distância deve ser arredondado para o número inteiro mais próximo.;True;10 / 10;69;26;37.68%
1348;X-Mart;Grafos;7;"A bem conhecida rede de supermercados X-Mart decidiu cortar custos, reduzindo o número de diferentes produtos disponíveis nas prateleiras de suas lojas. O departamento de marketing ficou preocupado se esta decisão afetaria as vendas, e decidiu explorar a redução dos produtos para promover a relação com clientes.

                
                    Para tal, a rede de supermercados X-Mart organizou uma votação na Internet, na qual os clientes poderiam escolher quais produtos eles gostariam que permanecessem nas prateleiras, e quais produtos eles gostariam que fossem retirados destas. A lista dos produtos disponíveis atualmente foi publicada na Internet.

                
                    Para simplificar o sistema de votação, foi permitido a cada consumidor escolher no máximo dois produtos para votar a favor (significando que o supermercado deveria continuar a vender estes) e no máximo dois produtos para votar contra (significando que o supermercado deveria parar de vender estes).

                
                    Sendo que o departamento de marketing possui todos os votos em sua base de dados, este quer saber se é possível escolher uma nova lista de produtos que satisfaça TODOS os clientes que votaram. O departamento de marketing considera que um cliente estará satisfeito se pelo menos um dos produtos que ele/ela votou a favor continua sendo vendido, e se pelo menos um dos produtos que ele/ela votou contra foi removido das prateleiras dos supermercados. Você pode considerar que um cliente não vota a favor e contra um mesmo produto.";Seu programa deverá processar diversos casos de teste. A primeira linha de um caso de teste contém dois inteiros C e P, representando respectivamente o número de clientes e o número de produtos no teste (1 ≤ C ≤ 1000 e 1 ≤ P ≤ 10000). Cada uma das próximas C linhas descreve a preferência de um cliente, representada por quatro inteiros X, Y, S e T (0 ≤ X, Y, S, T ≤ P). X e Y são os produtos que o cliente quer que o supermercado continue vendendo, S e T são os produtos que o cliente quer que o supermercado pare de vender. Um valor 0 (zero) para qualquer uma das variáveis X, Y, S e T significa que o cliente não está fazendo uso daquele voto. Uma linha com C = P = 0 indica o fim da entrada.;Para cada caso de teste seu programa deve imprimir uma linha, contendo ou a palavra 'yes' (se é possível satisfazer a todos os clientes que votaram) ou a palavra 'no' (se não é possível).;False;7 / 10;240;116;48.33%
1349;Efeito Ruído;Ad-Hoc;5;"Pequenos e baratos scanners industriais podem apenas ler imagens em escala cinza, onde são imagens com pixels de valores de intensidade em um raio de inteiros [0, 255]. Uma companhia que fabrica máquinas de venda automáticas deseja utilizar estes pequenos scanners para validar os símbolos usados em suas máquinas. Símbolos são pequenos chips quadrados de metal com buracos estrategicamente colocados. Símbolos com diferentes buracos são utilizados para diferentes valores.

                

                Figura 1: Símbolo para uma máquina de vendas.

                
                    Um scanner vai produzir uma imagem do símbolo introduzido pelo cliente e o programa de computador vai validar isso. Na imagem produzida pelo scanner, metal vai aparecer como pixels escuros (valores próximos a 0) e buracos vão aparecer como pixels mais claros (valores próximos a 255). Há dois problemas que devem ser resolvidos no processo de validação. O primeiro problema é que, visto que o símbolo é um quadrado, um cliente pode introduzi-lo na máquina de diversas maneiras. O segundo problema é que, graças à baixa qualidade da imagem gerada por aqueles scanners baratos, as mesmas poderão conter “ruídos” (erros). Para validar o símbolo, a máquina deverá comparar o resultado do scanner com uma “imagem padrão” do símbolo, previamente produzida usando um scanner de alta qualidade.

                
                    Você deverá escrever um programa o qual, dada a imagem padrão de um símbolo e uma imagem produzida pelo scanner, determina a taxa de precisão a qual o símbolo obterá. A taxa de precisão é a porcentagem de pixels da imagem do scanner os quais o valor da intensidade difere em 100 ou menos dos pixels da imagem padrão. Como o símbolo pode ter sido introduzido de diversas maneiras, nós estamos interessados na maior taxa de precisão possível, considerando todas as posições do símbolo.";"Seu programa deverá processar diversos casos de teste. Cada caso de teste especifica o tamanho da imagem do símbolo e os valores dos pixels da imagem padrão e da imagem do scanner. A primeira linha de um caso de teste contém um inteiro L que indica o tamanho, em pixels, da imagem (1 ≤ L ≤ 400). As próximas L linhas irão conter L inteiros cada, representando os valores dos pixels das linhas da imagem padrão. Após estas, as próximas L linhas irão conter os valores dos pixels das linhas da imagem do scanner.

                O final da entrada é indicado por L = 0.";Para cada caso de teste seu programa deverá imprimir apenas uma linha contendo a taxa de precisão da imagem correspondente. A taxa de precisão deverá ser impressa como um número real com dois dígitos de precisão, e o último dígito decimal deverá ser arredondado. A entrada não conterá nenhum caso de teste onde diferenças em arredondamento serão significantes.;True;5 / 10;395;134;33.92%
1350;Esta Sentença é Falsa;Paradigmas;5;"A corte do rei Xeon 2.4 está sofrendo com intrigas e conspirações. Um documento recentemente descoberto pelo Serviço Secreto do Rei revela que talvez faça parte de um esquema malévolo. O documento contém um simples conjunto de sentenças que diz a verdade ou a mentira para cada afirmação. As sentenças tem a forma de ""A sentença X é falsa/verdadeira"" onde X indefine uma sentença do conjunto. O Serviço Secreto do Rei suspeita que as sentenças se referem a outro, ainda não descoberto, documento.

                
                    Enquanto eles tentam descobrir a origem e propósito do documento, o Rei ordenou-o a descobrir se o conjunto de sentenças que o documento contém é consistente, isto é, se há uma verdadeira afirmação nas sentenças. Se o conjunto é consistente, o Rei quer que você determine o máximo de números de sentenças que podem ser verdadeiras nas afirmações do documento.";"A entrada contém vários casos de teste. Cada caso de teste começa com uma linha contendo um único inteiro N, que indica o número de sentenças no documento (1 ≤ N ≤ 1000). As N linhas seguintes contém cada uma, uma sentença. Sentenças são numeradas sequencialmente, na ordem em que aparecem na entrada (a primeira sentença é 1, a segunda é 2, e assim vai). Cada sentença tem a forma ""Sentence X is true."" (A sentença X é verdadeira) ou ""Sentençe X is false."" (A sentença X é falsa), onde 1 ≤ X ≤ N.

                
                    O valor N = 0 indica o fim da entrada.";"Para cada entrada seu programa deve gerar uma linha de saída. Se a entrada é consistente, seu programa deve imprimir o número máximo de sentenças verdades da entrada. Caso contrário seu programa deve imprimir a palavra ""Inconsistent"" (Inconsistente).";False;5 / 10;85;49;57.65%
1351;Supermercado;Ad-Hoc;8;"Sr. Jones é um marido exemplar. Todo sábado de manhã a Sra. Jones lhe dá uma lista de itens a serem comprados no supermercado e ele compra exatamente o que lhe foi pedido, sempre escolhendo as marcas com os menores preços. Mas Sr. Jones odeia ir ao mercado nos sábados, visto que seus corredores estão lotados de carregadores. Ele deseja mudar o jeito com que ele faz compras. Ao invés de ir para lá e para cá para comprar os produtos na lista de sua esposa, ele vai tentar comprar os itens passando apenas uma vez por cada corredor, pegando os produtos na ordem exata dada na lista. Então ele pediu a você para escrever um programa que o ajude com seu novo estilo de fazer compras.

                Dada as informações sobre os produtos disponíveis no supermercado junto com seus preços na ordem em que aparecem na lista de Sr. Jones e a lista de produtos dada pela sua mulher, seu programa deve determinar o menor preço que ele pagaria.

                Sr. Jones compra os produtos na ordem em que eles aparecem em sua lista e ele nunca volta atrás enquanto anda pelos corredores. Portanto, se ele compra o i-ésimo produto no seu caminho para o j-ésimo item da lista, o próximo produto a ser comprado é o (j+1)-ésimo item da lista – e deve ser comprado dos produtos que vem depois de i em seu caminho. A figura abaixo mostra um exemplo onde produtos são identificados por inteiros. Note que diferentes marcas do mesmo produto poder aparecer separadamente. No exemplo Sr. Jones deve comprar os produtos 1, 1, 2, 20 (note que o produto 1 aparece duas vezes na lista). Para o exemplo, o custo mínimo que Sr. Jones pode conseguir, seguindo suas limitações, é 21.30. Note também que com esse novo estilo de fazer comprar pode ser impossível para Sr. Jones comprar todos os itens da sua lista; neste caso, seu programa deve alertar Sr. Jones.

                

                (a) Lista da Sra. Jones   (b) Lista de produtos com seus respectivos preços e ordem em que aparecem na direção de Sr. Jones pelos corredores.";"Seu programa deverá processar dados para diversos casos de teste (sessões de compra). A primeira linha na descrição de uma sessão de compra contém dois inteiros M e N; M indica o número de itens na lista da Sra. Jones (1 ≤ M ≤ 100) e N representa o número total de produtos disponíveis no supermercado (1 ≤ N ≤ 100,000). 
				
				A próxima linha contém M inteiros Xi, representando a lista de produtos da lista da Sra. Jones (1 < Xi ≤ 100000, 1 ≤ i ≤ M). Seguem N linhas, representando os produtos do supermercado na ordem em que eles aparecem no caminho do Sr. Jones. Cada uma destas linhas contém um inteiro K e um número real P, que representam, respectivamente, um identificador de produto e seu preço (1 ≤ K ≤ 100,000). O fim da entrada é indicado por M = N = 0.";Para cada sessão de compra da entrada, seu programa deve produzir uma linha de saída,  contendo o menor custo que Sr. Jones pode conseguir. Se não é possível comprar todos os itens da sessão, imprima “Impossible”. O custo deve ser impresso como um número real com precisão de duas casas decimais, e o último dígito decimal deve ser arredondado. A entrada não vai conter casos de teste onde diferenças de arredondamento são significantes.;True;8 / 10;777;214;27.54%
1352;Loteria Quadrada;Matemática;8;"O Governo da República Unida de Little Tower está desenvolvendo um novo tipo de loteria. O principal objetivo da loteria é arrecadar dinheiro para a construção do Estádio Olímpico Little Tower, para atender a 400.000 pessoas. A proposta do estádio é uma estratégia de Little Tower para sediar a Copa do Mundo em 2078. O sorteio será executado semanalmente. Cada semana, os bilhetes, sob a forma de cartões quadrados serão vendidos. Cada bilhete terá quadrados com números impressos no interior, de uma sequência de N linhas e N colunas, conforme mostrado na Figura 1.

                
                    ​Fig 1: Um exemplo de bilhete para N = 3.

                
                    Em cada bilhete nenhum número aparece duas vezes e, portanto, todos os números de 1 a N2 estarão presentes (em ordem aleatória de posições). Não haverá duas passagens iguais vendidas na mesma semana. No entanto, todos os possíveis diferentes bilhetes serão vendidos, uma vez que os cidadãos de Little Tower amam loterias. Os ingressos serão vendidos por T$ 1,00 (um Torreal, Unidade monetária de Little Tower). Para escolher o(s) vencedor(es), quatro números (entre 1 e N2) serão escolhidos aleatoriamente e o(s) bilhete(s) cujos números escolhidos sejam vértices de um quadrado, será concedido o prêmio em dinheiro. Por exemplo, o bilhete mostrado na Figura 1 é um bilhete premiado, se os números colhidos são (6, 3, 2, 9), (1, 4, 2, 5) ou (7, 8, 9, 6), mas não é um bilhete premiado, se os números colhidos forem (1, 7, 2, 9). Se mais de um bilhete for vencedor, os clientes que compraram os bilhetes vão compartilhar o prêmio da semana. O governo de Little Tower pede sua ajuda para determinar o valor do prêmio a ser pago para cada bilhete vencedor para um dado N, e uma determinada percentagem, sobre o montante total recebido pelos ingressos, que o governo quer pagar como prêmios.";A entrada conterá vários casos de teste. Cada teste é descrito em uma linha que contém dois números, um inteiro N e um valor de ponto flutuante (real) P, representando, respectivamente, o número de linhas (e colunas) dos bilhetes, bem como a percentagem do dinheiro recebido que será pago como prêmio (2 ≤ N ≤ 100 e 0 ≤ P ≤ 100.0). O final da entrada é indicado por N = P = 0.;Para cada caso de teste seu programa deve produzir uma linha de saída, contendo um valor real representando o prêmio a ser pago para cada bilhete premiado. O valor do prêmio deverá ser impresso com 2 dígitos de precisão, e o último dígito decimal deve ser arredondado. A entrada não irá conter os casos de teste onde diferenças de arredondamento são significativas.;True;8 / 10;89;46;51.69%
1353;Super Poker;Matemática;9;"Eu tenho um conjunto de cartas Super Poker, que consistem em um número infinito de cartas. Para cada valor positivo inteiro I, existem exatamente quatro cartas que o valor é I: Espadas(E), Copas(C), Paus(P) e Ouros(O). Não existem cartas de outros valores.

                
                    Dados dois valores inteiros positivos N e K, de quantos jeitos você pode conseguir o máximo de cartas K cujo valor somam-se a N? Por exemplo, de N = 15 e K = 3, um jeito é 3C + 4E + 8C, mostrado abaixo:";Terá no máximo vinte casos de teste, cada um com dois inteiros, N e K(1 ≤ N ≤ 109, 1 ≤ K ≤ 10). A entrada é terminada por N = K = 0.;Para cada caso de teste imprima o número de possibilidades, modulo (%) 1.000.000.009.;True;9 / 10;38;12;31.58%
1354;Um Quadrado Grande, Por Favor;Paradigmas;9;"Tomy possui vários quadrados de papel. O comprimento do lado destes quadrados(chamamos de 'tamanho'), variam de 1 a N-1, e ele possui na verdade, inúmeros quadrados de cada tipo. Ele costumava ter muito orgulho de seus quadrados, mas um dia, de repente, ele quis ter um maior - um quadrado de tamanho N! Embora ele não tem tal quadrado, ele pode fazê-lo com os quadrados que ele já tem. Por exemplo, um quadrado de tamanho 7 pode ser feito com nove quadrados menores, como mostrado abaixo.

                
                    

                
                    Note que não deve haver nenhum espaço vazio no quadrado, e nenhum papel adicional fora do quadrado, e os pequenos quadrados não devem se sobrepor. Como você pode imaginar, Tomy quer fazê-lo usando o número mínimo de quadrados que ele tem, você pode ajudar?";A primeira linha da entrada contém um único inteiro T, indicando o número de casos de teste (1 ≤ T ≤ 20). Cada caso contém um único inteiro N (2 ≤ N ≤ 50).;Para cada caso de teste da entrada, imprima uma linha contendo um único número inteiro K, indicando o número mínimo de quadrados necessários para construir a praça de destino. cada uma das K linhas seguintes, contém três inteiros X, Y, L, indicando as coordenadas do canto superior esquerdo, e o comprimento do lado do quadrado correspondente (1 ≤ x, y ≤ N).;True;9 / 10;46;13;28.26%
1355;Compressor;Strings;10;"Sua tarefa é comprimir uma string de no máximo 200 caracteres, usando o seguinte esquema:

                
                    - Adjacentes que se repetem: [S]k que significa: S repetido k vezes (onde k é um número inteiro de um byte, lembre-se que o comprimento da String não excede 200).

                
                    - Repete com lacunas: [S]k{S_1}t_1{S_2}t_2...{S_r}, onde 1 ≤ t_i < k, t_i < t_{i+1} que significa: escrever S para k vezes, em seguida, introduza a String S_i após a t_i ocorrência de S.

                
                    Note que a compressão é feita de forma recursiva, para S, S_1, ..., S_r mencionado acima, onde tudo pode ser comprimido.

                Por exemplo: para a string original

                
                    I_am_WhatWhat_is_WhatWhat

                
                    O resultado ideal seria:

                
                    I_am_[What]4{_is_}2";Há, no máximo, 20 casos de teste, cada caso de teste é uma string contendo não mais do que 200 caracteres imprimíveis, sem espaços em branco (ou seja, sem espaços e sem tabulações), colchetes (ou seja, não há {'(', ')', '[','] ',' {','} '}) e nem dígitos. As letras são case-sensitive.;Para cada caso de teste, imprima o comprimento da String mínima, e uma String comprimida. Note que cada número inteiro de um byte deve ser contado como um caractere, mesmo que tenha dois ou três dígitos na sua forma decimal.;False;10 / 10;32;2;6.25%
1356;Júpiter Ataca!;Estruturas e Bibliotecas;7;"Júpiter está invadindo! As principais cidades tem sido destruídas por espaçonaves Jovianas e a humanidade está lutando contra. Nlogônia está à frente da contraofensiva, invadindo os sistemas de controle das espaçonaves.

                
                    Diferente dos computadores Terráqueos, nos quais usalmente um byte possui 28 valores possíveis, os computadores Jovianos usam bytes com B possíveis valores, {0,1,...,B-1}. Os engenheiros de software Nlogonianos tem realizado engenharia reversa sobre o firmware das espaçonaves Jovianas, e planejam sabotá-lo de modo que as embarcações eventualmete autodestruam-se.

                
                    Como uma medida de segurança, entretanto, as espaçonaves Jovianas rodam um programa supervisor que periodicamente checa a integridade do firmware, aplicando hashing sobre porções dele e comparando o resultado contra valores bons conhecidos. Para aplicar o hashing sobre uma porção do firmware do byte na posição i até o byte na posição j, o supervisor usa a função de hashing
                
                    ​
                

                
                    onde P é um número primo. Por exemplo, se B = 20 e P = 139, enquanto os bytes 2 ao 5 do firmware tem os valores f2 = 14, f3 = 2, f4 = 2 e f5 = 4 então

                
                    H(f2, . . . f5) = B0 f5 + B1 f4 + B2 f3 + B3 f2 (mod P)
                                                         = 200 × 4 + 201 × 2 + 202 × 2 + 203 × 14 (mod 139)
					               = 4 + 40 + 800 + 112000 (mod 139)
                    = 112844 (mod 139)      
                    = 115                            


                
                    Os criptologistas Nlogonianos precisam encontrar um meio de sabotar o firmware sem esbarrar no supervisor. Como um primeiro passo, a você foi atribuída a função de escrever um programa para simular a intercalagem de dois tipos de comandos: edição de bytes do firmware pelos engenheiros de software Nlogonianos, e o cálculo de hashes de porções do firmware pelo program supervisor Joviano. No início da simulação o valor de cada byte é zero.";"Cada caso de teste é descrito usando várias linhas. A primeira linha contém quatro inteiros B, P, L e N, onde B é o número de possíveis valores de um byte Joviano, P é o módulo da hash Joviana (2 ≤ B < P ≤ 109 e P primo), L é o comprimento (número de bytes Jovianos) do firmware das espaçonaves, e N é o número de comandos a simular (1 ≤ L, N ≤ 105). No início da simulação o valor de cada byte no firmware é fi = 0 para 1 ≤ i ≤ L. Cada uma das N linhas seguintes descreve um comando a simular. Cada descrição de comando começa com uma letra maiúscula que é ou um 'E' ou um 'H', com os seguintes significados.

                
                    'E': A linha descreve um comando de edição. A letra é seguida por dois inteiros I e V indicando que o byte na posição I do firmware (ou seja, fi) deve receber o valor V (1 ≤ I ≤ L e 0 ≤ V ≤ B-1).
                    'H': A linha descreve um comando de hash. A letra é seguida por dois inteiro I e J indicando que H(fi...fj) deve ser computado (1 ≤ I ≤ J ≤ L).
                

                
                    O último caso de teste é seguido por uma linha contendo quatro zeros.";Para cada caso de teste imprima os resultados de cada comando de hashing na entrada. Na i-ésima linha escreva um inteiro representando o resultado do i-ésimo comando de hashing. Imprima uma linha contendo um único caractere '-' (hífen) após cada caso de teste.;True;7 / 10;285;151;52.98%
1357;Em Braille;Ad-Hoc;4;"O sistema Braille, desenvolvido por Louis Braille em 1825, revolucionou a comunicação escrita para as pessoas cegas e visualmente debilitadas. Braille, um francês cego, desenvolveu uma linguagem tátil onde cada elemento é representado por uma célula com seis posições, arranjadas em três fileiras e duas colunas. Cada posição pode ser relevada ou não, permitindo 64 configurações diferentes que podem ser sentidas por dedos treinados. A figura abaixo mostra a representação Braille para os dígitos decimais (um ponto preto indica uma posição relevada).

                
                    ​

                
                    De modo a desenvolver um novo sistema de software para ajudar professores a lidar com estudantes cegos ou visualmente debilitados, um módulo de dicionário Braille é necessário. Dada uma mensagem, composta apenas por dígitos, seu trabalho é traduzi-la para ou do Braille. Você pode ajudar?";"Cada caso de teste é descrito usando três ou cinco linhas. A primeira linha contém um inteiro D representando o número de dígitos em uma mensagem (1 ≤ D ≤ 100). A segunda linha contém uma única letra maiúscula 'S' ou 'B'. Se a letra é 'S', a próxima linha contém uma mensagem composta de D dígitos decimais que seu programa deve traduzir para o Braille. Se a letra é 'B', as próxima três linhas contém uma mensagem composta de D células Braille que seu programa deve traduzir do Braille. As células Braille são separadas por espaços simples. Em cada célula Braille uma posição relevada é denotada pelo caractere '*' (asterisco), enquanto uma não relevada é denotada por um caractere '.' (ponto).

                
                    O último caso de teste é seguido por uma linha contendo um zero.";Para cada caso de teste imprima apenas os dígitos da tradução correspondente, no mesmo formato que a entrada (veja os exemplos para maiores explicações).;True;4 / 10;1190;600;50.42%
1358;Cortando Extremidades;Geometria Computacional;10;"Tio Jeff é dono de uma loja de vidros, que vende painéis de vidros para janelas e quadros de foto. Como você provavelmente sabe, um painel de vidro pode ser cortado apenas de extremidade à extremidade em linha reta. A figura abaixo mostra como o painel de vidro pode ser cortado em três painéis menores.

                
                        ​

				
                    (a) painel de vidro original              (b) primeiro corte                 (c) segundo corte                 
                
                    Tio Jeff normalmente opera da seguinte forma. Ele primeiro coleta vários pedidos de pequenos painéis retangulares, para janelas ou quadros de foto. Ele então marca a posição de cada painel retangular em um grande painel retangular, de forma a que nenhum deles se sobreponha. Finalmente ele realiza uma sequência de cortes verticais e horizontais, sempre de extremidade à extremidade do painel, para produzir painéis para todos os clientes.

                
                    Já que a última fase (a de cortar o grande painel em pedaços) é a parte mais chata que alguém possa jamais imaginar, tio Jeff está pedindo sua ajuda. Ele quer um programa no qual dado um grande painel retangular e as coordenadas esquerdo-inferior e direito-superior de cada retângulo marcado, determine a ordem no qual cada corte de extremidade à extremidade deve ser feito. Essa lista de cortes será dada a máquina que fará os entediantes cortes para ele!";"A entrada contém vários casos de teste. A primeira linha do teste contém um inteiro N indicando o número de janelas e quadros de foto, sendo (2 ≤ N ≤ 2000). Cada uma das próximas N linhas contém quatro inteiros X1, Y1, X2, Y2, onde (X1, Y1) e (X2, Y2) representam as coordenadas esquerda-inferior e direita-superior marcadas por tio Jeff no grande painel de vidro (-5000 ≤ X1, Y1, X2, Y2 ≤ 5000; X1 < X2 e Y1 < Y2). Você deve assumir o seguinte caso de teste:

                
                    Os retângulos marcados não se sobrepõem (mas pode haver interseções nos pontos as bordas) e dividem o grande painel de vidro em regiões retângulares, de modo a não haver desperdídio. Isso significa que as coordenadas esqueda-inferior e direita-superior do grande painel podem ser inferidas com as coordenadas dos triângulos marcados.

                    É possível partir o o grande painel de vidro em retângulos menores atravéz de uma sequência de cortes de extremidade à extremidade.
                

                
                    O fim da entrada é indicado por N = 0.";"Para cada caso de teste na entrada, seu programa deve produzir uma lista ordenada de cortes que devem ser feitos para separar o grande painel nos painéis menores desejados. Cada corte deve aparecer em uma linha diferente. Um corte é descrito em quatro inteiros X1, Y1, X2, Y2, onde (X1, Y1) e (X2, Y2) especificam as marcações do corte, sendo X1 < X2 e Y1 = Y2 para um corte horizontal, e X1 = X2 e Y1 < Y2 para um corte vertical. Como mais de um corte é possível, seu programa deve imprimir a lista em uma ordem particular. Se em algum ponto mais que um corte for possível, imprima primeiramente o corte com o X1 menor; se mais de um corte ainda for possível, imprima primeiro aquele com o Y1 menor. Imprima uma linha em branco após cada lista do caso de teste.";True;10 / 10;74;31;41.89%
1359;Taxa de Divisão de Terreno;Ad-Hoc;9;"Companhia Internacional de Projetos Concretos (CIPC) é uma companhia especializada in construção de casas para o mercado de alta qualidade. CIPC está planejando um desenvolvimento habitacional para casas ao redor de um lago. As casas serão construídas em terrenos de diferentes tamanhos, mas todos os terrenos estão na costa do lago. Adicionalmente, cada terreno terá exatamente dois vizinhos no desenvolvimento habitacional: um à esquerda e um à direita.

                
                    

                
                    Figura 1: Plano de desenvolvimento indicando os tamanhos dos terrenos (em unidades de área) do novo desenvolvimento habitacional.

                
                    CIPC possui os direitos do terreno em volta do lago e precisa dividir ele em terrenos de acordo com o plano do desenvolvimento habitacional. Porém, o Conselho do Condado tem curiosas regulamentações no que diz respeito a taxas de terrenos, pretendendo a desencorajar a criação de pequenos terrenos:

                
                    um terreno pode apenas ser dividido usando uma sequência de divisões de terreno;
                    a divisão de um terreno é uma operação que divide um pedaço de terreno em dois pedaços de terreno; e
                    para cada divisão de terreno, uma taxa de divisão de terreno deve ser paga.
                

                
                    Seja A a área do maior terreno resultante da divisão, o valor da taxa da divisão do terreno é A x F, onde F é o fator da taxa de divisão definido anualmente pelo Conselho do Condado. Note que graças a (2), para dividir um pedaço de terreno em N terrenos, N – 1 divisões de terreno deverão ser feitas e, portanto, N – 1 pagamentos deverão ser realizados ao Conselho do Condado.

                
                    Por exemplo, considere a figura acima, se o fator da taxa de divisão for 2.5 e a primeira divisão do terreno separa o terreno de 500 unidades de área de outros terrenos, a taxa de divisão de terreno a ser paga por essa divisão será 2.5 x (300 + 200 + 100 + 100 + 100). Se a próxima divisão de terreno separar o terreno de 300 unidades junto com o terreno de 100 unidades, do conjunto de terrenos restantes, um adicional 2.5 x (300 + 100) deverá ser pago em taxa, e por ai vai. Note também que algumas divisões de terrenos não são possíveis, graças a (2). Por exemplo, após a primeira divisão de terreno mencionada acima, não é possível realizar uma divisão de terreno para separar o terreno de 300 unidades com o terreno de 200 unidades dos três terrenos restantes, porque mais de duas partes resultariam de tal operação.

                
                    Dada a área de todos os terrenos em volta ao lago e o valor atual do fator de taxa de divisão, você deverá escrever um programa que determine a menor taxa de divisão que deveria ser paga para dividir o terreno de acordo com o plano de desenvolvimento habitacional.";"A entrada contém diversos casos de teste. A primeira linha de um caso de teste contém um inteiro N e um número real F, indicando respectivamente, o número de terrenos (1 ≤ N ≤ 200) e o fator da taxa de divisão (com precisão de dois dígitos decimais, 0 < F ≤ 5.00). A segunda linha de um caso de teste contém N inteiros Xi, representando as áreas dos contínuos terrenos do desenvolvimento habitacional (0 < Xi ≤ 500, para 1 ≤ i ≤ N); além disso, Xk é vizinho de Xk+1 para 1 ≤ k ≤ N-1, e Xn é vizinho de X1. O final da entrada é indicado por N = F = 0.";Para cada caso de teste seu programa deverá produzir apenas uma linha, contendo o valor total mínimo de taxas de divisão, como um número real com precisão de dois dígitos.;True;9 / 10;134;48;35.82%
1360;Truque de Mágica;Ad-Hoc;5;"Um mágico inventou um novo truque de cartas e apresentou-o na prestigiosa Conferência Americana dos Mágicos (ACM). O truque foi tão bom que recebeu o ""Prêmio de Melhor Mágica"" na conferência. O truque requer três participantes: o próprio mágico, um espectador e um assistente. Durante o truque o espectador é convidado a embaralhar um  baralho de 52 cartas e escolher aleatoriamente 5 cartas dele. As cinco cartas são dadas para o assistente (sem o mágico ver as  cartas) que olha para eles e mostra quatro das cinco cartas um por uma para o mágico. Depois de ver as quatro cartas o mágico magicamente adivinha a quinta carta faltante! O truque funciona porque uma vez que o assistente tem as cinco cartas que ele sempre pode escolher quatro delas e usa-las para passar informações em 'código' sobre a quinta carta. O código é baseado em uma ordenação de das cartas. As cartas são ordenadas primeiro  por seus trajes e, em seguida, pelo seu valor de face. Usaremos o seguinte ordem:
                 
                    H < C < D < S (Copas, Paus, Ouros, Espadas), e
                    1 < 2 < ... < 9 < T < J < Q < K para valores de face, onde T, J, Q e K representam Dez (10), Valete (J), Rainha (Q) e Rei (K), respectivamente.
                                
                
                    Suponha que o espectador escolheu os cartões de JD, 8S, 7H, 8C, QH (Valete de Ouros, 8 de Espadas, 7 de Copas, 8 de Paus e Rainha de Copas). A estratégia para o assistente é o seguinte:
                
                    Encontre um naipe s que aparece pelo menos duas vezes no conjunto de cartas escolhidas (Corações no exemplo). Se mais de um terno aparece duas vezes, escolher aquele com ordem menor.
                    Esconda a carta x com naipe s que está no máximo seis posições à frente na ordem cíclica 1 < 2 <... <T <J <Q <K <1 <2 <... de outra carta y  do mesmo naipe. Isto é sempre possível uma vez que há apenas treze cartas do mesmo naipe (no exemplo, o ssistente esconde QH). Se dois ou mais cartões de satisfazer os critérios acima, escolha aquele com o valor de face menor.
                    Mostrar y para o mágico. Neste ponto, o mago sabe que o naipe da carta oculta, e sabe também que o valor de face da carta escondido x é, no máximo, seis posições na frente do valor de face do y.
                    Com as três cartas que a assistente deixou, ele deve codificar um número entre 1 e 6. Isso pode ser feito da seguinte forma. Diga as três cartas Z1, Z2, Z3 estão na ordem z1 < z2 < z3.
                
                
                    Cada um das seis possíveis ordens em que estas três cartas podem ser apresentadas podem ser interpretados  para transmitir informação acerca de um número.
                
                    - Z1, z2, z3 significa 1,
                    - Z1, Z3, z2 significa 2,
                    - Z2, Z1, Z3 significa 3,
                    - Z2, Z3, z1 significa 4,
                    - Z3, Z1, Z2 significa 5,
                    - Z3, Z2, Z1 significa 6.
                
                    Desta forma, uma vez que o mágico visualiza quatro cartas, uma a uma, ele tem informações suficientes para ""magicamente"" adivinhar a quinta carta!
                
                    Seu trabalho é desenvolver um programa que, dadas as quatro cartas mostradas pelo assistente, informe ao mágico qual é a carta escondida.";A entrada contém vários casos de teste. A primeira linha de entrada contém um inteiro N especificando o número de casos de teste (1 <= N <= 10000). Cada caso de teste é composto por uma linha, que contém a descrição das quatro cartas, separadas por um espaço, na ordem em que foram apresentados pelo assistente.;Para cada caso de teste da entrada seu programa deve produzir uma linha de saída, contendo a descrição da carta escondida.;False;5 / 10;148;92;62.16%
1361;Desenhando o Edifício;Ad-Hoc;4;"Um arquiteto quer projetar um edifício muito alto. A construção será composta por alguns andares, e cada andar terá um certo tamanho. O tamanho de um pavimento tem que ser maior do que o tamanho do piso imediatamente acima dele. Além disso, o designer (que é um fã de um famoso time de futebol espanhol) quer pintar o prédio em azul e vermelho, cada andar uma cor, e de tal forma que as cores dos dois andares consecutivos sejam diferentes.

                Para projetar o edifício o arquiteto tem n pisos disponíveis, com seus tamanhos e cores associadas. Todos os andares estão disponíveis em diferentes tamanhos. O arquiteto quer projetar o edifício mais alto possível, com estas restrições, usando os andares disponíveis.";O arquivo de entrada é constituído por uma primeira linha com p número de casos de teste para resolver. A primeira linha de cada caso de teste contém o número de pisos disponíveis. Então, o tamanho e a cor de cada andar aparece numa linha. Cada andar é representado por um número inteiro entre -999999 e 999999. Não há andar com o tamanho 0. Os números negativos representam pisos vermelhos e números positivos pisos azuis. O tamanho do andar é o valor absoluto do número. Não existem dois pisos, com o mesmo tamanho. O número máximo de andares para um problema é 500000.;Para cada caso, a saída será constituída por uma linha com o número de andares do edifício mais alto com as condições mencionadas.;False;4 / 10;859;373;43.42%
1362;Minha Camiseta Me Serve;Grafos;7;"Nosso amigo Victor é instrutor em um programa ambiental voluntário. O chefe de Victor pediu para ele distribuir N camisetas para M voluntários (N é múltiplo de seis, e N ≥ M). Cada voluntário deve receber exatamente uma camiseta (se N ≠ M, algumas camisetas podem sobrar). Há o mesmo número de camisetas disponíveis para cada tamanho de camiseta possível: XXL, XL, L, M, S e XS (siglas em inglês para P, M, G, etc.). Victor tem um pequeno problema: apenas dois tamanhos de camisetas servem para cada voluntário.

                
                    Você deve escrever um programa que decide se Victor pode distribuir as camisetas de tal forma que todo voluntário tenha uma camiseta que lhe serve.";"A primeira linha da entrada contém o número de casos de teste.

                
                    Para cada caso de teste, há uma linha contendo os números N e M. O número N é múltiplo de seis, 1 ≤ N ≤ 36, e indica o número total de camisetas disponíveis. O número M, 1 ≤ M ≤ 30, indica o número de voluntários, com N ≥ M. As próximas M linhas descrevem os voluntários, um por linha. Cada linha contém dois tamanhos de camiseta possíveis (XXL, XL, L, M, S ou XS) separados por um espaço, indicando quais tamanhos servem para o voluntário.";Para cada caso teste, imprima uma linha contendo YES se existe pelo menos uma maneira de distribuir as camisetas de tal forma que todo voluntário tenha uma camiseta que lhe serve, ou NO caso contrário.;False;7 / 10;1869;704;37.67%
1363;Competição de Placas de Carros;Ad-Hoc;8;"Martin e Isa são muito competitivos. A nova competição que eles criaram é sobre observar placas de carros. Cada vez que um deles vê uma placa de carro na rua, ele ou ela manda uma mensagem SMS para o outro com o conteúdo da placa; Quem ver a placa mais nova é o líder da competição. Como o Departamento De Transito (DDT) registra seqüencialmente as placas em ordem crescente, eles conseguem comparar as placas e descobrir quem é o vencedor.

                
                    Martin tem uma percepção muito boa, e ele esteve na liderança por várias semanas. Talvez ele fique olhando para a rua ao invés de trabalhar, ou talvez ele fique o dia todo em frente á uma revendedora de carros, esperando os carros novos saírem com as placas novas. Isa, cansada de ficar sempre atrás, escreveu um programa que gera uma placa aleatória, então a próxima vez que Martin mandar mensagem para ela, ela irá responder com essa placa que foi gerada. Dessa forma ela espera deixar Martin um bom tempo tentando ganhar dela.

                
                    No entanto, Martin ficou desconfiado, e ele quer determinar se Isa está mesmo vendo o carro com a placa que ela mandou. Dessa forma ele irá saber se Isa está na liderança da competição.

                
                    Ele sabe alguns fatos sobre como as placas são registradas pelo DDT.

                
                    Cada placa é uma combinação de 7 caracteres, onde pode ser letras maiúsculas (A–Z), ou números (0–9).
                    Existem dois tipos de placas: a antiga, usada por muitos anos, e a nova, que está em uso há alguns meses, quando as combinações da antiga acabaram.
                    Nas placas antigas, os primeiros três caracteres eram letras, e os últimos quatro eram números, então as placas iam de AAA0000 até ZZZ9999.
                    Nas placas novas, os primeiros cinco caracteres são letras, e os dois últimos são números. Infelizmente o chefe do DDT estragou o sistema da impressora enquanto estava tentando criar o pôster da sua próxima campanha para presidente, e a impressora não imprimi mais as letras A, C, M, I, e P. Então agora a primeira placa é BBBBB00 ao invés de AAAAA00.
                    As placas são registradas em ordem seqüencial. Em um caso particular, a última placa do esquema antigo é seguido pela primeira placa do esquema novo.
                

                
                    Como Isa não está ciente disso, ela apenas se certificou que a placa gerada pelo seu programa, é consistente com os sete caracteres, onde os três primeiros são letras maiúsculas, e os dois últimos caracteres são números, e que cada um do quarto ou quinto caractere pode ser uma letra maiúscula ou um número (possivelmente pode gerando uma combinação ilegal, mas ela não está preocupada com isso).

                
                    É claro que Martin não irá considerar Isa a vencedora se ele receber uma combinação ilegal, ou se ele receber uma placa válida, mas que é igual ou mais velha que a dele. Mas isso não é tudo. Desde que Martin sabe que uma placa nova não é gerada tão rápida, ele não irá acreditar que Isa viu um carro com uma placa mais nova que a que ele mandou, mas muito maior sequencialmente. Por exemplo, se Martin mandar DDDDD45, e receber ZZZZZ45, ele não irá acreditar que Isa viu um carro com essa placa, porque ele sabe que o DDT ao consegue imprimir tantas placas para chegar no ZZZZZ45 no tempo de ele receber a resposta.

                
                    Então Martin decidiu considerar Isa vencedora apenas se ele receber uma placa válida, nova que a dele, e mais velha ou igual a C placa consecutiva após a que ele enviou. Ele chama C seu número de confiança. Por exemplo, se Martin mandar ABC1234, e seu número de confiança for 6, ele irá declarar Isa vencedora apenas se ele receber alguma placa mais nova que ABC1234, mas mais velha ou igual a ABC1240.";"A entrada contém vários casos de teste. Cada caso contém uma única linha que contém duas Strings SM, e SI, e um inteiro C, separados por um único espaço. SM é a String de 7 caracteres enviada pelo Martin, SI é a String de 7 caracteres respondida pela Isa, que é gerada pelo seu gerador de números randômicos. C é o número de confiança do Martin (1 ≤ C ≤ 109).

                
                    O fim da entrada é indicado por SM = SI = ""*"" e C = 0.
                
                
                    A entrada deve ser lida da entrada padrão.";"Para cada caso de teste, a saída será uma única linha com um “Y” maiúsculo se de acordo com Martin, Isa for a vencedora, ou um “N” se Martin for o vencedor.
                
                
                    A saída deve ser impressa na saída padrão.";False;8 / 10;300;113;37.67%
1364;Emoticons :-);Strings;7;"Emoticons são usados em chats e conversações por e-mail para tentar expressar a emoção que palavras impressas não podem. Isso parece interessante para muitos, mas outros acham irritantes e querem se livrar deles.
                
                    George é uma dessas pessoas. Ele odeia tanto emoticons que ele está preparando um plano para remover todos os emoticons de todos os e-mails do mundo. Já que você compartilha de seus planos visionários você está preparando um programa especial para ele.
                
                    Seu programa receberá a lista de emoticons para banir. Cada emoticon será uma sequência de caracteres sem incluir qualquer espaço em branco. Você também receberá várias linhas de texto. O que você precisa fazer é mudar alguns caracteres do texto em espaço para certificar-se de que nenhum emoticom ficará no texto. Para um emoticon poder aparecer no texto, é necessário ter uma sequência especial de caracteres consecutivos.
                
                    Para ajudar o plano de George a manter-se oculto o mais tempo possível, você precisa fazer seu trabalho com o mínimo possível de mudança nos caracteres.";"A entrada contém vários casos de teste. Cada teste consiste em várias linhas. A primeira linha de cada caso de teste conterá dois inteiros separados por um espaço: N, o número de emoticons a proibir, e M, o número de linhas que o texto tem. As próximas N linhas contém um emoticon cada, uma sequência (string) ""não vazia"" de no máximo quinze caracteres. Cada uma das últimas M linhas do caso de teste contém uma linha de texto de no máximo oitenta caracteres. Você pode assumir que 1 ≤ N, M ≤ 100.
                
                    Caracteres válidos para emoticons são letras maiúsculas e minúsculas, dígitos e símbolos “!?.,:;-_’#$%&/=*+(){}[]” (aspas para demarcar). Cada linha do texto deve conter os mesmos caracteres com a adição de um caractere ""espaço"".
                
                    A entrada é terminada por N = M = 0.";Para cada caso de teste, imprima exatamente uma linha contendo um único inteiro que indica o número mínimo de mudanças que você precisa fazer para ter certeza de que nenhum emoticon apareça no texto.;False;7 / 10;2776;492;17.72%
1365;Procurando Assentos;Paradigmas;7;"Um grupo K de amigos vai ver um filme. No entanto, já está muito tarde para obter bons ingressos, por isso, eles estão procurando uma boa maneira de sentar-se todos próximos. Uma vez que todos eles são estudantes de ciências, eles decidiram avançar com um problema de otimização em vez de ir em frente com argumentos informais para decidir quais bilhetes comprar.

                
                    O cinema tem R linhas com C lugares cada, e eles podem ver um mapa com os atuais assentos disponíveis. Eles decidiram que estar perto um do outro é o que importa, mesmo se isso significar estar na fila da frente, onde a tela é tão grande que é impossível ver tudo de uma só vez. Para obedecer os critérios formais, eles acharam que iriam comprar bancos em ordem, a fim de minimizar a extensão do grupo.

                
                    A extensão é definida como a menor área do retângulo com os lados paralelos aos assentos que contém todos os assentos comprados. A área de um retângulo é o número de assentos nele contidas. Eles levaram um laptop e pediram para você os ajudá-los a encontrar os assentos desejados.";"Cada caso de teste consistirá em diversas linhas. A primeira linha conterá três inteiros positivo R, C e K, como explicado acima (1 ≤ R, C ≤ 300, 1 ≤ K ≤ R × C). As próximas linhas R conterão exatamente C caracteres cada. O j-ésimo caractere da i-ésima linha será 'X' se o j-ésimo assento no a i-ésima linha é tomada ou '.' se ele estiver disponível. Sempre haverá pelo menos K assentos disponíveis no total.

                
                    A entrada é terminada com R = C = K = 0.";Para cada caso de teste, imprima uma única linha contendo a extensão mínima que o grupo pode ter.;False;7 / 10;465;194;41.72%
1366;Jogo de Varetas;Ad-Hoc;2;"Há muitos jogos divertidos que usam pequenas varetas coloridas. A variante usada neste problema envolve a construção de retângulos. O jogo consiste em, dado um conjunto de varetas de comprimentos variados, desenhar retângulos no chão, utilizando as varetas como lados dos retângulos, sendo que cada vareta pode ser utilizada em apenas um retângulo, e cada lado de um retângulo é formado por uma única vareta. Nesse jogo, duas crianças recebem dois conjuntos iguais de varetas. Ganha o jogo a criança que desenhar o maior número de retângulos com o conjunto de varetas.
                
                    Dado um conjunto de varetas de comprimentos inteiros, você deve escrever um programa para determinar o maior número de retângulos que é possível desenhar.";A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um inteiro N que indica o número de diferentes comprimentos de varetas (1 ≤ N ≤ 1.000) no conjunto. Cada uma das N linhas seguintes contém dois números inteiros Ci e Vi , representando respectivamente um comprimento (1 ≤ Ci ≤ 10.000) e o número de varetas com esse comprimento (1 ≤ Vi ≤ 1.000). Cada comprimento de vareta aparece no máximo uma vez em um conjunto de teste (ou seja, os valores Ci são distintos). O ﬁnal da entrada é indicado por N = 0.;Para cada caso de teste da entrada seu programa deve produzir uma única linha na saída, contendo um número inteiro, indicando o número máximo de retângulos que podem ser formados com o conjunto de varetas dado.;False;2 / 10;2131;1460;68.51%
1367;Ajude!;Strings;4;"Então, nós temos que admitir: precisamos da sua ajuda. Esse ano as coisas não estao correndo tão tranquilamente quanto queríamos, e nós não conseguimos finalizar o sistema do software da competição a tempo. Uma parte vital está faltando, e como você sabe, nós precisamos desse sistema funcionando até essa tarde, para a verdadeira competição. A parte que está faltando é a que computa a pontuação dos times, dada a lista de submissões desse time.

                    
                        Por favor, por favor, alguém nos ajude!";"A entrada contém vários casos de teste. A primeira linha de caso de teste contém um único inteiro N indicando o número de submissões do caso de teste (1 ≤ N ≤ 300). Cada uma das N linhas seguintes descrevem uma submissão; cada uma dessas linhas contém um identificador de problema (uma única letra entre 'A' e 'Z'), seguida por um inteiro T representando o tempo em minutos (0 ≤ T ≤ 300), seguido por um julgamento (a palavra ""correct"", correto, ou a palavra ""incorrect"", incorreto).
                    
A entrada está em ordem crescente de tempo, e haverá no máximo um julgamento ""correct"" para cada problema. O final da entrada é indicado por N = 0.
A entrada deve ser lida da entrada padrão.";"Para cada caso de teste a entrada do seu programa deve imprimir uma linha contendo dois inteiros S e P, separados por um espaço, onde S é o número de problemas distintos com o julgamento ""correct"" e P é o tempo no qual cada problema distinto foi julgado pela primeira vez como ""correct"", somado a 20 para cada julgamento ""incorrect"" recebido nesse problema (desde que no final o problema tenha sido julgado como ""correct"").
                    A saída deve ser escrita na saída padrão.";False;4 / 10;4346;1895;43.60%
1368;Cubos Coloridos;Ad-Hoc;8;"Crianças adoram brincar com pequenos cubos. Elas passam horas criando ‘casas’, ‘prédios’, etc. O irmãozinho de Tomaz acabou de ganhar um conjunto de blocos coloridos no seu aniversário. Cada face de cada cubo é de uma cor.

                
                    Como Tomaz é uma criança muito analítica, ele decidiu descobrir quantos “tipos” diferentes de cubos o seu irmãozinho ganhou. Você pode ajuda-lo? Dois cubos são considerados do mesmo tipo se for possível rotacionar um deles de forma que as cores nas faces respectivas dos dois blocos sejam iguais.";"A entrada contém vários casos de teste. A primeira linha do caso de teste contém um inteiro N especificando o número de cubos no conjunto (1 ≤ N ≤ 1000). As próximas 3 x N linhas descrevem os cubos do conjunto. Na descrição as cores serão identificadas pelos números de 0 a 9. A descrição de cada cubo será dada em três linhas mostrando as cores das seis faces do cubo “aberto”, no formato dado no exemplo abaixo. No exemplo abaixo, as faces do cubo tem cores de 1 a 6, a face com cor 1 está no lado oposto da face com a cor 3, e a face com cor 2 é vizinha das faces 1, 3, 4 e 6, e está no lado oposto da face com cor 5.

                
                    1
                    2 4 5 6
                    3

                O final da entrada é indicado por N = 0.";Para cada caso de teste seu programa deve imprimir uma linha contendo um único inteiro, correspondente ao numero de tipos de cubos no conjunto dado.;False;8 / 10;462;160;34.63%
1369;Gerente de Espaço;Ad-Hoc;9;"É bem verdade que a maioria das pessoas não se importa muito com o que ocorre dentro de um computador, desde que ele execute as tarefas que devem ser desempenhadas. Existem, no entanto, alguns poucos nerds que sentem prazer em acompanhar o movimento de bits e bytes dentro da memória do computador.

                
                    É para esse público, constituído principalmente de adolescentes, que a multinacional de sofware ACM (Abstractions of Concrete Machines) deseja desenvolver um sistema que acompanhe e produza um relatório das operações efetuadas em um disco rígido. Um disco rígido é composto de uma sequência de células atômicas de armazenamento, cada uma de tamanho 1Kb.

                
                    Especificamente, a ACM deseja acompanhar três tipos de operações:

                
                    insere NOME T
                

                
                    Insere no disco o arquivo NOME, de tamanho T. Você pode supor que um arquivo com esse nome não existe ainda no disco. O tamanho T de um arquivo é dado na forma XKb, XMb, ou XGb, onde X é um inteiro (0 < X <= 1023). NOME é uma cadeia de caracteres com comprimento máximo 10.

                
                    remove NOME
                

                
                    Remove o arquivo NOME do disco. Se um arquivo com esse nome não existe, não faz nada;

                
                    otimiza
                

                
                    Compacta o disco, deslocando os arquivos existentes na direção do início do disco, eliminando espaços livres entre dois arquivos subsequentes, e preservando a ordem em que os arquivos aparecem no disco, de modo a deixar um espaço de memória livre no final do disco.

                
                    A capacidade de um disco é sempre um número múltiplo de 8Kb. No início, o disco está vazio, ou seja, contém um bloco livre do tamanho da capacidade do disco. Um arquivo é sempre armazenado em um bloco de células de armazenamento contíguas. O arquivo a ser inserido deve ser sempre colocado no início do menor bloco livre cujo tamanho é maior ou igual ao tamanho do arquivo. Se mais de um bloco livre é igualmente adequado, escolha o mais próximo do começo do disco. Caso não seja possível inserir o arquivo por falta de um bloco livre suficientemente grande, deve-se executar automaticamente o comando otimiza. Se após a otimização ainda não for possível inserir o arquivo, uma mensagem de erro deve ser produzida. No caso de todas as operações serem executas sem erro, seu programa deve produzir uma estimativa aproximada do estado final do disco, conforme descrito abaixo.

                
                    Lembre que 1Mb corresponde a 1024Kb, enquanto 1Gb corresponde a 1024Mb.";"A entrada é constituída de vários casos de teste. A primeira linha de um caso de teste contém um único inteiro N indicando o número de operações no disco (0 < N ≤ 10000). A segunda linha de um caso de teste contém a descrição do tamanho do disco, composta por um inteiro D (0 < D ≤ 1023), seguido de um especificador de unidade; o especificador de unidade é uma cadeia de dois caracteres no formato Kb, Mb ou Gb. Cada uma das N linhas seguintes contém a descrição de uma operação no disco (insere, remove ou otimiza, conforme descrito acima). O final da entrada é indicado por N = 0.";"Para cada caso de teste seu programa deve produzir uma linha na saída. Se todas as operações de inserção forem executadas sem erro, seu programa deve produzir uma linha contendo uma estimativa aproximada do estado do disco, apresentada como se segue. Divida o número de bytes do disco em oito blocos contíguos de mesmo tamanho. Para cada um dos oito blocos seu programa deve verificar a porcentagem P de bytes livres daquele bloco, e apresentar a estimativa do estado final no formato

                
                    [C] [C] [C] [C] [C] [C] [C] [C]

                
                    onde C é ' ', '-' ou '#', dependendo se 75 < P ≤ 100, 25 < P ≤ 75 ou 0 ≤ P ≤ 25, respectivamente. Caso um arquivo não possa ser inserido por falta de espaço, seu programa deve produzir uma linha contendo a expressão ERRO: disco cheio; nesse caso, operações subsequentes do caso de teste devem ser ignoradas.";False;9 / 10;72;14;19.44%
1370;Regata de Cientistas;Geometria Computacional;8;"Todos os anos, desde 1996, cientistas da computação do mundo todo se encontram para a famosa Regata dos Cientistas. A competição consiste em uma corrida de barcos com obstáculos pelo oceano, onde o objetivo de cada equipe é, partindo de um ponto em comum, alcançar o ponto de chegada sem que nenhum obstáculo seja tocado ou transpassado. Uma equipe que toca ou transpassa um obstáculo é automaticamente desclassificada. A equipe vencedora é aquela que primeiro atinge o ponto de chegada (o ponto de chegada é distinto do ponto de início).

                
                    Você foi contratado pela equipe brasileira para desenvolver um programa que calcule o comprimento da menor rota válida possível do ponto de partida ao ponto de chegada. O oceano é considerado um plano infinito, onde cada obstáculo é localizado em uma posição fixa e representado por um segmento de reta descrito por seus dois extremos (x1, y1) e (x2, y2). Os barcos são adimensionais (representados como um ponto no plano) e os obstáculos possuem espessura desprezível.

                
                    Os obstáculos são dispostos de tal forma que os mesmos não se interceptam. De forma similar, os pontos de início e de chegada da competição não são interceptados por nenhum obstáculo.";A entrada é composta por vários casos de teste. A primeira linha de um caso de teste contém cinco números inteiros xi, yi, xf, yf e n, representando respectivamente as coordenadas do ponto de início (xi, yi), as coordenadas do ponto de chegada (xf, yf) e a quantidade de obstáculos (n ≤ 150). Cada uma das n linhas seguintes de um caso de teste contém quatro números inteiros x1, y1, x2 e y2 que descrevem as coordenadas dos dois extremos de um obstáculo. Considere que as coordenadas x e y de qualquer ponto satisfazem -5000 ≤ x, y ≤ 5000. O final da entrada é representado por uma linha contendo xi = yi = xf = yf = n = 0.;Para cada caso de teste, imprima uma linha contendo o comprimento da menor rota válida possível, arredondado para duas casas decimais.;False;8 / 10;141;56;39.72%
1371;Fechem as Portas!;Matemática;4;"Madame Beauvoir possui uma mansão onde ela recebe todos os seus descendentes (netos e bisnetos) durante as férias. Sua mansão possui exatamente N quartos (cada quarto é numerado de 1 a N), onde N é também a quantidade de netos e bisnetos (cada descendente é também numerado de 1 a N).

                
                    Como toda criança, os descendentes de Mme. Beauvoir são bastante travessos. Todo dia é a mesma confusão: eles acordam de manhã cedo antes dela e se encontram no grande jardim. Cada descendente, um de cada vez, entra na mansão e troca o estado das portas dos quartos cujos números são múltiplos do seu identificador. Trocar o estado de uma porta significa fechar uma porta que estava aberta ou abrir uma porta que estava fechada. Por exemplo, o descendente cujo identificador é igual a 15 vai trocar o estado das portas 15, 30, 45, etc.

                
                    Considerando que todas as portas estão inicialmente fechadas (todos os descendentes fecham as portas antes de descer para o jardim) e que cada descendente entra exatamente uma vez na mansão (a confusão é tão grande que não sabemos em que ordem), quais portas estarão abertas após a entrada de todos os descendentes na mansão?";A entrada contém vários casos de teste. Cada caso de teste consiste em uma linha que contém um inteiro N (0 ≤ N ≤ 25000000), indicando o número de portas e descendentes. O final da entrada é indicado por N = 0.;Para cada caso de teste da entrada seu programa deve produzir uma linha na saída, contendo a sequência crescente de números correspondente aos identificadores dos quartos cujas portas estarão abertas. Ao imprimir a sequência, deixe um espaço em branco entre dois elementos consecutivos.;False;4 / 10;4180;1582;37.85%
1372;Doces;Paradigmas;4;"Pequeno Charlie é um bom garoto viciado em doces. Ele até assina a Revista Todos Doces (All Candies Magazine) e foi selecionado para participar na Competição Internacional de Coleta de Doces (International Candy Picking Contest).

                
                    Nessa competição um número aleatório de caixas contendo doces são dispostas em M linhas com N colunas cada (então, existe um total de M x N caixas). Cada caixa tem um número indicando quantos doces ela contém.

                
                    O competidor pode pegar uma caixa (qualquer uma) e pegar todos os doces dentro dela. Mas existe uma sacada (sempre existe uma sacada): quando uma caixa é escolhida, todas as caixas das linhas logo acima e logo abaixo são esvaziadas, assim como as caixas à direita e à esquerda da caixa escolhida. O competidor continua pegando uma caixa até que não hajam mais doces.

                
                    A figura abaixo ilustra isso, passo a passo. Cada célula representa uma caixa e o número de doces que ela contém. A cada passo, a caixa escolhida é circulada e as células sombreadas representam as caixas que serão esvaziadas. Após oito etapas o jogo acaba e Charlie pegou 10 + 9 + 8 + 7 + 6 + 10 + 1 = 54 doces.

                ​

                
                    Para pequenos valores de M e N, Charlie consegue achar o número máximo de doces que ele consegue coletar facilmente, mas quando os números são muito grandes ele começa a se perder. Você pode ajudar Charlie a maximizar o número de doces que ele pode pegar?";"A entrade contém vários casos de teste. A primeira linha de um caso de teste contém dois números inteiros M e N (1 ≤ M x N ≤ 105), separados por um espaço, indicando o número de linhas e colunas, respectivamente. Cada uma das M linhas seguintes contém N inteiros separados por espaço, cada uma representando o número inicial de doces na caixa correspondente. Cada caixa terá inicialmente pelo menos 1 e no máximo 103 doces.

                
                    O final da entrade é indicado por uma linha contendo dois zeros separados por um espaço.";Para cada caso de teste da entrada, seu programa deve imprimir uma única linha, contendo um único valor, o inteiro indicando o número máximo de doces que Charlie pode pegar.;True;4 / 10;864;414;47.92%
1373;Sequências de DNA;Strings;6;"Thomas, um cientista da computação que trabalha com sequências de DNA, precisa computar as maiores subsequências comuns de dados pares de strings. Considere um alfabeto S de letras e uma palavra w = a1a2 ... ar, onde ai ∈ Σ, para i = 1, 2, ..., r. Uma subsequencia de w é uma palavra x = ai1ai2 ... ais tal que 1 ≤ i1 < i2 < ... < is ≤ r. A subsequência x é um segmento de w se ij+1 = ij + 1, para j = 1, 2, ..., s-1. Por exemplo a palavra ove é um segmento da palavra lovely, enquanto a palavra loly é uma subsequência de lovely, mas não um segmento.

                
                    Uma palavra é uma subsequência comum de duas palavras w1 e w2 se ela é uma subsequência de cada uma das duas. Uma maior subsequência comum de w1 e w2 uma subsquência comum de w1 e w2 tendo o maior comprimento possível. Por exemplo, considere as palavras w1 = lovxxelyxxxxx e w2 = xxxxxxxlovely. As palavras w3 = lovely e w4 = xxxxxxx, a última de comprimento 7, são ambas subsequências comuns de w1 e w2. De fato, w4 é a maior subsequência comum delas. Perceba que a palavra vazia, de comprimento zero, é sempre uma subsequência comum, apesar não ser necessariamente a mais longa.

                
                    No caso do Thomas, existe um requerimento extra: a subsequência tem que ser formada de segmentos comuns tendo comprimento K ou maior. Por exemplo, se Thomas decidir que K = 3, então ele considera lovely como uma subsequência comum aceitável de lovxxelyxxxxx e xxxxxxxlovely, enquanto xxxxxxx, que tem um comprimento de 7 e também é uma subsequência comum, não é aceitável. Você pode ajudar Thomas?";A entrada consiste de vários casos de teste. A primeira linha de um caso de teste contém um inteiro K representando o comprimento mínimo de segmentos comuns, onde 1 ≤ K ≤ 100. As próximas duas linhas contém, em cada, uma palavra com letras minúsculas do alfabeto tradicional de 26 letras. O comprimento L de cada palavra satisfaz a desigualdade 1 ≤ L ≤ 103. Não existem espaços nas linhas de entrada. O final da entrada é indicado por uma linha contendo um zero.;Para cada caso de teste na entrada, seu programa deve imprimir uma única linha, contendo o comprimento da maior subsequência formada por segmentos consecutivos de comprimento de pelo menos K de ambas palavras. Se não existir uma subsequência comum de comprimento maior que zero, então deve ser imprimido 0.;False;6 / 10;972;337;34.67%
1374;Eletricidade;Ad-Hoc;5;"Martin e Isa pararam de jogar jogos loucos e finalmente se casaram. Ótimas notícias! Eles estão vivendo uma nova vida de felicidade para ambos e, também, estão se mudando para uma nova casa em um lugar remoto, comprado com a maior parte de suas economias.

                
                    A vida é diferente nesse novo lugar. Particularmente, a energia elétrica é muito cara, e eles querem manter tudo sob controle. Por isso Martin propôs que mantivessem um histórico diário de quanta eletricidade foi consumida na casa. Eles têm um marcador de eletricidade, que mostra um número com a quantidade de KWh (kilowatts-hora) que foi consumida desde sua chegada.

                
                    No começo de cada dia eles consultam o marcador de eletricidade, e anotam o consumo. Alguns dias Martin faz isso, em outros é a Isa quem faz. Desse jeito, eles conseguirão observar as diferenças de consumo entre dias consecutivos e saber quanto foi gasto.

                
                    Mas alguns dias eles simplesmente esqueceram de anotar, então, depois de muito tempo, o histórico está incompleto. Eles têm uma lista de datas e consumos, mas nem todas datas são consecutivas. Eles só querem levar em conta os dias para os quais o consumo pode ser determinado precisamente, e precisam de ajuda.";"A entrada contém diversos casos de teste. A primeira linha de um caso de teste contém um inteiro N indicando o número de medições que eles fizeram (2 ≤ N ≤ 103). Cada uma das N linhas seguintes contém quatro inteiros D, M, Y e C, separados por espaços, indicando respectivamente o dia (1 ≤ D ≤ 31), mês (1 ≤ M ≤ 12), ano (1900 ≤ Y ≤ 2100), e consumo (0 ≤ C ≤ 106) lidos no início de cada dia. Essas N linhas são ordenadas em ordem crescente pela data e podem incluir anos bissextos. A sequência de consumos é estritamente crescente (isto é, duas leituras sempre têm valores diferentes). Você pode assumir que D, M e Y representam datas válidas.

                
                    Lembre-se que um ano é bissexto se ele é divisível por 4 e não por 100, ou então, se o ano é divisível por 400.

                
                    O final da entrada é indicado por uma linha contendo apenas um zero.";Para cada caso de teste na entrada, seu programa deve imprimir uma única linha contendo dois inteiros separados por um único espaço: o número de dias para os quais o consumo pode ser determinado precisamente e o consumo desses dias.;False;5 / 10;374;166;44.39%
1375;Painel de Posições;Ad-Hoc;5;"Em corridas de carro, sempre há um painel perto da linha de chegada da pista. Antes da corrida começar, o painel é usado para mostrar o grid de largada. O número do primeiro carro do grid é mostrado no topo do painel, o número do segundo carro é mostrado em baixo dele e assim por diante.

                
                    Durante a corrida o painel é usado para mostrar as posições atuais de cada carro: o carro que está ganhando tem seu número a mostra no topo do painel, seguido do carro que está em segundo e assim por diante.

                
                    Além de mostrar a posição atual do carro, o painel  também é usado para mostrar o número de posições que o carro ganhou ou perdeu relativo ao grid de largada. Isso é feito, mostrando do lado do número do carro, um número inteiro. Um valor positivo v do lado do número do carro no painel, que significa que o carro ganhou v posições relativo a sua posição inicial no grid. Um zero do lado do número do carro no painel, significa que ele não ganhou nem perdeu posições no grid (o carro está na mesma posição que iniciou a corrida).

                

                
                    Nós estamos no meio do Grand Prix da Suécia, a última corrida do Campeonato Mundial. O diretor de prova, Dr. Shoo Makra, está ficando preocupado: houve algumas reclamações que o Software que controla o painel de posições é defeituoso, mostrando informações que não refletem a ordem correta de posições da corrida.

                
                    Dr. Shoo Makra desenvolveu um jeito de checar se o sistema do painel de posições está funcionando corretamente. Dada a informação exibida no painel de posições, ele quer reconstruir o grid de largada da corrida. Se for possível reconstruir um grid de largada válido, ele planeja checar ele contra o grid de largada real. No entanto, se não for possível reconstruir um grid de largada valido, o sistema do painel de posições está mesmo defeituoso.

                
                    Você pode ajudar o Dr. Shoo Makra?";"O arquivo de entrada contém vários casos de teste. A primeira linha do teste contém um valor inteiro N indicando o número de carros na corrida (2 ≤ N ≤ 10³). As próximas N linhas contém dois inteiros C e P, separados por um espaço, representando o número do carro (1 ≤ C ≤ 104) e o número de posições que o carro ganhou ou perdeu relativo ao grid de largada (-106 ≤ P ≤ 106), de acordo com o painel de posições. Todos os carros na corrida tem números diferentes.

                
                    O último caso de teste é seguido por uma linha que contém apenas um número zero.";Para cada caso de teste da entrada seu programa deve imprimir apenas uma linha, contendo o grid de largada reconstruído, com o número dos carros separados por um espaço. Se não foi possível reconstruir um grid de largada válido, a linha deve conter -1.;True;5 / 10;2382;997;41.86%
1376;Irmãos;Matemática;7;"Na terra de ACM governou um grande rei que se tornou obcecado com a ordem. O reino tinha um forma retangular, e o rei dividiu o território em uma grade de pequenos municípios retangulares. Antes de morrer, o rei distribuiu os municípios entre seus filhos.

                No entanto, ele não tinha conhecimento de que seus filhos tinham desenvolvido uma rivalidade estranha: O primeiro herdeiro odiava o segundo herdeiro, mas não o resto, o segundo herdeiro odiava o terceiro herdeiro, mas não o resto, e assim diante... Finalmente, o último herdeiro odiava o primeiro herdeiro, mas não os outros herdeiros.

                Assim que o rei morreu, a estranha rivalidade entre os filhos do rei desencadeou uma generalizada guerra no reino. Ataques só ocorreram entre pares de municípios adjacentes (municípios adjacentes são aqueles que partilham uma fronteira vertical ou horizontal). Um município X atacava um município Y adjacente sempre que o proprietário do X odiava o proprietário de Y. O município que foi atacado sempre era conquistado pelo irmão atacante. Por uma regra de honra todos os ataques foram realizados ao mesmo tempo, e um conjunto de ataques simultâneos foi chamado de batalha. Depois de um certo número de batalhas, os filhos sobreviventes fizeram uma trégua e nunca lutaram novamente. Por exemplo, se o rei tinha três filhos, chamados 0, 1 e 2, a figura abaixo mostra o que acontece na primeira batalha de uma dada distribuição inicial de terras:

                

                Você foi contratado para ajudar um historiador de ACM a determinar, dado o número de herdeiros, a inicial distribuição de terras e o número de batalhas, como ficou a distribuição de terras após todas as batalhas.";"A entrada contém vários casos de teste. A primeira linha de um caso de teste contém quatro inteiros N, R, C e K, separados por espaços simples. N é o número de sucessores (2 ≤  N ≤ 100), R e C são a dimensões do reino (2 ≤ R, C ≤ 100), e K é o número de batalhas (1 ≤ K ≤ 100). Herdeiros são identificados por números inteiros sequenciais a partir de zero (0 é o primeiro herdeiro, 1 é o segundo herdeiro, ..., N - 1 é o último herdeiro). Cada uma das próximas linhas R contém C inteiros Hr,c separado por espaços simples, que representam a distribuição de terras inicial: Hr,c é o proprietário inicial do município em r linha e coluna c (0 ≤ Hr,c ≤ N - 1).

                O último caso de teste é seguido por uma linha contendo quatro zeros separados por espaços.";Para cada caso de teste, seu programa deve imprimir R linhas com C inteiros cada, separados por um único espaço no mesmo formato que a entrada, o que representa a distribuição de terras, após todas as batalhas.;True;7 / 10;272;149;54.78%
1377;Recuperador de Arquivos;Strings;8;"Sua escola tem um computador que é usado como um servidor web para hospedar seu site institucional, páginas pessoais dos funcionários, sites para grupos de pesquisa, assuntos, e muitos outros. Recentemente, a tabela do disco rígido foi corrompida, por isso a organização de todos os arquivos foi perdida. Infelizmente, não há backups dessas informações. A única esperança é olhar através de todo o disco de dados e tentar descobrir quais partes correspondem a cada arquivo. Felizmente, o disco foi usando um sistema de arquivos que manteve cada arquivo contíguo, apenas as partes contíguas de dados precisam ser inspecionadas.

                Os dados do disco é uma seqüência de bytes. Cada byte neste disco em particular pode armazenar uma letra do alfabeto Inglês (maiúsculas e minúsculas distintas), um dígito decimal, um ponto ou uma vírgula, totalizando 64 caracteres diferentes.

                Enquanto você estava pensando em como resolver o problema, você de repente se lembrou de que o sistema de arquivos também manteve várias cópias de cada arquivo, portanto, apenas os pedaços de bytes contíguos que se repetem tem a chance de ser um arquivo. Além disso, para cada repetição dos mesmos bytes contíguos, apenas uma cópia precisa ser verificada. Por exemplo, se os dados forem 'ababcabb', as subsequências repetidos contíguas são 'a', 'b' e 'ab', mas nada que contenha 'c', nem 'ba' ou 'Bb' é. Portanto, temos 3 pedaços de bytes contíguos que precisam de verificação neste caso. Você precisa escrever um programa que calcule exatamente quantas sequências precisam de verificação, isto é o número de sequências diferentes de bytes contíguos que aparecem em pelo menos duas vezes nos dados.";Há diversos casos de teste. A entrada de cada caso de teste é dada em exatamente uma linha, contendo uma string não-vazia de no máximo 105 caracteres que representa os dados do disco. Cada caractere da string poderá ser uma letra minúscula, uma letra maiúscula, um dígito, um ponto ou uma vírgula. O último caso de teste é seguido por uma linha contendo um único asterisco.;Para cada caso de teste, seu programa deverá retornar uma linha com um inteiro, representando o número de diferentes subsequências contíguas que aparecem pelo menos duas vezes na seqüência de entrada.;False;8 / 10;229;100;43.67%
1378;Triângulos Isósceles;Ad-Hoc;8;"Um dado triângulo pode ser equilátero (três lados de mesmo comprimento), escaleno (três lados de comprimentos diferentes), ou isósceles (dois lados de mesmo comprimento e um terceiro lado de comprimento diferente). Sabe-se que pontos com coordenadas inteiras não podem ser vértices de um triângulo equilátero.

                É dado um conjunto de pontos distintos com coordenadas inteiras no plano XY tal que três pontos distintos deste conjunto não pertencem a uma mesma reta. Sua tarefa é calcular o número de subconjuntos de três pontos que contém vértices de um triângulo isósceles.";"Há vários casos de teste. Cada caso de teste é descrito em várias linhas. A primeira linha de cada caso de teste contém um inteiro N indicando o número de pontos no conjunto (3 ≤ N ≤ 1000). Cada uma das próximas N linhas descreve um ponto do conjunto e contém dois inteiros X e Y separados por um espaço (1 ≤ X, Y ≤ 106); esses valores representam as coordenadas do ponto no plano XY. Você pode assumir que, em cada caso de teste, não há dois pontos com a mesma localização e não há três pontos colineares.

                O último caso de teste é seguido por uma linha contendo um único zero.";Para cada caso de teste, imprima uma única linha com um único inteiro indicando o número de subconjuntos de três pontos que contém vértices de um triângulo isósceles.;False;8 / 10;697;256;36.73%
1379;Problema com Mediana e Média;Ad-Hoc;1;A média de três inteiros A, B e C é (A + B + C)/3. A mediana de três números inteiros seria então aquela que estaria no meio, se forem ordenados em ordem não decrescente. Dados dois números inteiros A e B, retornar o mínimo inteiro possível C, tal que a média e a mediana de A, B e C, sejam iguais.;Cada caso de teste é dado em uma única linha que contém dois inteiros A e B (1 ≤ A ≤ B ≤ 109). O último caso de teste é seguido por uma linha contendo dois zeros.;Para cada caso de teste, imprima uma linha que contenha o mínimo inteiro possível C, de forma que a média e a mediana de A, B e C sejam iguais.;False;1 / 10;2784;2125;76.33%
1380;Crescimento das Populações de Bacilos;Matemática;9;"Heinrich Hermann Robert Koch foi um médico alemão que viveu de 1843 a 1910 e ficou famoso por ter isolado o bacilo causador da tuberculose. Seus estudos sobre a doença que causava muitas mortes até meados do século XX possibilitaram o desenvolvimento de uma vacina que salvou milhões de vidas por todo o mundo. Robert Koch foi agraciado em 1905 com o prêmio Nobel de Medicina e é considerado um dos pais da Microbiologia.

                Um dos estudos de Koch estava ligado com a velocidade de crescimento das populações de bacilos. Koch observou que os bacilos demoram um instante de tempo para atingir a maturidade e iniciar a divisão celular. A partir daí, o bacilo gera um novo indivíduo a cada instante de tempo por meio de uma divisão. Dessa forma, se partirmos de uma população inicial com apenas um indivíduo, no instante seguinte teremos ainda um (ele atinge a maturidade para divisão), no seguinte teremos 2, no outro 3, então 5 e assim por diante.

                Sua tarefa é, dado um inteiro K, determinar os três últimos dígitos do número de bacilos após K instantes de tempo, partindo de uma população inicial com um indivíduo.";"A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias.

                Cada instância é composta por apenas uma linha que contém um inteiro K (1 ≤ K ≤ 101000000).";Para cada instância imprima uma linha contendo os três últimos dígitos do número de bacilos após K instantes de tempo.;False;9 / 10;905;274;30.28%
1381;Equações Diofantinas;Matemática;8;"Diofanto de Alexandria viveu no terceiro século d.C. e é considerado por muitos o “pai da Álgebra”. Seu livro “Arithmetica” tratava da solução de equações algébricas com coeficientes inteiros para as quais se busca soluções também inteiras. Tais equações são conhecidas como equações diofantinas. Um grande estudioso do trabalho de Diofanto foi Pierre de Fermat, conhecido matemático francês.

                Neste problema você deve resolver uma classe de equações diofantinas do tipo x1 + x2 + ... +xn = C. Ou seja, dados inteiros N e C, determine quantas soluções inteiras não-negativas existem para a equação x1 + x2 + ... +xn = C, onde 0 ≤ xi ≤ C para todo i = 1, 2, ... , N.";A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância é composta por uma linha contendo dois inteiros N e C (1 ≤ N, C ≤ 1000000). Como este valor pode ser muito grande então imprima o resultado módulo 1300031.;Para cada instância imprima uma linha contendo o número de soluções inteiras que respeitam as restrições.;False;8 / 10;1062;329;30.98%
1382;Elementar, meu Caro Watson!;Estruturas e Bibliotecas;7;"Watson, Crick e Wilkins receberam em 1962 o prêmio Nobel de Medicina especialmente pelo seu trabalho que resultou na descoberta da estrutura das moléculas do DNA e na sua importância na transmissão de informações entre as gerações de seres vivos. Watson e Crick publicaram na revista “Nature” em 1953 o artigo em que mostravam que a molécula de DNA apresentava uma estrutura de dupla hélice. O artigo assume enorme importância nos dias de hoje, especialmente depois dos vários avanços na área.

                Muitas pesquisas têm sido feitas na área de Bioinformática ligadas à descoberta da sequência de bases que compõem as moléculas de DNA dos vários seres vivos. Em especial, a estrutura destas moléculas tem sido usada para compor teorias de como os seres vivos evoluíram e quais têm ancestrais comuns. Acredita-se que os seres vivos presentes hoje no planeta podem descender de ancestrais comuns, sendo que as modificações nos seus respectivos DNAs são devidas a fenômenos de mutação ocorridos durante a evolução. Muitos biólogos acreditam no princípio da parcimônia, que diz que o número destas mutações deve ser o mínimo possível, uma vez que a Natureza busca, de certa forma, o caminho “mais barato” para a modificação desejada.

                Sua tarefa neste problema é auxiliar os pesquisadores na tarefa de determinar se duas sequências de DNA podem ter um ancestral comum. Considere dadas duas sequências (podemos imaginar como sequências de números inteiros). O seu objetivo é determinar o menor número de trocas de elementos de uma das sequências (os elementos não precisam estar em posições adjacentes na sequência) que leva uma das sequências na outra. Observe que podemos considerar uma das sequências fixa (por exemplo, em ordem crescente), dessa forma buscamos o número mínimo de tais trocas que ordena a sequência dada.";A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância possui um inteiro N (1 ≤ N ≤ 10000) indicando o número de inteiros na sequência. A segunda linha contém uma permutação dos inteiros 1, 2, ... , N separados por espaço.;Para cada instância imprima uma linha contendo o número mínimo de tais trocas que ordena a sequência dada.;False;7 / 10;1923;612;31.83%
1383;Sudoku;Ad-Hoc;6;"O jogo de Sudoku espalhou-se rapidamente por todo o mundo, tornando-se hoje o passatempo mais popular em todo o planeta. Muitas pessoas, entretanto, preenchem a matriz de forma incorreta, desrespeitando as restrições do jogo. Sua tarefa neste problema é escrever um programa que verifica se uma matriz preenchida é ou não uma solução para o problema.

                A matriz do jogo é uma matriz de inteiros 9 x 9 . Para ser uma solução do problema, cada linha e coluna deve conter todos os números de 1 a 9. Além disso, se dividirmos a matriz em 9 regiões 3 x 3, cada uma destas regiões também deve conter os números de 1 a 9. O exemplo abaixo mostra uma matriz que é uma solução do problema.";São dadas várias instâncias. O primeiro dado é o número n > 0 de matrizes na entrada. Nas linhas seguintes são dadas as n matrizes. Cada matriz é dada em 9 linhas, em que cada linha contém 9 números inteiros.;"Para cada instância seu programa deverá imprimir uma linha dizendo ""Instancia k"", onde k é o número da instância atual. Na segunda linha, seu programa deverá imprimir ""SIM"" se a matriz for a solução de um problema de Sudoku, e ""NAO"" caso contrário. Imprima uma linha em branco após cada instância.";True;6 / 10;11347;3056;26.93%
1384;Sapo Preguiçoso;Grafos;7;"O Sr. Sapo mora num pântano com formato de grade retangular, composto por quadrados de mesmo tamanho, tais que alguns são secos e outros molhados. Sr. Sapo mora num quadrado seco e só pode pular de um quadrado seco para outro quando vai passear pelo pântano.

                Ele quer visitar sua namorada, Srta. Toad, que também mora num quadrado seco no mesmo pântano. Mas Sr. Sapo é preguiçoso, e quer gastar o mínimo de energia pulando até a casa dela. Ele sabe a quantidade de energia que ele gasta em qualquer um de seus pulos. Para cada pulo único, Sr. Sapo sempre usa a figura a seguir para determinar quais são os possíveis quadrados para os quais ele pode pular da posição em que ele se encontra (o quadrado marcado com F), e a energia correspondente gasta nos pulos, em calorias. Qualquer outro quadrado não é alcançável por Sr. Sapo dessa posição com um único pulo.

                

                Seu trabalho é determinar qual é a mínima quantidade de energia que o Sr. Sapo tem que gastar para ir da sua casa à casa da Srta. Toad.";"A entrada possui vários casos de teste. A primeira linha de um caso de teste contém dois inteiros, C e R, indicando o número de colunas e o mímero de linhas do pântano (1 ≤ C, R ≤ 1000). A segunda linha de um caso de teste contém quatro inteiros Cf, Rf, Ct e Rt, onde (Cf, Rf) indica o local da casa do Sr. Sapo e (Ct, Rt) indica o local da casa de Srta. Toad (1 ≤ Cf,Ct ≤ C; 1 ≤ Rf,Rt ≤ R). A terceira linha de um caso de teste contem um inteiro W (0 ≤ W ≤ 1000) indicando o número de lugares molhados no pântano. Cada uma das W linhas seguintes contêm quatro inteiros C1, R1, C2 e R2 (1 ≤ C1 ≤ C2 ≤ C; 1 ≤ R1 ≤ R2 ≤ R), descrevendo um espaço retangular molhado compreendendo os qudrados que possuem coordenadas (x,y) tais que C1 ≤ x ≤ C2 e R1 ≤ y ≤ R2. O final da entrada é indicado por C = R = 0.";"Para cada caso de entrada, seu programa deve produzir uma linha da saída, contendo o mínimo de calorias consumidas por Sr. Sapo para ir de sua casa até a de Srta. Toad. Se for impossível que ele chegue até a casa dela, seu programa deve imprimir ""impossible"" (impossível).";True;7 / 10;327;146;44.65%
1385;Recuperação de Relatório;Strings;10;"No final da semana, John pediu para Maria enviar-lhe um relatório urgente de vendas. Maria estava com pressa, porque estava saindo para suas férias. Ela, então, copiou e colou a folha de vendas em um e-mail, enviou para John e saiu. Ela não queria ser incomodada com questões de trabalho, de modo que ela saiu sem dizer a ninguém onde ela estaria. Ela anunciou simplesmente que não estaria disponível para as próximas duas semanas, desligou o celular e saiu.

                Quando João recebeu a mensagem, ele percebeu que o relatório não tinha nenhum espaço! Ele sabia que o relatório deveria ter uma linha de cabeçalho com códigos de produtos da forma P1, P2,. . ., PN e a palavra ""Totals"" (Totais) no final. Então haveria várias linhas de relatórios de vendas de produtos para os diferentes vendedores de escritório de Maria. Cada vendedor foi identificado com um nome composto por uma palavra (apenas caracteres alfabéticos). A linha correspondente a um vendedor deve começar com o seu nome, seguido do número de produtos vendidos, de acordo com as colunas do relatório. A última linha do relatório deve começar com as duas letras TP seguidos pelos totais de cada coluna no relatório (é claro, o nome de nenhum vendedor começa com as letras TP). John sabia que não havia números negativos no relatório, uma quantidade de zero foi avaliado como um único 0, e não há zeros à esquerda ao relatar uma quantidade positiva.

                Neste ponto, John decidiu reconstruir o relatório de Maria. Ele sabia que não poderia ser mais de um resultado possível, mas queria fazê-lo de qualquer maneira com a primeira solução consistente que ele poderia encontrar (talvez ele pudesse corrigir os erros quando Maria voltasse).

                Você poderia ajudar John com a recuperação de relatório de vendas de Maria?";A entrada consiste em vários casos de teste. A primeira linha de entrada contém um número inteiro C especificando o número de casos de teste. A primeira linha de um relatório é uma linha de cabeçalho, contendo o código dos produtos P1, P2. . . PN e a palavra Totais, como descrito acima. A numeração dos produtos nesta linha de cabeçalho é consecutiva, de 1 a N, com 1 ≤ N ≤ 5. Depois, há um número de linhas, cada uma representando uma linha do relatório, como descrito acima. A última linha do relatório inicia com as letras TP e têm o formato descrito acima. Considere que cada vendedor tenha vendido menos de 1000 unidades de cada produto. Há não mais de 4 vendedores em cada caso de teste. Cada nome de vendedor não poderá exceder 10 caracteres (apenas letras maiúsculas e minúsculas).;Para cada caso de teste da entrada seu programa deve produzir um possível relatório de Maria. Cada linha da resposta deve ser alinhado à esquerda, com seus itens separados por um único espaço, e sem espaços a mais no final.;False;10 / 10;125;23;18.40%
1386;Códigos Ambíguos;Strings;10;"Uma extensa área de pesquisa em ciência da computação é o campo das comunicações. Como as redes de computador fazem parte do cotidiano de muitas pessoas, o desenvolvimento de formas para fazer estas redes mais rápidas, mais confiáveis ​​e seguras é constantemente necessário. Esta necessidade prática motiva uma atividade de pesquisa extensa na teoria por trás das comunicações.

                A primeira coisa necessária para estabelecer qualquer tipo de comunicação é um código comum. Um código é uma maneira de alterar a forma de uma peça de informação em alguma outra forma, de um modo geral, fazer possível transmitir esse pedaço de informação de um lugar para outro. Códigos de bandeira usados por barcos e o código Morse utilizados na telegrafia são exemplos de códigos para traduzir as letras em diferentes formas para permitir a comunicação através de diferentes meios de comunicação.

                Mais formalmente, um código é um conjunto de strings composto de símbolos de um alfabeto. Cada string definida no código é chamado de uma palavra. A mensagem é então composta de um conjunto concatenado de palavras de código para transmitir a informação necessária. Por exemplo, no código Morse o alfabeto é composto de símbolos hífen e ponto; letra ""S"" é representada pela palavra de código ""..."" letra ""O"" é representada pela palavra de código ""---"", e, portanto, a mensagem de socorro ""SOS"" em código Morse é ""... --- ..."".

                Códigos para a comunicação podem ter muitas propriedades desejáveis ​​e indesejáveis, tais como a ambigüidade, entropia, redundância, e muitos mais. Neste problema, vamos nos concentrar na ambigüidade como uma propriedade chave.

                Um código é ambíguo quando existe uma mensagem usando esse código, que pode ser dividida em diferentes sequências de palavras de código. Em outras palavras, um código ambíguo pode ter em uma mensagem mais de um significado. Por exemplo, considere o alfabeto binário, composto de símbolos {0,1}. Para o código das palavras composto {10, 01, 101} na mensagem 10101 pode ser entendida como 10-101 ou 101-01 e, portanto, o código é ambíguo. Por outro lado, para o código composto das palavras {01, 10, 011} existe nenhuma mensagem ambígua e, por tanto, o código é inequívoco.

                Como parte da comunidade de ciência da computação, você é obrigado a desenvolver um testador que verifica se os códigos são ambíguos. No caso de um código ser de fato ambíguo, você também deverá comunicar o comprimento (isto é, o número de símbolos) da mensagem ambígua mais curto para o código.";"Cada caso de teste consistirá em diversas linhas. Em todos os casos, o teste será o alfabeto conjunto de dígitos hexadecimais (dígitos decimais mais as letras maiúsculas ""A"" a ""F""). A primeira linha de um caso de teste conterá um número inteiro N (1 ≤ N ≤ 100) e o número de palavras de código no código. Cada uma das próximas N linhas descrevem uma palavra de código e contém uma seqüência diferente não-vazio de até 50 dígitos hexadecimais. A entrada é terminada por N = 0.";Para cada teste a saída será de uma única linha, com o comprimento da mais curta mensagem ambígua para o código fornecido ou -1 se o código é inequívoco.;False;10 / 10;110;28;25.45%
1387;Og;Ad-Hoc;1;"Og é um homem das cavernas com vários filhos e filhas, e ele quer contar todos eles. Og conta seus filhos com sua mão esquerda e suas filhas com sua mão direita.

                Entretanto, Og não é inteligente, e não sabe somar os dois números. Assim, ele pediu para você escrever um programa que realize a soma.";"A entrada contém vários casos de teste. Cada caso de teste consiste em uma linha contendo dois inteiros L e R, separados por um espaço, indicando o número de filhos e de filhas, respectivamente (1 ≤ L, R ≤ 5).

                O fim do arquivo de entrada é indicado por L = R = 0.";Para cada caso de teste, imprima uma linha contendo um inteiro indicando quantos filhos e filhas Og tem ao todo.;False;1 / 10;10353;7225;69.79%
1388;Onde Estão as Bolhas?;Estruturas e Bibliotecas;10;"Uma das operações mais frequentes em computação é ordenar uma sequência de objetos. Portanto, não é surpreendente que essa operação seja também uma das mais estudadas.

                Um algoritmo bem simples para ordenação é chamado Bubblesort. Ele consiste de vários turnos. A cada turno o algoritmo simplesmente itera sobre a sequência trocando de posição dois elementos consecutivos se eles estiverem fora de ordem. O algoritmo termina quando nenhum elemento trocou de posição em um turno.

                O nome Bubblesort (ordenação das bolhas) deriva do fato de que elementos menores (""mais leves"") movem-se na direção de suas posições finais na sequência ordenada (movem-se na direção do início da sequência) durante os turnos, como bolhas na água. A figura abaixo mostra uma implementação do algoritmo em pseudocódigo:

                
                    Para i  variando de 1 até N faça 
                      Para j variando de N - 1 a i faça
                        Se seq [j - 1]> seq [j] então
                          Intercambie os elementos seq[j - 1] e seq[j]
                        Fim-Se
                      Fim-Para
                      Se nenhum elemento trocou de lugar então
                        Final do algoritmo
                      Fim-Se
                    Fim-Para

                Por exemplo, ao ordenar a sequência [5, 4, 3, 2, 1] usando o algoritmo acima, quatro turnos são necessários. No primeiro turno ocorrem quatro intercâmbios: 1 x 2, 1 x 3, 1 x 4 e 1 x 5; no segundo turno ocorrem três intercâmbios: 2 x 3, 2 x 4 e 2 x 5; no terceiro turno ocorrem dois intercâmbios: 3 x 4 e 3 x 5; no quarto turno ocorre um intercâmbio: 4 x 5; no quinto turno nenhum intercâmbio ocorre e o algoritmo termina.

                Embora simples de entender, provar correto e implementar, o algoritmo bubblesort é muito ineficiente: o número de comparações entre elementos durante sua execução é, em média, diretamente proporcional a N2, onde N é o número de elementos na sequência. Você foi requisitado para fazer uma ""engenharia reversa"" no bubblesort, ou seja, dados o comprimento da sequência, o número de turnos necessários para a ordenação e o número de intercâmbios ocorridos em cada turno, seu programa deve descobrir uma possível sequência que, quando ordenada, produza exatamente o mesmo número de intercâmbios nos turnos.";A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros N e M que indicam respectivamente o número de elementos (1 ≤ N ≤ 100.000) na sequência que está sendo ordenada, e o número de turnos (0 ≤ M ≤ 100.000) necessários para ordenar a sequência usando bubblesort. A segunda linha de um caso de teste contém M inteiros Xi, indicando o número de intercâmbios em cada turno i (1 ≤ Xi ≤ N - 1, para 1 ≤ i ≤ M). O final da entrada é indicado por N = M = 0.;"Para cada caso de teste da entrada seu programa deve produzir uma linha na saída, contendo uma permutação dos números {1, 2, ..., N}, que quando ordenada usando bubblesort produz o mesmo número de intercâmbios no mesmo número de turnos especificados na entrada. Ao imprimir a permutação, deixe um espaço em branco entre dois elementos consecutivos. Se mais de uma permutação existir, imprima a maior na ordem lexicográfica padrão para sequências de números (a ordem lexicográfica da permutação a1, a2, ..., aN é maior do que a da permutação b1, b2, ..., bN se para algum 1 ≤ i ≤ N temos ai > bi e o prefixo a1, a2, ..., ai-1 é igual ao prefixo b1, b2, ..., bi-1).

                Em outras palavras, caso exista mais de uma solução, imprima aquela onde o primeiro elemento da permutação é o maior possível. Caso exista mais de uma solução satisfazendo essa restrição, imprima, dentre estas, aquela onde o segundo elemento é o maior possível. Caso exista mais de uma solução satisfazendo as duas restrições anteriores, imprima, dentre estas, a solução onde o terceiro elemento é o maior possível, e assim sucessivamente.

                Para toda entrada haverá pelo menos uma permutação solução.";False;10 / 10;1099;185;16.83%
1389;O Problema do Sapateiro Viajante;Grafos;9;"Era uma vez um reino muito pacífico chamado Nlogônia. Naquela época, Poly, o Sapateiro, podia vir ao país e viajar livremente de cidade em cidade sem nenhuma preocupação. Essa tarefa era fácil, já que todas cidades na Nlogônia tinham uma estrada direta para todas outras cidades no país. Ele podia então viajar facilmente por todo país visitando cada cidade exatamente uma vez e consertando os sapatos de todos.

                Mas isso não é mais verdade. Os tempos mudaram e a guerra chegou à Nlogônia. A época em que as pessoas podiam viajar livremente acabou.

                Confederações identificadas por cores foram formadas entre as cidades por todo o país, e agora cada cidade pertence a pelo menos uma e no máximo duas confederações. Ao tentar entrar em uma cidade, você deve dar ao guarda de fronteira um tíquete de uma das confederações a que essa cidade pertence. Ao sair da cidade, você recebe um tíquete da outra confederação a que a cidade pertence (diferente do que você deu ao entrar) ou da mesma confederação se a cidade pertencer a apenas uma.

                Como Poly, o Sapateiro, é amigo de longa data da Nlogônia, ele pode escolher o tíquete e a cidade que ele deseja entrar como a primeira cidade do país, mas depois disso ele deve obedecer as regras da confederação. Ele quer fazer a mesma rotina que ele fazia antes, visitando cada cidade exatamente uma vez em Nlogônia, mas agora não é fácil para ele fazer isso, apesar de ele poder escolher onde começar sua jornada.

                Por exemplo, suponha que existam quatro cidades, númeradas de 0 a 3. A cidade 0 pertence às confederações vermelha e verde; a cidade 1 pertence apenas à vermelha; a cidade 2 pertence à verde e à amarela; e a cidade 3 pertence à azul e à vermelha. Se Poly, o Sapateiro, escolher começar na cidade 0, ele pode entrar nela carregando tanto o tíquete vermelho quanto o amarelo e sair recebendo o outro. Caso ele decida escolher o tíquete vermelho, ele vai sair com um tíquete verde, e então ele pode ir apenas para a cidade 2. Ao sair da cidade 2 ele recebe o tíquete amarelo e agora não pode ir a mais nenhum lugar. Se ele tivesse escolhido o tíquete verde como primeiro ele teria recebido o vermelho ao sair, e então poderia viajar para as cidade 1 ou 3. Se ele escolher a cidade 3, ao sair ele receberá o tíquete azul e novamente não poderá ir a lugar algum. Se ele escolher a cidade 1, ele recebe o tíquete vermelho de novo ao sair (a cidade 1 pertence apenas à confederação vermelha) e pode viajar apenas para a cidade 3 e nunca chegará à cidade 2. Portanto, não é possível visitar cada cidade exatamente uma vez começando na cidade 0. É possível, entretanto, começando na cidade 2 com um tíquete amarelo, sair da cidade com um tíquete verde, então visitar a cidade 0, sair com um tíquete vermelho, então visitar a cidade 1, sair com um tíquete vermelho novamente e, por fim, visitar a cidade 3.

                Como você pode ver, se tornou realmente difícil para Poly, o Sapateiro, cumprir a tarefa, então ele pede que você o ajude. Ele quer saber se é possível escolher uma cidade para começar tal que ele possa visitar todas cidades da Nlogônia uma vez.

                Você pode ajudar Poly, o Sapateiro?";"A entrada contém diversos casos de teste. A primeira linha de um caso de teste contém dois inteiros N e C, separados por um espaço, indicando respectivamente o número de cidades (1 <= N <= 500) e confederações (1 <= C <= 100) no país. Cada uma das próximas C linhas descreve uma confederação. Ela começa com um inteiro K (0 <= K <= N) e então K inteiros representando as cidades que pertencem a essa confederação. Todos inteiros são separados por espaços simples e cidades são numeradas de 0 a N - 1. Cada cidade vai aparecer pelo menos uma vez e no máximo duas vezes e nenhuma cidade vai ser repetida na mesma confederação.

                O final da entrada é indicado por uma linha contendo dois zeros separados por um espaço.";Para cada caso de teste na entrada, seu programa deverá imprimir uma única linha, contendo o inteiro -1 caso não seja possível satisfazer os requisitos ou um inteiro representando a cidade onde Poly, o Sapateiro, pode começar sua jornada. Se existir mais de uma resposta, imprima a menor.;False;9 / 10;892;60;6.73%
1390;Bases;Matemática;9;"O que você consegue se multiplicar 6 por 9? A resposta, é claro, é 42, mas somente se você fizer os cálculos na base 13.

                Dado um inteiro B ≥ 2, o sistema de numeração na base B é a maneira de escrever inteiros usando somente dígitos entre 0 e B - 1, inclusive. Em um número escrito na base B, o dígito mais à direita tem seu valor multiplicado por 1, o segundo mais à direita tem seu valor multiplicado por B, o terceiro mais à direita tem seu valor multiplicado por B2, e assim por diante.

                Algumas equações são verdadeiras ou falsas dependendo da base em que são consideradas. A equação 2 + 2 = 4, por exemplo, é verdadeira para qualquer B ≥ 5 - ela não vale para a base 4, por exemplo, visto que não existe dígito '4' na base 4. Por outro lado, uma equação como 2 + 2 = 5 nunca é verdadeira.

                Escreva um programa que, dada uma equação, determine em quais bases ela é verdadeira.";"Cada linha da entrada contém um caso de teste; cada caso de teste é uma equação da forma ""EXPR=EXPR"", onde ambos ""EXPR"" são expressões aritméticas com no máximo 17 caracteres.

                Todas expressões são válidas e contém apenas os caracteres '+', '*' e os dígitos entre '0' e '9'. Nenhuma expressão contém sinais de mais no começo da equação e nenhum número tem zeros à esquerda.

                O final da entrada é indicado por uma linha contendo apenas ""="".";"Para cada caso de teste da entrada seu programa deve produzir uma única linha de saída, indicando para quais bases a equação dada é válida.

                Se a expressão for verdadeira para infinitas bases, imprima ""B+"", onde B é a primeira base para a qual a equação é válida.

                Se a expressão for válida apenas para um conjunto finito de bases, imprima elas em ordem crescente, separadas por espaço.

                Se a expressão não for verdadeira em nenhuma base, imprima o caractere '*'.";False;9 / 10;146;35;23.97%
1391;Quase Menor Caminho;Grafos;5;"Achar um caminho que vai de um ponto inicial até um ponto de destino dados um conjunto de pontos e a extensão das rotas que os conectam é um problema já bem conhecido, e já até é parte de nosso dia-a-dia, uma vez que programas de caminho mínimo estão largamente distribuídos hoje em dia.

                A maioria das pessoas normalmente gosta bastante dessas aplicações já que elas tornam suas vidas mais fáceis. Bem, talvez nem tão mais fáceis.

                Agora que quase todo mundo tem acesso a aparelhos de GPS capazes de calcular os caminhos mais curtos a maioria das rotas que formam o caminho mais curto estão ficando lentas devido ao tráfego pesado. Como a maioria das pessoas tenta seguir o mesmo caminho, não vale mais a pena seguir essas direções.

                Com isso em mente, seu chefe pediu a você que desenvolvesse uma nova aplicação à qual somente ele vai ter acesso, poupando tempo sempre que ele tiver uma reunião ou qualquer evento urgente. Ele pede a você que o programa não deve dizer o menor caminho, mas o quase menor caminho. Ele define o quase menor caminho como o menor caminho que vai de um ponto inicial até um um ponto de destino de forma que nenhuma rota entre dois pontos consecutivos pertence a qualquer caminho mínimo entre o ponto de partida e o de destino.

                Por exemplo, suponha que a figura abaixo representa o mapa dado, com círculos representando localizações e linhas representando rotas diretas, de mão única com as distâncias indicadas. O ponto de partida está marcado como S e o de destino está marcado como D. As linhas em negrito pertencem a um caminho mínimo (nesse caso existem dois caminhos mínimos, cada um com extensão 4). Logo, o quase menor caminho seria o indicado com linhas pontilhadas (extensão 5), já que nenhuma rota entre dois pontos consecutivos pertence a nenhum caminho mínimo. Note que poderia existir mais de uma resposta possível, por exemplo, se a rota com extensão 3 tivesse extensão 1. Bem como poderia inexistir uma resposta certa.";"A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros N (2 <= N <= 500) e M (1 <= M <= 104), separados por um espaço, indicando, respectivamente, o número de pontos no mapa e o número de rotas de mão única conectando dois pontos diretamente. Cada ponto é identificado por um único inteiro entre 0 e N - 1. A segunda linha contém dois inteiros S e D, separados por um único espaço, indicando, respectivamente, os pontos de partida e de destino (S != D; 0 <= S, D < N). Cada uma das M linhas seguintes contém três inteiros U, V e P (U != V; 0 <= U, V < N; 1 <= P <= 103), separados por espaço, indicando a existência de uma rota de U para V com distância P. Existe no máximo uma rota de um ponto U até um ponto V, mas perceba que a existência de uma rota de U para V não implica a existência de uma rota de V para U e, se tal estrada existir, ela pode ter extensão diferente. O fim da entrada é indicado por uma linha contendo apenas dois zeros separados por um espaço.";Para cada caso de teste na entrada, seu programa deve imprimir uma única linha, contendo -1 se não for possível cumprir os requisitos ou um inteiro representando a extensão do quase menor caminho encontrado.;True;5 / 10;670;288;42.99%
1392;Conta de Luz;Matemática;5;"O ano é 2100. A eletricidade se tornou muito cara. Recentemente, sua companhia elétrica elevou as taxas de energia mais uma vez. A tabela abaixo mostra as novas taxas (o consumo é sempre um inteiro positivo):

                

                Isso significa que, calculando a quantidade a pagar, os primeiros 100 LWh (Crazy-Watt-hora) tem o preço de 2 Americus cada; os próximos 9900 LWs (entre 101 e 10000) tem um preço de 3 Americus cada e assim por diante.

                Por exemplo, se você consome 10123 LWs você terá que pagar 2×100+3×9900+5×123 = 30515 Americus.

                Os matemáticos do mal da companhia armaram um jeito de ganhar ainda mais dinheiro. Ao invés de informarem quanta energia você consumiu e quanto deve pagar, eles mostram os números relativos a você e um vizinho aleatório:

                A: o total a pagar se as contas fossem somadas; e
                    B: o valor absoluto entre as contas.

                Se você não consegue descobrir quanto você tem que pagar, você deve pagar mais 100 Americus pelo ""serviço"". Você é bastante econômico, portanto não tem como ter consumido mais que seus vizinhos. Então, sendo esperto, você sabe que tem como computar quanto você tem que pagar. Por exemplo, suponha que a companhia informou-o os seguintes números: A = 1100 e B = 300. Então o seu consumo e do seu vizinho tem que ser 150 LWh e 250 LWh respectivamente.
				O consumo total é 400 LWh então A é 2×100+3×300 = 1100. Você deve pagar 2×100+3×50 = 350 Americus, enquanto seu vizinho deve pagar 2×100+3×150 = 650 Americus, então B é |350 - 650| = 300.

                Decidido a não pagar o custo adicional, você resolveu escrever um programa de computador para encontrar quanto você deve pagar.";"A entrada contém vários casos de teste. Cada teste é composto de uma única linha, contendo dois inteiros A e B, separados por um único espaço, representando os números mostrados a você pela companhia (1 ≤ A, B ≤ 109). Você deve assumir que haja sempre uma única solução, ou seja, existe exatamente um par de números de consumo que produzem tais números.

                O último caso de teste é seguido de uma linha contendo dois zeros separados por um único espaço.";Para cada caso de teste ser programa deve imprimir uma única linha contendo um inteiro, representando o quanto você deve pagar.;True;5 / 10;505;178;35.25%
1393;Lajotas Hexagonais;Matemática;1;"O caminho para a escola de Maria é uma linha reta pavimentada com lajotas hexagonais. A imagem abaixo mostra um exemplo do caminho com 12 peças numeradas.

                ​

                Maria adora matemática. Ao ir para a escola, ela pisa sobre as lajotas do caminho de acordo com as seguintes regras:

                
                    Ela sempre começa a partir da lajota com o rosto sorridente (é sempre bom começar com um sorriso!). Esta lajota está sempre presente no inicio do caminho. As outras peças são numeradas consecutivamente, de modo ascendente, a partir de 1, como mostrado na figura.
                    Não é permitido voltar, isto é, ela não deve pisar em uma telha que tenha um número menor do que a telha que ela está pisando (quando ela decide ir para a escola, ela vai mesmo!).
                    Ela sempre dá passos de uma lajota para outra vizinha (não há saltos, de modo a manter-se fora de perigo!).
                    Ela deve sempre terminar na mais alta lajota contada.
                

                Quando as aulas terminam, ela está tão cansada que evita o caminho e caminha no gramado. Maria não quer repetir qualquer seqüência de passos nas lajotas e ela gostaria de saber, se o caminho está pavimentado com N lajotas numeradas e uma lajota com um sorriso, quantos dias vai demorar para percorrer cada sequência possível uma só vez.

                Por exemplo, cinco dias serão necessários para que ela tente todas as possíveis sequências de passos se o caminho tem N = 4 lajotas, um dia, para cada uma das sequências: 1-2-3-4, 1-2-4, 1-3-4, 2-3-4 e 2-4. Escreva um programa para determinar quantas sequências diferentes de passos há em um caminho com um determinado número N de lajotas.";A entrada contém vários casos de teste. Cada teste é composto por uma linha contendo um número inteiro N (1 ≤ N ≤ 40), o número de peças no caminho. O último caso de teste é seguido por uma linha contendo um único zero.;Para cada teste, imprimir uma linha contendo um único número inteiro, o número de diferentes sequências de passo.;True;1 / 10;2882;1910;66.27%
1394;Hooligan;Grafos;9;"Futebol é o esporte mais popular da América Latina (e do mundo). ""Hooligan"" é uma palavra usada para descrever um fã agressivo de futebol.

                Em Linearonia, está sendo realizado um campeonato de futebol. Lá o rank funciona assim: para cada jogo o campeão ganha dois pontos e o perdedor não ganha nenhum; em caso de empate cada time recebe um ponto. O campeão é o time com o maior número de pontos. Cada par de times diferentes disputam uma partida um contra o outro um número igual de vezes, chamado de número correspondente.

                Você tem seu time favorito, seu time dos sonhos, e você pondera se é possível o seu time ser o campeão. Você sabe o número de times, o número correspondente e o resultado de alguns jogos que já foram jogados. Escreva um programa que informe se ao fim do campeonato seu time poderá ser o único campeão, extritamente com mais pontos que qualquer outro time.";"A entrada contém vários casos de teste, cada caso consiste um uma ou mais linhas. A primeira linha contém três inteiros, N, M e G, separados por um espaço cada, representando respectivamente o número de times diputando o campeonato (2 ≤ N ≤ 40), o número correspondente (1 ≤ M ≤ 4) e o número de jogos já concluídos (1 ≤ G). Seu time é identificado pelo número 0, os outros times são identificados pelos inteiros 1, 2,..., N - 1.

                Cada uma das próximas G linhas, descreve os jogos já disputados. A linha contém um inteiro I, um caractere C e um inteiro J, separados por um espaço cada. inteiros I e J são os times que jogaram tal jogo (I ≠ J e 0 ≤ I, J ≤ N - 1). O caractere C será '<' se o time I perder para o time J, ou '=' se terminar empatado.

                O último caso de teste é seguido por uma linha contendo três zeros separados por um espaço cada.";Para cada caso de teste na entrada, seu programa deve imprimir uma única linha, contendo um único caractere, 'Y' se seu time pode ser campeão ou 'N' caso contrário.;False;9 / 10;654;220;33.64%
1395;Números e Operações;Paradigmas;9;"Queremos resolver um problema clássico de obtenção de um determinado número a partir de um conjunto de números iniciais, de acordo com as seguintes regras:

                
                    Todos os números envolvidos no problema são inteiros positivos, e por isso todo resultado intermediário de qualquer operação também deverá ser inteiro. Assim, as operações que levam a não inteiros ou números não positivos serão estritamente proibidas (não vamos considerar truncamento ou resultados de arredondamento, nem qualquer outra coisa do tipo).
                    Nós podemos fazer qualquer uma das quatro operações aritméticas elementares: adição, multiplicação, subtração e divisão.
                    Cada número pode ser utilizada no máximo uma vez: quando utilizamos dois números, os mesmos não podem ser utilizados novamente em operações posteriores (mas o resultado desta operação pode, e as mesmas considerações aplicam-se a este novo número).
                    Não há nenhuma obrigação de fazer uso de todos os números iniciais.
                

                Faremos as seguintes premissas sobre os dados de entrada:

                
                    Para qualquer número de saída T, ele terá sempre que: 0 < T < 2000.
                    Para qualquer número de entrada I, ele terá sempre que: 0 < I < 200.
                    Haverá sempre pelo menos dois números iniciais e sete no máximo.
                    Não vamos considerar os casos de problemas triviais, ou seja, casos em que o número de destino já está contido nos iniciais.
                

                A fim de tornar a única solução oferecida pelo programa, também deverá fazer as seguintes suposições sobre a solução que iremos considerar como correta: O programa deverá fornecer a solução que satifaz as condições, com um número mínimo de operações. Se houver mais do que uma solução com o número mínimo de operações, vamos decidir qual tomar de acordo com as características da primeira operação na qual eles se diferem. As próximas regras serão aplicadas.

                
                    Para duas operações iguais, será escolhido aquele cujo operando do lado esquerdo é maior que, ou igual a, o operando do lado direito. Por exemplo, a operação ""10 x 5 = 50"" terá prioridade sobre ""5 x 10 = 50"".
                    Para as operações que envolvem dois operadores diferentes, será preferido aquele cujo operador tem a prioridade mais alta, definidos como se segue: Adição (mais alto) - Multiplicação - Subtração - Divisão (mais baixo).
                    Para operações com o mesmo operador, será preferido um que envolve o número cuja posição é mais baixa, na ordem em que foram dados na entrada (que aparece em primeiro lugar). Se este primeiro número pode aparecer em duas operações diferentes de mesma precedência, o mesmo critério deve ser aplicado para o segundo operando. Novos números gerados pelas operações são assumidos para serem então, colocados no início da lista ordenada.";"A entrada é constituída por um conjunto de linhas. Cada linha representa um caso de teste, e lhes serão dados no seguinte formato:
                
                T N I1 ... IN
                
                T é o número de destino, N é a quantidade de números iniciais e I1 ... IN são os próprios números iniciais. Todos os números são separados por um único espaço em branco. Não haverá caractere (/) levando espaços em branco no início e no fim de qualquer linha de entrada. A linha final com um único zero marca o fim da entrada e não será processada.";"Para cada caso de teste o programa deve produzir uma linha com a mensagem:

                No solution

                Se o resultado não puder ser obtido a partir dos números de entrada, ou se um conjunto de linhas com a seqüência de operações leve a partir dos números iniciais para o resultado, levando em consideração os critérios anteriores. Cada operação deve ser expressa da seguinte forma:

                operando_da_esquerda operador operando_da_direita = resultado

                Onde operando_da_esquerda e operando_da_direita representam os números envolvidos na operação, o resultado é o resultado da operação, e o operador é um único caractere que representa a operação que deverá ser feita a partir dos seguintes:

                '+': Adição
                    'x': multiplicação
                    '-': Subtração
                    '/': Divisão

                Para cada caso de teste, a última linha de sua solução deve terminar com um símbolo '<-', indicando que esta é a última operação, que dá o número de destino como resultado. Para todos os casos, deverá haver um espaço vazio (apenas um) entre cada impresso e o seguinte. Não deve haver nenhum caractere (/) negociando espaços em branco no início e no fim de cada linha de saída. Cada linha deve terminar com uma marca de final de linha, e não deve aparecer nenhuma linha em branco na saída.";False;9 / 10;91;15;16.48%
1396;Hoje tem Prova da Cris!;Paradigmas;7;"A Profa. Cristina é muito exigente. Sua fama de maquiavélica já é conhecida fora da universidade e ela até gosta disso... Mas, parece que agora ela exagerou... Na última prova de sua disciplina, a professora exigiu que os alunos formassem fila indiana para entrar na sala de aula. Eles formaram. Quando eles iam entrar, ela gritou: ""Mas, vocês não estão em ordem lexicográfica crescente!!!???""

                Os alunos revoltados formaram uma comissão e foram conversar com a professora dizendo que aquilo já era demais. Para não parecerem intransigentes eles disseram que permitiriam no máximo um número k de trocas de posição entre pessoas consecutivas na fila. A professora gostou da idéia, e colocou como um problema extra da prova.

                Dada uma sequência de nomes e um inteiro k, devolver a menor sequência (em ordem lexicográfica) que pode ser obtida a partir da original com no máximo k trocas de elementos vizinhos. Sua tarefa é resolver este exercício para os alunos da Profa. Cristina a fim de que eles consigam entrar na sala e começar a prova.";"A entrada é composta de diversas instâncias. Cada instância começa com dois inteiros n e k, onde 1 ≤ n ≤ 100 e 0 ≤ k ≤ n, indicando a quantidade nomes e a quantidade máxima de trocas, respectivamente. A próxima linha contém uma sequência de n nomes. Cada nome possui tamanho máximo de 20 caracteres, e letras de 'a' a 'z'.

                O programa deve parar de processar a entrada quando n = k = 0.";"Para cada instância, você deverá imprimir um identificador ""Instancia c"", onde c é o número da instância atual. Na linha seguinte você deve imprimir a lista de nomes resultante do processo. Após cada nome, seu programa deve imprimir um espaço em branco, inclusive após o último nome (por exemplo, na saída do primeiro caso de teste abaixo: wanderleybthadeubchegadob, onde b representa um espaço em branco. Após cada instância, seu programa deve imprimir uma linha em branco, inclusive após a última.";False;7 / 10;759;181;23.85%
1397;Jogo do Maior;Ad-Hoc;1;"Og gosta muito de brincar com seus filhos. Seu jogo preferido é o jogo do maior, de autoria própria. Este passatempo (no tempo das cavernas se tinha muito tempo disponível para jogos) é jogado em dupla, Og e um dos seus filhos. O jogo procede da seguinte forma: os dois participantes escolhem um número de rodadas e, a cada rodada, cada participante diz um número de 0 até 10 em voz alta, sendo que o participante que falar o número mais alto ganha um ponto (em caso de empate, ninguém ganha o ponto). No final das rodadas, os pontos são contabilizados e o participante com o maior número de pontos ganha.

                Og e seus filhos gostam muito do jogo, mas se perdem na contagem dos pontos. Você conseguirá ajudar Og a verificar a pontuação de uma lista de jogos?";A entrada é composta por vários casos de teste (partidas). Cada caso é iniciado com um inteiro N (de 0 até 10) representando o número de rodadas da partida, sendo que o valor 0 representa o final da entrada e não deve ser processado. Cada uma das próximas N linhas contém dois inteiros, A e B, onde A é o número escolhido pelo primeiro jogador e B é o número escolhido pelo segundo jogador (0 ≤ A, B ≤ 10).;A saída deve ser composta por uma linha por caso de teste, contendo o número de pontos de cada jogador, separados por um espaço.;False;1 / 10;9219;5975;64.81%
1398;Oceano Profundo! Faça-o Raso!!;Matemática;7;"Oceano profundo
                Estou com tanto medo de mostrar meus sentimentos,
                Eu naveguei por um milhão de tetos
                Em meu quarto solitário
                Oceano profundo

                Os versos acima fazem parte de uma tradução livre da letra de uma música popular de Cliff Richard. Neste problema, iremos lidar com um tipo similar de pessoa. O nome dessa pessoa é Rampell-Stilt-Skin. Além disso, um outro fato importante: ele é um homem morto. Alguém o matou alguns dias atrás, e você é o detetive que deve resolver o mistério. O problema deste homem é que ele sempre tentou esconder suas informações e seus sentimentos ""abaixo do mar"" (isto é, fora de alcance). Ele escreveu um diário que contém algumas sentenças e um grande número em binário (este número pode ter até 10000 dígitos). Se o número é divisível pelo número primo 131071, então as sentenças são verdadeiras, e, caso contrário, elas são falsas.

                Dados números grandes em binário, você deve verificar se cada número é divisível por 131071 ou não. Seu algoritmo deve ser eficiente o bastante.";O arquivo de entrada contém vários números em binário. Cada número em binário começa em uma linha nova, mas pode ser expandido em várias linhas. Cada número é terminado pelo simbolo #. Nenhuma linha contém mais de 100 dígitos.;"Para cada número em binário, imprima ""YES"" se o número é divisível pelo número primo dado, ou ""NO"" caso contrário.";False;7 / 10;1758;628;35.72%
1399;Transformador de Matriz;Matemática;7;Escreva um programa que transforme uma matriz A[1], A[2], ..., A[n] de acordo com as m instruções. Cada instrução (L, R, v, p) significa: Primeiro, calcular quantos números de A[L] a A[R] (inclusive) são estritamente inferiores a v, chame esta resposta de k. Em seguida, altere o valor de A[p] para u*k/(R - L + 1), aqui nós usamos a divisão inteira (ou seja, ignorando parte fracionária).;A primeira linha de entrada contém três inteiro n, m, u (1 ≤ n ≤ 300.000, 1 ≤ m ≤ 50.000, 1 ≤ u ≤ 1.000.000.000). Cada uma das n linhas seguintes contém um número inteiro A[i] (1 ≤ A[i] ≤ u). Cada uma das m linhas seguintes contém uma instrução que consiste de quatro números inteiros L, R, v, p (1 ≤ L ≤ R ≤ n, 1 ≤ v ≤ u, 1 ≤ p ≤ n).;Imprimir n linhas, uma para cada número inteiro da matriz final.;False;7 / 10;1118;272;24.33%
1400;Jogo - Contando;Matemática;4;"Existem n pessoas que estão em uma linha, em um famoso jogo chamado ""contando"". Quando o jogo começa, a pessoa mais à esquerda diz ""1"" em voz alta, em seguida, a segunda pessoa (as pessoas estão numerados de 1 a n, da esquerda para a direita) diz ""2"" em voz alta. Isto é seguido pela terceira pessoa dizendo ""3"", e assim por diante. Quanda o e-nésima pessoa (ou seja, a pessoa mais a direita) diz ""n"" em voz alta, a próxima vez vai para a sua pessoa imediatamente à esquerda (ou seja, a (n - 1)-nésima pessoa), que deve dizer ""n + 1"" em voz alta, então a (n - 2)-ésima pessoa deve dizer ""n + 2 "" em voz alta. Depois que a pessoa mais à esquerda falou de novo, a contagem vai para a direita novamente. Há um senão (caso contrário, o jogo seria muito chato!): Se uma pessoa dizer um número que é múltiplo de 7, ou sua representação decimal contém o dígito 7, ele deve bater palmas em vez disso! A tabela a seguir nos mostra o processo de contagem para n = 4 ('X' representa uma salva de palmas). Quando a 3ª pessoa bate palmas pela 4 vez, ele está realmente contando 35.
				
                
                    
                        
                            
                                Person
                                1
                                2
                                3
                                4
                                3
                                2
                                1
                                2
                                3
                            
                            
                                Action
                                1
                                2
                                3
                                4
                                5
                                6
                                X
                                8
                                9
                            
                            
                                Person
                                4
                                3
                                2
                                1
                                2
                                3
                                4
                                3
                                2
                            
                            
                                Action
                                10
                                11
                                12
                                13
                                X
                                15
                                16
                                X
                                18
                            
                            
                                Person
                                1
                                2
                                3
                                4
                                3
                                2
                                1
                                2
                                3
                            
                            
                                Action
                                19
                                20
                                X
                                22
                                23
                                24
                                25
                                26
                                X
                            
                            
                                Person
                                4
                                3
                                2
                                1
                                2
                                3
                                4
                                3
                                2
                            
                            
                                Action
                                X
                                29
                                30
                                31
                                32
                                33
                                34
                                X
                                36
                            
                        
                    
                

                Dado n, m e k, a sua tarefa é descobrir, quando a m-ésima pessoa bate palmas pela k-ésima vez, e qual é o número real que está sendo contado.";Haverá, no máximo, 100 casos de teste na entrada. Cada teste contém três inteiros n, m e k (2 ≤ n ≤ 100, 1 ≤ m ≤ n, 1 ≤ k ≤ 100) em uma única linha. O último caso de teste é seguido por uma linha com n = m = k = 0, e que não deverá ser processada.;Para cada linha, imprima o número real que está sendo contado, quando a m-ésima pessoa bate palmas pela k-ésima vez. Se isso nunca pode acontecer, imprima '-1'.;False;4 / 10;1018;473;46.46%
1401;Gerando Permutações Ordenadas Rapidamente;Estruturas e Bibliotecas;4;Gerar permutações sempre foi um problema importante na ciência da computação. Neste problema, você terá de gerar todas as permutações de uma dada string, em ordem lexicográfica crescente. Lembre-se que seu algoritmo deve ser eficiente.;A primeira linha da entrada contém um inteiro n, indicando o número de strings que seguem. As próximas n linhas contém uma string cada. Cada string conterá apenas caracteres alfanuméricos, e nunca conterá espaços. O tamanho máximo de uma string é 10.;Para cada string da entrada, imprima todas as permutações possíveis da string, em ordem lexicográfica crescente. Note que as strings devem ser tratas como Case Sensitive (isto é, letras maiúsculas são diferentes das minúsculas). Além disso, nenhuma permutação deve ser impressa mais de uma vez. Uma linha em branco deve ser impressa após cada lista de permutações.;False;4 / 10;2400;1047;43.62%
1402;Será Que Indiana Jones Chega Lá?;Grafos;8;"Indiana Jones está numa cidade deserta, 
                    aniquilada durante uma guerra. Os telhados de todas as casas foram 
                    destruídos e apenas alguns pedaços de parede ainda estão de pé. O solo 
                    tem tantas minas que a única maneira segura de se locomover pela cidade é
                    andando sobre as poucas paredes restantes. A missão de nosso herói é 
                    salvar uma pessoa que está presa na cidade. Para se locomover entre duas
                    paredes não conectadas Indiana Jones pensou em levar consigo uma placa 
                    de madeira, que ele poderia colocar entre as duas paredes e assim passar
                    sobre a placa de uma para a outra.
                

                
				
				Fig. 1: Mapa da cidade com a rota usada por Indiana Jones
				

                
                    As posições iniciais de Indiana Jones e da pessoa presa estão em 
                    algum ponto das paredes. Além disso, as paredes têm apenas a direção 
                    Norte-Sul (vertical) ou Oeste-Leste (horizontal).
                

                
                    Você receberá um mapa com as ruínas da cidade. Sua missão é 
                    determinar o menor tamanho da placa de madeira que Indiana Jones precisa
                    carregar para chegar à pessoa.";"Seu programa deve processar vários casos de teste. Cada caso de teste começa com um inteiro N indicando o número de porções de paredes restantes na cidade (2 ≤ N ≤ 1000). Cada uma das N
                    linhas seguintes descrevem uma porção de parede. A primeira porção de 
                    parede é a porção em que Indiana Jones se localiza inicialmente. A 
                    segunda porção é aquela em que a pessoa presa se localiza. Cada 
                    descrição de porção de parede consiste de três inteiros X, Y e L (-10000 ≤ X, Y, L ≤ 10000), onde X e Y
                    definem ou o ponto mais próximo do Sul (para porções verticais) ou o 
                    ponto mais próximo do Oeste (para porções horizontais). O valor de L determina o tamanho e a direção da porção: se L ≥ 0, a porção é horizontal, de comprimento L; se L < 0, a seção é vertical, com comprimento |L|. O final da entrada é indicado por N = 0.";"Para cada caso de teste da entrada seu programa 
                    deve imprimir uma linha, contendo um valor real representando o tamanho 
                    da placa de madeira que Indiana Jones deve carregar. O tamanho deve ser 
                    impresso como um número real com 2 casas decimais, e o último valor 
                    decimal deve ser arredondado. A entrada não conterá casos de teste onde 
                    as diferenças de arredondamento são significativas.";True;8 / 10;167;68;40.72%
1403;Meu Avô é Famoso;Ad-Hoc;5;"A família toda ficou excitada pela novidade. Todos sabiam que o meu avô tinha sido um excelente jogador de bridge por décadas, mas quando foi anunciado que ele estaria no Guinness Book, o livro dos recordes, como o jogador de bridge de maior sucesso de todos os tempos, wow, aquilo foi surpreendente.

                A Associação Internacional de Bridge (AIB) tem mantido, por diversos anos, um ranking semanal dos melhores jogadores do mundo. Considerando que cada aparição em um ranking semanal constitui um ponto para o jogador, meu avô foi nominado o melhor jogador de todos os tempos porque ele conseguiu o maior número de pontos.

                Tendo muitos amigos que também estavam competindo com ele, meu avô está extremamente curioso para saber que jogador(es) ficou(aram) com o segundo lugar. Ele precisa de um programa, o qual, dada uma lista com os ranking semanais, descubra que jogador(es) ficou(aram) com o segundo lugar, de acordo com o número de pontos.";"A entrada contém diversos casos de teste. Jogadores são identificados por inteiros de 1 a 10000. A primeira linha de um caso de teste contém dois inteiros N e M, indicando, respectivamente, o número de rankings disponíveis (2 ≤ N ≤ 500) e o número de jogadores em cada ranking (2 ≤ M ≤ 500). Cada uma das próximas N linhas contém a descrição de um ranking semanal. Cada descrição é composta por uma sequência de M inteiros, separados por um espaço em branco, identificando os jogadores que apareceram naquele ranking semanal. Você pode assumir que:

                
                    em cada caso de teste há exatamente um melhor jogador e ao menos um segundo melhor jogador,
                    cada ranking semanal consiste de M jogadores distintos.
                

                O final da entrada é indicado por N = M = 0.";Para cada caso de teste da entrada seu programa deve produzir uma linha de saída, contendo o identificador do jogador que é o segundo melhor, em número de aparições nos rankings. Se há um empate para segundo lugar, imprima os identificadores de todos os segundo colocados, em ordem crescente. Cada identificador produzido deve ser seguido por um espaço em branco.;False;5 / 10;2042;843;41.28%
1404;MegaDamas;Ad-Hoc;7;"MegaDamas é um jogo de tabuleiro para dois jogadores, muito similar ao conhecido jogo de Damas. O tabuleiro é retangular, com N linhas e M colunas de pequenos quadrados arranjados em uma grade N x M. Os pequenos quadrados são alternadamente coloridos com uma cor clara e uma cor escura, no padrão usual de um tabuleiro de damas. Os quadrados de cor escura são denominados “casas” (note no entanto que, por razões de visualização, os diagramas abaixo mostram casas como quadrados brancos).

                No início do jogo, cada jogador tem um certo número de peças, posicionadas nas casas mais próximas da borda do tabuleiro que o jogador escolher (os jogadores escolhem bordas opostas). Durante o jogo, as peças só podem ocupar as casas do tabuleiro.

                Um dos movimentos do jogo é “capturar” uma peça do oponente, saltando sobre ela, diagonalmente, para a casa adjacente além da peça, casa esta que deve estar vazia. A peça do oponente é então removida do tabuleiro. As três casas envolvidas na captura (a casa inicial de sua peça, a casa que contém a peça do oponente e a casa vazia, onde sua peça estará após a jogada) devem estar diagonalmente alinhadas e devem ser diagonalmente adjacentes, como no diagrama abaixo.

                

                Em MegaDamas uma peça pode capturar peças do oponente saltando diagonalmente para frente ou para trás (note que, na maioria das variações existentes do jogos de Damas, uma peça só pode capturar peças do oponente saltando para frente). Você pode também efetuar uma captura múltipla, com uma peça apenas, saltando seguidamente para casas vazias sobre peças oponentes. Em uma captura múltipla, a sua peça pode mudar de direção, saltando primeiro em uma direção e depois em outra. Você pode capturar apenas uma peça a cada salto, mas pode capturar várias peças com saltos seguidos. Você não pode saltar sobre uma peça sua, e não pode saltar a mesma peça oponente mais de uma vez.

                São dadas as dimensões do tabuleiro e uma descrição do estado corrente de um jogo. É a sua vez de jogar e você deve determinar o número máximo de peças do seu oponente que podem ser capturadas em um movimento de captura.";"A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros N e M indicando respectivamente o número de linhas e o número de colunas do tabuleiro (3 ≤ N ≤ 20, 3 ≤ M ≤ 20 e N x M ≤ 200). O quadrado mais à esquerda do tabuleiro na borda mais próxima ao jogador é uma casa. A segunda linha contém a descrição do estado do jogo. Cada descrição consiste de [(N x M)/2] inteiros, separados por um espaço, correspondendo às casas do tabuleiro, que são numeradas de 1 a [(N x M)/2], da esquerda para a direita, da borda mais próxima ao jogador à borda mais próxima ao seu oponente. Na descrição do estado do jogo, ‘0’ representa uma casa vazia, ‘1’ representa uma casa com uma de suas peças, e ‘2’ representa uma casa com uma peça de seu oponente. Há no máximo [(N x M)/4] peças de cada jogador no tabuleiro. O final da entrada é indicado por N = M = 0.

                

                Figura 1: Numeração das casas em (a) tabuleiro de dimensões 8 x 8 e em (b) tabuleiro de dimensões 5 x 3.";Para cada caso de teste da entrada, seu programa deve produzir uma única linha na saída, contendo um inteiro indicando o maior número de peças do seu oponente que podem ser capturadas em uma jogada.;True;7 / 10;358;167;46.65%
1405;O Problema da Parada;Estruturas e Bibliotecas;10;"O Problema da Parada (The Halting Problem) é um problema de decisão clássico da Ciência da Computação que consiste, basicamente, em determinar se um dado programa sempre vai parar (ou seja, terminar sua execução) para uma dada entrada arbitrária ou se vai executar infinitivamente. Alan Turing provou, em 1936, que é impossível resolver o problema da parada generalizando para qualquer par programa-entrada. Neste problema, porém, dada a descrição de uma linguagem simples, um programa escrito nessa linguagem e uma entrada para esse programa, você deve determinar se o programa dado pára com a entrada dada e, em caso positivo, qual a saída produzida.

                Esta linguagem só trabalha com números inteiros de 0 a 999 (inclusive). Sendo assim, o sucessor de 999 é 0, e o antecessor de 0 é 999. Além disso, ela possui dez variáveis (R0 a R9), sendo que a R0 sempre é atribuído o valor de chamada do programa (ou seja, o parâmetro de entrada) e a R9 é sempre atribuído o valor de saída (o retorno). No início da execução do programa, é atribuído o valor 0 a todas as variáveis, com exceção de R0 que recebe o parâmetro de entrada.

                As operações básicas são atribuição (MOV), soma (ADD), subtração (SUB), multiplicação (MUL), divisão inteira (DIV) e resto da divisão inteira (MOD). Todas essas operações têm a sintaxe COMANDO OPERANDO1,OPERANDO2 (sem espaços entre a vírgula e os operandos), onde COMANDO é uma dessas operações, OPERANDO1 é uma das 10 variáveis (R0 a R9) e OPERANDO2 pode ser uma das 10 variáveis ou um valor inteiro (entre 0 e 999). Todas as operações modificam o valor de OPERANDO1, sendo assim MOV R4,100 é o equivalente a atribuir o valor 100 a R4, enquanto que MUL R3,R8 é o equivalente a multiplicar R3 por R8 e atribuir o resultado a R3. A operação DIV, assim como a MOD, retornam 0 (zero) se OPERANDO2 for 0 ou se a variável equivalente tiver valor 0. Ou seja, DIV R4,0 é o equivalente a MOV R4,0. Por divisão inteira, entendemos a parte inteira do quociente da divisão (sem a parte fracionária). Por exemplo, a divisão inteira de 7 por 2 é 3 (sendo o resto 1).

                Existem seis comandos de fluxo de decisão: IFEQ (se igual), IFNEQ (se diferente), IFG (se maior), IFL (se menor), IFGE (se maior ou igual) e IFLE (se menor ou igual). A sintaxe de todos eles é COMANDO OPERANDO1,OPERANDO2 (sem espaços entre a vírgula e os operandos), onde OPERANDO1 e OPERANDO2 podem ser variáveis (R0 a R9) ou valores inteiros (entre 0 e 999). Assim, o comando IFEQ R4,123 é o equivalente a testar se R4 é igual a 123. Caso a condição testada seja verdadeira, o programa continua a executar normalmente a linha subsequente ao comando de decisão. Caso a condição seja falsa, o programa passa a executar a linha subsequente ao ENDIF mais próximo. Todos os comandos de decisão devem ter um comando ENDIF correspondente.

                Finalmente, existem os comandos CALL e RET, ambos com a sintaxe COMANDO OPERANDO, onde OPERANDO é uma variável (R0..R9) ou valor direto (entre 0 e 999). O comando CALL chama o próprio programa novamente, passando OPERANDO como parâmetro de entrada, ou seja, atribuindo o valor de OPERANDO à variavel R0. Já RET termina a execução do programa, retornando o valor de OPERANDO como o resultado de saída. A última linha do programa sempre será um comando RET. Observe que, caso o programa chame a si mesmo através do comando CALL, quando a execução voltar, o valor de R9 vai estar alterado com o valor retornado pelo programa. Note também que todas as variáveis (R0..R9) são locais, ou seja, uma chamada subsequente ao programa não pode alterar os valores guardados nas variáveis da instância anterior, com exceção, naturalmente, do valor de R9 que recebe o retorno da instância chamada.

                O exemplo a seguir ilustra um programa que calcula o fatorial de um número.

                

                1a linha: Verifica se o valor de R0 vale 0, caso positivo, executa a próxima linha, caso contrário, pula para a 4a linha (ENDIF mais próximo).

                2a linha: Retorna 1 como saída do programa.

                3a linha: Marca o fim do bloco de decisão iniciado na primeira linha.

                4a linha: Atribui o valor de R0 a R1 (R1 ← R0).

                5a linha: Diminui 1 de R1 (R1 ← R1 - 1).

                6a linha: Chama o programa passando R1 como parâmetro de entrada.

                7a linha: Guarda o valor de R9 (retornado pela chamada anterior) em R2 (R2 ← R9).

                8a linha: Multiplica o valor de R2 por R0 (R2 ← R2 * R0).

                9a linha: Retorna o valor de R2 como saída do programa.

                A tabela seguir traz um resumo dos comandos para referência:";A entrada contém vários casos de teste. Cada caso de teste se inicia com dois inteiros, L e N, representando respectivamente o número de linhas do programa (1 ≤ L ≤ 100) e o valor do parâmetro de entrada do programa (0 ≤ N ≤ 100). As L linhas seguintes contêm o programa. Pode-se assumir que ele está sempre sintaticamente correto de acordo com as regras definidas acima. Todos os comandos (bem como o nome das variáveis) só conterão letras maiúsculas. O final da entrada é marcado pelo caso em que L = N = 0 e não deve ser processado.;Para cada caso de teste, seu programa deve produzir uma linha contendo um inteiro que representa o valor de saída (retorno) para a entrada N dada, ou um asterisco (*) no caso de o programa nunca terminar.;True;10 / 10;468;107;22.86%
1406;Jukebox;Strings;10;"Os juízes ICPC estão preparando um festa para a cerimônia de abertura. Para a festa, eles pretendem adicionar um playlist com algumas músicas para o software jukebox (um simples MP3 player). Entretanto, existem muitas músicas no computador, isso dificulta encontrar aquelas que eles querem adicionar. Como consequência, eles precisam usar algumas buscas muitas vezes.

                Nesta jukebox, quando você pesquisa por uma string s, o software retorna todas músicas cujos títulos ou nomes de artistas contém s como uma substring. A string s é uma substring da string t se t contém todos os caracteres de s como uma sequência contígua (por exemplo, 'bc' é uma substring de 'abcd', mas 'ac' não é). Para salvar o tempo precioso deles, enquanto procuram por uma música, eles sempre usam uma string de ouro da música, isto é, uma das mais curtas strings que retornam de uma pesquisa como resultado somente a música que eles querem.

                

                Neste exemplo, uma possível string de ouro para a música 'johnnatan' é 'ta'. Note que 'ta' não é uma substring do nome de outra música nem é uma substring do nome do artista de outra música. Note também que não existem strings de tamanho igual a 1 que podem identificar unicamente a música 'johnnatan'.

                ​

                Eles descobriram que se eles removem o campo artista de algumas músicas eles podem obter strings de ouro menores. Para a música 'john', não existe nenhuma string de ouro. Entretanto, se removermos o campo artista de todas as outras músicas, a string 'c' se torna a string de ouro para a música 'john'.

                Dada uma lista de músicas (cada música com nome e artista), sua tarefa é determinar a soma mínima do tamanho das strings de ouro para todas as músicas que podem ser obtidas se em algumas removermos o campo artista. Na figura acima, você pode ver um possível melhor resultado com as strings de ouro em negrito. A soma mínima dos tamanhos das strings de ouro neste caso é 10.";"A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 30), que indica o número de músicas. A seguir, existirão N pares de linhas (2*N linhas), um par para cada música. A primeira linha de um par contém o nome da música, a segunda conterá o nome da artista. Ambos, nome de artista e música, são strings contendo somente letras minúsculas e sobrescritos e terão no mínimo 1 e no máximo 30 caracteres. Existirão no máximo 6 artistas diferentes na lista.

                O fim da entrada é dado por N = 0.";Para cada caso de teste seu programa deve produzir uma linha simples com a soma mínima dos tamanhos das strings de ouro. Você pode assumir que sempre existirá uma solução.;True;10 / 10;115;25;21.74%
1407;Loteria de Fim de Semana;Ad-Hoc;4;"Algumas pessoas são contra loterias por motivos morais, alguns governos as proíbem, mas com a criação da internet essa popular forma de aposta, que teve início na China e ajudou a financiar a Grande Muralha, está prosperando.

                Mas as chances de se ganhar em uma loteria nacional são pequenas, por conta disso seus colegas de classe decidiram organizar uma loteria particular, cujo sorteio se realiza toda sexta-feira. A loteria é baseada em um estilo popular: um estudante que quer apostar escolhe C números distintos entre 1 e K e paga US$ 1.00 (note que as loterias tradicionais como a US National Lotto usam C=6 e K=49). Na sexta-feira durante o almoço, C números (também de 1 a K) são sorteados. O estudante que acertar a maior quantidade de números sorteados recebe o montante coletado nas apostas. O montante é dividido no caso de empates e acumulado para a próxima semana se ninguém acertar qualquer um dos números sorteados.

                Alguns de seus colegas não acreditam nas leis da probabilidade e pediram para você para escrever um programa que determine os números que foram sorteados o menor número de vezes considerando todos os sorteios prévios, para que eles possam apostar nesses números.";A entrada contém diversos casos de teste. A primeira linha de um caso de teste contém três inteiros N, C e K que indicam, respectivamente, o número de sorteios que já aconteceram (1 ≤ N ≤ 10000), quantos números compõem uma aposta (1 ≤ C ≤ 10) e o valor máximo que pode ser escolhido numa aposta (C < K ≤ 100). Cada uma das próximas N linhas contém C inteiros distintos Xi indicando os números sorteados em cada concurso prévio (1 ≤ Xi ≤ K, para 1 ≤ i ≤ C). O fim da entrada é indicado por N = C = K = 0.;Para cada caso de teste, seu programa deve escrever uma linha de saída, contendo o conjunto de números que foram sorteados o menor número de vezes. Este conjunto deve ser impresso como uma lista em ordem crescente. Deixe um espaço em branco entre dois números consecutivos na lista.;False;4 / 10;954;464;48.64%
1408;Mário;Paradigmas;6;"Mário é dono de uma empresa de guarda-volumes, a Armários a Custos Moderados (ACM). Mário conquistou sua clientela graças à rapidez no processo de armazenar os volumes. Para isso, ele tem duas técnicas:

                
                    Todos os armários estão dispostos numa fila e são numerados com inteiros positivos a partir de 1. Isso permite a Mário economizar tempo na hora de procurar um armário;
                    Todos os armários têm rodinhas, o que lhe dá grande flexibilidade na hora de rearranjar seus armários (naturalmente, quando Mário troca dois armários de posição, ele também troca suas numerações, para que eles continuem numerados sequencialmente a partir de 1).
                

                Para alugar armários para um novo cliente, Mário gosta de utilizar armários contíguos, pois no início da locação um novo cliente em geral faz muitas requisições para acessar o conteúdo armazenado, e o fato de os armários estarem contíguos facilita o acesso para o cliente e para Mário.

                Desde que Mário tenha armários livres em quantidade suficiente, ele sempre pode conseguir isso. Por exemplo, se a requisição de um novo cliente necessita de quatro armários, mas apenas os armários de número 1, 3, 5, 6 e 8 estiverem disponíveis, Mário pode trocar os armários 5 e 2 e os armários 6 e 4 de posição: assim, ele pode alugar o intervalo de armários de 1 até 4.

                No entanto, para minimizar o tempo de atendimento a um novo cliente, Mário quer fazer o menor número de trocas possível para armazenar cada volume. No exemplo acima, ele poderia simplesmente trocar os armários 1 e 4 de posição, e alugar o intervalo de 3 até 6.

                Mário está muito ocupado com seus clientes e pediu que você fizesse um programa para determinar o número mínimo de trocas necessário para satisfazer o pedido de locação de um novo cliente.";"A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém dois números inteiros N e L (1 ≤ N ≤ L ≤ 100000), indicando quantos armários são necessários para acomodar o pedido de locação do novo cliente e quantos armários estão disponíveis, respectivamente. A linha seguinte contém L números inteiros positivos separados por espaços em branco, nenhum deles maior do que 1000000000, indicando as posições dos armários disponíveis. Os números dos armários livres são dados em ordem crescente.
                O final da entrada é indicado por um caso onde N = L = 0.";"Para cada caso de teste, imprima uma linha contendo um único número inteiro, indicando o número mínimo de trocas 
                    que Mário precisa efetuar para satisfazer o pedido do novo cliente (ou seja, ter N armários consecutivos lívres).";False;6 / 10;796;311;39.07%
1409;Zak Galou;Grafos;9;"Zak Galou é um famoso bruxo matador de monstros. Diz a lenda que existe uma caverna escondida nos confins da selva contendo um tesouro milenar. Até hoje nenhum aventureiro conseguiu recuperar o tesouro, pois ele é bem guardado por terríveis monstros. Mas Zak Galou não é um aventureiro qualquer e decidiu preparar-se para recuperar o tão sonhado tesouro.

                Zak Galou dispõe de uma certa quantidade de mana (uma espécie de energia mágica) e de uma lista de M magias. Cada monstro tem um determinado número de pontos de vida. Cada vez que Zak Galou lança uma magia contra um monstro, Zak gasta uma certa quantidade de mana (o custo da magia) e inflige um certo dano ao monstro. O dano infligido provoca a perda de pontos de vida do monstro (o número de pontos perdidos depende da magia). Um monstro está morto se tiver zero ou menos pontos de vida. Zak sempre luta contra um monstro a cada vez. Como é um bruxo poderoso, ele pode usar a mesma magia várias vezes, desde que possua a quantidade necessária de mana.

                Em suas pesquisas, Zak Galou conseguiu o mapa do tesouro. A caverna é representada como um conjunto de salões conectados por galerias. Os salões são identificados sequencialmente de 1 a N. Zak sempre inicia no salão 1 e o tesouro está sempre no salão N. Existem K monstros identificados sequencialmente de 1 a K. Cada monstro vive em um salão, do qual não sai (note que é possível que mais de um monstro viva no mesmo salão). Durante a busca pelo tesouro, Zak Galou pode sair ou recuperar o tesouro de um salão somente se o salão estiver vazio (sem monstro). Em outras palavras, Zak deve sempre, antes de sair ou de recuperar o tesouro de um salão, matar o(s) monstro(s) que lá viver(em).

                Dadas as descrições das magias, dos monstros e da caverna, sua tarefa é determinar a quantidade mínima inicial de mana necessária para que Zak Galou consiga recuperar o tesouro.";"A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém quatro inteiros M, N, G e K, indicando respectivamente o número de magias (1 ≤ M ≤ 1000), de salões (1 ≤ N ≤ 1000), de galerias (0 ≤ G ≤ 1000000) e de monstros (0 ≤ K ≤ 1000).

                Cada uma das M linhas seguintes descreve uma magia. A descrição de uma magia contém dois números inteiros, a quantidade de mana consumida (entre 1 e 1000) e o número de pontos de danos provocados (também entre 1 e 1000).

                Em seguida, há G linhas, cada uma descrevendo uma galeria. Uma galeria é descrita por dois números inteiros A e B (A ≠ B), representando os salões que a galeria conecta. Zak pode utilizar a galeria nos dois sentidos, ou seja, para ir de A para B ou de B para A.

                Finalmente, as últimas K linhas de um caso de teste descrevem os monstros. A descrição de um monstro contém dois números inteiros representando respectivamente o salão no qual ele vive (entre 1 e N inclusive) e o seu número inicial de pontos de vida (entre 1 e 1000 inclusive).

                O final da entrada é indicado por M = N = G = K = 0.";Para cada caso de teste da entrada seu programa deve produzir uma linha na saída contendo um número inteiro, a quantidade mínima inicial de mana necessária. Caso não seja possível recuperar o tesouro, você deve imprimir -1.;False;9 / 10;858;255;29.72%
1410;Ele Está Impedido!;Ad-Hoc;3;"A Rede do Hemisfério é a maior rede de televisão de Tumbolia, um pequeno país situado a leste da América do Sul (ou sul da América do Leste). O esporte mais popular em Tumbolia, obviamente, é o futebol; muitos jogos são transmitidos toda semana em Tumbolia.

                A Rede do Hemisfério recebe muitos pedidos para repassar lances polêmicos; normalmente esses acontecem quando um jogador é dito impedido pelo juíz. Um jogador atacante está impedido se ele está mais próximo da linha do gol do oponente do que o penúltimo adversário. Um jogador não está impedido se

                
                    ele está na mesma linha que o penúltimo adversário ou
                    ele está na mesma linha que os dois últimos adversários.
                

                Através do uso de tecnologia de computação gráfica, a Rede do Hemisfério consegue tirar uma foto do campo e determinar as distâncias dos jogadores até a linha do gol do time defensor, mas eles ainda precisam de um programa que, dadas essas distâncias, decida se um jogador está impedido.";O arquivo de entrada contém vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros A e D separados por um espaço indicando, respectivamente, o número de jogadores atacantes e defensores envolvidos na jogada (2 ≤ A, D ≤ 11). A próxima linha contém A inteiros Bi separados por um espaço, indicando as distâncias dos jogadores atacantes até a linha do gol (1 ≤ Bi ≤ 104). A próxima linha contém D inteiros Cj separados por um espaço, indicando as distâncias dos defensores até a linha do gol (1 ≤ Cj ≤ 104). O final da entrada é dado por A = D = 0.;"Para cada caso de teste na entrada imprima uma linha contendo um único caractere: ""Y"" (maiúsculo) se existe um jogador atacante impedido, e ""N"" (maiúsculo) caso contrário.";False;3 / 10;4694;2094;44.61%
1411;Encolhendo Polígonos;Geometria Computacional;9;"Um polígono é dito inscrito em um círculo quando todos seus vértices estão naquele círculo. Nesse problema você receberá um polígono inscrito em um círculo, e você deve determinar o número mínimo de vértices que devem ser removidos para transformar o polígono dado em um polígono regular, i.e., um polígono que é equiângular (todos ângulos são congruentes) e equilateral (todos lados têm o mesmo comprimento).

                Quando você remove um vértice v você primeiro remove o vértice e os segmentos de reta conectando-o aos seus vértices adjacentes w1 e w2, e então você cria um novo segmento de reta conectando w1 e w2. A figura (a) abaixo ilustra um polígono inscrito em um círculo, com dez vértices, e a figura (b) mostra um pentágono (polígono regular com cinco lados) formado ao remover cinco vértices do polígono em (a).

                ​

                Nesse problema consideraremos que qualquer polígono deve ter pelo menos três lados.";"A entrada contém diversos casos de teste. A primeira linha de um caso de teste contém um inteiro N indicando o número de vértices do polígono inscrito (3 ≤ N ≤ 104). A segunda linha contém N inteiros Xi separados por espaços (1 ≤ Xi ≤ 103 para 0 ≤ i ≤ N - 1). Cada Xi representa o comprimento do arco definido no círculo circunscrito, no sentido horário, pelos vértices i e (i+1) mod N. Lembre-se que um arco é um segmento da circunferência de um círculo; não o confunda com coda, que é um segmento de linha cujos ambos extremos estão no círculo.

                O final da entrada é indicado por uma linha contendo apenas um zero.";Para cada caso de teste, seu programa deve imprimir uma única linha, contendo o número mínimo de vértices que precisam ser removidos do polígono dado para formar um polígono regular. Se não for possível formar um polígono regular, a linha deve conter apenas o valor -1.;True;9 / 10;229;63;27.51%
1412;Cadeado com Segredo;Paradigmas;8;"Um cadeado possui um sistema de código para ser aberto ao invés de uma chave. O cadeado contém uma sequência de rodas. Cada roda possui as 26 letras do alfabeto inglês (a..z), em ordem. Se você move uma roda para cima, a letra que ela mostra muda para a próxima letra do alfabeto (se a letra mostrada for 'z', então ela muda para 'a'). Se você move uma roda para baixo, ela muda para a letra anterior do alfabeto (se a letra mostrada for 'a', ela muda para 'z').

                Também é possível mover qualquer subsequência contígua de rodas para a mesma direção com apenas um movimento. Isso tem o mesmo efeito que mover todas as rodas da subsequência para aquela direção, mas executando apenas um movimento.

                O cadeado abre quando a roda mostra uma determinada sequência de letras. Inicialmente, todas as rodas mostram a letra 'a'. Você quer saber qual o menor número de movimentos necessários para abrir o cadeado.";"A entrada contém vários casos de teste. Um caso de teste é descrito em exatamente uma linha contendo uma string não-vazia com no máximo 1000 letras minúsculas. A string representa a sequência secreta de letras que abre o cadeado.

                O último caso de teste é seguido de uma linha contendo um único asterisco.";Para cada caso de teste, imprima uma linha contendo um único inteiro, o menor número de movimentos que abre o cadeado.;False;8 / 10;261;87;33.33%
1413;Apresse-se!;Grafos;10;"Orientação, uma corrida a pé onde os competidores recebem um mapa e uma bússola, é um esporte muito popular em alguns países da Europa. Johnny e seus amigos entraram em uma competição de orientação, e pretendem vencer.

                Nesta competição, cada membro de uma equipe se veste com uma cor diferente, e inicia a prova em um lugar diferente. Existem alguns pontos de chegada, e cada ponto de chegada tem uma lista de cores que ele ""aceita"". Todo competidor de uma uma equipe deve ir de seu ponto inicial até um dos pontos de chegada que aceitam a sua cor. Nenhum membro de uma equipe pode ir para o mesmo ponto de chegada de outro membro. A penalidade de uma equipe no jogo é igual à soma do tempo que os membros da equipe levam para ir de seus pontos iniciais aos seus pontos finais.

                Para maximizar as chances de vitória, Johnny e seus companheiros de equipe querem determinar quais são os pontos de chegada mais apropriados para cada membro, assumindo que ele e seus amigos caminham a velocidades possivelmente diferentes. Assim, eles querem determinar um ponto de chegada diferente para cada membro da equipe, de forma que a penalidade da equipe seja minimizada.

                Você pode assumir que sempre haverá uma resposta válida (isto é, um ponto de chegada diferente para cada membro da equipe).";"A entrada consiste de vários casos de teste. A primeira linha de um caso de teste contém dois inteiros N e M, representando o número de membros na equipe e o número de pontos de chegada, respectivamente (1 ≤ N ≤ M ≤ 100). As próximas N linhas contém dois inteiros X e Y cada, representando a posição inicial de cada membro (-20000 ≤ X, Y ≤ 20000), e um número real s, representando a velocidade do competidor. Os membros da equipe são identificados pela ordem em que suas posições iniciais são dadas na entrada (o primeiro competidor a aparecer é o número 1, o segundo é o número 2, e assim por diante). Esses mesmos números são utilizados para identificar a cor de cada membro. As próximas M linhas contém dois inteiros X e Y cada que descrevem a posição de um ponto de chegada (-20000 ≤ X, Y ≤ 20000), e a lista de cores Ci que são aceitas pelo ponto (1 ≤ Ci ≤ N); o fim desta lista é indicado por um 0 (zero). O fim da entrada é indicado por N = M = 0.";Para cada caso de teste, seu programa deve imprimir apenas uma linha, contendo um número real que representa a penalidade mínima, isto é, a menor soma possível dos tempos levados pelos membros da equipe para chegar a seus respectivos pontos de chegada. Suas respostas devem ser arredondadas a um dígito depois do ponto decimal.;False;10 / 10;329;68;20.67%
1414;Copa do Mundo;Ad-Hoc;4;"Uma Copa do Mundo de futebol de botões está sendo realizada com times de todo o mundo. A classificação é baseada no número de pontos ganhos pelos times, e a distribuição de pontos é feita da forma usual. Ou seja, quando um time ganha um jogo, ele recebe 3 pontos; se o jogo termina empatado, ambos os times recebem 1 ponto; e o perdedor não recebe nenhum ponto.
                
                Dada a classificação atual dos times e o número de times participantes na Copa do Mundo, sua tarefa é de determinar quantos jogos terminaram empatados até o momento.";A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros T e N, indicando respectivamente o número de times participantes (2 ≤ T ≤ 200) e o número de partidas jogadas (0 ≤ N ≤ 10000). Cada uma das T linhas seguintes contém o nome de um time (uma cadeia de máximo 10 letras e dígitos), seguido de um espaço em branco, seguido do número de pontos que o time obteve até o momento. O final da entrada é indicado por T = 0.;Para cada um dos casos de teste seu programa deve imprimir uma única linha contendo um número inteiro, representando a quantidade de jogos que terminaram empatados até o momento.;False;4 / 10;3068;1279;41.69%
1415;Galou Está de Volta!;Grafos;8;"O famoso bruxo está de volta. Depois de matar um incrível número de monstros para achar um tesouro escondido, Zak Galou decidiu comprar vinhedos na Borgonha e se aposentou. Tudo estava calmo em sua nova vida, até que um dia seu trator parou de funcionar.

                O motor de seu trator funciona baseado em um mecanismo de rodas dentadas. O motor pode ser representado por uma grade bidimensional. No máximo uma roda dentada pode ser presa a cada posição da grade. Todas as engrenagens são idênticas e podem engrenar com as rodas adjacentes. Nessa grade, uma roda dentada pode ter até seis engrenagens adjacentes, veja a figura abaixo:

                

                Em condições normais, quando o trator é ligado, algumas das engrenagens são inicialmente ativadas e tentam giram em sentido horário. Quando uma engrenagem tenta girar em um sentido, todas as outras adjacentes tentam girar no sentido oposto.

                Quando Zak Galou abriu o motor ele percebeu que ele havia sido sabotado (provavelmente por um caçador de tesouros que não conseguiu achar o tesouro). Algumas das engrenagens foram removidas do motor e outras adicionadas. Como consequência, algumas engrenagens estavam imóveis. Uma engrenagem pode estar imóvel tanto quando ela está livre ou está bloqueada. Uma engrenagem está livre quando ela não é ativada inicialmente e não tem nenhuma engrenagem adjacente tentando girar. Uma engrenagem está bloqueada quando ela está tentando girar em ambos sentidos ao mesmo tempo. Por exemplo, considere que existam três engrenagens no motor como mostrado na figura abaixo. Se qualquer uma delas é ativada inicialmente, todas estarão bloqueadas. Se nenhuma delas é ativada inicialmente, todas estarão livres.

                ​

                Como parte do trabalho para consertar seu trator, Zak Galou pede sua ajuda para resolver o seguinte problema. Dada a descrição do motor e das engrenagens que estão ativadas inicialmente em sentido horário, ele quer saber para cada uma delas qual o seu estado quando o trator é ligado: girando no sentido horário, girando no sentido horário, livre ou bloqueado.";"A entrada contém diversos casos de teste. A primeira linha de um caso de teste contém dois inteiros R e C, separados por um espaço, representando respectivamente o número de fileiras e colunas da grade do motor (1 ≤ R, C ≤ 100). As próximas R linhas descrevem o motor. A i-ésima linha representa a i-ésima fileira do motor e contém C caracteres. O caractere ""."" indica que não existem engrenagens naquela posição, o caractere ""*"" indica que existe uma engrenagem que não é ativada inicialmente e um ""I"" indica que existe uma engrenagem que é inicialmente ativada quando o motor é ligado. Perceba que, por razões de simplicidade, o paralelogramo representando a grade do motor é descrito na entrada como se fosse um retângulo com cada fileira alinhada à esquerda. O final da entrada é indicado por R = C = 0.";"Para cada caso de teste, seu programa deve imprimir R + 1 linhas. A primeira linha deve estar vazia; cada uma das R linhas seguintes deve ter C caracteres. Os caracteres impressos devem representar o estado de cada posição da grade quando o motor é ligado. Imprima um ""."" se não existem engrenagens na posição; um ""("" se existe uma engrenagem girando em sentido horário; um "")"" se existe uma engrenagem girando em sentido anti-horário; um ""F"" maiúsculo se existe uma engrenagem que está livre e um ""B"" maiúsculo se existe uma engrenagem bloqueada.";True;8 / 10;171;74;43.27%
1416;Placar do ICPC;Paradigmas;9;"Charles é o diretor de torneio do torneio regional do ICPC de Tumbolia. Sua responsabilidade é garantir que o torneio corra perfeitamente, que as regras sejam seguidas, e, claro, anunciar o placar final da competição.

                De acordo com as regras do ICPC, um time com mais problemas resolvidos fica acima de um time com menos problemas resolvidos. Se dois times têm o mesmo número de problemas resolvidos, o time com a menor penalidade fica acima (no caso de os dois times terem o mesmo número de problemas resolvidos e a mesma penalidade, Charles considera eles empatados).

                A penalidade total de um time é a soma da penalidade de todos problemas que o time resolveu. A penalidade de um problema é TP + EP x FA, onde TP é a penalidade de tempo para aquele problema, EP é a penalidade de erro do competidor e FA é o número de tentativas frustradas de resolver o problema antes de submeter uma solução certa.

                A penalidade de tempo para um problema é o tempo desde o início da competição, em minutos, que time demorou para resolver o problema. A penalidade de erro é um inteiro positivo escolhido pelo diretor do torneio, designada para premiar times que submetam soluções corretas na primeira tentativa.

                Charles quer mudar a penalidade de erro do valor ""padrão"" de 20 minutos para esquentar as coisas. Para estudar os efeitos dessa mudança no placar final, ele quer saber o limite de penalidades de erro que não mudam as posições finais.

                Em outras palavras, se o time A está na frente do time B no placar original, então A deve estar na frente de B no placar modificado; se A e B estão empatados no placar original, eles devem estar empatados no placar modificado (o placar original é aquele obtido com uma penalidade de erro de 20 minutos).

                Charles está muito ocupado organizando a regional Tumboliana, então ele pediu para você fazer um programa que vai calcular o limite para ele.";"A entrada contém diversos casos de teste. A primeira linha de cada caso de teste contém dois inteiros T e P separados por um espaço, indicando o número de times e o número de problemas, respectivamente (2 ≤ T ≤ 100, 1 ≤ P ≤ 10). Cada uma das próximas T linhas descreve a performance de um time. A descrição da performance de um time é uma linha contendo P descrições de problemas separados por um espaço em branco. Os times não são necessariamente dados na ordem da colocação final.

                A descrição de cada problema é uma string ""A/S"", onde A é um inteiro representando o número de tentativas que o time correspondente fez para resolver o problema (0 ≤ A ≤ 100), e S pode ser tanto ""-"", se o time não resolveu o problema, ou um inteiro indicando quantos minutos o time demorou para submeter um solução correta (1 ≤ S ≤ 300). Tentativas feitas depois da primeira correta não são contadas.

                O final da entrada é dado por T = P = 0.";"Para cada caso de teste da entrada imprima dois inteiros positivos separados por um espaço, indicando a menor e a maior penalidade por erro que não alteraria a colocação final. Se não existir um limite superior para a penalidade por erro, imprima um ""*"" ao invés do limite superior.";False;9 / 10;166;62;37.35%
1417;Liga da Justiça;Grafos;6;"Trinta e cinco anos atrás, um grupo de super 
                    heróis foi escolhido para formar a Liga da Justiça, com o propósito de 
                    proteger o planeta Terra dos vilões. Depois de todos esses anos ajudando
                    a humanidade, seus membros estão se aposentando e está na hora de 
                    escolher novos membros para a Liga da Justiça.

                Para manter sua identidade secreta em segredo, super heróis 
                    normalmente usam um número inteiro para se identificar. Existem H super 
                    heróis na Terra, identificados por números inteiros de 1 até H. Com uma 
                    olhada rápida num jornal qualquer um pode descobrir se dois super heróis
                    já trabalharam juntos numa missão. Se isso aconteceu, dizemos que os 
                    dois super heróis têm um relacionamento.

                Só se pode ter uma Liga da Justiça no mundo, que pode ser formada por
                    qualquer número de super heróis (até mesmo apenas um). Além disso, para
                    quaisquer dois heróis na nova Liga, eles têm que ter um relacionamento.

                Considere também o grupo de heróis não escolhidos para entrar na Liga
                    da Justiça. Para quaisquer dois heróis desse grupo, eles não podem ter 
                    um relacionamento. Isso previne a formação de outras Ligas da Justiça 
                    não oficiais.

                Você trabalha para uma agência responsável por criar a nova Liga da 
                    Justiça. A agência não sabe se é ou não possível criar a Liga com todas 
                    as restrições dadas, e pediu ajuda às suas habilidades em programação. 
                    Dado um grupo de super heróis e seus relacionamentos, determine se é 
                    possível selecionar um subgrupo para formar a Liga da Justiça conforme 
                    as restrições dadas acima.";"A entrada é composta por vários casos de teste. A
                    primeira linha de cada caso de teste contém dois inteiros separados por
                    um espaço, H (2 ≤ H ≤ 50000) e R (1 ≤ R ≤ 100000), indicando, respectivamente, o número de super heróis e o número de relacionamentos. Cada uma das R linhas seguintes contém dois inteiros separados por um espaço, A e B (1 ≤ A < B ≤ H), indicando que o super herói A tem um relacionamento com o super herói B. Note que se A tem um relacionamento com B, então B tem um relacionamento com A. Um relacionamento nunca é informado duas vezes num caso de teste.
                O final da entrada é indicado por H = R = 0.";"Para cada caso de teste da entrada imprima uma única linha, contendo a letra maiúscula ""Y"",
                    caso seja possível selecionar um subgrupo de heróis para formar a Liga 
                    da Justiça de acordo com as restrições, ou a letra maiúscula ""N"", caso contrário.";False;6 / 10;118;52;44.07%
1418;Outra Crise;Ad-Hoc;3;"Há dois anos atrás, uma nova crise mundial teve início, deixando muitas pessoas com problemas econômicos. Alguns trabalhadores de uma empresa estão tentando pedir um aumento de salário.

                A empresa possui uma hierarquia restrita, onde cada empregado tem exatamente um chefe, com a exceção do dono da companhia que não tem chefe. Empregados que não são chefes de nenhum outro empregado são chamados trabalhadores. O resto dos empregados e o dono são chamados de chefes.

                Para pedir aumento, um trabalhador deve enviar uma petição ao seu chefe direto. Evidentemente, cada chefe é encorajado a tentar manter seus subordinados felizes com seu salário atual, tornando o lucro da empresa o maior possível. No entanto, quando ao menos T porcento de seus subordinados diretos fazem uma petição, o chefe será pressionado e não terá escolha a não ser enviar uma petição ele mesmo ao seu superior direto. Cada chefe envia no máximo uma petição para seu próprio chefe, independente do seu número de subordinatos que o enviaram. Um chefe somente considera seus subordinados diretos (os que fizeram a petição e os que não a fizeram) para calcular o a porcentagem da pressão.

                Note que um chefe pode ter trabalhadores e chefes como seus subordinados diretos ao mesmo tempo, e ele pode receber petições de ambos os tipos de empregados. Cada subordinado direto, independente de seu cargo, terá peso 1 ao realizar o balanço total. Quando uma petição chega ao dono da empresa, todos os salários são aumentados. O sindicato dos trabalhadores está desesperado tentando fazer isso acontecer, então eles precisam convencer alguns trabalhadores a enviar uma petição aos seus chefes.

                Dados a hierarquia da empresa e o parâmetro T, você deve encontrar o menor número de trabalhadores que deve enviar uma petição de forma a fazer com que o dono da empresa aumente os salários.";"A entrada contém vários casos de teste. Cada caso de teste é dado em exatamente duas linhas. A primeira linha contém dois inteiros N e T (1 ≤ N ≤ 105 e 1 ≤ T ≤ 100), separados por um espaço em branco. N indica o número de empregados da empresa (sem considerar o dono) e T é o parâmetro descrito acima. Cada um dos empregados é identificado por um inteiro entre 1 e N, inclusive. O dono é identificado pelo número 0. A segunda linha contém uma lista de inteiros separados por um espaço em branco. O inteiro Bi, na posição i dessa lista (começando de 1), indica o identificador do chefe direto do empregado i (0 ≤ Bi ≤ i - 1).

                O último caso de teste é seguido de uma linha contendo dois zeros separados por um espaço em branco.";Para cada caso de teste, imprima uma única linha contendo um único inteiro, a menor quantidade de trabalhadores que deve enviar uma petição de modo a fazer com que o dono da empresa receba uma petição.;False;3 / 10;137;102;74.45%
1419;Bakugan;Ad-Hoc;4;"Mark e Leti adoram brincar com suas bolas 
                    Bakugan. Essas bolas são pequenas esferas de plástico com um pequeno 
                    brinquedo-monstro dentro. Quando jogada ao chão, a bola Bakugan se abre,
                    fazendo um som incrível e liberando um monstro Bakugan assustador. Mark
                    e Leti adoram brincar com seus monstros, mas abrir as bolas Bakugan 
                    também é bem divertido.
                

                
                    Cada um deles recebeu uma bolsa com bolas Bakugan e eles inventaram 
                    um jogo para abrir as bolas. Existem 10 monstros diferentes, e para o 
                    jogo Mark e Leti associaram cada monstro a um inteiro diferente de 1 a 
                    10, de acordo com o nível de feiura do monstro. O jogo é composto de R 
                    rodadas. A cada rodada:
                

                
                    Os dois jogadores jogam suas bolas ao chão simultaneamente;
                    Cada jogador acumula um número de pontos coincidente com o número associado ao monstro liberado por sua bola;
                    O primeiro (e apenas o primeiro) jogador que liberar o mesmo 
                        monstro em três rodadas consecutivas ganha 30 pontos adicionais; se essa
                        condição acontecer na mesma rodada para ambos os jogadores então 
                        ninguém ganha pontos extras.
                

                O vencedor do jogo é o jogador que acumular mais pontos. Por favor ajude Mark e Leti anunciar o vencedor do jogo!";"Cada caso de testo é descrito por três linhas. A primeira linha contém um inteiro R indicando o número de rodadas do jogo (1 ≤ R ≤ 10). A segunda linha contém R inteiros Mi indicando os monstros liberados por Mark a cada rodada (1 ≤ Mi ≤ 10, para 1 ≤ i ≤ R). A terceira linha contém R inteiros Li indicando os monstros liberados por Leti a cada rodada (1 ≤ Li ≤ 10, para 1 ≤ i ≤ R).

                O último caso de teste é composto por uma linha contendo zero.";"Para cada caso de teste imprima uma linha com um caractere representando o resultado do jogo: ""M"" caso o vencedor seja Mark, ""L"" caso o vencedor seja Leti, ou ""T"" caso haja um empate (tie).";False;4 / 10;2285;1012;44.29%
1420;Contando os Segundos;Ad-Hoc;8;Através da pesquisa e do desenvolvimento espetacular de técnicas revolucionárias de computação, estatística e intuição, um grupo de mulheres da Universidade de Torrinha desenvolveram um software capaz de prever o futuro. Na verdade, o programa não consegue descrever exatamente o que vai acontecer, mas através da análise da resposta a uma série de perguntas sobre a pessoa, ele consegue identificar quando acontecerão os próximos cinco eventos mais importantes na vida dela. O programa apresenta dois pequenos problemas. O primeiro é que a pessoa sobre a qual se quer adivinhar o futuro precisa passar centenas de horas ininterruptas na frente do computador, respondendo às perguntas feitas pelo software, para que ele consiga fazer a previsão. O segundo é que as previsões são feitas em número de segundos, a contar do término do processamento da precisão. As moças de Torrinha estão empenhadas na solução do primeiro problema, e pediram aos concorrentes da Maratona de Programação uma ajuda para resolver o segundo.;"A entrada consiste de várias previsões referentes a diferentes pessoas. A primeira linha de cada previsão contém o momento exato em que os 5 números (que correspondem aos 5 momentos importantes) foram impressos pelo programa. Este momento segue o formato:

                <dia da semana>,<dia><mês><ano>:<hora>:<minuto>:<segundo>

                onde <dia da semana> é a abreviação do dia da semana correspondente, composto pela sequencia de 3 caracteres maiúsculos correspondentes aos dias da semana de domingo a sábado, respectivamente, tais sejam: DOM, SEG, TER, QUA, QUI, SEX ou SAB. <dia> é o dia do mês, escrito com 2 dígitos, zero à esquerda se for o caso. <mês> é a abreviação do mês correspondente, composto pela sequencia de 3 caracteres maiúsculos correspondentes aos meses de Janeiro a Dezembro, respectivamente, tais sejam: JAN, FEV, MAR, ABR, MAI, JUN, JUL, AGO, SET, OUT, NOV ou DEZ. <ano> é o ano, escrito com 4 dígitos. <hora>, <minuto> e <segundo> escrito com 2 dígitos, zero à esquerda se for o caso.

                Nas linhas seguintes vem os 5 momentos previstos, um por linha, 5 linhas por previsão. Cada momento consiste no número d de segundos (0 < d < 2.000.000.000) a contar do momento do processamento. Após o último caso de teste, uma linha iniciada por 'FIM' indica o final do arquivo de entrada.

                Você pode assumir que o programa desenvolvido em 01 de Março de 2002, de modo que nenhuma data de previsão será anterior a esta. Outro fato importante é que as moças de Torrinha só vão usar o programa até as 23:59:59 de 31/12/2099 quando uma delas acha que vai morrer, pois, isso foi previsto por outro programa elaborado pelo departamento de intuição feminina da Unitor (Universidade de Torrinha).";Seu programa deverá identificar na saída cada previsão por um número sequencial na primeira linha, e nas cinco seguintes deverá escrever os cinco horários completos referentes à previsão efetuada, no mesmo formato utilizado na entrada para o horário de processamento da previsão. Você deve também pular uma linha ao final de cada previsão.;False;8 / 10;226;91;40.27%
1421;Tic-Tac-Toe?;Ad-Hoc;9;"Mickayil Romanoff ganhou de presente de aniversário um jogo muito interessante: um jogo da velha tridimensional. O jogo é feito de n x n pinos, dispostos em forma de uma matriz quadrada. Cada pino tem espaço para receber n bolinhas das cores branca e azul. Como no jogo da velha tradicional o objetivo é conseguir uma sequencia completa (em qualquer direção) de n bolinhas da mesma cor. Note que ao colocar uma bolinha num dos pinos ela necessariamente cai ate chegar ao primeiro nível vazio por causa da gravidade.

                Depois de vários jogos, Mickayil percebeu que não conseguia saber se alguém tinha ganho. Sua tarefa neste problema é ajudar ao Mickayil, escrevendo um programa que recebe uma partida e determina quem ganhou.";São dadas várias instâncias. A primeira linha de cada instância contém a dimensão 0 ≤ n ≤ 30 da matriz. A seguir, em cada uma das próximas n3 linhas são dadas alternadamente as posições em que os jogadores estão jogando as bolinhas começando pelo jogador branco. Cada posição é dada pelo pino em que a bolinha da cor correspondente foi colocada, ou seja, um par (i, j), onde i, j ∈ {1, ..., n}. A entrada termina com um zero.;Você deverá imprimir um cabeçalho indicando o número da instância que está tratando (Instancia h) e na linha seguinte a mensagem de que o jogador foi o vencedor da partida (Branco ganhou ou Azul ganhou), ou se o jogo empatou (Empate). Lembre-se de que vence a partida o jogador que primeiro conseguiu uma sequencia completa. Uma linha em branco deve ser impressa após cada instância, inclusive após a última.;False;9 / 10;286;93;32.52%
1422;Bactérias;Matemática;9;"Pietro Demazio é um terrorista italiano condenado que fugiu para o Brasil, onde conseguiu um disfarce trabalhando como programador de jogos.  Em seu novo plano de destruição do planeta, Pietro desenvolveu um novo tipo de bactéria mortal, capaz de dizimar toda a população terrestre.

                Durante 4 dias, Demazio criou colônias desses micro-organismos, mas ao fim do quarto dia, descobriu que o código genético das mesmas possuía um grave erro, que fazia com que as bactérias morressem depois de 4 dias de vida. Como a primeira colônia fora criada 3 dias atrás, ele rapidamente modificou o código genético delas (através de radiação), de modo que elas se reproduzissem todas os dias. Tal reprodução é assexuada, e é feita por bipartição (ou seja, uma bactéria gera exatamente outra bactéria por dia).

                Assim, se Pietro criou 3 bactérias no dia 1, 4 no dia 2, 2 no dia 3 e 5 no dia 4, terá no total 14 bactérias ao final do quarto dia, quanto ele faz a mutação. Logo após tal mutação, elas se reproduzem, e aí teremos 28 bactérias. Como a primeira colônia (com 3 bactérias) morre ao final desse quarto dia, o número de bactérias no início do quinto dia é 25. Ao final do quinto dia, essas 25 se reproduzem, resultando em 50 bactérias. Mas como a segunda colônia (com 4 bactérias) morre ao final desse dia, no início do sexto dia tem-se 46 bactérias.

                Demazio observa com atenção tal crescimento da população de bactérias, e já está planejando quando vai liberá-las para fazer o serviço. Para tal, ele precisa saber quantas bactérias existirão depois de um determinado número de dias. Ele pede a você que faça um programa que determine a quantidade de bactérias existentes depois de N dias, dadas as populações das 4 primeiras colônias.";"A entrada contém várias instâncias. Cada instância possui duas linhas. A primeira linha possui um inteiro N (5 ≤ N ≤ 1.000.000.000), representando o dia para o qual Pietro deseja saber a população de bactérias que ele terá. A segunda linha contém quatro inteiros a1, a2, a3, a4 (1 ≤ a1, a2, a3, a4 ≤ 1.000), onde ak representa a quantidade de bactérias criadas no dia k.

                A entrada termina quando N = 0.";Para cada instância na entrada, imprima uma linha contendo a quantidade de bactérias que Pietro terá no início do dia N. A resposta dada deve ser módulo 13371337.;False;9 / 10;470;103;21.91%
1423;A aventura de Super Mario;Grafos;7;"Depois de resgatar a bela princesa, Super Mario precisa achar o caminho de casa - com a princesa é claro :-). Ele é familiarizado com ""Mundo de Super Mario"", então ele não precisa de uma mapa, precisa apenas da melhor rota a fim de ganhar tempo.
  
                

                Existem A Vilas e B Castelos neste mundo. Vilas são numeradas 1..A, e Castelos são numerados A+1..A+B. Mario vive na Vila 1, e o Castelo que ele começa é numerado A+B. Também, existem uma via de mão dupla conectando-os. Dois lugares são conectados no máximo por uma rua e um lugar jamais tem uma rua conectando-o a si mesmo. Mario já mediu o comprimento de cada rua, mas não quer caminhar todo o percurso, já que ele se move uma unidade tempo para cada unidade de distância (que lento!).

				
                Por sorte, Mário encontrou botas mágicas no Castelo onde havia salvado a princesa.  Se ele as utilizar, poderá fazer uma super-corrida de um lugar a outro EM TEMPO ZERO. (Não se preocupe com a princesa, Mario encontrou um jeito de levá-la em sua super-corrida, mas ele não contará a você:-P).

                Uma vez que existem armadilhas nos Castelos, Mario NUNCA faz uma super-corrida através de um Castelo. Ele sempre para quando há um Castelo no caminho. Ele também começa/para suas super-corrridas SOMENTE em Vilas e Castelos.

				Infelizmente, as botas mágicas são velhas, então Mário não pode usar mais que L quilômetros de uma vez, e não pode usar mais que K vezes no total. Quando chegar em casa, ele pode repará-las e usá-las novamente.";A primeira linha da entrada contém um único inteiro T, indicando o número de casos de teste (1 ≤ T ≤ 20). Casa caso de teste começa com cinco inteiros A, B, M, L e K - o número de Vilas, o número de Castelos (1 ≤ A, B ≤ 50), o número de ruas, a distância máxima que pode ser coberta de uma vez (1 ≤ L 500), e o número de vezes as botas podem ser usadas (0 ≤ K ≤ 10). As próximas M linhas, cada uma contém três inteiros Xi, Yi, Li. Isso significa que há uma rua conectando os lugares Xi e Yi. A distância é Li, então o tempo de caminhada é também Li (1 ≤ Li ≤ 100).;Para cada caso de teste na entrada imprima uma linha contendo um único inteiro indicando o tempo mínimo necessário para ir para casa com a bela princesa. É garantido que Super Mario pode sempre ir para casa.;True;7 / 10;256;102;39.84%
1424;Problema Fácil de Rujia Liu?;Estruturas e Bibliotecas;7;"Embora Rujia Liu geralmente escreve problemas difíceis para algumas competições (como, por exemplo, competições regionais de Xi'an em 2006, de Pequim em 2007 e de Wuhan em 2009, ou competições no UVA OJ como a ""Rujia Liu's Presents"" 1 e 2), ele escreve problemas fáceis algumas vezes (como, por exemplo, o problema ""the Coco-Cola Store"" no UVA-OJ), para encorajar mais pessoas a resolver mais problemas :D

                Dado um vetor de inteiros, sua tarefa é encontrar a k-ésima ocorrência (da esquerda para a direita) de um inteiro v no vetor. Para tornar o problema mais difícil (e mais interessante!), você deve responder a m consultas deste tipo.";"Há vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros n e m (1 ≤ n, m ≤ 100.000), o número de elementos no vetor e o número de consultas a serem respondidas, respectivamente. A próxima linha contém n inteiros positivos não maiores que 1.000.000, que descrevem o vetor. As próximas m linhas contém dois inteiros k e v cada (1 ≤ k ≤ n, 1 ≤ v ≤ 1.000.000), descrevendo as consultas.

                O arquivo de entrada termina com fim-de-arquivo (EOF). O tamanho do arquivo de entrada não excede 5 Mb.";Para cada consulta, imprima o índice do vetor (1-indexado) da ocorrência solicitada. Se tal ocorrência não existe, imprima 0 ao invés.;False;7 / 10;4149;1427;34.39%
1425;Presente?!;Estruturas e Bibliotecas;6;"Existe um belo riacho em uma bela vila. N Pedras estão alinhadas em linha reta do número 1 até N, da margem esquerda à margem direita, como mostrado abaixo.

                [Flanco esquerdo] - [Pedra 1] - [Pedra 2] - [Pedra 2] - [Pedra 3] - [Pedra 4] - [Pedra N] - [Flanco Direito]

                A distância entre duas Pedras adjacentes é exatamente 1 metro, enquanto a distância entre a margem esquerda e a Pedra 1 e a distância entre a Pedra N e a margem direita também são 1 metro.

                
                    O sapo Frank está prestes a atravessar o riacho, seu vizinho, o sapo Funny veio a ele e disse:
                    'Olá Frank, feliz dia das Crianças! Eu tenho um presente para você. Vê? Um pequeno pacote na Pedra 5.'
                    'Oh, que legal! Obrigado! Eu vou pegar.'
                    'Espere! Este presente é apenas para sapos inteligentes. Você não pode pegar pulando direto.'
                    'Oh? Então o que devo fazer?'
                    'Pular mais vezes. Seu primeiro pulo deve ser da margem esquerda para a Pedra 1, então, pule quantas vezes quiser - não importa se for pra frente ou para traz - mas seu pulo i deve cobrir 2 × i - 1 metros. E mais, uma vez que alcance a margem direita ou esquerda, o jogo termina, sem mais pulos!'
                    'Hummmm, nada fácil... deixa eu pensar!' Respondeu sapo Frank, 'Devo tentar?'";A entrada contém mais de 2000 casos de teste. Cada caso de teste contém um única linha. Ela contém dois positivos inteiros N(2 ≤ N ≤ 106), e M(1 ≤ M ≤ N), M indica o número da pedra em que o presente está. O caso de teste no qual N = 0, M = 0 terminará a entrada e não deve ser contado como caso de teste.;Para cada cado de teste, imprima uma única linha contendo 'Let me try!'(Me deixe tentar) se for possível chegar a Pedra M, caso contrário, imprima um linha contendo 'Don't make fun of me!'(Não ria de mim!).;False;6 / 10;2491;493;19.79%
1426;Coloque Tijolos na Parede;Ad-Hoc;2;"Não, não é ""mais um tijolo na parede"", é apenas um problema sobre somar números.

                Suponha que você tem uma parede com o formato de um triângulo, como a mostrada abaixo. A parede tem 9 linhas, e a i-ésima linha tem exatamente i tijolos, considerando que a linha mais acima é a 1ª e que a mais abaixo é a 9ª. Alguns tijolos são rotulados com um número, enquanto os demais estão em branco. Os tijolos rotulados aparecem apenas em linhas ímpares, e ocupam posições ímpares dentro das suas linhas.

                ​

                O problema que você deve resolver consiste em rotular os tijolos em branco com números, de tal forma que a seguinte regra seja satisfeita: O número de um tijolo é igual à soma dos números dos dois tijolos abaixo dele. Obviamente, esta regra não é aplicada à 9ª linha. Todos os números devem ser inteiros.

                Nota: O exemplo de entrada contém dois casos de teste. O primeiro dele corresponde à parede mostrada acima.";"A primeira linha da entrada contém um inteiro N, indicando o número de casos de teste. Esta linha é seguida pelos casos de teste. Cada caso é descrito por 5 linhas. Essas linhas correspondem às linhas ímpares da parede, de cima para baixo, como descrito acima. Cada linha contém os números nos tijolos já rotulados da linha correspondente na parede, da esquerda para a direita, separados por um espaço em branco.

                Você pode assumir que todo caso de teste é correto, isto é, existe uma solução para o problema descrito.";Para cada caso de teste, a saída deve ser formada por 9 linhas descrevendo os números de todos os tijolos da parede. Assim, a i-ésima linha deve conter os números correspondentes aos i tijolos da i-ésima linha da parede, da esquerda para a direita, separados por um espaço.;True;2 / 10;2511;1491;59.38%
1427;O Problema da Scrooge Co.;Grafos;9;"A empresa de entregas Scrooge Co. quer estabelecer um sistema para pagar a menor quantia necessária de dinheiro a seus empregados durante suas entregas. A empresa sabe qual é a quantia mínima de dinheiro necessária para ir diretamente de uma localização até outra.

                A empresa pediu para você escrever um programa que compute a menor quantia de dinheiro que um empregado deve receber para poder ir de uma localização até outra, e a rota que ele deve usar.";"A entrada começa com uma linha contendo um inteiro C (1 ≤ C ≤ 99), indicando o número de casos de testes. Cada caso de teste é descrito a seguir.

                A primeira linha de um caso de teste contém um inteiro P (1 ≤ P ≤ 99), indicando o número de localizações existentes. A segunda linha contém os nomes das localizações, separados por um TAB. Cada nome tem no máximo 20 caracteres.  As próximas P linhas contém os custos para ir de uma localização diretamente para outra, também separados por TAB. A primeira destas linhas contém os custos para ir diretamente da primeira localização para todas as outras; a segunda linha contém os custos para ir da segunda localização para todas as outras; e assim por diante. Um custo é dado por um inteiro W (-1 ≤ W ≤ 300), onde W = -1 indica que a viagem direta entre as localizações é muito cara e não pode ser realizada, e W = 0 indica o custo para ir diretamente de uma localização a ela mesma.  Depois das P linhas, há uma linha contendo um inteiro R (1 ≤ R ≤ 99), indicando o número de rotas a serem consideradas. As próximas R linhas contém cada uma o nome de um funcionário e o nome das localizações de origem e destino de sua entrega. Os nomes das localizações diferenciam maiúsculas e minúsculas (case sensitive), e o nome do funcionário tem no máximo 30 caracteres.";"Para cada rota de cada caso de teste, você deve produzir uma ou duas linhas de saída. Se existe uma rota entre as localizações solicitadas, você deve produzir duas linhas: uma contendo o custo mínimo da viagem e outra contendo a rota utilizada. As linhas devem ser impressas no seguinte formato (sem aspas):

                ""Mr <empregado> to go from <localização de origem> to <localização de destino>, you will receive <custo mínimo> euros""
                    ""Path:<localização de origem> <localizações separadas por espaços> <localização de destino>""

                Se não há uma rota possível entre as localizações de origem e destino, você deve produzir uma linha, no seguinte formato (sem aspas):

                ""Sorry Mr <empregado> you can not go from <localização de origem> to <localização de destino>""

                Se houver dois caminhos minimos possiveis entre A e B e os dois tem vertices intermediarios, a preferencia é do caminho que aparece antes na entrada, por exemplo:
                
                    Se as cidades da entrada forem: A B C D E F, o caminho ""A C D B"" tem mais prioridade que o caminho ""A E B"" (pois E aparece depois que D) e o caminho ""A D E B"" tem mais prioridade sobre ""A C F B"" (pois F aparece depois que E). A analise é feita olhando-se a ordem de entrada dos vértices intermediários.";False;9 / 10;539;114;21.15%
1428;Procurando Nessy;Ad-Hoc;1;"O mostro do lago Ness é um animal não-identificado misterioso que, dizem, habita o Lago Ness, um grande lago localizado na cidade de Inverness, no norte da Escócia. Nessie é geralmente categorizado como um tipo de mostro de lagos.
                    Tradução livre de trecho de https://en.wikipedia.org/wiki/Loch_Ness_Monster.

                Em julho de 2003, a rede BBC fez uma grande investigação sobre o Lago Ness, usando 600 sonares separados. Nenhum vestígio de nenhum ""mostro marítimo"" (isto é, um grande animal, conhecido ou desconhecido) foi encontrado no lago. A equipe da BCC concluiu que Nessie não existe. Agora, nós queremos repetir este experimento.

                Dada uma grade de n linhas e m colunas representando o lago, 6 ≤ n, m ≤ 10000, encontre o menor número de sonares que você precisa colocar no lago de tal forma que podemos controlar todas as posições da grade, com as seguintes condições:

                
                    Um sonar ocupa uma posição da grade; O sonar controla sua própria posição, além das suas posições adjacentes;
                    As posições nas bordas da grade não precisam ser controladas, pois Nessie não conseguiria se esconder nelas (ela é grande demais para isso).
                

                Considere as seguintes figuras:
                    
                 

                Nas figuras, X representa um sonar, e as posições escuras representam as posições controladas por sonares. A última figura exemplifica uma solução para o problema.";A primeira linha da entrada contém um inteiro t, indicando o número de casos de teste. Cada caso de teste é descrito por uma linha contendo dois inteiros separados por um espaço, n e m (6 ≤ n, m ≤ 10000), indicando o tamanho da grade (n linhas e m colunas).;Para cada caso de teste, imprima uma linha contendo o menor número de sonares necessários.;True;1 / 10;1573;1189;75.59%
1429;Fatorial de Novo!;Matemática;2;"Mateus, um calouro de engenharia, está desenvolvendo uma nova notação posicional para representar números inteiros. Ele o apelidou de ""A Curious Method"" (""Um Método Curioso""), representado pela sigla ACM. A notação ACM usa os mesmos dígitos que a notação decimal, isto é, de 0 a 9.

                Para converter um número A da notação ACM para a notação decimal, você deve adicionar k termos, onde k é o número de dígitos de A (na notação ACM), O valor do i-ésimo termo, correspondente ao i-ésimo dígito ai, contando da direita para a esquerda, é ai × i!. Por exemplo, 719ACM é equivalente a 5310, já que 7 × 3! + 1 × 2! + 9 × 1! = 53.

                Mateus acabou de iniciar seus estudos sobre teoria dos números, e provavelmente não sabe quais propriedades um sistema numérico deve ter, mas no momento, ele só está interessado em converter um número de ACM para decimal. Você pode ajudá-lo?";Cada caso de teste é dado por uma única linha não-nula contendo, no máximo, 5 dígitos, representando um número na notação ACM. A linha não possui zeros no início.O último caso de teste é representado por uma linha contendo um único zero.;Para cada caso de teste, escreva uma única linha contendo a representação decimal do número ACM correspondente.;False;2 / 10;3814;2573;67.46%
1430;Composição de Jingles;Estruturas e Bibliotecas;1;"A. C. Marcos está dando os primeiros passos para ser um compositor de jingles. Ele está tendo alguns problemas, mas ao menos ele está criando melodias agradáveis e ritmos atrativos.

                Na música, uma nota tem um tom (sua frequência, resultando em quão grave ou agudo é o som) e uma duração (por quanto tempo a nota soa). Neste problema, estamos interessados apenas na duração das notas.

                Um jingle é dividido em uma sequência de compassos, e um compasso é formado de uma série de notas.

                A duração de uma nota é indicada pela sua forma. Neste problema, iremos utilizar letras maiúsculas para indicar a duração de uma nota. A seguinte tabela lista todas as notas disponíveis:

                ​

                A duração de um compasso é a soma da duração de suas notas. Nos jingles de Marcos, cada compasso tem a mesma duração. Como Marcos é apenas um iniciante, seu famoso professor Johann Sebastian III o ensinou que a duração de um compasso deve ser sempre 1.

                Por exemplo, Marcos escreveu uma composição contendo cinco compassos, dentre os quais quatro possuem a duração correta e um está errado. No exemplo abaixo, cada compasso é delimitado com barras e cada nota é representada como na tabela acima.

                /HH/QQQQ/XXXTXTEQH/W/HW/

                Marcos gosta de computadores assim como de música. Ele quer que você escreva um programa que determine, para cada uma de suas composições, quantos compassos possuem a duração correta.";"A entrada contém vários casos de teste. Cada caso de teste é descrito em uma única linha contendo uma string cujo tamanho está entre 3 e 200 caracteres, inclusive, representando uma composição. Uma composição começa e termina com uma barra '/'. Compassos em uma composição são separados por uma barra '/'. Cada nota em um compasso é representada pela letra correspondente segundo a descrição acima. Você pode assumir que cada composição contém ao menos um compasso e que cada compasso contém ao menos uma nota. Todos os caracteres na entrada serão barras ou uma das sete letras maiúsculas usadas para representar as notas.

                O último caso de teste é seguido por uma linha contendo um único asterisco.";Para cada caso de teste, seu programa deve imprimir uma única linha contendo um único inteiro, o número de compassos que possuem a duração correta.;True;1 / 10;3925;2266;57.73%
1431;Níveis de Klingon;Ad-Hoc;8;"No ensino médio da América Latina, Klingon se tornou tão popular que muitos dos estudantes começaram a aprender essa língua artificial por conta própria. Após tomar conhecimento da situação, os diretores deciriram implementar cursos formais de Klingon. O problema é que as crianças possuem diferentes níveis iniciais da linguagem. Sendo assim, os diretores decidiram oferecer dois níveis de curso: básico e avançado.

                A escola possui diversas divisões, com cada estudante pertencendo a exatamente uma divisão. Devido à burocracia e conflitos de agenda, estudantes de divisões diferentes não podem fazer parte do mesmo curso. Além disso, para ser justo, os níveis básico e avançado devem ser oferecidos a todas as divisões, e ter o mesmo nível de dificuldade em uma divisão.

                Sendo assim, cada divisão será particionada em dois grupos: um grupo será associado ao nível básico e o outro grupo ao nível avançado. É possível que uma divisão não possua nenhum estudante em um dos níveis.

                Para definir os grupos, um teste de Klingon foi aplicado previamente a todos os estudantes da escola, cada um tirando uma nota entre 0 e 1000, inclusive. Os diretores da escola decidiram que todos os estudantes com uma nota maior ou igual a algum valor T serão matriculados no nível avançado, e todos os estudantes com nota menor que T serão matriculados no nível básico.

                No entanto, eles não conseguiram decidir o melhor valor de T. Eles gostariam de um valor que dividisse igualmente todas as divisões. Para isso, eles bolaram uma métrica: eles querem o valor de T que minimize a diferença acumulada, ou seja, a soma da diferença entre o número de estudantes nos dois grupos (básico e avançado) em cada divisão.

                Por exemplo, se a escola possui duas divisões, onde uma divisão possui 10 estudantes no nível básico e 20 no nível avançado, enquanto a outra possui 17 e 15, respectivamente, a diferença acumulada seria |10 - 20| + |17 - 15| = 12;";"A entrada contém vários casos de teste. Cada caso é dado em várias linhas. A primeira linha de cada caso de teste contém um único inteiro N (1 ≤ N ≤ 104), o número de divisões na escola. 2 x N linhas seguem, com cada divisão sendo descrita em duas linhas consecutivas. A primeira linha de cada par contém um único inteiro Ki (1 ≤ Ki ≤ 104), o número de estudantes na divisão i. A segunda linha contém Ki inteiros entre 0 e 1000, inclusive, separados por espaços simples, representando as notas de cada um dos estudantes da divisão i. Você pode assumir que o número total de estudantes em cada caso de teste (ou seja, a soma de todos Ki) não é maior que 105.

                O último caso de teste é seguido de uma linha contendo um único zero.";Para cada caso de teste, imprima uma única linha com um único inteiro representando o menor valor para a diferença acumulada se T for escolhido de forma ótima.;False;8 / 10;351;122;34.76%
1432;Strings Binárias Triple-Free;Paradigmas;6;"Uma sequência binária consiste em zeros e uns. Dada uma string binária T, se não houver uma seqüência binária S tal que SSS (três cópias do S concatenadas) é uma subsequência de T, dizemos que T é o triplo-free.

                Um padrão consiste de uns e zeros, asteriscos, onde um asterisco (*) pode ser substituído por um ou zero. Por exemplo, o padrão de 0**1 contém strings 0001, 0011, 0101, 0111, mas não 1001 ou 0000.

                Dado um padrão P, quantas strings binárias triple-livres contém?";Cada linha da entrada representa um caso de teste, que contem o tamanho do padrão N (1 ≤ N ≤ 30), e o padrão P. Pode haver um máximo de 35 casos de teste. A entrada termina quando N é 0.;Para cada caso de teste, imprima o número do caso e a resposta, como mostrado abaixo.;False;6 / 10;122;60;49.18%
1433;O Clube da Divisão;Matemática;10;"O clube ACM (All Can Meet) foi criado com o propósito de atrair pessoas de todas as idades, com a ideia de que todas as pessoas poderiam sentar e compartilhar experiências de vida, para o benefício de todos. Mas como aconteceu, o clube tornou-se um sucesso tão grande que tornou-se praticamente impossível reunir todos os membros no mesmo local ao mesmo tempo. O clube decidiu então dividir seus membros em ""seções"" menores. Em função de manter uma boa divisão, o diretor so clube decidiu impor os seguintes requerimentos:

                A. todos os membros da mesma idade devem estar na mesma seção,
                B. todos os membros devem fazer parte de exatamente uma seção,
                C. em cada seção, o número máximo de pessoas com a mesma idade não podem ser mais que R vezes o número mínimo de pessoas da mesma idade, onde R é um número racional entre 1.0 e 2.0. O número R é chamado de o fator divisor do clube.

                A última condição garante que não há um grupo menor de jovens que talvez sintam-se inconfortáveis na seção. Por exemplo, denotados por [N,M] um grupo com N menbros que tem M anos. Então a seção {[10,50],[6,45],[70,12],[43,23]} o número máximo de pessoas com a mesma idade é 70, o número mínimo de pessoas com a mesma idade é 6. Se R = 2.0, então dizemos que esta seção não satisfaz os requerimentos (C) desde que 70/6 ≤ 2.0. No entanto podemos dividir esta seção em duas menores seções, nominando {[10,50],[6,45]} e {[70,12],[43,23]}, no qual satisfazem os requerimentos.

                Dado o fator divisor R e uma lista de membros do clube, você deve escrever um programa para achar o número de seções que satisfazem os três requerimentos acima.";"Seu programa deve processar vários casos de teste. A primeira linha de um caso de teste contém um inteiro K e um racional R. K representa o número de idades diferentes do clube (1 ≤ K ≤ 120), e R representa o fator divisor especificado pelo diretor do clube (1.0 ≤ R ≤ 2.0). As próximas K linhas descrevem os membros do grupo, cada linha contém 2 inteiros N e M, indicando que existem N membros que tem M anos no clube (1 ≤ N ≤ 10000 e 1 ≤ M ≤ 120). O fim da entrada é indicado por uma linha com K = 0 e R = 0.0.

                Os valores de entrada serão tais que um erro eventual na representação binária interna de R não afetará o resultado.

                A entrada deve ser lida da entrada padrão.";"Para cada instância do problema você deve imprimir uma única linha, contendo o número mínimo de grupos que satisfazem os 3 requerimentos acima.

                A saída deve ser escrita pela saída padrão.";False;10 / 10;1256;70;5.57%
1434;Patrulheiros Romanos;Matemática;6;"Nos tempos antigos, patrulheiros eram usados para garantir que todas as cidades do Império Romano estavam sob controle. O trabalho de um patrulheiro consistia em visitar continuamente as cidades do Império, tentando minimizar o intervalo entre duas visitas em cada cidade. A Sociedade Militar (SM) quer simular o comportamento de um patrulheiro para ver o quão eficientes eles eram.

                Cada ciclo de simulação corresponde a uma unidade de tempo. A Inatividade Instantânea da Cidade (IIC) para uma cidade X depois de T ciclos da simulação é o número de ciclos decorridos desde a última visita do patruleiro à cidade X (i.e o número de unidades de tempo que a cidade X mantem-se sem visita). Todas as cidades tem Inatividade Instantânea da Cidade igual a zero no início da simulação. A Inatividade Instantânea do Império (IIE) depois de cada ciclo é a soma da Inatividade Instantânea da Cidade de todas as cidades depois de tal ciclo. Finalmente, a Inatividade do Império (II) para uma simulação de N ciclos é a soma das Inatividades Instantâneas do Império depois de N ciclos de simulação.

                Depois de visitar a cidade X, o patruleiro sempre escolhe visitar a cidade vizinha Y com a máxima Inatividade Instantânea da Cidade (se mais de uma cidade tem a maior inatividade, aquela com o menor identificador é escolhida). As cidades X e Y são vizinhas se há uma rua conectando ambas diretamente, sem passar por nenhum cidade intermediária. No começo da simulação, o patruleiro é localizado em uma das cidades, e é dado um mapa do Império Romano contendo a descrição de todas as ruas do Império, indicando o comprimento (em kilometros) e quais duas cidades cada rua conecta. Uma rua entre as cidades X e Y pode ser usada tanto para ir de X à Y quanto para ir de Y à X.

                Assumindo que um patruleiro viaja um quilometro em uma unidade de tempo (uma simulação de ciclo) e que o tempo para visitar a cidade é neglicenciável (igual a zero), MS solicitou a você para determinar a Inatividade do Império depois de N ciclos de simulação.

                Para exemplificar, considere um Império que contém 3 cidades (1, 2 e 3) e duas ruas de comprimento 1 km. A primeira rua conecta as cidades 1 e 2, enquanto a segunda conecta as cidades 2 e 3. Abaixo você encontra um exemplo de uma simulação de 3 ciclos para tal cenário, considerando que o patrulheiro começa na cidade 1.

                Começo da Simulação
                    Patrilheiro na: 1
                    IIC1 = 0, IIC2 = 0, IIC3 = 0
                    IIE = 0
                    II = 0

                Depois do ciclo 1
                    Patrilheiro na: 2
                    IIC1 = 1, IIC2 = 0, IIC3 = 1
                    IIE = 2
                    II = 2

                Depois do ciclo 2
                    Patrilheiro na: 1
                    IIC1 = 0, IIC2 = 1, IIC3 = 2
                    IIE = 3
                    II = 5

                Depois do ciclo 3
                    Patrilheiro na: 2
                    IIC1 = 1, IIC2 = 0, IIC3 = 3
                    IIE = 4
                    II = 9

                Assim sendo, em tal situação, depois de 3 ciclos de simulações a Inatividade do Império é 9.";"A entrada consiste em vários casos de teste. A primeira linha de um caso de teste contém 4 inteiros C, R, N e S, indicando respectivamente a quantidade de cidades do Império (2 ≤ C ≤ 1000), o número de ruas (1 ≤ R ≤ C(C - 1) / 2 ), o número de ciclos a ser simulado (1 ≤ N 1000) e o identificador da cidade inicial do patruleiro (1 ≤ S ≤ C). Cada cidade é identificada por um inteiro distinto de 1 à C. Cada uma das R linhas seguintes contém três inteiros X, Y e D descrevendo a rua; X e Y representam cidades (1 ≤ X ≠ Y ≤ C) e D representa a distância (1 ≤ D ≤ 1000), em kilometros, da rua que conecta X e Y diretamente, sem passar através de qualquer outra cidade. Cada par de cidades X e Y aparecerão ao menos uma vez na descrição de rua. Você pode assumir que é sempre possível viajar de uma cidade para qualquer outra cidade no Império usando as ruas disponíveis. O fim da entrada é indicado por C = R = N = S = 0.";Para cada caso na entrada, seu programa deve produzir uma linha contendo a Inatividade do Império depois de N ciclos de simulação.;False;6 / 10;68;32;47.06%
1435;Matriz Quadrada I;Iniciante;4;Escreva um algoritmo que leia um inteiro N (0 ≤ N ≤ 100), correspondente a ordem de uma matriz M de inteiros, e construa a matriz de acordo com o exemplo abaixo.;A entrada consiste de vários inteiros, um valor por linha, correspondentes as ordens das matrizes a serem construídas. O final da entrada é marcado por um valor de ordem igual a zero (0).;Para cada inteiro da entrada imprima a matriz correspondente, de acordo com o exemplo. Os valores das matrizes devem ser formatados em um campo de tamanho 3 justificados à direita e separados por espaço. Após o último caractere de cada linha da matriz não deve haver espaços em branco. Após a impressão de cada matriz deve ser deixada uma linha em branco.;False;4 / 10;43215;12046;27.87%
1436;Jogo do Tijolo;Matemática;1;"Há uma vila em Bangladesh, onde o jogo de tijolo é muito popular. Jogo de tijolo é um jogo de equipe. Cada equipe é constituída por um número ímpar de jogadores. O número de jogadores deve ser maior do que 1, mas não pode ser superior a 10. A idade de cada jogador deve estar entre 11(inclusive) e 20(inclusive). Não há dois jogadores com a mesma idade. Há um capitão para cada equipe.  
					
					A falta de comunicação entre dois jogadores depende da sua diferença de idade, ou seja, é maior se a diferença de idade for maior. Assim, eles selecionam o capitão de uma equipe de maneira que a quantidade de jogadores desta equipe que são mais jovens e mais velhos do que ele é igual.
                    As idades de todos os membros da equipe são fornecidas. Você tem que determinar a idade do capitão.";A entrada começa com um número inteiro T (T ≤ 100), representando o número de casos de teste. Cada uma das próximas T linhas irá começar com um número inteiro N (1 < N < 11), número de membros da equipe, seguido por N inteiros separados por espaço representando as idades de todos os membros de uma equipe. Cada um destes N inteiros será entre 11 e 20(inclusive). Nota-se que, as idades serão dadas estritamente em ordem crescente ou estritamente em ordem decrescente. Nós não vamos mencionar qual está aumentando e qual está diminuindo, você tem que ser cuidadoso o suficiente para lidar com ambas as situações.;Para cada caso de teste, imprima uma linha no formato “Case x: a”\(sem as aspas), onde x é o número do caso de teste e a é a idade do capitão.;False;1 / 10;5706;3767;66.02%
1437;Esquerda, Volver!;Ad-Hoc;2;"Este ano o sargento está tendo mais trabalho do que de costume para treinar os recrutas. Um deles é muito atrapalhado, e de vez em quando faz tudo errado – por exemplo, ao invés de virar à direita quando comandado, vira à esquerda, causando grande confusão no batalhão. O sargento tem fama de durão e não vai deixar o recruta em paz enquanto este não aprender a executar corretamente os comandos. No sábado à tarde, enquanto todos os outros recrutas estão de folga, ele obrigou o recruta a fazer um treinamento extra. Com o recruta marchando parado no mesmo lugar, o sargento emitiu uma série de comandos ""Esquerda, Volver!"" e ""Direita, Volver!"". A cada comando, o recruta deve girar sobre o mesmo ponto e dar um quarto de volta na direção correspondente ao comando. Por exemplo, se o recruta está inicialmente com o rosto voltado para a direção norte, após um comando de ""esquerda volver!"" ele deve ficar com o rosto voltado para a direção oeste. Se o recruta está inicialmente com o rosto voltado para o leste, após um comando ""Direita, volver!"" ele deve ter o rosto voltado para o sul. No entanto, durante o treinamento, em que o recruta tinha inicialmente o rosto voltado
                para o norte, o sargento emitiu uma série tão extensa de comandos, e tão rapidamente, que até ele ficou confuso, e não sabe mais para qual direção o recruta deve ter seu rosto voltado após executar todos os comandos. Você pode ajudar o sargento?";"A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um inteiro N que indica o número de comandos emitidos pelo sargento (1 ≤ N ≤ 1000)). A segunda linha contém N caracteres, descrevendo a série de comandos emitidos pelo sargento. Cada comando é representado por uma letra: 'E' (para ""Esquerda, volver!"") e 'D' (para ""direita, volver!""). O final da entrada é indicado por N = 0.

                A entrada deve ser lida da entrada padrão.";"Para cada caso de teste da entrada seu programa deve produzir uma única linha da saída, indicando a direção para a qual o recruta deve ter sua face voltada após executar a série de comandos, considerando que no início o recruta tem a face voltada para o norte. A linha deve conter uma letra entre 'N', 'L', 'S' e 'O', representando respectivamente as direções norte, leste, sul e oeste.

                A saída deve ser escrita na saída padrão.";False;2 / 10;9319;4712;50.56%
1438;Desempilhando Caixas;Ad-Hoc;6;Joãozinho e sua família acabaram de se mudar. Antes da mudança, ele colocou todos os seus livros dentro de várias caixas numeradas. Para facilitar a retirada dos livros, ele fez um inventário, indicando em qual caixa cada livro foi colocado, e o guardou na caixa de número 1.Chegando no seu novo quarto, ele viu que seus pais guardaram as caixas em várias pilhas, arrumadas em fila, com cada pilha encostada na pilha seguinte.Joãozinho é um garoto muito sistemático. Por isso, antes de abrir qualquer outra caixa, ele quer recuperar seu inventário. Joãozinho também é um garoto muito desajeitado. Para tirar uma caixa de uma pilha, ele precisa que a caixa esteja no topo da pilha e que ao menos um de seus lados, não importa qual, esteja livre (isto é, não tenham nenhuma caixa adjacente).Para isso, Joãozinho precisa desempilhar algumas das caixas. Como o quarto dele é bem grande, ele sempre tem espaço para colocar as caixas retiradas em outro lugar, sem mexer nas pilhas que os pais dele montaram. Para minimizar seu esforço, Joãozinho quer que você escreva um programa que, dadas as posições das caixas nas pilhas, determine quantas caixas Joãozinho precisa desempilhar para recuperar seu inventário.;A entrada é composta de vários casos de teste. A primeira linha de cada caso de teste contém dois números inteiros N e P , indicando, respectivamente, o número de caixas e o número de pilhas (1 ≤ P ≤ N ≤ 1.000). As caixas são numeradas seqüencialmente de 1 a N. Cada uma das P linhas seguintes descreve uma pilha. Cada linha contém um inteiro Qi, indicando quantas caixas há na pilha i, seguido de um espaço em branco, seguido de uma lista de Qi números, que são os identificadores das caixas. Os elementos da lista são separados por um espaço em branco.Todas as pilhas contêm pelo menos uma caixa, e todas as caixas aparecem exatamente uma vez na entrada. As caixas em cada pilha são listadas em ordem, da base até o topo da pilha. Todas as caixas têm o mesmo formato. O final da entrada é indicado por N = P = 0. A entrada deve ser lida da entrada padrão.;Para cada caso de teste da entrada, seu programa deve imprimir uma única linha, contendo um único inteiro: o número mínimo de caixas, além da caixa 1, que Joãozinho precisa desempilhar para recuperar o seu inventário.A saída deve ser escrita na saída padrão.;False;6 / 10;1096;336;30.66%
1439;Bora Bora;Estruturas e Bibliotecas;8;"Bora Bora é um jogo de cartas simples para crianças, inventado na Ilha do Pacífico Sul de mesmo nome. Duas ou mais pessoas podem jogar, usando um baralho de cartas normais. As cartas têm os valores normais: Ás, 2, 3, 4, 5, 6, 7, 8, 9, 10, Valete, Dama e Rei. Cada carta tem também um dos quatro naipes: Paus, Ouros, Copas e Espadas.

                Os jogadores sentam-se em um círculo ao redor da mesa e jogam por turnos. O próximo jogador a jogar pode ser aquele à esquerda (sentido horário) ou o jogador à direita (sentido anti-horário) do jogador atual, dependendo das cartas jogadas, como você verá. No começo, o sentido do jogo é horário.

                O baralho é embaralhado e é dada a cada jogador uma mão de cartas. O restante do baralho é colocado na mesa, virado para baixo; a essa pilha é dado o nome de pilha de saque. Então a primeira (a mais acima) carta é removida da pilha e colocada na mesa, virada para cima, começando outra pilha, chamada de pilha de descarte.

                O objetivo do jogo é que um jogador descarte todas suas cartas. Em cada turno, um jogador descarta no máximo uma carta. Uma carta pode ser descartada apenas se ela tem o mesmo valor ou o mesmo naipe da carta que se encontra no topo da pilha de descarte. Um jogador descarta uma carta colocando-a, virada para cima, na pilha de descarte (essa carta se torna a carta do topo). Se um jogador não tiver uma carta passível de ser descartada em seu turno, ele deve sacar uma carta da pilha de saque e adicionar à sua mão; se ele puder descartar essa carta, ele o faz, caso contrário ele não faz mais nada e seu turno acaba. Um jogador sempre descarta a carta mais alta que ele consegue. O valor de uma carta é determinado primeiro pelo valor da carta e então pelo naipe. A ordem dos valores é o valor em si (Ás é o menor e Rei é o maior), e a ordem dos naipes é, do menor para o maior, Paus, Ouros, Copas e Espadas. Portanto, a carta de maior valor é o Rei de Espadas e a de menor valor é o Ás de Paus. Como exemplo, a Dama de Ouros tem um valor maior que um Valete (qualquer naipe) mas tem um valor menor que a Dama de Copas.

                Algumas das cartas descartadas afetam o jogo, como se segue:

                
                    Quando uma Dama é descartada, a direção de jogo é invertida: se a direção é horária, ela se torna anti-horária, e vice-versa;
                    Quando um Sete é descartado, o próximo jogador deve sacar duas cartas da pilha de saque (o número de cartas em sua mão aumenta por dois), e perde a vez (não descarta nenhuma carta);
                    Quando um Ás é descartado, o próximo jogador deve sacar uma carta da pilha de saque (o número de cartas em sua mão aumenta por um), e perde sua rodada (não descarta nenhuma carta);
                    Quando um Valete é descartado, o próximo jogador perde a vez (não descarta nenhuma carta).
                

                Perceba que a penalidade da primeira carta da pilha de descarte (a carta sacada da pilha de saque no começo) é aplicada ao primeiro jogador a jogar. Por exemplo, se o primeiro jogador é p e a primeira carta na pilha de descarte é um Ás, o jogador p saca uma carta da pilha de saque e não descarta nenhuma carta em seu primeiro turno. Note também que se a primeira carta é uma Dama, o sentido do jogo é invertido para o anti-horário, mas o primeiro jogador a jogar permanece o mesmo.

                O vencedor é o jogador que descarta todas suas cartas primeiro (o jogo acaba depois de o vencedor descartar sua última carta).

                Dada a descrição do baralho embaralhado e o número de jogadores, escreva um programa que determine quem vencerá o jogo.";"A entrada contém diversos casos de teste. A primeira linha de um caso de teste contém três inteiros P, M e N, separados por espaço, indicando respectivamente o número de jogadores (2 ≤ P ≤ 10), o número de cartas distribuídas para cada jogador no começo da partida (1 ≤ M ≤ 11) e o número de cartas no baralho embaralhado (3 ≤ N ≤ 300). Cada uma das próximas N linhas contém a descrição de uma carta. Uma carta é descrita por um inteiro X e um caractere S, separados por um espaço, representando respectivamente o valor da carta e seu naipe. O valor das cartas é mapeado com inteiros de 1 a 13 (Ás é 1, Valete é 11, Dama é 12 e Rei é 13). Os naipes das cartas são designados pela primeira letra do naipe: 'C' (Paus - Clubs), 'D' (Ouros - Diamonds), 'H' (Copas - Hearts) ou 'S' (Espadas - Spades).

                Os jogadores são identificados com valores de 1 a P e sentam-se em um círculo, no sentido horário, 1, 2 ... P, 1. As primeiras P x M cartas do baralho são distribuídas aos jogadores: as primeiras M cartas ao primeiro jogador (jogador 1), as próximas M cartas ao segundo jogador (jogador 2), e assim por diante. Depois de distribuir as cartas aos jogadores, a próxima carta do baralho - a (P x M + 1)-ésima carta - é usada para começar a pilha de descarte, e as cartas restantes formam a pilha de saque. A (P x M + 2)-ésima carta a aparecer na entrada é a carta do topo da pilha de saque, e a última carta a aparecer na entrada (a N-ésima carta) é a carta de baixo da pilha de saque (a última carta que pode ser sacada). O jogador 1 é sempre o primeiro a jogar (mesmo se a carta usada para começar a pilha de descarte é uma Dama). Todos os casos de teste têm um vencedor, e em todos casos de teste o número de cartas no baralho é suficiente para jogar até o fim da partida.

                O final da entrada é indicado por uma linha contendo apenas três zeros, separados por espaços.";Para cada caso de teste na entrada, seu programa deve imprimir uma única linha, contendo o número do jogador que ganha a partida.;False;8 / 10;509;153;30.06%
1440;Praça de Alimentação;Ad-Hoc;7;"A administração da Universidade planeja construir uma nova praça de alimentação para substituir os vários pequenos e inadequados refeitórios espalhados pelo campus. Para estimar o número de lugares necessários na nova praça de alimentação, foi realizado um experimento para medir o número máximo de clientes dentro dos refeitórios a qualquer instante. Eles contrataram vários estudantes como porteiros, e os posicionaram em cada entrada e saída de todos os refeitórios. A tarefa dos porteiros era anotar em pequenos cartões a hora que cada cliente entrou ou saiu do refeitório (um cartão para cada evento). Em cada carta, eles escreveram a hora, no formato HH:MM:SS, e o evento associado ('E' para entrada, 'X' para saída).

                O experimento teve início na manhã, antes do café-da-manhã, e terminou à noite, após do jantar. Os porteiros tinham seus relógios sincronizados, e os refeitórios estavam vazios tanto antes quanto depois do experimento (ou seja, não havia nenhum cliente antes do café-da-manhã e nenhum cliente permaneceu depois do jantar). Os porteiros escreveram exatamente um cartão para cada cliente que entrou e para cada cliente que saiu.

                Após o experimento, os cartões foram coletadas e enviadas à administração para serem processadas. A tarefa, no entanto, não foi tão fácil como planejada, pois dois problemas ocorreram. Primeiramente, os cartões foram amontoados de forma aleatória e portanto necessitavam ser ordenados; isso é bastante fácil mas demorado para ser feito à mão. Mas o pior é que, apesar dos cartões possuirem as horas corretas, alguns porteiros esqueceram de escrever a letra correspondente ao evento. A administração da Universidade decidiu que necessitava da ajuda de um expert!

                Dado um conjunto de cartões com horas e eventos (o evento pode estar faltando), escreva um programa que determine o número máximo de clientes que poderiam ter estado dentro dos refeitórios a qualquer momento.";"A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um inteiro N indicando o número de cartões coletados no experimento (2 ≤ N ≤ 64800). Cada uma das próximas N linhas contém a informação escrita em um cartão, que consiste da especificação da hora, seguida por um espaço em branco, seguida pela especificação do evento. A especificação da hora é dada no formato HH:MM:SS, onde HH representa horas (06 ≤ HH ≤ 23), MM representa minutos (00 ≤ MM ≤ 59) e SS representa segundos (00 ≤ SS ≤ 59). Em cada caso de teste, nenhum par de cartões representa o mesmo instante de tempo. A especificação de evento é um único caractere: 'E' para entrada, 'X' para saída e '?' para incerto. Informações podem estar faltando, mas as informações dadas sempre estão corretas (ou seja, o instante de tempo anotado no cartão é válido). Além disso, se um cartão descreve uma entrada, então um cliente realmente entrou no refeitório naquele momento; se um cartão descreve uma saída, então um cliente realmente saiu do refeitório naquele momento; se um cartão descreve um evento incerto, então um cliente realmente entrou ou saiu de um refeitório naquele momento.

                O último caso de teste é seguido de uma linha contendo um único zero.";Para cada caso de teste seu programa deve imprimir uma única linha contendo um único inteiro, o número máximo de clientes que poderiam ter estado dentro dos refeitórios a qualquer momento.;False;7 / 10;312;160;51.28%
1441;Sequências de Granizo;Ad-Hoc;3;"Considere a sequência formada iniciando-se por um inteiro positivo h0 e iterando com n = 1, 2, . . . com a seguinte definição, até que hn = 1:

                hn​ = { ½ × hn-1 se hn-1 é par;

                hn​ = { 3 × hn-1 + 1 se hn-1 é ímpar.

                Por exemplo, se iniciarmos com h0 = 5 a seguinte sequência é gerada: 5, 16, 8, 4, 2, 1. Se começarmos com h0 = 11, a sequência gerada é 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1.

                Como você pode ver nos exemplos, os números aumentam e diminuem, mas eventualmente terminam em 1 (isto é verdade para pelo menos para todos os números que já foram testados). Estas sequências são chamadas de Sequências de Granizo  porque são similares à formação do granizo, pois são carregados para cima pelos ventos várias vezes, até que finalmente caem no chão.

                Neste problema, dado um inteiro positivo, sua tarefa é computar o maior número na Sequência de Granizo que inicie com este o número dado.";"Cada caso de teste é descrito por uma única linha. A linha contém um inteiro H que representa o valor inicial para construir a sequência (1 ≤ H ≤ 500).

                O último caso de teste é composto por uma linha contendo um único zero.";Para cada caso de teste, imprima uma linha com um inteiro representando o maior número na Sequência de Granizo que inicia com o número da entrada.;False;3 / 10;4933;2169;43.97%
1442;Desvio de Rua;Grafos;7;"A prefeitura de uma grande cidade da Nlogônia iniciou um programa de recuperação do asfalto de suas ruas. Na Nlogônia, cada rua liga diretamente dois cruzamentos, e pode ter mão única ou mão dupla. Por determinação de um antigo decreto real, sempre existe ao menos um caminho entre dois pontos quaisquer da cidade.

                No programa de recuperação, uma única rua será recuperada por vez, e para isso a rua será fechada para o tráfego. Esse fechamento pode causar caos no trânsito local ao violar o decreto real, impedindo vários cidadãos de voltarem para casa dos seus trabalhos e vice-versa. A prefeitura pode converter algumas das ruas de mão única em mão dupla, mas prefere evitá-lo pois ruas de mão dupla tendem a causar acidentes mais graves; a prefeitura prefere criar desvios apenas invertendo as mãos das ruas de mão única já existentes.
                
                O Rei da Nlogônia solicitou seus préstimos para escrever um programa que, dada a descrição das ruas de uma cidade, determine se, quando uma dada rua é interditada para recuperação, continua existindo um caminho entre quaisquer dois pontos da cidade, mesmo que seja necessário alterar as mãos de direção de outras ruas.";"A entrada é composta por diversos casos de teste. A primeira linha de um caso de teste contém dois inteiros N (1 ≤ N ≤ 103)  e M (1 ≤ M ≤ 105), representando respectivamente o número de cruzamentos e o número de ruas da cidade. Os cruzamentos são identificados por inteiros de 1 a N e as ruas são identificadas por números inteiros de 1 a M. Cada uma das M linhas seguintes descreve uma rua e contém três inteiros A (1 ≤ A), B (B ≤ N) e T (1 ≤ T ≤ 2), onde A e B são os cruzamentos que a rua liga diretamente, e T indica a mão de direção da rua: se T = 1 a rua tem mão única na direção de A para B; se T = 2 a rua tem mão dupla. A primeira rua descrita será interditada para recuperação.";"Para cada caso de teste seu programa deve imprimir uma linha contendo um caractere que descreve o que a prefeitura deve fazer para respeitar o decreto real após o fechamento da rua para reformas:

                
                    '-': não é necessário qualquer tipo de alteração nas outras ruas.
                    '*': é impossível respeitar o decreto real, independente de quaisquer mudanças nas outras ruas.
                    '1': é possível cumprir o decreto real apenas invertendo as mãos de algumas das ruas de mão única.
                    '2': é possível cumprir o decreto real, mas é necessário converter algumas ruas de mão única para mão dupla.";False;7 / 10;624;222;35.58%
1443;Engarrafamento;Ad-Hoc;6;"Marcos é um cientista de computação que trabalha em uma empresa de transporte, analisando dados das viagens dos caminhões de carga da empresa e otimizando notas de veículos. Devido aos constantes congestionamentos envolvendo veículos da empresa, esta designou uma nova tarefa para Marcos: computar a distância percorrida por cada veículo em situações de tráfego intenso. Marcos está muito ocupado com outras tarefas na empresa, e designou esta tarefa de calcular a distância percorrida em viagens para você, o novo estagiário da empresa.

                De forma mais específica, a distância percorrida de cada viagem deve ser calculada a partir dos dados de aceleração durante a viagem. Nestes dados constam as faixas de tempo onde o motorista pisou no acelerador (aceleração constante de 1m/s², até uma velocidade máxima de 10m/s), sendo que quando o veículo não estiver acelerando o motorista estará com o pé no freio (veículo parado ou freando com uma desaceleração constante de 2m/s²). A distância total percorrida na viagem deve ser calculada a partir destas faixas de tempo, assumindo que o veículo está inicialmente parado.";"A entrada é composta por vários casos de teste. Cada caso corresponde a uma viagem e é iniciado por uma linha contendo um inteiro N, que diz a quantidade de faixas de aceleração do veículo durante a viagem. O final da entrada é marcado com N = 0, caso que não deve ser processado.

                Cada uma das próximas N linhas contém dois inteiros, a e b, designando as faixas de tempo (em segundos) onde o motorista está com o pé no acelerador (acelerou no tempo t = a até t = b). No primeiro caso de teste do exemplo abaixo (primeira viagem) o motorista pisou no acelerador no tempo t = 0s até t = 5s, pisou no freio entre t = 5s e t = 8s, acelerou de t = 8s até t = 15s, freou entre t = 16s e t = 17s e acelerou até t = 50s. A distância percorrida deve ser computada de t = 0s até o segundo final da última faixa de aceleração, neste caso de t = 0s até t = 50s.

                Limites: 0 ≤ N ≤ 1000, sendo que cada viagem demora no máximo 30h.";O programa deverá imprimir, para cada viagem, uma linha contendo a distância percorrida em metros (com duas casas decimais).;False;6 / 10;144;67;46.53%
1444;Corrida dos Marrecos;Matemática;3;"Pirabeiraba é um distrito de Joinville, onde colonizadores alemães se instalaram no início do século XX. Anualmente há a festa do aipim, tubérculo conhecido como macaxeira no nordeste do Brasil. Para acompanhar o aipim, nada como um prato típico germânico: o marreco recheado! Para os entendidos de culinária, há uma magia nesta combinação: marreco com aipim. Contudo, para matar o marreco, você deve capturá-lo quando este estiver com o sangue bem quente. Para isto, o marreco deve estar cansado. Dizem que seu sangue quente é sinônimo de fertilidade, para não dizer: afrodisíaco! Mas isto é uma outra história.

                Nesta brincadeira de correr atrás do marreco, surgiu a ideia de cansá-los com uma corrida entre eles. O espaço físico da Sociedade Rio da Prata é limitado, assim, construíram apenas 3 raias para se realizar estas corridas. As corridas são feitas em grupos de 2 e 3 marrecos. Os primeiros colocados destes grupos são novamente divididos em grupos de 2 ou 3 para uma nova rodada. Isto acontece até que só reste o marreco campeão, que, como prêmio foge (por ora) da panela. Todos os marrecos sobreviventes devem correr na rodada, isto é, se não for possível dividir todos os marrecos em grupos de 3, alguns grupos de 2 devem ser formados, mas de forma a minimizar o número de corridas. Exemplos são vistos na Figura 1.

                

                Figura 1: Exemplos: Competição com 4, 5 e 6 marrecos.

                Os marrecos perdedores, por sua vez, serão os primeiros a irem para panela. Você foi convidado para comer marreco com aipim, mas, em troca, deve escrever um programa que calcule o número de corridas realizadas para se determinar o marreco campeão.";A entrada do programa é composta por vários casos de teste. Cada caso de teste é composto por uma linha contendo um número inteiro n(que representa o número de marrecos), sendo que 0 ≤ n ≤ 100.000, sendo que n = 0 é utilizado unicamente para marcar o término das entradas, sendo que este deve ser desconsiderado.;O seu programa deve imprimir na saída padrão uma linha por caso de teste, contendo o número de corridas necessárias para escolher o marreco campeão.;True;3 / 10;1328;744;56.02%
1445;Quem Vai à Festa?;Ad-Hoc;6;"A garoa fina que caiu na última semana levou o professor Claudius Virux ficar saudoso de seus tempos de Campina Grande – Pb,  como estudante  na UFCG.  Lá,  o inverno é um período marcado por uma chuvinha igual a de Joinville, com noites frias.

                Na universidade, as festinhas  dos estudantes,  que ocorriam em quase todas as sextas-feiras e sábados,  eram um programa e tanto. O mais interessante é que se encontravam as figuras mais inusitadas, poetas, cantores, professores, e outros artistas, além, é claro, dos estudantes.  Sempre havia  algum  motivo para  organizar  uma  festa,  quando  não,  a ideia era celebrar  a semana dura da universidade que se passou.

                O mais curioso era a sistemática de como o anfitrião fazia o convite. O dono(a)  da casa (em seus tempos  se chamava  de república) convidada os seus amigos imediatos, estes por sua vez convidavam outros,  e  assim, sucessivamente. Chegado o dia da festa, o anfitrião queria conhecer os seus novos amigos, a fim de verificar como tal corrente de convite tinha se propagada.

                Para  controlar quantos e como os convidados vieram à festa, o anfitrião solicitou a cada um que chegasse, escrevesse seu nome, e quem o convidou.

                Sua tarefa é contar quantos convidados estão presentes em cada  festa, dada apenas a relação imediata entre convidado e um amigo.";"Para  cada festa, haverá um número de relação entre os convidados. Este é um valor N escrito antes das relações que seguem em pares do tipo (x, y) = (y, x).  Onde x é o nome de um amigo e y o seu convidado. Os valores de x e y são numerados  de 1 a 1000, e o anfitrião é sempre o número 1.

                A leitura de 0 na entrada indica fim de festa! O formato dessas entradas seguem os padrões abaixo.";A cada conjunto de relação, imprima o número total de participantes na festa, incluindo o anfitrião. O total da festa, uma por linha. Na entrada  0 não escreva nada.;False;6 / 10;599;305;50.92%
1446;Diagrama de Venn?;Geometria Computacional;10;"Mickayil estava na escola estudando teoria de conjuntos. As escolas em Praga são bastante rigorosas. A professora ensinou para os alunos como desenhar diagramas de Venn para três conjuntos, e pediu aos alunos que trabalhassem com os diagramas. Para impressionar a professora com diagramas bem desenhados, Mickayil decidiu que iria fazer diagramas coloridos. Para atingir esse objetivo, ele recortou três figuras convexas usando finos papéis coloridos. Mickayil percebeu que, sobrepondo as figuras, as intersecções podiam gerar novas cores.

                Assim, temos três figuras convexas sobre uma superfície plana, cada figura com uma cor. Quando figuras estão sobrepostas, a cor que vemos é uma mistura das cores das figuras. Podemos representar as cores por inteiros entre 0 e 15. A mistura de cores é feita através da soma dos valores das correspondentes cores módulo 16. Queremos saber o que enxergamos ao olhar para o diagrama de Venn do Mickayil, isto é, quais cores e em que quantidade elas aparecem. Vamos medir isso através da área visível de cada cor.";"São dadas várias instâncias. Cada instância é composta por três figuras. Essas figuras são dadas uma por linha, com o formato

                ni ci xi1 yi1 xi2 yi2 ... xij yij ... xin yin​

                para i = 1, 2, 3, onde 0 ≤ ni ≤ 200 é o número de pontos na borda da figura i, ci é a cor da figura i e os pares (xij , yij) representam os pontos da borda de i no sentido anti–horário, dados por inteiros. A entrada termina quando n1 = 0 (note que essa instância não deve ser processada).";Você deverá imprimir um cabeçalho indicando o número da instância que está tratando (Instancia h) e nas linhas seguintes o par cor e área total visível desta cor. Estas linhas devem ser ordenadas pelas áreas, de forma decrescente. Resolva os empates de forma crescente na cor. Apenas para simplificar a apresentação, mostre os valores das áreas arredondados em duas casas decimais. Imprima uma linha em branco após cada instância.;False;10 / 10;143;21;14.69%
1447;Back to the Future;Grafos;8;"Um grupo de amigos resolveu ir à Alemanha para apoiar a seleção brasileira em sua jornada gloriosa rumo ao hexa. Como as passagens aéreas e as estadias eram caras, cada um trouxe uma quantidade de dinheiro que julgou suﬁciente para passar o mês com conforto e voltar para casa sem problemas.

                Porém, após a bela campanha do Brasil na copa do mundo, o grupo de amigos se viu obrigado a gastar o dinheiro que tinha guardado para as etapas ﬁnais da copa com a famosa cerveja alemã. As consequências de tais atos foram terríveis. Após uma grande bebedeira, todos foram pegos pela polícia local dormindo na rua, e receberam multas pesadíssimas. Além disso, todos perderam suas passagens de volta. Devido a esses contratempos, a viagem de volta ﬁcou ameaçada. De repente, eles descobriram que precisavam voltar para casa gastando a menor quantidade possível de dinheiro.

                Analisando as rotas aéreas disponíveis, os amigos notaram que em todas as rotas o número de assentos disponíveis nos aviões era sempre o mesmo. Porém, os preços das viagens entre uma cidade e outra eventualmente variavam bastante. Assustados com a possibilidade de não encontrar lugares suﬁciente nos aviões para que todos pudessem voltar e preocupados em gastar a menor quantidade possível de dinheiro, o grupo de amigos resolveu pedir sua ajuda.";"O problema é composto por várias instâncias. Cada instância começa com uma linha com dois inteiros positivos N (2 ≤ N ≤ 100) e M (1 ≤ M ≤ 5000), onde N é o número de cidades que pertencem às M rotas de voo consideradas. Os amigos querem ir da cidade 1 até a cidade N.

                Nas próximas M linhas são fornecidos triplas de inteiros A B C descrevendo a rota do avião (A e B) e o preço da passagem aérea por pessoa (C). Os valores de A e B estão entre 1 e n. As rotas são bidirecionais (ou seja, há um voo de A até B e um voo de B até A com preço C) e haverá no máximo uma rota entre duas cidades. Na próxima linha são dados dois inteiros, D e K, onde D é o número de amigos e K é o número de assentos livres em cada voo. Cada rota só pode ser utilizada uma vez.";"Para cada instância, imprima a linha ""Instancia k"", onde k é o número da instância atual. Além disso, imprima a menor quantidade possível de dinheiro que os amigos vão gastar para voltar ao Brasil (que está limitada por 1015). Caso não seja possível escolher um conjunto de voos que levem todos para casa, imprima ""impossivel"".
                    
                Imprima uma linha em branco após cada instância.";False;8 / 10;449;130;28.95%
1448;Telefone Sem Fio;Strings;8;"Toda criança já brincou de ""telefone sem fio"". Joãozinho inventou uma variação da brincadeira.

                O grupo de crianças é dividido em dois times. Os times se organizam como na brincadeira original, em que cada um repete o que lhe foi falado para o seguinte, até que o último diz o que chegou até ele. No caso da brincadeira de Joãozinho será falada uma frase com n caracteres (contando letras, espaços, sinais de pontuação, etc). Todos sabem que a frase tem este comprimento. A frase é falada pelo juiz ao primeiro competidor de cada time que a repete para o segundo, e este para o terceiro e assim sucessivamente, até que o último competidor de cada time escreve a frase final (garantindo que n caracteres sejam escritos) e a entrega para o juiz.

                A equipe vencedora é aquela cuja frase final seja mais próxima da frase original. Para calcular a semelhança entre duas frases de mesmo comprimento você deve contar o número de vezes em que o caractere da frase do time coincide com o caractere da frase original. Ganha o time para o qual o número de coincidências seja máximo. Se os dois times empataram neste critério, a primeira vez que um dos times acertou e o outro errou decide.

                Exemplo: Se a frase original foi ""O rato roeu a roupa do rei."", o primeiro time escreveu ""O ator morreu, garoupa rei."" e o segundo time escreveu ""O pato moeu garoupa dorlei."" O segundo time ganhou pois teve 21 coincidências contra 9 coincidências do primeiro:

                

                Assim como os juízes da Maratona de Programação, estes juízes são muitos preguiçosos. Logo, pediram para você escrever um programa que resolve este problema.";"A entrada começa com um inteiro t, onde 1 ≤ t ≤ 1000, indicando o número de instâncias que seu programa deve analisar.

                Cada instância é composta por três linhas, na primeira a frase correta, na segunda a frase do primeiro time e na terceira a frase do segundo time. Cada frase tem no máximo 100 caracteres, e as frases possuem sempre o mesmo tamanho.";Para cada instância, você deverá imprimir um identificador Instancia k, onde k é o número da instância atual. Na linha seguinte você deve imprimir qual dos times foi o vencedor ou se houve empate. Após cada instância, seu programa deve imprimir uma linha em branco.;True;8 / 10;6729;1304;19.38%
1449;O Fantástico Jaspion;Estruturas e Bibliotecas;4;"Em 1985 estréia na TV Japonesa a série Kyojiu Tokusou Jaspion (Investigador Especial de Monstros Jaspion). A série chega ao Brasil alguns anos depois com o título “O Fantástico Jaspion”, e com ela nasce a fantasia de polícia espacial em milhões de brasileirinhos. As crianças saíam da escola, corriam pelas ruas (sem olhar se vinha carro), ligavam a TV e mergulhavam na coragem, exemplo de pessoa, e incontestável sede por justiça do Fantástico Jaspion. O comércio de gibis e as brigas por figurinhas no recreio da escola estavam alcançando números históricos. Até então, tal sentimento só havia sido estimulado com tanta intensidade pelo Chaves e a sua turma! Diante dessa febre inter-galática, o inevitável aconteceu. Os produtores do Jaspion ganharam o Nobel da Paz! Isso mesmo! Os produtores ganharam um Nobel. As histórias do grandioso Jaspion estavam por todo canto. Agora as crianças tinham um belíssimo exemplo para seguir. A paz mundial estava garantida! Não precisávamos mais temer o monstrengo Satan Gos!
                No Brasil havia uma criança que adorava as histórias do Jaspion! Antônio Melhorança Capote Valente Junior carinhosamente apelidado de ACM, um menino da zona sul de São Paulo que adorava cantar as músicas do grande herói. Ele era tão fanático que chegou a comprar um dicionário de Japonês-Português e iniciou um trabalho árduo de tradução. Entretanto, o trabalho ficou inacabado! Alguns trechos da canção ainda precisam ser traduzidos. Neste momento você deve estar se perguntando: qual é a minha tarefa neste fabuloso problema? Ok! Antes de falar da sua tarefa, convide seu companheiro de equipe para mergulhar com você no desfecho da história. Para isso, vamos falar mais um pouco sobre o nosso ACM. Ele se formou em Ciência da Computação e hoje trabalha no mesmo escritório que você. Pois é! Você trabalha como programador ao lado dessa figura! Como sabemos que você gosta muito dele, temos certeza que vai aceitar a seguinte tarefa: dado um dicionário Japonês-Português e uma letra de música, escreva um programa que imprima a letra traduzida.";"A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias.
                A primeira linha de cada instância contém dois inteiros M e N (1 ≤ M ≤ 1000000, 1 ≤ N ≤ 1000), que representam o número de palavras no dicionário e o número de linhas na letra da música, respectivamente.
                Os próximos M pares de linhas contêm as traduções: a primeira linha de cada par contém a palavra em Japonês, e a segunda linha contém a tradução para o Português (que pode ter uma ou mais palavras). Todas as palavras usam apenas letras minúsculas. Cada palavra em Japonês aparece apenas uma vez em cada instância.
                As próximas N linhas contêm a letra da música. Cada linha da letra da música é uma lista de palavras separadas por um espaço (todas as palavras consistem apenas de letras minúsculas). Algumas podem estar vazias, mas nenhuma linha possui espaços no início ou no final.
                Nenhuma linha contém mais do que 80 letras.";"Para cada instância imprima as N linhas traduzidas. As palavras que não estão no dicionário devem ser impressas como aparecem na entrada. Imprima uma linha em branco após tradução, inclusive após a última.
                Nenhuma linha da saída contém mais do que 80 letras.";False;4 / 10;2253;828;36.75%
1450;Os Joguinhos de Ramsés;Matemática;9;"Ramsés II foi o mais prestigioso dos faraós egípcios. Reinou entre 1279 a.C. e 1213 a.C. Construiu vários templos, inclusive os famosos templos de Núbia. O mais famoso é um esculpido na rocha, em Abu Simpel, perto da segunda catarata do Nilo, onde o próprio faraó é reproduzido. Com Nefertari e outras esposas teve provavelmente mais de 6 filhos, com quem gostava muito de brincar de um jogo que chamava de “pirâmide mais alta”. O jogo consistia do seguinte. As crianças recebiam pequenos paralelepípedos de diferentes dimensões (que podiam ser rotacionados), e deveriam com estes cubos construir a pirâmide mais alta que conseguissem. Para construí-la não podiam colocar um paralelepípedo maior sobre um menor, ou seja, se o bloco A está sobre o bloco B, tanto a largura como a profundidade de A devem ser menores ou iguais que as de B.

                Amen-hotep, primogênito de Ramsés, era muito bom no jogo, e muitas vezes conseguia construir pirâmides muito mais altas que o pai conseguia. Então, Ramsés decidiu chamar o grande matemático da corte, Narmer, para encontrar para cada conjunto de paralelepípedos a maior pirâmide possível, isto é, a pirâmide com a maior altura possível.";"A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias.

                A primeira linha de cada instância contém um inteiro N, onde 1 ≤ N ≤ 15, indicando o número de blocos. Cada uma das N linhas seguintes possui três inteiros X, Y e Z que indicam as medidas do bloco.";Para cada instância imprima uma linha contendo a altura da maior pirâmide possível.;False;9 / 10;155;65;41.94%
1451;Teclado Quebrado;Estruturas e Bibliotecas;6;"Você está digitando um texto longo com um teclado quebrado. Bem, não tão quebrado. O único problema com o teclado é que às vezes a tecla ""home"" ou a tecla ""end"" é automaticamente pressionada (internamente). Você não está ciente deste problema, já que você está focado no texto e nem sequer ligou o monitor! Depois que você terminar de digitar, você pode ver um texto na tela (se você ligar o monitor). Em chinês, podemos chamar este texto de Beiju. Sua tarefa é encontrar o texto Beiju.";"Há diversos casos de teste. Cada teste é uma única linha que contém pelo menos uma e, no máximo, 100.000 letras, underscores e dois caracteres especiais '[' e ']'. '[' Significa que a tecla ""Home"" é pressionada internamente, e ']' significa que a tecla ""End"" é pressionada internamente. A entrada é terminada por fim de arquivo (EOF). O tamanho do arquivo de entrada não excede 5MB.";Para cada caso, imprimir o texto Beiju na tela.;False;6 / 10;4454;1480;33.23%
1452;Gloud Computing;Estruturas e Bibliotecas;2;"A Gloud Computing está vindo se instalar para a região de Joinville. Eles são conhecidos por proverem aplicativos na internet, mais especificamente um modelo de negócios baseado em cloud computing - computação nas nuvens.

                A fim de selecionar os novos funcionários da empresa, eles contactaram o comitê da maratona da UDESC, para que passassem um problema aos nossos maratonistas. Aquele que resolver, além do balão, pode preencher a ficha funcional com estrelinhas a mais.

                Basicamente, a Gloud Computing tem aplicações espalhadas em seus servidores em diversos lugares do mundo. Estes servidores são especializados em uma lista de aplicativos a serem usados pelos usuários ali conectados na internet das nuvens.

                Por exemplo, o servidor de Joinville pode disponibilizar a aplicação A, enquanto que o de Pasadena na Califórnia provê as aplicações A, B e C e o servidor de Pomerode provê a aplicação C.

                Temos um conjunto de servidores a cada um com um conjunto de aplicações a serem disponibilizados a um conjunto de usuários. Cada usuário pode estar conectado a um ou mais servidores dependendo de sua demanda, como ilustrado na Figura 1.

                

                Figura 1: 3 provedores de serviços, 2 usuários e 4 conexões.

                Serão disponibilizados a você dados sobre estes dois conjuntos, servidores e demanda dos usuários, e você deverá dizer a quantidade total de conexões entre clietes e servidores. As conexões são feitas de forma a maximizar a redundância. Por exemplo, se um cliente utilizar as aplicações B e C, ele irá se conectar a todos os servidores que disponibilizarem ao menos a aplicação B e a todos os que disponibilizarem ao menos a C. Múltiplas conexões entre um mesmo par de cliente e servidor são contabilizadas como um só. Pode ser que um cliente requeira uma aplicação inexistente, assim como o caso de um servidor prover uma apliação não requisitada por nenhum cliente.";A entrada é composta por vários casos de teste. Cada caso de teste é iniciado por dois inteiros, N e M (0 ≤ N, M ≤ 200), que correspondem ao número de servidores e ao número de clientes. Cada uma das próximas N linhas contém um valor Qi (0 ≤ Qi ≤ 100) correspondente ao número de aplicações fornecidas pelo i-ésimo servidor, seguido por Qi palavras (separadas por espaços) referentes aos nomes das aplicações fornecidas. Após esta descrição dos servidores, seguem M linhas, cada uma contendo um valor Pj (0 ≤ Pj ≤ 100) correspondente ao número de aplicações requisitadas pelo j-ésimo cliente, seguido por Pj palavras (separadas por espaços) referentes aos nomes das aplições requisitadas. A entrada temina quando N = M = 0. Todos os nomes de aplicativos tem tamanho entre 1 e 20 caracteres.;Para cada caso de teste, o programa deve imprimir a soma total de conexões entre cliente e servidores em uma linha, desconsiderando múltiplas conexões entre um mesmo par de cliente e servidor.;True;2 / 10;669;461;68.91%
1453;Palavras-Cruzadas Sem Palavras;Ad-Hoc;10;"Embora jogos de caça-palavras remontam à tempos antigos – um caça-palavras foi encontrado nas ruínas Romanas de Pompéia – foi só em 1913 que o Sunday New York World publicou um quebra-cabeça chamado de 'palavras-cruzadas' inventado por Arthut Wynne, um jornalista que tinha o trabalho de semanalmente elaborar um desafio para a seção de quadrinhos do jornal. O quebra-cabeça foi um sucesso imediato e se tornou uma característica semanal, e é hoje, provavelmente, o jogo de palavras mais popular e difundido no mundo.

                (Para as pessoas estranhas que não conhecem isso, palavras-cruzadas é um quebra-cabeça no qual o jogador deve preencher com palavras indicadas por pistas verbais, um padrão axadrezado, de modo que elas sempre cabem onde elas cruzam.)

                A configuração de uma palavra-cruzada é a figura formada por casas vazias e por casas pretas no quebra-cabeça. Durante os primeiros anos, vários tipos de formas e figuras (diamante, círculo, quadrado) foram experimentados antes da familiar forma retangular com algumas casas pretas (usadas para separar palavras) ser adotado universalmente. Para este problema, vamos definir que a configuração para um quebra-cabeça com N linhas e M colunas é válida apenas se

                
                    cada coluna contém exatamente um quadrado preto; e
                    quadrados pretos não estão em colunas adjacentes na mesma linha.
                

                

                Configuração inválida (à esquerda) e configuração válida (à direita).

                Dada uma lista com os comprimentos das palavras, todas as quais devem ser colocadas para direção vertical, seu trabalho é encontrar uma configuração para um quebra-cabeça com N linhas, M colunas e M quadrados pretos.";A entrada possui diversos casos de teste. A primeira linha de cada caso de teste possui três inteiros N, M e K, indicando respectivamente o número de linhas no quebra-cabeça (2 ≤ N ≤ 2000) o número de colunas no quebra-cabeça (1 ≤ M ≤ 2000) e o número dos comprimentos das palavras (1 ≤ K ≤ 4000). A segunda linha contém K inteiros Wk, representando os comprimentos das palavras que devem ser colocadas na direção vertical (1 ≤ Wk ≤ N-1). O fim da entrada é indicado por N = M = K = 0.;Para cada caso de teste da entrada seu programa deve produzir uma resposta. A primeira linha de resposta deve conter um identificador do caso de teste, no formato '#i’, onde i começa a partir de 1 e é incrementado para cada caso de teste. Então, se  houver uma configuração válida para o quebra-cabeças, o programa deve produzir M linhas de saída, que descreve uma tal configuração. Cada linha deve conter dois inteiros L e C, separados por um espaço em branco, indicando a posição de um quadrado preto (L indica o número da linha e C indica um número da coluna, com 1 ≤ L ≤ N e 1 ≤ C ≤ M). Se mais de uma configuração válida é possível, imprima qualquer uma delas. Se não for possível uma configuração válida para o quebra-cabeça, o seu programa deve produzir como resposta uma única linha contendo o valor 0.;True;10 / 10;58;13;22.41%
1454;O País das Bicicletas;Grafos;7;"Como você já deve saber, a bicicleta é um dos meios de transportes mais populares da China. Quase todos os chineses possuem a sua, e utilizam-na para trabalho, recreação, e outras atividades.

                Após muitos anos pedalando, Mr. Lee já não têm a mesma disposição para encarar as diversas subidas da cidade onde mora. E a cidade em que Mr. Lee vive é extremamente montanhosa. Por razões sentimentais, ele não quer mudar para uma cidade mais plana. Resolveu, então, que tentaria evitar grandes altitudes em seus caminhos mesmo que, para isso, tivesse que pedalar um pouco mais.

                Mr. Lee obteve com o serviço topográfico chinês uma coleção de mapas de sua cidade, em que cada rua desses mapas possui a informação da maior altitude encontrada quando trafegada. Tudo que ele precisa fazer agora é determinar rotas que minimizem a altura percorrida entre pares (origem, destino).

                Sabendo que você planeja visitar a cidade em que ele mora no próximo ano, Mr. Lee pediu sua ajuda. Em uma primeira etapa, ele deseja que você implemente um programa que receba mapas topográficos da cidade e uma coleção de pares (origem, destino). Para cada par, seu programa deve imprimir a maior altura encontrada em uma rota entre a origem e o destino. Lembre-se que as rotas devem minimizar tais alturas. As rotas propriamente ditas, serão determinadas em uma segunda etapa (quando você chegar à China para visitá-lo).

                Como o transporte utilizado é uma bicicleta, você pode considerar que todas as ruas da cidade são de mão dupla. Não demore, pois Mr. Lee conta com você. :-)";"Seu programa deve estar preparado para trabalhar com diversos mapas, doravante denominados instâncias. Cada instância tem a estrutura que segue.

                Na primeira linha são fornecidos dois inteiros n (0 ≤ n​ ≤ 100) e m (0 ≤ m ≤ 4950) que representam, respectivamente, os números de interseções e de ruas. Por razões de clareza, as interseções são numeradas de 1 a n, inclusive; toda rua começa e termina em uma interseção; e não existem interseções fora das extremidades de uma rua.

                Nas próximas m linhas são fornecidos três inteiros: i e j (1 ≤ i, j ≤ n) que indicam a existência de uma rua entre as interseções i e j; e h que representa a maior altitude encontrada quando a rua é trafegada. Esses inteiros estão separados por espaços em branco.

                Na linha seguinte, é dado um inteiro k (1 ≤ k ≤ 50) que representa o número de pares (origem, destino) que serão especificados nas próximas k linhas. Cada par é formado por dois inteiros i e j como acima. Isto é, origem e destino são interseções de ruas, e também estão separados por espaços em branco.

                Valores n = m = 0 indicam o final das instâncias e não devem ser processados.";"Para cada instância solucionada, você deverá imprimir um identificador Instancia h em que h é um número inteiro, sequencial e crescente a partir de 1. Nas próximas k linhas, você deve imprimir as maiores alturas encontradas nas rotas entre os k pares (origem, destino) fornecidos, um valor por linha, na ordem da entrada.

                Uma linha em branco deve ser impressa após cada instância.";False;7 / 10;1456;414;28.43%
1455;Final do ICPC;Geometria Computacional;10;"Como todos sabemos, ainda não foi decidido o local da próxima ﬁnal do ICPC. Desta vez o diretor da competição, Prof. Poucher, tentou escolher uma sede que, de alguma forma, ﬁcasse o mais central possível para os vários participantes.

                Para resolver isso, em um grande mapa ele marcou a posição dos participantes prováveis da ﬁnal. De posse desses dados o Prof. Poucher deseja escolher a sede mais central possível, computando o centro e o raio da menor circunferência que cobre todas as cidades marcadas no mapa (uma cidade está coberta se estiver no interior ou borda desta circunferência).";Esse problema é composto por várias instâncias. A primeira linha é composta por um inteiro n (2 ≤ n ≤ 100), e indica o número de cidades. As próximas n linhas contêm a descrição do posicionamento das cidades a partir de suas coordenadas x e y no plano. As coordenadas são números reais. Seu programa deve encerrar a execução quando 0 for o valor de n dado na entrada.;Para cada instância, imprima uma linha dizendo Instancia k, onde k é o número da instância atual. Na segunda linha, imprima a coordenada x e a coordenada y do centro e o raio da circunferência. Após cada instância, seu programa deve imprimir uma linha em branco.;False;10 / 10;904;148;16.37%
1456;Brainfuck;Strings;8;"Linguagens de programação, times de futebol e religião não se discute. Cada um tem seus favoritos e não admite que o do outro seja melhor (que me perdoem os corinthianos, palmeirenses e são-paulinos). Um grupo de pesquisadores (que não tinha o que fazer) resolveu escrever uma linguagem de programação ideal'' (ideal prá quem, cara pálida?): o Brainfuck. Brainfuck é uma linguagem de programação cujo funcionamento é muito parecido com uma máquina de Turing. Essa máquina possui como componentes um vetor de 30000 bytes, indexado de 0 a 29999, e um ponteiro, que guarda uma posição desse vetor. Em cada passo, a máquina realiza uma instrução de acordo com o byte armazenado na posição do vetor indicada pelo ponteiro. Quando esse byte é igual a zero, a execução é terminada. O conjunto de instruções válidas da linguagem é o seguinte:

                
                    
                        
                            Instrução
                            Descrição
                        
                    
                    
                        
                            > 
                            Incrementa o ponteiro.
                        
                        
                            < 
                            Decrementa o ponteiro.
                        
                        
                            + 
                            Incrementa o byte na posição indicada pelo ponteiro.
                        
                        
                            - 
                            Decrementa o byte na posição indicada pelo ponteiro.
                        
                        
                            . 
                            Imprime o valor do byte na posição indicada pelo ponteiro.
                        
                        
                            , 
                            Lê um byte e armazena na posição indicada pelo ponteiro. Se não houver nada que possa ser lido (entrada acabou), armazenar zero.
                        
                        
                            [ 
                            Início do loop: Executa o código delimitado até que o byte na posição indicada pelo ponteiro seja igual a zero.
                        
                        
                            ]
                            Fim do loop.
                        
                        
                            # 
                            Imprime os valores das 10 primeiras posições do vetor.
                        
                    
                

                O ponteiro sempre começa com valor 0, assim como todas as posições do vetor. Na descrição de programas na linguagem brainfuck, caracteres diferentes dos descritos acima são ignorados.";A entrada é composta de diversas instâncias. O número de instâncias é dado na primeira linha da entrada. Cada instância começa com uma linha em branco. A próxima linha contém uma cadeia de caracteres não-brancos (ou seja, diferentes de espaço em branco e tabulação), que vai conter a entrada para o programa. Ou seja, os comandos de leitura são realizados nessa cadeia. Toda a entrada para o programa está contida em uma única linha. Por fim, a terceira linha contém a descrição do programa. Assim como a segunda linha, esta também não contém caracteres brancos e está inteiramente contida em uma única linha (a separação feita no segundo exemplo de entrada foi feita para evitar o estouro de linha). Tanto a segunda como a terceira linha têm entre 1 e 100000 caracteres.;"Para cada instância, você deverá imprimir um identificador ""Instancia k"", onde k é o número da instância atual. Na linha seguinte você deve imprimir a saída do código fornecido na entrada. Após cada instância, seu programa deve imprimir uma linha em branco.";False;8 / 10;1328;425;32.00%
1457;Oráculo de Alexandria;Matemática;3;"Todo computólogo que se preza conhece o livro ""O guia do mochileiro das galáxias"" (The Hitchhiker’s Guide to the Galaxy) e sabe qual é a resposta para a pergunta fundamental sobre a vida, o universo e tudo mais. Mas, o que poucos sabem, é que a história de Douglas Adams é baseada em uma lenda egípcia, de um oráculo situado na cidade de Eskendereyya (Alexandria). Alexandria hoje é a maior cidade do Egito, com mais de 4 milhões de habitantes. Fica no delta do Nilo, e extende-se por 32km na costa do Mediterrâneo. Na Antiguidade, a cidade fundada em 331 a.C. por Alexandre, o Grande, foi umas das principais cidades do mundo e lá ficava o Farol de Alexandria (uma das 7 maravilhas do mundo antigo), a Biblioteca de Alexandria (a maior do mundo antigo) além de outras obras fantásticas. A lenda diz também que lá ficava o grande oráculo de Alexandria. Os habitantes da cidade entregavam ao oráculo pequenos bilhetes com números anotados, e recebiam de volta um número, que seria a resposta a uma pergunta fundamental do universo relacionada aos dois números dados.

                No seu tratado de 227 d.C. Cleómenes de Naucratis (que se tornou administrador de Alexandria quando Alexandre partiu para suas conquistas) relata alguns resultados obtidos do oráculo:

                
                    Dados 8 e 1 o oráculo devolvia 40320;
                    Dados 10 e 3, devolvia 280;
                    Dados 4 e 2, devolvia 8;
                    Dados 21 e 19, devolvia 42.
                

                Estudos modernos dão conta que o que o oráculo devolvia nada mais era que uma generalização do fatorial de um número inteiro. Como sabemos,

                N! = N x (N-1) x ... x 1.

                O oráculo devolvia para os dados N e K o K-fatorial de N , ou seja,

                N x (N-K) x (N-2K) x (N-3K) x ...,

                em que o produto era feito enquanto a diferença é maior ou igual a 1. Podemos representar o K-fatorial de um número por ele seguido por K exclamações:

                
                    8! = 40320;
                    10!!! = 280;
                    4!! = 8;
                    21!!!!!!!!!!!!!!!!!!! = 42
                

                Dizem que ao ler sobre a lenda do oráculo de Eskendereyya, Douglas Adams teve sua inspiração para sua obra. Também, no Egito está a inspiração do Restaurante do fim do universo, mas isso é outra história...

                Sua tarefa é dado inteiros N e K determinar K-fatorial de N.";"A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias.

                A primeira (e única) linha de cada instância contém um inteiro N seguido de K pontos de exclamação, onde 1 ≤ N ≤ 100 e 1 ≤ K ≤ 20.";"Para cada instância imprima uma linha contendo o K-fatorial de N.

                É garantido que nenhuma instância na entrada possui resultado maior que 1018.";False;3 / 10;4161;2034;48.88%
1458;Campeonato de SMS;Strings;8;"A Só Birutas Celulares, uma renomada empresa do ramo de telefonia móvel, promove um campeonato de mensagens de texto todos os anos. Neste campeonato, ganha quem digitar uma dada mensagem mais rápido. O aparelho oficial da competicão, de uso obrigatório, tem um teclado muito simples, similar ao celular que você provavelmente teria no bolso se aparelhos eletrônicos não fossem proibidos durante a Maratona de Programacão. O teclado tem o seguinte layout:

                ​

                Como só é permitido o uso dos polegares para pressionar as teclas, todas elas foram feitas quadradas, com 1 centímetro de lado, sem espaço entre duas teclas adjacentes. As teclas de 2 a 9 são usadas para digitar as letras de 'a' a 'z', e funcionam como em qualquer celular: se quisermos obter uma das letras associadas a uma das teclas, precisamos pressioná-la um número de vezes igual à posição da letra desejada. Por exemplo, pressionando a tecla 3 uma vez obtemos 'd'. Se pressionarmos novamente, obteremos 'e' e depois 'f'. Se continuarmos pressionando-a obteremos o número '3' e depois reiniciamos em 'd'. A tecla 0 é utilizada para inserir espaços na mensagem; as teclas 1 e * não são utilizadas nesta competição.

                No caso de termos duas letras consecutivas na mensagem que são formadas pela mesma tecla será necessário fazer uso da tecla #. A função desta tecla é separar as sequências de pressionamentos de duas letras na mesma tecla. Por exemplo, para digitar a palavra ""casa"", a sequência de teclas pressionadas seria a seguinte: 2, 2, 2, #, 2, 7, 7, 7, 7, 2.

                Para tornar as coisas mais interessantes, a organizaçãao decidiu que este ano as mensagens devem ser digitadas em queda livre: os competidores pulam de um avião com o celular em mãos e digitam a mensagem; um sofisticado sistema computadorizado abrirá o paraquedas automaticamente quando a mensagem tiver sido digitada sem erros. Entretanto, essa modificação das regras introduziu uma dificuldade a mais: para evitar que o celular se perca durante a queda, é necessário utilizar um polegar para segurar o aparelho enquanto o outro pressiona uma tecla ou é movido; ou seja, um dos polegares está sempre fixo.

                Para satisfazer a curiosidade da platéia, você foi contratado para fazer um programa de computador que, dada uma mensagem de até 140 caracteres, responde o tempo mínimo necessário para um competidor ideal digitá-la no celular. Suponha que um competidor ideal consegue mover seus polegares à incrível velocidade de 30 centímetros por segundo, leva apenas 2 décimos de segundo para pressionar uma tecla, inicia a queda livre com o polegar esquerdo sobre a tecla 4, o polegar direito sobre a tecla 6 e sempre pressiona as teclas perfeitamente em seus centros.";A entrada contém diversos casos de teste. Cada caso de teste é composto por uma mensagem, que é uma string que contém de 1 a 140 caracteres ('a'-'z' ou ' '), inclusive.  Nenhuma mensagem começa ou termina com espaços e tampouco contém acentos ou dois espaços consecutivos. O final da entrada é indicado por final de arquivo (EOF).;Para cada caso de teste imprima uma linha contendo o tempo, em segundos, que nosso competidor ideal levaria para digitar a mensagem dada. Utilize duas casas decimais para exibir a resposta.;True;8 / 10;648;231;35.65%
1459;Foco;Ad-Hoc;7;"Daniel esta fazendo um curso de Visão Computacional e decidiu reproduzir um trabalho muito interessante visto em aula: ele tirou varias fotos de uma mesma cena, variando apenas o foco, para depois combina-las em uma unica imagem onde todos os objetos da cena estão nítidos simultaneamente. Para tal, ele precisa que cada objeto apareca nítido em ao menos uma foto.

                Daniel sabe que, para cada objeto, existe um intervalo fechado de planos de foco no qual aquele objeto está contido. Por exemplo, na figura abaixo, (i), (ii) e (iii) são três fotos da mesma cena, cada uma tirada com um foco diferente; (iv) é a imagem combinada gerada por Daniel.

                

                Como o cartão de memoria de sua câmera é pequeno, ele pediu sua ajuda para, dados os intervalos de foco de todos os objetos da cena que pretende fotografar, determinar o numero mínimo de fotos que ele deve tirar para que seja possível deixar cada objeto nítido em pelo menos uma foto.";A entrada é composta por diversos casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 106 ) indicando o número de objetos na cena. Cada uma das N linhas seguintes contém dois inteiros A e B (1 ≤ A ≤ B ≤ 109) indicando os extremos do intervalo de foco de cada objeto.;Para cada caso de teste, imprima uma linha contendo um inteiro indicando o menor número de fotos que Daniel deve tirar.;True;7 / 10;1858;794;42.73%
1460;Parreiral;Ad-Hoc;9;"Na Quadradônia, todas as propriedades rurais são quadradas, todas possuem a mesma área, todas são perfeitamente planas e todas possuem os lados alinhados aos eixos Norte-Sul e Leste-Oeste.

                Como as propriedades são planas, as colinas na Quadradônia parecem uma série de degrais gigantes, com tamanhos diferentes. Em uma certa montanha, uma situação interessante ocorre em uma área retangular de N x M propriedades. Começando de qualquer lugar da região, ao ir do Oeste para o Leste, as propriedades possuem alturas não-decrescentes. De forma simular, atravessar a região do Norte para o Sul, começando em qualquer lugar, as propriedades também possuem alturas não-decrescentes.

                Uma grande empresa de vinhos na Quadradônia quer alugar algumas propriedades daquela região para cultivar uvas. A empresa está interessada em uma variedade especial de parreiras que só produzem uvas se cultivadas em propriedades cujas alturas estão em um certo intervalo. Ou seja, a empresa está interessada em alugar propriedades cujas alturas sejam maiores ou iguais a uma dada altura L e menores ou iguais a outra dada altura U. Para facilitar a colheita, as propriedades devem formar uma área contígua. E como todos na Quadradônia gostam de quadrados, a área a ser alugada deve ter a forma de um quadrado.

                A empresa ainda não decidiu qual variedade de uvas irá produzir, e portanto possui uma lista de consultas envolvendo intervalos, um para cada variedade de uva. A figura abaixo mostra uma área de interesse de dimensão 4 x 5 (em número de propriedades) com exemplos de áreas que a empresa poderia alugar para cultivar uvas em alturas dentro dos intervalos dados nas figuras.

                ​

                Você deve escrever um programa que, dadas a descrição da área de interesse na montanha e uma lista de consultas contendo intervalos de alturas, determina, para cada consulta, o maior lado (em número de propriedades) da maior área contígua quadrada com alturas dentro do intervalo em questão.";"A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros N e M, separados por um espaço simples, representando, respectivamente, o número de propriedades na direção Norte-Sul (1 ≤ N ≤ 500) e o número de propriedades na direção Oeste-Leste (1 ≤ M ≤ 500) da região de interesse. Cada uma das próximas N linhas contém M inteiros Hi, j, separados por espaços simples, indicando as alturas das propriedades na região de interesse (0 ≤ Hi,j ≤ 105, com 1 ≤ i ≤ N e 1 ≤ j ≤ M; também, Hi-1, j ≤ Hi, j e Hi, j-1 ≤ Hi, j). A próxima linha contém um inteiro Q indicando o número de consultas (1 ≤ Q ≤ 104). Cada uma das próximas Q linhas descrevem uma consulta e contém dois inteiros L e U, separados por um espaço em branco, indicando um intervalo de alturas (0 ≤ L ≤ U ≤ 105). As alturas das propriedades a serem alugadas devem ser maiores ou iguais a L e menores ou iguais a U.

                O último caso de teste é seguido de uma linha contendo dois zeros separados por um espaço simples.";"Para cada caso de teste da entrada, seu programa deve imprimir Q+1 linhas. Cada uma das primeiras Q linhas deve conter um único inteiro, indicando o maior tamanho, em número de propriedades, de uma área quadrada contígua com alturas dentro do intervalo especificado na respectiva consulta. A última linha a ser impressa para cada caso de teste é usada como separadora e deve conter um único caractere '-' (conhecido como hífen ou ""sinal de menos"").";True;9 / 10;521;155;29.75%
1461;Caminhos Simétricos Ótimos;Grafos;8;"Você tem uma grade de n linhas e n colunas. Cada quadrado da grade contém um dígito, diferente de zero. Você deve ir do quadrado mais acima e mais à esquerda para o quadrado mais abaixo e mais à direita da grade. A cada passo, você pode se mover para o quadrado adjacente que está à esquerda, à direita, acima ou abaixo (você não pode se mover pelas diagonais). Além disso, você não pode passar por um quadrado mais de uma vez. Há ainda uma outra regra: seu caminho deve ser simétrico em relação à linha que conecta o quadrado mais abaixo e mais à esquerda ao quadrado mais acima e mais à direita da grade. A figura abaixo exemplifica um caminho simétrico em uma grade 6 x 6.

                

                Sua tarefa é descobrir, dentre todos os caminhos válidos, quantos deles têm a soma mínima de dígitos nos quadrados percorridos.";"Haverá no máximo 25 casos de teste. Cada caso de teste começa com um inteiro n (2 ≤ n ≤ 100). As próximas n linhas contém n dígitos cada, diferentes de zero (isto é, um número em 1, 2, 3, ..., 9). Esses n2 inteiros são os dígitos na grade.

                A entrada termina com um caso de teste onde n = 0, que não deve ser processado.";Para cada caso de teste, imprima o número de caminhos simétricos ótimos. Imprima o resto da divisão do resultado por 1.000.000.009 .;True;8 / 10;96;38;39.58%
1462;Popularidade no Facebook;Grafos;10;"Hoje em dia todos estão conectados, participam do Facebook, publicam suas fotos no Instagram, seus vídeos no Youtube, e assim por diante. Até mesmo sistemas como GPS hoje se baseiam em redes sociais, tornando tudo mais divertido (e talvez mais difícil de entender, mas isso é outra conversa). Ser popular no Facebook é quase uma necessidade. Uma pessoa com menos de 700, 800 amigos pode ser considerado quase como um pária nessa nova realidade.

Talvez por isso algumas pessoas costumam exagerar quando dizem o número de amigos que possuem. Considere uma comunidade com N pessoas, e para cada uma delas, considere que sabemos o número de amigos que cada pessoa diz ter na comunidade. Sua tarefa neste problema é determinar se de fato é possível que todos os membros da comunidade estejam falando a verdade. Lembre que uma pessoa não pode ser amiga de si mesma, e duas pessoas não podem ser amigas várias vezes.";A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém um inteiro N (1 ≤ N ≤ 105). A segunda linha possui N inteiros, ai (0 ≤ ai ≤ 105), separados por um espaço em branco, correspondendo ao número de amigos que a pessoa i diz ter na comunidade.;Para cada instância imprima, em uma única linha, possivel se é possível que todos os membros da comunidade estejam falando a verdade, ou impossivel caso contrário.;False;10 / 10;1528;323;21.14%
1463;Árvore Binária de Expressão;Grafos;7;"A árvore binária de expressão aritmética é uma aplicação específica de uma árvore binária para avaliar expressões. Ela pode ser usado para representar uma expressão algébrica ou booleana, como por exemplo, a expressão 4 * a - ( 6 + b ) + 8 / ( 9 - 7 )  que é apresentada na figura abaixo.

                

                Essas árvores podem representar expressões que contêm operadores unários e binários. As ávores de expressão são implementadas como árvores binárias, principalmente porque permitem ao usuário encontrar rapidamente o que está procurando.

                O limite superior de passos necessários para encontrar a informação requerida em árvores binárias igual a log2N, em que N indica o número de todos os nós de uma árvore.

                A fim de fazer um exercício diferente, o professor pediu para listar uma expressão armazenada em uma árvore binária, nível a nível, iniciando no primeiro nível (zero) e terminando no nível n.";A entrada contém vários casos de teste. Cada caso de teste consiste de uma expressão aritmética contendo no mínimo dois operandos e uma operação simples e no máximo até 100 elementos. Esta expressão poderá conter letras maiúsculas, letras minúsculas, números, parênteses e operações aritméticas básicas (+, -, *, /) conforme o exemplo abaixo. Cada operando pode ter apenas um dígito ('0 '- '9') ou letra ('a', 'B', etc). O final da entrada é indicado pelo fim de arquivo (EOF). O final da entrada é indicado por final de arquivo (EOF).;"Para cada caso de teste, seu programa deverá imprimir várias linhas de saída correspondentes aos níveis da árvore de expressão e contendo todos os elementos presentes em cada um destes níveis, da esquerda para a direita. Estas linhas devem iniciar sempre com a mensagem ""Nivel n: "", conforme o exemplo fornecido abaixo. Imprima uma linha em branco entre dois casos de teste.";True;7 / 10;605;147;24.30%
1464;Camadas de Cebola;Geometria Computacional;8;"Dr. Kabal, um reconhecido biólogo, recentemente descobriu um líquido que é capaz de curar as mais avançadas doenças. O líquido é extraído de uma cebola muito rara que pode ser encontrada em um país chamado Cebolândia. Mas nem todas cebolas de Cebolândia são apropriadas para se levar ao laboratório para processamento. Somente cebolas com um numero ímpar de camadas contém o líquido milagroso. Isto é uma descoberta ímpar!

                

                Figura 1: Cebola de Cebolândia

                Dr. Kabal contratou muitos assistentes de pesquisa para coletar e analisar cebolas para ele. Como ele não quer compartilhar sua descoberta com o mundo ainda, ele não disse para os assistentes procurarem por cebolas com um numero ímpar de camadas. Ao invés disso, a cada assistente foi dada a tarefa de coletar cebolas, e selecionar pontos de cada uma das beiradas da camada mais externa, isso dá uma aproximação da estrutura de camadas da cebola que pode ser reconstruída depois. Dr. Kabal disse aos assistentes que o próximo passo seria a ""análise complicada"" desses pontos. De fato, tudo que eles farão é usar os pontos para contar o número de camadas em cada uma das cebolas, e selecionar aquelas com um número ímpar de camadas.

                

                Figura 2: Pontos coletados por um assistente

                É claro que a aproximação obtida por Dr. Kabal, dos pontos coletados, pode ter uma aparência diferente da cebola original. Por exemplo, somente alguns pontos da cebola mostrada na figura 1 podem ser extraídos no processo, dando origem a um conjunto de pontos como mostrado na figura 2. Com estes pontos Dr. Kabal tentará aproximar as camadas originais da cebola, obtendo algo como mostrado na figura 3. O procedimento de aproximação seguido pelo Dr. Kabal (cujo resultado é mostrado na figura 3) é simplesmente recursivamente encontrar polígonos convexos aninhados tais que no fim todo ponto pertencerá a um dos polígonos. Os assistentes foram informados para selecionar pontos de tal forma que o número de camadas na aproximação, se feita desta forma recursiva, seja o mesmo que na cebola original, o que é bom para o Dr. Kabal. Os assistentes também estão cientes de que eles precisam de pelo menos três pontos para aproximar uma camada, mesmo as internas.

                ​

                Figura 3: Aproximação do Dr. Kabal

                Sua tarefa é escrever um programa que, dado o conjunto de pontos coletado pelo assistente (como mostrado na figura 2), determine se a respectiva cebola pode ser levada para o laboratório.";A entrada contém vários casos de teste. Cada caso de teste consiste de um inteiro 3 ≤ N ≤ 2000 em uma linha simples, indicando o número de pontos coletados pelo assistente. A seguir, haverão N linhas, cada uma contendo dois inteiros -2000 ≤ X, Y ≤ 2000 correspondendo às coordenadas de cada ponto. A entrada terminará com N = 0, que não deve ser processado.;"Deverá haver uma linha de saída para cada caso de teste na entrada. Para cada caso de teste imprima a string

                Take this onion to the lab!

                se a cebola deve ser levada para o laboratório ou

                Do not take this onion to the lab!

                se a cebola não deve ser levada para o laboratório.";True;8 / 10;2427;575;23.69%
1465;Complexo, Difícil e Complicado;Matemática;5;"Números complexos não são apenas complexos, mas também complicados. Então é melhor tentar resolver outro problema...

                Nós temos um números complexo, a+b*i, onde i é a raiz quadrada de -1. Nós queremos torná-lo simples (isto é, real), elevando-o a uma potência natural. Por exemplo, o número complexo 2+2*i, pode ser simplificado elevando-o a 4:

                (2+2*i)4 = -64

                Você tem que computar o menor número natural, N, (zero não está incluso) tal que (a+b*i)N é um número real. Além disso, pedimos que o valor absoluto de (a+b*i)N não seja maior que 230.";"A primeira linha da entrada contém um inteiro M, indicando o número de casos de teste.

                Para cada caso de teste, há uma linha com dois inteiros A e B. A é a parte real do número complexo, e B a parte imaginária.

                Você pode assumir que -10000 ≤ A ≤ 10000, e -10000 ≤ B ≤ 10000.";"Para cada caso de teste, a saída deve consistir de um único número natural N em uma linha, indicando a potência tal que (A+B*i)N é real e seu valor absoluto não é maior que 230. Se não houver solução imprima ""TOO COMPLICATED"".";False;5 / 10;293;146;49.83%
1466;Percurso em Árvore por Nível;Grafos;6;"Em uma árvore binária, o percurso por nível é um percurso denominado breadth first search (BFS) ou em português, busca em largura, a qual seria não-recursiva por natureza. Este percurso utiliza uma fila ao invés de pilha para armazenar os próximos 2 nodos que devem ser pesquisados (filho à esquerda e à direita). Esta é a razão pela qual você deve percorrer os nodos na ordem FIFO ao invés da ordem LIFO, obtendo desta forma a recursão.
	 Portanto nossa tarefa aqui, após algumas operações de inserção sobre uma árvore binária de busca (pesquisa), é imprimir o percurso por nível sobre estes nodos. Por exemplo, uma entrada com a sequência de valores inteiros: 8 3 10 14 6 4 13 7 1 resultará na seguinte árvore:
	
	
	
	Com a saída de uma listagem por nível: 8 3 10 1 6 14 4 7 13.";"A entrada contém vários casos de teste. A primeira linha da entrada contém um inteiro C (C ≤ 1000), indicando o número de casos de teste 
	que virão a seguir. Cada caso de teste é composto por 2 linhas. A primeira linha contém um inteiro N (1 ≤ N ≤ 500) que 
	indica a quantidade de 	números que deve compor cada árvore e a segunda linha contém N inteiros distintos e não negativos, 
	separados por um espaço em branco.";"Para cada caso de teste de entrada você deverá imprimir a mensagem ""Case n:"", onde n indica o número do caso de teste seguido por uma linha contendo a listagem por nível dos nodos da árvore, conforme o exemplo abaixo.
    Obs: Não deve haver espaço em branco após o último item de cada linha e há uma linha em branco após cada caso de teste, inclusive após o último. A árvore resultante não terá nodos repetidos e também não terá mais do que 500 níveis.";True;6 / 10;3172;1227;38.68%
1467;Zerinho ou Um;Ad-Hoc;1;"Todos devem conhecer o jogo Zerinho ou Um (em algumas regiões também conhecido como Dois ou Um), utilizado para determinar um ganhador entre três ou mais jogadores. Para quem não conhece, o jogo funciona da seguinte maneira. Cada jogador escolhe um valor entre zero ou um; a um comando (geralmente um dos competidores anuncia em voz alta “Zerinho ou... Um!”), todos os participantes mostram o valor escolhido, utilizando uma das mãos: se o valor escolhido foi um, o competidor mostra o dedo indicador estendido; se o valor escolhido foi zero, mostra a mão com todos os dedos fechados. O ganhador é aquele que tiver escolhido um valor diferente de todos os outros; se não há um jogador com valor diferente de todos os outros (por exemplo todos os jogadores escolhem zero, ou um grupo de jogadores escolhe zero e outro grupo escolhe um), não há ganhador. Alice, Beto e Clara são grandes amigos e jogam Zerinho a toda hora: para determinar quem vai comprar a pipoca durante a sessão de cinema, quem vai entrar na piscina primeiro, etc. Jogam tanto que resolveram fazer um plugin no Facebook para jogar Zerinho. Como não sabem programar, dividiram as tarefas entre amigos que sabem, inclusive você. Dados os três valores escolhidos por Alice, Beto e Clara, cada valor zero ou um, escreva um programa que determina se há um ganhador, e nesse caso determina quem é o ganhador.";A entrada é composta por vários casos de teste. Cada caso de teste consiste de uma única linha, que contém três inteiros A, B e C (A,B,C só podem ser 0 ou 1), indicando respectivamente os valores escolhidos por Alice, Beto e Clara. O final da entrada é determinado por EOF (End of File).;Para cada caso de teste, seu programa deve produzir uma única linha, contendo um único caractere. Se o vencedor é Alice o caractere deve ser ‘A’, se o vencedor é Beto o caractere deve ser ‘B’, se o vencedor é Clara o caractere deve ser ‘C’ e se não há vencedor o caractere deve ser ‘*’ (asterisco).;False;1 / 10;13834;7903;57.13%
1468;Balão;Geometria Computacional;10;"Uma das principais dificuldades de organizar uma Maratona de Programação é recolher os bal˜oes que escapam e ficam presos no teto do salão: muitas vezes o contrato com o dono do salão exige que este seja entregue limpo logo após o evento, sob pena de multa.

Este ano a organização da Maratona está mais previdente: ela tem o desenho do teto do salão, e quer sua ajuda para determinar o que pode acontecer com um balão, dependendo da posição no solo onde ele é solto (isto é, se é bloqueado pelo teto ou se escapa para o exterior do salão).

O teto do salão é formado por vários planos que, vistos de lado, podem ser descritos por segmentos de reta, como mostrado na figura abaixo:



O balão pode ser considerado pontual. Quando um balão toca um segmento do teto que é horizontal, ele fica preso. Quando um balão toca um segmento que é inclinado, o balão desliza até o ponto mais alto do segmento e escapa, podendo escapar completamente do salão ou podendo tocar em mais segmentos. Não há pontos em comum entre os segmentos que formam o teto.

Por exemplo, se o balão for solto nas posições marcadas como a ou b, será bloqueado na posição de coordenadas (2, 5); se o balão for solto na posição marcada como c, será bloqueado na posição de coordenadas (6, 5); e se o balão for solto na posição marcada como d, não será bloqueado e escapará para fora do salão na posição de coordenada x = 7.

Escreva um programa que, dada a descrição do teto do salão como segmentos de reta, responde a uma série de consultas sobre a posição final de bal˜oes soltos do piso do salão.";"A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros N (1 ≤ N ≤ 105) e C (1 ≤ C ≤ 105) indicando, respectivamente, o número de segmentos de reta do teto e o n´umero de consultas. Cada uma das N linhas seguintes contém quatro inteiros X1, Y1, X2, Y2, (0 ≤ X1,X2 ≤ 106, 0 < Y1, Y2 ≤ 106, X1 <> X2) descrevendo um segmento de reta do perfil do teto, com extremos de coordenadas (X1, Y1) e (X2, Y2). Obs.: não há dois valores de coordenadas X iguais, considerando todos os segmentos.

Cada uma das C linhas seguintes descreve uma consulta e contém um inteiro X (0 ≤ X ≤ 106) , indicando que a consulta quer determinar o que acontece com um balão solto no ponto de coordenada (X, 0).";Para cada consulta da entrada, seu programa deve imprimir uma única linha. Se o balão escapar do salão, a linha deve conter um único inteiro X, indicando a coordenada x pela qual o balão escapa do salão. Caso contrário, a linha deve conter dois inteiros X e Y indicando a posição (x, y) em que o balão fica retido no teto.;True;10 / 10;624;124;19.87%
1469;Chefe;Grafos;7;"Todos conhecem Iks, a última moda em redes sociais, que fez tanto sucesso que competidores como Facebook e Google+ estão começando a ter dificuldades financeiras. Assim como muitas companhias “.com”, Iks surgiu em uma pequena garagem, mas hoje emprega milhares de pessoas no mundo todo. O sistema de gerência utilizado em Iks é bem diferente do padrão. Por exemplo, não há diretorias ou superintendências. No entanto, como é usual em outras companhias, há uma cadeia (ou melhor, várias cadeias) de comando: uma pessoa pode gerenciar outras pessoas, e pode ser gerenciada por outras pessoas. As figuras abaixo mostra a cadeia de comando para alguns empregados, junto com suas idades.



Uma pessoa P1 pode gerenciar outra pessoa P2 diretamente (quando P1 é o superior imediato de P2) ou indiretamente (quando P1 gerencia diretamente uma pessoa P3 que gerencia P2 direta ou indiretamente). Por exemplo, na figura (a) acima, Alice gerencia David diretamente e Clara indiretamente. Uma pessoa não gerencia a si própria, nem direta nem indiretamente. Um folclore que apareceu em Wall Street é que Iks é tão bem sucedido porque em sua rede de comando um(a) gerente é sempre mais jovem do que as pessoas que ele(a) gerencia. Como podemos ver na figura acima, isso não é verdade. Mas esse folclore incentivou Iks a desenvolver uma ferramenta para analisar o seu sistema de gerenciamento, e estudar se tem alguma influência no sucesso da empresa. Você foi contratado para trabalhar nessa ferramenta. Dadas a descrição da cadeia de comando na Iks e as idades de seus empregados, escreva um programa que execute uma série de instruções. Instruções podem ser de dois tipos: trocas de gerência e perguntas. Uma instrução de troca de gerência faz dois empregados A e B trocarem suas posições na cadeia de comando. Como exemplo, a figura (b) acima mostra a cadeia de comando resultante quando David e George trocam suas respectivas posições na cadeia de comando. Uma instrução de pergunta identifica um empregado A e deseja saber a idade do mais jovem gerente (direto ou indireto) de A na cadeia de comando. Por exemplo, no cenário da figura (a) acima a idade do(a) gerente mais jovem de Clara é 18 anos; já no cenário da figura (b), a idade do(a) gerente mais jovem de Clara é 21 anos.";"A entrada contém vários casos de teste. Cada caso de teste é composto de várias linhas. A primeira linha contém três inteiros N (1 ≤ N ≤ 500), M(0 ≤ M ≤ 60 × 103) e I(1 ≤ I ≤ 500), indicando respectivamente o número de empregados, o número de relações de gerência direta e o número de instruçõoes. Empregados são identificados por números de 1 a N. A segunda linha contém N inteiros Ki(1 ≤ Ki ≤ 100, para 1 ≤ i ≤ N), onde Ki indica a idade do empregado de número i.

Cada uma das M linhas seguintes contém dois inteiros X e Y(1 ≤ X, Y ≤ N, X != Y) , indicando que X gerencia Y diretamente. Seguem-se I linhas, cada uma descrevendo uma instrução. Uma instruçãao de troca de gerência é descrita em uma linha contendo o identificador T seguido de dois inteiros A e B(1 ≤ A,B ≤ N), indicando os dois empregados que devem trocar seus lugares na cadeia de comando. Uma instrução de pergunta é descrita em uma linha contendo o identificador P seguido de um inteiro E(1 ≤ E ≤ N), indicando um empregado. A última instrução será sempre do tipo pergunta. 
O final da entrada é determinado por EOF (fim de arquivo).";Para cada instrução de pergunta seu programa deve imprimir uma linha contendo um único inteiro, a idade da pessoa mais jovem que gerencia (direta ou indiretamente) o empregado nomeado na pergunta. Se o empregado nomeado não possui um gerente, imprima o caractere ‘*’ (asterisco).;True;7 / 10;3021;1069;35.39%
1470;Máquina Dobradora;Ad-Hoc;4;"Uma das principais ferramentas de uma Máquina de Turing, que possibilita que seu poder de computação seja maior do que de outros modelos mais simples, é uma fita infinita, dividida em células, onde informações de um alfabeto ficam armazenadas.

Uma Máquina Dobradora é uma máquina inspirada na Máquina de Turing, onde a fita é finita, os dados armazenados são números inteiros e, ao invés do mecanismo de funcionamento tradicional de Turing, a máquina utiliza operações de dobras da fita para fazer computações.

Para efetuar uma dobra, a máquina escolhe uma posição entre células adjacentes e, ao realizar a dobra, ela soma os valores das células que se sobrepuseram, como pode ser visto na figura abaixo.



Observe também que a dobra pode ser feita em uma posição anterior ao centro da fita, como ilustrado a seguir. Note também que, com isso, podem ser feitas dobras também no início e no final da fita, invertendo a ordem desta.



A empresa Science of Bends Company vem desenvolvendo versões comerciais da Máquina Dobradora e a produção tem aumentado recentemente. Infelizmente o último lote de Máquinas Dobradoras produzidas está com problemas e algumas máquinas não estão funcionando corretamente. Assim, testes são necessários para evitar a venda de produtos com defeito, o que poderia denegrir a imagem da empresa.

Para testar as máquinas, um conjunto de testes é dado e, para cada fita, a máquina devolve o resultado da computação. Assim os engenheiros responsáveis pelos testes tomam nota do resultado e podem verificar se este está correto. Mas os engenheiros esqueceram-se de tomar nota de qual computa ção foi feita em cada conjunto de teste. Para evitar a necessidade de testar todas as máquinas novamente, os engenheiros estariam satisfeitos em descobrir se pelo menos existe uma sequência de dobras coerente para um par de fitas de entrada e saída. Para isso, eles contrataram você para desenvolver um programa que verifique, para cada fita de entrada, se existe uma sequência de dobraduras que leve a uma fita de saída.";"A entrada contém vários casos de teste. Cada caso de teste é composto por 4 linhas. As primeiras duas linhas referem-se à entrada fornecida à Máquina Dobradora e as duas seguintes referem-se à saída fornecida pela Máquina. A primeira linha da entrada contém um único inteiro N (M ≤ N ≤ 15), descrevendo o tamanho da fita de entrada. A linha seguinte conterá N inteiros v1, . . . , vN, correspondentes ao conteúdo da fita de entrada. A terceira linha contém um inteiro M (1 ≤ M ≤ N), o tamanho da fita de saída e a última linha conterá inteiros w1, . . . ,wM, correspondentes ao conteúdo da fita de saída. O final da entrada é indicado por EOF (fim de arquivo).

Nota: 0 ≤ vi, wj ≤ 108 para 1 ≤ i ≤ N e 1 ≤ j ≤ M.";A saída de cada caso de teste conterá uma única linha contendo a letra “S” caso exista uma sequência de dobraduras que transforme a fita de entrada na fita de saída e “N” em caso contrário.;True;4 / 10;442;279;63.12%
1471;Mergulho;Ad-Hoc;4;"O recente terremoto em Nlogônia não chegou a afetar muito as edificações da capital, principal epicentro do abalo. Mas os cientistas detectaram que o principal dique de contenção teve um dano significativo na sua parte subterrânea que, se não for consertado rapidamente, pode causar o seu desmoronamento, com a consequente inundação de toda a capital.


O conserto deve ser feito por mergulhadores, a uma grande profundidade, em condições extremamente difíceis e perigosas. Mas como é a sobrevivência da própria cidade que está em jogo, seus moradores acudiram em grande número como voluntários para essa perigosa missão.


Como é tradicional em missões perigosas, cada mergulhador recebeu no início do mergulho uma pequena placa com um número de identificação. Ao terminar o mergulho, os voluntários devolviam a placa de identificação, colocando-a em um repositório.


O dique voltou a ser seguro, mas aparentemente alguns voluntários não voltaram do mergulho. Você foi contratado para a penosa tarefa de, dadas as placas colocadas no repositório, determinar quais voluntários perderam a vida salvando a cidade.";A entrada contém vários casos de teste e termina com EOF. Cada caso de teste é composto de duas linhas. A primeira linha contém dois inteiros N e R ( 1 ≤ R ≤ N ≤ 104), indicando respectivamente o número de voluntários que mergulhou e o número de voluntários que retornou do mergulho. Os voluntários são identificados por números de 1 a N. A segunda linha da entrada contém R inteiros, indicando os voluntários que retornaram do mergulho (ao menos um voluntário retorna do mergulho).;Seu programa deve produzir uma única linha para cada caso de teste, contendo os identificadores dos voluntários que não retornaram do mergulho, na ordem crescente de suas identificações. Deixe um espaço em branco após cada identificador (note que isto significa que deve haver um espaço em branco também após o último identificador). Se todos os voluntários retornaram do mergulho, imprima apenas o caractere ‘*’ (asterisco).;False;4 / 10;9233;3462;37.50%
1472;Triângulos;Ad-Hoc;6;"São dados N pontos em uma circunferência. Você deve escrever um programa que determine quantos triângulos equiláteros distintos podem ser construídos usando esses pontos como vértices.

                    A figura abaixo ilustra um exemplo; (a) mostra um conjunto de pontos, determinados pelos comprimentos dos arcos de circunferência que têm pontos adjacentes como extremos, e (b) mostra os dois triângulos que podem ser construídos com esses pontos.";"A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém um número inteiro N ( 3 ≤ N ≤ 105), o número de pontos dados. A segunda linha contém N inteiros Xi (1 ≤ Xi ≤ 103) para 1 ≤ i ≤ N, representando os comprimentos dos arcos entre dois pontos consecutivos na circunferˆencia: para 1 ≤ i ≤ (N − 1), Xi representa o comprimento do arco entre os pontos i e i + 1; XN representa o comprimento do arco entre os pontos N e 1. O final da entrada é determinado por EOF (fim de arquivo).";Seu programa deve produzir uma única linha para cada caso de teste, contendo um único inteiro, o número de triângulos equiláteros distintos que podem ser construídos utilizando os pontos dados como vértices.;True;6 / 10;4803;1329;27.67%
1473;Linhas de Contêiners;Paradigmas;7;"Um carregamento de Nlogs, principal produto de exportaçãao de Nlogônia, está no porto, em contêineres, pronto para ser embarcado. Todos os contêineres têm as mesmas dimensões e são cubos. Os contêineres estão organizados no pátio do porto em L linhas e C colunas, num total de LC contêineres. Cada contêiner está marcado com um número de identificação distinto, de 1 a LC.

                
                    Cada uma das L Linhas de Contêiners será embarcada em um navio distinto. Para facilitar o desembarque nos divesos países em que serão entregues, os containeres de uma linha devem estar organizados de forma que os números de identificação estejam ordenados. Mais precisamente, a linha 1 foi organizada no pátio de forma a conter os contêineres identificados de 1 a C ordenados crescentemente, a linha 2 de forma a conter os contêineres de C + 1 a 2C (ordenados crescentemente), e assim por diante, até a linha L, organizada de forma a conter os contêineres de (L − 1)C + 1 a LC (ordenados crescentemente). A figura (a) abaixo mostra a organização de um carregamento com 5 linhas e 4 colunas de contêineres.

                

                O guindaste de embarque é capaz de movimentar ou uma linha completa ou uma coluna completa de contêineres, não sendo capaz de movimentar outros tipos de agrupamentos ou contêineres individuais.

                Na noite anterior ao embarque, um grupo de estivadores operou os guindastes para trocar linhas e colunas do carregamento, como forma de protestar quanto aos baixos salários. A figura (b) acima mostra a configuração dos contêineres após a troca das linhas 1 e 4; a figura (c)mostra a configuração após mais uma troca, entre as colunas 2 e 3.

                O carregamento precisa ser embarcado ainda hoje, mas antes disso é necessário que os contêineres sejam reorganizados da forma descrita. Você deve escrever um programa que, dada a informação sobre a posição de cada contêiner após o protesto, determine se é possível recolocar os contêineres na forma originalmente prevista utilizando apenas os guindastes, e nesse caso calcular o menor número de trocas de linhas e colunas necessário para esse fim.";A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros L e N (1 ≤ L, N ≤ 300) indicando respectivamente o número de linhas e o número de colunas do carregamento. As L linhas seguintes descrevem a posição dos contêineres depois do protesto dos estivadores. Cada uma dessas L linhas contém C números inteiros Xl,c (1 ≤ Xl,c ≤ LC) indicando a posição de um contêiner. Cada número inteiro entre 1 e LC aparece na entrada, em alguma das L linhas. É garantido que cada número na configuração apareça uma única vez cada e que todos os números entre 1 e LC aparecerão na mesma. O final da entrada é determinado por EOF (fim de arquivo).;Seu programa deve produzir uma única linha para cada caso de teste, contendo um único inteiro, o número mínimo de trocas de linhas e colunas que devem ser realizadas pelo guindaste para recolocar os contêineres na posição original. Se não for possível colocar os contêineres na posção original, utilizando apenas trocas de linhas e colunas, imprima o caractere ‘*’.;True;7 / 10;887;307;34.61%
1474;Ônibus;Paradigmas;7;Competições de programação normalmente exigem infraestrutura e organização por parte dos responsáveis. Um problema que frequentemente deve ser resolvido é em relação ao transporte. Ao participar de uma competição recente, Ricardinho ficou observando os ônibus e micro-ônibus utilizados no transporte dos competidores, todos enfileirados um atrás do outro enquanto os competidores desembarcavam. Os veículos eram todos de uma mesma empresa, embora tivessem pinturas distintas. Ricardinho começou a se perguntar de quantas maneiras aquela fila poderia ser formada, usando ônibus e micro-ônibus daquela empresa. Cada ônibus tem 10 metros de comprimento. Já os micro-ônibus possuem 5 metros de comprimento. A partir de um dado comprimento total a ser alcançado com ônibus e micro-ônibus enfileirados, e das quantidades de cores diferentes para ônibus e micro-ônibus, Ricardinho quer saber de quantas formas uma fila pode ser formada.;A entrada contém vários casos de teste. Cada caso de teste é composto por apenas uma linha, contendo três inteiros N(5 ≤ N ≤ 1015 e N é múltiplo de 5), K(1 ≤ K ≤ 1015) and L(1 ≤ L ≤ 1015), separados por espaço. O inteiro N representa o comprimento total, em metros, da fila que Ricardinho está considerando. K e L representam o número de cores distintas disponíveis para micro-ônibus e ônibus, respectivamente. Note que, como os inteiros N,K e L podem ser muito grandes, recomenda-se o uso de inteiros de 64 bits. O final da entrada é determinado por EOF.;Como o número de formas diferentes de se formar a fila pode ser muito grande, Ricardinho está interessado nos últimos 6 dígitos da quantidade. Assim, para cada caso de teste, seu programa deve produzir uma única linha contendo exatamente 6 dígitos, correspondentes aos últimos dígitos da solução.;False;7 / 10;1113;363;32.61%
1475;Remendo;Paradigmas;5;"Carlão é muito preocupado com o meio ambiente. Sempre que possível, ele tenta utilizar meios de transporte menos poluentes. Recentemente ele conseguiu um emprego próximo de casa e agora está utilizando sua bicicleta para ir ao trabalho.

Infelizmente, no caminho entre sua casa e seu emprego, há uma fábrica de pregos, que frequentemente deixa alguns pregos caírem de seus caminhões que acabam furando os pneus de da bicicleta de Carlão. Por isso, ele acaba tendo que fazer diversos remendos nos pneus de sua bicicleta.

Para fazer os consertos, Carlão usa dois tipos diferentes de remendos. Ambos os tipos têm a largura do pneu da bicicleta, mas diferem no comprimento. Como o valor do remendo é proporcional ao seu comprimento, Carlão está tentando encontrar uma maneira de economizar, gastando o menor comprimento total possível de remendos para fazer os consertos, mas sem precisar cortá-los.

O primeiro passo para efetuar o conserto é fazer uma marca com giz em uma posição do pneu e depois anotar as distâncias, medidas no sentido horário, de cada um dos furos em relação à marca de giz. Todos os furos devem ser cobertos por um remendo. Carlão gostaria de sua ajuda para determinar, a partir das posi¸cões dos furos, a forma mais econômica de efetuar o conserto.";"A entrada contém vários casos de teste. Cada caso de teste consiste de duas linhas. A primeira linha contém quatro inteiros N (1 ≤ N ≤ 1000), C (1 ≤ C ≤ 106), (1 ≤ T1) e T2 (T2 ≤ C). O inteiro N corresponde ao número de furos no pneu e C corresponde ao comprimento da circunferência do pneu, em centímetros. Os comprimentos dos remendos, em centímetros, são dados pelos inteiros T1 e T2. A segunda linha da entrada contém N inteiros Fi (0 ≤ Fi ≤ C-1), um para cada furo, descrevendo a distância no sentido horário da marca de giz até o furo i (1 ≤ i ≤ N), em centímetros. O Final da entrada é determinado por EOF (fim de arquivo).

Obs: Se a distância entre dois furos é exatamente k centímetros, um remendo de comprimento k centímetros é suficiente para cobrir ambos os furos.";Para cada caso de teste, seu programa deve imprimir uma única linha contendo um inteiro indicando o menor comprimento total de remendos que é suficiente para consertar todos os furos do pneu.;False;5 / 10;811;371;45.75%
1476;Caminhão;Grafos;9;"A Sociedade de Bal˜oes Coloridos (SBC) é a principal fornecedora de balões para competições de programação; ela dispõe de grandes fábricas e depósitos, além de uma extensa frota de caminhões para garantir a alegria dos competidores. Há várias sedes regionais na Nlogônia, todas as quais contrataram a SBC para o fornecimento de balões para a prova. A Nlogônia é um arquipélago ligado por várias pontes. Cada ilha do arquipélago pode conter várias sedes regionais e vários depósitos da SBC. Ao planejar as rotas, a SBC se deparou com um problema: por razões de segurança, cada ponte da Nlogônia tem um limite máximo de peso permitido para os veículos que trafegam sobre ela. Devido ao grande número de pontes na Nlogônia, e ao elevado peso da mercadoria transportada, o diretor de operações da SBC pediu que você escrevesse um programa que determina o maior peso bruto que pode ser transportado entre os depósitos e os locais de prova.";"A entrada contém vários casos de teste. A primeira linha de um caso de teste contém três inteiros N(2 ≤ N ≤ 2 x 104), M(1 ≤ M ≤ 105) e S(1 ≤ S ≤ 5 × 104), indicando, respectivamente, o número de ilhas da Nlogônia, o número de pontes que ligam as ilhas e o número de sedes. As ilhas nlogonianas são numeradas de 1 a N. Cada uma das M linhas seguintes descreve uma ponte. A descrição de cada ponte consiste de uma linha contendo três inteiros A, B(1 ≤ A,B ≤ N, A != B) e P(0 ≤ P ≤ 105), indicando as duas ilhas ligadas por aquela ponte e o peso máximo permitido naquela ponte, em toneladas. Todas as pontes são de mão dupla; cada par de ilhas é ligado por no máximo uma ponte; é possível ir de qualquer ilha para qualquer outra ilha utilizando apenas as pontes do arquipélago (mas pode ser preciso passar por outras ilhas primeiro). Cada uma das S linhas seguintes descreve uma sede.  A descrição de cada sede consiste de uma linha contendo dois inteiros A e B, indicando, respectivamente, a ilha onde está a sede e a ilha onde está o depósito que irá fornecer os balões àquela sede. O final da entrada é determinado por EOF (fim de arquivo).";Para cada sede, na ordem em que elas foram descritas na entrada, seu programa deve imprimir uma linha contendo um único inteiro, indicando o maior peso bruto, em toneladas, que pode ser transportado por caminhão do depósito que irá fornecer os balões até ela.;False;9 / 10;1540;480;31.17%
1477;Homem, Elefante e Rato;Estruturas e Bibliotecas;7;"Um jogo muito popular na Nlogônia é o Homem, Elefante e Rato. Ele é tipicamente jogado com apenas dois jogadores, e funciona da seguinte forma: cada jogador secretamente escolhe um dos três símbolos e, após uma contagem regressiva, ambos revelam simultaneamente o símbolo escolhido através de sinais manuais, estendendo à sua frente uma das mãos sinalizando sua escolha.

O Homem é representado pela mão fechada, como a cabeça de um homem. O Elefante é representado pela mão aberta, exibindo os cinco dedos, como a pata do elefante nlogonense. Por fim, o Rato é representado pela mão fechada, com o dedo indicador e o dedo médio esticados, como as orelhas do pequeno animal.

​

Figura 1: Os três símbolos do jogo Homem, Elefante e Rato.

Para determinar o vencedor é muito simples: o Homem sempre perde para o Elefante (pois é esmagado debaixo de sua pata), o Elefante sempre perde para o Rato (pois tem medo dele e foge correndo) e o Rato sempre perde para o Homem (que espalha ratoeiras para capturá-lo). Se dois jogadores utilizarem o mesmo símbolo, ocorre um empate e joga-se novamente.

Os habitantes da Nlogônia, que são estrategistas natos de Homem, Elefante e Rato, utilizam a seguinte técnica no campeonato nacional, realizado todos os anos: começam sempre jogando Homem até o momento em que este símbolo causa empates com a maioria dos oponentes. Eles então trocam sua estratégia para o símbolo que ganha daquele que usavam anteriormente. Assim, os jogadores vão mudar de Homem para Elefante, depois para Rato, depois de volta a Homem.

Para auxiliar um famoso competidor estrangeiro de um jogo com uma certa similaridade com este jogo de Homem, Elefante e Rato, você irá desenvolver um programa que contabiliza quantos jogadores irão utilizar cada símbolo.

Suponha que todos os N jogadores são dispostos em fila e identificados pela sua posição, de 1 a N. Seu programa deverá processar M comandos, de dois tipos: mudança de símbolo e contar a frequência dos símbolos. Ambos os comandos recebem um intervalo contíguo de jogadores na fila a serem considerados.";"A entrada é composta por diversos casos de teste. Cada caso de teste começa com uma linha contendo dois inteiros N (1 ≤ N ≤ 105) ​​e M (0 ≤ M ≤ 106) > ​que representam, respectivamente, o número de jogadores no campeonato e o número de operações.

As próximas M linhas contêm cada uma a descrição de uma operação. Operações de mudança de estratégia serão representadas por uma linha da forma ""M A B"" onde A (1 ≤ A) e B (A ≤ B ≤ N) são inteiros. Os jogadores cuja estratégias serão alteradas são aqueles cuja posição na fila está entre A e B, inclusive.

Operações de contagem serão representadas por uma linha da forma ""C A B"" onde A e B são inteiros representando o intervalo de jogadores que deverão ser considerados na contagem. Levaremos em conta os jogadores cuja posição na fila está entre A e B, inclusive.";"Para cada operação de contagem, imprima uma linha contendo três inteiros indicando respectivamente o número de símbolos Homem, Elefante e Rato que são usados pelos jogadores no intervalo dado.

Imprima também uma linha em branco após cada caso de teste, inclusive após o último caso de teste da entrada.";True;7 / 10;1703;684;40.16%
1478;Matriz Quadrada II;Iniciante;4;Escreva um algoritmo que leia um inteiro N (0 ≤ N ≤ 100), correspondente a ordem de uma matriz M de inteiros, e construa a matriz de acordo com o exemplo abaixo.;A entrada consiste de vários inteiros, um valor por linha, correspondentes as ordens das matrizes a serem construídas. O final da entrada é marcado por um valor de ordem igual a zero (0).;Para cada inteiro da entrada imprima a matriz correspondente, de acordo com o exemplo. (os valores das matrizes devem ser formatados em um campo de tamanho 3 justificados à direita e separados por espaço. Após o último caractere de cada linha da matriz não deve haver espaços em branco. Após a impressão de cada matriz deve ser deixada uma linha em branco.;False;4 / 10;25210;8987;35.65%
1479;Ajude seu General;Grafos;8;"Um bom general de guerra deve tomar decisões rápidas, e ao mesmo tempo ser um bom estrategista. Uma das funções do general é delegar soldados a diversos pontos estratégicos, de modo que o inimigo seja supreendido e derrotado. Há diversos pontos estratégicos no campo de batalha, assim como diversas rotas que interligam esses pontos.

O seu campo está, porém, sendo bombardeado, e essas rotas não são tão seguras mais. Uma vez que uma bomba caia em uma rota, tal terreno se torna irregular e a sua travessia se torna impossível. Para contornar tal problema, o general delegou uma nova tarefa a alguns soldados: encontrar novas rotas.

O general pediu sua ajuda então para calcular qual o caminho mais curto entre a base da operação e os pontos estratégicos. Você será informado sobre o estado inicial do campo de batalha, com N pontos estratégicos (sendo o ponto 1 a base da operação) e M rotas. Conforme as bombas inutilizam algumas rotas, e outras rotas vão sendo encontradas pelos soldados, você deve atualizar seu cálculo para que o general possa fazer bom uso de tais informações.

Boa sorte, o país depende de você.";"A entrada contém diversos casos de teste. Cada caso de teste inicia com dois inteiros, N e M (2 ≤ N ≤ 1000 e 1 ≤ M ≤ 10000), representando, respectivamente, o número de pontos estratégicos e o número de rotas que interligam dois pontos estratégicos. Após, haverão M linhas, cada uma com três inteiros U, V e W (1 ≤ U, V ≤ N e 1 ≤ W ≤ 100) cada, representando que há uma rota que interliga o ponto U ao ponto V, em direção única, com distância W.

Haverá então um inteiro Q (1 ≤ Q ≤ 1000), que representa o número de consultas ou atualizações que serão feitas sobre essas rotas. Nas próximas Q linhas haverá uma letra e um determinado número de inteiros.

Se a letra digitada for a letra R, haverá em seguida dois inteiros U e V (1 ≤ U, V ≤ N), indicando que a rota que antes interligava o ponto U até o ponto V foi bombardeada.

Caso a letra digitada for a letra I, haverá em seguida três inteiros U, V e W (1 ≤ U, V ≤ N e 1 ≤ W ≤ 100), indicando que foi encontrada uma nova rota que interliga o ponto U até o ponto V, com distância W. E caso a letra digitada for a letra P, haverá em seguida um inteiro V (1 ≤ V ≤ N), e você deve informar ao general qual a distância mínima entre a base da operação e o ponto estratégico V.

A entrada termina quando N = M = 0.";Para cada caso de teste haverá um número não definido de linhas de saída. Sempre que, na entrada, o general requisitar a distância mínima entre a base da operação e um ponto estratégico (letra P), tal distância deve ser impressa em uma linha única. Caso não seja possível chegar a tal ponto estratégico, deve-se imprimir -1. Deve haver uma linha em branco após cada caso de teste.;False;8 / 10;326;140;42.94%
1480;O Famoso Campo Minado;Ad-Hoc;10;"Campo Minado é um jogo antigo, que ficou muito conhecido por ser um jogo nativo em um sistema operacional que ninguém lembra o nome. Trata-se de uma grade com N linhas e M colunas, contendo diversas minas espalhadas, e diversas dicas indicando onde elas estariam. O seu objetivo é encontrar todas as minas, sem nunca pisar em uma.

Cada posição da grade pode ou não conter uma mina. Caso não contenha uma mina, tal posição irá conter um valor, conhecido também como dica, que irá identificar quantas minas há nos quadrados adjacentes àquele (nas 8 direções), que varia de 0 a 8 (ver Figura 1).



Rafael se interessou muito pela proposta do jogo, e achou tão fácil que resolveu escrever por conta própria alguns casos de jogo, onde ele define onde as minas estarão e quais as dicas iniciais. Notou porém que existem duas situações que podem ocorrer durante a partida: em determinados casos, é possível descobrir com certeza onde está a mina, graças às dicas dadas; já em outros casos, não é possível descobrir com certeza onde está a mina, e o jogador vai depender apenas de sua sorte.

Considere uma partida como se segue: há inicialmente um determinado número de quadrados revelados (dicas) e o restante dos quadrados cobertos. O jogador pode então realizar dois movimentos: revelar um quadrado coberto, podendo encontrar uma mina (fim de jogo) ou uma dica; ou sinalizar um quadrado coberto como sendo uma mina, de modo a prevenir a si mesmo de nunca revelar tal quadrado.

Para prosseguir na partida de uma forma lógica (sem se basear na sorte), leve em consideração as seguintes definições, em relação a um conjunto de quadrados adjacentes a algum quadrado sendo analisado:


	Quando o número de quadrados cobertos (adjCob), somado do número de quadrados sinalizados (adjSin) for igual à dica (adjCob + adjSin = dica), então todos os quadrados cobertos contém minas.
	Quando o número de de quadrados sinalizados (adjSin) for igual à dica (adjSin = dica), então todos os quadrados cobertos não contém minas.


Veja como exemplo na Figura 2.



Na parte a) da figura, temos adjCob = 1, adjSin = 0 e dica = 1, logo 1 + 0 = 1, e podemos sinalizar os quadrados cobertos para identificar as minas.

Na parte b) da figura, temos adjSin = 1 e dica = 1, logo 1 = 1, e podemos revelar os quadrados adjacentes ainda cobertos.

Para que seu caso de jogo ficasse interessante e desafiador, Rafael decidiu que devia ser possível encontrar todas as minas baseando-se apenas na definição dada, porém não sabe verificar quando isso é possível, e para isso pediu sua ajuda.";"A entrada irá conter diversos casos de teste. Cada caso de teste inicia com três inteiros N, M e K (1 ≤ N, M ≤ 20, 1 ≤ K ≤ 30), indicando que a grade do jogo contém N linhas e M colunas, e que há K minas escondidas naquela grade. Em seguida, haverá N linhas com M caracteres em cada linha, onde o caractere da linha i e coluna j (1 ≤ i ≤ N e 1 ≤ j ≤ M) indica o que há na posição [i, j] da grade:


	Caractere “.” - Quadrado coberto.
	Valor entre 0 e 8 – Quadrado revelado, onde o valor é a dica.


Em seguida haverá K pares de inteiros a e b (1 ≤ a ≤ N e 1 ≤ b ≤ M), indicando que há uma mina na posição [a, b] da grade. Note que tal informação é útil quando um quadrado é revelado, para se poder calcular qual a dica que será apresentada.

A entrada termina quando N = M = K = 0.";Seu programa deverá imprimir, para cada caso de teste, uma linha, contendo a palavra “Possivel” caso seja possível encontrar todas as minas baseando nas definições acima, ou “Impossivel”, caso isso não seja possível.;True;10 / 10;580;110;18.97%
1481;A Fazenda de Ostras de Zing Zhu;Matemática;10;"Zing Zhu possui uma ilha que é um pedaço de terra plana. Todos os dias, quando a maré sobe, a ilha é inundada pela água do mar. Depois de muito pensar e pedir o conselho de membros de sua família, Zing Zhu decidiu criar uma fazenda de ostras na ilha. Zing Zhu usa um sofisticado sistema de cercas de plástico modulares à prova d'água para controlar as áreas que serão inundadas e as áreas que não serão inundadas durante a subida da maré. As cercas usadas por Zing Zhu são horizontais ou verticais e vêm em tiras, que têm diferentes comprimentos e alturas. Duas cercas podem se cruzar em no máximo um ponto, não necessariamente em suas extremidades.

                ​

                Imagem 1 (esquerda):. Mapa de tiras de cerca instalados na fazenda, mostrando as alturas das tiras de cerca, em centímetros.

                Imagem 2 (direita): áreas não inundadas (mostradas em branco), se a maré sobe 110 centímetros.

                Você foi contactado por Zing Zhu para calcular, dada a altura que maré atingirá e a posição e altura de todas as tiras de cerca, a área total de terra que não será inundada durante a maré alta. Pode-se presumir que a largura das tiras de vedação são tão finas em comparação ao tamanho do terreno que, para efeitos de cálculo da área total, as tiras de vedação podem ser considerados como tendo larguras iguais a zero.";"A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um número inteiro N, indicando o número de tiras de vedação na ilha (1 ≤ N ≤ 2000). Cada uma das próximas N linhas contém cinco números inteiros X1, Y1, X2, Y2 e H, o que representa, respectivamente, o ponto de início (X1, Y1), o ponto final (X2, Y2) e a altura da tira (H). A última linha de um caso de teste contém um inteiro W que representa a altura da maré. As coordenadas são dadas em metros e a altura, em centímetros. Além disso, X1 = X2 ou Y1 = Y2 (mas não ambos); -500 ≤ X1, Y1, X2, Y2  ≤ 500 e 1 ≤ W, H ≤ 1000. A extremidade de entrada é indicado por N = 0.";Para cada caso de teste da entrada, seu programa deve produzir uma linha de saída, contendo um inteiro que representa a área total (em m2) da terra que não será inundada.;True;10 / 10;120;41;34.17%
1482;Noite no Museu;Grafos;9;"A cidade de Viena é chamada “cidade da cultura“ porque, entre outras coisas, abriga uma grande quantidade de museus, mais de 100. Como consequência, é muito difícil e caro visitar todos os museus, não importando o tempo que ficar na cidade. Entretanto, tem uma noite especial, chamada “Noite no Museu”, que se permite a visita a vários museus com apenas um ingresso, das 18:00h até a 01:00h da manhã do próximo dia.

                Porém, é impossível visitar todos os museus da cidade por duas razões principais. A primeira razão é que alguns museus em Viena não entram nessa promoção porque fecham às 17:00 h. A segunda razão é que não há tempo suficiente para visitar os museus, e TODOS os seus interiores, no tempo de 7 horas.

                Sua tarefa é construir um programa que dado o número de museus participantes, o tempo necessário para visitar cada museu e o tempo que leva para ir de um museu ao outro, encontre o melhor “tour” para os visitantes, ou seja, visitar o maior número de museus nessa noite.";A entrada contém vários casos de testes. A primeira linha de um caso de teste contém um inteiro N, que indicará o número de museus participantes na promoção (1 ≤ N ≤ 20). Cada museu tem um identificador único variando de 1 a N. A segunda linha contém N inteiros indicando o tempo, em minutos, necessário para visitar cada museu, de 1 a N. Então, teremos mais N linhas descrevendo o tempo para ir de um museu para todos os outros. A i-ésima linha contém N inteiros Mk (1 ≤ k ≤ N) representando o tempo, em minutos, para ir de um museu i para um museu k. Assuma que o i-ésimo inteiro na i-ésima linha é igual a 0. O final da entrada é indicado por N = 0.;Para cada caso de teste, seu programa deverá produzir uma linha contendo o número máximo de museus que podem ser visitados durante a noite.;False;9 / 10;1015;225;22.17%
1483;Jogo do Bicho;Ad-Hoc;5;"Em um país muito distante, as pessoas são viciadas em um jogo de apostas bastante simples. O jogo é baseado em números e é chamado jogo do bicho. O nome do jogo deriva do fato que os números são divididos em 25 grupos, dependendo do valor dos dois últimos dígitos (dezenas e unidades), e cada grupo recebe o nome de um animal. Cada grupo é associado a um animal da seguinte forma: o primeiro grupo (burro) consiste nos números 01, 02, 03 e 04; o segundo grupo (águia) é composto dos números 05, 06, 07 e 08; e assim em diante, até o ultimo grupo contendo os números 97, 98, 99 e 00. As regras do jogo são simples. No momento da aposta, o jogador decide o valor da aposta V e um número N (0 ≤ N ≤ 1000000). Todos os dias, na praça principal da cidade, um número M é sorteado (0 ≤ M ≤ 1000000). O prêmio de cada apostador é calculado da seguinte forma:

                
                    Se M e N têm os mesmos quatro últimos dígitos (milhar, centena, dezena e unidade), o apostador recebe V × 3000 (por exemplo, N = 99301 e M = 19301);

                    Se M e N têm os mesmos três últimos dígitos (centena, dezena e unidade), o apostador recebe V × 500 (por exemplo, N = 38944 e M = 83944);

                    Se M e N têm os mesmos dois últimos dígitos (dezena e unidades), o apostador recebe V × 50 (por exemplo, N = 111 e M = 552211);

                    Se M e N têm os dois últimos dígitos no mesmo grupo, correspondendo ao mesmo animal, o apostador recebe V × 16 (por exemplo, N = 82197 and M = 337600);

                    Se nenhum dos casos acima ocorrer, o apostador não recebe nada.

                    Obviamente, o prêmio dado a cada apostador é o máximo possível de acordo com as regras acima. No entanto, não é possível acumular prêmios, de forma que apenas um dos critérios acima deve ser aplicado no cálculo do prêmio. Se um número N ou M com menos de quatro dígitos for apostado ou sorteado, assuma que dígitos 0 devem ser adicionados na frente do numero para que se torne de quatro dígitos; por exemplo, 17 corresponde a 0017.

                    Dado o valor apostado, o número escolhido pelo apostador, e o número sorteado, seu programa deve calcular qual o prêmio que o apostador deve receber.";A entrada contém vários casos de teste. Cada caso consiste em apenas uma linha, contendo um número real V e dois inteiros N e M, representando respectivamente o valor da aposta com duas casas decimais (0.01 ≤ V ≤ 1000.00), o número escolhido para a aposta (0 ≤ N ≤ 1000000) e o número sorteado (0 ≤ M ≤ 1000000). O final da entrada é indicado por uma linha contendo V = M = N = 0.;Para cada um dos casos de teste seu programa deve imprimir uma linha contendo um número real, com duas casas decimais, representando o valor do prêmio correspondente à aposta dada.;False;5 / 10;1275;451;35.37%
1484;Tecle & Some;Matemática;7;"Strike Boy, como o apelido sugere, é um garoto fanático por todo tipo de jogos em computador. Ele está passando as férias em uma ilha paradisíaca, onde computadores não são permitidos. Ele se divertiu por algum tempo com os jogos em seu telefone celular, mas a bateria acabou e não há eletricidade na ilha, de forma que ele parou de jogar. Strike Boy então decidiu inventar um novo passatempo, usando o teclado de seu telefone celular. Neste novo jogo, para dois jogadores, um deles escolhe dois inteiros S e D. O jogador oponente deve então encontrar uma sequência de termos tal que:

                
                    Cada termo da sequência é um número com D dígitos decimais, exceto pelo último termo, que pode ter entre 1 e D dígitos;
                    A soma de todos os termos da sequência é igual a S;
                    Os dígitos utilizados para formar um termo correspondem às teclas de um teclado padrão de telefone celular (‘0’ a ‘9’);
                    Cada dígito é utilizado no máximo uma vez na sequência;
                    O primeiro termo de uma sequência pode começar com qualquer dígito, mas a ordem dos dígitos da sequência, quando lidos da esquerda para a direita, é tal que a próxima tecla corresponde sempre a uma tecla imediatamente vizinha da tecla utilizada previamente (na vertical, na horizontal ou na diagonal).
                

                Por exemplo, se S = 230 e D = 3, há apenas duas soluções possíveis obedecendo as regras do jogo: [074, 156] e [085, 142, 3]. A sequência [230] não é uma solução porque a tecla ‘3’ não é vizinha da tecla ‘0’.

                

                Imagem da esquerda: Teclado ilustrando as teclas utilizadas para formar a sequência [074, 156]

                Imagem da direita: Teclado ilustrando as teclas utilizadas para formar a sequência [085, 142, 3]

                Ajude Strike Boy a verificar se as respostas do oponente estão corretas: escreva um programa que, dados S e D, imprima todas as soluções possíveis.";A entrada contém vários casos de teste. Cada caso de teste consiste em apenas uma linha, contendo dois inteiros S e D, separados por um espaço, representando a soma desejada e o número de dígitos de cada termo (0 ≤ S ≤ 10.000.000.000 e 1 ≤ D ≤ 10). O final da entrada é indicado por S = D = −1.;"Para cada caso de teste da entrada seu programa deve produzir uma resposta. A primeira linha de uma resposta deve conter um identificador do caso de teste, no formato '#i', onde 'i' tem inicialmente o valor 1 e é incrementado a cada caso de teste. Então, se uma solução para o passatempo existe, seu programa deve produzir uma lista das possíveis sequências de termos. Se mais de uma sequência é possível, elas devem aparecer em ordem lexicográfica crescente. Cada sequência de termos deve ser impressa em uma linha, com os termos separados por um espaço em branco. Se não há solução, seu programa deve imprimir uma linha contendo a palavra 'impossivel' (note ausência de acentuação).

                Definição: considere as sequências Sa = a1a2 ... am e Sb = b1b2 ... bn. Sa precede Sb em ordem lexicográfica se e apenas se Sb é não-vazia e uma das seguintes condições é verdadeira:

                
                    Sa é uma sequência vazia;
                    a1 < b1;
                    a1 = b1 e a sequência a2a3 ... am precede a sequência b2b3 ... bn.";True;7 / 10;90;45;50.00%
1485;Roleta Turca;Paradigmas;7;"Roleta turca é um jogo de azar que usa uma roleta com S espaços, cada um numerado com um inteiro entre -64 e 64. Em cada turno do jogo, os jogadores apostam em B bolas, cada uma também numerada de -64 a 64. Para cada uma das B bolas, exatamente um jogador apostará nela.

                Após girar a roleta, o representante da banca joga as B bolas sequencialmente. Quando a roleta para, cada bola está disposta em dois espaços adjacentes, como descrito na figura a seguir, que mostra uma roleta com 32 espaços e 4 bolas. Note que, como a figura ilustra, uma bola ocupa dois espaços adjacentes, e, portanto, há espaço para no máximo floor(S/2) bolas na roleta.

               

                As bolas terminam dispostas na mesma posição relativa em que elas foram jogadas na roleta. Isto é, se as bolas a, b e c são jogadas nessa sequência, elas terminam dispostas tais que, na direção horária, a é seguida por b que é seguida por c que é seguida por a.

                O valor de uma bola em um turno é calculado pela multiplicação do número da bola pela soma dos números dos espaços adjacentes sobre os quais a bola está disposta. Se o valor de uma bola é positivo, o jogador que apostou nessa bola recebe essa quantia (o valor da bola) da banca; se o valor de um bola é negativo, o jogador que apostou nessa bola deve pagar essa quantia para a banca. A arrecadação da banca em um turno é a quantia total recebida menos a quantia total paga.

                Por exemplo, na figura anterior, a banca paga $5.00 para bola numerada -1, paga $7.00 para bola numerada -7, recebe $24 pela bola numerada 12 e não paga nem recebe pela bola numerada 3. Portanto, neste turno a banca fez uma arrecadação de $12.00 (24 -5 -7); note que a arrecadação da banca em turno pode ser negativa (perda).

                Será dada a descrição da roleta, a descrição das bolas e a sequência em que as bolas foram jogadas na roleta. Escreva um programa que determine a arrecadação máxima que a banca pode fazer em um turno.";A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros S e B que indicam respectivamente o número de espaços na roleta (3 ≤ S ≤ 250) e o número de bolas usadas (1 ≤ B ≤ floor(S/2)). A segunda linha de um caso de teste contém S inteiros Xi, indicando os números associados com os espaços da roleta, na direção horária (-64 ≤ Xi ≤ 64, para 1 ≤ i ≤ S). A terceira linha de um caso de teste contém B inteiros Yi, indicando o número associado com as bolas (-64 ≤ Yi ≤ 64, para 1 ≤ i ≤ B), na sequência em que as bolas são jogadas na roleta (note que elas estão na ordem que elas terminam dispostas na roleta, na direção horária). O fim da entrada é indicada por S = B = 0.;Para cada caso de teste na entrada seu programa deve escrever uma linha de saída, contendo um inteiro indicando a máxima arrecadação que a banca pode obter em um turno. A saída deve ser escrita na saída padrão.;True;7 / 10;904;234;25.88%
1486;Circuito Bioquímico Digital;Ad-Hoc;5;"Um circuito bioquímico digital (CBD) é um artefato composto de um conjunto de pontos de processamento. Cada ponto de processamento é constituído por um minúsculo receptáculo para reagentes bioquímicos, feito de um substrato biológico que se comporta como um microcircuito eletrônico digital. Dependendo do estado da reação no receptáculo, o substrato gera dois níveis de voltagem. Um leitor acoplado ao CBD é capaz de realizar a leitura de todos os pontos de processamento de um CDB num dado instante, interpretando os dois níveis de voltagem como 0 ou 1.

                Um experimento com o CBD é realizado da seguinte maneira. Os pontos de processamento são carregados com as substâncias de interesse e reagentes apropriados e, a cada intervalo fixo de tempo (tipicamente alguns milissegundos), os pontos de processamento são lidos. Assim, o experimento resulta em uma sequência de conjuntos (vetores) de bits, cada vetor correspondendo a uma medição do CBD.

                Uma sequência ininterrupta de bits 1 de um mesmo ponto de processamento ao longo do tempo é denominada de palito. O comprimento de um palito é o número de bits 1 que o compõe (note que o comprimento dos palitos de um experimento pode variar entre um e o número de medições efetuadas). Uma característica importante de um experimento com o CBD é a quantidade e o comprimento dos palitos gerados. A figura abaixo mostra o resultado de um experimento realizado com um CBD de seis pontos de processamento, em que foram efetuadas quatro medições, contendo três palitos de comprimento um, um palito de comprimento dois e um palito de comprimento quatro.

                

                Você foi contratado para escrever um programa que determine, dado o resultado de um experimento, quantos palitos de comprimento igual ou maior do que um certo valor foram gerados.";A entrada contém vários casos de teste. A primeira linha de um caso de teste contém três inteiros P, N e C que indicam respectivamente o número de pontos de processamento (1 ≤ P ≤ 1000), o número de medições efetuadas (1 ≤ N ≤ 1000) e o comprimento mínimo de palitos de interesse (1 ≤ C ≤ N). Cada uma das próximas N linhas contém sequências de P dígitos {0, 1}, separados por um espaço em branco. O final da entrada é indicado por P = N = C = 0.;Para cada caso de teste da entrada seu programa deve produzir uma única linha da saída, contendo o número de palitos de comprimento maior ou igual a C produzidos pelo experimento.;True;5 / 10;1517;774;51.02%
1487;Six Flags;Paradigmas;4;"O Six Flags Fiesta Texas é um dos maiores parques de diversão do mundo, e fica em San Antonio. Sabendo que as finais do ACM-ICPC de 2006 serão naquela cidade, três colegas começaram a planejar em quais dos famosos brinquedos eles iriam, caso seu time se classificasse para as finais mundiais.

                Para isso, estabeleceram notas para cada uma das atrações de acordo com o quanto eles gostariam de brincar lá. Por exemplo, a montanha russa ""Superman Krypton Coaster"" (que tem 800m de giros, loops e quedas com o carrinho indo a mais de 100km/h) recebeu a maior pontuação possível entre os colegas.

                O problema é que é impossível visitar todas as atrações em um mesmo dia. Assim, os colegas pesquisaram, para cada uma delas, quanto tempo durava o brinquedo (e quanto tempo de fila teriam de enfrentar até chegar a ele...). Sua tarefa neste problema é encontrar, dado o tempo disponível pelos colegas no Six Flags, uma coleção (pode haver repetições) de atrações que dá a maior pontuação dentro deste período.";Seu programa deve estar preparado para processar diversas instâncias. Na primeira linha são dados dois inteiros 0 ≤ N ≤ 100 e 0 ≤ T ≤ 600, em que N é o número de atrações nas quais os colegas gostariam de brincar, e T é o tempo (em minutos) que eles terão disponível para isso. Nas próximas N linhas, são dados dois inteiros 0 ≤ D ≤ 600 e 0 ≤ P ≤ 100 (em cada linha). O primeiro deles, D, representa a duração do brinquedo (incluído aí o tempo de fila e uma estimativa do tempo de traslado entre os brinquedos). O segundo, P, representa a pontuaçãao atribuída ao brinquedo pelos colegas. Um valor N = 0 indica o final das instâncias e não deverá ser processado.;Para cada instância solucionada, você deverá imprimir um identificador Instancia H em que H é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte, deve ser impressa a pontuação total conseguida com a coleção determinada por seu programa. Com relação a quais são as atrações da coleção determinada, os colegas decidiram que iriam perguntar para você pessoalmente no futuro, já que eles não querem que outras pessoas saibam e venham a utilizá-la. Uma linha em branco deve ser impressa após cada caso de teste.;False;4 / 10;2204;1150;52.18%
1488;Números Mágicos?;Matemática;8;"""Os números sempre desempenharam um papel de acentuado relevo não só nos altos campos da Fé e da Verdade, como no humílimos terreiros da Superstição e do Erro."" (Prof. Marão)

                Malba Tahan, em seu clássico ""O Homem Que Calculava"", conta uma fábula de superstição envolvendo os números quadripartidos. Mal sabia ele que séculos antes, na antiga civilização Tcheca, a superstição envolvendo os números quadripartidos já se fazia presente. Na antiguidade, uma importante comunidade que vivia nos arredores de Neratovice, utilizava as propriedades dos números quadripartidos para prever o futuro, batizar as crianças e até mesmo para escolher os seus líderes.

                Um número inteiro n é quadripartido se existe alguma divisão desse número em quatro parcelas inteiras (p1 + p2 + p3 + p4 = n) e um operador mágico (m) de modo que a primeira parcela somada ao operador mágico, a segunda diminuída dele, a terceira multiplicada por ele e a quarta dividida por ele deem o mesmo resultado (p1 + m = p2 − m = p3 * m = p4 / m).

                Assim, 128 é quadripartido, porque podemos dividir 128 em 4 parcelas (31, 33, 32 e 32) de modo que existe um operador mágico (no caso, 1) que faz com que p1 + m, p2 − m, p3 * m e p4 / m sejam iguais. De fato: 31 + 1 = 33 − 1 = 32 * 1 = 32 / 1 = 32.

                Um grupo de pesquisadores de Praga está reconstruindo o passado de Neratovice, e pediu a sua ajuda. Eles querem que você faça um programa que identifique quando um número é ou não quadripartido e qual é o seu operador mágico associado.";Cada linha da entrada contém um inteiro n (0 ≤ n ≤ 500000) que seu programa deverá analisar e classificar em quadripartido ou não. O valor n = 0 corresponde ao final do arquivo de entrada e não deve ser processado.;"Para cada valor da entrada, seu programa deve imprimir um identificador Instancia h, em que h é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte, separados por um espaço em branco, os cinco números que comprovam a condição de quadripartido, quando n for quadripartido. Siga a ordem: m p1 p2 p3 p4.

                Se n não for quadripartido, seu programa deve imprimir a mensagem n nao e quadripartido. No primeiro caso, é possível que exista mais de uma sequencia que atenda às condições estabelecidas. Se isto ocorrer, seu programa deverá escolher a que apresentar o maior valor possível para m.

                Uma linha em branco deve separar a saída de cada instância.";False;8 / 10;335;150;44.78%
1489;Engenharia de Software;Grafos;10;"Wander Vega é um experiente gerente de projetos numa grande empresa de desenvolvimento de sistemas. Ele recentemente leu na renomada revista científica Boas Práticas os resultados de uma pesquisa que indicam que alguns aspectos de metodologias de desenvolvimento ágil podem ser aplicadas em grandes equipes aumentando a produtividade. Ele ficou surpreso ao descobrir que um desses aspectos é a programação pareada (pair programming), onde dois desenvolvedores trabalham juntos, usando o mesmo computador. Ávido por impor mudanças que sejam notadas pela diretoria, Wander resolveu adotar programação pareada no próximo grande projeto que irá gerenciar. Só que como todo bom engenheiro de software, Wander quer otimizar esse processo. Ele resolveu que irá usar pares fixos de desenvolvedores. Além disso ele vai alocar os pares de programadores previamente.

                Porém, Wander não está disposto a correr riscos desnecessários, e só permitirá a composição de duplas de desenvolvedores que tenham níveis aceitáveis de produtividade, comunicação e capacidade de interação em trabalhos conjuntos. Caso isso não seja possível, Wander colocará todos os desenvolvedores de seu próximo projeto numa sala quente, com várias esfihas, refrigerantes e um computador, e aplicará as técnicas de programação extrema (extreme programming) para viabilizar o desenvolvimento do sistema.

                Avaliando suas possibilidades ele percebeu que seu plano seria mais reutilizável em outros projetos se ele tivesse um programa que verificasse a viabilidade do pair programming em sua empresa. Nesse momento ele pensou em você, o mais novo estagiário da empresa, para escrever um programa que resolva esse problema. Wander fez uma profunda análise de requisitos e chegou na seguinte especificação que seu programa deve seguir.";A primeira linha da entrada contém um número k, que indica o número de instâncias. Cada instância é composta por uma linha contendo um número inteiro 2 ≤ n ≤ 100, a quantidade de profissionais de desenvolvimento da empresa, seguida por n linhas. A i-ésima linha começa com um número p, indicando o número de pessoas com a qual o i-ésimo programador tem produtividade aceitável, e vem seguida por p inteiros, cada um entre 1 e n, indicando tais parceiros.;O programa deve imprimir a cada instância uma linha com Instancia i, onde i é o número de i-ésima instância. A linha seguinte deve conter a expressão pair programming se a proposta de Wander for viável. Caso contrário, imprima a expressão extreme programming. Após cada instância, seu programa deve imprimir uma linha em branco.;False;10 / 10;194;29;14.95%
1490;Torres que Atacam;Grafos;9;"Problemas inspirados no Xadrez são uma fonte comum de exercícios nas aulas de algoritmos. Começando com o conhecido problema das 8 rainhas, várias generalizações e variações foram feitas. Uma deles é o problema N-torres, que consiste na colocação de N torres em um tabuleiro N x N de tal modo que elas não se ataquem.

Professor Anand apresentou o problema N-torres aos seus alunos. Uma vez que as torres só atacam umas às outras quando elas compartilham uma linha ou coluna, eles logo descobriram que o problema pode ser facilmente resolvido colocando as torres ao longo da diagonal principal da placa. Então, o professor decidiu complicar o problema adicionando alguns peões no tabuleiro. Em um tabuleiro com peões, duas torres se atacam se e somente se elas compartilham uma linha ou coluna e não há nenhum peão colocado entre elas. Além disso, os peões ocupam algumas posições, o que dá uma restrição adicional às posições nas quais as torres podem ser colocadas.

Dado o tamanho do tabuleiro e a localização dos peões, diga ao Professor Anand o número máximo de torres que podem ser colocadas em quadrados vazios tais que dois deles não possam se atacar.";"A entrada contém vários casos de teste e termina com EOF. A primeira linha de um caso de teste contém um inteiro N (1 ≤ N ≤ 100) representando o número de linhas e colunas do tabuleiro. Cada uma das próximas N linhas contém uma seqüência de N caracteres. Na enésima linha desta string, o enésimo caractere reresenta o quadrado na coluna i, j do tabuleiro. O caractere será o ""."" (Ponto) ou a letra maiúscula ""X"", indicando, respectivamente, um quadrado vazio ou um quadrado contendo um peão.";Para cada caso de teste, imprima uma linha com um inteiro representando o número máximo de torres que podem ser colocados nos quadrados sem que possam se atacar.;False;9 / 10;1661;612;36.85%
1491;Linguagem de Blogger;Strings;10;"Brenda, neta de Benjamin, tem um blog onde ela posta artigos sobre a escola, os amigos e outras questões da vida. Intrigado com suas opiniões, Benjamin tentou lê-lo, mas logo se deu conta de que era muito difícil de ler por causa das peculiaridades da escrita de Brenda.

Brenda escreve sem espaços ou sinais de pontuação, e, além disso, ela usa letras minúsculas e maiúsculas de uma forma liberal e estranha. Por exemplo, uma das suas mensagens é ""PrOgRAMmINgiSgrEAt"". Benjamin tem dificuldade em perceber as palavras ""programming"", ""is"" e ""great"" quando são escritos desta forma.

Para melhorar a sua compreensão, Benjamin decidiu fazer o seguinte: ele vai primeiro escolher uma determinada string T e um post do blog no qual ele está interessado e, em seguida, ele irá selecionar uma substring contígua do post e irá procurar T dentro da substring, de uma forma case-insensitive. Para cada ocorrência de T dentro da substring, ele vai calcular o número de incompatibilidade de case e, finalmente, ele vai obter o máximo entre todos esses valores. Por exemplo, se Benjamin escolhe ""GR"", como T e, em seguida, seleciona a substring ""“PrOgRAM"", ele iria encontrar uma ocorrência única ""gR"" para o qual o número de incompatibilidade de case é 1. Pela mesma subsequência, se ""r"" foi escolhido como T, ele teria encontrado duas ocorrências, ""r"" com 0 incompatibilidades e ""R"", com uma incompatibilidade, portanto, o número máximo de incompatibilidades seria 1.

Para complicar mais as coisas, Brenda incluíu no blog um script que, depois da operação com a seleção de uma substring, inverte o ""case"" de todas as letras selecionadas. Isto significa que após selecionar “PrOgRAM” e proceder como explicado acima, o post exemplo seria lido como “pRoGrammINgiSgrEAt”. Se Benjamin seleciionar “ammINgi” como uma segunda substring, após calcular o seu resultado o post será deixado como “pRoGrAMMinGISgrEAt”, acumulando as duas inversões.

Você receberá a string T e o texto original do post do blog escolhido por Benjamin. A você serão também fornecido uma lista com as seleções de substring feitas por Benjamin, a fim de fazê-las. Você precisa calcular, para cada seleção, o número máximo de cases incompatíveis das ocorrências de T na parte selecionada, considerando todas as inversões feitans pelas seleções anteriores. Observe que a inversão de case ocorre após o cálculo do resultado de cada seleção.";A entrada contém vários casos de teste e termina com EOF.  A primeira linha de um caso de teste contém um N (1 ≤ N ≤ 105 ) e uma string não vazia T com no máximo 5 letras, representando respectivamente o número de seleções de substring e a string a ser selecionadar. A segunda linha contém uma string não vazia P com no máximo 105 letras, indicando o texto original postado no blog. Posições do post são numerados com inteiros consecutivos da esquerda para a direita, sendo 1 a posição mais à esquerda e |P| a posição mais à direita. Cada uma das próximas N linhas descreve uma seleção de substring com 2 inteiros L e R (1 ≤ L ≤ R ≤ |P|) indicando que a substring inicia na posição L e termina na posição R, inclusive.;Para cada caso de teste imprima N linhas, cada uma delas contendo um inteiro. Na enésima (i-th) linha escreva o número máximo de casos de compatibilidade das ocorrências de T nas enésimas (i-th) seleções de substring, considerando todas as inversões de case feitas pelas seleções anteriores. Se tal ocorrência não existir, imprima o valor −1.;False;10 / 10;178;44;24.72%
1492;Contando Uns;Matemática;3;"Carl é agora a criança mais feliz do mundo: ele aprendeu esta manhã o que é o sistema binário. Ele aprendeu, por exemplo, que a representação binária de um inteiro positivo k é  uma string anan−1 · · · a1a0 onde cada ai é um dígito binário 0 ou 1, iniciando com an = 1, e de tal forma que k = Σni=0 ai × 2i. É realmente bom ver ele transformando números decimais em binários, e depois somá-los e multiplicá-los.

César é o irmão mais velho de Cal, e ele não suporta ver o seu irmão menor tão feliz. Por isso ele preparou um desafio: ""Olhe Carl, eu tenho uma pergunta fácil para você: eu te darei dois inteiros A e B, e você tem que me dize quantos dígitos 1 existem na representação binária de todos os inteiros de A à B, inclusive. Se prepare!"". Carl aceitou o desafio.

Após alguns minutos, ele voltou com uma lista com a representação binária de todos os inteiros de 1 a 100. ""César, eu estou pronto"". César sorriu e disse: ""Bom, deixe-me ver, eu escolho A = 1015 e B = 1016. A sua lista não será útil"". 

Carl odeia perder para o seu irmão então ele precisa de uma solução mais rápida. Você pode ajudá-lo?";A entrada é composta por diversos casos de teste e termina com EOF. Cada caso de teste consiste de uma linha com dois inteiros A e B (1 ≤ A ≤ B ≤ 1016).;Para cada caso de teste, imprima uma linha contendo um inteiro que representa o número total de dígitos 1 na representação binária de todos os inteiros de A to B, inclusive.;False;3 / 10;1390;755;54.32%
1493;Abastecimento de Água Disjunto;Paradigmas;7;"Nlogônia é um reino que consiste em várias cidades localizadas em uma grande montanha. A capital é Logville, localizada no pico da montanha. Logville tem um enorme lago com uma forma perfeitamente redonda, apropriadamente chamado ""The Big O"". Este é o único lago com água potável em todo o reino, por isso é usado para abastecer todas as cidades. Algumas cidades em Nlogônia estão conectados com tubos de água que permitem a distribuição da água. Como não há bombas, cada tubo leva a água de uma cidade para outra cidade em uma altitude mais baixa, usando a gravidade.
O sistema de água da Nlogônia tem sido uma fonte de preocupações para a Rainha, já que as cidades dependem de outras cidades para o seu abastecimento de água, por isso ocorrem discussões sobre a quantidade de água que uma cidade pode utilizar. Um caminho de abastecimento de água é uma sequência de cidades em ordem decrescente de altitude, a partir de Logville e de tal forma que existe um tubo de ligação entre cada par de cidades consecutivas na sequência. Duas cidades têm abastecimento de água disjunto se e somente se existem dois caminhos de abastecimento de água, um caminho que termina em cada uma das cidades, de modo que Logville é a única cidade que está presente em ambos os caminhos. Observe que Logville tem abastecimento de água disjunto de todas as outras cidades.
A rainha considera o abastecimento de água disjunto como uma boa propriedade, já que isso reduz problemas de dependência e também evita que a falta de água se espalhe tão rapidamente através Nlogônia. Portanto, ela ordenou que fosse realizada uma pesquisa para avaliar o estado atual da disjunção do abastecimento de água em todo o reino. Sendo o mais inteligente dos conselheiros na corte da rainha, você foi convocado para ajudar a calcular o número de pares de cidades distintas que têm abastecimento de água separados.";"A entrada é composta por diversos casos de teste e termina em EOF. A primeira linha de cada caso de teste contém dois inteiros C (2 ≤ C ≤ 1000) e P (1 ≤ P ≤ 105),que representam respectivamente, o número de cidades e o número de tubos de água em Nlogônia. Cidades são identificadas com diferentes números inteiros de 1 a C, em ordem decrescente de altitude (duas cidades não têm a mesma altitude); Logville é a cidade 1. Cada uma das P linhas seguintes descreve uma tubulação com dois números inteiros U e V (1 ≤ U <V ≤ C), indicando que o tubo conecta a cidade U com a cidade V. Você pode assumir que não há dois tubos iguais entre um mesmo par de cidades e que, para cada cidade de Nlogônia há pelo menos um caminho de abastecimento de água que termina nela.";"Para cada caso de teste imprima uma linha com um inteiro que representa o número de pares de cidades distintas que tem abastecimento de água disjunto.
 ";False;7 / 10;358;188;52.51%
1494;Onze;Paradigmas;9;Neste problema, nos referimos aos dígitos de um inteiro positivo como uma sequência de dígitos necessária para escrevê-lo na base 10 sem zeros precedentes. Por exemplo, os dígitos de N = 2090 são 2, 0, 9 e 0. N é um inteiro positivo. Nós chamamos um inteiro positivo M como um anagrama-multiplo-de-onze de N se e somente se (1) os dígitos de M são um permutação dos dígitos de N, e (2) M é um múltiplo de 11. Você deve escrever um programa que dado N, calcula o número de anagramas-multiplos-de-onze. Como exemplo, considere novamente N = 2090. Os valores que atendem a primeira condição acima são 2009, 2090, 2900, 9002 9020 e 9200. Entre eles, somente 2090 e 9020 satisfazem a segunda condição, por isso a resposta para N = 2090 é 2.;A entrada contém vários casos de teste e termina com EOF. Cada caso de teste consiste de uma linha com um inteiro N (1 <= N <= 10^100).;Para caso de teste, seu programa deve imprimir uma linha de saída. Esta linha contêm um inteiro representando o número de anagramas-múltiplos-de-onze de N. Como essa número pode ser muito grande, você deve imprimir o resto da divisão dele por 10^9 + 7.;False;9 / 10;291;125;42.96%
1495;Futebol;Ad-Hoc;5;"O seu time de futebol favorito está jogando em um campeonato para caridade, que é parte de um esforço mundial para levantar fundos para ajudar crianças com dificuldades. Como em um campeonato normal, três pontos são dados ao time que vence um partida, e nenhum para o time que perdeu. Se o jogo termina em empate, cada time recebe um ponto.
O seu time jogou N partidas durante a primeira fase do campeonato, que já terminou. Somente alguns times, os com mais pontos acumulados, irão avançar para a segunda fase do campeonato. Porém como o objetivo principal do campeonato é arrecadar dinheiro, antes de definir os times que passaram para a segunda fase, cada time pode comprar gols adicionais. Estes gols contam como gols marcados, e podem ser usados para alterar o resultado de qualquer partida que o time jogou.
O orçamento do seu time é suficiente para comprar até G gols. Você pode informar o número máximo de pontos que o seu time pode obter após comprar os gols, supondo que os outros times não irão comprar nenhum gol?";A entrada contém diversos casos de teste e termina com EOF. A primeira linha de um caso de teste contém dois inteiros N (1 ≤ N ≤ 105) e G (0 ≤ G ≤ 106) representando respectivamente o número de partidas que o seu time jogou e o número de gols que o seu time pode comprar. Cada uma das próximas N linhas descrevem o resutado de uma partida com dois inteiros S e R (0 ≤ S, R, ≤ 100), indicando respectivamente os gols que o seu time marcou e sofreu na partida antes da compra de gols.;Para cada caso de teste imprima uma linha com um inteiro representando o número máximo total de pontos que o seu time pode obter após comprar os gols.;False;5 / 10;4305;1593;37.00%
1496;"Suba os ""Ultras""";Ad-Hoc;8;"A proeminência topográfica de um pico é uma medida de especial interesse para os alpinistas e pode ser definido como se segue: a proeminência de um pico p com a altitude h, em relação ao nível do mar, é o maior valor d tal que qualquer caminho no terreno a partir de p para qualquer pico estritamente superior vai passar através de um ponto de altitude h - d. Se não houver um pico estritamente superior, então a proeminência é h. Aqueles picos com proeminência topográfica maior ou igual a 150000 centímetros (precisão é de grande importância para os alpinistas!) têm um nome especial: eles são chamados de ""Ultras"".
Você deve escrever um programa que identifica todos os ""Ultras"" que ocorrem em um perfil bidimensional de uma cadeia de montanhas representada como uma sequência de pontos. Note que a distância horizontal entre os pontos não é importante, tudo o que você precisa é a altitude de cada ponto. Na figura abaixo, os ""Ultras"" são os pontos 7, 12, 14, 20 e 23.";"A entrada é composta por diversos casos de teste e termina em EOF. A primeira linha de cada caso contém um inteiro  N (3 ≤ N ≤ 105) que representa o número de pontos em um perfil. A segunda linha contém N inteiros Hi que indicam a altitude (em centimetros) dos pontos, na ordem em que eles aparecem no perfil (0 ≤ Hi ≤ 106 para i = 1, 2, . . . , N). Pontos consecutivos tem altitudes diferentes (Hi != Hi+1 for i = 1, 2, . . . , N − 1), já o primeiro e o último pontos estão no nível no mar (H1 = HN = 0). Você pode assumir que o perfil contém pelo menos um ""Ultra"".";"Para cada caso de teste, imprima uma linha com os índices que todos os ""Ultas"" no intervalo da montanha, na ordem com que eles aparecem no perfil.";True;8 / 10;449;171;38.08%
1497;Esconde-Esconde;Geometria Computacional;9;"Em um playground (parque infantil), um grupo de crianças está brincando de Esconde-Esconde. Como o nome sugere, o jogo é sobre crianças se escondendo e procurando outras crianças. Cada criança, ou é uma criança que se esconde ou uma criança que procura. As crianças que se escondem apenas tentam não ser encontradas, enquanto as que procuram tentam encontrá-las.
Como você pode notar, tanto as crianças que se escondem quanto as que procuram tentam não ser encontradas, e para fazer isso, elas usam algumas paredes que existem no parque. Cada parede é representada por um segmento de linha e cada criança é representada por um ponto no plano XY. Duas crianças se enxergam se e somente se o segmento de linha entre eles não fizer intersecção com nenhum segmento de parede.
Sua tarefa é calcular quantas outras crianças cada criança que procura consegue ver. Para simplificar o problema, você pode assumir que as paredes não se cruzam, mesmo nas suas pontas (extremidades). Além disso, não há três pontos
colineares dentro do conjunto formado por crianças e pontos de extremidade das paredes, o que implica que as crianças não estão dentro das paredes, e que não há duas crianças no mesmo local.";"A entrada contém vários casos de teste e termina com EOF. Cada caso de teste consiste de várias linhas. A primeira linha contém 3 inteiros S, K e W, representando respectivamente o número de crianças procurando, o número total de crianças e o número de paredes do playground (1 ≤ S ≤ 10; 1 ≤ K, W ≤ 104 e S ≤ K). Cada uma das próximas K linhas descreve uma criança com dois inteiros X e Y(−106 ≤ X, Y ≤ 106 ), indicando que a localização da criança no plano XY é o ponto (X, Y); o primeiro S destas linhas descreve crianças procurando. Cada uma das próximas W linhas descreve uma parede com quatro inteiros X1, Y1, X2 e Y2 (−106 ≤ X1, Y1, X2, Y2 ≤ 106), indicando que os dois pontos finais da parede no plano XY são (X1, Y1) e (X2, Y2). Você pode assumir que os segmentos de paredes não se interseccionam e que nenhum dos 3 pontos dados na entrada são colineares.";Para cada caso de teste, imprima S linhas, cada uma delas contendo um inteiro. Na enésima linha escreva o número de outros garotos que o enésimo garoto pode enxergar.;False;9 / 10;230;78;33.91%
1498;Inversão de Huffman;Grafos;10;"Codificação Estática de Huffman é um algoritmo de codificação usado principalmente para compressão de texto. Dado um texto de determinado tamanho feito de n caracteres diferentes, o algoritmo escolhe N códigos , um para cada diferente caractere. O texto é compactado usando esses códigos. Para escolher os códigos, o algoritmo constrói uma árvore binária com N folhas. Para N ≥ 2 a árvore pode ser construído como se segue. 1. Para cada caractere diferente no texto construa uma árvore contendo apenas um único nodo, e atribua a ele um peso coincidente com o número de ocorrências de caracteres no texto.
					2. Construia um conjunto s contendo as N árvores acima.
					3. Enquanto s contiver mais de uma árvore:
					(a) Escolha t1 ∈ s com peso mínimo e remova-o de s.
					(b) Escolha t2 ∈ s com peso mínimo e remova-o de s.
					(c) Crie uma nova árvore t com t1 como a sua subárvore esquerda e t2 como sua subárvore direita e atribua para t a soma dos pesos de t1 e t2.
					(d) Inclua t em s.
					4. Retorne a única árvore que sobrar em s .

					Para o texto ""abracadabra"" , a árvore produzido pelo processo acima descrito pode ser semelhante a imagem à esquerda, onde cada nodo interno é marcado com o peso da sub-árvore esquerda daquele nodo. Note que a árvore obtida também pode se parecer com a imagem da direita, entre outras coisas, porque nas etapas 3a e 3b do conjunto s pode conter várias árvores com peso mínimo. Para cada caractere diferente do texto, seu código depende do caminho que existe na árvore final, à partir da raiz até a folha correspondente ao caracter. O tamanho do código é o número de arestas existentes no caminho (que coincide com o número de nodos internos do caminho). Assumindo que a árvore da esquerda foi construída por um algoritmo, o código para “r” tem tamanho 3 enquanto que o código para “d” tem tamanho 4. 
					
	
					Sua tarefa é, dado os tamanhos dos N códigos escolhidos pelo algoritmo, encontrar a árvore mínima (em número total de caracteres) que o texto poderá ter de forma que os códigos gerados tenham comprimento N";A entrada contém vários casos de teste e terminam com EOF. A primeira linha de cada caso de teste contém um inteiro N (2 ≤ N ≤ 50) que representa o número de caracteres diferentes que aparece no texto. A segunda linha contém N inteiros Li indicam os comprimentos dos códigos escolhido pelo algoritmo de Huffman para os diferentes caracteres (1 ≤ Li ≤ 50 para i = 1, 2, ..., N). você pode assumir que existe pelo menos uma árvore, construída tal como descrito, que produz códigos com o dado comprimentos.;Para cada caso de teste de entrada, imprima uma linha com um inteiro que representa o tamanho mínimo (número total de caracteres) que o texto pode ter assim como os códigos gerados têm os comprimentos determinados.;True;10 / 10;145;51;35.17%
1499;Junte Dois Reinos;Grafos;9;"Os reinos de Nlogônia e Quadradônia travaram uma longa e terrível guerra que os historiadores a chamaram de Almost Completely Meaningles (ACM), que significa quase completamente sem sentido porque ninguém agora consegue se lembrar por que tudo começou.
					
					Quando a guerra ACM finalmente terminou, os dois reinos decidiram reforçar seus laços a fim para evitar mais derramamento de sangue, e por esta razão eles consultaram o Consórcio Internacional para a Prevenção de Conflitos (ICPC). O ICPC recomenda a construção de uma única estrada para ligar uma cidade da Nlogônia com uma cidade em Quadradônia, permitindo, assim, o intercâmbio comercial e cultural entre o dois países.
					
					Nlogônia e Quadradônia tem N e Q cidades respectivamente. O sistema viário de cada reino consiste de um conjunto de estradas bidirecionais que unem pares de diferentes cidades no mesmo reino, de tal forma que há um caminho único (ou seja, uma seqüência de estradas consecutivas) que se pode tomar para ir de qualquer cidade de um reino para qualquer outra cidade no mesmo reino. O ""tamanho"" de um tal sistema de estradas é definido como o número máximo de caminhos que se deve tomar a fim de viajar entre quaisquer pares de cidades .
					
					Uma vez que o ICPC não especificou quais duas cidades deve ser conectadas pela nova estrada que une os dois reinos, os cidadãos estão preocupados que o tamanho do sistema viário combinado pode ser demasiado grande. Para evitar uma segunda guerra ACM, você gostaria de convencê-los de que este não é o caso e, para isso, você precisa calcular o tamanho esperado deste sistema de estradas, resultando assumindo que todos os caminhos possíveis entre os dois reinos são igualmente propensos de serem construídos.";"A entrada contém vários casos de testes e termina com EOF. A primeira linha de cada caso de teste contém dois números inteiros N e Q e representam o número de cidades em cada um dos dois reinos (1 ≤ N, Q ≤ 4 × 104). As cidades em Nlogônia são identificadas com diferentes números inteiros de 1 a N, enquanto as cidades Quadradônia são identificados com diferentes números inteiros de 1 a P. Cada um dos seguinte N - 1 linhas descreve uma estrada em Nlogônia com dois números inteiros distintas A e B, indicando que a estrada liga A cidade com a cidade B (1 ≤ A, B ≤ N). Cada uma das próximas Q-1 linhas descreve uma estrada em Quadradônia com dois inteiros distintos C e D, indicando que a estrada liga cidade C com a cidade D (1 ≤ C, D ≤ Q). 
					O sistema viário de cada reino é construído de tal forma que existe exatamente um caminho apenas entre cada par de cidades do reino.";Cada caso de teste de entrada imprima uma linha com um número racional representando o tamanho esperado do sistema viário, após a dois reinos se unirem, considerando que todos os caminhos que ligam eles são igualmente possíveis de serem construídos. O resultado deve ser emitido como um número racional com exatamente três dígitos após o decimal ponto, arredondado, caso necessário.;False;9 / 10;486;190;39.09%
1500;Consultas Horríveis;Estruturas e Bibliotecas;9;"O mundo está cada vez mais mal e está ficando cada vez mais difícil de entrar na liga do mal. Desde que o lendário Bad Horse se aposentou, você tem que responder corretamente as perguntas do mal do Dr. Horrible, que tem um PhD em malvadeza (mas não em Ciência da Computação). É dado um conjunto de N elementos, que são inicialmente todos 0. Depois disso você receberá C comandos. São eles:


	0 p q v - você tem que adicionar v para todos os números na faixa de p à q (inclusive), onde p e q são dois índices do array.
	1 p q - imprima uma linha contendo um único inteiro, que é a soma de todos os elementos do array entre p e q (inclusive).";"A primeira linha contém T, que indica o número de casos de teste.

Cada caso de teste começará com N (N ≤ 100 000) e C (C ≤ 100 000). Após isso você deverá ler C operações no formato descrito acima (1 ≤ p, q ≤ N and 1 ≤ v ≤ 107).";Imprima a respostas das consultas, conforme o exemplo de saída.;False;9 / 10;3141;957;30.47%
1501;Quantos Zeros e Quantos Dígitos?;Matemática;9;"Dado um número inteiro decimal, você terá que descobrir quantos zeros à direita o seu fatorial conterá em um determinado sistema de numeração e você também terá que encontrar quantos dígitos terá este fatorial no mesmo sistema de numeração.

Você pode assumir que um sistema numérico baseado em B há B diferentes símbolos para identificar valores indo de 0 até b-1.";Há diversas linhas de entrada. Cada linha forma um bloco. Cada linha conterá um valor decimal  N (um número de 20 bits sem sinal) e um número inteiro B (1 < B ≤ 800), que é a base do sistema de números que você vai considerar. Por exemplo 5! = 120 (em decimal) mas é 78 no sistema de numeração hexadecimal. Portanto, no sistema hexadecimal 5! não tem zeros no final.;Para cada linha de entrada, imprima uma única linha informando quantos zeros finais terá o fatorial desse número no sistema de numeração solicitado e também quantos dígitos terá o fatorial desse número neste mesmo sistema de numeração. Separe esses dois números com um único espaço. Você pode ter certeza que o número de zeros à direita ou o número de dígitos não será maior do que 231-1;False;9 / 10;624;196;31.41%
1502;Travessia;Grafos;10;"Twilight e seus amigos estão tentado impedir Discord de criar caos. Enquanto passavam por um corredor muito comprido em direção a Canterlot, eles se depararam com um labirinto de lasers mortais que bloquearam seu caminho!

O corredor tem largura W. O labirinto de lasers consiste de N postes energizados com uma energia não-negativa Pi. Cada poste é capaz de criar um quadrado de lasers mortais centrado no poste com comprimento igual ao dobro do quadrado de sua energia e um par de lados paralelos às paredes do corredor. Note que quadrados podem se sobrepor, e que pode haver mais de um poste numa mesma posição.

Twilight planeja usar sua magia para alterar as energias dos postes para alguns valores inteiros não-negativos de forma que seja possível atravessar o corredor e continuar sua jornada sem serem descobertos. Desligar todos os postes pode causar suspeitas, portanto Twilight decidiu modificar as energias dos postes de forma que a travessia seja possível e que a diferença absoluta da energia total do sistema antes e depois da travessia seja a mínima possível.



Alterar as energias enquanto seus amigos atravessam pode ser perigoso, por isso Twilight decide que fará todas as alterações de antemão, e não fará nenhuma outra mudança durante ou depois da travessia, já que não podem perder tempo.

Ajude Twilight a terminar sua jornada encontrando o menor valor possível para a diferença absoluta da soma das energias da configuração inicial e final do labirinto.";Cada caso de teste contém uma linha com dois inteiros W e N (1 ≤ W ≤ 1000, 1 ≤ N ≤ 15). Em seguida há N linhas, cada uma contendo três inteiros Xi, Yi e Pi, descrevendo a posição e a energia inicial de cada poste (0 ≤ Xi ≤ W, 0 ≤ Yi ≤ 1000, 0 ≤ Pi ≤ 200). As paredes dos corredores estão nas posições x = 0 e x = W. O último caso de teste é seguido de uma linha contendo dois zeros.;Para cada caso de teste imprima uma única linha contendo a menor diferença absoluta possível entre as somas inicial e final dos postes.;True;10 / 10;60;31;51.67%
1503;Maior Palíndromo Comum Você Deve Encontrar;Strings;10;"Mestre Yoda interceptou mensagens secretas do lado negro da força.

Ele tem certeza de que todas elas contém uma mesma informação valiosíssima que pode ajudar os Jedi na luta contra os Sith.

Além disso, ele sabe que a informação que ele procura é um palíndromo.

Porém, as mensagens são muito grandes e por isso ele precisa da sua ajuda.

Você deve criar um programa para dizer qual o tamanho do maior palíndromo comum a todas as mensagens que Mestre Yoda interceptou.";"A entrada contém vários casos de teste e termina com EOF. Cada caso de entrada do problema consiste de mensagens que Mestre Yoda possui.

A primeira linha de um caso de teste possui o inteiro n (n <= 10), que é o número de mensagens

As próximas n linhas possuem strings compostas apenas por letras minúsculas do alfabeto ('a' - 'z').

O tamanho máximo de cada string é 50000.";Para cada caso de teste, a saída é um único inteiro, correspondente ao tamanho do maior palíndromo comum a todas as strings;False;10 / 10;629;97;15.42%
1504;Curo Railroad;Geometria Computacional;10;"Curo, o prefeito de Curoland, deseja construir uma ferrovia para que os cidadãos tenham um melhor transporte. A ferrovia vai ser uma linha reta que vai atravessar a cidade e a dividirá em duas regiões sem passar em nenhuma casa. Curo quer que cada região tenha o mesmo número de casas e, pra ser justo com os cidadãos de cada região, a soma das distâncias das casas de cada região até a ferrovia tem que ser a mesma.

O problema é que Hailo, o melhor engenheiro da cidade, não tem certeza se é possível construir uma ferrovia com estas características. Ajude Hailo em seu trabalho.";A entrada contém vários casos de teste e termina com EOF. A primeira linha da entrada tem o número N. Seguem N (1 < N <= 100000) linhas, onde a linha i contem o par Xi, Yi (-1000 <= Xi, Yi <= 1000) que representam as coordenadas da casa i.;Para cada caso de teste o seu programa deve imprimir YES se existir tal fodovia e No se não for possível construí-la.;False;10 / 10;71;8;11.27%
1505;Curo Factories;Matemática;9;"Curolandia tem N fábricas, cada uma de elas tem como nome um número do 0 ate n-1. A fábrica i paga Ci moedas por cada dia de trabalho. Inicialmente, cada fábrica tem 1 trabalhador, o trabalhador na fábrica i deseja salvar Ai moedas antes de suas férias.

O pequeno Curo é o prefeito do Curolandia e gosta da rotação de trabalho nos trabalhadores. É por isso que se um trabalhador trabalha na fábrica i o seguinte dia ele tem que trabalhar na fábrica Gi.

O pequeno Curo deseja saber qual e o mínimo número de dias que tem que esperar ate que todos os trabalhadores tenham moedas suficientes para suas férias. Esse dia o pequeno curo vai dar uma festa grande para eles.";A entrada contem 4 linhas, a linha 1 tem o número N (1 < N < 5000), as linhas 2 a 4 contem N números. O i-ésimo número da linha 2 é Gi (0 < Gi < N), o i-ésimo número da linha 3 é Ci (0 < Ci <= 10) e o i-ésimo número da linha 4 é Ai (0 < Ai < 107).;O programa deve imprimir o mínimo número de dias que tem que esperar o pequeno Curo ate que todos os trabalhadores tenham moedas suficientes para suas férias.;False;9 / 10;184;48;26.09%
1506;Rabito e Bones;Grafos;10;"Rabito e Rayito estão jogando um jogo legal. Eles começam com um grafo conexo bidirecional com pesos (todos os pesos são positivos) e um conjunto de K ossos colocados em alguns dos vértices.

                    Eles começam se revezando com Rabito jogando por primeiro. O jogo consiste em deslocar os ossos através do grafo até o vértice 1. Em sua vez, um dos jogadores pega um subconjunto de pelo menos 1 e no máximo P dos ossos (que não atingiram o vértice 1) e move estes ossos através de uma ou mais das arestas do grafo (os movimentos dos ossos são independentes uns do outros) sujeito a esta condição: ele pode usar uma aresta específica para um osso se, eventualmente, o osso atingir o vértice 1 usando o mínimo possível de tempo (leva A unidades de tempo para mover um osso através de uma aresta de peso A) e se a aresta faz com que este osso, eventualmente, atinja o vértice 1 com a maior quantidade de arestas.

                    Há um osso enorme esperando o vencedor do jogo, assim que sua tarefa é decidir qual dos dois cães vai triunfar neste jogo e ter uma boa refeição (assumindo que ambos os cães jogam com uma estratégia ideal). O perdedor do jogo é, obviamente, o cão que não se pode fazer um movimento.";A primeira linha contém um único inteiro T (T <= 100) que representa a quantidade de casos de teste descritas a seguir. Um caso de teste inicia com uma linha contendo dois inteiros N, M (1 <= N <= 100, 1 <= M <= 2000) que denotam o número de vértices e arestas do grafo, em seguida há M linhas, cada uma com três inteiros u, v, w (1 <= u, v <= N) (0 < w <= 1000000) que representam os vértices da n-ésima aresta e seus pesos. Segue uma linha com dois inteiros K (0 < K <= 1000) e P (0 < P) denotando o número de ossos inicialmente colocados no grafo e o parâmetro P descrito na expecificação do problema. Finalmente uma única linha contendo K inteiros descreventos as posições iniciais dos K ossos.;"Imprima T linhas, uma para cada caso de teste. Se Rabito tem uma estratégia que irá garantir a sua vitório imprima ""Yes"", caso contrário imprima ""No"".";False;10 / 10;99;19;19.19%
1507;Subsequências;Estruturas e Bibliotecas;5;Dado duas sequências, diga se a segunda é uma subsequência da primeira.;A entrada comeca com um inteiro N (0 < N <= 10), o número de casos de teste. Seguem N casos testes. Um caso de teste comeca com uma sequência de caracteres S (S in [a-zA-Z], 0 < |S| < 100000). Segue um inteiro Q (0 < Q <= 1000), o número de queries. As proximas Q linhas sao compostas por uma sequência de carateres R (R in [a-zA-Z], 0 < |R| < 100) cada.;"Para cada querie R, imprima ""Yes"" (sem aspas) se R for uma subsequência de S, ou ""No"" (sem aspas), caso contrario.";False;5 / 10;4562;1697;37.20%
1508;Raio Laser;Ad-Hoc;10;"Certa vez haviam N pontos em um plano com coordenadas inteiras distintas. Eles costumavam viver em perfeita paz, até que, um dispositivo a laser selvagem e sobrenatural apareceu. Esta enorme máquina emite um poderoso raio laser que irá matar todos os pontos em seu alcance.

Mais especificamente, o alcance do raio é um retângulo com altura infinita mas de largura limitada, que pode assumir qualquer valor positivo inferior ou igual a W. Felizmente, o feixe pode ser disparado apenas verticalmente ou horizontalmente (isto é, paralelo ao eixo Ox ou Oy). Qualquer ponto localizado dentro da área do feixe (incluindo suas bordas) é imediatamente queimado.

Os pobres pontos estão preocupados com quais deles serão mortos. Calcule o número de diferentes subconjuntos não vazios de pontos que o laser pode queimar ao disparar um único feixe. Dois subconjuntos são consideradas diferentes se houver um ponto pertencente a um deles, mas não a outro.";"A entrada contém vários casos de teste e termina com EOF. Cada caso de teste é descrito utilizando várias linhas. A primeira linha contém dois inteiros N e W (1 <= N <= 103, 1 <= W <= 109) que representam respectivamente o número de pontos e a langura máxima do raio laser. Cada uma das próximas N linhas descreve as coordenadas xi, yi do n-ésimo ponto (0 <= xi, yi <= 109).

O último caso de teste é seguido por uma linha contendo dois zeros.";Para cada caso de teste imprima uma linha com o número de diferentes subconjuntos não vazios de pontos que podem ser mortos.;False;10 / 10;91;22;24.18%
1509;Contando Ambiguidades;Paradigmas;10;"Enquanto vinham para a Escola de Verão de ônibus, um competidor atento notou uma placa que continha uma propaganda com a seguinte URL:www.programs.healthyfood.ma(ele suspeita que o .ma seja para ""Marte"", mas isto é improvável). Por estarem discutindo as novas features de C++11, o competidor e um amigo pensaram que o ""programs"" na URL fosse relacionado ao resultado da programação de computadores: programas. Porém, acontece que a URL foi infeliz: era, na verdade, a junção de duas palavras: o adjetivo ""pro"", que em inglês significa ""em favor de"", e o substantivo ""grams"", um tipo de legumes usados em pratos de comida. Isto explica o fato de a URL ter levado os dois amigos a uma página Web contendo fotos de mulheres saudáveis, ao invés de tutoriais sobre variadic templates!

Depois de rirem do acontecido, os dois amigos estão curiosos sobre essas ambiguidades em URLs. Eles começaram a olhar para todas as placas na estrada e a escrever as URLs que elas contém. Porém, eles rapidamente obtiveram muitas URLs para verificar - muito mais que um programador aceita fazer ""na mão"". Por isto, eles querem escrever um programa que, data a lista de palavras que eles conhecem, conta de quantas formas distintas uma certa palavra pode ser obtida pela concatenação de uma ou mais palavras da lista.

Ambos são programadores muito habilidosos e já projetaram o algoritmo perfeito para este problema. O principal problema é que os laptops deles estão sem bateria, e eles não querem programar em seus smartphones (não há acesso à Internet nas estradas para acessar um computador com um compilador remotamente). Porque você está sentado próximo a eles, e seu laptop tem bateria para mais de 10 minutos (suficiente, não?) de programação, eles pediram para que você escrevesse tal programa para eles. É claro que eles não contaram a você o algoritmo que projetaram, porque confiam nas suas próprias habilidades de resolução de problemas. Você pode escrever o programa para eles?

Note que um palavra pode ser usada várias vezes no processo de concatenação. Por exemplo, se os amigos conhecem as palavras ""a"" e ""aa"", eles podem formar a palavra ""aaa"" dos seguintes 3 jeitos (aqui, + significa concatenação).


	""a"" + ""a"" + ""a""
	""a"" + ""aa""
	""aa"" + ""a""


Assim, a resposta para este caso seria 3.

Da mesma forma, há duas maneiras de se obter a palavra ""aa"":


	""a"" + ""a""
	""aa""


Note que uma palavra pode ser usada sozinha, se os amigos a conhecem.";"A entrada contém vários casos de teste. Cada caso de teste começa com uma linha contendo um inteiro positivo D (no máximo 105), o número de palavras que os amigos conhecem. As próximas D linhas contém essas palavras. Cada linha contém uma palavra distinta. Depois, há uma linha contendo um inteiro positivo U (no máximo 1000), que é o número de palavras que os competidores escreveram. Após esta linha, há U linhas, cada uma contendo uma dessas palavras.

Toda palavra no arquivo de entrada é composta por no máximo 100 caracteres alfabéticos.";Para cada caso de teste imprima U linhas. A i-ésima linha no arquivo de saída deve conter o número de maneiras distintas de se obter a i-ésima palavra que os dois competidores escreveram pela concatenação de palavras que eles conhecem. Este número pode ser muito grande. Por isto, imprima o resto da divisão da resposta por 109+ 7.;False;10 / 10;270;54;20.00%
1510;O Passeio Turístico;Paradigmas;10;"Skyrk agora está vivendo em uma cidade antiga, cheia de velhas histórias e monumentos para conhecer. Não é nenhuma surpresa que essa cidade se transformou em uma das maiores atrações turísticas do mundo. Infelizmente, é muito difícil de se locomover pela cidade, já que ela é muito antiga e cercada por montanhas, suas ruas são apertadas, cheias de curvas e sobes e desces. No entanto isso se mostrou muito interessante para Skyrk, ele acha que muitos turistas vão preferir ver os pontos turísticos olhando do topo das montanhas ao invés de se aventurarem na antiga cidade. Ele decidiu colocar vários binóculos em alguns lugares da maior montanha do lado da cidade, e claro, cobrar pelo seu uso.

A cidade tem N pontos turísticos, olhando do topo da montanha, eles parecem se alinhar da esquerda para direta. Skyrk colocou M binóculos, cada um cobrindo a visão do ponto turístico A até o B e custando C moedas para usar. Um grupo de turistas chegou para apreciar a vista, e eles querem ver todos os pontos turísticos pagando o menor preço. Skyrk sabe previamente o preço que cada turista está disposto a pagar pelo passeio. De forma a maximizar seus lucros, ele vai contar ao turista que apenas um subconjunto de binóculos estão funcionando, de forma que quando o turista escolher os que ele quer, ele acabe pagando mais.";"A primeira linha contém T (T ≤ 100) – o número de casos teste, após essa linha haverão T casos teste. Cada caso teste começa com uma linha com três inteiros N, M, K (1 ≤ N ≤ 109; 1 ≤ M ≤ 30; 1 ≤ K ≤ 104) – O número de pontos turísticos, binóculos e grupos de turistas, respectivamente. Então haverá M linhas com três inteiros A, B, C (1 ≤ A ≤ B ≤ N; 1 ≤ C ≤ 10) – O primeiro e último ponto turśtico que o binóculo pode ver e seu preço, respectivamente.  Então haverá K linhas com dois inteiros X, Y (1 ≤ X ≤ Y ≤ 109) – haverá um grupo turístico onde o primeiro está disposto a pagar X, o segundo X+1, o terceiro X+2, até o último que está disposto a pagar Y. Cada ponto turístico pode ser visto por pelo menos um binóculo.";"Para cada caso teste imprima uma única linha com ""Case #R: S"" onde R é o número do caso teste (começando de 1) e S é o lucro máximo que Skyrk consegue obter.

Considere o primeiro caso teste, existem 3 pontos turísticos, 4 binóculos e 2 grupos de turistas. O primeiro grupo de turistas é abordado da seguinte forma: O primeiro turista pode pagar no máximo 1 moeda. Não existe nenhum subconjunto que Skyrk possa escolher para satisfazer o turista, logo o turista não faz o passeio e não paga nada. O segundo turista pode pagar até 2 moedas, a única escolha que Skyrk tem é colocar os binóculos 2 e 4 no subconjunto, o turista então escolhe 2 e 4 e paga 2 moedas. O terceiro turista pode pagar até 3 moedas. Skyrk pode colocar os binóculos 1, 2 e 3 no subconjunto, o turista então escolhe binóculos 2 e 3 e paga 3 moedas. O segundo grupo de turistas é abordado da seguinte forma: O primeiro turista pode pagar até 10 moedas. Skyrk pode colocar binóculos 1 e 3 no subconjunto, o turista então escolhe binóculos 1 e 3 e paga 6 moedas. O máximo lucro que Skyrk pode obter é 2+3+6 = 11 moedas..";False;10 / 10;106;14;13.21%
1511;Tabuleiro GCD;Estruturas e Bibliotecas;10;"Dado um grid infinito totalmente setado para o valor zero e Q queries dos tipos:

SET x y d: Seta a posição (x,y) do tabuleiro para o valor d

QUERY x y d: Retorna o gcd (Greatest Common Divisor) de todas as posições do tabuleiro que estão a uma distância de manhattan de no máximo d da posição (x,y).";"A entrada contém vários casos de teste e termina com EOF. A primeira linha de cada caso de teste contém um inteiro Q (1 <= Q <= 105) que representa a quantidade de queries a serem feitas.

As proximas Q linhas contém cada uma query, podendo ser dos seguintes tipos:

SET x y d

QUERY x y d

0 <= |x|, |y| <= 500

0 <= d <= 106";Imprima todas as linhas de saída na sequência, para todos os casos de teste. Para cada query do tipo “QUERY x y d” deverá ser respondido na saida padrão o gcd (Greatest Common Divisor) de todas as posição que estão a uma distância manhattan de no máximo 'd' da posição do tabuleiro (x, y).;False;10 / 10;759;97;12.78%
1512;Azulejos;Matemática;5;"Rafael resolveu trocar os azulejos de sua sala de estar, e para isto fez as medições e comprou N azulejos brancos na loja.

O fato de todos os azulejos serem brancos deixou Rafael um pouco preocupado com o design de sua sala de estar, e então decidiu pintar alguns deles para dar um “ar mais moderno” à sua casa.

Posicionou todos os N azulejos em uma linha reta, e enumerou todos eles de 1 até N, da esquerda para a direita.

Para escolher quais azulejos pintar, pensou na seguinte lógica: Escolheu dois inteiros A e B, e disse que iria pintar todos os azulejos cuja enumeração fosse múltipla de A e/ou B.

Ajude Rafael a descobrir quantos azulejos serão pintados no total.";"Haverá diversos casos de teste. Cada caso de teste contém três inteiros, N, A e B (3 ≤ N ≤ 10⁹, 2 ≤ A, B ≤ N).

O último caso de teste é indicado quando N = A = B = 0, o qual não deverá ser processado.";Para cada caso de teste, imprima uma linha contendo um inteiro, mostrando quantos azulejos serão pintados no final do processo.;False;5 / 10;2395;930;38.83%
1513;Cavalo;Paradigmas;7;"Rafael gosta tanto de jogar xadrez que resolveu inventar novas maneiras de se desafiar. Dessa vez ele resolveu jogar com a peça do cavalo, pois a forma como ela se movimenta pareceu adicionar um pouco de dificuldade ao jogo, segundo Rafael.

O desafio é o seguinte: Há um cavalo e K peões no tabuleiro. Dada uma posição inicial do cavalo e dos peões, qual a menor quantidade de movimentos necessários para capturar os K peões e voltar à posição inicial?

Lembre que a peça do cavalo pode mover-se usando saltos de formato L, ou seja, duas posições para a vertical e uma posição para a horizontal, ou duas posições para a horizontal e uma posição para a vertical. Para capturar um peão, basta ocupar a mesma posição que ele no tabuleiro.";"Haverá diversos casos de teste. Cada caso de teste inicia com três inteiro N, M e K (5 ≤ N, M ≤ 100, 2 ≤ K ≤ 15), representando, respectivamente, a quantidade de linhas e de colunas do tabuleiro, e a quantidade de peões a serem capturados.

As próximas N linhas irão conter M caracteres cada, onde o caractere na linha i e coluna j indica que na posição [i, j] do tabuleiro há:


	'.' uma posição válida onde o cavalo pode pular.
	'#' uma posição inválida onde o cavalo não pode pular.
	'C' a posição inicial do cavalo de Rafael.
	'P' a posição de um dos K peões o qual Rafael deve capturar.


O último caso de teste é indicado quando N = M = K = 0, o qual não deve ser processado.";"Para cada caso de teste, imprima um inteiro, representando a quantidade mínima de saltos que o cavalo de Rafael deve fazer para capturar os K peões e retornar à posição inicial.

É garantido que sempre haverá ao menos uma maneira de capturar todos os peões.";False;7 / 10;636;239;37.58%
1514;Competição;Ad-Hoc;4;"A maioria dos programadores que chegam a escrever competições com exercícios de programação concordam em quatro características que toda competição deve alcançar. Embora nem todas sejam sempre alcançadas, quanto mais melhor. As características são as seguintes:


	Ninguém resolveu todos os problemas.
	Todo problema foi resolvido por pelo menos uma pessoa (não necessariamente a mesma).
	Não há nenhum problema resolvido por todos.
	Todos resolveram ao menos um problema (não necessariamente o mesmo).


Rafael organizou uma competição alguns dias atrás, e está preocupado com quantas dessas características ele conseguiu alcançar com a competição.

Dadas as informações sobre a competição, com o número de participantes, número de problemas, e qual participante resolveu quais problemas, descubra o número de características que foram alcançadas nesta competição.";"Haverá diversos casos de teste. Cada caso de teste inicia com dois inteiros N e M (3 ≤ N, M ≤ 100), indicando, respectivamente, o número de participantes e o número de problemas.

Em seguida, haverá N linhas com M inteiros cada, onde o inteiro da linha i e coluna j é 1 caso o competidor i resolveu o problema j, ou 0 caso contrário.

O último caso de teste é indicado quando N = M = 0, o qual não deverá ser processado.";Para cada caso de teste, imprima uma linha contendo um inteiro, representando quantas das características citadas foram alcançadas na competição.;False;4 / 10;6611;3115;47.12%
1515;Hello Galaxy;Ad-Hoc;1;"Atualmente, no ano de 2114, o conhecimento de que não estamos sozinhos no universo não é novidade, porém um século atrás isto ainda era um mistério. Diversas civilizações na Via Láctea já emitiram algum tipo de sinal provando sua existência, e outras até estabeleceram um contato aberto com a Terra em busca de informações sobre a tal Árvore Hexagonária (afinal, estamos em 2114).

Rafael tem muito interesse pelo assunto, e em um trabalho para a escola se encarregou de descobrir qual foi a civilização mais antiga que enviou um Hello Galaxy para toda a galáxia. Hello Galaxy nada mais é que o primeiro dos passos do Protocolo de Iniciação na Sociedade Via Láctea, PISVL, garantindo que a nova civilização possa entrar em contato com as demais caso necessário.

A mensagem Hello Galaxy traz consigo duas informações básicas: o texto “Hello Galaxy”, que faz parte da tradição, e o nome do planeta da civilização que enviou a mensagem. O CMSVL, Centro de Monitoramento da Sociedade Via Láctea, instalado, por algum motivo, na Terra, recebe tais mensagens, armazenando em um registro o ano em que foi recebida a mensagem e a quantidade de anos que tal mensagem levou para chegar até ali.

A tarefa de Rafael é simples: descobrir quem foi a primeira civilização a enviar a mensagem Hello Galaxy.";"Haverá diversos casos de teste.

Cada caso de teste inicia com um inteiro N (1 ≤ N ≤ 100), que indica quantas mensagens Hello Galaxy foram coletados por Rafael em sua pesquisa.

Em seguida haverão N linhas, cada uma representando uma mensagem. Cada mensagem é representada pelo nome do planeta da civilização, contendo entre 1 e 50 caracteres (somente letras), e dois inteiros A e T (2014 ≤ A ≤ 2113, 1 ≤ T ≤ 1000), representando, respectivamente, o ano em que a mensagem foi recebida no planeta Terra, e a quantidade de anos que tal mensagem levou para chegar do planeta de origem até o planeta Terra.

O último caso de teste é indicado quando N = 0, o qual não deverá ser processado.";Para cada caso de teste, deverá ser impressa uma linha, contendo o nome do planeta da primeira civilização a enviar a mensagem Hello Galaxy. Pode-se supor que não haverá empates.;False;1 / 10;2524;1731;68.58%
1516;Imagem;Strings;4;"Rafael encontrou um novo hobbie: fazer desenhos usando caracteres do teclado. Por mais simples ou limitada que essa nova forma de arte possa parecer, basta criatividade para se fazer os mais diferentes tipos de desenhos.

Após fazer alguns desenhos, Rafael imaginou como seriam se eles fossem redimensionados, porém ter que refazer todo o desenho pareceu meio cansativo. Para isso, Rafael pediu sua ajuda.

Em um redimensionamento, uma imagem com N linhas e M colunas passa a ter A linhas e B colunas, e, dado que as novas dimensões da imagem redimensionada é maior do que as dimensões da imagem original, alguns caracteres terão que se repetir.

Digamos que A seja 3 vezes maior que N. Nesse caso, cada linha terá que se repetir 3 vezes, para que a imagem seja redimensionada de forma correta.

Dado um desenho feito por Rafael, imprima como seria se o desenho fosse redimensionado para uma determinada nova dimensão.";"Haverá diversos casos de teste. Cada caso de teste inicia com dois inteiros N e M (1 ≤ N, M ≤ 50), representando, respectivamente, a altura e a largura do desenho de Rafael.

A seguir haverá N linhas, contendo M caracteres cada, representando o desenho feito por Rafael. Após, haverá dois inteiros A e B (N < A ≤ 100, M < B ≤ 100, A é múltiplo de N, e B é multiplo de M), representando, respectivamente, a nova altura e largura que Rafael deseja que seu desenho tenha.

O último caso de teste é indicado quando N = M = 0, o qual não deverá ser processado.";"Para cada caso de teste, imprima A linhas, contendo B caracteres cada, representando o desenho de Rafael redimensionado.

Após cada caso de teste, imprima uma linha em branco.";False;4 / 10;2809;1361;48.45%
1517;Maçãs;Paradigmas;7;"Rafael resolveu passar o final de semana na fazenda de seu tio, Antônio, e quando percebeu que havia lá uma árvore carregada de maçãs, decidiu fazer uma torta de maçã.

Para fazer a torta, porém, Rafael precisaria pegar o maior número de maçãs possíveis, e para isso pediu ajuda a seu primo. O combinado era: Seu primo subiria na árvore e chacoalharia diversos galhos contendo as maçãs, fazendo com que elas caissem. A medida que as maçãs iam caindo, Rafael estaria no chão com uma cesta e iria pegá-las no meio do caminho entre a árvore e o chão. Como as maçãs caiam com muita velocidade, o impacto com o chão fazia com que elas rachassem, e Rafael decidiu que iria ignorar todas as maçãs que não conseguisse pegar com a cesta.

Podemos representar a situação da seguinte maneira: Rafael está posicionado em uma área de N linhas e M colunas abaixo da árvore, e pode se mover uma posição horizontalmente, verticalmente ou diagonalmente por segundo. Cada maçã cai em uma determinada posição dessa área, digamos [i, j] (linha i, coluna j), e o momento exato em que Rafael deve estar nessa posição para que ela caia dentro de sua cesta é um determinado tempo t.

Dada a posição inicial de Rafael, diga quantas maçãs ele consegue pegar com sua cesta, dentre todas as K maçãs derrubadas por seu primo.";"Haverá diversos casos de teste. Cada caso de teste inicia com três inteiros, N, M e K (3 ≤ N, M ≤ 20, 1 ≤ K ≤ 1000), representando, respectivamente, a quantidade de linhas e colunas da área abaixo da árvore, e o número de maçãs derrubadas por seu primo.

A seguir haverá K linhas, contendo três inteiros cada, Xi, Yi e Ti (1 ≤ Xi ≤ N, 1 ≤ Yi ≤ M, 1 ≤ Ti ≤ 2*K), representando, respectivamente, a linha e coluna em que a maçã i caiu, e o tempo exato em que Rafael deve estar em tal posição para que ela caia em sua cesta.

A sequência de valores Ti dada na entrada é não-decrescente, ou seja, Ti-1 ≤ Ti, para todo 2 ≤ i ≤ K. Não há duas maçãs que caiam no mesmo lugar ao mesmo tempo.

A seguir haverá dois inteiros X e Y (1 ≤ X ≤ N, 1 ≤ Y ≤ M), indicando a linha e a coluna em que Rafael estará no tempo 0.

O último caso de teste é indicado quando N = M = K = 0, o qual não deverá ser processado.";Para cada caso de teste, imprima uma linha contendo um inteiro, representando qual o número máximo de maçãs que Rafael consegue pegar com sua cesta.;False;7 / 10;1353;586;43.31%
1518;Tartarugas;Ad-Hoc;10;"Rafael, em seu primeiro dia de trabalho no zoológico da cidade, foi incubido da tarefa aplicada a todos os novatos: cuidar das tartarugas. Rafael achou aquilo tão fácil que resolveu tirar um cochilo em seu turno, porém quando acordou se viu em uma situação complicada, uma vez que as tartarugas estavam fugindo.

Como está em seu primeiro dia de trabalho, Rafael não quer decepcionar o chefe do zoológico, portanto está decidido a parar todas as tartarugas na menor quantidade de tempo possível.

O terreno em que eles estão pode ser visto como um plano, e Rafael está na posição [x, y]. A cada segundo, Rafael consegue se mover no máximo duas posições no sentido horizontal ou vertical, ou no máximo uma posição no sentido diagonal.

Rafael tem que parar três tartarugas, as quais estão nas posições [x1, y1], [x2, y2] e [x3, y3], respectivamente. As tartarugas, por sua vez, podem se mover apenas uma posição por segundo, e em apenas uma direção predeterminada: Cima ([xi, yi+1]) ou Direita ([xi+1, yi]). Elas estão sempre se movendo.

Para parar uma tartaruga Rafael precisa estar na mesma posição que tal tartaruga. Rafael pode escolher parar as tartarugas na ordem que ele desejar. Descubra a menor quantidade de tempo necessário para que ele pare as três tartarugas.";"Haverá diversos casos de teste. Cada caso de teste é iniciado com dois inteiros x e y (1 ≤ x, y ≤ 1000), indicando que Rafael está na posição [x, y] do plano.

A seguir haverá três linhas, cada uma contendo dois inteiros xi e yi (1 ≤ xi, yi ≤ 1000), indicando que a i-ésima tartaruga está na posição [xi, yi], e um caractere ci, indicando a direção que a i-ésima tartaruga está correndo: 'D' – Direita, ou 'C' – Cima.

O plano em que Rafael e as tarturugas estão se estende da posição [1, 1] (canto inferior esquerdo) até a posição [10⁵, 10⁵] (canto superior direito), portanto há bastante espaço para a perseguição. Duas tartarugas nunca estarão no mesmo lugar ao mesmo tempo.

O último caso de teste é indicado por x = y = 0, o qual não deverá ser processado.";Para cada caso de teste imprima um inteiro, representando a quantidade mínima de tempo necessária para capturar todas as tartarugas, na ordem desejada por Rafael.;False;10 / 10;244;92;37.70%
1519;Abreviações;Strings;7;"Blogs são muito populares hoje em dia, e há inclusive ferramentas que te permitem manter o seu blog sem que você pague nada por isso. Rafael resolveu então criar um blog, onde irá arquivar todas as suas experiências diárias de sua vida agitada.

Por mais que estas ferramentas sejam gratuitas, há porém um limite de caracteres que se pode escrever por dia, e Rafael está preocupado que essa limitação o irá impedir de contar suas melhores experiências. Decidiu então usar um sistema de abreviação de palavras em seus posts.

O sistema de abreviações funciona da seguinte maneira: para cada letra, é possível escolher uma palavra que inicia com tal letra e que aparece no post. Uma vez escolhida a palavra, sempre que ela aparecer no post, ela será substituída por sua letra inicial e um ponto, diminuindo assim o número de caracteres impressos na tela.

Por exemplo, na frase: “hoje eu visitei meus pais”, podemos escolher a palavra “visitei” para representar a letra 'v', e a frase ficará assim: “hoje eu v. meus pais”, economizando assim cinco caracteres. Uma mesma palavra pode aparecer mais de uma vez no texto, e será abreviada todas as vezes. Note que, se após uma abreviação o número de caracteres não diminuir, ela não deve ser usada, tal como no caso da palavra “eu” acima.

Rafael precisa que seu post tenha o menor número de caracteres possíveis, e por isso pediu a sua ajuda. Para cada letra escolha uma palavra, de modo que ao serem aplicadas todas as abreviações, o texto contenha o menor número de caracteres possíveis.";"Haverá diversos casos de teste. Cada caso de teste é composto de uma linha, contendo uma frase de até 10⁴ caracteres. A frase é composta de palavras e espaços em branco, e cada palavra é composta de letras minúsculas ('a'-'z'), e contém entre 1 e 30 caracteres cada.

O último caso de teste é indicado quando a linha dada conter apenas um “.”, o qual não deverá ser processado.";"Para cada caso de teste, imprima uma linha contendo a frase já com as abreviações escolhidas e aplicadas.

Em seguida, imprima um inteiro N, indicando o número de palavras em que foram escolhidas uma letra para a abreviação no texto. Nas próximas N linhas, imprima o seguinte padrão “C. = P”, onde C é a letra inicial e P é a palavra escolhida para tal letra. As linhas devem ser impressas em ordem crescente da letra inicial.";False;7 / 10;2170;525;24.19%
1520;Parafusos e Porcas;Estruturas e Bibliotecas;6;"Pedro está trabalhando em um novo emprego em uma loja de parafusos e porcas. Toda semana ele irá receber novas encomendas de parafusos mistos em grandes caixas e precisa saber onde ele deve armazenar esses produtos.

				Mango, que é supervisor de Pedro, pediu-lhe para organizar todos os parafusos e porcas em um rack enorme, de forma que seja fácil de responder onde é possível encontrar cada predeterminado lote de parafusos e quanto de cada um destes lotes a loja tem. 

				Pedro recebe todos os parafusos e porcas em caixas etiquetadas com o intervalo de tamanho dos produtos. Por exemplo, duas caixas com os respectivos intervalos (1, 2) e (4, 8) representam lotes de produtos com tamanho {1, 2, 4, 5, 6, 7, 8}. Um número de parafuso e porca pode estar presente em mais de uma caixa, e ele aparece na lista uma vez para cada intervalo. Por exemplo, três caixas com os respectivos intervalos (1, 3), (2, 4) e (3,5) representam lotes de parafusos e porcas com tamanho {1, 2, 2, 3, 3, 3, 4, 4, 5}.";"A entrada contém vários casos de teste e termina com EOF. Cada caso de teste é composto por várias linhas. A primeira linha contém um inteiro positivo N (N < 100) que indica a quantidade de caixas de parafusos. Seguem N linhas, cada uma delas com dois valores X e Y (1 ≤ X < Y ≤ 100) que representam os tamanhos dos lotes de parafusos e porcas presentes naquela caixa. A próxima linha de entrada conterá um único inteiro positivo Num (1 ≤ Num ≤ 100), que indica o número que Mango deseja pesquisar após todos os produtos serem organizados na estante ou rack.

Obs. A estante ou rack possui prateleiras enumeradas de 0 a P, sendo que este P não deve ser superior a 10000.";Cada caso de entrada deverá produzir uma única linha de saída, indicando as posições da prateleira nas quais o parafuso de tamanho Num se encontra ou indicando que não foi possível encontrar o parafuso, conforme o exemplo abaixo.;True;6 / 10;4970;1683;33.86%
1521;O Culpado;Ad-Hoc;4;"Guerra de bolinha de papel é uma das brincadeiras mais clássicas do tempo do colegial, e algumas pessoas gostam tanto que iniciam essas guerras em plena faculdade. As regras são simples: Mire e acerte alguém com uma bola de papel.

Os professores, por outro lado, não acham tal brincadeira tão produtiva, uma vez que isso tira a atenção da aula sendo dada. Pior ainda, é quando um aluno acerta o professor com a bola de papel.

O professor dessa vez decidiu investigar quem participava da brincadeira, e disse que estaria satisfeito se ao menos um deles fosse descoberto, para servir de exemplo aos outros.

O processo de investigação do professor acontece da seguinte forma: inicia-se perguntando a um aluno K se ele participava da brincadeira ou, caso não participasse, que dissesse quem participava. Se o aluno K se entregasse, a investigação terminaria. Caso contrário, ele diria o número de outro aluno, e o processo se repetiria com o professor fazendo a pergunta para este novo aluno, até que alguém se entregue.

O professor disponibilizou uma lista contendo a resposta de todos os alunos para a sua pergunta, e pediu sua ajuda para descobrir, se ele iniciasse a investigação no aluno K, quem acabaria se entregando?

É garantido que alguém acabará se entregando.";"Haverá diversos casos de teste. Cada caso de teste inicia com um inteiro N (3 ≤ N ≤ 50).

A seguir, haverão N inteiros ni (1 ≤ ni ≤ N, para todo 1 ≤ i ≤ N), onde cada inteiro ni significa que o aluno i entregou o aluno ni.

Ou seja, se o terceiro número for 4, significa que o terceiro aluno entregou o quarto aluno. Se, ao contrário, o número for o dele mesmo, significa que ele se entregou.

Em seguida haverá um inteiro K (1 ≤ K ≤ N), indicando quem foi o aluno com o qual o professor iniciou sua investigação.

O último caso de teste é identificado quando N = 0, o qual não deve ser processado.";Para cada caso de teste, deverá ser impressa uma linha, contendo um inteiro, indicando qual o aluno que terminou se entregando.;False;4 / 10;1369;713;52.08%
1522;Jogo das Pilhas;Paradigmas;7;"Claudio inventou um novo jogo, chamado de Jogo das pilhas, e quer submetê-lo ao próximo concurso de jogos da URI (União Recreativa Internacional). Apesar de muito divertido, o jogo parece ser muito difícil de ganhar, logo Claudio pediu sua ajuda para avaliar se algumas instâncias do jogo podem ser vencidas.

O jogo das pilhas é individual, e é jogado com três pilhas, inicialmente com o mesmo número de cartas. Cada carta tem um valor numérico inteiro de 0 até 9. O jogador pode, a qualquer momento ver o valor de qualquer carta, mas só pode jogar com as cartas que estão no topo das pilhas. Em cada rodada, o jogador pode remover qualquer combinação de cartas que estejam no topo da pilha (pode escolher 1, 2 ou até 3 cartas) cuja soma dos valores seja múltipla de 3. O jogo é ganho quando todas as cartas forem removidas das pilhas. Se alguma carta não puder ser removida, perde-se o jogo.";A entrada é composta por várias instâncias Cada instância é iniciada por um inteiro N (0 ≤ N ≤ 100), que identifica o número de cartas em cada pilha. A entrada termina quando N = 0. Cada uma das N linhas seguintes contém três inteiros A, B e C, que descrevem os valores numéricos das cartas em um nível da pilha (0 ≤  A, B, C ≤  9). As pilhas são descritas do topo até o fundo.;Para cada instância, imprima uma linha contendo o número 1 se o jogador pode ganhar a instância do jogo ou o número 0 se o jogo for impossível.;False;7 / 10;2273;530;23.32%
1523;Estacionamento Linear;Estruturas e Bibliotecas;7;"Após muito tempo juntando dinheiro, Rafael finalmente conseguiu comprar seu carro (parcelado, é claro). Chega de pegar ônibus, agora sua vida será mais fácil. Pelo menos isso é o que ele pensava, até ouvir falar do estacionamento perto da faculdade onde ele decidiu estacionar o carro todos os dias.

O estacionamento tem apenas um corredor, com largura o suficiente para acomodar um carro, e profundidade suficiente para acomodar K carros, um atrás do outro. Como este estacionamento só tem um portão, só é possível entrar e sair por ele.

Quando o primeiro carro entra no estacionamento, o mesmo ocupa a posição próxima à parede, ao fundo do estacionamento. Todos os próximos carros estacionam logo atrás dele, formando uma fila. Obviamente, não é possível que um carro passe por cima de outro, portanto só é possível que um carro saia do estacionamento se ele for o último da fila.

Dados o horário de chegada e saída prevista de N motoristas, incluindo Rafael, diga se é possível que todos consigam estacionar e remover seus carros no estacionamento citado.";"Haverá diversos casos de teste. Cada caso de teste inicia com dois inteiros N e K (3 ≤ N ≤ 10⁴, 1 ≤ K ≤ 10³), representando o número de motoristas que farão uso do estacionamento, e o número de carros que o estacionamento consegue comportar, respectivamente.

Em seguida haverá N linhas, cada uma contendo dois inteiros Ci e Si (1 ≤ Ci, Si ≤ 10⁵), representando, respectivamente, o horário de chegada e saída do motorista i (1 ≤ i ≤ N). Os valores de Ci são dados de forma crescente, ou seja, Ci < Ci+1 para todo 1 ≤ i < N.

Não haverá mais de um motorista que chegam ao mesmo tempo, e nem mais de um motorista que saiam ao mesmo tempo. É possível que um motorista consiga estacionar no mesmo momento em que outro motorista deseja sair.

O último caso de teste é indicado quando N = K = 0, o qual não deverá ser processado.";Para cada caso de teste imprima uma linha, contendo a palavra “Sim”, caso seja possível que todos os N motoristas façam uso do estacionamento, ou “Nao” caso contrário.;False;7 / 10;6940;1508;21.73%
1524;Fila do Bandejão;Paradigmas;3;"Um fenômeno muito comum na fila do bandejão (também conhecido como restaurante universitário) é ver uma pessoa recém chegada entrar no interior na fila em vez de no final. Isso ocorre sempre que tal pessoa encontra alguém de seu grupo já na fila.

Interessado em estudar esse fenômeno, um amigo pediu para você escrever um programa para estudar os grupos presentes na fila. Podemos supor que existem K grupos diferentes e toda pessoa pertence a exatamente um desses grupos. O tamanho de um grupo é definido pela distância entre as duas pessoas mais distantes dentro do grupo. Se o grupo consiste de apenas uma pessoa, seu tamanho é zero. Considerando que os grupos se organizam de forma que a soma dos tamanhos dos K grupos seja mínima, seu programa deve determinar qual é o valor dessa soma.";A entrada é composta por diversas instâncias e termina com o final de arquivo (EOF). A primeira linha de cada instância contém os inteiros N, indicando o número de pessoas na fila, e K, indicando o número de grupos (1 ≤ K < N ≤ 1.000). Na linha seguinte são apresentados N − 1 inteiros, a2, . . ., aN, (0 ≤ a2 ≤ ··· ≤ aN ≤ 1.000.000) indicando as posições de cada pessoa em relação à primeira pessoa da fila A posição da primeira pessoa é omitido, pois é sempre zero.;Para cada instância, imprima uma única linha contendo o valor mínimo que a soma dos tamanhos dos K grupos pode ter.;False;3 / 10;1550;650;41.94%
1525;Gruntz;Grafos;8;"Rafael gostava tanto de um jogo que jogava quando criança, que decidiu desenhar um mapa com as características do jogo e ver se conseguia completá-lo.

O mapa consiste de N linhas e M colunas, que divide o mapa em uma grade de N * M células. Cada uma dessas células, com exceção da célula central, contém uma seta desenhada, que indica para uma de quatro direções – Esquerda, Cima, Direita ou Baixo.

O objetivo do jogo é posicionar o personagem em alguma das células que constituem a borda do mapa, e fazer que o mesmo chegue até o centro do mapa, marcado com um x. As regras para se mover no jogo seguem a lógica das setas: O personagem só pode mover na direção que a seta aponta.

Ou seja, se o personagem está na célula [x, y] (linha x, coluna y), e nesta célula há uma seta apontada para a direita, a única célula que ele poderá alcançar dali será a célula [x, y+1], caso a mesma esteja dentro dos limites do mapa (caso não esteja, ele sairá do mapa, e perde o jogo).

Para facilitar, Rafael decidiu que ele poderia fazer K inversões de setas. Ao inverter uma seta, a mesma passa a apontar a direção oposta a qual ela apontava. Ou seja, se ela apontava para a Direita, ela apontará para a Esquerda, e vice-versa. O mesmo vale para Cima e Baixo.

Rafael agora pediu sua ajuda: É possível posicionar o personagem em alguma borda do mapa, e fazer com que ele chegue até a célula central, fazendo no máximo K inversões de setas?";"Haverá diversos casos de teste. Cada caso de teste inicia com três inteiros N, M e K (3 ≤ N, M < 100, 0 ≤ K ≤ 100, N e M são ímpares), representando, respectivamente, a quantidade de linhas e a quantidades de colunas do mapa, e o número máximo de inversões permitidas.

A seguir haverá N linhas, cada uma contendo M caracteres, que representarão o mapa que Rafael desenhou. O caractere da linha i e coluna j indica que na célula [i, j] do mapa há:


	'>' – Uma seta apontando para a Direita.
	'<' – Uma seta apontando para a Esquerda.
	'^' – Uma seta apontando para a Cima.
	'v' – Uma seta apontando para a Baixo.
	'x' – A célula de destino (a qual estará sempre no centro do mapa).


O último caso de teste é identificado quando N = M = K = 0, o qual não deve ser processado.";Para cada caso de teste deverá ser impressa uma linha, contendo a palavra “Sim” caso seja possível posicionar o personagem em uma das células da borda do mapa de tal forma que ele seja guiado até a célula de destino, fazendo no máximo K inversões de setas, ou “Nao” caso contrário.;False;8 / 10;536;182;33.96%
1526;Transportando Lanches;Matemática;10;"Um dos critérios para uma maratona de programação se considerada um sucesso é que os competidores não passem fome. Preocupada com isso, a organização da maratona escolheu um dos melancias para se dedicar a tarefa de ir buscar os lanches no fornecedor. Para facilitar o transporte dos lanches o melancia recebeu um carrinho de mão.

Mesmo com o carrinho, essa é uma tarefa muito cansativa, por isso a organização permitiu ao melancia comer um dos lanches que ele transporta a cada 100 metros percorridos (indo ou voltando). Além disso, a cada 100 metros, foram preparadas cabanas onde é possível armazenar os lanches temporariamente. Dessa forma os lanches não precisam ser transportados diretamente do fornecedor ao local da competição.

Para saber se o melancia comeu mais lanches do que deveria, a organização quer que você escreva um programa que determine a quantidade máxima de lanches que podem ser entregues. Você pode supor que o melancia parte do fornecedor e come um lanche sempre que permitido.";A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância consiste de uma linha com três inteiros, L, D, e C (10 ≤ L, D, C ≤ 100.000.000) indicando, respectivamente, a quantidade de lanches comprados, a distância entre o fornecedor e o local da competição em hectômetros e quantos lanches cabem no carrinho.;"Para cada instância, imprima a quantidade máxima de lanches que podem ser entregues, se tal quantidade for positiva, ou ""impossivel"", caso contrário.";False;10 / 10;485;14;2.89%
1527;Guildas;Estruturas e Bibliotecas;7;"Rafael está jogando um novo e excitante jogo de RPG, e acaba de notar a existência de algo chamado Guilda. Para aqueles que não sabem, Guilda se trata de um grupo de jogadores que se unem com um objetivo em comum dentro do jogo, tirando assim vantagem do trabalho em equipe.

O jogo que Rafael joga tem um sistema de GVG (Guilda versus Guilda) bem disputado, e logo percebeu que deveria tomar algumas providencias para se sair bem nessas batalhas.

O sistema de GVG funciona da seguinte maneira: a batalha acontece entre duas guildas, e vence a guilda que tiver o maior número de pontos. O número de pontos de uma guilda é dado pela soma do número de pontos de todos os jogadores presentes na guilda. Cada jogador tem um número de pontos, que corresponde ao seu nível atual.

Considere que inicialmente, todos os jogadores fazem parte de uma guilda, contendo apenas o próprio jogador. A união entre duas guildas faz com que todos os jogadores de ambas as guildas passem a participar apenas de uma guilda, e a outra deixa de existir.

Dada uma lista de ações no decorrer do jogo, entre elas união entre duas guildas e batalhas entre duas guildas, diga o número de vezes em que a guilda em que Rafael estava saiu vitoriosa de uma batalha.";"Haverá diversos casos de teste. Cada caso de teste inicia com dois inteiros N e M (1 ≤ N ≤ 10⁵, 1 ≤ M ≤ 5 * 10⁵), representando o número de jogadores dentro do jogo, e o número de ações no decorrer do jogo, respectivamente.

Em seguida haverá N inteiros Pi (1 ≤ Pi ≤ 100), onde o i-ésimo inteiro representa o número de pontos que o i-ésimo jogador tem, para todo 1 ≤ i ≤ N. Rafael é o jogador número 1, sempre.

Em seguida, haverá M linhas, contendo três inteiros cada, Q, A e B (1 ≤ Q ≤ 2, 1 ≤ A, B ≤ N), representando o tipo da ação, e as duas guildas envolvidas na ação. Se Q for igual a 1, significa que a guilda que contém o jogador A e a guilda que contém o jogador B estão se unindo. Se Q for igual a 2, significa que a guilda que contém o jogador A e a guilda que contém o jogador B participarão de uma batalha.

O último caso de teste é indicado quando N = M = 0, o qual não deverá ser processado.";Para cada caso de teste imprima uma linha, contendo um inteiro, indicando o número de batalhas em que a guilda em que Rafael está participando ganhou uma batalha. Note que empates não são considerados vitórias.;False;7 / 10;2741;864;31.52%
1528;Cordas Emaranhadas;Ad-Hoc;10;"Quatro crianças estão brincando segurando duas cordas. Inicialmente, as crianças estão posicionadas nos quatro vértices de um quadrado, númerados de 1 a 4, assim como mostra a figura abaixo:



No começo da brincadeira, as crianças nas posições 1 e 4 seguram uma corda, e as crianças nas posições 2 e 3 seguram outra. A partir disso, as crianças realizam uma sequência de movimentos que podem ser de três tipos:


	Movimento + : As crianças nas posições 1 e 2 trocam de lugares, onde a criança na posição 2 passa sua corda por cima da criança na posição 1.
	Movimento - : As crianças nas posições 1 e 2 trocam de lugares, onde a criança na posição 1 passa sua corda por cima da criança na posição 2.
	Movimento * : As crianças giram no sentido horário. Quem está na posição 1 vai para a posição 2, quem está na posição 2 vai para a posição 3, quem está na posição 3 vai para a posição 4, e quem está na posição 4 vai para a posição 1.


Você deve desenvolver um programa para prever o final da brincadeira: Após uma dada sequência de movimentos da brincadeira, as cordas podem ser totalmente separadas assim estavam como inicialmente sem que as crianças troquem de lugares?

John Conway é uma das crianças participando da brincadeira. Ele é um garoto muito esperto e decidiu te dar uma dica para resolver o problema: após a sequência de movimentos, as cordas não podem ser totalmente separadas se e somente se a sequência de movimentos é equivalente a uma sequência de movimentos alternantes. Uma sequência de movimentos é alternante se ela alterna os movimentos '+' e '-' entre um movimento de '*', utilizando o formato ""+++...+++*---...---*+++..."". Por exemplo, ""+++"", ""-*++*-"" e ""+++*----*"" são sequências alternantes. As sequências alternantes são sempre iniciadas com um movimento de '+' ou '-', e não podem possuir movimentos '*' consecutivos, portanto as sequências ""*---*++"" e ""++**--"" não são alternantes. A sequência ""+-++*+"" não é alternante, porém é equivalente a sequência alternante ""+*-*"", pois as duas sequências deixam as duas cordas emaranhadas do mesmo jeito.";A entrada é composta por vários casos de teste. Cada caso de teste consiste de uma linha contendo uma sequência de até 30 movimentos, indicados pelos caracteres '+', '-', e '*'.;"Para cada caso de teste, imprima uma linha com a palavra ""YES"" caso as cordas possam ser totalmente separadas após a sequência de movimentos, caso contrário, imprima uma linha com a palavra ""NO"".";True;10 / 10;55;6;10.91%
1529;Max, o Louco;Grafos;8;"No ano de 2042, após o surgimento da malévola União das Repúblicas Independentes (URI), a humanidade se deparou com uma grande escassez de recursos. Água e gasolina se tornaram bens muito valiosos, sendo que boa parte da tecnologia se perdeu após a URI tomar o poder mundial.

Você faz parte de um grupo da resistência, que tem o objetivo de tirar o poder da URI. Max, o herói da resistência, precisa realizar várias missões que envolvem viagens de carro entre cidades. Existem postos de gasolina em cada cidade, apesar dos altos e variados preços. Como os recursos financeiros da resistência são limitados, você foi convocado a escrever um programa que calcule qual a quantidade mínima de créditos da união necessários para completar cada uma das missões de Max.";"A entrada é composta por vários casos de teste. Casa caso de teste é iniciado por três inteiros, N, M e T, (1 ≤ N ≤ 10,  1 ≤ M ≤ 20, 1 ≤ T ≤ 50) correspondentes ao número de cidades na rota, o número de estradas e a capacidade do tanque do carro de Max, em litros. A entrada acaba quando N = M = T = 0.

As M linhas na sequência descrevem as ligações entre as cidades. Cada linha contém os inteiros A, B e C, (1 ≤ C ≤ 1000) que indicam a existência de uma rota (ida e volta) entre as cidades A e B, com um consumo de C litros de gasolina. Devido ao estado precário das estradas, é possível que determinadas cidades sejam inacessíveis. Não existe mais de uma rota direta entre qualquer par de cidades.

As próximas N linhas descrevem o custo, em créditos da união por litro, da gasolina em cada cidade. A primeira linha descreve o custo da gasolina na primeira cidade, a segunda linha descreve o custo na segunda cidade, e assim por diante.";Para cada caso de teste, seu programa deverá imprimir uma linha contendo o menor custo possível para viajar da cidade 1 até a cidade N. Caso não for possível viajar entre as cidades, imprima -1.;False;8 / 10;560;197;35.18%
1530;Quantas Substrings?;Strings;9;"Iniciamente, há uma string vazia. Seu programa deve realizar dois tipos de instruções:


	Adicionar um caractere entre 'a' e 'z' ao final da string.
	Calcular quantas substrings diferentes a string possui.


Por exemplo, a string ""aba"" possui 5 substrings diferentes: ""a"", ""ab"", ""aba"", ""b"", ""ba"".";A entrada é composta por vários casos de teste. Cada caso de teste consiste de uma linha contendo uma sequência com até 2.105 caracteres. Cada caractere representa uma instrução que deve ser feita. Um caractere entre 'a' e 'z' indica que deve ser realizado uma instrução do tipo 1 com esse caractere. Um caractere '?' representa uma instrução do tipo 2.;Para cada instrução do tipo 2, imprima uma linha contendo o número de substrings diferentes que a string possui.;False;9 / 10;801;206;25.72%
1531;Fibonacci de Novo!;Matemática;9;"A famosa sequência de Fibonacci pode ser definida da seguinte maneira:


	Fib( 1 ) = Fib( 2 ) = 1
	Fib( N ) = Fib( N-1 ) + Fib( N-2 ), para N > 2


Sua tarefa é simples, calcular o valor do resto de Fib( Fib( N ) ) por M.";A entrada é composta por vários casos de teste e termina com EOF. Cada caso de teste consiste de uma linha com dois inteiros N e M (1 ≤ N ≤ 109, 2 ≤ M ≤ 106).;Para cada caso de teste, imprima uma linha contendo um inteiro igual ao resto de Fib( Fib( N ) ) por M.;False;9 / 10;2375;325;13.68%
1532;Arremesso de Bolas;Ad-Hoc;5;"Seus amigos inventaram uma nova competição: Arremesso de bolas. O objetivo é simples, basta arremessar uma bola de forma que ela caia dentro de um buraco N metros a sua frente.

Quando a bola é arremessada, digamos que à uma velocidade inteira V, ela permanece no ar por V metros e então quica. Ela repete esse processo V vezes. Após ela quicar V vezes, ela muda sua velocidade para V-1, e o processo anterior se repete, até que a velocidade seja igual a 0.

Por exemplo, se a bola for arremessada a uma velocidade igual a 3, ela quicará nos seguintes pontos: 3, 6, 9, 11, 13, 14; conforme pode ser visto na imagem.



Você consegue arremessar a bola à uma velocidade inteira menor ou igual a V. Dada a distância do buraco, diga se é possível que você arremesse a bola e que ela quique exatamente no buraco, acertando-o.";"Haverá diversos casos de teste. Cada caso de teste contém dois inteiros, N e V (1 ≤ N ≤ 1000, 1 ≤ V ≤ 30), representando a distância do buraco e a velocidade máxima com a qual você consegue arremessar a bola.

O último caso de teste é indicado quando N = V = 0, o qual não deverá ser processado.";Para cada caso de teste, imprima uma linha contendo a palavra “possivel” (sem aspas), caso seja possível arremessar a bola a uma velocidade menor ou igual a V de forma que ela quique no buraco, ou “impossivel”, caso contrário.;True;5 / 10;1238;637;51.45%
1533;Detetive Watson;Ad-Hoc;3;"John Watson, mesmo após anos trabalhando ao lado de Sherlock Holmes, nunca conseguiu entender como ele consegue descobrir quem é o assassino com tanta facilidade. Em uma certa noite, porém, Sherlock bebeu mais do que devia e acabou contando o segredo a John.

“Elementar, meu caro Watson”, disse Sherlock Holmes. “Nunca é o mais suspeito, mas sim o segundo mais suspeito”. Após descobrir o segredo, John decidiu resolver um crime por conta própria, só para testar se aquilo fazia sentido ou se era apenas conversa de bêbado.

Dada uma lista com N inteiros, representando o quanto cada pessoa é suspeita, ajude John Watson a decidir quem é o assassino, de acordo com o método citado.";"Haverá diversos casos de teste. Cada caso de teste inicia com um inteiro N (2 ≤ N ≤ 1000), representando o número de suspeitos.

Em seguida haverá N inteiros distintos, onde o i-ésimo inteiro, para todo 1 ≤ i ≤ N, representa o quão suspeita a i-ésima pessoa é, de acordo com a classificação dada por John Watson. Seja V o valor do i-ésimo inteiro, 1 ≤ V ≤ 10000.

O último caso de teste é indicado quando N = 0, o qual não deverá ser processado.";Para cada caso de teste imprima uma linha, contendo um inteiro, representando o indice do assassino, de acordo com o método citado.;False;3 / 10;7188;3922;54.56%
1534;Matriz 123;Iniciante;2;Leia um valor inteiro N que é o tamanho da matriz que deve ser impressa conforme o modelo fornecido.;A entrada contém vários casos de teste e termina com EOF. Cada caso de teste é composto por um único inteiro N (3 ≤ N  < 70), que determina o tamanho (linhas e colunas) de uma matriz que deve ser impressa.;Para cada N lido, apresente a saída conforme o exemplo fornecido.;False;2 / 10;19285;10017;51.94%
1535;Números Casal-Solteirão-Solteirona;Estruturas e Bibliotecas;10;"Pode qualquer número ser expresso como uma subtração de dois quadrados? Os números, que podem ser expressos de tal forma, são chamados de números ""square-couple"" ou, traduzindo, casal quadrado. Seu trabalho é descobrir:

a) Se um número é um número casal quadrado. 
b) Se o número for casal quadrado então encontre esse forma de expressá-lo.
c) Descubra quantos números casal quadrado estão dentro de um determinado intervalo (incluindo os números das pontas).";Cada conjunto de entrada é dado por uma única linha. Cada conjunto de entrada pode conter um ou dois números inteiros de 32 bits com sinal. A entrada é terminada por EOF (Fim de Arquivo).;"Se houver apenas um único número N em uma única linha, imprima dois números inteiros não negativos a e b, tal que a * a - b * b = N. Se o número não pode ser expresso em tal formato, então imprima a mensagem “Bachelor Number.” em uma única linha caso esse número seja par e imprima a mensagem “Spinster Number.” caso esse número seja ímpar.
					
Se existirem dois números n1 e n2 na entrada então imprima quantos números ""bachelor"" estão entre n1 e n2 (incluindo n1 e n2). Observe que (n1 ≤ n2 e (n2 - n1) ≤ 1000000).";False;10 / 10;448;95;21.21%
1536;Libertadores;Ad-Hoc;3;"A Copa Libertadores da América é a principal competição de futebol entre clubes profissionais da América do Sul, organizada pela Confederação Sul-Americana de Futebol (CONMEBOL). Ela é conhecida por ter um regulamento muito complicado, principalmente nas fases das oitavas, quartas e semi-final.

Nessas fases são jogadas partidas de ida e volta no sistema mata-mata. Ganha quem fizer a maior pontuação no acumulado das duas partidas, sendo 3 pontos para vitória e 1 ponto em caso de empate, ambos por partida. Em caso de igualdade na pontuação, são critérios de desempate:

1) saldo de gols (número de gols a favor menos o número de gols contra).

2) mais gols marcados na casa do adversário.

3) disputa por pênaltis.

Todos os critérios devem ser aplicados considerando o acumulado das duas partidas.

Será que você consegue elaborar um algoritmo que, dados os resultados das partidas de ida e de volta, ele identifica o time vencedor?";A primeira linha de entrada indica o número de casos de teste N (1 ≤ N ≤ 100). Cada caso de teste é composto por dois placares: o resultado da partida 1 e o resultado da partida 2. O placar é representado pelo formato M x V, onde M (1 ≤ M ≤ 100) é o número de gols do time mandante da partida e V (1 ≤ V ≤ 100) é o número de gols do time visitante. Como em cada caso de teste existem 2 partidas, considere que o Time 1 é sempre o mandante da primeira e o visitante da segunda e vice-versa para o Time 2.;"Para cada caso de teste, imprima uma linha contendo ""Time 1"" (sem aspas) caso o Time 1 seja o vencedor do mata-mata, ""Time 2"" (sem aspas) caso o Time 2 seja o vencedor do mata-mata e ""Penaltis"" (sem aspas) caso não seja possível identificar o vencedor no tempo convencional.";False;3 / 10;5058;2730;53.97%
1537;Fila do Banco;Matemática;5;"André, Bruno e Carlos são amigos a um bom tempo, e se tem uma coisa que eles sabem um sobre o outro é o quanto eles são pontuais. André é conhecido por ser sempre o último a chegar em um compromisso entre o três, e Carlos é sempre o primeiro. Bruno sempre chega antes de André, mas nunca antes de Carlos.

Chegou o fim do mês e os três precisam ir ao banco para pagar algumas contas. Contando com eles, há N pessoas na fila para usar o caixa. Sabendo o quanto eles são pontuais entre si, de quantas maneiras possíveis a fila do banco pode estar ordenada?

Lembre-se que as regras acima só se aplicam entre eles, por exemplo, Carlos sempre chega antes que Bruno e André, mas pode chegar depois de outras pessoas na fila. Duas ordenações de fila são consideradas diferentes se ao menos uma pessoa está em um lugar diferente nas duas ordenações.";"Haverá diversos casos de teste. Cada caso de teste inicia com um inteiro N (3 ≤ N ≤ 10⁵), indicando o número de pessoas na fila, incluindo André, Bruno e Carlos.

O último caso de teste é indicado quando N = 0.";Para cada caso de teste imprima uma linha contendo um inteiro, representando o número de maneiras que a fila do banco pode estar ordenada. Como o resultado pode ser um valor muito alto, imprima o resultado com resto de divisão em 1000000009.;False;5 / 10;1264;525;41.53%
1538;Sequência Alienígena;Estruturas e Bibliotecas;4;"Recentemente foi descoberto um planeta intitulado como Gliese 581g. Ele tem apenas três vezes a massa da Terra, e está à 20 anos-luz de distancia, orbitando uma estrela da constelação de Libra conhecida como Gliese 581, uma anã vermelha. Astrônomos da Universidade da Califórnia e da Carnegie Institution de Washington afirmam que o planeta é o primeiro a apresentar potencial real para conter vida. Eles disseram que essa descoberta só foi possível através da análise de antigas escrituras egípcias, remanescentes da biblioteca de Alexandria. Foram encontradas anotações com uma sequencia estranha, que supostamente indicaria as posições dos planetas com vida no universo. Cada elemento é traduzido em coordenadas tridimensionais utilizando um algoritmo extremamente complexo descrito nas anotações, no entanto o algoritmo para cálculo da sequencia se perdeu por causa das páginas queimadas no incêndio da biblioteca.

O livro contém apenas os oito primeiros valores dessa sequência, detectada nas páginas legíveis das escrituras, e para conseguir encontrar as outras coordenadas a Universidade da Califórnia lançou um desafio mundial para estudantes de matemática, engenharia e computação. Dados os primeiros elementos da sequência, deve-se escrever um algoritmo capaz de calcular qualquer elemento da série. Os elementos conhecidos são {B, BA, CB, BAA, BCB, CBA, DAB, BAAA}.

Acredita-se que seja possível encontrar qualquer elemento da série, cujos elementos parecem estar escritos em um base numérica alienígena.";Cada linha de entrada contém um inteiro N (1 ≤ N ≤ 100000), que descreve a posição na sequência alienígena do elemento a ser calculado. A entrada é finalizada quando N = 0.;Para cada valor lido, deve ser impresso na tela o elemento na n-ésima posição da sequência alienígena, sempre com uma quebra de linha.;False;4 / 10;655;293;44.73%
1539;Empresa de Telecom;Grafos;7;"Cesário é um analista da Algar Telecom, e está trabalhando em um projeto de análise da rede de telefonia móvel. Ele terá que desenvolver um sistema que analise o alcance de cada uma das antenas dessa rede, e que defina os custos operacionais para o envio de dados de de dispositivo para outro, baseando-se na distancia entre as antenas. O objetivo minimizar esses custos, encontrando a melhor rota disponível. Os cálculos também visam descobrir se é possível estabelecer um caminho entre dois dispositivos, de forma a detectar graves problemas na rede.


Mesmo com todos os dados disponíveis para processamento, Cesário tem enfrentado problemas na implementação devido a alta complexidade desse algoritmo, por isso você foi contratado para ajudá-lo. O seu objetivo é analisar todas as antenas da rede da Algar Telecom, observando as suas coordenadas e raios de alcance; verificar quais as antenas possíveis de serem acessadas (dentro do raio de alcance); e calcular o menor caminho entre duas antenas determinadas.";"A entrada é composta de vários casos de testes. Sendo que, a primeira linha contém um inteiro não negativo, N (2 ≤ N ≤ 100), que indica o número de antenas disponíveis para interconexão na rede. Seguem-se N linhas, cada uma contendo três números inteiros X (0 ≤ X ≤ 1000), Y (0 ≤ Y ≤ 1000) e R (1 ≤ R ≤ 1000), que descrevem a posição da antena, coordenadas X e Y, e o seu raio de alcance R (separados por espaço em branco). A linha seguinte contém outro inteiro não negativo, C (1 ≤ C ≤ 100), que descreve a quantidade de cálculos à serem realizados nessa rede. As C linhas seguintes contém 2 inteiros cada, A1 (1 ≤ A1 ≤ N) e A2 (1 ≤ A2 ≤ N), que descrevem o índice das antenas a serem utilizadas e também separadas por espaço em branco.

O fim das entradas é sinalizado por um número 0.";Para cada caso de teste, deve-se imprimir C linhas, sendo que cada uma representa a distância do menor caminho entre as duas antenas. Os valores devem ser INTEIROS, ou seja, a parte real deve ser truncada (não arredondada), e sempre com uma quebra de linha. Caso não seja identificada uma rota entre as antenas, deve ser impresso o valor -1.;False;7 / 10;1734;567;32.70%
1540;Planejando a Energia;Ad-Hoc;5;"Você está participando de um comitê que irá ajudar a planejar o crescimento da energia elétrica no Brasil, garantindo assim que as usinas consigam fornecer a energia necessária no futuro.

Para isso você tem as seguintes informações:


	durante o ano de 2010 o consumo médio do brasileiro foi de 104.326 GWh.
	em 2013 o consumo foi de 127.755 GWh.


Você deve determinar a taxa de crescimento anual para diferentes situações e previsões futuras, considerando o fato deste crescimento ser linear. Nesse caso, a taxa foi de 7.809,66 GWh/ano.";"A primeira linha da entrada contém um número inteiro N (1 ≤ N ≤ 1000) representando o total de casos de testes.

As N linhas seguintes são compostas de 4 números inteiros A, B (B > 0), C, D (D > 0) separados por espaço. O número A representa o ano, o número B representa o consumo do ano A. O número C representa um outro ano e o número D representa o consumo de C.";Para cada caso de teste deverá ser impresso a taxa de crescimento anual com apenas duas casas decimais, separadas por vírgula e truncadas, ou seja, sem arredondamentos.;False;5 / 10;3735;850;22.76%
1541;Construindo Casas;Iniciante;2;"Sr PI é um construtor muito famoso na cidade de Programolândia. Ele precisa de sua ajuda para encontrar os melhores terrenos da cidade, para realizar assim a construção de vários projetos de casas que possui.

Considere que ele tenha por exemplo, um projeto para construir uma casa de 8 metros por 10 metros, e a legislação do município permite a construção de no máximo 100% do terreno. Como todos os terrenos nesta cidade são perfeitamente quadrados e o valor dos lados da casa são apenas uma referência para a área total a ser construída (80 metros quadrados), o sr PI precisaria de um terreno de 8.994 metros, o que simplificado daria como resultado 8 metros e o tamanho real da casa seria de 64 metros quadrados. Se a legislação permitisse a utilizar 50% do terreno, o mesmo teria que ter 160 metros para que 50% dele fosse 80 metros quadrados, o suficiente para uma casa de 8 x 8 metros (64 metros quadrados). No primeiro caso  de teste, como o percentual para construir é de apenas 20%, o terreno teria que ter 20 metros de lado para que 1/5 deste terreno tivesse o tamanho de 80 metros quadrados. Ajude o sr PI a determinar o tamanho minimo do terreno.";A entrada é composta de vários casos de testes. Cada caso de teste é composto de três números inteiros A, B e C ( > 0 e ≤ 1000) separados por um espaço. Estes números representam as medidas da casa (A e B) e o percentual máximo liberado para construir nesse bairro (C). Um único valor igual a 0 indica o fim das entradas.;Você deverá informar um número inteiro, o qual representa a medida do lado do terreno. Este valor deverá ser truncado caso necessário.;False;2 / 10;12634;7044;55.75%
1542;Lendo Livros;Ad-Hoc;4;"Você começou a competir com seu amigo para ver quem consegue ler mais livros em menos tempo. Seu amigo lia muito mais que você, até o dia que você percebeu que ele lia somente livros muito finos.

Então você resolveu contar as páginas dos livros, aumentando também a quantidade de páginas lidas por dia. Agora você lê 5 páginas por dia e termina 16 dias antes do que se estivesse lendo 3 páginas por dia. Neste cenário, quantas páginas tem o livro?";A entrada é composta de vários casos de testes. Cada caso de teste é composto de três números Q (0 < Q < 20), D (0 < D < 20) e P (0 < P < 20) separados por um espaço. Sendo que Q é a quantidade de páginas lidas por dia. D é o número de dias que você adiantaria a leitura caso estivesse lendo a quantidade de páginas informada pelo número P. Um único valor zero indica o fim da entrada.;Para cada caso de teste deverá ser impresso a quantidade de páginas do livro. (Utilize o plural corretamente e não use acentos). Este número deverá ser um inteiro, o qual representa a quantidade de página. Este valor deverá ser truncado caso necessário.;False;4 / 10;11392;3282;28.81%
1543;Quadro Premiado;Paradigmas;8;"Você está em um programa de televisão, e tem uma ótima chance de ganhar muito dinheiro. Trata-se de um jogo com algumas regras peculiares, e o montante de dinheiro resultante dependerá apenas da sua esperteza, podendo-se até sair perdendo caso se jogue mal.

O jogo funciona da seguinte maneira: há um quadro, com N linhas e M colunas, e em cada posição deste quadro há um inteiro positivo, representando uma quantia em dinheiro. Em cada uma dessas posições você tem a opção de colocar um dos seguintes sinais:


	'+' - Significa que o valor daquela posição deve ser somado à seu prêmio.
	'-' - Significa que o valor daquela posição deve ser subtraído do seu prêmio.
	'.' - Significa que tal posição deve ser ignorada.


A vida seria muito simples se você pudesse colocar '+' em todas as posições, portanto há duas regras adicionais ao jogo: para cada linha do quadro, você deve preencher as posições com um dos padrões de sinais montados pelos organizadores do jogo; e para cada coluna do quadro, não é permitido que duas posições adjacentes verticalmente tenham o mesmo sinal (se aplica aos sinais '+' e '-'). É possível usar o mesmo padrão mais de uma vez, desde que não desrespeitando a segunda regra acima.

Veja um exemplo na imagem abaixo, onde os padrões são: “++”, “--”, “.+” e “+.”.



Considere que há sempre ao menos uma maneira de se completar o quadro.

Como o jogo é novo, eles deixaram que você usasse seu computador para te ajudar na decisão, sem saber que você era um programador. Escreva um algoritmo que lhe diga qual a soma máxima que é possível alcançar no jogo.";"Haverá diversos casos de teste. Cada caso de teste inicia com dois inteiros, N e M (1 ≤ N, M ≤ 100), indicando o número de linhas e de colunas do quadro, respectivamente.

A seguir haverá N linhas, contendo M inteiros cada, representando os valores do quadro. Seja v o valor de qualquer posição do quadro, 1 ≤ v ≤ 100.

A seguir haverá um inteiro K (1 ≤ K ≤ 100), indicando o número de padrões. Em seguida haverá K linhas, cada uma com M caracteres, representando cada um dos padrões, conforme a simbologia descrita no enunciado.

O último caso de teste é indicado quando N = M = 0, o qual não deverá ser processado.";Para cada caso de teste imprima uma linha, contendo um inteiro, representando a soma máxima que é possível alcançar se os padrões forem escolhidos de forma ótima.;True;8 / 10;557;192;34.47%
1544;O Último Dígito Não-Zero;Matemática;8;Neste problema, a você serão dados dois números inteiros decimais N e M. Você terá que encontrar o último dígito não zero de NPM. Isto significará M permutações de N em um determinado momento.;O arquivo de entrada contém vários casos de teste. Cada caso de teste é composto por dois inteiros N (0 ≤ N ≤ 20000000), M (0 ≤ N). A entrada é terminada por EOF (final de arquivo).;Para cada caso de teste deve ser impresso um único dígito, que é o último dígito diferente de zero de NPM. Por exemplo, se NPM  for 720, então o último dígito não zero é 2 e portanto, neste caso a saída deve ser 2.;False;8 / 10;1274;372;29.20%
1545;Cartões II;Paradigmas;9;"Wanderley, após descobrir que Alberto utilizava-se ilicitamente de um programa para ajuda-lo, decidiu parar de jogar o jogo dos cartões. Agora, Alberto passa suas tardes jogando o jogo sozinho. A versão individual do jogo é muito semelhante à original. Um conjunto com um número par de cartões contendo números inteiros é disposto sobre uma mesa, um ao lado do outro, formando uma sequência. Alberto pode pegar um dos dois cartões das pontas, que é computado na soma. A seguir, Alberto descarta um dos cartões que agora está em uma das pontas, e assim sucessivamente, até que os cartões acabem.

Alberto tem como objetivo maximizar o número total de pontos que ele consegue nos cartões que não descarta, somando os valores dos cartões escolhidos. Você deve escrever um programa que, dada a sequência de cartões, determine o maior número de pontos que Alberto consegue obter.";Cada caso de teste é descrito em duas linhas. A primeira linha contém um inteiro par N (2 ≤ N ≤ 104), que indica o número de cartões sobre a mesa. A segunda contém N inteiros, que descrevem a sequência de cartões. Cada um dos N inteiros cabem em um inteiro de 32 bits.;Para cada caso de teste seu programa deve imprimir uma única linha, contendo um único inteiro, o maior número de pontos que Alberto consegue obter.;False;9 / 10;921;213;23.13%
1546;Feedback;Ad-Hoc;1;"Muitos alunos de diversas universidades conhecem o portal de programação IRU. Este portal possui milhares de problemas de programação disponíveis. Diariamente a equipe do IRU recebe diversos feedbacks (elogios, bugs, dúvidas, sugestões, ...) que precisam primeiramente ser atribuídos para membros da equipe resolver.

Como a equipe é muito ocupada e não tem tempo para classificar estes feedbacks, você foi convidado a escrever um programa que faça isso e mostre quem será o membro responsável por resolver e responder o feedback.

Os membros responsáveis em cada setor são:


	Elogios: Rolien
	Bugs: Naej
	Dúvidas: Elehcim
	Sugestões: Odranoel";O primeiro valor a ser lido é o número de casos de teste N (1 < N < 100). Cada caso de teste representa um dia de trabalho respondendo feedbacks. Cada caso de teste inicia com K (1 < K < 50), indicando o número de feedbacks recebidos naquela data. Seguem K linhas indicando a categoria de cada um dos feedbacks, conforme mostrado acima (1, 2, 3 ou 4).;Para cada caso de teste você deve imprimir o nome do membro da equipe responsável por responder o feedback.;False;1 / 10;6473;4382;67.70%
1547;Adivinha;Ad-Hoc;1;"O professor Genesio recebeu várias camisetas da OBI (Organização dos Bacharéis Intelectuais) para doar a seus alunos de Ciência da Computação. Para fazer a distribuição destas camisetas ele organizou os alunos de cada turma do curso em pequenos grupos (de no máximo 10 pessoas) e definiu que faria o sorteio de uma camiseta para cada um dos grupos. Como Genesio não quer perder muito tempo com este sorteio, ele pediu que você o ajudasse com um programa que determinasse quem foi o aluno ganhador de acordo com a seguinte regra: O primeiro de cada grupo a acertar um número escolhido pelo professor obviamente ganha a camiseta, mas se ninguém acertar este número, ganha a camiseta o primeiro que chegar o mais próximo deste número.

Não faz diferença quem do grupo o professor escolhe para tentar iniciar a adivinhação. Este sempre será o aluno número 1, e assim sucessivamente.";A primeira linha de entrada contém um inteiro N que determina a quantidade de casos de teste, ou de camisetas que serão sorteadas. Cada caso de teste é composto por duas linhas. A primeira linha contém dois valores inteiros QT (4 ≤ QT ≤ 10) e S (1 ≤ S ≤ 100) separados por um espaço, que indicam respectivamente a quantidade de alunos do grupo e o número secreto que deve ser adivinhado. A segunda linha contém cada um dos QT valores, separados por um espaço.;Para cada caso de teste, seu programa deve imprimir um número inteiro que indica a posição do ganhador da camiseta, conforme as regras descritas acima.;False;1 / 10;5558;2947;53.02%
1548;Fila do Recreio;Estruturas e Bibliotecas;1;"Na escola onde você estuda, a hora do recreio é a mais aguardada pela grande maioria dos alunos. Não só porque as vezes as aulas são cansativas, mas sim porque a merenda servida é muito boa, preparada por um chefe italiano muito caprichoso.

Quando bate o sinal para a hora do recreio, todos os alunos saem correndo da sua sala para chegar o mais cedo possível na cantina, tanta é a vontade de comer. Um de seus professores notou, porém, que havia ali uma oportunidade.

Utilizando um sistema de recompensa, seu professor de matemática disse que a ordem da fila para se servir será dada não pela ordem de chegada, mas sim pela soma das notas obtidas em sala de aula. Assim, aqueles com maior nota poderão se servir antes daqueles que tem menor nota.

Sua tarefa é simples: dada a ordem de chegada dos alunos na cantina, e as suas respectivas notas na matéria de matemática, reordene a fila de acordo com as notas de matemática, e diga quantos alunos não precisaram trocar de lugar nessa reordenação.";"A primeira linha contém um inteiro N, indicando o número de casos de teste a seguir.

Cada caso de teste inicia com um inteiro M (1 ≤ M ≤ 1000), indicando o número de alunos. Em seguida haverá M inteiros distintos Pi (1 ≤ Pi ≤ 1000), onde o i-ésimo inteiro indica a nota do i-ésimo aluno.

Os inteiros acima são dados em ordem de chegada, ou seja, o primeiro inteiro diz respeito ao primeiro aluno a chegar na fila, o segundo inteiro diz respeito ao segundo aluno, e assim sucessivamente.";Para cada caso de teste imprima uma linha, contendo um inteiro, indicando o número de alunos que não precisaram trocar de lugar mesmo após a fila ser reordenada.;False;1 / 10;10613;5748;54.16%
1549;Dividindo a Coca;Geometria Computacional;4;"Um grupo de N amigos foi a um restaurante almoçar. Embora cada pessoa escolheu um prato diferente para comer, todos decidiram que iriam beber Coca-Cola. O grupo pediu então uma garrafa de L ml de Coca-Cola, e deve agora dividir o conteúdo da garrafa entre as N pessoas de tal forma que todas as pessoas recebam partes iguais da bebida.

Há um copo vazio para cada pessoa, que deve ser preenchido com o refrigerante que aquela pessoa irá beber. Todos os N copos são iguais, e podem ser descritos como um tronco de um cone cuja altura é H cm, cuja base menor é uma circunferência de raio b cm e cuja base maior é uma circunferência de raio B cm, como indicado na imagem.


Indicação de copos preenchidos com Coca-Cola até a altura h cm

Sua tarefa é ajudar o grupo a dividir a garrafa de Coca-Cola. Para tal, você deve encontrar a altura h de cada copo de tal forma que, se cada copo for preenchido com refrigerante até a altura h cm, então todas as pessoas irão receber a mesma quantia da bebida. Considere que nenhum copo será preenchido com uma quantia de refrigerante maior que sua capacidade.";A primeira linha de entrada contém um inteiro C que determina a quantidade de casos de teste. Cada caso de teste inicia com uma linha contendo dois inteiros, N e L (1 ≤ N ≤ 100, 1 ≤ L ≤ 108 ), indicando o número de pessoas no grupo e a quantia de Coca-Cola que deve ser dividida, em mililitros. A segunda linha contém três inteiros b, B e H (1 ≤ b ≤ B ≤ 100, 1 ≤ H ≤ 100), indicando o raio da base menor e maior do copo, assim como sua altura. Todas as medidas são dadas em centímetros.;Para cada caso de teste, imprima o valor de h tal que cada copo deve ser preenchido até a altura h cm. Arredonde e imprima o resultado com exatamente 2 casas decimais.;True;4 / 10;1695;579;34.16%
1550;Inversão;Grafos;6;"Pedro é um garoto curioso que gostava de eletrônica. Certo dia, o menino estava mexendo no laboratório de sua escola e encontrou uma caixa cheia de pequenos aparelhos eletrônicos feitos por outros alunos em anos anteriores.

Dentro dessa caixa havia um aparelho que possuía apenas um visor e dois botões. Esse visor apresentava um número inteiro. Mexendo nos botões, Pedro descobriu para que servia cada um deles. O primeiro botão adicionava uma unidade ao número no visor. O segundo botão invertia os dígitos do número, por exemplo, 123 invertido resulta em 321 e 150 invertido resulta em 51 (ignora-se os zeros a esquerda).

Inicialmente, o visor apresentava o número A. Após a descoberta da função dos botões, Pedro quer saber como fazer o número do visor mudar de A para um número maior igual a B. O seu trabalho nesse problema é ajudar Pedro a descobrir qual é o número mínimo de apertos de botão para que o número no visor passe a ser igual a B.";A entrada é iniciada por um inteiro T, 0 < T ≤ 500, que indica a quantidade de casos de teste a ser processados. Segue-se T linhas cada uma contendo dois inteiros A e B, 0 < A < B < 10000, indicando respectivamente o número inicial no visor e o número que deve ser mostrado no visor depois de apertar os botões.;Para cada caso de teste, o programa deve imprimir um inteiro indicando o número mínimo de apertos de botão para que o número do visor passe de A para B.;False;6 / 10;4055;1384;34.13%
1551;Frase Completa;Strings;3;"Seu professor de português não para de trazer coisas novas para a sala, e hoje não foi diferente. Existe uma cidade, segundo seu professor, onde as pessoas levam muito a sério a forma como elas se comunicam. Em especial, quando duas pessoas estão conversando, elas pensam muito nas frases antes de dizê-las, de forma a garantir que tal frase seja uma “frase completa”, ou talvez uma “frase quase completa”.

Considerando o nosso alfabeto de 26 letras, uma frase é dita “completa” quando ela contém todas as letras do alfabeto contidas nela. De modo semelhante, uma frase é dita “quase completa” se ela não é completa, porém contém ao menos metade das letras do alfabeto contidas nela. Quando uma frase não é “completa” e nem “quase completa”, ela é dita “mal elaborada”.

Seu professor lhe deu uma tarefa muito difícil: dadas várias frases trocadas entre vários habitantes da cidade citada, diga em qual das categorias acima a frase se encaixa.";"A primeira linha contém um inteiro N, indicando o número de casos de teste a seguir.

Cada caso de teste contém uma linha, contendo letras minúsculas, espaços em branco e/ou vírgulas. O número de caracteres de cada linha é no mínimo 3 e no máximo 1000, contando com os espaços.";"Para cada caso de teste, imprima uma linha contendo uma das seguintes frases: “frase completa”, quando a frase é considerada completa; “frase quase completa”, quando a frase não é completa, mas é considerada quase completa; ou “frase mal elaborada”, quando ela não é completa e nem quase completa.";False;3 / 10;8930;3456;38.70%
1552;Resgate em Queda Livre;Grafos;5;"Ó, meu Deus! Um grupo de pessoas está caindo em queda livre! Elas saltaram todas exatamente ao mesmo tempo de vários aviões que estavam exatamente à mesma altura. A intenção era realizar o maior e mais belo salto sincronizado da História. No entanto, o malévolo Loki, para se deleitar com a insignificância humana, sabotara os paraquedas, e agora a única esperança está numa ação conjunta do Homem-Aranha com o Homem-de-Ferro. Como ambos são muito nerds, notaram que as pessoas estavam caindo todas num mesmo plano paralelo ao solo, a despeito da resistência do ar e de outros fatores. Então, bolaram um plano infalível. Primeiro, o aracnídeo unirá todas as pessoas através de cabos de teia entre elas. Uma vez que não haja pessoa que não esteja conectada ao grupo, o playboy poderá eletromagnetizar o grupo todo e, segurando na mão de uma apenas das pessoas do grupo, pousar todas elas em segurança.

Mas não há muito tempo para divagações. O Homem-Aranha precisa agir rápido, o que no caso dele significa gastar o mínimo possível de teia. Para tanto, o Homem-de-Ferro em seu screen projetou numa malha cartesiana o plano em que as pessoas estão, usando o centímetro como unidade de medida, e obteve as coordenadas de cada pessoa na malha. Agora, J.A.R.V.I.S. está computando qual o mínimo necessário de teia de que o Homem-Aranha precisará. Dependendo da resposta, o Homem-de-Ferro não esperará pelo garoto e improvisará alguma outra peripécia.";A entrada é constituída por vários casos de teste. A primeira linha de entrada contém um inteiro C que determina a quantidade de casos de teste. Cada caso de teste começa com um inteiro positivo n (n ≤ 500), o qual representa o número de pessoas no grupo. Seguem, então, n linhas, cada uma designando uma pessoa do grupo pelas suas coordenadas x e y na malha (0 ≤ x, y ≤ 104).;Para cada caso de teste, seu programa deverá imprimir uma linha contendo o valor com precisão de duas casas decimais correspondente ao comprimento mínimo de teia, em metros, necessário para se conectarem todas as pessoas do grupo. Atente para que o separador das casas decimais seja . (ponto), não , (vírgula).;False;5 / 10;3606;1132;31.39%
1553;Perguntas mais Frequentes;Ad-Hoc;2;"Muitos sites na internet adicionam uma sessão chamada “Perguntas mais Frequentes” que, como o nome já diz, contém as perguntas mais feitas pelos usuários que utilizam o site.

O portal do URI costuma receber muitas perguntas de seus usuários, então Neilor imaginou que seria uma boa ideia adicionar uma sessão de Perguntas mais Frequentes no site. Como o Neilor anda muito ocupado ultimamente, ele pediu a sua ajuda para adicionar essa sessão.

Dados os identificadores de perguntas feitas pelos usuários, diga o número de perguntas que serão adicionadas na nova sessão do site. Uma pergunta é classificada como “frequente” quando ela é feita ao menos K vezes.";"Haverá diversos casos de teste. Cada caso de teste inicia com dois inteiros N e K (1 ≤ N ≤ 1000, 1 ≤ K ≤ 100), indicando o número de perguntas realizadas, e o número de vezes que uma pergunta deve ser feita para ser considerada “frequente”, respectivamente.

Em seguida haverá N inteiros P (1 ≤ P ≤ 100), cada um indicando o número de uma determinada pergunta.

O último caso de teste é indicado quando N = K = 0, o qual não deverá ser processado.";Para cada caso de teste imprima uma linha, contendo um inteiro, indicando o número de perguntas que serão adicionadas na nova sessão do site.;False;2 / 10;4508;2094;46.45%
1554;Bilhar N+1;Matemática;3;"Existem muitas variantes de jogos de bilhar. A UFFS (União Federal dos Fãs de Sinuca) resolveu desenvolver uma nova variante, denominada N + 1.

Essa variante consiste em, numa mesa de bilhar padrão, tacar a bola branca para acertá-la na bola mais próxima dela, dentre as N possíveis. O jogo é vencido pelo jogador que completar mais acertos após 50 jogadas.

Como a dificuldade do jogo está em descobrir qual das N bolas é a mais próxima da branca, sua tarefa é escrever um programa que ajude os juízes da partida.";Existem vários casos de teste. A primeira linha contém um inteiro C que determina a quantidade de casos de teste que vem a seguir. Para cada caso de teste, a entrada começa com um inteiro N (1 ≤ N ≤ 50), que define o número de bolas disponíveis, além da branca. As próximas N + 1 linhas possuem dois inteiros, x e y, separados por um espaço em branco, indicando a posição (x, y) das bolas no plano da mesa, uma bola por linha (0 < x < 1420 mm e 0 < y < 2840 mm). A primeira linha indica a posição da bola branca. As demais linhas indicam a posição das bolas 1, 2, 3, . . . , N-1, N nesta ordem.;Para cada caso de teste deve ser mostrada uma linha contendo apenas o número da bola que está mais próxima da branca. A margem de erro aceitável é de 0,01 mm. Havendo empate, deve-se mostrar aquela de menor número. Sempre finalize uma linha com o caractere nova linha (\n).;False;3 / 10;2368;981;41.43%
1555;Funções;Matemática;1;"Na última aula de matemática, Rafael, Beto e Carlos aprenderam algumas novas funções matemáticas. Cada um deles se identificou com uma função em especial, e resolveram competir para ver quem tinha a função de maior resultado.

A função que Rafael escolheu é r(x, y) = (3x)² + y².

Já Beto escolheu a função b(x, y) = 2(x²) + (5y)².

Carlos, por sua vez, escolheu a função c(x, y) = -100x + y³.

Dados os valores x e y, diga quem escolheu a função com o maior resultado.";A primeira linha de entrada contém um inteiro N que determina a quantidade de casos de teste. Cada caso de teste consiste em dois inteiros x e y (1 ≤ x, y ≤ 100), indicando as variáveis a serem inseridas na função.;Para cada caso de teste imprima uma linha, contendo uma frase, indicando quem ganhou a competição. Por exemplo, se Rafael ganhar a competição, imprima “Rafael ganhou”. Assuma que nunca haverá empates.;False;1 / 10;12988;7816;60.18%
1556;Removendo Letras;Strings;6;"João desafiou Pedro em um jogo envolvendo sequências de letras.

No início, é mostrado aos jogadores uma sequência de letras. Cada jogador deve tentar usar essa sequência para formar outras sequências. Para isso, é permitido remover algumas letras da sequência, sem alterar a ordem. O jogador que conseguir formar mais sequências ganha o jogo.

Pedro gostaria de sua ajuda para ganha de João. Sua tarefa é mostrar para Pedro todas as sequências distintas, em ordem alfabética, que ele pode formar durante o jogo.";A entrada contém vários casos de teste. Cada caso de teste consiste de uma linha contendo uma sequência a ser usada no jogo. A sequência é formada apenas por caracteres minúculos e pode possuir até 1000 caracteres.;Para cada teste, a saída consiste de várias linhas, contendo todas as sequências que podem ser formadas por Pedro durante o jogo. É garantido para todas as entradas que não haverá mais de 1000 sequências possíveis de ser formadas. Imprima uma linha em branco após cada caso de teste.;False;6 / 10;2795;901;32.24%
1557;Matriz Quadrada III;Iniciante;5;Escreva um algoritmo que leia um inteiro N (0 ≤ N ≤ 15), correspondente a ordem de uma matriz M de inteiros, e construa a matriz de acordo com o exemplo abaixo.;A entrada consiste de vários inteiros, um valor por linha, correspondentes as ordens das matrizes a serem construídas. O final da entrada é marcado por um valor de ordem igual a zero (0).;Para cada inteiro da entrada imprima a matriz correspondente, de acordo com o exemplo. Os valores das matrizes devem ser formatados em um campo de tamanho T justificados à direita e separados por espaço, onde T é igual ao número de dígitos do maior número da matriz. Após o último caractere de cada linha da matriz não deve haver espaços em branco. Após a impressão de cada matriz deve ser deixada uma linha em branco.;False;5 / 10;19602;7231;36.89%
1558;Soma de Dois Quadrados;Ad-Hoc;5;"Quais números inteiros podem ser representados por uma soma de dois inteiros ao quadrado?

É essa a pergunta que seu programa deve responder!

Por exemplo, o número 41 pode ser representado como (-4)2 + 52 = 41, já o número 7 não pode ser representado da mesma maneira.";A entrada é composta por várias linhas, cada linha contém um inteiro com módulo menor ou igual a 10000.;"Para cada linha, imprima ""YES"" se o número pode ser representado por uma soma de dois inteiros ao quadrado, caso contrário imprima ""NO"".";False;5 / 10;8071;2479;30.71%
1559;2048;Ad-Hoc;5;"Esse ano, o jogo conhecido como 2048 se tornou muito popular na internet. Veja a seguir uma imagem do jogo:



As teclas direcionais são usadas para realizar jogadas (cima, baixo, esquerda e direita). A cada vez que uma tecla é pressionada, os blocos numerados tentam deslizar pela matriz caso haja espaço. No exemplo da imagem acima, se a tecla para esquerda for pressionada, 5 blocos irão se mover (8, 2, 16, 2, 32).

Além de tentar deslizar, blocos adjacentes com o mesmo número se juntam em um único bloco com um número dobrado caso tentem deslizar na direção certa. No exemplo da imagem acima, se a tecla para baixo for pressionada, dois blocos 2 irão se transformar em um bloco 4 e dois blocos 32 irão se transformar em um bloco 64.

Durante o jogo, além de fazer as jogadas, surgem aleatoriamente blocos na matriz com números iguais a potências de 2. O objetivo é fazer os blocos se juntarem para que um bloco com número 2048 seja formado. Quando isso acontece, o jogador vence o jogo e não é possível fazer mais jogadas.

Porém, também pode acontecer do jogador não ter mais jogadas possíveis antes de formar o número 2048. No exemplo da imagem, apertar a tecla para a direita não é uma jogada válida, pois nenhum bloco pode se mover ou se juntar a outro bloco.

Sua tarefa nesse problema é dizer quais são as jogadas válidas para uma determinada situação do jogo.";A entrada é iniciada por uma linha que contém o número de casos de teste. Para cada caso de teste, a entrada consiste em 4 linhas contendo uma matriz quadrada de dimensão 4. Os números da matriz são iguais a 0 para indicar que não bloco na posição, ou são iguais a potências de 2 entre 2 e 2048 inclusive.;Para cada teste, a saída consiste de uma linha contendo todas as jogadas possíveis para a entrada. As jogadas são indicadas por DOWN (baixo), LEFT (esquerda), RIGHT (direita) e UP (cima). As jogadas devem ser escritas em ordem alfabética. Caso não haja nenhuma jogada possível, imprima NONE.;True;5 / 10;3468;976;28.14%
1560;Energia dos Triângulos;Geometria Computacional;7;Em um plano há N pontos pretos e M pontos brancos, sem trios de pontos colineares. A energia de um triângulo é igual a K2, onde K é igual ao número de pontos brancos no interior do triângulo. Qual é a soma da energia de todos os triângulos que podem ser formados pelos pontos pretos?;A entrada contém vários casos de teste. Cada caso de teste começa por um linha com dois inteiros N e M (1 ≤ N, M ≤ 100), representando o número de pontos pretos e brancos respectivamente. Após a primeira linha, seguem N + M linhas com as coordenadas inteiras X, Y (0 ≤ X, Y ≤ 10000) dos pontos pretos e brancos. As N primeiras linhas representam os pontos pretos e as M últimas linhas representam os pontos brancos.;Para cada teste, a saída consiste de uma linha contendo a soma das energias dos triângulos formados pelos pontos pretos.;False;7 / 10;1168;426;36.47%
1561;Relógio Binário;Ad-Hoc;3;"Alguns programadores gostam de ser estranhos e usam relógios binários como o relógio da imagem abaixo:

                    

                    Há também programadores que gostam de inventar questões para competições online, porém não gostam de escrever textos detalhados e longos para as questões.

                    Sua tarefa nesse problema é desenhar o relógio da imagem em um dado horário.";A entrada é composta por vários casos de teste. Cada caso de teste é composto por uma linha conténdo um horário no formato HH:MM (0 ≤ HH < 12 e 0 ≤ MM < 60). A entrada termina com final de arquivo (EOF).;Para cada teste, a saída é composta por um desenho do relógio no horário dado na entrada (o desenho deve seguir o mesmo formato dos desenho dos exemplos). Imprima uma linha em branco após cada desenho.;True;3 / 10;1550;657;42.39%
1562;Escolhendo as Duplas;Grafos;10;"Uma professora quer dividir todos os alunos de uma sala em duplas para a realização de um trabalho em grupo. Nessas horas, há muita briga entre os alunos para escolher as duplas, porque muitos alunos querem fazer dupla com os melhores alunos da sala.

A professora decidiu dessa vez escolher as duplas de uma forma diferente. Cada aluno poderá dizer à professora um outro aluno com o qual queira fazer uma dupla. Após isso, a professora escolherá as duplas de forma com que todas as duplas satisfaçam pelo menos o desejo de um dos alunos da dupla.

Agora acho que você já sabe qual será seu trabalho neste problema. Dada a lista de desejos dos alunos, imprima a lista de duplas que a professora deve escolher.";A entrada é composta por vários casos de teste. Cada caso de teste é composto por duas linhas. A primeira linha de um caso de teste contém um inteiro N (2 ≤ N ≤ 10000) igual ao número de alunos da sala de aula. A segunda linha contém os desejos de todos os alunos em ordem (a pessoa escolhida pelo aluno 1, pelo aluno 2, assim por diante). Nenhum aluno irá escolher a si próprio.;"Para cada teste, a saída é composta por uma linha. Caso seja impossível formar as duplas do jeito que a professora quer, imprima ""IMPOSSIBLE"". Caso haja solução, imprima em ordem os parceiros de cada aluno (o parceiro do aluno 1, do aluno 2, assim por diante). Caso haja mais de uma solução, deve se priorizar o desejo dos alunos de menor índice, ou seja, sempre que possível deve-se atender o desejo do aluno 1, depois tentar atender o desejo do aluno 2, e assim por diante. Lembre-se que o problema pede para formar duplas, se o parceiro do aluno X é igual a Y, o parceiro do aluno Y deve ser igual a X.

No último caso de entrada do exemplo, os pares são (1,3), respeitando o desejo do aluno 1, e também (2,4), respeitando o desejo do aluno 4.";False;10 / 10;489;50;10.22%
1563;O Grande Problema;Matemática;10;"Sorteando dois números inteiros A e B entre 1 e N inclusive, qual é a chance de que o número B seja menor ou igual ao resto de N dividido por A?

                    Por exemplo, para N=5, há 25 escolhas possíveis para (A,B), porém os únicos pares que satisfazem o enunciado são (2,1), (3,1), (3,2) e (4,1). Portanto para N=5, a probabilidade é igual a 4/25.";A entrada é composta por vários casos de teste. Cada caso de teste é composto por uma linha conténdo um inteiro N (1 ≤ N ≤ 108).;Para cada teste, a saída é composta por uma linha contendo a fração irredutível que responde o enunciado.;False;10 / 10;465;96;20.65%
1564;Vai Ter Copa?;Iniciante;2;"O Brasil é o país sede da copa esse ano. Porém, há muitas pessoas protestando contra o governo. Em redes sociais é possível ver pessoas afirmando que não vai ter copa devido aos protestos.

Mas esses rumores de que não haverá copa são totalmente falsos, a presidente Dilma Roussef já avisou: vai ter copa sim, e se reclamar vai ter duas!";A entrada contém vários casos de teste e termina com EOF. Cada caso de teste consiste de uma linha contendo o número N de reclamações sobre a copa encaminhadas para a presidente (0 ≤ N ≤ 100).;"Para cada teste, a saída consiste de uma linha dizendo ""vai ter copa!"" caso não haja reclamações para a presidente. Caso haja reclamações, a saída deverá dizer ""vai ter duas!"".";False;2 / 10;25822;13155;50.94%
1565;Ligue os Pontos;Paradigmas;10;"Vou te fazer um desafio! Você irá receber uma matriz de dimensões N por M, com caracteres iguais a '-', '#' e '*'. Veja um exemplo a seguir:

*-#-*
-----
--*--
####-
*----

Os caracteres '#' significam obstáculos, os caracteres '-' significam espaços vazios e os caracteres '*' significam pontos. O seu trabalho é colocar o mínimo de pontos adicionais necessários para deixar todos os pontos conectados. Você só pode colocar mais pontos em espaços vazios. Por exemplo, para a matriz acima, você precisa de no mínimo 7 pontos adicionais para ligar os pontos, assim como mostra a figura a seguir:

*-#-*
-*-*-
--*-*
####*
****-

Você aceita o desafio?";A entrada contém vários casos de teste. Cada caso de teste é iniciado por uma linha contendo dois inteiros N e M indicando as dimensões da matriz (1 ≤ N*M ≤ 100). Após a primeira linha, seguem N linhas descrevendo a matriz da mesma maneira mostrada no enunciado.;Para cada teste, a saída consiste de uma linha contendo o número mínimo de pontos que precisam ser adicionados na matriz para conectar todos os pontos. Caso seja impossível conectar todos os pontos, imprima 'impossivel'.;False;10 / 10;148;34;22.97%
1566;Altura;Estruturas e Bibliotecas;6;"Cheio de boas ideias, agora o governo brasileiro resolveu criar a ""bolsa altura"". Desta forma, você foi incumbido de fazer o levantamento da altura da população de várias cidades e ordenar esta população por ordem crescente de altura. Você sabe que as cidades as quais terá que fazer isso tem menos de 3 milhões de habitantes e que ninguém, segundo o IBGE, tem mais do que 230 cm de altura nestas cidades.";A entrada contém vários casos de teste. A primeira linha de entrada contém um inteiro NC (NC < 100) que indica a quantidade de casos de teste, ou seja de cidades. Para cada caso de teste, a primeira linha conterá um inteiro N (1 < N ≤ 3000000), indicando a quantidade de pessoas da cidade. A próxima linha irá conter a altura de cada uma destas pessoas, em centímetros, representado pela letra h (20 ≤ h  ≤ 230) e separados por um espaço em branco.;"Para cada caso de teste de entrada, imprima uma linha contendo os valores das alturas de todos os moradores da cidade (em cm), por ordem crescente de altura, separados por um espaço em branco.
					
					Obs.: O arquivo de entrada é bastante grande, portanto, utilize um método rápido para leitura / escrita.";False;6 / 10;13975;3193;22.85%
1567;(2/3/4)-D Sqr/Rects/Cubes/Boxes?;Matemática;5;Veja a grade (4x4) abaixo. Você consegue dizer quantos quadrados e retângulos ela contém? Você pode assumir que quadrados não são retângulos. Talvez seja possível contar a mão, mas você conseguiria fazer isso para uma grade (100x100) ou para uma grade (10000x10000)? E para dimensões maiores? Isto é, você poderia contar quantos cubos ou caixas de tamanhos diferentes há em uma cubo de dimensões (10x10x10) ou quantos hipercubos ou hipercaixas de tamanhos diferentes existem em um hipercubo de 4 dimensões de tamanho (5x5x5x5x5)? Lembre-se que o seu programa precisa ser muito eficiente. Você pode assumir que quadrados não são retângulos, cubos não são caixas e hipercubos não são hipercaixas.;A entrada contém um número inteiro N (0 ≤ N ≤ 100) em cada linha, que é o comprimento de um lado da grade ou cubo ou hipercubo. Tal como para o exemplo acima, o valor de N é 4. Pode haver mais de 100 linhas de entrada.;Para cada linha de entrada, deve ser gerada um saída com seis inteiros S2, R2, S3, R3, S4, R4 em uma única linha, onde S2 indica o número de quadrados contidos na grade bidimensional (NxN), R2 indica o número de retângulos contidos na grade bidimensional (NxN). S3, R3, S4, R4 tem o mesmo significado porém em dimensões superiores, como descrito antes.;True;5 / 10;333;152;45.65%
1568;{soma+=i++} até N;Matemática;10;Todos os números positivos podem ser expressos como a soma de um, dois ou mais números inteiros positivos consecutivos. Por exemplo, 9 pode ser expresso em três diferentes formas, 2+3+4, 4+5 ou 9. Dado um número inteiro menor que (9*10^14+1) ou (9E14 + 1) ou (9*10¹⁴ +1), você terá que determinar de quantas maneiras este número pode ser expresso como a soma de números consecutivos.;O arquivo de entrada contém menos de 1100 linhas de entrada (casos de teste). Cada caso de teste contém um inteiro N (0 ≤ N ≤ 9E14) . O final de entrada é determinado por EOF.;Para cada caso de teste produza uma linha de saída. Esta linha deverá conter um inteiro que informa de quantas maneiras N pode ser expresso como a soma de inteiros consecutivos.;False;10 / 10;1960;325;16.58%
1569;Sobe e Desce;Ad-Hoc;9;"Sobe e Desce é um jogo de tabuleiro jogado em um grid de 10 por 10. As posições do grid são numerados de 1 a 100. Cada jogador possui uma peça colorida que o representa. No começo do jogo, cada jogador coloca sua peça na posíção 1 do tabuleiro. No turno de cada jogador, ele deve jogar um dado que lhe dará um número randômico entre 1 e 6. Depois de jogar o dado, o jogador deve avançar sua peça a quantidade de posições exibidas no dado. Se isso fizer com que sua peça ultrapasse a posição 100, o jogador deve deixá-la exatamente na posição 100 do tabuleiro. Depois de avançar, se a peça estiver em uma posição contendo o início de uma escada, a peça deve avançar para a posição contendo o topo da escada. Da mesma forma, se a peça estiver em uma posição contendo o topo de um escorregador, a peça deve ser movida para a posição contendo o fim do escorregador. Nenhuma posição contém mais de um final de qualquer escorregador ou escada. A posição 100 não contém o topo de um escorregador ou o início de uma escada. Um jogador vence quando sua peça alcança a posição 100. Nesse ponto, o jogo termina.

Dada uma configuração de escorregadores e escadas sobre o tabuleiro e uma sequência de jogadas do dado, você precisa determinar as posições de todas as peças no tabuleiro. A sequência de jogadas do dado não precisa ser completa, ou seja, nenhum jogador precisa sair vitorioso (chegar até a posição 100). A sequência de jogadas do dado também pode continuar após o fim do jogo; neste caso, as jogadas após o jogo terminar devem ser ignoradas.";"A primeira linha contém o número de casos de teste. O formato de cada caso de teste é o seguinte:

A primeira linha de cada caso contém três inteiros positivos: o número a de jogadores, o número b de escorregadores e escadas, e o número c de jogadas do dado. Não haverão mais do que 1000000 jogadores e não mais do que 1000000 jogadas do dado. Cada uma das b linhas seguintes contêm dois inteiros especificando um escorregador ou uma escada. O primeiro inteiro indica a posição contendo o topo de um escorregador ou o início de uma escada. O segundo inteiro indica a posição contendo o fim do escorregador ou o topo da escada. As próximas c linhas contêm cada uma um inteiro dando o número exibido em cada jogada do dado.";Para cada jogador, imprima uma linha contendo um texto na forma: Position of player N is P., onde N será substituído pelo número do jogador e P será substituído pela posição final de cada jogador.;False;9 / 10;1352;285;21.08%
1570;Um Dia na Terra da Matemática;Matemática;10;X e Y são dois números inteiros e X >= Y. Os valores de X e Y  são inteiros positivos ou negativos. Quando a soma destes dois números é multiplicado por Y obtemos P e quando o valor absoluto da subtração destes dois números é multiplicado por X obtemos Q. Dado o valor de P e Q, é preciso encontrar o valor de X e Y.;A primeira linha contém um inteiro N (N <= 75000) que informa o número total de entradas. Cada uma das N linhas seguintes contém dois inteiros que denota os valores de P e Q, respectivamente, aqui |P| < 231, |Q| < 231.;"Para cada linha de entrada, exceto a primeira que informa o número de linhas, você deve imprimir exatamente duas linhas de saída. A primeira linha contém o número do caso e a seguinte linha contém os possíveis valores de X e Y (Um par de valores em cada linha). Se houver mais do que uma solução possível, imprima a que o X tiver o menor valor. Quando os valores dados de P e Q são impossíveis para qualquer valor inteiro de X e Y, você deve imprimir ""Impossible"".";False;10 / 10;689;148;21.48%
1571;Um Quadrado & Triângulos Equiláteros;Geometria Computacional;6;As figuras 1, 2, 3, 4, 5, 6 e 7 mostram como 1, 2, 3, 4, 5, 6 e 8 triângulos equiláteros podem ser postos de forma ideal dentro de um quadrado. Obviamente, o tamanho do quadrado permanece igual e os triângulos da figura 1 a 7 irão diminuir. Dado o tamanho do quadrado, você terá que achar os lados dos triângulos para todas as sete figuras. Você pode assumir que a imagem é simétrica ao longo de um certo eixo. Perceba que eu estou pedindo para você mostrar o valor decimal exato da solução e não um valor aproximado.;A entrada contém várias linhas. Cada linha contém um único número de ponto flutuante S (0<=S<=10000) no qual denota o lado do quadrado. A entrada é terminada por final de arquivo (EOF).;Para cada linha de entrada gera-se uma linha de saída. Cada linha conterá sete números de ponto flutuante t1, t2, t3, t4, t5, t6 e t7. Aqui t1, t2, t3, t4, t5, t6 e t7 denota o tamanho do lado do triângulo para cada quadrado mostrado na figura, respectivamente. Todos os números de ponto flutuante devem ter dez dígitos depois da virgula. O saída será checada com um programa especial de correção, então erros pequenos de precisão serão ignorados.  ;True;6 / 10;213;154;72.30%
1572;O Torneio Surreal;Matemática;10;"Neste problema particular, o Torneiro Surreal é um torneio, que participam apenas duas equipes. Vamos nomear estas duas equipes de Abahoni e Mohamedan. Eles jogam entre eles não mais de 2N - 1 jogos, o vencedor é a primeira equipe a conseguir N vitórias. Você pode assumir que não há jogos combinados, o resultado de cada jogo é independente e para qualquer jogo há uma constante P que é a probabilidade da equipe Abahoni ganhar e, portanto, há uma constante probabilidade Q(Q = 1 - P) que a probabilidade da equipe Mohamedan ganhar.

P(i, j) é a probabilidade da equipe Abahoni ganhar a série, uma vez que eles ainda precisam i vitórias para conseguir isso, enquanto equipe Mohamedan ainda precisa J vitórias se quiserem vencer. A P(i, j) pode ser calculado com uma função tal como:

Função P(i, j){
   se i = 0, então, retorne 1
   senão se j = 0, então, retorne 0
   senão retorne pP(i - 1, j) + qP(i, j - 1)
}

Você vai ter que escrever um programa que dá a probabilidade de ganhar para qualquer P, i e j e também dá o número de chamadas recursivas necessárias da função acima para obter a probabilidade P(i, j).";A entrada contém vários conjuntos de entrada. A primeira linha contém um número de ponto flutuante P(0 < P < 1), e um inteiro N(0 ≤ N <1001), onde P é a probabilide de Abahoni ganhar e N é o número de consultas a seguir. Cada uma das N linhas seguintes contém dois inteiros i(0 ≤ i ≤ 1000) e j (0 ≤ j ≤ 1000). A entrada é terminada por um conjunto, que tem o valor de N como 0. Esta entrada não deve ser processada.;Para cada consulta deverá imprimir duas linhas. A primeira linha contém o valor de P(i, j) com cinco dígitos após o ponto decimal e a segunda linha contém um número o qual é o número de chamadas recursivas necessários se a função acima mencionada foi utilizada para determinar o valor de P(i, j). Se o valor de P(i, j) é indefinido deverá imprimir -1 como o seu valor com formatação similar. Uma linha em branco deve ser impresso entre as saídas dos dois conjuntos consecutivos.;False;10 / 10;301;41;13.62%
1573;Fábrica de Chocolate;Ad-Hoc;1;"Uma fábrica produz barras de chocolates no formato de paralelepípedos e de cubos, com o mesmo volume. Porém, como a máquina que produz os chocolates em formato de cubo está apresentando alguns problemas, os donos da fábrica pediram a sua ajuda para resolver este problema.
					Sua tarefa é, dadas as dimensões das arestas do chocolate em formato de paralelepípedo, dizer qual é o tamanho que a aresta em formato de cubo deve ter.";A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém três inteiros A, B e C (1 ≤ A, B, C ≤ 103), indicando os tamanhos das arestas do chocolate em formato de paralelepípedo. A entrada termina quando A = B = C = 0, e não deve ser processado.;Para cada entrada, você deve imprimir um único inteiro que deve ser truncado,representando o tamanho da aresta do chocolate em forma de cubo.;False;1 / 10;1811;1345;74.27%
1574;Instruções do Robô;Ad-Hoc;4;"Você possui um robô na origem do eixo x. O robô receberá algumas instruções. Sua tarefa é predizer sua posição depois de executar todas as instruções.


	LEFT: move uma unidade para a esquerda (diminui p em 1, onde p é a posição do robô antes de mover)
	RIGHT: move uma unidade para a direita (incrementa p em 1)
	SAME AS i: executa a mesma ação que na i-ésima instrução. É garantido que i é um inteiro positivo não maior que o número de instruções já executadas.";A primeira linha contém o número de casos de testes T (T <= 100). Cada caso de teste inicia com um inteiro n ( 1 <= n <= 100), o número de instruções. Cada uma das n linhas seguintes contém uma instrução.;Para cada caso de teste, imprima a posição final do robô. Note que após processar cada caso de teste, o robô deve ter sua posição inicial resetada para a origem.;False;4 / 10;5310;2592;48.81%
1575;Perseguindo Don Giovanni;Ad-Hoc;10;"No Ato II, Masetto está liderando um grupo de aldeões para perseguir Don Giovanni. Giovanni, que acaba de trocar suas roupas com Leporello e está disfarçado como ele, é questionado por Masetto sobre aonde ""seu mestre"" foi. Para evitar problemas, ""Leporello"" (disfarçado por Giovanni) quer enganar os aldeões para que eles não consigam encontrar ""Don Giovanni"" (disfarçado por Leporello). Giovanni sabe a rota que Leporello está tomando, e ele tem uma rota segura (uma rota que os aldeões não encontrariam Leporello) em mente. Ele quer ter certeza de que a rota que ele tomou é de fato segura.";"A entrada inicia com um simples inteiro positivo em apenas uma linha, indicando o número de casos de teste que seguem, cada um deles como descrito abaixo. Esta linha é seguida por uma linha em branco, e também haverá uma linha em branco entre duas entradas consecutivas.

É dado a você a atual posição de Don Giovanni (que também é a posição de Masetto e dos aldeões), e a posição atual de Leporello, em duas linhas separadas. Cada linha tem dois números: o número da rua e o número da avenida. Você pode assumir que as ruas são grids quadrados regulares, com linhas sendo ruas numeradas a partir de um, iniciando no norte, e as colunas sendo avenidas numeradas a partir de um, iniciando no oeste. Portanto, a distância entre ruas e avenidas adjacentes é sempre a mesma.

O resto da entrada possui dois conjuntos de rotas, com o primeiro conjunto sendo de Leporello e o segundo conjunto sendo a rota que Giovanni irá contar para os outros. Cada conjunto inicia com um número indicando a quantidade de paradas na rota, seguido pela lista de paradas. Cada parada é especificada como uma localização, onde Leporello pode mudar a direção. Entre paradas há sempre uma linha reta na direção paralela tanto para ruas quanto para avenidas, que Leporello e os aldeões irão viajar.

Leporello viaja na mesma velocidade que os aldeões. Você pode assumir que o número máximo da rua/avenida é 1000000, e não haverá mais do que 100 paradas.";"Para cada caso de teste, a saída deve seguir a descrição abaixo. A saída de dois casos de teste consecutivos deverá ser separada por uma linha em branco.
A saída consiste de uma linha dizendo ""Yes"", caso a rota que Giovanni está dizendo aos aldeões é uma rota segura, e ""No"" caso contrário. Lembre-se que a rota não é segura somente se os aldeões puderem encontrar Leporello no mesmo lugar ao mesmo tempo; a rota é segura mesmo se os aldeões encontrarem Leporello no destino (porque a missão dele foi realizada).";False;10 / 10;91;12;13.19%
1576;O Problema da Linha do Horizonte;Ad-Hoc;9;"Com o advento das estações de trabalho de alta velocidade gráfica, CAD (desenho assistido por computador ou DAC) e outras áreas (CAM, design VLSI) têm feito uso cada fez mais eficaz dos computadores. Um dos problemas com imagens de desenho é a eliminação de linhas ocultas - linhas obscurecidas por outras partes do desenho.
					Você deverá desenvolver um programa para ajudar um arquiteto no desenho da linha do horizonte de uma cidade, dado a localização dos edifícios da cidade. Para tornar o problema tratável, todos os edifícios possuem formas retangulares e eles compartilham uma base comum (a cidade em que eles são construídos é muito plana). A cidade também é vista como bidimensional. Um edifício é especificado por uma tripla ordenada (Li, Hi, Ri), onde Li e Ri são coordenadas esquerda e direita, repectivamente, do edifício i e Hi é a altura do edifício. No diagrama abaixo os edifícios são mostrados à esquerda com triplas

(1,11,5),(2,6,7),(3,13,9),(12,7,16),(14,3,25),(19,18,22),(23,13,29),(24,4,28)

a linha do horizonte, exibida à direita, é representada pela sequência:

(1,11,3,13,9,0,12,7,16,3,19,18,22,3,23,13,29,0)";A entrada é uma sequência de triplas de edifícios. Todas as coordenadas dos edifícios são inteiros menores que 10000 e haverá ao menos um e não mais do que 5000 edifícios no arquivo de entrada. Cada tripla de edifícios está em uma linha por si só no arquivo de entrada. Todos os inteiros em uma tripla são separados por um ou mais espaços. As triplas serão ordenadas por Li, a coordenada x à esquerda do edifício, de modo que o edifício com a menor coordenada x à esquerda é o primeiro no arquivo de entrada.;"A saída deve consistir de um vetor que descreve a linha do horizonte, como mostrado no exemplo acima. No vetor da linha do horizonte (v1, v2, v3, . . . , vn−2, vn−1, vn), o vi tal que i é um número par representa a linha horizontal (altura). O vi tal que i é um número ímpar representa  a linha vertical (coordenada x). O vetor deve representar o ""caminho"" tomado, por exemplo, por um inseto iniciando na menor coordenada x e viajando horizontalmente e verticalmente sobre todas as linhas que definem a linha do horizonte (skyline). Assim, a última entrada de todos os vetores da linha do horizonte será um 0 (zero).";True;9 / 10;305;82;26.89%
1577;Polígonos Regulares Construtíveis;Matemática;6;A pesquisa sobre quais polígonos regulares podem ser construídos apenas com régua e compasso é um problema clássico na Matemática. Triângulos, quadrados, hexágonos podem ser construídos facilmente mas, podemos construir um heptágono regular? Foi o matemático alemão Gauss (1777-1855) quem provou primeiro que se poderia construir um polígono regular de 17 lados e depois, em um dos mais bonitos trabalhos matemáticos de todos os tempos (Disquisitiones Arithmeticae, 1798), ele deu condições necessárias e suficientes para determinar quais polígonos regulares podem ser construídos.;"Na primeira linha, um número inteiro T<50000 representanto o número de casos; então, T números inteiros representando o número de lados de um polígono regular não-degenerado, até no máximo 1000000 (106).";"Imprima ""Yes"" se o polígono regular pode ser construído com régua e compasso ou ""No"" caso contrário.";False;6 / 10;572;223;38.99%
1578;Matriz de Quadrados;Ad-Hoc;7;"Atrapalhilton é um estudante muito dedicado, embora muito, muito atrapalhado. Na semana passada, seu professor de Matemática, o Sr. Sabetudilton, recomendou à classe uma lista de exercícios sobre matrizes. Atrapalhilton, aplicado como é, dediciu fazer os exercícios no mesmo dia, tão logo chegou em casa, embora apenas após assistir o episódio vespertino de A Galinha Listradinha, seu programa de TV favorito. O enunciado de um dos exercícios dizia:

                    
	                   Calcule o quadrado de cada uma das matrizes abaixo…
                    

                    No entanto, Atrapalhilton fez uma baita duma confusão. Para ele, o quadrado de uma matriz quadrada A é a matriz dos quadrados dos valores da matriz A. Por exemplo, o quadrado da matriz

                    
                      
                        1
                        3
                      
                      
                        5
                        7
                      
                    


                    para ele não é

                    
                      
                        16
                        24
                      
                      
                        40
                        64
                      
                    


                    mas

                    
                      
                        1
                        9
                      
                      
                        25
                        49
                      
                    

                    Atrapalhilton conseguiu calcular o “quadrado” da primeira matriz, da segunda, da terceira e percebeu que já estava muito tarde, que não ia conseguir terminar de calcular os “quadrados” de todas as N matrizes da lista. Então, decidiu escrever um programa que fizesse o serviço para ele.";A primeira linha da entrada é constituída por um único inteiro positivo N (N ≤ 100), o qual designa o número de matrizes cujos “quadrados” ainda não foram calculados. Em seguida ocorre a descrição de cada uma das N matrizes. A primeira linha da descrição de uma matriz consiste de um único inteiro M (1 ≤ M ≤ 20), o qual representa o número de linhas e o número de colunas da matriz. Seguem, então, M linhas, cada uma com M inteiros aij (0 ≤ aij ≤ 232-1, 1 ≤ i,j ≤ M), os quais correspondem às células da matriz, de modo que valores consecutivos numa mesma linha são separados por um espaço em branco.;Imprima o “quadrado” de cada matriz da entrada, conforme o que Atrapalhilton entende pelo “quadrado” de uma matriz. Antes de imprimir cada “quadrado”, imprima a linha “Quadrado da matriz #x:” (sem as aspas), para ajudar Atrapalhilton a não se perder na hora de passar a limpo os resultados para o caderno. Comece a contagem em x = 4, afinal, Atrapalhilton já calculou os “quadrados” das 3 primeiras matrizes. Adicione tantos espaços em branco à esquerda de cada valor quanto necessários para que os valores de uma mesma coluna fiquem todos alinhados à direita, de modo que haja ao menos um valor em cada coluna não precedido por espaços em branco além do espaço em branco obrigatório que separa colunas consecutivas. Imprima também uma linha em branco entre “quadrados” de matrizes consecutivas.;False;7 / 10;9048;1545;17.08%
1579;Transporte de Painéis Solares;Paradigmas;4;"Há alguns anos, algumas empresas vem atuando forte na produção de energia baseada em painéis solares. Obviamente o local mais adequado para isso são os desertos. No deserto de Mojave, nos Estados Unidos, já foram instalados várias usinas para geração de energia solar, como por exemplo a usina Solar Nellis, que fica na Base Aérea de Nellis, em Clark County, Nevada. Esta usina gera mais de 30 milhões de quilowatts-hora de eletricidade por ano. O projeto de 100 milhões dólares americanos começou a produção de energia no final de 2007, a planta é alimentada por 72.000 painéis solares de rastreamento do sol cobrindo 140 acres. Além da Nellis, outras usinas como a Sierra Sun Tower, Copper Mountain, Solar One e outras foram construídas neste mesmo deserto.
                    
                    


                    A Espanha já utiliza uma usina solar no deserto do Saara que foi construída pela Solar Millenium. O projeto deu tão certo que agora outras empresas estão iniciando novos projetos nesta região para gerar energia para a Europa.

                    Bem, você possui uma empresa de transportes com muitos caminhões e foi contratado pela empresa Delta Solar fazer o transporte de painéis solares no Saara. Os painéis possuem tamanhos e pesos diferentes relacionados com a estrutura de cada conjunto de painéis, que muda de acordo com o local aonde deverão ser instalados. O transporte deles deverá ser feito na sequência correta, que é exatamente a sequência na qual eles aparecem na entrada.

                    O cálculo do frete é feito de acordo com o peso dos painéis transportados pelos seus caminhões e a distância que os caminhões deverão percorrer. Foi acertado que você informe todo dia a quantidade de caminhões disponíveis (isso muda porque alguns vão para manutenção, outros novos chegam, etc) e um encarregado da Delta Solar vai tentar separar as cargas para minimizar o valor do transporte, uma vez que por um acerto inicial, pagarão o frete utilizando como referência a carga mais pesada transportada no dia, multiplicada pelo número de caminhões utilizados no trasporte.";A primeira linha de entrada contém um inteiro N que determina a quantidade de casos de teste (ou dias de trabalho no deserto). Cada caso de teste é composto por duas linhas. A primeira linha contém três valores inteiros nPaineis (4 ≤ nPaineis ≤ 100), caminhoes (1 ≤ caminhoes ≤ 10) e frete (1 ≤ frete ≤ 50) separados por um espaço, que indicam respectivamente a quantidade de painéis que devem ser transportados, número de caminhões utilizados para o transporte e o frete cobrado por cada caminhào para cada kg transportado. A linha seguinte contém o peso (1 ≤ peso ≤ 1000) de cada um dos painéis, separados por um espaço em branco.;Para cada caso de teste de entrada, seu programa deverá imprimir uma linha, informando o peso do caminhão mais carregado seguido por um espaço e o valor total do frete cobrado pelo dia de trabalho.;True;4 / 10;928;376;40.52%
1580;Quid Est Veritas? Est Vir Qui Adest!;Matemática;5;Há muito tempo atrás, numa galáxia muito, muito distante, a Unidade Federativa Fazedora de Segredos (UFFS) constantemente enviava e-mails para a Unidade Receptora do Império (URI) com os códigos que deveriam ser trocados de hora em hora no sistema de segurança da Estrela da Morte. Com medo de que os e-mails fossem interceptados pela Aliança Rebelde, a UFFS assinava cada e-mail com um dos 12 anagramas diferentes de sua própria sigla, como FUFS ou SUFF, por exemplo. Não demorou muito para que a prática virasse mania entre os órgãos imperiais, e alguns stormtroopers mais curiosos começaram a se perguntar quantos anagramas teria uma palavra qualquer.;A entrada é composta por uma lista de palavras, uma por linha, e termina com EOF (fim de arquivo). Compõem uma palavra no mínimo uma e no máximo 103 letras do alfabeto latino, maiúsculas apenas, sem espaços nem quaisquer outros símbolos.;Para cada palavra imprima uma linha contendo um inteiro que representa o número de anagramas que é possível formar com aquela palavra. Como este número pode ser muito grande, imprima o resto que ele deixa quando dividido por 109 + 7.;False;5 / 10;1325;583;44.00%
1581;Conversa Internacional;Strings;2;"Rafael recentemente recebeu uma bolsa de estudos e está fazendo intercâmbio fora do Brasil, onde conheceu várias pessoas de várias nacionalidades diferentes. O idioma nativo desse país é o Inglês, e todas as pessoas que Rafael conheceu falam inglês como primeira ou segunda língua.

Como aprender um segundo idioma é uma tarefa difícil e cansativa, as pessoas preferem falar seu idioma nativo sempre que possível. Uma exceção à essa regra é quando há duas pessoas no grupo que não tem o mesmo idioma nativo. Nesse tipo de situação, o idioma utilizado é o inglês.

Por exemplo, se em um grupo há só brasileiros, o idioma falado será o português, mas caso haja um espanhol entre os brasileiros, o idioma falado será o inglês.

Rafael as vezes fica confuso sobre qual idioma deveria ser falado em cada grupo de pessoas, e para isso pediu sua ajuda.";"A primeira linha contém um inteiro N, indicando o número de casos de testes a seguir.

Cada caso de teste inicia com um inteiro K (2 ≤ K ≤ 100), representando o número de pessoas no grupo. Em seguida haverá K linhas, contendo uma string S cada, representando o idioma nativo de cada uma dessas K pessoas.

Cada string conterá no mínimo 1 e no máximo 20 caracteres, entre eles apenas letras minúsculas (a-z).";Imprima uma linha, contendo uma string S, representando o idioma mais apropriado para a conversa.;False;2 / 10;5553;3215;57.90%
1582;O Teorema de Pitágoras;Matemática;3;"Pitágoras foi um matemático grego anterior a Euclides que viveu entre 570 e 495 a.C, considerado por Aristóteles como ‘o primeiro matemático’. Um dos mais antigos e mais importantes teoremas da História, o Teorema de Pitágoras estabelece que, em qualquer triângulo retângulo, o quadrado da hipotenusa é igual à soma dos quadrados dos catetos. O Teorema possui inúmeras aplicações, sendo a base de diversos resultados na Matemática, na Engenharia, na Física e na Ciência da Computação. Embora o Teorema leve o nome de Pitágoras, acredita-se que matemáticos ainda mais antigos, da Babilônia, já tivessem conhecimento da fórmula.

                    

                    Diz-se que uma tripla de inteiros positivos (x, y, z) é uma tripla pitagórica se é possível existir um triângulo retângulo que tenha x, y e z como lados, independentemente da ordem em que os inteiros figurem na tripla. Por exemplos, (3, 4, 5), (6, 8, 10) e (5, 13, 12) são triplas pitagóricas, pois 52 = 32 + 42, 102 = 62 + 82 e 132 = 52 + 122. No entanto, a tripla (6, 8, 10) é apenas a tripla (3, 4, 5) multiplicada por 2, e, por isso, dizemos que (6, 8, 10) não é uma tripla pitagórica primitiva. Um tripla pitagórica (x, y, z) é dita primitiva se mdc(x, y, z) = 1. Euclides mostrou no século III a.C. que existem infinitas triplas pitagóricas primitivas.";Cada linha da entrada é formada por 3 inteiros, x, y e z (1 ≤ x, y, z ≤ 104), separados entre si por um espaço em branco e fornecidos não necessariamente em ordem alguma, terminando em EOF.;Imprima para cada linha da entrada a linha “tripla pitagorica primitiva” (sem as aspas) se os inteiros dados formam uma tripla pitagórica primitiva, “tripla pitagorica” se os inteiros dados formam uma tripla pitagórica não-primitiva, ou “tripla” se não formam uma tripla pitagórica.;True;3 / 10;4756;2217;46.61%
1583;Contaminação;Ad-Hoc;6;"Estamos no ano 2241, e a colonização de outros planetas já é uma realidade. Você trabalha no centro de controle de recursos, no planeta URI-942, controlando principalmente os estoques de água. A água é armazenada em tanques subterrâneos, protegida das altas temperaturas da superfície.

Porém, seus colegas Márcio e Ana descobriram falhas nas paredes de alguns tanques, o que pode levar a contaminação do estoque de água. Seus colegas conseguiram identificar os pontos com falhas onde pode haver a infiltração de contaminantes. Sabendo que os agentes contaminantes se espalham por todo o tanque de água afetado, sua tarefa é estimar a contaminação da água de acordo com os mapas fornecidos por seus colegas.

Os mapas foram discretizados em células, sendo que as células podem corresponder a uma região com rocha, água (tanque) ou agente contaminante. Devido as rachaduras, uma célula com agente contaminante contamina as células adjacentes (esquerda, direita, acima e abaixo) contendo água, porém a contaminação é barrada por células de rocha.";"A entrada é composta por vários mapas, sendo que a descrição de cada mapa começa com uma linha contendo dois inteiros N e M, correspondente ao número de linhas e de colunas do mapa. As N linhas a seguir descrevem o mapa, cada linha contendo M caracteres, além do pulo de linha. Os caracteres possíveis são: A, que representa uma célula contendo água, X, que representa uma célula com rocha e T que representa uma célula com agente contaminante.

A entrada termina quando N = M = 0, caso que não deve ser processado. Em todos os mapas, N e M são menores ou iguais a 50.";Para cada mapa, imprima uma estimação da contaminação futura. Esta estimação deverá corresponder ao mapa original (como visto na entrada), porém trocando as células com água que foram contaminadas pelo caractere T. Deixe uma linha em branco após cada mapa (incluindo o último mapa).;False;6 / 10;2053;835;40.67%
1584;Espertofone;Grafos;8;"A UFFS (União Federal dos Fabricantes de Selulares[sic]), uma empresa 100% brasileira, do grupo MEC (Mercado da Espanção[sic] Comercial), acaba de lançar o Espertofone, para competir com os smartphones importados. Os Espertofones rodam um sistema operacional próprio, batizado de Androido. Quando um usuário liga um Espertofone com Androido, aparece uma tela de desbloqueio com um grid de N × N botões. O usuário deve, então, sem desencostar seu dedo da tela, deslizá-lo pelos botões de modo a desenhar seu padrão de desbloqueio gravado anteriormente e, dessarte, liberar o aparelho para uso. O sistema sempre mantém na tela um segmento de reta com um extremo no último botão tomado e outro sob o dedo do usuário, e considera que o usuário toma um botão B se e somente esse segmento intercepta o centro de B. Diferentemente do que ocorre com o sistema da concorrência, no Androido o usuário pode repetir botões, desde que isso seja possível. A Figura ilustra um padrão de desbloqueio com K = 8 segmentos num grid 4 × 4, enumerando os segmentos. Perceba que, num grid 4 × 4, não é possível que o botão (3, 3) suceda o botão (1, 1) num padrão de desbloqueio, pois obrigatoriamente o segmento passaria pelo centro do botão (2, 2). Obviamente, nunca é possível também que um botão suceda a si próprio. Neste problema, considere que o dedo do usuário é tão fino quanto necessário para conectar botões que podem teoricamente suceder um ao outro.

                    


A UFFS quer agora provar que seu sistema é melhor que o da concorrência, calculando o número de padrões de desbloqueio possíveis com K segmentos.";A entrada é composta por vários casos de teste, cada um numa linha e por sua vez constituído apenas de dois números inteiros: N e K (2 ≤ N ≤ 5, 0 ≤ K ≤ 1015).;Imprima para cada caso de teste o número de padrões de desbloqueio possíveis com exatos K segmentos considerando-se um grid N × N. Como esse número pode ser muito grande, imprima o resto que ele deixa por 109 + 7.;True;8 / 10;321;115;35.83%
1585;Fazendo Pandorgas;Ad-Hoc;1;"Anastácia adora construir pipas (ou pandorgas) para seus amigos. Pedro, que sabe disso, separou vários retalhos de bambus da fábrica de móveis de seu tio que seriam descartados para dar a Anastácia. Ao entregar os bambus à Anastácia, Pedro perguntou a ela qual era a maior pipa que poderia ser construída com aqueles retalhos de bambus. Anastácia, então, que não é muito boa em calcular, quer que você a ajude nesta tarefa.

                Obs.: Cada pipa é construída com dois pedaços de bambus amarrados em forma de cruz, formando um losango.";A entrada contém vários casos de teste. A primeira linha de entrada contém um inteiro N que indica a quantidade de pipas que serão construídas. Cada uma das N linhas a seguir contém dois valores inteiros x (10 ≤ x ≤ 100) e y (10 ≤ y ≤ 100) que indicam o tamanho dos dois bambus utilizados para construir a pipa.;"Para cada caso de teste de entrada, imprima um valor inteiro (desconsiderando a parte decimal) correspondente a àrea da pipa criada, em cm2, seguido de um espaço e do texto ""cm2"", sem as aspas.";False;1 / 10;5650;3690;65.31%
1586;Cabo de Guerra;Strings;6;"Na Final Nacional da Maratona de Programação de 2013, em Uberlândia, durante um período de lazer, o Prof. Carlinhos (USP) propôs uma atividade a todos os estudantes. Ele primeiro organizou os estudantes em ordem lexicográfica crescente, considerando apenas o primeiro nome e desconsiderando diacríticos. Em seguida, sorteou um estudante e montou duas equipes, A e B: a equipe A seria formada por todos os estudantes na ordem até o estudante sorteado, inclusive; a equipe B seria formada por todos os estudantes na ordem a partir do estudante sorteado, exclusive. As duas equipes, então, competiriam num cabo de guerra tradicional, e os vencedores ganhariam um café.

Muitas coisas curiosas o Prof. Carlinhos percebeu naquele dia:


	A força de cada estudante, quando posicionado imediatamente em frente ao adversário (posição 1), era exatamente igual à soma dos valores correspondentes aos caracteres de seu primeiro nome na tabela ASCII. Dessarte, a força do estudante Leandro, se ficasse na posição 1 de uma equipe (fosse A ou fosse B), serial igual a:


709 = 76 + 101 + 97 + 110 + 100 + 114 + 111 = ‘L’ + ‘e’ + ‘a’ + ‘n’ + ‘d’ + ‘r’ + ‘o’


	Quanto mais distante da equipe adversária, menos intimidado — e, portanto, mais forte — ficava um estudante. Mais especificamente, um estudante na posição 2 de uma equipe tinha o dobro da força que teria se ficasse na posição 1. Na posição 3, o triplo, e assim por diante. As posições de ambas as equipes são numeradas a partir da posição mais próxima da equipe adversária, começando a contagem em 1. Por exemplo, se o estudante Leandro ficasse na posição 3 de uma equipe, teria força igual a 3 × 709 = 2127.
	A força de uma equipe era igual à soma das forças de cada um de seus integrantes. Não obstante, se a força da equipe A fosse maior que a da equipe B, a equipe A certamente ganharia. Por outro lado, se a força da equipe A fosse menor que a da equipe B, a equipe B certamente ganharia. Finalmente, se as forças de ambas as equipes fossem iguais, haveria um empate.


Existe algum estudante que o Prof. Carlinhos poderia sortear que fizesse as equipes A e B empatarem?";A entrada consiste de vários casos de teste. A primeira linha de cada caso de teste é composta por um único inteiro N (1 ≤ N ≤ 105), o qual representa o número de estudantes. Seguem, então, N linhas, cada uma contendo o primeiro nome de um estudante. Os nomes dos estudantes são fornecidos segundo a ordem lexicográfica crescente, e no mínimo 1 e no máximo 10 letras do alfabeto latino compõem o nome de um estudante. Não há num mesmo caso de teste dois estudantes com o mesmo primeiro nome, e a primeira letra de um nome é sempre maiúscula, sendo as demais minúsculas. N = 0 finaliza a entrada.;"Imprima o nome do estudante que, se sorteado,
                    faria as equipes A
                    e B empatarem. Se não há tal estudante, imprima a linha: “Impossibilidade de empate.” (sem as aspas).";False;6 / 10;4036;838;20.76%
1587;BIT Park;Estruturas e Bibliotecas;10;"A Final Nacional da Maratona de Programação da Sociedade Brasileira de Computação (SBC) de 2014 será em Fortaleza, e os desbravadores maratonistas chapecoenses, ansiosos, já começam a fazer as malas, esperançosos da classificação na Etapa Regional. A capital do Ceará, com uma população de 2.551.805 habitantes (segundo o Censo Populacional de 2013 do IBGE), é mundialmente conhecida por suas belas praias, seus luxuosos hotéis, pousadas e restaurantes, suas magníficas obras de Arquitetura, seu povo alegre e hospitaleiro, e também pelos seus extraordinários parques aquáticos. Visando derrubar a hegemonia do maior parque aquático da cidade, uma empresa local de TI, denominada NCC (Núcleo de Computação Cearense), construiu um parque aquático maior ainda, denominado BIT Park, o qual será inaugurado ainda neste ano. Para a inauguração toda a população da cidade foi convidada, e o NCC promete várias atividades para entreter o povo a tarde toda.

                    Uma das atividades previstas para a inauguração ocorrerá na maior piscina do BIT Park: um colossal jogo de futebol aquático, do qual poderão participar todos os habitantes de Fortaleza, já que a piscina em questão possui nada mais nada menos que 1 km de largura por 2 km de comprimento. O futebol aquático funciona basicamente como o futebol convencional, mas com algumas diferenças:

                    
                    	o jogo ocorre dentro d'água, então, a bola é passada com as mãos, não com os pés;
                    	o jogo pode ser jogado por qualquer número par de jogadores, desde que haja o mesmo número de jogadores nos dois times --- e desde que todos os jogadores caibam na piscina;
                    	não há goleiros, já que todos os jogadores podem defender a bola com as mãos;
                    	assim como no futebol convencional, a legalidade da posição de um jogador é avaliada de acordo com a linha paralela à linha do gol adversário em que se encontra, considerando-se também as linhas em que se encontram os jogadores adversários: a posição de um jogador J é considerada ilegal — e o jogador, consequentemente, considerado impedido — se menos de 2/11 dos jogadores adversários encontram-se em linhas mais próximas da linha do gol adversário que a linha em que se encontra J;
                    	apenas pode pegar a bola um jogador que esteja numa posição legal, diferentemente do que ocorre no futebol convencional, em que o impedimento é avaliado no momento do passe, não no momento da recepção.
                    

                    Na Figura, em que o time A joga contra o time B, estão impedidos os jogadores A4 e A5.

                    


                    O NCC percebeu que avaliar as legalidades das posições dos jogadores durante o jogo seria impraticável; afinal, toda a população de Fortaleza poderia estar na piscina. A decisão, então, foi deixar o jogo rolar para depois reavaliar todos os eventos e recalcular o placar através de um programa. A partir do momento em que um jogador impedido recebe a bola, o próximo gol que ocorre na partida deve ser anulado, a menos que a bola saia da piscina. No início do jogo, e toda vez que a bola sai da piscina ou que ocorre algum gol, o árbitro sorteia um jogador qualquer — não necessariamente não impedido — e lhe concede a bola para dar continuidade à atividade.";"A entrada é composta por diversos casos de teste. A primeira linha de cada caso de teste é composta por dois inteiros N e E (1 < N < 2.551.805, 1 < E < 104), os quais encerram a entrada quando são ambos nulos. N é um número par que indica o número de fortalezenses que participaram do jogo. E é o número de eventos que aconteceram durante o jogo. Os times são chamados de A e de B, e os jogadores, de A1, A2, A3… e de B1, B2, B3… Todas as posições são determinadas pela distância em milímetros da linha do gol do time A, ou seja, o gol do time A está na posição 0 e o gol do time B está na posição 2.000.000. A segunda linha de um caso de teste contém N / 2 inteiros xiA (0 ≤ xiA ≤ 2.000.000, 1 ≤ i ≤ N / 2), indicando cada xiA a posição do jogador Ai no início da partida. De igual modo, a terceira linha contém N / 2 inteiros xiB (0 ≤ xiB ≤ 2.000.000, 1 ≤ i ≤ N / 2), indicando cada xiB a posição inicial do jogador Bi. Seguem, então, E linhas, cada uma descrevendo um evento do jogo. O quadro abaixo lista todos os eventos possíveis e como cada um deles é descrito na entrada.

                    
                        
                            I Xi
                            o árbitro concede a bola ao jogador Xi (X ∈ {A, B}, 1 ≤ i ≤ N / 2 ) para iniciar uma jogada
                        
                        
                            M Xi x
                            o jogador Xi (X ∈ {A, B}, 1 ≤ i ≤ N / 2) se movimenta para a posição X (0 ≤ X ≤ 2000000)
                        
                        
                            P Xi
                            a bola passa para as mãos do jogador Xi (X ∈ {A, B}, 1 ≤ i ≤ N / 2)
                        
                        
                            G X
                            a bola entra no gol do time X (X ∈ {A, B})
                        
                        
                            S
                            a bola sai da piscina
                        


                    

                    Assuma que um evento I ocorre se e somente se é o primeiro evento da partida ou o evento anterior é um evento G ou S.";Imprima uma linha revelando o placar final do jogo de acordo com os eventos fornecidos e com as regras descritas. Os exemplos esclarecem o formato em que o placar deve ser impresso.;True;10 / 10;552;124;22.46%
1588;Ajude a Federação;Ad-Hoc;5;"A federação de futebol te contratou para elaborar a classificação dos times do campeonato. Você vai receber uma lista com alguns jogos ocorridos e deve ordenar os times. Uma vitória garante 3 pontos ao time, um empate 1 ponto e uma derrota 0 pontos.
                    Leia atentamente a seguir o regulamento sobre como a classificação deve ser feita: Primeiramente o time com mais pontos deve ficar em primeiro. Caso haja empate, o time com mais vitórias fica na frente. Caso ainda tenha empate, o time com mais gols fica na frente. Por último se nenhum dos critérios acima possa desempatar os times, o que aparecer primeiro na entrada fica na frente.
                    Dado os times e os jogos que já aconteceram, ordene e imprima o nome dos times na ordem de classificação.";"Na primeira linha teremos um inteiro T (T ≤ 100), indicando o número de casos de teste.
                     Na primeira linha de cada caso teremos dois números, N (2 ≤ N ≤ 20* ou 2 ≤ N ≤ 100**) e M (1 ≤ M ≤ 100* ou 1 ≤ M ≤ 1000**), indicando quantos times estão no campeonato e quantos jogos já aconteceram. Nas próximas N linhas teremos os nomes dos times, que são únicos, contendo apenas letras minúsculas do alfabeto. Nas próximas M linhas há a informação dos jogos na seguinte forma: X timeA Y timeB, indicando que o timeA jogou contra o timeB e o primeiro marcou X gols e o segundo Y gols. As strings terão tamanho entre 1 e 20 e o número de gols de um time em cada partida será entre 0 e 100.Um time nunca joga contra ele mesmo, porém ele pode jogar inúmeras vezes contra qualquer outro time. 
                    * ocorrerá em aproximadamente 90% dos casos de teste;
                    ** ocorrerá no restante dos casos.";Imprima na ordem de classificação os times da entrada, um time em cada linha. Não é necessário imprimir nada entre os casos de teste!;False;5 / 10;2081;745;35.80%
1589;Bob Conduite;Iniciante;1;"Você tem em mãos dois cabos circulares de energia. O primeiro cabo tem raio R1 e o segundo raio R2. Você precisa comprar um conduite circular (veja a imagem abaixo que ilustra um conduite) de maneira a passar os dois cabos por dentro dele:

                    

                    Qual o menor raio do conduite que você deve comprar? Em outras palavras, dado dois círculos, qual o raio do menor círculo que possa englobar ambos os dois?";"Na primeira linha teremos um inteiro T (T ≤ 10000), indicando o número de casos de teste.
					Na única linha de cada caso teremos dois números inteiros R1 e R2, indicando os respectivos raios. Os inteiros serão positivos e todas as contas caberão em um inteiro normal de 32 bits.";Em cada caso, imprima o menor raio possível em uma única linha;True;1 / 10;14676;11824;80.57%
1590;Cuarenta e Dois;Paradigmas;6;Dado uma lista de N números inteiros, escolha K ou mais deles em que a operação binária AND dos números escolhidos seja o maior possível. Imprima este valor. Para informações sobre o AND consulte:  http://en.wikipedia.org/wiki/Binary_and#AND;"Na primeira linha temos um inteiro T (T = 100), indicando o número de casos de teste.
					Para cada caso, há uma linha que terá os números inteiros N  (1 ≤ N ≤ 20* ou 1 ≤ N ≤ 35**) e K (1 ≤ K ≤ 7) . Na linha seguinte terão os N números inteiros separados por espaços. Os números da lista vão de 0 até 230-1, inclusive, e podem se repetir.
                    *ocorrerá em 90% dos casos;
                        **ocorrerá nos casos restantes. Os limites são estes porque 35+7=42 ;)";Imprima o maior valor possível para cada caso, em uma única linha.;False;6 / 10;1384;421;30.42%
1591;Dia da Vovó;Ad-Hoc;4;"Vovó está resolvendo um caça palavras. Você quer ajudar muito sua Vovó e vai desenvolver um programa que, dado o caça palavras e as palavras de busca, imprima o número de vezes que elas aparecem.
					Neste caça palavras em específico, as palavras estarão apenas na vertical ou horizontal. O caça palavras não dá voltas, ou seja, você não pode ir da última coluna para a primeira! As palavras podem sobrescrever as outras, ou seja, uma letra do caça palavras pode ser usada por mais de uma palavra. Conte palavras de uma letra apenas uma vez, veja o primeiro caso de teste de exemplo!";"Na primeira linha terá um inteiro T (T <= 100) indicando o número de casos de teste.
					A primeira linha de cada caso terá dois números L (1 ≤ L ≤ 10* ou 1 ≤ L ≤ 50**) e C  (1 ≤ C ≤ 10* ou 1 ≤ C ≤ 50**) indicando o número de linhas e de colunas do caça palavras respectivamente. Nas seguintes L linhas terão cada uma C caracteres minúsculos do alfabeto indicando as letras do caça palavras. Na linha seguinte terá um número P (1 ≤ P ≤ 50) indicando quantas palavras você deve procurar. Nas próximas P linhas terá uma palavra a ser pesquisada. As palavras a serem pesquisadas terão tamanho condizentes com os limites do caça palavras. As strings na entrada só conterão letras minúsculas do alfabeto.

                   *ocorrerá em 90% dos casos;
                        **ocorrerá nos casos restantes.";Para cada caso, imprima para cada palavra em uma única linha o número de vezes que ela aparece no caça palavras, na mesma ordem da entrada. Se a palavra não aparecer imprima 0.;False;4 / 10;1112;573;51.53%
1592;Elias e Golias;Grafos;9;"Várias cidades são conectadas por estradas. As N cidades são nomeadas com números de 0 até N-1. Golias deseja viajar de carro de sua cidade, identificada pelo número 0, para a capital, identificada pelo número N-1 para visitar seu amigo Elias. Cada estrada é de uma mão, ou seja, os carros viajam em apenas uma direção, e se tem um custo de combustível para atravessá-la.
					Dado a configuração das cidades e estradas, Golias quer saber qual o menor custo de combustível de maneira que ele passe por no máximo K cidades diferentes. As cidades inicial e final também contam, ou seja, sempre ele terá de visitar no mínimo duas cidades, a inicial e a final.";"Na primeira linha terá um inteiro T  (T = 200) indicando o número de casos de teste.
					Para cada caso, a primeira linha terá três números inteiros, N (2 ≤ N ≤ 50* ou 2 ≤ N ≤ 1000**), M  (1 ≤ M ≤ 200* ou 1 ≤ M ≤ 3000**) e K (2 ≤ K ≤ N), indicando o número de cidades, o número de estradas e o máximo número de cidades diferentes que podem ser visitadas, respectivamente. Nas M seguintes linhas haverá três inteiros A (0 ≤ A ≤ N-1), B  (0 ≤ B ≤ N-1) e C  (1 ≤ C ≤ 105) indicando que há uma estrada de mão única da cidade A para a cidade B, e que custa C  unidades de combustível . Pode haver mais de uma estrada conectando duas cidades, ou uma estrada conectando uma cidade a ela mesma.
                    *ocorrerá em 90% dos casos;
                        **ocorrerá nos casos restantes.";Imprima o menor custo de combustível possível para cada caso em uma única linha, e caso Golias não consiga chegar até Elias, imprima -1.;False;9 / 10;788;187;23.73%
1593;Função Binária;Ad-Hoc;3;"Definimos a paridade de um inteiro como a soma dos seus bits em sua representação binária computada módulo dois. Como exemplo, o número 2110 = 101012 possui três 1’s na sua representação binária e portanto ele teria paridade ímpar.
					Neste problema, você deverá calcular o número de bits 1 em um inteiro I dado, ou seja, calcular a quantidade de 1’s na representação binária dele.";"Na primeira linha terá um inteiro T  (T <= 100) indicando o número de casos de teste.
					Para cada caso, haverá apenas uma linha com o número I (1 ≤ I < 1018* ou 1 ≤ I < 101000**).O número da entrada não começará com um ou mais zeros.
                    *ocorrerá em 90% dos casos;
                        **ocorrerá nos casos restantes.";Imprima o número de 1’s na representação binária para cada caso em uma única linha.;False;3 / 10;1342;819;61.03%
1594;Guloso;Estruturas e Bibliotecas;6;"Dado um vetor de inteiros de tamanho N e um inteiro K, ache o maior elemento para cada sub-vetor contínuo de tamanho K. Imprima a soma de todos estes valores.

                    Exemplo 1: Se tivermos o vetor [3, 2, 1, 4, 10] e K for 3, então temos que considerar os sub-vetores [3, 2, 1], [2, 1, 4] e [1, 4, 10]. O maior elemento de cada sub-vetor vale 3, 4 e 10, somando o total de 17.

                    Exemplo 2: Se tivermos o vetor [1, 2, 3, 4, 5, 6] e K for 2, então temos que considerar os sub-vetores [1, 2], [2, 3], [3, 4], [4, 5] e [5, 6]. O maior elemento de cada sub-vetor vale 2, 3, 4, 5 e 6 somando o total de 20.

                    Exemplo 3: Se tivermos o vetor [5, 4, 3] e K for 1, então temos que considerar os sub-vetores [5], [4] e [3]. O maior elemento de cada sub-vetor vale 5, 4 e 3 somando o total de 12.";"A entrada para esse problema é bem singular, leia com atenção! Na primeira linha você terá um inteiro T (T = 200) indicando o número de casos de teste. Para cada caso você receberá três números inteiros, N (1 ≤ N ≤ 104* ou 1 ≤ N ≤ 106**), K  (1 ≤ K ≤ N) e S (0 ≤ S ≤ 109). Para gerar o vetor de inteiros, use o seguinte código em C/C++ em que recomendamos que você copie (control+C) do enunciado:

                    array[0] = S;
                    for (i = 1; i < N; ++i)
                        array[i] = (1LL*array[i-1]*1103515245 + 12345) % (2147483648LL);
                    
                    É garantido que existe uma solução que não se baseia nas propriedades do gerador da entrada acima.
                    *ocorrerá em 90% dos casos;
                        **ocorrerá nos casos restantes.";Para cada caso imprima a soma dos maiores elementos de cada sub-vetor.;False;6 / 10;329;179;54.41%
1595;Humm.. Andar ou Correr.. Eis a Questão;Paradigmas;5;"Você está andando por São Carlos e percebeu que há momentos que anda mais rápido ou mais devagar, tudo depende se você está subindo ou descendo algum morro.
					O trajeto total feito por você tem  S  metros. Podemos separar o trajeto em partes de 1 metro, e na i-ésima dessas partes você anda a uma velocidade constante de Vi metros por segundo. Com essas informações e um pouco de Física básica você consegue calcular o tempo que levou até chegar no fim (tempo = distancia/velocidade).
					Agora, você resolveu correr! Para não cansar muito, você pode escolher correr em apenas C das S partes do trajeto. Ao correr, sua velocidade no trajeto é somada de R metros por segundo! Assuma que sua aceleração seja instantânea. Escolhendo a melhor estratégia de corrida possível, calcule o menor tempo que se leva para chegar ao destino.";"Na primeira linha você terá um inteiro T  (T = 100) indicando o número de casos de teste.
					Na primeira linha de cada caso teremos os números inteiros S (1 ≤ S ≤ 100* ou 1 ≤ S ≤ 105**), C  (0 ≤ C ≤ S) e R (0 ≤ R ≤ 100). Na linha seguinte, S inteiros seguirão separados por espaços em branco indicando a velocidade em cada parte do percurso. Para todos os casos considere 1 ≤ Vi ≤ 100. Sabemos que esta velocidade é grande, mas imagine que você é primo do The Flash.
                        *ocorrerá em 90% dos casos;
                        **ocorrerá nos casos restantes.";Imprima para cada caso o menor tempo necessário para se chegar ao fim em segundos, arredondado de duas casas decimais.;False;5 / 10;1368;646;47.22%
1596;Torneio de Yusuf II;Paradigmas;10;"Marrakech é uma das cidadelas do mundo árabe. A cidade foi fortificada nos anos 1122-1123 por Ali ibn Yusuf, filho de um dos primeiros dirigentes da cidade. Um dos grandes chefes da cidade foi o Califa Abu Yaqub Yusuf ‘al-Mustansir’ também conhecido como Yusuf II. O califa viveu apenas 21 anos (1203-1224) e reinou desde os seus 10 anos. Conhecido como um amante das artes e esportes, foi um grande incentivador da construção de palácios e museus. Idealizou uma grande competição de xadrez, uma de suas paixões, disputada por toda a corte. 
                    O esquema imaginado por Yusuf II para determinar a classificação do campeonato de xadrez era muito interessante. Todos os N competidores jogavam contra todos. Um jogador K é chamado de ملك (malik) se para todo jogador J diferente de K, ou K vence J ou K vence algum jogador J' que vence J. A classificação do campeonato é uma ordenação dos jogadores J1 , J2 , . . . , JN tal que cada jogador Ji , 1 ≤ i < N , vence Ji+1 e é ملك se considerarmos os jogadores que aparecem depois dele na ordenação, isto é, ignorando os anteriores.
                    Sua tarefa será, dados os resultados dos jogos de um torneio de xadrez em Marrakech, determinar se é possível obter uma classificação de Yusuf II para aquele campeonato.";"A entrada é composta por diversas instâncias e termina com final de arquivo (EOF).

                    A primeira linha de cada instância contém um inteiro N (2 ≤ N ≤ 1.000) correspondendo ao número de jogadores do torneio. Os jogadores são numerados de 1 a N . Para cada i = 1, . . . , N , a (i + 1)-ésima linha contém um inteiro di ≥ 0 seguido pela identificação dos di jogadores vencidos pelo jogador i.";Para cada instância imprima uma linha com os jogadores ordenados de acordo com a classificação de Yusuf II. Caso exista mais de uma classificação possível, qualquer uma será aceita. Caso não exista classificação de acordo com o esquema de Yusuf II, imprima  a palavra inclassificavel.;False;10 / 10;67;1;1.49%
1597;Desmascarando o Empregado do Sultão;Paradigmas;9;"Um sultão estava desconfiado de seu empregado. Ele dizia que trabalhava incessantemente, sem parar, para cumprir suas tarefas de N tipos diferentes. O sultão quer saber exatamente quanto tempo leva cada uma das tarefas, para poder avaliar melhor se o empregado é preguiçoso ou se realmente está sobrecarregado.
                    
                    Para tentar desmascarar o empregado ele passou a solicitar relatórios de suas atividades. O empregado entregou N relatórios distintos, a mesma quantidade que o total de tarefas, o que deixou o sultão ainda mais desconfiado. Este empregado trabalha em jornadas de P horas e cada tarefa demora entre uma e P horas para completar. Todas tarefas demoram uma quantidade inteira de horas para se completar.

                    As jornadas de trabalho acontecem nas P primeiras horas do dia.
                    
                    Cada relatório consistia da hora em que o empregado começou e a hora em que terminou de trabalhar. Se ele diz que começou a trabalhar às 0 horas e terminou as 3 horas, isso significa que ele começou no início daquela hora e terminou no final desta, totalizando 4 horas no período.
                    
                    O empregado não anotou o dia em que começou a trabalhar e o dia em que terminou. Os horários do relatório nem sempre referem-se ao mesmo dia. Nesse caso o empregado afirma que parou de trabalhar no final do expediente e reinicionou a tarefa ao início do próximo dia. No exemplo anterior o empregado poderia ter trabalhado 4 horas, P + 4 horas, 2P + 4 horas, etc. Com isso relatórios que indiquem que o empregado começou a trabalhar às 3 horas e terminou às 2 são perfeitamente válidos.

                    Além dessas informações, cada relatório contém quantas tarefas de cada tipo foram completadas. Durante esse período, o empregado afirma ter trabalhado sem parar.
                    
                    Sua tarefa é, dadas as informações dos relatórios, determinar qual a duração, em horas, de cada tarefa, caso isso seja possível.";"A entrada é composta por diversas instâncias e termina com final de arquivo (EOF).
                    
                    A primeira linha de cada instância contém dois inteiros, N (1 ≤ N ≤ 100) e P (2 ≤ P ≤ 24, onde P  é um número primo) . As próximas N linhas contêm N + 2 inteiros cada uma. A i-ésima linha, dessas N linhas, corresponde ao i-ésimo relatório e consiste de Si , Ti (1 ≤ Si , Ti ≤ P) , Ai,1 , . . . , Ai,N . Onde Si e Ti correspondem, respectivamente, à hora em que o empregado começou e parou de trabalhar. Cada Ai,j(0 ≤ Ai,j ≤ 10 9 e ΣjAi,j > 0) é a quantidade de vezes que a tarefa j foi realizada no período do relatório i.";"Para cada instância imprima uma única linha na saída, que consiste de:
                    
                    
                        “-1” caso você possa afirmar com certeza que o empregado tenha mentido em algum relatório;
                        “-2” caso você não possa afirmar que o empregado esteja mentindo, mas também não possa encontrar as durações de cada máquina de maneira única;
                        N inteiros, separados por espaço, que representem a duração de cada tarefa se essas durações puderem ser determinadas de formam  única.";False;9 / 10;51;22;43.14%
1598;O Verdadeiro Valor dos Tapetes;Paradigmas;10;Os tapetes árabes são muito conhecidos. Sua qualidade é reconhecida em todo o mundo, e as características de um bom tapete são apreciadas por todos. Avaliar os tapetes é uma tarefa muito difícil, e os especialistas analisam suas características minuciosamente para estabelecer um preço adequado. Os tapetes são formados por pontos, onde os fios são amarrados. Apesar de ser muito difícil para uma pessoa comum, os especialistas são capazes de dizer a direção em que o fio foi amarrado entre dois pontos. Estes fios formam circuitos nos nós e padrões complicados têm centenas ou mesmo milhares de circuitos e são muito intrincados. Circuitos grandes (em que a quantidade de fio dividida pelo número de nós é muito grande) desvalorizam o tapete, pois o torna menos resistente. Circuitos pequenos são valorizados, e o avaliador sempre busca encontrar o menor circuito existente no tapete, pois este é um indicador do valor do tapete. Sua tarefa neste exercício é ler os dados de um tapete com N nós e M fios (ligações entre estes nós em que a direção em que foi feita é determinada) e determinar o valor do menor circuito do tapete, ou seja, o circuito em que a razão entre a quantidade de fio dividida pelo número de nós é mínimo.;"A entrada é composta por diversas instâncias e termina com final de arquivo (EOF).

                    A primeira linha de cada instância contém dois inteiros, N (3 ≤ N ≤ 1.000) e M (N ≤ M ≤ N × N − 1), correspondendo aos números de nós e ligações, respectivamente. Os nós são numerados de 1 a N. Seguem M linhas, cada uma com três inteiros u, v e c (0 ≤ c ≤ 1.000) descrevendo uma ligação do nó u para o nó v usando c cm de fio.";Para cada instância, imprima em uma única linha o valor mínimo de um circuito do tapete, onde esse valor é a razão entre a quantidade de fio dividida pelo número de nós no circuito. O valor deve ser impresso com 3 casas decimais. Imprima -1, caso não exista circuito no tapete.;False;10 / 10;65;17;26.15%
1599;Picos do Átlas;Paradigmas;7;"O Marrocos é cortado pelas montanhas Atlas, cujo pico mais alto é Toubkal, com 4.165 metros. Estas montanhas deram origem a diversos mitos e histórias durante toda a antiguidade, como, por exemplo, nos 12 trabalhos de Hércules. Próximo à cidade de Marrakech fica o que se chama de “alto Atlas”, a parte mais alta destas montanhas.

                    O estudo das altitudes dos diversos picos tem sido feito há séculos. Antigos documentos berberes documentam o registro de diferentes altitudes dos vários pontos das montanhas Átlas desde o século XVI. O documento é um mapa da região dividido em quadrantes. Em cada quadrante está anotada a altura média daquele ponto. Sabemos que um ponto é um pico se a altura daquele quadrante é maior que de seus vizinhos (um quadrante tem até 8).

                    Sua tarefa neste exercício é ler esse mapa e identificar os picos existentes na região documentada.";"A entrada é composta por diversas instâncias e termina com final de arquivo (EOF).

                    Cada instância corresponde ao mapa de uma região e é representado por uma matriz N × M (1 ≤ N, M ≤ 1.000). A primeira linha de cada instância contém os inteiros N e M. Para i = 1, 2, . . . , N, a (i + 1)-ésima linha corresponte a i-ésima linha da matriz e contém M inteiros separados por um espaço.";Para cada instância imprima as coordenadas dos picos do mapa correspondente, uma por linha,ordenado primeiro pelas linhas e, em caso de empate, pelas colunas. Caso não existam picos, imprima -1. Imprima uma linha em branco no final da saída de toda instância.;False;7 / 10;797;338;42.41%
1600;O Gato do Zelador do Armazém;Paradigmas;9;"Sokoban é um jogo muito conhecido. O que poucas pessoas sabem é que o jogo foi inventado pelos bérberes, povos árabes que habitavam o norte da África, mais especificamente onde hoje existe o Marrocos. Para estes povos os gatos são considerados um animal que traz mau agouro, principalmente por conta de seu comportamento egoísta (como atesta o provérbio destacado acima).

                    Nessa versão original do sokoban o personagem é um gato que fica empurrando os blocos de terra ao seu redor. Há um tabuleiro que consiste de N linhas e M colunas. Você controla o gato que pode se movimentar em qualquer uma das 4 casas adjacentes, desde que essa esteja livre, ou pode empurrar um bloco em qualquer uma dessas 4 direções.

                    Como na versão mais conhecida, seu objetivo é empurrar o bloco até uma posição final especificada. Note que você pode apenas empurrar o bloco e nunca puxar.

                    A versão bérbere do jogo tem uma particularidade. Há algumas casas especiais que são portas. Sempre que o gato ocupa uma posição com porta pela primeira vez, a porta é aberta. O bloco não pode ser empurrado para a posição de uma porta se ela estiver fechada. Após aberta, uma porta se comporta como uma posição livre.

                    Você quer empurrar o bloco para a posição final abrindo o menor número de portas possível.

                    Considere toda posição fora do tabuleiro como uma parede.";"A entrada é composta por diversas instâncias e termina com final de arquivo (EOF).

                    Cada instância inicia com uma linha contendo 2 inteiros separados por um espaço, N e M (1 ≤ N, M ≤ 25).

                    Seguem-se N linhas, cada uma com M caracteres pertencentes ao conjunto {∗, ., j, b, x, #}, onde:

                    
                        ‘*’ representa uma parede;
                        ‘.’ representa uma posição vazia;
                        ‘j’ representa a posição inicial do gato (Cada instância contêm exatamente um caractere ‘j’);
                        ‘b’ representa a posição inicial do bloco (Cada instancia contêm exatamente um caractere ‘b’);
                        ‘x’ representa a posição final desejada para o bloco (Cada instância contêm exatamente um caractere ‘x’);
                        ‘#’ representa uma porta (Cada instância contêm no máximo 5 caracteres ‘#’);";Para cada instância imprima uma única linha. Caso seja possível empurrar o bloco para a sua posição final essa linha deverá consistir de 2 inteiros, que são o número mínimo de portas que precisam ser abertas para realizar tal ação e o número mínimo de movimentos que são necessários com esse número de caixas abertas. Imprima ‘-1’ caso não seja possível empurrar o bloco para a sua posição final.;False;9 / 10;170;70;41.18%
1601;Partição do Rebanho;Paradigmas;10;"A culinária marroquina é muito famosa por suas deliciosas receitas que envolvem vários tipo de carnes assadas, mas especialmente carneiros, que são criados na região desde o século VIII. Uma curiosa tradição bérbere envolve a partilha da criação de um pastor no momento de sua morte. Independentemente do número de filhos que ele tenha, apenas o primogênito e filho mais novo têm direito à herança. Os demais filhos não ganham nada. Então, todos os animais são pesados, e os pesos (arredondados para o inteiro mais próximo) são considerados. O rebanho é então dividido em duas partes, de forma que, em cada uma os animais têm pesos semelhantes. Mais especificamente, o rebanho é particionado em duas partes, A e B, de tal forma que,  

                    

                    seja mínima. Então, o primogênito fica com a parte do rebanho de peso maior, e o último filho, com a parte de peso menor. Não parece muito justo, mas é a tradição por lá.";"A entrada é composta por diversas instâncias e termina com final de arquivo (EOF).

A primeira linha de cada instância contém um inteiro N (2 ≤ N ≤ 1.000) indicando a quantidade de carneiros no rebanho. A linha seguinte contém N inteiros separados por um espaço, correspondendo aos pesos (0 ≤ peso(·) ≤ 100) dos carneiros.";Para cada instância, imprima em uma única linha o valor mínimo de S (A, B).;True;10 / 10;132;38;28.79%
1602;Hiperprimos;Paradigmas;6;"Várias descobertas matemáticas da idade média são devidas a matemáticos árabes famosos como al-Khwarizmı 1, Omar Khayyám, e Sharaf al-Dın al-Tusı entre outros. Um dos resultados pouco conhecido é sobre os números hiperprimos. Dizemos que um número é hiperprimo se ele tiver um número primo de divisores. Assim, por exemplo, 25 é hiperprimo, pois tem 3 divisores. Já 42 não é hiperprimo, pois tem 8 divisores.

                    Dado um inteiro N, determine o número de hiperprimos no intervalo [2, N].";"A entrada é composta por diversas instâncias e termina com final de arquivo (EOF).

                    Cada instância consiste de uma única linha contendo um único inteiro, N (2 ≤ N ≤ 2 × 106).";Para cada instância, imprima uma linha com a quantidade de hiperprimos no intervalo [2, N].;False;6 / 10;1538;523;34.01%
1603;Canais de Qanat;Paradigmas;10;"A medina de Marrakech é formada pela cidade fortificada, patrimônio universal da Unesco desde 1995. O início de sua construção remonta à fundação da cidade no século XI e inclui vários monumentos impressionantes, como a mesquita de Koutoubia, madraçal de Ben Youssef, e o Palácio Bahia. Várias histórias cercam os monumentos que formam a medina. A mais interessante diz respeito os jardins Ménara. O parque tem hortas e lagos artificiais construídos na época do sultão. Abd-el-Rhaman, que era um apaixonado por desafios matemáticos. Um dos mais brilhantes é o dos conjuntos de canais de qanat (قناة). Cada conjunto é formado por um canal fechado e um canal aberto. O canal fechado tem o formato de um polígono e o canal aberto consiste de uma sequência de arestas formando um caminho. O desafio é determinar se é possível transformar o canal fechado no canal aberto através de operações mentais sobre o canal fechado, como de remoção de vértices e arestas, translações e rotações (no plano).

                    Os canais são dados através das coordenadas dos seus vértices e a ordem na qual os vértices são dados indica o sentido do fluxo de água. Consideramos que é possível transformar o canal fechado no aberto se após a aplicação das operações, o canal resultante tem as mesmas coordenadas e a água flui no mesmo sentido.

                    

                    Figura 1. Ilustração primeiro (esq.) e segundo (dir.) exemplos de entrada.";"A entrada é composta por diversas instâncias e termina com final de arquivo (EOF).

                    A primeira linha de cada instância contém dois inteiros Nf (3 ≤ Nf ≤ 20.000) e Na (2 ≤ Na ≤ 5.000), correspondendo ao número de vértices dos canais fechado e aberto, respectivamente. A linha seguinte contém Nf pares de inteiros (xi , yi) (−10.000 ≤ x, y ≤ 10.000), cada par representando a coordenada de um vértice do canal fechado. No canal fechado a água sempre flui no sentido anti-horário e os vértices são númerados de 1 a Nf . A terceira e última linha contém Na pares de inteiros (xi , yi) correspondendo aos vértices do canal aberto.";Para cada instância imprima -1, se não é possível transformar o canal fechado no aberto, ou o menor índice do vértice do canal fechado que coincide com primeiro vértice do canal aberto após a transformação.;True;10 / 10;44;10;22.73%
1604;Pair-voting no Conselho de Gueliz;Paradigmas;7;"O bairro de Gueliz em Marrakech é hoje conhecido por ser a parte moderna da cidade, com diversas opções turísticas, restaurantes e bares. Poucos conhecem a formação do bairro, ainda no século XVI. Originalmente o bairro, também conhecido como “Cidade Nova” foi se formando fora da fortaleza (Medina, cidade antiga). O primeiro novo morador ganhou uma autorização oficial da prefeitura para construir sua casa, e ficou responsável por dar novas autorizações. Quando uma rua foi aberta, um habitante do fim da rua (até a primeira esquina formada) foi designado representante da rua juntamente com o primeiro morador. E assim ocorreu para todas as ruas da cidade: os moradores das esquinas eram representantes das ruas que se encontravam naquela esquina, de forma que cada trecho de rua sem esquinas tem exatamente dois representantes. Há em Gueliz uma lenda que impede a formação de quarteirões (conjunto de casas cercadas por ruas). Os antigos contam que uma vez formaram um quarteirão no bairro, e quando uma pessoa má morreu seu espírito ficou ali preso para sempre, assombrando as pessoas que ali moravam. Desde então nunca mais se formaram quarteirões no bairro.

                    O conselho do bairro de Gueliz é formado pelo primeiro morador e os representantes de cada rua. Estes representantes formam comitês para analisar as diversas questões. Nos comitês os conselheiros são agrupados em pares, e todos os conselheiros devem participar de exatamente um par. Cada par tem um único voto e a moção é aprovada quando atinge maioria dos votos. Cada par deve ser formado por conselheiros representantes de ruas que se encontram em alguma esquina (ou pelo primeiro morador e o representante de sua rua). Claramente, quando o número de conselheiros é ímpar não é possível encontrar uma composição dos comitês de que participem todos os conselheiros. Quando isso ocorria, o primeiro morador tinha um voto sozinho, e os demais deveriam ser divididos em pares.

                    Entretanto, com o passar do tempo houve ocasiões em que não foi possível montar um comitê, o que sempre foi motivo de desconfiança entre os moradores de Gueliz. Sua tarefa neste exercício é dado N o número de representantes de rua (o representante 1 é o primeiro morador) decidir se é possível formar um comitê de pares de conselheiros conforme descrito acima.";"A entrada é composta por diversas instâncias e termina com final de arquivo (EOF).

                    A primeira linha de cada instância contém um inteiro par N (1 ≤ N <105). As próximas N − 1 linhas contêm 2 inteiros cada uma. A i-ésima linha, dessas N − 1 linhas, contém os representantes x e y (1 ≤ x, y ≤ N) de um trecho de rua sem esquinas.";Para cada instância, imprima na primeira linha Y se é possível formar um comitê de pares de conselheiros ou N, caso contrário. Caso seja possível formar um comitê, imprima uma lista de pares de conselheiros, um par por linha. Um par de conselheiros consiste de dois inteiros xi e yi, separados por um espaço, de forma que xi < yi. Além disso, a lista de pares de conselheiros deve estar ordenada de forma crescente por xi. Caso exista mais de uma forma de montar um comitê, imprima a lexicograficamente menor. Note que, quando o representante 1 tem voto sozinho, ele não pertence a nenhum par.;False;7 / 10;87;46;52.87%
1605;Montando Sua Própria Cáfila;Paradigmas;2;"Camelos foram domesticados e são utilizados pelos povos beduínos há vários milênios. Há dois tipos principais, os camelos bactrianos, com 2 corcovas, que são mais raros, e os dromedários, mais comuns, com apenas uma corcova. Para simplificar, os camelos bactrianos são chamados apenas de camelos.

                    Tanto camelos quanto dromedários têm diferentes características interessantes: alguns são líderes natos, outros têm mais força, outros suportam caminhadas mais longas, etc. No entanto, cada animal possui apenas uma dessas características. Uma caravana precisa de animais com várias dessas características. No comércio desses animais são consideradas N1 características diferentes para dromedários e N2 características diferentes para camelos.

                    Os beduínos comercializam esses animais sempre em cáfilas formadas por grupos de três. Essa é uma tradição bérbere que remonta ao século IX, quando os comerciantes de camelos e dromedários só podiam vender seus animais dessa forma. Os compradores não podem escolher os animais. Os lotes de 3 animais são preparados pelo vendedor e o comprador pode apenas dizer o número do lote que deseja comprar, sem mais informações a respeito. Os comerciantes são conhecidos por sua extrema honestidade, e cada lote é formado de forma aleatória. Para cada animal do lote, o comerciante sorteia com probabilidade p1 se será um dromedário e com probabilidade p2 = 1 − p1 se será um camelo, p1 ≥ p2 . Escolhido o tipo i de animal, é escolhida uma característica dentre as Ni, com igual probabilidade, e um animal com essa característica é incluído no lote.

                    Todos os sorteios do comerciante são independentes, podendo um lote conter dois dromedários fortes e um camelo líder, por exemplo, ou mesmo três camelos bons de caminhada. Entretanto, para atestar sua honestidade, sempre que o comerciante produz um lote que tem apenas dromedários ele faz um novo sorteio.

                    Dentre as N1 características para dromedários, há M1 que são desejáveis para o comprador. E dentre as N2 características para camelos, há M2 que são desejáveis para o comprador. Qual o número esperado de lotes que um comprador deve adquirir para montar uma cáfila que tenha dromedários e camelos com todas as M1 e M2 características desejadas?";"A entrada é composta por diversas instâncias e termina com final de arquivo (EOF).

                    Cada instância consiste de 3 linhas, cada uma contendo 2 inteiros. Na primeira linha temos N1 e N2 (1 ≤ Ni ≤ 50). A segunda linha consiste de M1 e M2 (0 ≤ Mi ≤ Ni), enquanto que a terceira linha temos W1 e W2 (1 ≤ W2 ≤ W1 ≤ 100), que dão as probabilidades de cada categoria através da realção:";Para cada instância imprima uma linha contendo um número com 2 casas decimais, que é o número esperado de lotes que o comprador precisa comprar para completar sua cáfila.;True;2 / 10;27;18;66.67%
1606;As Dicas de Ali Babá;Paradigmas;3;"As Mil e Uma Noites são uma coleção de histórias árabes que remontam ao século IX. Algumas traduções para o ocidente foram feitas a partir do século XVII, e algumas destas histórias, como ""Simbad, o Marujo"", ""Aladim e a Lâmpada Mágica"" e ""Ali Babá e os Quarenta Ladrões"" são hoje conhecidas por crianças de todo o mundo. Na história de Ali Babá os tesouros são guardados em uma gruta que se abre quando a expressão ""Abre-te Sésamo"" é usada. Na verdade, o tesouro estava escondido dentro de um cofre na parede da gruta, que se abria quando uma permutação dos inteiros de 1 a N era recitada. Nem todos os 40 ladrões tinham boa memória, assim Ali Babá era obrigado a manter nas paredes da gruta, dicas de como reconstruir a permutação, caso algum dos ladrões a esquecesse. Ele anotava uma sequência de inteiros a1, a2, ... , ak gerada a partir da permutação que abria o cofre após possíveis aplicações das seguintes operações: duplicação (i, j) e espelhamento (i, j), para i ≤ j. A operação duplicação (i, j) cria uma cópia da subsequência ai, ai+1, ... , aj e a insere entre aj e aj+1. A operação espelhamento (i, j) insere uma cópia invertida da subsequência de ai até aj (aj, aj-1, ... , ai) entre aj e aj+1.

                    Por exemplo, dada a sequência (a1, a2, a3, a4, a5, a6), a aplicação da operação espelhamento (3,5) gera a sequência (a1, a2, a3, a4, a5, a'5, a'4, a'3, a6).

                    Sua tarefa é reconstruir a permutação original.";"A entrada é composta por diversas instâncias e termina com final de arquivo (EOF).

                    A primeira linha de cada instância contém os inteiros K (2 ≤ K ≤ 10 5) e N (1 ≤ N ≤ K) indicando, respectivamente, o tamanho da sequência escrita por Ali Babá e o maior inteiro da permutação original. A linha seguinte contém os K inteiros da sequência, separados por um espaço.";Para cada instância, imprima uma única linha com a permutação que originou a sequência da entrada, com um espaço separando inteiros consecutivos. Caso exista mais de uma permutação possível, qualquer uma delas será aceita.;False;3 / 10;460;278;60.43%
1607;Avance as Letras;Strings;2;"É dado na entrada uma string A e outra B. Em uma operação você pode escolher uma letra da primeira string e avançar esta letra. Avançar uma letra significa transformá-la na próxima letra do alfabeto, veja que a próxima letra depois de z vem a letra a novamente! 

                    Por exemplo, podemos transformar a string ab em bd em no mínimo 3 operações: ab -> bb -> bc -> bd. Podemos aplicar operações nas letras em qualquer ordem, outra possibilidade seria: ab -> ac -> bc -> bd.

                    Dadas as duas strings, calcule o mínimo número de operações necessárias para transformar a primeira na segunda.";"Na primeira linha terá um inteiro T (T ≤ 100) indicando o número de casos de teste.

                    Para cada caso, na única linha teremos as duas strings A (1 ≤ |A| ≤ 100* ou 1 ≤ |A| ≤ 104** - sendo que |A| significa o tamanho da string A) e B (|B| = |A|* ou |B| = |A​|**) separadas por um espaço. Ambas as strings são compostas por letras do alfabeto minúsculas apenas e são do mesmo tamanho.

                    *Ocorre em aproximadamente 90% dos casos de teste;
                    **Ocorre nos demais casos de teste.";Para cada caso imprima o número mínimo de operações.;False;2 / 10;7268;3709;51.03%
1608;Bolos da Maria;Paradigmas;2;"Dona Maria é uma senhora que está aposentada e faz doces. Ela começou a fazer bolos para complementar a renda da família.

                    Para fazer um bolo, Dona Maria precisa de certa quantidade de alguns ingredientes diferentes. Cada ingrediente tem um custo fixo por unidade. Ela tem uma quantia de dinheiro D máxima para gastar na compra dos ingredientes. Dentre os tipos de bolos que existem, você deve escolher apenas um tipo, de maneira a maximizar a quantia de bolos.

                    Calcule o número máximo de bolos de um único tipo que podem ser confeccionados.";"Na primeira linha terá um inteiro T (T ≤ 100) indicando o número de casos de teste.

                    Para cada cada caso de teste, na primeira linha haverá três números inteiros D (1 ≤ D ≤ 109), I (1 ≤ I ≤ 100) e B (1 ≤ B ≤ 100) indicando o dinheiro que Dona Maria tem, o número de ingredientes existentes e a quantidade de tipo de bolos existentes, respectivamente. A próxima linha conterá I números inteiros indicando o preço da unidade de cada ingrediente. Seguem B linhas seguirão descrevendo cada bolo. O i-ésimo bolo é descrito da seguinte maneira: inicialmente há um número Qi (1 ≤ Qi ≤ 100) que indicará quantos ingredientes diferentes serão necessários. Logo em seguida teremos Qi pares de números indicando respectivamente o índice do ingrediente e a quantidade necessária, todos na mesma linha separados por espaços.

                    A quantia de cada ingrediente em um bolo poderá variar de 1 até 1000. Cada unidade de um ingrediente custará entre 1 e 1000. Os ingredientes na descrição de cada bolo serão diferentes. Os identificadores de ingrediente vão de 0 até I-1.";Para cada caso imprima o número máximo de bolos do mesmo tipo que podem ser confeccionados.;False;2 / 10;1247;784;62.87%
1609;Contando Carneirinhos;Ad-Hoc;3;"Para dormir você resolveu contar carneirinhos. O sono está demorando muito para vir e você percebeu que alguns carneirinhos estão se repetindo! Cada um deles é identificado por um número inteiro único, desta forma você vai evitar contar os repetidos.

                    Dado a sequência dos carneirinhos, imprima quantos de verdade você contou, ou seja, imprima o número de carneirinhos distintos.";"Na primeira linha você terá um inteiro T (T = 100*) indicando o número de casos de teste.

                    Na primeira linha de cada caso teremos o número inteiro N (1 ≤ N ≤ 100* ou 1 ≤ N ≤ 104​**), indicando o número de carneirinhos. Na próxima linha teremos N inteiros separados por espaço indicando a sequência de carneirinhos.

                    Os identificadores dos carneiros irão de 0 até 109, inclusive.
                    
                    *Ocorre em aproximadamente 90% dos casos de teste;
                    **Ocorre nos demais casos de teste.";Imprima o número de carneirinhos distintos para cada caso.;False;3 / 10;5293;2358;44.55%
1610;Dudu Faz Serviço;Grafos;7;"Dudu precisa de um documento para finalizar uma tarefa em seu trabalho. Após pesquisar um pouco, ele descobre que este documento depende de outros documentos que, por sua vez, necessitam de outros documentos e assim por diante.

                    Dudu chegou a uma lista final com todos os documentos que deverá precisar. Com essa lista em mãos, ele suspeita que a mesma possui loops. Por exemplo, se um documento A depende do documento B que por sua vez depende do documento A, tornaria a tarefa interminável. Veja que neste caso o loop tem apenas dois documentos, pode haver loops com três ou mais!

                    Dada a lista das dependências entre os documentos, ajude Dudu a saber se um dia conseguirá todos os documentos, ou seja, se não existe um loop na lista.";"Na primeira linha você terá um inteiro T (T = 100) indicando o número de casos de teste.

                    Na primeira linha de cada caso teremos os números inteiros N (2 ≤ N ≤ 100* ou 2 ≤ N ≤ 104**) e M (1 ≤ M ≤ 300* ou 1 ≤ M ≤ 3*104​**), indicando o número de documentos e as dependências existentes. Em cada uma das M linhas seguintes, terão dois inteiros A (1 ≤ A) e B (B ≤ N, com A != B), indicando que o documento A depende do documento B. Pode haver dependências repetidas!

                    *Ocorre em aproximadamente 90% dos casos de teste;
                    **Ocorre nos demais casos de teste.";Para cada caso, imprima SIM caso exista pelo menos um loop e NAO caso contrário.;False;7 / 10;12822;2639;20.58%
1611;Elevador Lotado;Paradigmas;5;"Em um prédio de N andares temos um elevador com capacidade para até C pessoas. Os andares são numerados de 0 a N-1. Há um grupo de M pessoas querendo usar o elevador, todas no andar 0. Cada uma deseja ir a um andar específico. Você deve decidir a ordem em que as pessoas devem usar o elevador de forma que a energia utilizada seja a menor possível.

                    Inicialmente um grupo de tamanho no máximo C pessoas decidido por você entra no elevador no andar 0. Depois você deve decidir a ordem em que os andares são visitados. Logicamente, os andares de todas as pessoas dentro do elevador devem ser visitados. O custo de energia do elevador é apenas no deslocamento, ou seja, a cada andar em que ele sobe ou desce você gasta uma unidade de energia. O processo é repetido até que não se tenha mais pessoas no andar 0. No fim o elevador deve voltar ao andar 0.

                    Dado o tamanho do prédio, a capacidade do elevador e os andares das pessoas que querem utilizar o elevador, monte a melhor estratégia que minimize a energia utilizada. Imprima o valor desta energia.";"Na primeira linha você terá um inteiro T (T = 100) indicando o número de casos de teste.
                    
                    Na primeira linha de cada caso teremos os números inteiros N (1 ≤ N ≤ 104), C (1 ≤ C ≤ M) e M (1 ≤ M ≤ 1000* ou 1 ≤ M ≤ 5*104**). Na próxima linha teremos M inteiros indicando os andares a serem visitados pelas pessoas.   Os inteiros indicando os andares vão de 1 até N-1, inclusive.
                    
                    *Ocorre em aproximadamente 90% dos casos de teste;
                    **Ocorre nos demais casos de teste.";Para cada caso, imprima em uma única linha o valor da mínima energia necessária.;False;5 / 10;1377;604;43.86%
1612;Formiguinha;Ad-Hoc;2;"Uma formiguinha está andando sobre um tronco de árvore de tamanho N metros. Podemos considerar que a formiga pode assumir as posições de 0 até N-1. Assuma que ela está no eixo X dos planos coordenados, porém ela começa em uma posição desconhecida. A única coisa que se sabe sobre sua posição inicial é que é um número inteiro.

                    A formiguinha pode dar um passo para a esquerda ou direita, e este passo a desloca de um metro. Se ela está na posição P e dá um passo para a direita, ela assumirá a posição P+1. Se o passo for para a esquerda, ela assumirá a posição P-1. Se em algum momento ela assumir a posição -1 ou a posição N, ela cairá do tronco! Um passo leva um segundo para ser completado, e a formiga sempre está se movendo.

                    Considerando que a formiga fará sempre a pior sequência de passos possível, escolha uma posição inicial de modo que maximize o tempo em que a formiga permaneça no tronco. Imprima este tempo.";"Na primeira linha você terá um inteiro T (T <= 100) indicando o número de casos de teste.
                    
                    Para cada caso teremos uma única linha com o número inteiro N (1 ≤ N ≤ 109) indicando o tamanho do tronco da árvore.";Para cada caso, imprima o tempo máximo que a formiguinha pode ficar no tronco.;False;2 / 10;2789;1625;58.26%
1613;Goemon em Apuros;Geometria Computacional;9;"O lendário Ishikawa Goemon será fervido vivo em um grande caldeirão de ferro se for capturado! Para se esconder dos guardas nosso herói correu para dentro de uma casa que contém algumas paredes. Como é noite e a casa está escura os guardas jogaram uma bomba de luz para localizar o fugitivo. Tudo que for iluminado pela explosão da bomba será visto pelos guardas. A bomba emite infinitos raios de luz, em linha reta, para todas as direções partindo de seu epicentro.

                    Podemos simplificar este cenário usando um plano cartesiano 2D, onde as paredes da casa são segmentos da reta X = 0. O epicentro da explosão de luz sempre terá coordenada com valor X < 0. Os pontos onde Goemon pode se esconder sempre terão coordenadas com X > 0. A imagem abaixo ilustra o cenário iluminado quando a bomba no ponto E(-12,12) explode:

                    

                    As paredes são descritas por segmentos de reta, e elas bloqueiam os raios de luz. No exemplo acima temos a parede A que vai do ponto A(0,0) até o ponto A1(0,2), a parede B que vai de B(0,4) até B1(0,6), a parede C que vai de C(0,10) até C1(0,12) e a parade D que vai de D(0,14) até D1(0,16). O epicentro da explosão de luz é o ponto E(-12,12) no exemplo dado, e Goemon tem as opções de ficar nos pontos G1(8,2), G2(12,14) e G3(10,10). Destes três pontos, ele só estará protegido no ponto G3, pois os raios de luz da explosão não alcançam este ponto mas alcançam os outros pontos (inclusive o G1), tornando-os visíveis para os guardas.

                    Dado o epicentro da explosão, as paredes e os pontos que Goemon pode ficar, calcule quantos destes pontos são seguros para ele se esconder.";"Na primeira linha você terá um inteiro T (T = 100) indicando o número de casos de teste.

                    Na primeira linha de cada caso de teste terá a coordenada (x, y) do epicentro da explosão de luz. Na próxima linha terá um inteiro P (1 ≤ P*), indicando o número de paredes existentes. Nas próximas P linhas seguirão pares de inteiros indicando as posições das paredes, onde começa e termina uma parede (lembre-se que elas ficam no eixo Y, ou seja, X = 0). Depois haverá um inteiro G (G ≤ 100* ou G ≤ 104**) indicando os pontos candidatos para Goemon se esconder. Depois G linhas seguirão com pares de coordenadas (x, y) indicando as coordenadas dos pontos.

                    Todas as coordenadas irão de -104 até 104 e serão números inteiros. O centro da explosão terá X < 0 e as posições de Goemon X > 0. O Y inicial de uma parede sempre será estritamente menor do que o final. As paredes não estarão ordenadas. As paredes não se intersectarão, e não podem compartilhar um ponto inicial ou final. Pode ter posições repetidas de Goemon.

                   *Ocorre em aproximadamente 90% dos casos de teste;
                    **Ocorre nos demais casos de teste.";Para cada caso imprima o número de pontos que são seguros para Goemon ficar.;True;9 / 10;329;96;29.18%
1614;Ajude o Turista;Paradigmas;7;"Luís está de férias e gostaria de conhecer os pontos turísticos de Manhattan nos próximos K dias. Através de um mapa, ele sabe a localização dos N pontos turísticos e das M estações de metrô da cidade. Para apreciar bastante os passeios, ele irá visitar apenas um ponto por dia. Entretanto, ele é bastante preguiçoso e gostaria de caminhar a menor distância possível entre o ponto turístico e uma estação de metrô. 

                    Em outras palavras, encontre K pares distintos de pontos turísticos e estações de metrô, de forma que a soma das distâncias destes pares seja o mínimo possível. A distância é medida usando-se a métrica de Manhattan, ou seja, dado um ponto A e outro B, a distância entre eles é definida por: D(A,B) = |A_x - B_x| + |A_y - B_y|. Mais informações sobre esta distância: http://en.wikipedia.org/wiki/Taxicab_geometry .";"Na primeira linha você terá um inteiro T (T = 100) indicando o número de casos de teste.

                    Na primeira linha de cada caso de teste estarão três números inteiros N (1 ≤ N*) , M (M ≤ 100*) e K considerando 1 ≤ K ≤ min(10, N*M). Nas próximas N  linhas estarão as localizações dos pontos turísticos e nas próximas M linhas as localizações das estações de metrô, todas dadas por um par de inteiros (x, y - 0 <= x,y <= 1000* ou 0 <= x,y <= 105**). Não há pontos turísticos ou estações de metrô na mesma localização.

                    *Ocorre em aproximadamente 90% dos casos de teste;
                    **Ocorre nos demais casos de teste.";Imprima a soma das distâncias percorridas por Luís em cada caso. Lembre-se que você deve minimizar este valor.;False;7 / 10;421;141;33.49%
1615;Insatisfação nas Eleições;Ad-Hoc;3;"Uma eleição foi feita em uma pequena cidade de M habitantes, onde havia N candidatos. As pessoas escreviam o número do candidato em um pedaço de papel, e inseriam na urna.

                    Ao final da eleição, se um candidato receber uma quantidade estritamente maior do que 50% dos votos, ele é considerado o vencedor. Caso contrário um segundo turno de eleições é feito.

                    Como o processo de contagem manual é muito lento, você deve desenvolver um programa que decide qual o candidato vencedor ou se nenhum recebeu votos suficientes e um segundo turno será necessário.";"Na primeira linha você terá um inteiro T (T ≤ 100) indicando o número de casos de teste.
                    
                    Para cada caso de teste, na primeira linha você terá os números inteiros N (1 ≤ N ≤ 10) e M (1 ≤ M ≤ 103* ou 1 ≤ M ≤ 5*104**). Na próxima linha, M inteiros seguirão separados por espaços, indicando o candidato em que cada pessoa votou, ou seja, o número escrito em cada pedaço de papel dentro da urna.
                    
                    *Ocorre em aproximadamente 90% dos casos de teste;
                    **Ocorre nos demais casos de teste.";Para cada caso, imprima o número do candidato vencedor, ou -1 caso haverá segundo turno.;False;3 / 10;1212;733;60.48%
1616;Baile de Formatura;Paradigmas;5;"É final de ano, e finalmente Rafael está se formando em seu curso de Computação. O pessoal da sua sala resolveu comemorar a formatura organizando um baile, onde haveria música ao vivo, comida e bebida grátis. Como todo baile, o momento mais esperado é aquele em que todos começam a dançar em pares.

                    Os pares serão formados entre um garoto e uma garota, e como os alunos da sala de Rafael são muito tímidos, decidiram definir com antecedência quais seriam os pares. Há apenas um problema: há mais garot os  do que garotas na sala. Isso implica que, para que todos consigam dançar ao menos uma vez, uma ou mais garotas terão que dançar com mais de um garoto.
                    
                    Rafael pediu sua ajuda: de quantas maneiras os pares podem ser formados, de tal forma que todos os garotos dancem exatamente uma vez, e que todas as garotas dancem ao menos uma vez?";"Haverá diversos casos de teste. Cada caso de teste consiste de dois inteiros, B e G (1 ≤ G < B ≤ 10³), indicando o número de garotos e garotas na sala, respectivamente.

                    O último caso de teste é indicado quando B = G = 0.";"Para cada caso de teste imprima uma linha, contendo um inteiro, indicando quantas maneiras é possível que os pares sejam formados de tal modo que todos os garotos dancem exatamente uma vez, e que todas as garotas dancem ao menos uma vez.

                    Como o resultado pode ser muito alto, imprima o resultado com resto de divisão em 1000000007 (10⁹+7).";False;5 / 10;485;251;51.75%
1617;Caminho Seguro;Grafos;7;"Você, um Tenente especializado em computação, foi designado para ajudar o Coronel Rambo que por ser italiano, prefere ser chamado de Ramboni. Ramboni é o bravo comandante das tropas aliadas, que luta para manter a ordem na região das Algarias.

                    Para executar as missões, as tropas precisam se alimentar bem e com regularidade. Para isso, diariamente um caminhão sai do quartel, na cidade DeTI e viaja alguns quilômetros passando por várias cidades até chegar ao destino, na cidade DeOT, onde tem comida farta. Entretanto, nos últimos dias, começaram a ocorrer ataques ao caminhão para roubar o carregamento.

                    Diante deste cenário crítico, o Coronel Ramboni elaborou um plano. O caminhão deveria ir por um caminho e voltar por outro caminho totalmente diferente do caminho de ida. Sendo que o caminhão não pode passar pela mesma rodovia/estrada duas vezes. Caso não seja possível essa possibilidade, o caminhão deve ficar no destino para voltar apenas no outro dia. O incansável Coronel Ramboni pediu uma coisinha a mais: temos que ser rápidos, pois a tropa não pode ficar com fome.";A entrada conterá vários casos de testes. Cada caso de teste iniciará com um inteiro N (2 ≤ N ≤ 100) indicando o número de cidades. DeTI é a cidade de número 1, e a DeOT é a cidade N. A próxima linha conterá um inteiro M representando o número de estradas/rodovias. As próximas M linhas descreverão as M estradas/rodovias. Cada linha conterá 3 inteiros, ou seja, as duas cidades conectados por uma estrada/rodovia e o tempo necessário para percorrer a distância entre elas (em minutos). Nenhuma estrada/rodovia levará mais do que 1000m ou menos que 1m. Cada estrada/rodovia se conectará a duas diferentes cidades. Nenhum par de cidades será diretamente conectado por mais do que uma estrada/rodovia. O último caso de teste será seguido por uma linha contendo o número 0.;Para cada caso de teste, a saída deverá ser uma linha contendo um único inteiro – o número de minutos que o caminhão precisará para ir de DeTI até DeOT e voltar. (Considere que o tempo que o caminhão fique em DeOT seja desprezível). Se não houver solução, escreva “Pernoite.”.;False;7 / 10;191;76;39.79%
1618;Colisão;Ad-Hoc;4;Você recebeu a missão de verificar se o robô invadiu uma área retangular formada por quatro pontos cardeais (A,B,C e D). Serão informados os quatro pontos de um plano cardeal conforme a figura. A área será formada pela ligação dos quatro pontos da seguinte forma A-B, B-C, C-D e D-A. Será informado ainda a coordenada X,Y do robô.;A entrada é composta de vários casos de testes. A primeira linha é formada por um número N indicando o total de casos de testes. As próximas N linhas são constituídas por 10 números inteiros (Ax, Ay, Bx, By, Cx, Cy, Dx, Dy, RX, RY) representando cada um dos vértices A, B, C e D e pela posição X, Y do robô. Cada valor é separado por um espaço em branco.;A saída deverá imprimir para cada caso de testes o número 1, se o robô estiver dentro da área (considerar as bordas da figura como parte da área da figura), e imprimir o número 0 caso contrário.;True;4 / 10;4826;1873;38.81%
1619;Diferença entre Datas;Ad-Hoc;5;"Joana está trabalhando na nova versão do blog de sua empresa. Uma das coisas que ela quer mudar é a forma como as datas são mostradas no blog. Na versão atual, as datas são mostradas como ano-mês-dia (por exemplo, 2014-05-23).

                    Ela deseja que, em vez disso, seja mostrado o número de dias que se passaram desde a publicação do post até hoje (por exemplo, se hoje é 9 de agosto de 2014, então a data 2014-05-23 seria mostrada como ""78 dias atrás"" e a data 2014-08-07 seria ""2 dias atrás"").
                    
                    
                    Joana está ocupada com alguns problemas mais complexos relacionados ao blog e pediu que você a ajudasse com essa parte.                  Dadas duas datas, calcule o número de dias que se passaram entre elas.
                    
                    
                    Observações 
                    
                    
                    Tome cuidado com anos bissextos (que possuem o dia 29 de fevereiro, e, portanto, 366 dias no total). Um ano é bissexto se seu número é um múltiplo de 400 ou se é um múltiplo de 4, mas não de 100.";"A entrada começa com uma linha contendo um único inteiro N, que representa o número de casos de teste (0 < N ≤ 10000).

                    Em seguida, há N linhas, cada uma descrevendo um caso de teste.
                    
                    Cada uma dessas linhas possui duas datas separadas por um espaço.


                    As datas estão no formado AAAA-MM-DD, onde AAAA é o ano, MM é o mês, e DD é o dia. Você pode supor que todas as datas são válidas (i.e., nãoo existem datas como 2013-02-31 na entrada). Todas as datas estãoo entre 1970 e 2014 (inclusive). Mês e dia são sempre dados com dois dí­gitos; 3 de fevereiro de 2014 é representado como 2014-02-03.";Para cada caso de teste, imprima uma linha contendo apenas o valor absoluto do número de dias entre as duas datas.;False;5 / 10;880;302;34.32%
1620;Triangulação de Delaunay;Matemática;4;"Em matemática, uma Triangulação de Delaunay para um conjunto de pontos P no plano é uma triangulação DT(P) onde nenhum ponto em P está dentro da circunferência formada por qualquer triângulo na DT(P). A Triangulação de Delaunay maximiza o menor ângulo de todos os triângulos na triangulação; esta tende a evitar triângulos com ângulos internos muito pequenos.

                    A triangulação foi inventada por Boris Delaunay em 1934. Para um conjunto de pontos em uma mesma linha, não existe Triangulação de Delaunay (o conceito de triangulação é desfeito para este caso). Para quatro ou mais pontos em um mesmo círculo (isto é, os vértices de um retângulo) a Triangulação de Delaunay não é única: cada uma das duas possibilidades de triangulação que divide o quadrilátero em dois triângulos satisfaz a “condição Delaunay”, isto é, que as circunferências de todos os triângulos tenham interiores vazios. Considerando que as circunferências são esferas, a noção de Triangulação de Delaunay estende-se a três dimensões. Generalizações são possíveis para métricas diferentes das Euclidianas. Entretanto, nestes casos não se pode garantir a existência ou a unicidade da Triangulação de Delaunay.

                    O doutor Louco da Silva, em seu doutorado, resolveu verificar a afirmativa sobre a triangulação de Delaunay anteriormente dita era verdadeira. Analisou as configurações de polígonos perfeito, como mostra a figura.

                    
                    
                    Ele verificou que é verdadeira e que a quantidade de arcos que criam a triangulação de Delaunay para a mesma quantidade de pontos era sempre a mesma. Por exemplo, para 3 pontos é sempre 3, para 4 pontos é sempre 5, para 5 pontos é sempre 7 e para 6 pontos é sempre 9 e assim sucessivamente.
                    
                    Ele resolveu então criar um número real (X) determinado pela relação da quantidade de arco (I) com a quantidade de pontos (L) que é:
                    
                    
                    
                    Ajude o doutor fazendo um programa que calcule o valor do número real X.";A entrada é composta de um conjunto de teste, que contém uma única linha com um valor inteiro L (3 ≤ L ≤ 1080). A entrada termina quando L = 0.;Para a entrada seu programa deve produzir um único resultado real X com precisão de seis casas decimais. Utilize variáveis de dupla precisão para o cálculo.;True;4 / 10;3093;1272;41.13%
1621;Labirinto;Grafos;6;"Labirinto de papel é o passatempo favorito de Rafael, mas ele anda reclamando que os labirintos que ele encontra para resolver são muito fáceis. Para ser mais específico, a distância entre o início do labirinto e a saída é sempre muito pequena.

                    A entrada de um labirinto é por onde o jogador deve começar a resolvê-lo, e a saída é por onde o jogador deve terminar o labirinto. O jogador pode dar passos nas quatro direções – cima, direita, baixo ou esquerda – e a distância entre a entrada e a saída do labirinto é dado pela soma de passos do menor caminho que pode ser feito.
                    
                    Dado um labirinto de N linhas e M colunas, diga qual a distância máxima que pode ser definida se a entrada e a saída for escolhida de forma ótima.";"A entrada contém diversos casos de teste. Cada caso de teste inicia com dois inteiros N e M (5 ≤ N, M ≤ 500), representando o número de linhas e colunas do labirinto, respectivamente.

                    A seguir haverá N linhas contendo M caracteres cada, representando o labirinto a ser analizado. O caractere da i-ésima linha e da j-ésima coluna indica o que há na posição i, j do labirinto. Se o caractere for um “.” (ponto), significa que aquele é um espaço vazio, por onde o jogador pode passar. Caso seja um “#”, significa que aquele é um obstáculo, por onde o jogador não pode passar.
                    
                    Haverá sempre ao menos dois espaços vazios no labirinto, e só há um caminho entre quaisquer dois espaços vazios. A entrada e a saída do labirinto não necessariamente precisam estar nas bordas.
                    
                    O último caso de teste é indicado quando N = M = 0, o qual não deverá ser processado.";Para cada caso de teste imprima uma linha, contendo um inteiro, indicando a distância entre a entrada e a saída do labirinto se a localização da entrada e da saída do labirinto for escolhida de forma ótima.;False;6 / 10;1213;411;33.88%
1622;Lâmpadas;Ad-Hoc;5;"No último trabalho da escola, você desenvolveu um projeto um tanto quanto curioso. Trata-se de N lâmpadas dispostas uma ao lado da outra, enumeradas de 1 até N, da esquerda para a direita, e de um único interruptor. Quando este interruptor é pressionado, ele troca o estado de uma das lâmpadas (se está ligada, ela desliga, e vice-versa).

                    O diferencial do seu projeto está no comportamento desse interruptor. Em vez de trocar o estado de apenas uma lâmpada em particular, ele intercala entre as lâmpadas em que ele vai agir, funcionando da seguinte maneira: na primeira vez ele troca o estado da lâmpada número 1; na segunda, e nas próximas vezes, ele troca o estado da lâmpada que está K posições à direita da anterior. Se ele chegar no final da sequência, ele continua a contar da posição 1.

                    Ou seja, seja N = 8 e K = 3, se pressionarmos o interruptor 4 vezes ele vai agir nas lâmpadas 1, 4, 7 e 2, respectivamente.

                    Você ficou um pouco intrigado com sua própria invenção, e resolveu fazer alguns testes. Dado o estado inicial de cada uma das N lâmpadas (ligado ou desligado), o valor de K e um número M de vezes que o interruptor foi pressionado, diga o estado final das N lâmpadas.";"Haverá diversos casos de teste. Cada caso de teste inicia com dois inteiros N e Q (3 ≤ N ≤ 100, 1 ≤ Q ≤ 1000), representando o número de lâmpadas e o número de consultas, respectivamente.

                    Em seguida haverá uma linha com N caracteres, representando o estado das N lâmpadas. O i-ésimo caractere indica o estado da i-ésima lâmpada, estando ela ligada (caractere ""o"") ou desligada (caractere ""x""), para todo 1 ≤ i ≤ N.

                    Em seguida haverá Q linhas, cada uma com dois inteiros K e M (1 ≤ K < N, 1 ≤ M ≤ 10⁶), indicando o tamanho do “salto” que seu interruptor dá (conforme o enunciado), e o número de vezes que o mesmo foi pressionado, respectivamente. A cada consulta o interruptor inicia na posição 1.

                    O último caso de teste é indicado quando N = Q = 0, o qual não deverá ser processado.";"Para cada consulta imprima uma linha, contendo N caracteres cada, onde o i-ésimo caractere indica o estado da i-ésima lâmpada, estado ela ligada (caractere ""o"") ou desligada (caractere ""x"").";False;5 / 10;659;241;36.57%
1623;Linguagem;Matemática;8;"Germanio um guerreiro intergaláctico e conquistador de planetas tem uma dificuldade para falar quando ele fica nervoso, ele fica um pouco gago. Então, palavras como QUERO, ele fala QQUERO, VAMOS, ele fala VVAMOS e assim por diante.

                    Aborrecido com esta situação, Germanio decidiu que toda nova conquista de um novo planeta ele iria inventar uma nova língua. Dado um alfabeto, onde não ocorre repetição de caracteres, por exemplo, QABCDEFG, todas as palavras da nova língua começariam com a letra Q duas vezes. Neste caso, a palavra QQABCDEFG seria válida.
                    
                    Você analisou o caso, e ainda fez a sugestão para que os caracteres a serem repetidos possam ocorrer em qualquer parte da nova palavra desde que sejam na mesma ordem e sempre juntos. No exemplo dado, ABCDEFGQQ seria válido também.
                    
                    O amado guerreiro Germanio gostou de sua ideia e pediu para você calcular quantas palavras estes novos idiomas terão. Mas, se o idioma tiver um número muito grande de palavras ele quer descartar este idioma.";"Haverá diversos casos de teste. Cada caso de teste inicia com dois números inteiros N e Q (1 < N ≤ 100000, 1 ≤ Q < N), indicando o tamanho do alfabeto e o número de caracteres do alfabeto que será considerado na repetição que pode ocorrer em qualquer parte da palavra, respectivamente. A segunda linha é composta por um inteiro T( 1 ≤ 105000) indicando o número máximo de palavras permitido por idioma.

                    O último caso de teste é indicado quando N = Q = 0, o qual não deverá ser processado.";Para cada caso de teste, imprima uma linha contendo um inteiro, indicando o número de palavras distintas que esta nova língua terá. E imprimirá “descartado” caso o número de palavras ultrapasse o valor de T.;False;8 / 10;1046;222;21.22%
1624;Promoção;Matemática;6;"Dr Luis Cláudio, um sujeito antenado com as promoções oferecidas pelo supermercado VemQueTem, o qual fica próximo à sua residência, anda muito sorridente ultimamente. Descobriu-se que ele foi sorteado em uma promoção oferecida pelo supermercado. Nesta promoção, a pessoa poderia entrar no supermercado, sozinho, e levar todos os produtos que pudesse carregar. Porém, algumas regras foram estabelecidas.

                    1)Entrar sozinho
                    
                    2)Apenas um produto de cada tipo pode ser levado
                    
                    3)Uma lista L contendo os preços e pesos dos produtos deve ser seguida
                    
                    4)Um peso P máximo foi estabelecido
                    
                    Você foi contratado pelo vizinho curioso do Dr Luis Cláudio para descobrir qual o valor total em mercadorias que ele conseguiu levar para casa.";A entrada consiste de T casos de testes. Cada caso de teste começa com um inteiro N (1 ≤ N ≤ 100) que indica o número de produtos da lista L. As N linhas seguintes são formadas por 2 inteiros p e P. O primeiro inteiro, p (1 ≤ p ≤ 1000), representa o preço do produto. O segundo inteiro P,(1 ≤ P ≤ 30) representa o peso do produto. A próxima linha contém um inteiro M, que indica o peso máximo permitido. O fim da entrada é representado por um 0.;Para cada caso de teste imprima um inteiro que representa o total dos produtos que Dr Luis Cláudio conseguir levar para casa.;False;6 / 10;826;375;45.40%
1625;Robocopia;Matemática;10;"Robocopiadores são pequeninos drones que uma vez ativados copiam o movimento de rotação uns dos outros. Quando um drone é ativado junto com outros, eles trabalham em conjunto, como se fossem um só.

                    Recentemente Daniel comprou uma fábrica de robocopiadores. Um braço mecânico coloca cada ropocobiador aleatoriamente em uma área, formando assim um conjunto de robocopiadores. Cada conjunto pode ser de composto por números diferentes de robocopiadores. E para testá-los, eles são ativados. Os robocopiadores ativados devem passar por uma esteira para posteriormente serem desativados e armazenados. Vários conjuntos de rodocopiadores podem passar pela mesma esteira. A largura da esteira deve ser sempre a menor possível, mas que comporte todos os conjuntos.

                    Como Daniel é um empresário inexperiente, não fez um planejamento adequado e então teve de contratar funcionários adicionais para verificar manualmente qual o tamanho da esteira que ele tem de configurar para suportar os diferentes conjuntos de robocopiadores. E claro, este processo é muito custoso e demorado.

                    Para diminuir os gastos e aumentar a eficiência, Daniel contratou você para calcular, de maneira automática, qual a menor largura da esteira para que todos os conjuntos de robocopiadores possam ser armazenados corretamente.



                    
                    Figure 1.
                    

                    
                                               
                    
                    Figure 2.
                    

                    


                    Na Figura 1, por exemplo, a máquina ativou 3 robocopiadores (A,B e C) e a menor distância é a = 2, entre BC. Quando a máquina fizer o outro conjunto de robocopiadores (A,B,C e D) da Figura 2, a menor distância é AB ou DC, b = 3, e neste caso, o conjunto tem de ser rotacionado 90 graus para passar na esteira, que tem tamanho 3. Logo, se estes conjuntos fossem passar pela esteira, esta teria que ter uma largura mínima de 3.";"A entrada é composta por vários casos de testes.

                    A primeira linha é composta de um inteiro N (1 ≤ N ≤ 10000) que representa o número de casos de testes.

                    Cada caso de teste é composto por um número inteiro C (1 ≤ C ≤ 100) indicando o número de conjuntos de robocopiadores fabricados. Cada conjunto é composto por um número inteiro c (1 ≤ c ≤ 10000) representando o número de robocopiadores do conjunto, seguido de c linhas de números inteiros, indicando a coordenada -100000 ≤ (x, y) ≤ 100000 de cada robocopiador do conjunto.";Em cada linha deverá ser impresso o tamanho da menor esteira para produzir todos os conjuntos de robocopiadores, com precisão de 10 casas decimais.;True;10 / 10;180;2;1.11%
1626;Maratona All FACE;Matemática;10;"As universidades da região brasileira conhecida como Fronteira Sul participam da Maratona de Programação há muitos anos, revezando a sede da Etapa Regional especialmente entre as cidades de Erechim, no Rio Grande do Sul, e Chapecó, em Santa Catarina. Desde o ano passado, nossa sede tem sido a 2ª maior do país. Neste ano de 2014, participaram 34 times de 12 escolas na UNOCHAPECÓ, em Chapecó. As instituições envolvidas na organização do evento — em especial a UNOCHAPECÓ, a UNOESC, a URI e a recém-criada UFFS — acreditam que as competições de Programação são um dos principais meios para fortalecer a cultura de Programação, promovendo independência e inovação científica e tecnológica e maior relevância da Região no cenário nacional.

                    Após a cerimônia de premiação da Etapa Regional deste ano, estudantes e professores das instituições supracitadas foram a um rodízio de pizza com dois objetivos: 1. matar a fome; 2. conversar sobre a organização da Maratona de Programação da Feira de Conhecimento, Cultura e Educação (FACE) de Chapecó, que aconteceria dali duas semanas. Durante a discussão, contudo, um dos professores propôs: “Por que não realizamos uma Maratona aqui mesmo, não de Programação, mas de pizza? Quem comer menos pizza paga uma rodada de cerveja para todos!”. Todos concordaram, e assim aconteceu a 1ª Maratona All FACE. O perdedor, contudo, quis a princípio se esquivar de pagar a cerveja. “Só pago se alguém for capaz de me dizer um número perfeito que seja também um fatorial”, disse ele. “6”, respondeu um outro estudante mais que depressa.

                    Será que existe algum outro número perfeito que também seja fatorial? É claro que não, mas o perdedor, indignado por pagar cerveja para todos, resolveu fazer um programa para se convencer. Lembrando: um inteiro positivo M é dito perfeito se é igual à soma de todos os seus divisores distintos de M (por exemplo, 6 = 1 + 2 + 3 e 28 = 1 + 2 + 4 + 7 + 14), e dito um fatorial se existe um natural N tal que N! = M.";Cada linha da entrada é constituída de um único inteiro N (2 ≤ N ≤ 105). A entrada termina em fim de arquivo (EOF).;Para cada inteiro N lido, imprima uma linha contendo dois valores: a soma dos divisores de N! distintos de N! e o próprio N!. Como ambos os valores podem ser muito grandes, imprima apenas o resto que deixam por 109 + 7.;False;10 / 10;444;79;17.79%
1627;Último Dano;Ad-Hoc;4;"André e Beto estão jogando um jogo de computador que recompensa os jogadores de uma maneira bem particular: apenas aquele que der o último dano para derrotar um monstro leva todo o ouro que o mesmo deixar para trás. Isso implica que, mesmo que outros jogadores tenham ajudado a derrotar o monstro, apenas aquele que atacar por último será recompensado.

                    André está intrigado com este sistema, e pediu sua ajuda. Dado o número de pontos de vida do monstro, o dano dado por André e Beto, e o tempo de espera necessário para que dois ataques sucessivos sejam realizados, descubra quem dará o último dano ao monstro, o derrotando e recebendo o ouro.

                    No início ambos André e Beto irão atacar, infringindo At e Bt pontos de dano ao monstro, respectivamente. Após cada ataque, tanto André quanto Beto tem que esperar exatos Ad e Bd segundos, respectivamente, antes de atacar novamente. Sempre que André e Beto puderem atacar ao mesmo no tempo (como no início), André tem a prioridade e ataca primeiro. Um monstro é derrotado quando seus pontos de vida chegam a menor ou igual a zero.";"A primeira linha contém um inteiro T, indicando o número de casos de teste a seguir.

                    Cada caso de teste inicia com quatro inteiros At, Ad, Bt e Bd (1 ≤ At, Ad, Bt, Bd ≤ 100), indicando o dano de ataque e o tempo de espera entre dois ataques consecutivos de André e Beto, respectivamente.

                    Em seguida haverá um inteiro H (1 ≤ H ≤ 10000), indicando o número de pontos de vida do monstro.";Para cada caso de teste imprima uma linha contendo um nome, sendo ele “Andre” caso este seja o último a atacar o monstro, ou “Beto” caso contrário.;False;4 / 10;785;379;48.28%
1628;ChessGuess;Grafos;10;"Um novo jogo virou a maior sensação na Nlogônia. Batizado de ChessGuess, este jogo baseado no xadrez é definido pelas seguintes regras, as quais compõem o Manifesto do ChessGuess:

                    
                    	O ChessGuess pode ser jogado por qualquer número de jogadores maior que 1, sendo um deles escolhido pelo grupo para ser o dealer.
                    	Em cada rodada, o dealer prepara um tabuleiro de xadrez com qualquer número positivo de peças brancas e um único rei preto, desde que nenhum rei branco seja colocado no tabuleiro. O número de peças de cada tipo não é limitado como no xadrez tradicional, ou seja, podem ser colocados, por exemplo, 63 peões brancos e 1 rei preto sem problemas.
                    	Após preparar o tabuleiro duma rodada, o dealer escolhe um dos demais jogadores, de modo que cada jogador, à exceção do próprio dealer, seja escolhido exatamente uma vez.
                    	O jogador escolhido deve, então, escolher uma única peça branca e movê-la tantas vezes quantas achar necessário para pôr o rei preto em xeque. Os movimentos das peças obedecem aos movimentos do xadrez tradicional, com a única exceção de que ao peão não é permitido andar duas casas para frente em seu primeiro movimento.
                    	Se o jogador for capaz de adivinhar uma escolha ótima, que põe o rei em xeque com o número mínimo de movimentos usando uma só peça, o dealer deve virar uma dose de tequila. Do contrário, quem vira a dose de tequila é o jogador. No exemplo da Figura, 1 é o número máximo de movimentos que o jogador deve fazer para xecar o rei usando uma só peça e se livrar de virar a dose de tequila.
                    

                    

                    Um problema, porém, está comprometendo o sucesso do novo jogo. Conforme avança a brincadeira, as pessoas vão ficando bastante bêbadas, especialmente o dealer, que já não consegue mais decidir se a escolha feita pelo jogador é ótima ou não. Portanto, a Federação e Associação do ChessGuess Ecológico (FACE) precisa de um programa que, dada a configuração inicial do tabuleiro montada pelo dealer, calcula o número máximo de movimentos que o jogador deve fazer para embebedar o dealer ainda mais.";A entrada é composta por vários casos de teste, sendo cada caso de teste composto por 3 linhas. Na primeira linha figura um único inteiro positivo N, o qual representa o número de peças brancas que o dealer pôs no tabuleiro. A segunda linha descreve as N peças brancas, seguindo a Notação Algébrica¹ do Xadrez. A terceira linha, por fim, indica a posição do rei preto. A entrada é finalizada quando N = 0.;Para cada caso de teste, imprima uma linha contendo um único inteiro representando o número máximo de movimentos que o jogador deve fazer para xecar o rei usando uma só peça e se livrar de virar a dose de tequila. Se o número não for finito, imprima “INF” (sem as aspas).;True;10 / 10;104;18;17.31%
1629;DescompactaFACE;Strings;3;"Em 2013 a Feira FACE compactou os dados de seus visitantes com um compactador livre, infelizmente esta ferramenta se tornou paga e você foi convidado a criar um algoritmo para descompactar os dados. Os dados estão compactados em formato decimal, e para funcionar o descompactador você terá que encontrar o dígito verificador de cada linha compactada. A organização da FACE conseguiu uma documentação de como funcionava o processo, mas algumas informações de como chegar ao dígito não estão muito claras, o documento apenas disponibiliza alguns exemplos, conforme segue:

                    
                      Linha compactada composta por 54782 ao descompactar iria resultar na cadeia binária 00000111100000001111111100, com isso o valor do dígito ficaria 8.
                      Linha compactada composta por 045 ao descompactar iria resultar na cadeia binária 111100000, com isso o valor do dígito ficaria 9.";A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um inteiro N (1 ≤ N ≤ 25), representando o número de dados dos visitantes daquele arquivo, sendo que cada linha representa um visitante. As N linhas seguintes são compostas por K dígitos (1 ≤ K ≤ 103) sem espaço representando a linha compactada. A parada é determinada por N igual a 0.;Para cada linha compactada você deve exibir o dígito verificador descompactado.;False;3 / 10;529;266;50.28%
1630;Estacas;Matemática;2;Marcos trabalha em uma empreiteira, sua tarefa é cercar com estacas os terrenos onde serão construidos prédios. Existem duas restrições para a distribuição destas estacas, elas devem ser colocadas de tal forma que a distância entre duas estacas seja sempre igual, e a segunda restrição é que Marcos deve usar o menor número possível de estacas. Marcos é seu amigo e pediu para que você desenvolva um programa para ajudá-lo.;Haverão diversos casos de teste, cada caso de teste é descrito em uma linha por dois números X e Y (1 ≤ X, Y ≤ 100000000), os quais representam as dimensões do terreno. O final da entrada é indicado por final de arquivo.;Para cada caso de teste imprima uma linha com o número mínimo de estacas necessário para cercar o tereno.;False;2 / 10;1197;653;54.55%
1631;O Fantástico Bolo de Bobby;Geometria Computacional;4;Bobby está muito feliz, afinal, ganhou de aniversário um bolo circular fantástico, de 1 metro de diâmetro, decorado com muitas cerejas. Para facilitar a distribuição dos pedaços entre seus entes queridos, Bobby deseja inicialmente cortar o bolo em dois seguindo uma linha reta. Embora a reta do corte não precise passar pelo centro do bolo, ela precisa passar por ao menos duas cerejas. Além disso, sendo ΣESQ a soma, para todas as cerejas à esquerda da reta, da distância de cada cereja à reta, e sendo ΣDIR a soma, para todas as cerejas à direita da reta, da distância de cada cereja à reta, Bobby deseja que a diferença entre ΣESQ e ΣDIR seja a menor possível, como na Figura, em que as cerejas são representadas por pontos. Não obstante, pode-se considerar que cerejas partidas pelo corte não estão nem à esquerda nem à direita da reta, e que o diâmetro das cerejas é desprezível.;Vários casos de teste compõem a entrada. A primeira linha de cada caso de teste contém um único inteiro positivo N (4 ≤ N ≤ 100), o qual representa o número de cerejas no bolo. Seguem, então, N linhas, cada uma composta por dois inteiros X e Y (-50 ≤ X, Y ≤ 50, X2 + Y2 ≤ 502), os quais representam as coordenadas, em centímetros, das cerejas do bolo, considerando que o centro do bolo está posicionado na origem do plano cartesiano. A entrada é encerrada com N = 0.;Para cada caso de teste, seu programa deverá imprimir uma linha contendo um valor com 3 casas decimais que representa a menor diferença possível entre ΣESQ e ΣDIR.;True;4 / 10;462;268;58.01%
1632;Variações;Strings;2;"A internet já não é tão segura quanto ela já foi. Um dos sinais disso é o aumento de ataque de hackers a diversos sites. Para piorar, quando um hacker rouba a senha de um usuário em um determinado site, ele tem também acesso a todas as outras contas deste usuário em outros sites, pois a maioria dos usuários hoje em dia usa a mesma senha em todos os sites que acessa.

                    Uma das soluções propostas para resolver este problema é usar diferentes senhas para cada site, ou até mesmo diferentes variações da mesma senha. Por exemplo, para variar a senha “batata”, é possível usar a senha “bAtaTa”, “B4tat4”, “baTATA”, etc. Ou seja, para cada caractere do alfabeto, é possível formar uma variação colocando tal caractere em maiúsculo ou minúsculo. Inclusive, para aumentar o número total de variações, para os caracteres A, E, I, O e S é possível usar também os números 4, 3, 1, 0 e 5, respectivamente.

                    Seu amigo precisa aumentar o número de variações de sua senha, e pediu sua ajuda. Dada a senha que ele escolheu, diga o número de diferentes variações que é possível montar.";"A primeira linha contém um inteiro T, indicando o número de casos de teste a seguir.

                    Cada caso de teste contém uma sequência de caracteres S, indicando a senha de seu amigo. Para cada senha, haverá no mínimo 1 e no máximo 16 caracteres, os quais podem ser uma das 26 letras do alfabeto, minúsculas ou maiúsculas.";Para cada caso de teste imprima uma linha contendo um inteiro, indicando o número de diferentes variações que é possível montar com a senha dada, incluindo ela mesma.;False;2 / 10;2535;1490;58.78%
1633;SBC;Estruturas e Bibliotecas;6;"A Federação dos Apagadores e Celulares Esquisitos (FACE) assinou recentemente um contrato com o Governo Federal para desenvolver um telefone celular de baixo custo que será distribuído gratuitamente a populações de baixa renda. Apesar de simples, o aparelho contará com uma série de aplicativos, a fim de que as pessoas possam desfrutar de todas as facilidades que as plataformas móveis proporcionam. Um desafio, contudo, está intrigando os programadores da FACE: o aparelho não dispõe de muitos recursos de hardware, e os programadores estão tendo dificuldades em escrever o módulo que gerenciará os processos do sistema operacional SBC (Sistema Bonito para Celulares), desenvolvido especialmente para a arquitetura. Os programadores receberam dos analistas as seguintes diretivas, as quais precisam ser rigorosamente seguidas:

                    
                    	O sistema executa apenas um processo por vez, e cada processo até o fim.
                    	O sistema jamais pode ficar ocioso se há processos esperando para serem atendidos.
                    	Para que um processo não trave o sistema, cada processo, quando requisita sua execução, deve informar ao sistema o tempo exato, em ciclos de processamento, que sua execução durará. O sistema jamais permite que a execução de um processo dure mais que o tempo previsto, abortando-a se necessário. Ainda, se um processo se encerra antes do informado, o sistema aproveita os ciclos restantes para rotinas de coleta de dados e comunicação com o Governo. Dessarte, para todos os efeitos, a execução de um processo que informou precisar de c ciclos dura sempre exatos c ciclos.
                    	O sistema garante que é mínima a soma, para todos os processos, do tempo que cada processo espera até entrar em execução.
                    

                    Ajude a FACE a completar o SBC escrevendo o módulo que falta!";A entrada é composta por vários casos de teste. A primeira linha de cada caso de teste consiste de um único inteiro N (1 ≤ N ≤ 105), o qual representa o número de processos que requisitaram sua execução ao SBC. Cada uma das N linhas seguintes corresponde, então, a um processo e é formada por dois inteiros t e c (1 ≤ t, c ≤ 103), os quais representavam respectivamente o tempo do sistema em que o processo fez sua requisição e o número de ciclos de processamento que durará a execução do processo. Considere que o tempo do sistema é contado em ciclos de processamento e que o contador começa em 1 em cada caso de teste. Considere ainda que a entrada é finalizada em fim de arquivo.;Para cada caso de teste, imprima o valor inteiro que representa a soma, para todos os processos, do tempo, em ciclos de processamento, que cada processo espera até entrar em execução. Por favor, note que este valor pode não caber em 32 bits.;False;6 / 10;982;225;22.91%
1634;Outra Loteria;Matemática;4;"Até em tempos de crise econômica, as pessoas na Bytelândia ainda gostam de participar na loteria. Com um pouco sorte, talvez eles se livrem de todas suas mágoas e fiquem ricos.

A loteria mais popular em Bytelândia consiste de rodadas m. Em cada rodada, todo mundo pode comprar quantos bilhetes desejar, e entre todos os bilhetes vendidos nessa rodada, um bilhete é escolhido aleatoriamente, cada um com a mesma probabilidade. O dono daquele bilhete ganha o prêmio em dinheiro dessa rodada. Já que as pessoas na Bytelândia gostam de potências de 2, o prêmio em dinheiro para o vencedor da rodada i acumula para 2i Dólares Bytelandenses.

Você consegue determinar para cada participante da loteria a probabilidade de ele ganhar mais dinheiro do que todas as outras pessoas?";"A entrada consiste em vários casos de teste. Cada caso começa com uma linha contendo dois inteiros n e m, respectivamente o número de participantes na loteria e o número de rodadas na loteria. Você pode presumir que 1 ≤ n ≤ 10000 e 1 ≤ m ≤ 30.

As linhas n seguintes contém a descrição dos bilhetes comprados pelo participante. A linha ith contém m inteiros não-negativos c1, ..., cm, onde cj (1 ≤ j ≤ m) é o tanto de bilhetes da rodada j comprados pelo participante i. O número total de bilhetes vendidos em cada rodada está entre 1 e 109.

A entrada termina com uma linha contendo 2 zeros.";Para cada caso de teste, imprima n linhas de saída, onde a linha i contém a probabilidade como uma fração reduzida que o participante i ganhe mais dinheiro. Veja a saída exemplo para detalhes.;False;4 / 10;283;173;61.13%
1635;Resultado das Eleições;Matemática;8;Antes das eleições no ano de 2009 para o Parlamento Europeu, Bill e Ted pediram a seus amigos que opinassem acerca do resultado das eleições. Agora que os resultados foram divulgados, Bill e Ted querem averiguar quem palpitou de maneira correta. Se eles, entretanto, fossem verificar os palpites de cada um de seus amigos - que são muitos - um por um, levariam muito tempo, precisam, portanto, que esta verficação seja feita por um computador. Uma vez que eles não são muito bons em programação, eles precisam de sua ajuda.;"As informações providas por Bill e Ted têm o seguinte formato: a primeira linha consiste em um número p de partidos seguido por um número a de adivinhações  (com 1 ≤ p ≤ 50 e 1 ≤ a ≤ 10000). Tem-se na sequência p linhas, cada linha contedo o nome de um partido (estes somente podem ser escritos com letras de a-z, A-Z, dígitos de 0-9 e tamanho ≤ 20) e o percentual adquirido por este partido (com um ponto após a casa decimal). Depois dos partidos, seguem-se a linhas, cada uma contendo um palpite. Um palptite, ou adivinhação, tem forma A1 + A2 + ... + Ak COMP n, onde A1 até Ak são nomes de partidos, COMP é um dos operadores de comparação, <, >, <=, >= ou =; e n é um inteiro entre 0 e 100, inclusos. 

Cada partido somente pode ser citado uma vez em cada palpite.

Obs: Cuidado com a comparação entre valores de ponto flutuante, porque alguns valores na entrada (como 0,1) não têm uma representação exata de um número de ponto flutuante.";Para cada palpite, some o percentual adquirido por cada partido e compare com o inteiro especificado n. Então, imprima uma linha informando se o palpite estava correto. Consulte o exemplo para mais detalhes.;False;8 / 10;442;139;31.45%
1636;Permutações Antimonotônicas Cíclicas;Paradigmas;5;"Uma permutação é uma sequência de números inteiros, que contém cada número inteiro entre 1 e n exatamente uma vez. Neste problema estamos à procura de permutações com propriedades especiais:


	Antimonotônica: para cada 3 valores consecutivos pi-1, pi, pi+1 (1 < i < n), pi deve ser tanto o menor ou o maior dos três valores.
	Cíclica: A permutação deve consistir de apenas um ciclo, isto é, quando nós utilizarmos pi como um ponteiro a partir de i a pi, ele poderá começar na posição 1 e seguir os ponteiros alcançando todas as posições de n antes de retornar para a posição 1.";O arquivo de entrada contém vários casos de teste. Cada caso de teste consiste de uma linha contendo um número inteiro n, (3 ≤ n ≤ 106), o número de inteiros na permutação. A entrada é terminada por n = 0.;Para cada caso de teste imprima uma permutação dos números inteiros de 1 a n, que é tanto antimonotônica quanto cíclica. No caso de existirem várias soluções, você pode imprimir qualquer uma. Separe todos os inteiros por caracteres em branco.;False;5 / 10;247;151;61.13%
1637;Codificação Gamma de Elias;Paradigmas;2;"O código gamma de Elias é um código simples que pode ser usado para codificar uma sequência de inteiros positivos. Iremos utilizar um código modificado que também é capaz de codificar zeros.Para codificar um inteiro n, faça o seguinte:


	Seja k o numero de bits de n
	Escreva k-1 zeros seguido por 1
	Escreva n em binário


Exemplos



    
        
            Número
            Binário
            Número de bits
            Prefixo
            Código
        
    
    
        
            0
            0
            1
            1
            10
        
        
            1
            1
            1
            1
            11
        
        
            2
            10
            2
            01
            0110
        
        
            3
            11
            2
            01
            0111
        
        
            4
            100
            3
            001
            001100
        
        
            5
            101
            3
            001
            001101
        
        
            6
            110
            3
            001
            001110
        
        
            7
            111
            3
            001
            001111
        
        
            8
            1000
            4
            0001
            00011000
        
    



Uma sequência de inteiros é codificada escrevendo os códigos dos inteiros individuais da sequência na mesma ordem em que os inteiros aparecem na sequência. O prefixo de k bits a mais, antes da representação binária de cada inteiro, é necessário para poder decodificar os inteiros codificados. Então, quando estiver lendo a codificação de uma sequência de inteiros, se lermos k-1 zeros seguido por um, isso significa que existem k bits seguintes, que são a representação binária do próximo inteiro codificado.

Se quisermos diminuir o tamanho da codificação da sequência de inteiros, pode haver ainda algum espaço para melhorias vamos considerar as duas otimizações seguintes:


    Se houver um prefixo que indica os k bits seguintes, mas se não tiver um inteiro na sequência com k bits, podemos usar este prefixo para indicar que seguem k+1 bits. Se já houver um prefixo que indica que seguem k+1 bits, esse prefixo não será mais necessário e poderá ser usado para indicar que seguem k+2 bits, e assim por diante.

    Podemos adiciona um zero a esquerda da representação binária de todos os inteiros na sequência com k bits, que então torna-se inteiros com k+1 bits, e então a primeira otimização pode ser usada. A otimização parece especialmente útil se houver alguns inteiros com k bits, mas muitos inteiros com mais de k bits.


Quando estivermos diminuindo o tamanho da codificação da sequência de inteiros, nós apenas devemos ter cuidado sobre quantos inteiros na sequência tem um certo número de bits. Seja ci o número de inteiro na sequência com i bits.

Vejamos o seguinte exemplo c1 = 2, c2 = 4, c3 = 0, c4 = 1 (que, por exemplo, poderia corresponder a sequência 2, 1, 3, 8, 0, 2, 3). Com o original código gamma de elias, a codificação da sequência deveria ter tamanho 2 × (1 + 1) + 4 × (2 + 2) + 0 × (3 + 3) + 1 × (4 + 4) = 28. Usando a otimização 1 podemos salvar 1 bit usando o prefixo 001 para o inteiro com 4 bits. Então, poderíamos usar a otimização 2 e adicionar zeros a esquerda do inteiro com 1 bit, fazendo-os usar 2 bits. Então, usamos a otimização 1 e o prefixo 1 para inteiros com 2 bits, prefixo 01 para inteiros com 4 bits, e teremos o novo tamanho de 6 × (1 + 2) + 1 × (2 + 4) = 24.

Ambas otimizações podem ser usadas várias vezes. O objetivo é combinar essas duas otimizações da melhor maneira possível, o que significa que queremos encontrar uma codificação de uma determinada sequência de inteiros que tem um tamanho minímo entre todas as codificações usando a Codificação Gamma de Elias com qualquer combinação dessas duas otimizações.";A entrada contém vários casos teste. Cada casos teste inicia com uma linha contendo um inteiro  n, (1 ≤ n ≤ 128). A próxima linha contém os  c1, ..., cn (0 ≤ ci ≤ 10000). A entrada termina com  n = 0.;Para cada caso teste imprima uma linha como o tamanho mínimo de uma codifição da determinada sequência da entrada.;False;2 / 10;38;26;68.42%
1638;Tamanho da Porção de Comida;Ad-Hoc;9;"A cantina da universidade não quer nenhum estudante deixe a cantina com fome. Portanto, enquanto um aluno estiver com fome, ele pode obter uma outra porção de comida de graça. A cantina usa um tamanho fixo de porção de alimentos, porque levaria muito tempo para pergunta a um estudante a quantidade de comida que ele quer. Pode acontecer que um aluno não terminar a sua última porção de comida e o restante seja jogado fora.

Para minimizar os custos, o gerente da cantina quer determinar um tamanho fixo de porção de alimentos S de tal forma que a quantidade de comida que é desperdiçada seja pequena, mas também o número de vezes que os alunos têm de buscar outra porção da comida não seja muito grande. Note que esses dois objetivos podem ser conflitantes:


	Ao escolher um tamanho muito pequeno da porção de alimentos, não se desperdiçar comida, mas ao mesmo tempo o número de vezes que os alunos voltam para buscar mais comida é grande.
	Ao escolher um tamanho muito grande da porção de alimentos, pode-se assegurar que cada aluno tem de buscar apenas uma porção, mas, ao mesmo tempo, pode acontecer que uma grande quantidade de comida seja desperdiçada.


O gerente da cantina coletou dados sobre quanto cada aluno consome. O problema a ser resolvido pode agora ser formulado matematicamente como se segue: Seja X a quantidade de alimentos que é desperdiçado, e Y o número de vezes que os estudantes vão buscar alimentos. Então, o objetivo é o de minimizar A × X + B x Y, em que A, B ​​são pesos que representam a importância relativa dos dois objetivos em conflito. Note-se que X e Y dependem do tamanho da porção de alimento S e as quantidades de alimentos cada aluno consome. Nós impomos a restrição adicional de que nenhum estudante deveria ter que passar mais de 3 vezes para buscar alimentos.";"O arquivo de entrada contém vários casos de teste. Cada caso de teste começa com uma linha contendo um inteiro N, (1 ≤ N ≤ 1000), que corresponde o número de alunos que comem na cantina. A próxima linha contém o valor de A e B (1 ≤ A, B ​​≤ 10). A terceira linha de cada caso de teste consiste de N inteiros Y1 , ..., Yn (1 ≤ Yi ≤ 100), onde Yi é a quantidade de comida estudante I consome. A entrada é terminada por N=0.

					OBS:  Na primeira entrada, o tamanho ideal porção de alimentos é de 4,5. Note que o tamanho da porção de alimento, de 3 renderia um custo menor de 16, o quinto estudante, no entanto, teria que buscar comida 4 vezes.";Para cada caso de teste imprima uma linha contendo os custos resultantes de uma escolha ideal do tamanho da porção de alimentos. Imprimir cada valor como uma fração reduzida. Se o resultado for um número inteiro, não imprima o denominador 1. Veja o exemplo de saída para mais detalhes.;False;9 / 10;127;28;22.05%
1639;Gerando Números Aleatórios;Ad-Hoc;3;"John von Neumann propôs em 1946 um método de criação de sequências de números pseudo-aleatórios. Sua ideia é conhecida como o método do meio do quadrado e funciona da seguinte forma: Escolhe-se um valor inicial a0 que possui um comprimento de no máximo n em sua representação decimal. Multiplica-se o valor de a0 por ele mesmo, adiciona-se zeros a esquerda para obter uma representação decimal de comprimento 2 × n e toma-se os n dígitos centrais para formar ai. Repete-se o processo para cada ai com i > 0. Para este problema será utilizado n = 4.

                Exemplo 1: a0=5555, a02=30858025, a1=8580,...

                Examplo 2: a0=1111, a02=01234321, a1=2343,...

                Infelizmente, este gerador de números aleatórios não é muito bom. Dado um valor inicial, ele não produz todos os outros números com a mesma quantidade de dígitos.

                Sua tarefa é checar quantos números diferentes são produzidos para um valor inicial a0.";"A entrada contém vários casos de teste. Cada teste consite de uma linha contendo a0 (0 < a0 < 10000). Possivelmente, os números podem ter zeros à esquerda de forma a deixar cada número com exatamente 4 dígitos. A entrada é finalizada com uma linha contendo o valor 0.
					
					 Obs.: Note que o terceiro caso de teste possui a maior quantidade de números diferentes gerados entre as entradas possíveis.";Para cada caso de teste, imprimir uma linha contendo o número de diferentes valores ai gerados por este gerador de números aleatórios quando inicializado com um valor a0. Note que a0 também deve ser contabilizado.;False;3 / 10;684;423;61.84%
1640;Reservando Hotéis;Estruturas e Bibliotecas;9;Uma companhia de transportes frequentemente necessita transportar bens de uma cidade para outra. A companhia de transportes fez um acordo especial com uma rede de hotéis que permite que seus motoristas fiquem hospedados nos hotéis desta rede gratuitamente. Os motoristas podem dirigir apenas 10 horas por dia. A companhia de transportes deseja encontrar uma rota que parte da cidade inicial e termina na cidade de destino tal que o motorista possa sempre passar a noite em um dos hotéis da rede, e que este precise dirigir no máximo 10 horas de um hotel até o próximo, ou até o destino. Naturalmente, o número de dias necessários para a entrega ser realizada também deve ser minimizado.;O arquivo de entrada contém diversos casos de teste. Cada caso de teste começa com uma linha contendo um inteiro n, (2 ≤ n ≤ 10000), indicando o número de cidades a serem consideradas durante o planejamento. Por simplicidade, as cidades são numeradas de 1 a n, onde 1 é a cidade inicial, e n é a cidade de destino. A próxima linha contem um inteiro h seguido pelos números c1, c2, ..., ch indicando o número de cidades nas quais os hotéis da rede estão localizados. Você pode assumir que 0 ≤ h ≤ min(n, 100). A terceira linha de cada caso de teste contém um inteiro m(1 ≤ m ≤ 105), que representa o número de estradas a serem consideradas para o planejamento da rota. As m linhas seguintes descrevem as estradas. Cada estrada é descrita por uma linha contendo três inteiros a, b, t(1 ≤ a, b ≤ n e t ≤ 600) onde a, b são duas cidades conectadas pela estrada, e t é o tempo em minutos necessário para o motorista dirigir do final de uma estrada ao outro. A entrada acaba quando n = 0.;Para cada caso de teste, imprima uma linha contendo o número mínimo de hotéis nos quais a companhia de transportes deve realizar reserva para uma entrega da cidade 1 à cidade n. Se não for possível encontrar uma rota que o motorista tenha de dirigir no máximo 10 horas por dia, imprima -1.;False;9 / 10;465;138;29.68%
1641;Restaurante e Pizzaria do Alfredo;Matemática;3;Tradicionalmente depois do Local Contest em Louisiana, juízes e participantes vão juntos para seu restaurante favorito, Restaurante e Pizzaria do Alfredo. Os participantes estão realmente famintos após 5 horas de competição. Para pegar suas pizzas o mais rápido possível, eles decidiram pedir uma pizza grande para todos ao invés de várias pizzas pequenas. Eles gostariam de saber se é possível colocar uma pizza grande com formato retangular sobre a superfície de uma mesa redonda de modo que não fiquem partes penduradas na borda da mesa. Como todos estão cansados e famintos, escreva um programa que os ajude!;A entrada possui vários casos de teste. Cada caso de teste começa com um número inteiro R, sendo o raio da superfície da mesa onde os participantes estão sentados (1 ≤ R ≤ 1000). Então 2 números inteiros W e L especificando a largura e altura da pizza (1 ≤ W ≤ L ≤ 1000). A entrada termina com R = 0. Caso contrário, 1 ≤ R ≤ 1000. Então seguem 2 números inteiros W e L especificando a largura e o comprimento da pizza, 1 ≤ W ≤ 1000.;Haverá uma saída para cada caso de teste informando se uma pizza cabe ou não na mesa com seu número do pedido. Uma pizza que toca a borda da mesa sem ultrapassá-la é considerada como válida. Considere o terceiro exemplo como ilustração deste caso.;False;3 / 10;973;466;47.89%
1642;Teclado Quebrado;Paradigmas;7;"O teclado do Bruce está quebrado, apenas algumas teclas ainda funcionam, Bruce descobriu que ele ainda pode digitar textos, mudando o layout do teclado, sempre que a letra necessária não está no mapeada para as m teclas que atualmente funcionam do teclado.

                    Dado o texto que Bruce deseja digitar, ele quer saber se você consegue dizer a ele o número máximo de caracteres consecutivos no texto, que pode ser digitado sem a necessidade de mudar o layout do teclado, Ou seja, cada tecla está mapeada para exatamente um carácter, e não é possível digitar esse carácter por outras combinações de teclas, isso significa que Bruce quer saber o comprimento da maior subsequência do texto, que consiste em no máximo m caracteres diferentes.";"A entrada consiste em vários casos de teste, cada caso de teste possui duas linhas. A primeira linha de cada caso contém o número m (1 ≤ m ≤ 128), que especifica o número de teclas restantes (as que ainda funcionam) . A segunda linha de cada caso de teste consiste no texto em que Bruce deseja digitar. Você pode deduzir que esse texto não ultrapasse 1 milhão de caracteres. Note que a entrada pode possuir caracteres de espaço, que devem ser tratados como qualquer outro carácter.

                    O último caso de teste é seguido por uma linha contendo um zero.

                    Dica: A maior substring para o primeiro caso de teste é ""_by_bru"", onde _ representa um caractere de espaço.";Para cada teste, imprima uma linha com o comprimento da maior subsequência do texto que consiste em no máximo m caracteres diferentes.;False;7 / 10;871;223;25.60%
1643;Converter Quilômetros para Milhas;Paradigmas;2;"Este ano, Bruce Force passa suas férias em Flagstaff, Arizona, onde ele quer treinar para a próxima meia maratona (uma corrida de mais de 21 km). Em seu primeiro treino, ele correu até a casa de seu amigo Greedy Gonzales, que fica a 21 milhas de distância de Flagstaff.

                    Chegando lá, ele já muito cansado, percebe que 21 milhas são muito mais de 21 km. Greedy Gonzales diz que 21 km é igual a 13 milhas. 21, 13? Bruce percebe imediatamente que deve haver uma relação mais profunda! Ambos, 13 e 21 são números de Fibonacci!

                    Números Fibonacci podem ser definidos da seguinte forma:

                    F1 = 1

                    F2 = 2

                    Fn+1 = Fn+Fn-1 para n > 1

                    Bruce está aprendendo sobre o sistema numérico Fibonacci em sua universidade. Cada inteiro positivo X pode ser escrito como a soma de diferentes números Fibonacci, isso significa que dado um numero k e b1, b2, ..., bk tal que x = ∑i=1..k bi * Fi, onde bk = 1 e bi (1 ≤ i < k) é 0 ou 1. Em resumo, podemos escrever a representação como: b (x) = (bk, bk-1, ..., b1). Para tornar a representação única, é necessário que bi * bi-1 = 0 para todo i > 1.

                    Por exemplo 21 pode ser representado por (1,0,0,0,0,0,0) e 13 como (1,0,0,0,0,0) no sistema Fibonacci. Bruce percebe que se pode converter uma x distância em quilômetros em uma distância y correspondente a milhas da seguinte forma: Primeiro, anote x em seu Fibonacci representação do sistema b(x). Em segundo lugar, mudar os bits de b (x) uma posição para a direita (o último bit é excluído) e obter b(y). Em terceiro lugar, calcular y de b(y) através da avaliação da soma dada acima.

                    Por exemplo, o número 42 escrito no sistema de Fibonacci é (1,0,0,1,0,0,0,0). Na etapa dois iríamos mudar os bits uma posição para a direita e termos (1,0,0,1,0,0,0). No terceiro passo, calcular 0*1 + 0*2 + 0*3 + 1*5 + 0*8 + 0*13 + 1*21 = 26.

                    Agora é a sua vez de escrever um programa para Bruce que converte quilômetros em milhas de acordo com o algoritmo de Bruce.";A primeira linha de entrada contém t, o número de distâncias que Bruce quer converter de quilômetros em milhas (0 < t <25000). Cada uma das t linhas contem um inteiro, correspondente a distância x (2 < x < 25000) em quilômetros.;Para cada x distância em quilômetros imprima a distância em milhas y calculadas de acordo com o algoritmo de Bruce.;False;2 / 10;540;359;66.48%
1644;Decifre o Texto;Matemática;8;"Brutus teve uma ideia interessante para cifrar textos. A seguir está a descrição de como a codificação é feita:

                    Seja x1,x2,...,xn a sequência de caracteres do texto a ser cifrado.

                    
                    	Escolha um inteiro M e N números distintos p1, p2, ..., pn do conjunto {1, 2, ..., N}, ou seja, uma permutação dos números de 1 a N.
                    	Repita o passo a seguir M vezes.
                    	Para 1≤ i ≤ N defina yi com xpi, e então para 1 ≤ i ≤ N substitua xi por yi.
                    

                    Por exemplo, quando nós queremos codificar o texto “hello”, escolhemos o valor M = 3 e a permutação [2, 3, 1, 5, 4], a informação será cifrada em 3 passos: “hello” -> “elhol” -> “lhelo” -> “helol”.

                    Brutus dará a você os textos cifrados, os números M e as permutações [p1, ...pn] usados para produzir os textos cifrados. Ele vai se gabar de que, por ter usado números M enormes para a codificação, você precisará de muito tempo para decifrar os textos. Você é capaz de decifrá-los rapidamente?";A entrada contém diversos casos de teste. Cada caso de teste começa com uma linha contendo dois números N e M (1 ≤ N ≤ 80, 1 ≤ M ≤ 109). A linha seguinte consiste em N números distintos p1,...,pn (1 ≤ pi ≤ N). A terceira linha de cada caso de teste consiste em exatamente N caracteres, e representa o texto cifrado. O último caso de teste é seguido por uma linha contendo dois números zeros.;Para cada caso de teste, imprima uma linha com o texto original.;False;8 / 10;301;65;21.59%
1645;El Dorado;Paradigmas;7;"Bruce Force foi a Las Vegas, o El Dorado dos apostadores. Ele está especialmente interessado em um jogo de apostas no qual uma máquina escolhe números aleatórios, formando uma sequência de n números. Cada jogador deve estimar previamente quantas subsequências crescentes de tamanho k existirão na sequência de números.

                    Uma subsequência de uma sequência a1,...,an é definida como ai1, ..., ail sendo que 1 ≤ i1 < i2 < ... < il ≤ n. A subsequência é crescente se aij-1 < aij para todos 1 < j ≤ l.

                    Bruce não confia que o Cassino contará corretamente o número de subsequências crescentes de tamanho k. Ele perguntou se você consegue resolver esse problema para ele.";"A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém dois números n e k (1 ≤ k ≤ n ≤ 100), sendo que n é o tamanho da sequência escolhida pela máquina e k é o tamanho desejado das sequências crescentes. A linha seguinte deve conter n inteiros distintos dois a dois ai (-10000 ≤ ai ≤ 10000), sendo ai o i-ésimo número na sequência escolhida pela máquina.

                    A linha seguinte ao último caso de teste deve conter dois zeros.";"Para cada caso de teste, imprimir uma linha com o número de sequências crescentes de tamanho k que a sequência de entrada contém. Você pode assumir que a maneira com que as entradas são escolhidas permite que esse número caiba em um inteiro com sinal de 64 bits (em C/C++, você pode usar o tipo de dado ""long long"", em java, o tipo ""long"").";False;7 / 10;969;365;37.67%
1646;Floresta;Geometria Computacional;10;"Bruce Force está na floresta. Ele se pergunta qual é o tronco de árvore mais distante que não está bloqueado, a partir de seu ponto de vista, por outros troncos de árvores.

                    Bruce fez um mapa das árvores da floresta. O mapa mostra a sua posição atual como a origem de um sistema de coordenadas cartesianas. Árvore i é ilustrada no mapa como um círculo com centro (xi, yi) e raio ri. Você pode assumir que um tronco de árvore é visível se e somente se existe um segmento de linha da origem do mapa (0,0) até um ponto na borda do círculo, que representa o tronco da árvore, onde este segmento de linha não cruza ou tocar outro círculo.";"A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém um inteiro n (1 ≤ n ≤ 1000), onde n especifica quantas árvores existem no mapa. As seguintes n linhas contém três inteiros xi, yi, ri (-10000 ≤ xi, yi ≤ 10000, 1 ≤ ri ≤ 1000), onde (xi, yi) é o centro do círculo que representa tronco i, e ri é o raio do círculo. Pode-se presumir que não há dois círculos da entrada que se interceptam, ou seja, para quaisquer dois círculos, a distância entre os seus centros é mais do que a soma dos seus raios. Além disso, você pode assumir que nenhum círculo contém a origem.

                    O último caso de teste é seguido por uma linha contendo um zero.

                    Dica: No segundo caso de teste, as quatro primeiras árvores bloqueiam a visão de todas as árvores mais longe do que estas quatro árvores.";"Para cada caso de teste, imprima uma linha com a distância máxima euclidiana da origem a uma árvore visível. A distância de uma árvore deve ser medida utilizando a ponta da árvore mais próxima da origem, não importa se este ponto é, de fato, visível ou não.

                    Imprima a resposta com três dígitos depois do ponto decimal.";False;10 / 10;1106;37;3.35%
1647;Um Jogo com Bolas de Gude;Matemática;3;"Existem n bacias, numeradas de 1 até n. Inicialmente, a bacia i contém mi bolas de gude. Uma rodada consiste em remover uma bola de gude de uma bacia. Quando uma bola de gude é removida da bacia i (i > 1), outra bola de gude é adicionada a cada uma das primeiras i-1 bacias; se uma bola de gude é removida da bacia 1, nenhuma nova bola de gude é adicionada. O jogo termina quando cada uma das bacias estiver vazia.
                    Seu trabalho é determinar quantas rodadas são necessárias para o jogo terminar. Você pode assumir que o suprimento de bolas de gude é suficiente, e que todas as bacias são grandes o suficiente, de tal forma que cada rodada possível pode ser executada.";"A entrada é composta de vários casos de teste. Cada caso de teste é composto por uma linha, contendo um inteiro n (1 ≤ n ≤ 50), o número de bacias no jogo. A linha seguinte contém n inteiros mi (1 ≤ i ≤ n, 0 ≤ mi ≤ 1000), onde mi representa o números de bolas de gude na bacia i no início do jogo.
                    Um único valor 0 indica o fim da entrada.";Para caso de texto, imprima uma linha com o número de rodadas necessárias para o jogo terminar. Você pode assumir que esse número cabe em um inteiro de 64 bits (em C/C++ você pode usar o tipo “long long” e em Java o tipo “long”).;False;3 / 10;741;489;65.99%
1648;Ajude Bob;Paradigmas;9;"Bob ama Pizzas, mas sempre está sem dinheiro. Certo dia ele lê nos jornais que sua pizzaria favorita, Alfredo's Pizza Restaurant, está realizando uma competição: para a primeira pessoa que lhes disser o menor preço por área, que se pode conseguir ao comprar qualquer uma das pizzas no máximo uma vez, receberá a doação de uma pizza grande.  ""Essa tarefa é fácil!"", pensou Bob, ""Para cada pizza somente presciso calcular a razão de cada preço e o menor quociente será a resposta."".

                    Infelizmente, o problema é um pouco mais complicado:  Alberto desponibiliza cupons de desconto com a venda de algumas pizzas, para obter outra pizza mais barato, e pior, esses cupons podem ser combinados. As pizzas precisão ser compradas uma após a outra, e não é possivel usar um cupom para ter um desconto retrospectivamente para uma pizza a qual já foi comprada. Você pode ajudar Bob a ser o primeiro a resolver esta tarefa, e ganhar a pizza de graça?";O arquivo de entrada contém diversos casos testes. Cada caso de teste começa com um número m, o número de pizzas Alfredo oferece. A entrada é terminada pelo m = 0.Caso contrário, 1 ≤ m ≤ 15. Logo, segue m linhas descrevendo as pizzas. Cada uma destas seguintes linhas descreve pizza i (1 ≤ i ≤ m) e começa com os três números inteiros pi, ai e ni especificando respectivamente o preço da pizza, sua área e número de cupons de desconto conseguidos ao compra-la, 1 ≤  pi ≤ 10000, 1 ≤ ai ≤ 10000 e 0 ≤ ni < m. Haverá em seguida ni pares de números inteiros xij e yij, que especificam o índice xij (1 ≤ xij ≤ m, xij ≠ i) da pizza que se obtém cupom de desconto e yij (1 ≤ yij ≤ 50) o desconto em termos de porcentagem obtidos ao comprar a pizza xij. Você pode assumir que para cada i o valor de xij é um par distinto.;Para cada caso de teste imprima uma linha contendo o menor preço por área que se pode conseguir comprando qualquer uma das pizzas no máximo uma vez. Faça um arredondamento desse número na quarta casa decimal, note que você pode combinar um número de cupons de descontos arbitrários: Por uma pizza de custo 10, e dois cupons de desconto de 50 e 20, para esta mesma pizza, você só teria de pagar 10 * 0.8 * 0.5 = 4 (unidades monetárias).;False;9 / 10;160;52;32.50%
1649;Ferramenta Irritante de Pintura;Paradigmas;4;"Talvez você queira saber o que é uma ferramenta irritante de pintura? Primeiro de tudo, a ferramenta de pintura falada só aceita cor preta e branca. Portanto, uma imagem consiste em uma área retangular de pixels, que pode ser preto ou branco. Em segundo lugar, existe apenas uma operação para mudar a cor dos pixels:

                    Selecione uma área retangular de r linhas e c colunas, que está completamente dentro do quadro. Como resultado da operação, cada pixel no interior do retângulo selecionado muda a sua cor (preto vira branco e branco vira preto).

                    Inicialmente, todos os pixels são brancos. Para criar uma imagem, a operação descrita acima pode ser aplicada várias vezes. Você pode pintar uma certa imagem que você tem em mente?";"A entrada contém vários casos de teste. Cada caso de teste inicia com uma linha contendo quatro inteiros n, m, r e c. (1 ≤ r ≤ n ≤ 100, 1 ≤ c ≤ m ≤ 100). As próximas n linhas descrevem uma linha de pixels da pintura que você deseja criar. Cada linha consiste em m caracteres com a descrição do pixel desejado a ser pintado (0 indica a cor branca, 1 indica a cor preta).

                    Os casos de testes terminam com uma line contendo 4 zeros.";Para cada caso de teste, imprima o número mínimo de operações necessárias para criar a pintura, ou -1 se for impossível.;False;4 / 10;249;156;62.65%
1650;Pintura Preto e Branco;Matemática;3;"Você está visitando o Centro Pompidou que contém muitas pinturas modernas. Em particular você nota que uma pintura consiste somente em quadrados pretos e brancos, arranjados em linhas e colunas como em um tabuleiro de xadrez(sem que quadrados adjacentes tenham a mesma cor).

                    Já que você está entediado, você se pergunta quantos tabuleiros de xadrez 8 x 8 formam a pintura. O canto inferior direito do tabuleiro de xadrez tem que ser branco.";"A entrada contém vários casos de teste. Cada caso de teste consiste em uma linha com três inteiros n, m e c.(8 ≤ n, m ≤ 40000), onde n é o número de linhas do quadro, e m é o número de colunas do quadro. c é sempre 0 ou 1, onde 0 indica que o canto inferior da pintura é preto, e 1 indica que este canto é branco.

                    O último caso de teste é seguido por uma linha composta por três zeros.";Para cada caso de teste, imprima o número de tabuleiros de xadrez contidos dentro da dada pintura.;False;3 / 10;548;337;61.50%
1651;Cilindro;Geometria Computacional;8;"Usando um papel e uma tesoura, você pode cortar duas faces de um cilindro dessa maneira:

                    
                    	Corte o papel na horizontal (paralelo ao lado menor) para ter duas partes retangulares.
                    	Da primeira parte, corte um círculo com o maior raio possivel. O círculo será a parte de baixo do cilindro.
                    	Enrole a segunda parte de um jeito que tenha o perimetro igual a circunferência, e encaixe uma parte do rolo com a circunferência. Note que o rolo possa ter papel a mais do que o tamanho da circunferência requerida";"A entrada consiste em alguns testes. Cada teste consiste em dois números w e h (1 ≤ w ≤ h ≤ 100), que indica a largura e o tamanho do papel.

                    O último caso de teste é seguido por uma linha contendo dois zeros.";Para cada teste, mostre uma linha com o maior valor possivel do volume do cilindro. Adicione 3 casas decimais ao valor mostrado.;False;8 / 10;300;98;32.67%
1652;Deli Deli;Ad-Hoc;2;"Sra. Deli está trabalhando em uma casa de mercearias finas ""Deli Deli"". No ano passado, a Sra. Deli decidiu expandir seu negócio e construir uma loja online. Ela contratou um programador que implementou a loja online.

                    Recentemente alguns de seus novos clientes online reclamaram das notas fiscais eletrônicas. O programador esqueceu-se de usar o plural, no caso em que um item é comprado várias vezes. Infelizmente o programador da Sra. Deli está de férias e agora é sua tarefa de implementar esse recurso para a Sra. Deli. Aqui está uma descrição de como fazer o plural:

                    
                    	Se a palavra está na lista de palavras irregulares substitua-a com o plural dado.
                    	Senão se a palavra termina em uma consoante seguida por ""y"", substitua ""y"" por ""ies"".
                    	Senão se a palavra termina em ""o"", ""s"", ""ch"", ""sh"" ou ""x"", acrescente ""es"" à palavra.
                    	Senão acrescente ""s"" à palavra.";A primeira linha do arquivo de entrada consiste de dois inteiros L e N (0 ≤ L ≤ 20, 1 ≤ N ≤ 100). As seguintes L linhas contém a descrição das palavras irregulares e sua forma plural. Cada linha é composta de duas palavras separadas por um caractere de espaço, onde a primeira palavra é o singular, a segunda palavra é a forma plural de uma palavra irregular. Depois da lista de palavras irregulares, as N linhas seguintes contém uma palavra cada, que você tem que transformar para o plural. Você pode assumir que cada palavra é composta de no máximo 20 letras minúsculas do alfabeto Inglês ('a' a 'z').;Imprima N linhas na saída, onde a i-ésima linha é a forma plural da i-ésima palavra de entrada.;False;2 / 10;773;528;68.31%
1653;Expressões;Grafos;3;"Expressões aritméticas geralmente são escritas com os operadores entre os dois operandos (chamada de notação infixa). Por exemplo, (x + y) * (z - w) é uma expressão aritmética em notação infixa. Entretanto, é mais fácil escrever um programa que avalie uma expressão se ela estiver escrita na forma pós-fixa (também conhecida como notação polonesa reversa). Na notação pós-fixa um operador é escrito atrás de seus dois operandos, que podem ser expressões. Por exemplo, x y + z w - * é a expressão dada anteriormente escrita em notação pós-fixa. Note que nesse caso os parênteses não são necessários.
                    Para avaliar uma expressão escrita na forma pós-fixa pode ser utilizado um algoritmo que usa pilha. Uma pilha é uma estrutura de dados que suporta duas operações:
                    1. push (empilhar): um número é inserido no topo da pilha
                    2. pop (desempilhar): o número do topo da pilha é retirado
                    Uma expressão é avaliada da esquerda para a direita. Se um número for encontrado, ele é empilhado. Se um operador for encontrado, os dois números do topo da pilha são desempilhados, o operador é aplicado sobre eles e o resultado é empilhado de volta na pilha. Mais especificamente, o seguinte pseudocódigo mostra como tratar o caso em que um operador O é encontado:
                    a := pop();
                    b := pop();
                    push(b O a);
                    O resultado da expressão ficará como o único número na pilha.
                    Agora imagine que se use uma fila ao invés da pilha. Uma fila também tem operações de push e pop, mas seu significado é diferente:
                    1. push: um número é inserido no fim da fila
                    2. pop: o número da frente da fila é retirado
                    Você consegue reescrever a expressão dada de modo que o resultado do algoritmo usando a fila seja o mesmo que o resultado da expressão original processada pelo algoritmo com pilha?";A primeira linha da entrada contém um número T (T ≤ 200). Cada uma das T linhas seguintes contêm uma expressão em notação pós-fixa. Operadores aritméticos são representados por letras maiúsculas e números são representados por letras minúsculas. Você pode assumir que o comprimento de cada expressão é menor que 10000 caracteres.;Para cada expressão dada, imprima a expressão com o resultado equivalente quando processada pelo algoritmo com fila ao invés de pilha. Para que a solução seja única, você não deve assumir que os operadores sejam associativos ou comutativos.;False;3 / 10;69;47;68.12%
1654;Mercearia;Paradigmas;6;"Um caixa de uma Mercearia parece estar com dificuldade em distinguir o símbolo de multiplicação e de adição. Para facilitar as coisas para ele, você deve comprar itens, de tal forma que o produto de seus preços seja igual à soma dos mesmos.

                    Claro, se você comprar apenas um item, isso será sempre verdade. Já com dois ou três itens, essa tarefa pode se tornar muita chata para você. Portando, agora você está interessado em encontrar quatro itens, de modo que a soma dos preços dos quatro itens seja igual ao produto de seus preços. Você deve considerar os preços em Euros (€), com dois dígitos depois do ponto decimal. Obviamente, cada produto custa pelo menos um centavo.";Este problema não contém entradas.;Imprima todas as combinações de preços que seja possível fazer com quatro itens. O valor total para cada combinação, deve ser de no máximo 20,00 €. Para cada combinação, imprima uma linha com os preços dos quatro itens em ordem crescente, com um caractere de espaço entre eles. Você pode imprimir as combinações em qualquer ordem, mas certifique-se de imprimir cada combinações apenas uma vez.;False;6 / 10;427;202;47.31%
1655;106 Milhas Para Chicago;Grafos;5;"No filme ""Os Irmãos Cara de Pau"", o orfanato onde Elwood e Jake foram criados pode ser vendido para o Conselho de Educação se eles não pagarem 5000 dólares em impostos no Gabinete do Assessor do Condado de Cook em Chicago. Depois de dar um show no salão de baile do Hotel Palace para ganhar esses 5000 dólares eles têm de achar um caminho para Chicago. No entanto isso não é fácil e parece que eles estão perseguidos pela polícia, uma banda country e um grupo de nazistas. Mais que isso, eles estão a 106 milhas de Chicago, está escuro e eles estão usando óculos escuros.

                    Como eles estão em uma missão Divina você deve ajudá-los a achar o caminho mais seguro para Chicago. Neste problema o caminho mais seguro é considerado a rota que maximiza a probabilidade deles não serem pegos.";"A entrada é composta de diversas instâncias.

                    A primeira linha de cada instância contém dois inteiros n e m (2 ≤ n ≤ 100 , 1 ≤ m ≤ n*(n-1)/2). n é o número de interseções, m é o número de ruas a ser considerado.

                    As próximas m linhas contém a descrição das ruas. Cada rua é descrita por uma linha contendo 3 inteiros a, b e p (1 ≤ a, b ≤ n , a ≠ b, 1 ≤ p ≤ 100): a e b são dois pontos finais de uma rua e p é a probabilidade dos irmãos Blues conseguirem usar essa rua sem serem pegos. Cada rua pode ser usada nas duas direções. Você pode supor que há no máximo uma rua entre dois pontos finais.

                    A última instância é seguida por um zero.
                    Obs.: O caminho mais seguro a ser seguido no exemplo de entrada é 1 -> 4 -> 3 -> 5";"Para cada instância, calcule a probabilidade do caminho mais seguro da interseção 1 (o Hotel Palace) até a interseção n (o Honorável Centro Richard J. Daley em Chicago). Você pode supor que exista ao menos um caminho entre as interseções 1 e n.

                    Imprima a probabilidade como uma porcentagem com exatamente 6 dígitos depois da vírgula. O valor precentual será considerado correto se difeir no máximo 10-6 da saída do juíz. Use o formato mostrado abaixo e imprima uma linha por instância.";False;5 / 10;1406;591;42.03%
1656;Doces do Dia das Bruxas;Matemática;9;"Todos os anos há o mesmo problema no Halloween: Cada vizinho só está disposto a dar certo número total de doces neste dia, não importa quantas crianças peçam, por isso pode acontecer que uma criança fique sem nada, se for tarde demais. Para evitar conflitos, as crianças decidiram que vão colocar todos os doces juntos e depois dividi-los igualmente entre si. A partir da experiência do Halloween do ano passado, elas sabem quantos doces recebem de cada vizinho. Visto que elas se preocupam mais com a justiça do que o número de doces que recebem, elas querem selecionar um subconjunto de vizinhos para visitar, para que na partilha cada criança receba o mesmo número de doces. Elas não vão ficar satisfeitas se sobrar doces que não possam ser divididos.

                    Seu trabalho é ajudar as crianças e apresentar uma solução.";"A entrada contém vários casos de teste.

                    A primeira linha de cada caso de teste contém dois inteiros c e n (1 ≤ c ≤ n ≤ 100000), sendo o número de crianças e o número de vizinhos, respectivamente. A próxima linha contém n inteiros separados por espaço a1,...,an (1 ≤ ai ≤ 100000), onde ai representa o número de doces que as crianças recebem se visitarem vizinho i.

                    O último caso de teste é seguido por dois zeros.";"Para cada caso de teste, imprima uma linha com os índices dos vizinhos que as crianças devem selecionar (aqui, o índice i corresponde ao vizinho i que dá um total de doces ai). Se não houver solução, onde cada criança recebe pelo menos um doce, imprima ""no sweets"". Observe que, se existir várias soluções onde cada criança recebe pelo menos um doce, você pode imprimir qualquer uma delas.";False;9 / 10;458;122;26.64%
1657;Corretor Automático de Erros de Soletração;Ad-Hoc;9;"Certos editores de texto oferecem um mecanismo de correção para palavras que aparentam estar escritas incorretamente.

                    Neste problema, você deve implementar um simples Corretor Automático de Erros de Soletração (Automatic Correction of Misspellings - ACM). ACM corrige os seguintes erros de soletração:

                    
                    	Uma letra faltando (por exemplo, paso ao invés de passo) ou letras escritas a mais (por exemplo, peasso ao invés de passo).
                    	Uma letra errada (por exemplo, passu ao invés de passo).
                    	Ordem de duas letras adjacentes errada (por exemplo, pasos ao invés de passo).
                    

                    ACM é baseado em um dicionário de palavras. Quando um texto contem uma palavra que não está no dicionário, ACM tentará substitui-la por uma palavra similar do dicionário. Duas palavras são similares se nós podemos transformar uma palavra em outra seguindo exatamente um dos passos listados acima. Uma palavra desconhecida não é alterada se não existem palavras similares no dicionário.";A primeira linha do conjunto de entrada contém um número N representando o número de palavras no dicionário (N ≤ 10000). As próximas N linhas contêm as palavras do dicionário. A linha seguinte contém um número inteiro Q (Q ≤ 1000) representando o número de palavras a serem corrigidas. Você pode assumir que cada palavra do conjunto de entrada consiste de 1 a 25 letras minúsculas (de ‘a’ a ‘z’).;"Para cada palavra a ser corrigida, imprima uma linha com a palavra a ser corrigida seguida de uma das possibilidades abaixo:

                    
                    	is correct, (está correta em inglês) se a palavra está no dicionário.
                    	is a misspelling of X, (é um erro de soletração de em inglês) onde X significa a palavra similar do dicionário, uma vez que a palavra a ser corrigida não está no dicionário. Como neste caso poderão existir várias possibilidades, escolha a palavra do dicionário que aparece primeiro no conjunto de entrada.
                    	is unknown, (é desconhecida em inglês) se os casos 1 e 2 não se aplicam.";False;9 / 10;190;78;41.05%
1658;Grupos Diedro;Matemática;6;"Considere n pontos em círculo com números k = 0, 1, ..., n-1. Inicialmente, o ponto k faz um ângulo de 360 · k / n graus para o eixo x, medido em sentido anti-horário. Vamos realizar dois tipos de operações neste conjunto de pontos:

                    
                    	rotacionar em 360 / n graus no sentido horário
                    	refletir em relação ao eixo x
                    

                    A figura a seguir mostra um exemplo dessas operações:

                    

                    Dada uma seqüência de operações, estamos interessados na menor seqüência de operações que resulta no mesmo resultado, ou seja, a posição de cada ponto é a mesma após a realização de qualquer uma dessas seqüências de operações.

                    A seqüência é dada por uma string contendo os caracteres 'r' e 'm' que representam a rotação no sentido horário e reflexão respectivamente (""à direita"" e ""espelho""). Várias ocorrências consecutivas do mesmo caracter são coletadas na representação <character><número>, e por conveniência, isto também será feito para ocorrências individuais. Assim, ""rrmrrrrrrrrrrrr"" será abreviado para ""r2 m1 r12"". As representações de diferentes operações são sempre separados por um único espaço.";O arquivo de entrada é composto por vários casos de teste. Cada caso de teste começa com uma linha contendo n (3 ≤ n ≤ 108), o número de pontos. A segunda linha de cada caso de teste consiste em uma sequência abreviada de operações, como descrito acima. Todos números serão positivos e menors do que 108. Não haverá nenhuma linha em branco na entrada, e nenhuma linha irá conter mais de 100000 caracteres. O último caso de teste é seguido por uma linha contendo 0.;Para cada caso de teste, imprimir uma linha contendo o formato abreviado da sequência com o número mínimo de operações ao qual resulta na mesma configuração de pontos da sequência de entrada. Em caso de múltiplas soluções ótimas, imprimir qualquer solução.;True;6 / 10;59;26;44.07%
1659;Chamadas Econômicas;Paradigmas;7;"O telefone que você comprou há muito tempo tem uma memória interna que mantém o controle de todas as chamadas que recebe. Ele registra a data (mês e dia) e a hora (hora e minuto) de cada chamada, juntamente com o número de quem liga. Apenas um número limitado de chamadas podem ser registradas (memória ainda era cara naquela época).

                    Você descobre que o registro está quase cheio e, portanto, pretende apagar algumas entradas do registro. Na escolha das entradas para apagar você tem que considerar duas restrições:

                    
                    	Existem algumas entradas (importantes) que você deseja manter.
                    	Você deve conseguir recuperar o ano (que o telefone não armazena) de cada chamada que você mantém. O processo de recuperação é descrito abaixo.
                    

                    Calcule o número mínimo de entradas que devem ser mantidas para satisfazer estes requisitos.

                    Recuperação dos anos

                    Dada uma lista de timestamps (composta de mês, dia, hora e minuto) de chamadas, você descobre o ano de cada chamada pelo seguinte procedimento:

                    
                    	A última chamada na lista ocorreu no ano atual.
                    	Você deve comparar seu timestamp T com o timestamp T' da chamada anterior. Se T' < T, você deve assumir que as duas chamadas ocorreram no mesmo ano. Se T' ≥ T, você deve assumir que a chamada anterior ocorreu no ano anterior.
                    	Você deve percorrer a lista de trás para frente e fazer como no item 2. a cada passo.
                    

                    Nota-se que este procedimento não é o correto de forma geral, mas você pode assumir que é para a entrada que você obtém, e você deve garantir que ele dá o mesmo resultado para um registo encurtado.

                    P.S.: Devido a um erro no software do telefone, nenhuma ligação foi registrada dia 29 de Fevereiro.";"A entrada consiste de vários casos de teste. Cada caso de teste começa com o número de entradas N no registro, onde 1 ≤ N ≤ 1000. Cada uma das próximas N linhas contém uma entrada.

                    Cada entrada tem o formato ""mm:dd:HH:MM número ±"", sendo ""mm"" o mês, ""dd"" o dia, ""HH"" a hora, ""MM"" os minutos, e o número (tendo 1-16 dígitos) de cada chamada, seguido por ""+"" marcando uma chamada que você quer definitivamente manter ou por ""-"" para marcar as outras chamadas. As entradas vêm diretamente do registro do telefone, ou seja, elas são classificadas por tempo de recepção da chamada correspondente (a última entrada é a mais recente).

                    Você pode assumir que o processo de recuperação descrito acima produz o ano correto de cada chamada.

                    O último caso de teste é demonstrado por um 0.";Para cada caso de teste, a saída deve conter o número mínimo de entradas que devem ser mantidas para satisfazer os requisitos descritos acima. O processo de recuperação de ano descrito acima deve dar o mesmo resultado para as entradas iniciais do que para as entradas que foram selecionadas para manter na memória.;False;7 / 10;46;12;26.09%
1660;Flavius Josephus Está de Volta;Matemática;6;"Flavius Josephus uma vez foi preso em uma caverna junto com seus colegas soldados pelos romanos. Todos os colegas de Josephus preferiram se suicidar a se render. Então eles formaram um círculo e concordaram em um número K. Toda K-ésima pessoa no círculo cometeria suicídio. Entretanto, Josephus tinha prioridades diferentes e não queria morrer no momento. De acordo com a lenda ele conseguiu achar um lugar seguro no círculo onde ele seria o último a cometer suicídio. Ele então se rendeu aos romanos e se tornou um cidadão de Roma anos depois.

                    Já um fato menos conhecido é que as almas de Josephus e seus companheiros todas renasceram em tempos modernos. Obviamente Josephus e seus colegas renascidos queriam evitar ao máximo um fiasco similar no futuro. Então eles contrataram uma empresa de consultoria para bolar um esquema melhor.

                    
                    	Pelo bem da tradição todos os soldados deveriam ficar em um círculo. Dessa forma um número entre 0 e N-1 seria associado a cada soldado, onde N é o número de soldados.
                    	Como os números mutáveis no esquema antigo eram terrivelmente ineficientes, agora o número associado a cada soldado não muda durante o jogo.
                    	A empresa de consultoria vai prover dois números A e B que serão usados para calcular o número do próximo soldado da seguinte forma: Seja X o número do soldado atual, o número do próximo soldado é A · X2 + B mod N.
                    	Começa-se com o soldado número 0 e então os soldados calculam o número do próximo soldado de acordo com a fórmula acima.
                    	Já que todos merecem uma segunda chance um soldado cometerá suicídio na vez que seu número for calculado pela segunda vez.
                    	Na ocasião de um número de soldado for calculado pela terceira vez o jogo acaba e todos os soldados remanescentes se rendem.
                    

                    Você deve escrever um programa que dado o número de soldados N e as constantes A e B, determine o número de sobreviventes.";A entrada consiste de vários casos de teste. Cada caso de teste consiste numa única linha contendo 3 inteiros N (2 ≤ N ≤ 109), A and B (0 ≤ A, B < N) separados por um espaço em branco. Você pode assumir com segurança que o primeiro soldado morre com não mais que um milhão (106) de etapas. A entrada termina com um único 0 que não deve ser processado.;Para cada caso de teste imprima uma única linha indicando o número de soldados sobreviventes.;False;6 / 10;216;123;56.94%
1661;Comércio de Vinhos na Gergóvia;Paradigmas;2;"Como você deve saber do cômico ""Astérix e o Escudo de Arverne"", Gergóvia consiste de uma única rua e cada habitante da cidade é um vendedor de vinho. Você quer saber como essa economia funciona? Bem simples: todos compram vinhos dos outros habitantes da cidade. Cada dia, cada habitante decide quanto vinho ele quer comprar ou vender. Curiosamente, a demanda e o fornecimento são sempre os mesmos de modo que cada habitante consegue o que deseja.

                    Contudo, há um problema: transportar o vinho de uma casa para outra resulta em trabalho. Sendo todos os vinhos igualmente bons, os habitantes de Gergóvia não se importam com quais pessoas eles irão comercializar, eles estão somente interessados em vender e comprar um quantidade específica de vinho. Eles são espertos o suficiente para imaginar uma forma de negociar de modo que todo o montante de trabalho necessário para o transporte seja minimizado.

                    Nesse problema você está sendo inquerido para reconstruir o comércio durante um dia em Gergóvia. Para simplificar, nós assumimos que as casas são construidas ao longo de uma linha reta com a mesma distância entre as casas adjacentes. Transportar uma garrafa de vinho de uma casa para uma casa adjacente resulta em uma unidade de trabalho.";"A entrada consiste de vários casos de teste.

                    Cada caso de teste inicia com o número de habitantes n (2 ≤ n ≤ 100000). A linha seguinte contém n inteiros ai (-1000 ≤ ai ≤ 1000). Se ai ≥ 0, isso significa que cada habitante que vive na ith casa, deseja comprar ai garrafas de vinho, caso contrário se ai < 0, ele deseja vender -ai garrafas de vinho. Você pode assumir que os números ai resumem a 0.

                    O último caso de teste é seguido por uma linha contendo 0.";"Para cada caso de teste, imprima a quantidade mínima de unidades de trabalho necessárias para que todo habitante tenha sua demanda cumprida. Você pode assumir que este número cabe em um inteiro de 64 bits com sinal (em C/C++ você pode usar o tipo de dados ""long long"", em JAVA o tipo de dados ""long"").";False;2 / 10;2649;1216;45.90%
1662;Quadrados Homogêneos;Matemática;7;"Suponha que você tenha um quadrado de tamanho n que é dividido em n×n posições como em um tabuleiro de damas. Duas posições (x1, y1) e (x2, y2), onde 1 ≤ x1, y1, x2, y2 ≤ n, são chamados “independentes” se eles ocupam diferentes linhas e colunas, isto é, x1 ≠ x2 e y1 ≠ y2. Genericamente, n posições são chamadas independentes se elas são pares independentes. Então há n! diferentes formas de escolher n posições independentes.

                    Suponha ainda que um número é escrito em cada posição de tal quadrado n×n. Este quadrado é chamado “homogeneous” (homogêneo em português) se a soma de números escritos em n posições independentes é a mesma, não importa como as posições são escolhidas. Escreva um programa para determinar se um dado quadrado é homogêneo!";"A entrada contêm vários casos de teste.

                    A primeira linha de cada caso de teste contêm um inteiro n (1 ≤ n ≤ 1000). Cada uma das n linhas seguintes contêm n números, separados por exatamente um caracter de espaço. Cada número é um inteiro que está no intervalo [-1000000,1000000].

                    O último caso de teste é seguido por zero.";Para cada caso de teste, imprima se o quadrado especificado é homogêneo ou não. Preste atenção ao formato apresentado no exemplo de saída.;False;7 / 10;59;35;59.32%
1663;Permutações Ambíguas;Ad-Hoc;2;"Alguns problemas de competições de programação são mesmo melindrosos: não apenas exigem um formato de saída diferente do que você podia esperar, mas também o exemplo de saída não mostra a diferença. Por exemplo, vejamos as permutações.

                    Uma permutação dos inteiros de 1 a n é uma ordenação desses inteiros. Então a maneira natural de se representar uma permutação é listar os inteiros nessa ordem. Para n = 5, uma permutação seria 2, 3, 4, 5, 1.

                    Entretanto, há outra possibilidade de representar-se uma permutação: Cria-se uma lista de números onde o i-ésimo número é a posição do inteiro i na permutação. Chamemos essa segunda possibilidade de uma permutação inversa. A permutação inversa da sequência acima é 5, 1, 2, 3, 4. 

                    Uma permutação ambígua é uma permutação que não pode distinguida de sua permutação inversa. A permutação 1, 4, 3, 2, por exemplo, é ambígua, porque sua permutação inversa é a mesma. Para se livrar desses irritantes exemplos de casos de teste, você deve escrever um programa que detecta se a permutação dada é ambígua ou não.";"A entrada consiste de vários casos de teste.

                    A primeira linha de cada caso de teste contém um inteiro n (1 ≤ n ≤ 100000). A linha seguinte contém uma permutação de inteiros 1 a n. Há exatamente um caractere de espaço entre inteiros consecutivos. Assuma que todo inteiro entre 1 e n aparece exatamente uma vez na permutação. 

                    O último caso de teste é seguido por uma linha que contém um zero.";Para cada caso de teste imprima se a permutação é ambígua ou não, de acordo com o formato mostrado no exemplo de saída.;False;2 / 10;666;464;69.67%
1664;Bullshit Bingo;Strings;7;"Bullshit Bingo é um jogo para fazer palestras, seminários e reuniões menos entediantes. Cada jogador tem um cartão com 5 linhas e 5 colunas. Cada uma das 25 células contém uma palavra (a célula do centro sempre tem a palavra BINGO escrita em si). Sempre que um jogador ouvir uma palavra que estiver escrita em seu cartão, ele pode marcá-la. A célula do centro já é marcada quando o jogo começa. Se um jogador tiver marcado todas as palavras na linha, na coluna ou na diagonal, ele se levanta e grita BULLSHIT. Depois disto, o jogo começa mais uma vez.

                    Sentado em uma palestra, você observa que alguns estudantes no auditório estão jogando Bullshit Bingo. Você se pergunta qual o número médio de palavras diferentes até que BULLSHIT seja exclamado. Para o propósito deste problema, uma palavra consiste de letras do alfabeto Inglês (a a z, A a Z). Palavras são separadas por caracteres com exceção das letras (por exemplo espaços, dígitos e pontuação). Faça a comparação das palavras ignorando se ela estiver em maiúsculo ou minúsculo, em outras palavras, Bingo é o mesmo que bingo. Quando contar o número de palavras, ignore a palavra BULLSHIT (que indica o fim do jogo), e considere somente as palavras do jogo atual, ou seja, se uma palavra já ocorreu no jogo anterior, você ainda pode contá-la no jogo atual. Se o último jogo estiver inacabado, ignore as palavras desse jogo.";"O arquivo de entrada consiste no texto de uma palestra, com BULLSHIT ocorrendo ocasionalmente. O primeiro jogo começa com a primeira palavra da entrada. Cada ocorrência da palavra BULLSHIT indica o fim de um jogo.

                    Você pode assumir, que

                    
                    	a palavra BULLSHIT ocorre somente em letras maiúsculas
                    	cada palavra tem no máximo 25 letras, e cada linha tem no máximo 100 letras
                    	há no máximo 500 palavras diferentes antes que um jogo termine
                    	os jogadores seguem as regras, então não há necessidade de verificar se o jogo é válido ou não";Consiste em um número: o número médio de palavras diferentes necessárias para ganhar o jogo. Escreva o número como uma fração reduzida no formato mostrado a seguir. Reduzir a fração significa que não pode haver um inteiro maior que 1 que divide o numerador e o denominador. Por exemplo, se havia 10 jogos, e o número de palavras diferentes em cada jogo totalizam 55, imprima 11/2.;False;7 / 10;574;220;38.33%
1665;Decorando a Parede;Geometria Computacional;7;Depois de construir sua mansão, o Sr. Rico não ficou satisfeito com as cores de suas paredes. para ele as paredes estão muito brancas. Para mudar isso, ele começou pendurar quadros de sua rara coleção. Mas logo percebeu que é muito difícil encontrar um lugar na parede onde uma pintura possa ser colocada sem sobrepor outra pintura. Agora ele precisa de um programa que informe a ele, onde colocar a próxima pintura sem mover qualquer outra pintura já colocada na parede,(ou informe que isso é impossível). As pinturas tem formato retangular e serão colocadas paralelamente ao lado da parede. Se não houver problemas o Sr. Rico irá lhe recompensar com uma bela recompensa, vá em frente e resolva o problema.;"A primeira linha do ficheiro de entrada contém um número que representa o número de casos de teste a seguir. Cada caso de teste começa com uma linha contendo três números n, w e h. n é o número de quadros já pendurados na parede, w é a largura da parede e h é a altura da parede. As próximas n linhas contêm quatro números inteiros x1, y1, x2, y2 cada (0 ≤ x1 < x2 ≤ w, 0 ≤ y1 < y2 ≤ h); as coordenadas x fornecem a distância para o lado esquerdo da parede, as coordenadas y fornecem a distância até ao fundo da parede. (x1, y1) é a posição do canto inferior esquerdo de uma pintura, (x2, y2) é a posição do canto superior direito. A última linha de cada caso de teste contém as dimensões da próxima pintura para ser colocada, primeiro a sua largura w', então sua altura h' (1 ≤ w' ≤ w, 1 ≤ h ≤ 'h). Você não tem permissão para girar a pintura. Você pode supor que 0 ≤ n ≤ 200 e 1 ≤ w, h ≤ 1000000. Além disso, todas as pinturas já pendurados não se sobrepõem.";"Retorne uma linha de saída para cada caso de teste. Escreva ""Fail!"" se não há lugar à esquerda na parede onde a pintura poassa ser colocada sem sobrepor outra pintura. Caso contrário, escreva as coordenadas onde o canto inferior esquerdo da pintura deve ser colocado. No caso de haver mais de uma solução, selecione a solução com menor coordenada y, e em caso de empate utilizando a menor coordenada x.


                    A seguinte imagem representa o segundo caso de teste:";True;7 / 10;45;16;35.56%
1666;Qualquer Tolo Consegue;Paradigmas;7;"Com certeza você conhece alguém que acha que é muito esperto. Você, então, decide o deixar triste com o seguinte problema:

                    
                    	""Você sabe me dizer qual é a sintaxe de um conjunto?"", você o pergunta.
                    	""Claro!"", ele responde, ""um conjunto abriga a possibilidade de uma lista vazia de elementos dentro de duas chaves. Cada elemento pode estar dentro de um outro conjunto ou ser uma letra do alfabeto escolhido. Elementos da lista devem ser separados por uma vírgula"".
                    	""Então, se eu lhe der uma palavra, você consegue me dizer se ela é a representação sintaticamente correta de um conjunto?""
                    	""Claro, qualquer tolo consegue!"" é a resposta dele.
                    

                    Agora você o pegou! Você o apresenta a seguinte gramática, definindo formalmente a sintaxe para um conjunto (que foi descrita informalmente por ele):

                    Conjunto ::= ""{"" ElementoDaLista ""}""
                    ElementoDaLista ::= <empty> | Lista
                    Lista ::= Elemento | Elemento "","" Lista
                    Elemento ::= Átomo | Conjunto
                    Átomo ::= ""{"" | ""}"" | "",""

                    <vazio> significa uma palavra vazia, i.e., a lista em um conjunto pode ser vazia. Logo ele perceberá que esta tarefa é muito mais difícil do que ele pensou, já que que o alfabeto consiste de caracteres que também são usados para a sintaxe do conjunto. Então, ele diz que não é possível decidir, de forma eficiente, se uma palavra consistindo de ""{"", ""}"" e "","" é a representação sintaticamente correta de um conjunto ou não. Para prová-lo errado, você precisa escrever um programa eficiente que decidirá este problema.";"A primeira linha da entrada contém um número representando o número de linhas que seguem.

                    Cada linha consiste de uma palavra, para qual o seu programa deve decidir se é a representação sintaticamente correta de um conjunto. Você pode assumir que cada palvra contem entre 1 e 200 caracteres de um conjunto { ""{"", ""}"", "","" }.";"A saída para cada caso de teste deve dizerse uma palvra (""word"") consiste em um conjunto (""set"") ou não (""no set""). Você deve aderir ao formato mostrado na saída de exemplo.";False;7 / 10;117;50;42.74%
1667;HTML;Strings;8;"Se você alguma vez já tentou ler um documento html em um Macintosh, você sabe o quão difícil isso é sem um navegador instalado. Agora, quem pode esquecer de instalar um navegador HTML? Isso é muito fácil, pois a maioria das vezes você não precisa de um no MAC, porque existe um Acrobate Reader que é nativo para o MAC. Mas, e se você precisar de um, o que você faz? Sua tarefa é escrever um pequeno navegador html. Ele deve imprimir somente o conteúdo do arquivo de entrada e saber os comandos html (tags) o qual faz a quebra de linhas e

                    que tem a função de régua horizontal. Então, você deve tratar de todos tabuladores, espaços e novas linhas em um único espaço e imprimir o texto resultante com não mais de 80 caracteres em uma única linha.";A entrada consiste de um texto que você deve mostrar. Esse texto é composto por palavras e HTML tags separadas por um ou mais espaços, tabuladores ou novas linhas. Uma palavra é uma sequência de letras, números e pontuações. Por exemplo, “abc,123” é uma palavra, mas “abc, 123” são duas palavras, chamadas “abc,” e “123”. Uma palavra é sempre menor que 81 caracteres e não contém nenhum ‘<’ ou ‘>’. Todas tags HTML são <br> ou <hr>.;"Você deve mostrar o texto resultante usando estas regras:

                    Se você ler uma palavra na entrada e a linha resultante não for maior que 80 caracteres, imprima isto, se não, imprima em uma nova linha.

                    Se você ler <br> na entrada, comece uma nova linha.

                    Se você ler <hr> na entrada, comece uma nova linha a menos que você já esteja no começo de uma linha, imprima 80 caracteres de ‘-‘ e comece uma nova linha (novamente).

                    A última linha deve ser terminada com um caractere de nova linha.";False;8 / 10;2402;392;16.32%
1668;Ajude o Autor do Problema;Grafos;7;"Preparar um problema para uma competição de programação leva muito tempo. Você não somente tem que escrever a descrição e a solução de um problema, mas você também tem que criar arquivos de entrada difíceis. Nesse problema, você terá a chance de ajudar o autor de problemas a criar algumas entradas para um determinado problema.

                    Para isso vamos selecionar o problema que não foi resolvido durante uma competição local no ano passado. O problema era encontrar a árvore binária de busca ótima, dado a probabilidade de que certos nós são acessados. Seu trabalho será: dado a árvore binária de busca ótima desejada, descubra algumas probabilidades de acesso para que esta seja a única e melhor árvore. Não se preocupe se você não leu o problema no ano passado, pois todas as definições exigidas foram colocadas abaixo.

                    Vamos definir uma árvore binária de busca indutivamente da seguinte forma:

                    
                    	Uma árvore vazia que não possui nenhum nó é uma árvore binária de busca;
                    	Cada árvore binária de busca não vazia possui uma raiz, que é um nó identificado por um inteiro e duas sub-árvores uma a direita e outra a esquerda da raiz;
                    	A sub-árvore da esquerda não contém nenhum nó com rótulo ≥ que o rótulo da raiz;
                    	A sub-árvore da direira não contém nenhum nó com rótulo ≤ que o rótulo da raiz.
                    

                    Dado tal árvore de busca binária, o seguinte procedimento de busca pode ser usado para localizar um nó na árvore:

                    Começe com a raiz. Compare o rótulo do nó atual com o rótulo do nó desejado. Se forem iguais, você encontrou o nó correto. Caso contrário, se o rótulo desejado for menor busqye na sub-árvore da esquerda, senão, busca na sub-árvore da direita.

                    O custo de acesso para localizar um nó é o número de nós que você visitou até encontrar o nó certo. Uma árvore binária de busca ótima é uma árvore com o mínimo custo esperado.";"O entrada contém vários casos de teste. Cada caso inicia com um inteiro n (1 ≤ n ≤ 50), que é o número de nós de uma árvore binária de busca ótima. Para simplificar, os valores dos nós serão inteiros de 1 a n. A seguir temos n linhas que descrevem a estrutura da árvore. A i-ésima linha contém os valores dos nós da sub-árvore esquerda e direita com valor i (ou -1 para uma árvore vazia). Você pode assumir que a entrada sempre conterá uma árvore binária de busca válida.

                    O último caso é seguido por um zero.

                    Note que o primeiro caso de teste no exemplo de entrada descreve uma árvore parecida com:

                       2
                     /  \
                    1    3";Para cada caso de teste, escreva uma linha contendo a frequência de acesso para cada nó em ordem crescente de valores dos nós. Para evitar problemas de precisão, as frequências devem ser escritas como números inteiros, significando que a probabilidade de acesso de um nó será a frequência dividida pela soma de todas as frequências. Certifique-se que você não escreverá qualquer inteiro maior que 263 - 1 (o valor máximo que cabe no tipo long long para C/C++ ou long para Java). Caso contrário, você poderá produzir uma solução qualquer sem a garantia de que é exatamente uma árvore binária de busca ótima: a árvore binária de busca dada na entrada.;False;7 / 10;29;10;34.48%
1669;Todos os Discos Considerados;Grafos;9;"Sistemas operacionais são grandes artefatos de software compostos de muitos pacotes. Você provavelmente lembra do tempo onde seu sistema operacional favorito era entregue em 21 disquetes, ou, alguns anos depois, em 6 CDs. Hoje em dia, será entregue em vários DVDs, cada um contendo dezenas de milhares de pacotes.

                    A instalação de cada pacote talvez requeira que outros pacotes já estejam instalados. Assim sendo, se os pacotes fores distribuídos na mídia de forma inadequada, a instalação do sistema operacional completo requererá que você faça diversas mudanças na mídia, sendo que há apenas um dispositivo de leitura disponível, e.g, um drive de DVD-ROM. Uma vez que você tem que começar a instalação de alguma forma, haverá com certeza um ou mais pacotes que podem ser instalados independentemente de todos os outros pacotes.

                    Dada uma distribuição de pacotes e uma lista de dependências entre os pacotes, você tem que calcular o número mínimo de mudanças na mídia requeridas para instalar todos os pacotes.

                    Para sua conveniência, você pode assumir que o sistema operacional vem em exatamente 2 DVDs.";A entrada contém vários casos de teste. Cada teste começa com três inteiros N1,N2, D. Você pode assumir que 1 ≤ N1,N2≤ 50000 e 0 ≤ D≤ 100000. O primeiro DVD contém N1 pacotes, identificados pelos números 1,2, ...,N1. O segundo DVD contém N2 pacotes, identificados pelos números N1+1,N1+2, ..., N1+N2. Então seguem D especificações de dependências, cada uma consistindo de dois inteiros, xi,yi. Você pode assumir que 1 ≤ xi,yi ≤ N1+N2 para 1 ≤ i ≤ D. A especificação de dependência significa que a instalação do pacote xi requer a instalação prévia do pacote yi. Você pode assumir que não há dependência circular. O último caso de teste é seguido por três zeros.;Para cada caso de teste imprima uma linha com o número mínimo de mudanças requeridas para instalar todos os pacotes. Por conveniência, o drive de DVD está vazio antes da instalação e a inserção inicial de um disco conta como uma mudança. Da mesma forma, a remoção final de um disco conta como uma mudança, deixando o drive de DVD vazio após a instalação.;False;9 / 10;1280;263;20.55%
1670;Lógica Booleana;Ad-Hoc;3;"Proposições são fórmulas lógicas que consistem em símbolos de proposição e operadores conectivos. Eles são definidos recursivamente pelas seguintes regras:

                    
                    	Todos os símbolos de proposição (neste problema, caracteres alfabéticos minúsculos, por exemplo, a e z) são proposições.
                    	Se P é uma proposição, (!P) é uma proposição, e P é uma subfórmula direta dela.
                    	Se P e Q são proposições, (P&Q), (P|Q), (P-->Q), e (P<->Q) são proposições, e P e Q são subfórmulas diretas delas.
                    	Nada mais é uma proposição.
                    

                    As operações !, &, |, -->, e <-> denotam negação, conjunção, disjunção, implicação e equivalência, respectivamente. A proposição P é uma subfórmula de uma proposição R se P=R ou se P é uma subfórmula direta de uma proposição Q e Q é uma subfórmula de R.

                    Seja P uma proposição e atribui-se valores boleanos (isto é, 0 ou 1) a todos os símbolos de proposição que ocorrem em P. Isto induz um valor booleano para todas as subfórmulas de P, de acordo com a semântica padrão dos operadores lógicos:


                    
                    
                        
                            Negação  
                            Conjunção 
                            Disjunção  
                            Implicação  
                            Equivalência 
                        
                    


                    
                    
                    !0=1
                    0&0=0
                    0|0=0
                    0-->0=1
                    0<->0=1
                    
                    !1=0
                    0&1=0
                    0|1=1
                    0-->1=1
                    0<->1=0
                    
                    
                    1&0=0
                    1|0=1
                    1-->0=0
                    1<->0=0
                    
                    
                    1&1=1
                    1|1=1
                    1-->1=1
                    1<->1=1
                    
                    
                    


                    Dessa forma, o valor de P pode ser calculado. Este valor depende da escolha da atribuição de valores booleanos aos símbolos proposição. Se P contém n símbolos proposição diferentes, existem 2n atribuições diferentes. Para avaliar todas as tarefas possíveis, podemos utilizar tabelas de verdade.

                    Uma tabela verdade contém uma linha por atribuição (ou seja, 2n linhas no total). Cada linha contém os valores de todas as subfórmulas sob a designação escolhida. O valor de uma subfórmula está alinhado com o símbolo da proposição, se a subfórmula é um símbolo proposição, e, de outra forma, com o centro do operador.";A entrada contém vários casos de teste, cada um em uma linha separada. Cada caso de teste denota uma proposição e pode conter quantidades arbitrárias de espaços no meio. O arquivo de entrada termina imediatamente após o símbolo de nova linha após o último caso de teste.;"Para cada caso de teste seu programa deve gerar uma tabela verdade para a proposição denotada. Comece a tabela verdade repetindo a linha de entrada. Avalie a proposição (e as suas subfórmulas) para todas as atribuições para as suas variáveis, e use uma linha para cada atribuição. A linha deve ter o mesmo comprimento que a linha de entrada correspondente e deve conter apenas espaços e os caracteres 0 e 1. Imprima uma linha em branco após cada caso de teste.

                    Deixe os símbolos de proposição (s1, ..., sn) na proposição denotada classificados em ordem alfabética. Então, todas as atribuições de 0 a s1 devem preceder as atribuições de 1 a s1. Dentro de cada um destes blocos de atribuições, todas as atribuições de 0 a s2 devem preceder as atribuições de 1 a s2, e assim por diante.";False;3 / 10;58;33;56.90%
1671;Código;Grafos;7;"KEY Inc., empresa líder em hardware de segurança, desenvolveu um novo tipo de seguro. Para desbloqueá-lo, você não precisa de uma chave, mas é necessário que você digite o código de n dígitos correto em um teclado (como se isso fosse algo novo!). Existem vários modelos disponíveis, de cofres de brinquedo para crianças (com um código de 2 dígitos) para a versão militar (com um código de 6 dígitos).

                    O cofre se abrirá assim que o último dígito do código correto for digitado. Não há nenhuma tecla ""enter"". Quando você entra com mais de n dígitos, somente os n últimos dígitos são significativos. Por exemplo (na versão de 4 dígitos), se o código correto é 4567, e você pretende entrar com a sequência  de dígitos 1234567890, a porta será aberta assim que você pressionar a tecla 7.

                    O software para criar esse efeito é bastante simples. Na versão com n dígitos do cofre a chave está sempre em um dis 10n-1 estados internos. O estado atual do seguro representa simplesmente os últimos n-1 dígitos que foram inseridos. Um desses estados (no exemplo acima, o estado 456) é marcado como o estado desbloqueado. Se o cofre estiver no estado desbloqueado e, em seguida, a tecla correta (no exemplo acima, 7) é pressionado, a porta é aberta. Caso contrário, o estado muda para o novo estado correspondente. Por exemplo, se o seguro está em estado de 456 e, em seguida, você pressionar 8, o seguro entra em estado 568.

                    Uma estratégia trivial para abrir o cofre é introduzir todos os códigos possíveis, um após o outro. No pior dos casos, no entanto, isto vai exigir n * 10n teclas. Ao escolher uma sequência boa de dígitos, é possível abrir o cofre em, no máximo, 10n + n - 1 teclas. Tudo que você tem a fazer é encontrar uma sequência  de dígitos que contém todas as sequência s de n dígitos exatamente uma vez. KEY Inc. afirma que para a versão militar (n = 6) os computadores mais rápidos disponíveis hoje precisaria de bilhões de anos para encontrar uma tal sequência  - mas, aparentemente, eles não sabem do que alguns programadores são capazes.";A entrada contém vários casos de teste. Cada caso de teste é especificado por um número inteiro n. Você pode assumir que 1 ≤ n ≤ 6. O último caso de teste é seguido por um zero.;Para cada caso de teste especificado pela saída n, uma linha que contém uma sequência  de 10n + n - 1 dígitos que contém cada sequência  de n dígitos exatamente uma vez.;False;7 / 10;248;81;32.66%
1672;Em Perigo;Paradigmas;6;"Flavius Josephus e 40 amigos rebeldes foram encurralados pelos Romanos. Seus companheiros prefiriram o suicídio à rendição, então eles decidiram formar um círculo e matar cada terceira pessoa e continuar até que não sobre ninguém. Josephus não gostou da ideia de se matar então ele calculou a posição para ser o último homem vivo (ele não cometeu suicídio já que ninguém estava olhando).

Nós vamos variar esse ""jogo"" de modo que cada segunda pessoa saia do círculo. Claro que haverá mais de 41 pessoas uma vez que agora temos computadores. Você deve calcular a posição segura. Seja cuidadoso pois talvez nós utilizemos o seu programa para calcular o ganhador desta competição!";A entrada contém vários casos de teste. Cada caso de teste é composto por um número N que representa o número de participantes desse jogo. Para dificultar as coisas, o formato dele é XYeZ com a seguinte semântica: quando N é escrito em notação decimal, seu primeiro digito é X e seu segundo digito é Y, seguidos por Z zeros. Onde 0 ≤ X, Y ≤ 9, o número de zeros é 0 ≤ Z ≤ 6. Você pode assumir que N > 0. O último caso de teste é a string 00e0.;Para cada caso de teste exiba uma linha contendo a posição da pessoa que sobreviverá. Considere que os participantes possuem identificações sequenciais de 1 a N e que a contagem começa com a pessoa 1, i.e., a primeira pessoa a sair do círculo é aquela com o número 2. Por exemplo, se houver 5 pessoas no círculo, a eliminação ocorrerá da seguinte maneira: 2, 4, 1, 5 e a pessoa 3 continuará viva.;False;6 / 10;630;303;48.10%
1673;Codificação Run-length;Estruturas e Bibliotecas;7;"Sua tarefa é escrever um programa que realiza uma simples Codificação Run-Length, como descrita nas regras abaixo.
 
Qualquer sequencia entre 2 e 9 caracteres idênticos é codificada por dois caracteres. O primeiro caractere é a largura da sequência, representada por um dos caracteres entre 2 a 9. O segundo caractere é o valor do caractere repetido. Uma sequência de mais de 9 caracteres identicos repetidos é resolvida com primeiro codificando 9 caracteres, depois os caracteres restantes.

Qualquer sequência de caracteres que não contém repetições consecutivas de qualquer caracteres é representada por um caractere '1' seguido da sequência de caracteres e terminado com outro '1'. Se um '1' aparecer como parte da sequencia, ele será terminado com um '1', tendo então dois caracteres '1' como saída.";A entrada consiste de letras(maiúsculas e minúsculas), digitos, espaços e pontuação. Toda linha é terminada com um caractere terminador de linha.;Cada linha da entrada é codificada separadamente como descrito acima. A nova linha no final de cada linha não é codificada, mas é passada diretamente para a saída.;False;7 / 10;1415;335;23.67%
1674;Fractran;Matemática;5;"Para jogar o ""jogo da fração"", correspondente a uma lista dada f1, f2, ..., fk de frações e inteiros começando em N, você repetidamente multiplica o inteiro que você tem em qualquer fase (inicialmente N) pelos primeiros fi na lista para os quais a resposta é um inteiro. Sempre que não exista tal fi, o jogo para.

                    Formalmente, definimos uma sequência S0=N, e Sj+1=fiSj, se para 1 ≤ I ≤ k, o número fiSj é um inteiro, mas os números f1Sj, ..., fi-1SJ não são.

                    Por exemplo, se temos a lista com oito frações f1=170/39, f2=19/13, f3=13/17, f4=69/95, f5=19/23, f6=1/19, f7=13/7, f8=1/3, e iniciando com N = 21, nós produzimos a sequência (finita) (21,39,170,130,190,138,114,6,2). Em geral, a sequência pode ser infinita.

                    Dada uma lista de frações e um inteiro de início, calcule uma parte da sequência definida. Na verdade, estamos interessados apenas nas potências de 2 que aparecem na sequência.";A entrada contém vários casos de teste. Cada caso de teste começa com três inteiros m, N, k. Você pode assumir que 1 ≤ m ≤ 40, 1 ≤ N ≤ 1000, e 1 ≤ k ≤ 100. Então seguem k frações f1, ..., fk. Para cada fração, primeiro seu numerador é dado, seguido por seu denominador. Você pode assumir que ambos são números inteiros positivos menores ou iguais a 1000 e seu maior divisor comum é 1. O último caso de teste é seguido por um zero.;Para cada caso de teste imprima na linha m os números e1, ..., em, separados por um caractere de espaço, de tal forma que 2e1, ..., 2ek são os primeiros m números na sequência definida, que são potências de 2. Você pode assumir que há pelo menos m potências de 2 entre os primeiros 7654321 elementos da sequência.;False;5 / 10;20;11;55.00%
1675;Construção de Procura Binária de Heap;Grafos;10;"Leia o enunciado do problema G para as definições sobre heaps. A seguir nós definimos a terminologia básica de heaps. Uma heap é uma árvore cujos nós internos tem, cada um, uma prioridade (definida por um número) sendo que a prioridade de cada nó interno é menor que a prioridade de seu nó-pai. Como consequência, a rais será o nó de maior prioridade da árvore. Isso é uma das razões pelas quais heaps podem comumente ser usadas para a implemantação de filas de prioridade e para ordenações.

                    Uma árvore binária na qual cada nó interno tem ambos um rótulo e uma prioridade, e é tanto uma arvore binária de busca com atenção para rótulos; quanto uma fila com atenção para prioridades, é chamada de treap(árvore-heap). A sua tarefa é: Dado um conjunto de pares de rótulos e prioridades, com rótulos únicos e prioridades únicas, construir uma treap com essas informações.";A entrada contém vários casos de teste. Cada caso de teste começa com um inteiro n. Você pode assumir que 1≤ n  ≤ 50000. Então segue n pares de strings e números rótulo1/prioridade1 , ... , rótulon/prioridaden. As strings são não-nulas e em caixa-baixa, e os números são inteiros não-negativos. O último caso de teste é seguido por um zero.;Cada linha de cada caso de teste deve conter uma treap com os nós especificados. Uma treap é impressa como (<Sub-treap da Esquerda><Rótulo>/<Prioridade><Sub-treap da Direita>) As sub-treaps são impressas recursivamente e omitidas se forem folhas.;False;10 / 10;191;28;14.66%
1676;Precisa-se de Ajuda;Ad-Hoc;5;"Após uma competição europeia de programação em 1998, que ocorreu em Ulm, na Alemanha, foi dada uma grande festa. Os organizadores da festa inventaram uma forma especial para escolher quais participantes iriam ajudar lavando as louças. Os competidores deveriam se organizar em uma fila, um atrás do outro. Cada um deles recebeu um número, começando com 2 para o primeiro, 3 para o segundo, 4 para o terceiro, etc.

                    Então, o primeiro competidor na fila mostra o seu número (no caso, 2). Ele é liberado de ter que lavar as louças e pode curtir a festa, porém, cada segundo participante atrás dele deveria ir para a cozinha (aqueles com os números 4, 6, 8, etc). Depois, o próximo competidor na fila restante mostra seu número. Ele mostra o 3 e também é liberado de ter que lavar louças, mas todos os terceiros competidores atrás dele deveriam ajudar (aqueles com os números 9, 15, 21, etc). O próximo na fila mostra seu número (5) e é liberado, mas cada quinto participante atrás dele é selecionado para ajudar (números 19, 35, 49, etc). O próximo mostra o número 7 e é liberado, e então cada sétimo atrás dele é enviado para a cozinha, e assim sucessivamente.

                    Vamos chamar o número dos competidores que não precisaram ajudar com as louças de um número da sorte. Continuando a seleção preparada pela organização, vemos que os números da sorte são 2, 3, 5, 7, 11, 13, 17, etc. Encontre os números da sorte para se dar bem na próxima festa.";A entrada contém vários casos de teste. Cada caso de teste consiste de um inteiro n (0 ≤ n ≤ 3000). Um zero indica o fim da entrada.;Para cada caso de teste n, imprima uma única linha contendo o enésimo número da sorte.;False;5 / 10;730;385;52.74%
1677;A Base de um Grafo;Grafos;9;"Usaremos as seguintes definições padrão de teoria dos grafos. Seja V um conjunto finito não vazio e, seus elementos sendo chamados vértices (ou nós). Seja E um subconjunto do produto cartesiano V × V, seus elementos sendo chamado bordas. Então G = (V, E) é chamado um grafo direcionado.
                    Seja N um inteiro positivo, e P = (e1, ..., en) uma sequência de comprimento N de arestas, e ei ∈ E de modo que ei = (vi, vi +1) para uma seqüência de vértices (v1, ..., vn+1). Então P é caminho de vértice v1 ao vértice vn +1 em G e dizemos que vn +1 é acessível a partir de v1, escrevendo (v1 → vn +1).
                    Aqui estão algumas novas definições. Um nó v em um grafo G = (V, E) é chamado de sorvedouro, se para cada nó W em G que é acessível a partir de v, v também é acessível a partir de W. A base de um grafo é o subconjunto de todos os nós que são sorvedouros, ou seja, base(G) = {v ∈ V | ∀w ∈ V: (v → W) ⇒ (W → v)}. Você tem que calcular base de certos grafos.";A entrada contém vários casos de teste, cada um dos quais corresponde a um grafo orientado G. Cada um caso de teste inicia-se com um número inteiro v, que denota o número de vértices de G = (V, E), em que cada vértice é identificado por um inteiro no conjunto V = {1, ..., v}. Você pode assumir que v(1 ≤ v ≤ 5000). Isto é seguido por um número e inteiro não negativo e, a partir daí, e pares de vértice identificadores v1W1, ..., veWe, com o significado de que (vi, Wi) ∈ E. Não há outras arestas além das especificadas por estes pares. O último caso de teste é seguido por um zero.;Para cada caso a saída de teste imprima a base do grafo especificado em uma única linha. Para este fim, imprima os números de todos os nós que são bases na ordem de classificação, separadas por um único caractere de espaço. Se a base estiver vazia, imprima uma linha vazia.;True;9 / 10;653;152;23.28%
1678;Gerenciamento de Partição Fixa em Competição;Ad-Hoc;10;"Uma técnica usada em estratégias iniciais de competição de programação envolve particionar a capacidade intelectual disponível de uma equipe por um número de membros, com cada membro tendo uma quantia fixa de inteligência, e diferentes membros potencialmente tendo quantidades diferentes. A soma da capacidade de todos os membros é igual a capacidade intelectual total da equipe.

                Dado um conjunto de problemas, a tarefa da equipe é atribuir os problemas a diferentes membros da equipe, de modo que os problemas possam ser resolvidos simultaneamente. Esta tarefa é difícil devido ao fato de que o tempo para a solução de um problema pode depender da quantidade de informações disponíveis. Todo problema tem um requisito mínimo de inteligência: se a atribuição for para um membro mais brilhante, o tempo de solução pode aumentar ou diminuir.

                Nesta tarefa, você tem que determinar atribuições ideais de problemas aos membros da equipe. O programa informa as capacidades intelectuais dos membros da equipe disponíveis para a solução dos problemas, e uma descrição, para cada problema, de como o tempo de solução depende da quantidade de informação disponível. O programa tem que encontrar um cronograma de solução que minimiza o tempo médio de solução para os problemas. Um cronograma de solução é uma atribuição de problemas aos membros da equipe em relação ao tempo, de tal forma que não há dois problemas que usam o mesmo membro ao mesmo tempo, e não há problema que é atribuído a um membro da equipe com menos capacidade do que o seu requisito mínimo. O tempo para a solução do problema é a diferença entre o tempo em que o problema foi submetido para ser resolvido (o início da competição começa no tempo zero para todos os problemas desta tarefa), e o tempo em que o problema foi resolvido.";"Os dados de entrada conterão vários casos de teste. Cada caso de teste começa com uma linha contendo um par de números inteiros m e n. O número m especifica o número de membros da equipe (1 ≤ m  ≤ 3), e n especifica o número de problemas a serem resolvidos (1 ≤ n ≤ 10).

					A próxima linha contém m inteiros positivos informando os valores de inteligência dos membros da equipe m. Em seguida, as n linhas descrevem as compensações de tempo de capacidade para cada um dos n problemas. Cada linha começa com um k inteiro positivo (k ≤ 10), seguido por pares de k inteiros positivos s1 ,t1 , s2 , t2 ,..., sk , tk que satisfazem si  <  si+1 para 1 ≤ i  <  k . O requisito mínimo de inteligência do problema é s1, ou seja, não pode ser resolvido por um membro com menos capacidade intelectual do que este número. Se o problema é resolvido por um membro da equipe com capacidade  s , onde s1 ≤  s  < si+1 para algum  i , então o tempo de solução será t1. Finalmente, se o problema é resolvido por um membro da equipe com capacidade intelectual sk ou mais, então o tempo de execução será tk.

					Um par de zeros será a entrada para o último caso de teste.

					Você pode assumir que cada problema será resolvido exatamente no tempo especificado para a capacidade informada, independentemente do número de outros problemas que estão sendo resolvidos por outros membros da equipe ao mesmo tempo. Nenhum problema terá um requisito de inteligência maior do que a do membro da equipe mais brilhante.";Para cada caso de teste, primeiro apresentar o número do caso (começando com 1 e aumentando sequencialmente). Em seguida, imprima o tempo médio de solução para o conjunto de problemas com dois dígitos à direita do ponto decimal. Siga a descrição de um cronograma de solução que alcança esse tempo médio de solução. Visualiza uma linha para cada problema, na ordem em que foi informado na entrada, que identifica o número do problema, o membro utilizado para resolver (numerado de acordo com a ordem de entrada), o tempo que o membro começou a resolver o problema, e o tempo em que o problema foi resolvido. Siga o formato mostrado no exemplo de saída, e imprima uma linha em branco após cada caso de teste.;False;10 / 10;174;6;3.45%
1679;Bebida, com Gelo;Geometria Computacional;4;"Uma boa bebida é sempre servida com gelo. Dito isto, a quantidade de gelo é o que faz a diferença. Se for muito, a bebida será bem gelada, no entanto, isso é um pouco de fraude já que poderia haver menos gelo (e mais Vodka, por exemplo). Por outro lado, se há muito pouco gelo a bebida fica quente, o que é inaceitável. Você deve ajudar o garçom, é claro que não com a mistura nem com a bebida, mas com o cálculo do resultado esperado de tais misturas.

Para facilitar as coisas, vamos supor que a água pura é misturada com gelo em um sistema fechado, isto é, não há nenhum problema com a temperatura exterior ou o aquecimento da garrafa, etc. Portanto, depois de um algum tempo passou, o sistema pode ser considerado como equilibrado (não há nenhuma outra alteração na temperatura e não há mais derretimento ou congelamento). Sua tarefa é calcular a temperatura final deste sistema balanceado e a quantidade de gelo e de água neste estado de equilíbrio.

Como você conhece da física, é necessário 4.19 Joules para aquecer um grama de água em um Kelvin, enquanto é necessário 2.09 Joules se for gelo. Nós definimos as capacidades cw = 4.19 J/(g*K) e ci = 2,09 J/(g*K). Para derreter um grama de gelo é necessário 335 Joules, onde a temperatura permanece constante em zero. Nós definimos a constante em = 335 J/g. A energia térmica total do gelo e da água antes do experimento são iguais à energia térmica ao final da mistura.

A figura abaixo mostra a energia de um grama de gelo, mistura-gelo-água, ou água, onde a temperatura é medida em relação a -30 graus Celsius. O salto em 0 graus representa o derretimento do gelo para a água. A quantidade de energia obtida é proporcional à quantidade de gelo já derretido.";A entrada contém vários casos de teste. Cada caso de teste consiste de quatro números reais mw, mi, tw, ti. A massa de água mw e a massa de gelo mi são ambas não-negativas, dados em gramas, e mw + mi > 0. A temperatura da água tw e a temperatura do gelo ti são informadas na sequencia, ambos em graus Celsius, e você pode assumir que -30 < ti ≤ 0 ≤ tw < 100. O último caso de teste é seguido por quatro zeros.;Para cada caso de teste imprima a quantidade de gelo e água, em gramas, e a temperatura final da mistura em graus Celsius. Todos os números devem ser arredondados para um dígito. Adote a saída de exemplo como o formato esperado.;True;4 / 10;64;39;60.94%
1680;Borda;Ad-Hoc;4;Para produtos que são embalados em pequenos pacotes é necessário que a folha de instruções de uso seja dobrada até que seu tamanho se torne suficientemente pequeno. Assume-se que uma folha é retangular e só pode ser dobrada ao longo de linhas paralelas à sua menor borda inicial. O ato de dobrar tal linha, contudo, pode ser realizado em duas direções: tanto a superfície superior da folha é dobrada, ou a superfície inferior. Em ambos os casos as duas partes do retângulo que estão separadas pela linha da dobra são dispostas em conjunto e ignora-se qualquer diferença de espessura na folha dobrada resultante.Depois de diversas dobras serem realizadas pode-se desdobrar a folha novamente e observar sua maior curva de forma que pareça uma curva unidimensional, na verdade a junção de segmentos de linhas. Ao se mover por entre essa curva em uma direção fixa pode-se classificar cada ponto em que a folha foi dobrada como um tipo A, uma rotação em sentido horário, ou tipo V, uma rotação em sentido anti-horário. Dadas tais sequências de classificações, produza um desenho da maior borda da folha assumindo rotações de 90 graus em pontos equidistantes.;A entrada contém diversos casos de testes, cada um em uma linha separada. Cada linha contém uma string não vazia de caracteres A e V descrevendo a maior borda da folha. Você pode assumir que o tamanho da string é menor que 200. O aquivo de entrada termina imediatamente após o último caso de teste.;"Para cada caso de teste gere um desenho PostScript da borda com comandos em linhas separadas. Comece cada desenho nas coordenadas (300, 420) com o comando ""300 420 moveto"". A primeira rotação ocorre em (310, 420) utilizando o comando ""310 420 lineto"". Continue com rotações em sentido horário ou anti-horário de acordo com a string de entrada, usando a sequência ""x y lineto"" de comandos com as coordenadas devidas. Os pontos de rotações são separados por uma distância de 10 unidades. Não se esqueça do último ponto da borda e de terminar cada caso de teste com os comando stroke e showpage.
                    
                    Você pode exibir tais desenhos com o interpretador de PostScript gv, opcionalmente depois de uma conversão utilizando o ps2ps.";True;4 / 10;200;148;74.00%
1681;Dobra;Paradigmas;2;"Leia a descrição do problema 1680 (Lado) para entender como dobrar uma folha de papel e como interpretar a entrada. Uma ""tira"" é definida como a parte maximal de uma folha que não tem vincos atravessando-a. Como as dobras ocorrem em locais equidistantes, todas as tiras são congruentes.
Neste problema é dada a descrição do resultado da realização de diversas dobras como no problema E: Lado, ou seja, no estado desdobrado. Adicionalmente, é sabido que o comprimento da folha em seu estado dobrado é exatamente o comprimento de uma tira (novamente a grossura do papel é ignorada).
Encontre o número mínimo de dobraduras necessárias para gerar a folha descrita a partir de uma folha de papel inicialmente plana. Note que realizar uma dobradura pode criar mais que uma dobra no resultado porque partes do papel estão sobrepostas devido à dobraduras anteriores. No entanto, quando um passo de dobradura é realizado todas as partes sobrepostas do papel são afetadas, isso é, não é permitido dobrar, por exemplo, apenas as três camadas superiores.
Por último, note que todo resultado pode ser obtido iterando as dobras em uma direção fixa e realizando uma dobradura por vez, acumulando dessa forma uma pilha de todas as tiras, com comprimento de uma tira. Se n é o número de dobras na descrição de entrada, esse procedimento requer então n passos de dobradura, que não é necessariamente o mínimo, como pode ser observado na saída de exemplo.";A entrada contém vários casos de teste, cada um em uma linha distinta. Cada linha contém uma string não vazia de caracteres A e V descrevendo o lado mais longo da folha. Assuma que o comprimento da string é menor que 200. O arquivo de entrada termina imediatamente após o último caso de teste.;Para cada caso de teste, imprima em em uma linha o número mínimo de passos de dobradura necessários para produzir a folha de papel descrita.;False;2 / 10;15;9;60.00%
1682;Código Genético;Paradigmas;5;"As conexões entre Matemática e Biologia são complicadas. Na maioria das vezes, estas conexões não se dão por meio de ligações que alegremente se juntam à primeira vista, mas são abstratas e nem sempre facilmente estabelecidas.

O Lago Vostok - com cerca de 14 mil quilômetros quadrados de extensão, mais de 650 metros de profundidade e coberto por 3743 metros de gelo - foi descoberto recentemente no continente Antártico. O lago permanceu sob condições de alta pressão e desprovido de luz solar por milhares de anos. Acredita-se que a vida comum evoluiu para uma forma mais eficiente usando-se de um código genético composto unicamente por três bases (a Ciência atualmente diz haver quatro bases: adenina, citosina, guanina e timina). Até que nomes apropriados sejam encontrados, as três bases em questão serão identificadas por N, O e P.

Além disso, o genoma é de fita simples e dirigido, isto é, podemos percebê-lo como uma sequência do alfabeto {N,O,P}. A menos que apresente instabilidade, é necessário que o genoma seja uma sequência Thue, devido aos estudos do matemático norueguês A. Thue (1863 - 1922). Entenda por subsegmento de uma sequência, uma sequência a ser conectada, e entenda que dois subsegmentos são adjacentes, quando um é seguido imediatamente pelo outro em uma determinada sequência. Uma sequência-Thue é uma sequência onde nenhum subsegmento adjacente é igual. Por exemplo, NOPNO (é uma sequência-Thue) e NOPNPNO (não é uma sequência-Thue), logo o primeiro exemplo configura um genoma, enquanto o segundo, não.

Para sermos capazes de simular experiências com novos genomas, pedimos que você gere genomas de determinados comprimentos.";A entrada contém vários casos de testes. Cada caso de teste é composto por um inteiro n. Adimita que 1 ≤ n ≤ 5000. O último caso de teste deve ser zero, isto é, n = 0.;Para cada caso de teste especificado por n imprima uma linha com qualquer genoma de comprimento n. Caso nenhum genoma de comprimento n exista, imprima uma linha em branco.;False;5 / 10;2007;661;32.93%
1683;Maior Retângulo em um Histograma;Estruturas e Bibliotecas;7;"Um histograma é um polígono composto por uma seqüência de retângulos alinhados em uma linha de base comum. Os retângulos têm larguras iguais, mas podem ter diferentes alturas. Por exemplo, a figura da esquerda nos mostra um histograma com retângulos de alturas 2, 1, 4, 5, 1, 3, 3, onde a medida 1 é a largura dos retângulos:




Normalmente, histogramas são utilizados para representar distribuições discretas, como a freqüência de caracteres em um texto. Note que a ordem dos retângulos, ou seja, suas alturas, é importante. Calcule a área do maior retângulo de um histograma, que também esteja alinhado com a base. A figura da direita mostra o maior retângulo alinhado no histograma apresentado.";A entrada contém vários casos de teste. Cada caso de teste descreve um histograma, e inicia com um inteiro n, que representa o número de retângulos que o compõe. Assuma que 1 ≤ n ≤ 100000. Em seguida, n inteiros h1, ..., hn, onde 0 ≤ hi ≤ 1000000000. Esses números representam as alturas dos retangulos do histograma, da esquerda para a direita. A largura de cada retângulo é 1. Um zero na entrada representa o ultimo caso de teste.;Para cada caso de teste imprima em uma única linha a área do maior retângulo no histograma especificado. Lembre-se que esse retângulo deve estar alinhado com a base do histograma.;True;7 / 10;1049;311;29.65%
1684;Maratona Doce;Ad-Hoc;6;"É hora das maratonas de corrida na Terra de Ooo novamente. Princesa Jujaba tem um mapa do reino doce, e agora ela tem que preparar as ruas para receber as competições.

Sua tarefa é a seguinte: ela precisa separar as ruas do reino em circuitos disjuntos, ou seja, vários caminhos disjuntos que começam e terminam no mesmo local. Cada rua deve ser utilizada em exatamente um circuito, ou então uma grande fúria cairá sobre o reino. Ela não importa o número de circuitos gerados, contanto que exista pelo menos um, uma vez que a maratona pode ser ajustada de acordo com os recursos disponíveis.

Jujuba acredita que, se qualquer tarefa é possível, ela pode fazê-lo. Assim, a pergunta é: podem ruas do reino se dividir em circuitos disjuntos?";"A primeira linha contém um número T (1 ≤ T ≤ 100), indicando que se seguirão muitos casos de teste.

Cada teste começa com um número, N (0 ≤ N ≤ 104), indicando o número de locais no reino, e M (0 ≤ M ≤ 105), o número de ruas. As seguintes linhas M contém dois números inteiros, a e b (0 ≤ a, b ​​≤ N-1), indicando que existe uma rua entre o local a e b. Pode haver ruas que ligam um local a si mesmo, e pode haver mais de uma rua que liga dois locais.";Imprima Yes, se a tarefa é possível, e No caso contrário.;False;6 / 10;244;123;50.41%
1685;Praça de Daniel;Paradigmas;9;"Daniel é um engenheiro civil, que foi atribuído a encontrar possíveis locais para a construção de uma praça, no entanto, a pedido da população local para a construção da praça, nenhuma árvore deve ser cortada.
                    Daniel tem imagens de satélite do lugar, a necessidade de maximizar a área da praça e relatar suas possíveis localizações. Você poderia ajudar?";"A primeira linha contém a quantidade de casos tests T (T <= 40). 
                     A segunda linha contém dois números inteiros n e m (1 <= n, m <= 1000), a altura e a largura da imagem.

                    As seguintes linhas n contém as informações da imagem, onde "" * "" representa terras ocupadas por árvores e "" . "" Representa terra livre. Há pelo menos um "" . "" Na imagem.";"Para cada caso teste, imprima o lado maximun da praça seguido pela lista do ponto superior esquerdo de cada praça na imagem (organizado por linha e em caso de empate para a coluna). Verifique a amostra para mais detalhes.
                     Não imprima linha em branco entre dois casos testes.";False;9 / 10;231;88;38.10%
1686;Sequência de Palíndromos;Strings;10;"Dada uma string s[1..N], definimos uma sequência de palíndromos de tamanho p e deslocamento
                       d (1 <= p <= d), formando-se k (k >= 1) substrings disjuntas em s (cada sequência sendo um palíndromo
                       de tamanho p) e com distâncida d entre caracteres nos diferentes palíndromos.
                       
                    Formalmente, essas sequências disjuntas em S formam um conjunto : A= (s[i..i+p-1], s[i+d..i+d+p-1], s[i+2d..i+2d+p-1], ...)
                        onde cada elemento de A é um palíndromo de tamanho p. Lembre-se que um palíndromo é uma sequência que pode ser
                       lida do mesmo jeito do começo para o fim e do fim para o começo.

     
                    O valor de uma sequência de palíndromos é o número total de caracteres usados de S (Se a sequência de k palíndromos
                       de tamanho p, seu valor será k*p).
                    
                    Fixado um deslocamento D e dada uma string S, calcule a sequência de palíndromos de maior valor contida em S";"Cada entrada é descrita por 2 linhas. A primeira linha contém dois inteiros N e D (1 <= N <=10^5), 1 <= D <=10^5) representando, respectivamente, o tamanho da string e o valor do deslocamento. A segunda linha contém N caracteres minúsculos formando a string S.

                    A última entrada contém dois zeros.";Para cada caso de teste imprima uma linha com o valor máximo de uma seqüência de palíndromos com deslocamento D na string S.;False;10 / 10;156;13;8.33%
1687;Destrave o Celular;Paradigmas;9;"Henrique trabalhou muito durante as últimas férias ajudando seus amigos em problemas de matemática. Ele usou o dinheiro que ganhou para comprar um smartphone. Ele se interessou bastante no sistema de trava do seu celular.
                    O sistema consiste de um grid N por N de pontos e para destravá-lo é preciso desenhar um padrão que passa por exatamente P pontos. Passar por um mesmo ponto mais de uma vez é permitido, mas tais repetições não podem acontecer seguidamente (um movimento que vai de um ponto a ele mesmo não é permitido). Pode-se ir diretamente de um ponto X para outro ponto Y se o segmento que conecta X e Y não passa por nenhum outro ponto.

                    

                    Henrique trabalhou bastante para comprar seu celular e quer ter certeza de que ninguém descobrirá seu padrão de destravamento. Ele quer saber quantos padrões diferentes existem.
                     Dois padrões são considerados o mesmo se e somente se começam no mesmo ponto e seguem uma mesma sequência de movimentos.";A entrada consiste de vários casos de teste. Cada caso contém dois números em uma única linha: N (2 ≤ N ≤ 15) e P (1 ≤ P ≤ 105). A última linha da entrada contém dois 0, caso que não deve ser processado.;Para cada caso de teste você deve imprimir uma única linha contendo o número de possíveis padrões de destravamento. Como este número pode ser grande, imprima seu resto quando dividido por 1300031.;True;9 / 10;279;113;40.50%
1688;Nim Intergalático;Matemática;7;"Durante sua última visita ao planeta Tatooine, Han Solo foi capturado por mercenários de Jabba, the Hutt e levado ao seu palácio. Jabba, sabendo que Solo não tem dinheiro para pagar sua dívida propôs um acordo. Ambos iriam disputar uma partida de Nim Intergalático e, se Han vencesse sua dívida estaria paga, caso contrário, sua dívida seria duplicada.

                    O Nim Intergalático é uma variação do conhecido jogo de Nim, onde pedras são arrumadas em colunas e em cada rodada um jogador tem que remover uma ou mais pedras de uma das colunas. O jogador que não puder realizar mais movimentos é considerado o perdedor. No caso do Nim Intergalático um dos jogadores (nesse caso Jabba) escolhe um número N (N <= 10^18) e as pedras são colocadas em N colunas sendo que a i-ésima coluna contém i pedras (primeira coluna com 1 pedra, segunda coluna com 2 pedras, e assim por diante).

                    Tendo vasto conhecimento sobre esse tipo de jogos, e sabendo que quem faz o primeiro movimento (nesse caso Jabba) tem maior chance de ganhar, Han sugeriu uma pequena modificação no jogo. Ele poderia escolher três inteiros A, B e K e adicionar K pedras a todas as colunas entre A e B inclusive. Jabba aceitou sua proposta mas com uma limitação: o conselheiro de Jabba vai considerar Q possíveis operações deste tipo e Solo deve aplicar cada uma destas operações independentemente ao jogo original. Como Han não está acompanhado de seu fiel companheiro Chewbacca (que costuma ajuda-lo nessas situações), ele pediu para você ajuda-lo a vencer Jabba.";"A entrada contém vários casos de teste e termina com EOF.
                    
                    A primeira linha do teste consiste de dois inteiros N (N <= 1018) e Q (Q <= 105), o número escolhido por Jabba e a quantidade de operações na lista do conselheiro respectivamente.

                    As Q próximas linhas consistirão de 3 inteiros A, B (1 <= A <= B <= N) e K (-A <= K <= 1018) descrevendo as operações escolhidas pelo conselheiro.";Para cada caso de teste, a saída consiste em Q linhas contendo o vencedor do jogo (considerando que ambos jogam de forma ótima) para cada uma das Q operações sugeridas pelo conselheiro.;False;7 / 10;108;42;38.89%
1689;Radares;Paradigmas;7;"Antonio, prefeito de Rio Pequeno, está querendo implantar radares na estrada principal da cidade. 

                    Para isso, ele tem uma lista de possíveis pontos onde os radares podem ser instalados. Cada radar tem um lucro associado. Sabe-se que a distância entre dois radares não pode ser inferior a  K, de acordo com a legislação de trânsito. 

                    Dada a lista de pontos e os seus lucros, a sua tarefa é ajudar Antonio a escolher os pontos para instalar os radares de modo que o lucro seja maximizado. Printe o lucro máximo!

                    Por exemplo, imagine radares nas posições 1, 2 and 3, com lucro 2, 5 e 3, respectivamente. Se K for igual a 2, uma solução ótima seria escolher os radares nas posições 1 e 3, somando 5 de lucro.";"A primeira linha conterá um número T (1 ≤ T ≤ 100), indicando a quantidade de casos de teste.

                    Para cada caso de teste, a primeira linha conterá um inteiro N (1 ≤ N ≤ 106) e K (1 ≤ K ≤ 106), o número de radares e a menor distância entre 2 radares, respectivamente. A próxima linha conterá N inteiros separados por espaços, indo de 1 até 106, indicando a posição dos radares, em ordem crescente. A última linha conterá N inteiros positivos separados por espaços, indo de 1 a 103, indicando o lucro de cada radar.";Para cada caso de teste imprima um único número, a resposta para o problema.;False;7 / 10;1354;406;29.99%
1690;Soma de Sobconjuntos;Paradigmas;7;"Você tem em mãos um array de números inteiros positivos, não necessariamente distintos.

                    Vamos escolher alguns dos números no array, isto é, um subconjunto não vazio do array original. O valor de um subconjunto é a soma dos elementos contidos nele.

                    Qual é o menor valor de um subconjunto que não pode ser gerado?

                    
                    Por exemplo, pegue o array [2, 1, 5]. Os seguintes subconjuntos pode ser formados: [1], [2], [5], [1, 2], [1, 5], [2, 5], [1, 2, 5]. Os seus valores são os seguintes: 1, 2, 5, 3, 6, 7, 8, respectivamente. O valor menor do subconjunto que não pode ser gerado, neste caso, é 4.";"A primeira linha contém um número T (1 ≤ T ≤ 1000), indicando que se seguirão T casos de teste.

                    Para cada teste, a primeira linha conterá um número N (1 ≤ N ≤ 10000), indicando a quantidade de números que existem no array. A linha seguinte conterá N inteiros positivos separados por espaços, entre 1 a 109.";Para cada caso de teste, imprima uma única linha, a resposta para o problema.;False;7 / 10;794;256;32.24%
1691;Super Circunferência;Ad-Hoc;9;"Skyrk desenvolveu um jogo chamado Super Circunferência. Sua simplicidade é contrastada por sua grande dificuldade. O objetivo de Super Circunferência é controlar um ponto que se desloca ao redor uma circunferência central tentando evitar contato com as paredes circulares que se aproximam.

                    

                    O ponto preto circula ao redor da circunferência vermelha a uma velocidade de uma revolução completa por segundo. Um nível tem vários conjuntos de paredes circulares que se aproximam, com as quais o ponto deve evitar o contato. Uma parede se aproximando pode ser interpretada como um setor de uma circunferência. O conjunto de paredes se aproxima do centro na velocidade de um conjunto a cada P segundos. O jogador consegue vencer se ele desviar de todas as paredes com sucesso.

                    Um novo nível foi criado com N conjuntos de paredes. Para ajustar a sua dificuldade corretamente, você deve encontrar o menor valor de P que ainda torne o nível possível de ser completado.";"A primeira linha contém T (T ≤ 100) – o número de casos teste. Após essa linha, haverá T casos teste. A primeira linha de um caso teste contém um inteiro N (1 ≤ N ≤ 104) – o número de conjuntos de paredes. As próximas N linhas contém a descrição de um conjunto de paredes da seguinte forma: Primeiro o número K (0 ≤ K ≤ 10) – o número de paredes que esse conjunto possui. Após isso, K tuplas de números de ponto flutuante da seguinte forma: X,Y (0 ≤ X, Y < 2π) – A parede começa no ângulo X e estende ao longo da circunferência em sentido horário até o ângulo Y. Paredes do mesmo conjunto nunca se intersectam. Nenhum dos conjuntos será uma circunferência completa. Quando o jogo começa, o primeiro conjunto atinge o centro após P segundos e o ponto preto pode começar em qualquer posição.

                    A figura acima ilustra o primeiro teste de exemplo.";"Para cada caso teste imprima uma única linha com ""Case #A: B"" onde A é o número do caso teste (começando de 1) e B é o menor P possível de forma que o nível ainda seja possível de ser completado. B deve ser arredondado para 4 dígitos após o ponto decimal. A entrada será de tal forma que erros até 10-5 ainda darão a resposta correta.";True;9 / 10;29;8;27.59%
1692;Curo Ataque;Grafos;10;"Uma nova rede universitária é composta por N servidores distribuídos em todo o campus , cada par de servidor é ligado por um caminho único feito de fios e são N - 1 fios ao todo, mas o Departamento de Informática esqueceu de atribuir os servidores para o instituto de matemática.

                Um estudante de matemática preguiçoso, chamado Curo , está se sentindo ressentido, porque agora ele não pode executar seus programas em uma máquina poderosa. Então , ele decidiu implantar um vírus, feito por ele durante seu tempo livre, porque ele odeia seus cursos de matemática e prefere codificar algo mais divertido, ao invés de escrever números e símbolos intediantes.

                Curo quer infectar o número máximo de servidores e ter sua vingança contra o departamento de Informática. Ele preparou uma simulação do ataque, mas seu computador não é poderoso o suficiente para executá-lo . Assim, ele precisa de sua ajuda para esta tarefa, mas primeiro você tem que saber como o vírus funciona.

                Se o vírus infectar um servidor, os servidores adjacentes serão infectados também. Além disso, o programa tem uma variável pseudo-aleatória chamada Kuro-number. 

                No final do processo de infecção, a maior distância entre dois servidores infectados deve ser o Kuro-number.

                Dada uma rede de computadores e um Kuro-number você deve obter, se existe, o número máximo de servidores infectados, caso contrário, você deve imprimir ""Impossible Revenge!""";Existem vários testes, a primeira linha de cada teste contém dois inteiros N e K --- Número de servidores na rede e o Kuro-number (2 ≤ K <N ≤ 1000). As próxima N - 1 linhas contém a descrição dos N - 1 fios dessa rede --- Cada linha contém um par (u, v) significa que há uma conexão entre o servidor u e o servidor v (1 ≤ u, v ≤ N).;"Imprimir se existe, o número máximo de servidores infectados. Caso contrário, você deve imprimir ""Impossible Revenge!"".";False;10 / 10;258;32;12.40%
1693;Apenas Outro Problema de Física;Geometria Computacional;9;"Rafael Richman é um garoto muito rico. Ele está prestes a completar 34 anos e pediu de aniversário uma arena de água para brincar com seus amigos. A arena consiste de uma campo circular plano de raio R. No centro do campo, existe uma torre de altura H. No topo da torre, existe um canhão que atira água com velocidade inicial V. Para deixar as coisas mais interessantes, sua mãe Matilda Richman comprou um dispositivo que altera a gravidade G da arena.

                    Dadas todas as informações sobre a arena, sua tarefa é determinar se a água lançada pelo canhão consegue atravessar campo.

                    Você pode assumir que a diferença entre o alcance do canhão e o raio do campo é sempre maior que 0.01.

                    Rafael é um amante da física, e pode dar-lhe as equações necessárias para resolver o problema:

                    
                    X(t) = Vcos(a)t
                    Y(t) = Vsen(a)t - Gt²/2

                    Onde X e Y são as coordenadas da água em função de t, t é o tempo decorrido desde o lançamento da água pelo canhão e ""a"" é o ângulo do lançamento com a horizontal.";Existem vários casos testes. Cada caso de teste consiste de uma única linha. Cada linha contém 4 inteiros, R, H, V, e G. Todos os valores dados são maiores que 0 e menores ou iguais a 10000. Todas as distâncias são dadas em metros e todas as unidades de tempo em segundos.;Para cada caso de teste, imprima uma única linha contendo 'Y' se o alcance do canhão é maior que o raio do campo, ou 'N' caso contrário.;False;9 / 10;626;138;22.04%
1694;Loteria;Matemática;7;"Pinkie Pie está se sentindo com sorte. Ela está indo para a lotérica de sua cidade para fazer uma aposta e tentar a sorte.

                    O bilhete da aposta consiste em uma matriz de N linhas por M colunas. As casas são numeradas de 0 a N*M-1 de forma que o número da casa da r-ésima linha e c-ésima coluna (indexadas a partir do 0) é r * M + c. Uma aposta consiste em escolher K números distintos dentre os disponíveis.

                    

                    Pinkie pressente que os números vencedores estarão próximos uns aos outros, então ela decide escolher números que estão ou todos na mesma linha ou todos na mesma coluna. Pinkie também acredita que números primos trazem má sorte, e não fará nenhuma aposta que contém ao menos um número primo.

                    Twilight passou em frente à lotéria e encontrou Pinkie incapaz de chegar a uma decisão. Querendo testar suas habilidades matemáticas, ela decidiu, enquanto Pinkie fazia sua escolha, calcular quantas apostas diferentes Pinkie Pie poderia fazer. Duas apostas são consideradas distintas se existe um elemento presente em uma aposta e ausente na outra.";"Existem diversos casos testes. Cada caso de teste consiste de uma única linha contendo três inteiros N, M e K (1 ≤ N, M ≤ 50; 1 ≤ K ≤ 10). O último caso de teste é seguido de uma linha contendo três zeros.";Para cada caso de teste, imprima uma única linha contendo o número de apostas diferentes que Pinkie Pie pode fazer, de forma que os números estejam todos ou na mesma linha ou na mesma coluna, e que nenhum número primo seja escolhido. Um número primo é um número natural maior que 1 que não possui divisores positivos além de 1 e si mesmo.;True;7 / 10;547;205;37.48%
1695;Ordenando Árvores;Grafos;9;"É sabido que o Conde de Limãograb é o cara mais estranho no reino doce, mas a sua mais recente obsessão foi longe demais: ele está tentando descobrir a ordem de todas as coisas!

                    Até agora ele tem tido sucesso em um monte de problemas de ordenação, mas ele está ficando louco, porque ele encontrou um problema que não pode resolver: dada uma árvore com raiz que consiste de N vértices, onde cada vértice i tem um valor Vi, ele tentou descobrir a ordem crescente de todos os valores na subárvore com raiz no vértice X.

                    Ele resolveu facilmente para algumas sub-árvores, mas depois ele se cansou e notou que ninguém seria capaz de realizar essa tarefa em curto espaço de tempo. A fim de aliviar sua frustração, ele pediu-lhe para responder a M consultas: para um dado vértice X lhe dizer qual é o K-ésimo menor valor da subárvore com raiz no vértice X.";"A primeira linha contém um número inteiro T (1 ≤ T ≤ 35), o número de casos de teste.

                    A primeira linha de cada caso de teste contém dois inteiros N e M (1 ≤ N, M ≤ 105), o número de vértices e o número de consultas, respectivamente.

                    Vamos supor que os vértices das árvores são identificados por inteiros de 1 a N, e que a raiz da árvore é o vértice 1. A próxima linha contém uma seqüência de números inteiros V1, V2, ..., VN (1 ≤ Vi ≤ 109), os valores de cada vértice.

                    Cada uma das próximas N - 1 linhas contém dois inteiros Ai e Bi (1 ≤ Ai, Bi ≤ N), os pares de vértices conectados por uma aresta na árvore. A árvore é conectada e válida.

                    As próximas M linhas contêm as consultas, cada linha contendo dois inteiros X e K (1 ≤ X, Ki ≤ N), que é, encontrar o K-ésimo menor valor na subárvore com raiz em X. É garantido que cada consulta é válida.";Para cada caso de teste imprima uma única linha contendo as respostas para as perguntas na ordem em que aparecem na entrada, cada resposta deve ser seguida por um único espaço (mesmo para a última consulta).;False;9 / 10;135;56;41.48%
1696;Brincando Com Operadores;Estruturas e Bibliotecas;10;"Rusa e Sanches são amigos na escola primária. Este mês eles estão aprendendo como somar e subtrair números inteiros. O professor de matemática deles deu um bom exercício para praticarem estes novos operadores. O exercício é um jogo (para aumentar o interesse dos alunos). É necessário que dois alunos joguem juntos, e como Rusa e Sanches estão sempre fazendo as tarefas juntos, dessa vez não será diferente. O professor deu a eles várias sequências e os movimentos que eles podem realizar são:
                    
                    - Primeiro jogador: Gerar uma nova sequência com a soma do primeiro e segundo números, do terceiro e quarto, do quinto e sexto, etc.
                    
                    - Segundo jogador: Gerar uma nova sequência com a subtração do primeiro e segundo números (nessa ordem), do terceiro e quarto, do quinto e sexto, etc.

                
                    Se o tamanho da sequência for ímpar, o último número não deve ser modificado. Os jogadores alternam jogadas. O jogo continua até que reste apenas um número, chamado último número. Se ele é ímpar, o primeiro jogador vence. Caso contrário, o segundo vence. Como você pode ver o jogo é previsível, eles não podem alterar o resultado final dado uma sequência inicial. Entretanto, o professor também pediu para eles calcularem o último número da sequência depois de uma substituição num elemento da sequência inicial. Haverá várias substituições, e para cada uma eles tem que jogar novamente. Estas substituições são cumulativas. Ambos precisam aprender a somar e subtrair. Então, no primeiro caso de teste, Rusa será o primeiro jogador e Sanches, o segundo. No segundo caso de teste, eles trocam de ordem, i.e., Sanches é o primeiro jogador e Rusa, o segundo. No terceiro eles mudam de novo, e assim por diante. O professor deu muitas sequências para Rusa e Sanches. Eles já estão chateados do exercício porque eles já aprenderam a lição. Eles precisam terminar todos jogos até o final da semana e eles estão pedindo a você para ajudar com isso.
                    
                    Por exemplo, vamos assumir que a sequência inicial é (4, 2, 3, 5, 1, 6, 10, 2). Então, os movimentos são: (4, 2, 3, 5, 1, 6, 10, 2) → (6, 8, 7, 12) → (-2, -5) → (-7). O último número é -7, e o vencedor é Rusa, porque -7 é impar, e este é o primeiro caso de teste. Vejamos um segundo exemplo, vamos assumir que a sequência inicial é (4, 2, 3). Então, os movimentos são: (4, 2, 3) → (6, 3) → (3). O último número é 3, e o vencedor é Sanches, porque 3 é impar e este é o segundo caso de teste.";A primeira linha conterá um número T (1 ≤ T ≤ 100), quantos casos de teste seguem. Para cada caso de teste, a primeira linha conterá um número N (1 ≤ N ≤ 104) e Q (0 ≤ Q ≤ 104), o número de inteiros na sequência inicial e o número de substituições, respectivamente. A próxima linha contém N inteiros da sequência S1, S2, …, SN (-104 ≤ Si ≤ 104). As próxima  Q linhas contém A (1 ≤ A ≤ N ) e B (-104 ≤ B ≤ 104), que significa que o elemento SA da sequência inicial é substituído por B (SA = B).;Para cada caso de teste imprima Q + 1 linhas. Na primeira linha, imprima o último número do jogo e o vencedor da sequência inicial e nas próximas Q linhas, o útimo número e o vencedor depois de cada substituição.;False;10 / 10;321;82;25.55%
1697;Jaida e o Jogo Multiplicativo;Matemática;9;"Jaida adora inteiros positivos. Agora ela está jogando um jogo chamado ""jogo de multiplicar"".
                    
                    ""Jogo de multiplicar"" é um jogo educativo no qual você tem uma lista de N números. Você pode escolher qualquer par desses números e adicionar o resultado da multiplicação deles na lista. Você pode fazer essa operação quantas vezes quiser.

                    Jaida quer que a lista contenha todos os números de 1 a X (mas pode haver repetições ou números maiores). Ajude a pequena Jaida dizendo-a qual é o maior valor de X que ela pode obter.";"A primeira linha da entrada contém um inteiro T que representa o número de casos de teste. Cada caso de teste é descrito em 2 linhas:

                    A primeira linha contém o número N (0 < N <= 106) como explicado acima. A segunda linha contém N inteiros positivos ai, que são os números iniciais da lista de Jaida (0 < ai <= 109).";Para cada caso de teste imprima uma linha contendo o maior valor de X que Jaida pode obter. Se for impossível, imprima 0.;False;9 / 10;1831;380;20.75%
1698;Metrô Brasileiro;Grafos;10;Um grande terremoto destruiu todo o sistema de metrô de São Paulo, porém o Brasil irá ser o anfitrião da Copa do Mundo, de forma que o Governo resolveu tomar duas medidas: A primeira é comprar um sistema de teletransporte entre duas estações de metrô, a segunda é, com a intenção de evitar custos desnecessários, reconstruir algumas rotas de metrô de forma que exista exatamente um caminho entre qualquer par de estações de metrô. Uma configuração é um possível sistema de metrô resultante após as medidas do Governo. Dado o antigo sistema de metrô, determine qual o par de cidades que, se conectadas pelo sistema de teletransporte, geram o número máximo de possíveis configurações.;"A entrada consiste de vários casos de teste e termina com final de arquivo (EOF).
                    
                    Na primeira linha de cada caso de teste temos dois inteiros N e M (1 < N <= 12 e N - 1 <= M < N*(N - 1)/2), as próximas M linhas contém inteiros A e B (0 <= A, B <= N - 1), significando que as estações A e B estavam conectadas por uma rota antes do terremoto.";Para cada caso de teste, imprima dois números A e B (A < B) indicando os índices das duas estações que deverão ser conectadas pelo sistema de teletransporte para que o número de configurações possíveis seja o maior possível. Em caso de múltiplas respostas possíveis, imprima a lexicograficamente menor.;False;10 / 10;103;13;12.62%
1699;Jogo Entediante;Ad-Hoc;8;Annie e Garen adoram jogos de computador mas eles não são muito bons em contar. Por isso, eles precisam da sua ajuda nesse jogo. O jogo consiste de n caixas, cada uma com um rótulo x. Em cada caixa são colocadas d bolas, onde d é o número de divisores positivos de x, o rótulo da caixa. Em cada turno, um jogador escolhe uma bola de qualquer caixa e a remove do jogo. O jogador que fizer o último movimento é o vencedor. Dados n e x para todas as caixas, eles querem saber quem vai vencer. Annie sempre é a primeira a jogar.;A entrada consiste de vários casos de teste. Cada caso de teste é descrito em duas linhas. A primeira linha contém o inteiro n (1 ≤ n ≤ 105), representando o número de caixas. A segunda linha contém n inteiros, onde o i-ésimo número representa o rótulo x (1 ≤ x ≤ 1012) da i-ésima caixa. O último caso de teste é seguido por uma linha contendo um zero.;Para cada caso de teste imprima, em uma única linha, Annie ou Garen, o vencedor do jogo.;False;8 / 10;822;253;30.78%
1700;Antenas;Paradigmas;9;"A professora do jardim de infância pediu como tarefa de casa que a turma montasse um robô utilizando apenas palitos de dente e cola. Joãozinho decidiu que para diferenciar seu robô dos robôs dos demais alunos, ele faria as antenas de seu robô do maior tamanho possível. Quando Joãozinho estava montando seu robô, os palitos acabaram, exatamente quando faltava apenas montar as duas antenas, e como já era tarde, não havia como comprar mais palitos. Joãozinho quebrou sua cabeça pensando numa forma de terminar seu robô, até que se lembrou que seu vizinho, seu Zé, era dono de um bar, e talvez pudesse lhe arrumar alguns palitos.

                    Infelizmente Joãozinho não estava no seu dia de sorte, quando ele chegou no bar, seu Zé lhe disse que também estava sem palitos, e os únicos palitos que haviam no bar, eram os palitos usados pelos clientes do dia, que estavam esparramados pelo chão do bar, e muitos deles sujos e quebrados. Mas, como Joãozinho é um menino bastante insistente e um pouco porquinho, ele resolveu que iria usar esses palitos mesmo, e combinou com seu Zé que varreria o chão do bar em troca de todos os palitos que encontrasse. 

                     Como já era madrugada quando Joãozinho acabou de varrer o chão ele pediu a sua ajuda para determinar qual o maior par de antenas, de mesmo tamanho, que poderia ser montado.

                    Dado o número N de palitos encontrados por Joãozinho e o tamanho de cada um desses palitos, determine o tamanho do maior par de antenas, de mesmo tamanho, que podem ser montadas colando qualquer número de palitos pelas suas extremidades.";"A entrada é composta de diversas instâncias.

                    A primeira linha de cada instância contém um inteiro N ( 1 <= N <= 1000 ), o número de palitos encontrados.

                    A segunda linha de cada instância contém uma sequência de N inteiros, S1, ..., Sn, onde Si (1 <= Si <= 100)
                    é o tamanho do iésimo palito encontrado por Joãozinho.

                    O final da entrada é sinalizado por um caso com N = 0. Que não deve ser processado.";"Para cada caso de teste imprima em uma única linha o tamanho do maior par de antenas, de mesmo tamanho, que
                    podem ser construídas utilizando qualquer número de palitos.";False;9 / 10;999;198;19.82%
1701;Sequência de Fibo;Estruturas e Bibliotecas;9;"Fibo é um grande fã de números, especialmente números grandes. Ele ama sequências que crescem rápido, sua favorita é a tão famosa: sequência de Fibonacci. Um dia ele decidiu criar uma nova sequência usando a sua favorita. Sua nova sequência é criada multiplicando números consecutivos da sequência de Fibonacci. A partir de números de Fibonacci de índices A e B. O primeiro elemento de sua nova sequência será o número de fibonacci de índice A multiplicado pelo número de Fibonacci de índice B, o segundo número é o número de Fibonacci de índice A+1 multiplicado pelo número de Fibonacci de índice B+1 e assim por diante. Ele sabe como obter cada elemento dessa nova sequência eficientemente, mas ele gostaria de calcular outra coisa. Ele gostaria de calcular a soma dos N primeiros números de sua nova sequência.Você pode ajudá-lo?

                     Obs: Fibonnaci(0) = 0 e Fibonnaci(1) = 1";A entra contém diversos casos testes. Cada caso teste contém três inteiros, A, B e N (1 <= A, B, N <= 1000000000), os significados foram explicados acima. A entrada termina com três zeros.;Para cada caso teste você deve imprimir um número, a soma dos N primeiros elementos da sequência de Fibo. Esse número pode ser muito grande, então você deve imprimi-lo MOD 1000000007.;False;9 / 10;371;90;24.26%
1702;Colorindo Grafos;Grafos;6;Seja G um grafo simples com N vértices coloridos e M arestas. Nós desejamos saber se é possível adicionar exatamente P arestas em G de tal forma que o grafo resultante seja simples, conexo e nenhuma aresta conecte dois vértices da mesma cor.;A entrada contém múltiplos casos testes. A primeira linha contém a quantidade de casos testes T (T < 70). Cada caso teste começa com 4 inteiros na seguinte ordem: o número de vértices N (1 <= N <= 10^3), o número de arestas no grafo original M (0 <= M <= 10^5), o número de arestas a serem inseridas P (0 <= P <= 10^6) e o número de cores K (1 <= K <= 10^3). A linha seguinte contém N números Xi indicando a cor do i-ésimo vértice (1 <= Xi <= K). As M seguintes linhas contém um par de inteiros (V_i, V_j) indicando a presença de uma aresta entre os vértices V_i e V_j. (1 <= V_i,V_j <= N).;"Para cada caso teste, imprima uma única lina com ""Y"" (sem aspas) se é possível construir tal grafo ou ""N"" caso contrário.";False;6 / 10;256;99;38.67%
1703;Pulando Pedras;Matemática;9;"Petr está jogando um jogo chamada ""Pulando Pedras"".

                    Nesse jogo, existem N lugares em uma linha numerados de 1 a N. Em cada lugar tem uma pedra com um número escrito em cima. Os números vão de 1 a N e são todos diferentes.

                    Petr começa no 1º lugar e realiza K passos. Em cada passo, ele olha o número escrito na pedra atual e pula para o lugar correspondente a esse número.  

                    Fixado os inteiros N e K, determine entre todas as possíveis configurações a probabilidade que ele retorne ao 1º lugar após K passos. Assuma que todas as configurações são igualmente prováveis.";Você receberá um inteiro T, o número de casos testes. As próximas T linhas contém N e K (1 <= N,K <= 10^5).;"Para cada caso teste imprima uma única linha com a resposta. Sua resposta será considerada correta se tiver um erro absoluto
                    menor que 0.00001. 
                    Obs.: Seguindo o exemplo de entrada, para o segundo caso de teste (3 1) teríamos as seguintes possibilidades: 
                    1 2 3 
                    1 3 2 
                    2 1 3 
                    2 3 1 
                    3 1 2 
                    3 2 1 
                    Na primeira e segunda configurações, nós terminamos no lugar 1 após 1 passo.";False;9 / 10;144;40;27.78%
1704;Arrumando as Tarefas;Estruturas e Bibliotecas;8;"Você trabalha para uma empresa muito grande e que tem uma cultura move-fast. Hoje, um dos seus colegas ficou doente e você precisa repor o trabalho dele.

                    Seu chefe disse que você tem apenas um computador para realizar algumas tarefas. Cada uma delas dá v de lucro e deve ser terminada até t horas a partir de agora. Após esse tempo, não pode ser mais realizada e não possui nenhum valor. O computador realiza exatamente uma tarefa por hora. 

                    Você deseja impressionar o seu chefe e assim ganhar uma promoção. Para isso, você pretende usar suas habilidades de programador e selecionar quais tarefas executar de tal forma a minimizar a quantidade de dinheiro perdida.";A entrada é composta por diversos casos teste e termina com o final do arquivo. Cada um descreve uma lista de tarefas e começa com dois inteiros N (1 ≤ N) e H (H ≤ 1000), o número de tarefas e a quantidade de horas disponível do computador, respectivamente. As próximas N linhas contém cada uma v (1 ≤v ≤ 1000) e t (1 ≤ t ≤ H) como descrito acima.;Para cada teste imprima uma única linha representando a menor quantidade de dinheiro perdida.;False;8 / 10;3808;713;18.72%
1705;Apaixonado por Binário;Matemática;10;"Para provar suar habilidade científicas a princesa Bubblegum aprendeu a programar usando BMO (O melhor computador no reinado Doce) e como todo programador ela se apaixonou por números binários.

                    Por seu vício em números binários ela ama números decimais que parecem como um número binário (i.e. um número decimal que contém apenas dígitos 0 e 1, por exemplo 101) então dado um número decimal N ela deseja achar um múltiplo desse número que pareça um número binário, mas para alguns números estava levando muito tempo para achar esse múltiplo, mesmo com a ajuda do BMO. Por causa do seu vício por resolver problemas, ela não estava fazendo nada enquanto não acha esse múltiplo. Situação perfeita para o Conde de Lemongrab, que tomou conta do Reino Doce. Como Finn e Jake, os heróis do reino Doce, não podem fazer nada contra o Conde e não sabem nada sobre múltiplos, eles pediram para achar os múltiplos e assim salvar o reino.";A entrada contém até 2*10^5 linhas, cada linha com um inteiro N (0 < N < 10^12), o número que a princesa Bubblegum deseja achar o múltiplo M (M != 0), este número deve ser menor que 10^12, caso contrário não cabe na arquitetura do BMO.;Imprima um único inteiro por linha, caso exista diversos múltiplos imprima o menor deles. Se não existir solução imprima -1;False;10 / 10;1337;133;9.95%
1706;Pontes Mágicas;Grafos;6;"Como acontece em todo réveillon, o reino Doce organizará uma incrível festa da virada. A princesa Bubblegum (PB) pediu para construir diversas torres musicais, com pontes conectando essas. Uma torre musical é uma nova ideia de PB e funciona assim: cada torre pode tocar duas notas musicais A e B. Elas começam com uma nota aleatória (A ou B) e o objetivo é fazer todas as torres tocarem a nota A. Aí que as pontes entram, se você tocar a ponte com uma varinha doce mágica, as notas das duas torres magicais conectadas por essa ponte mudarão.

                    Agora PB não sabe se é possível organizar o festival cumprindo tal objetivo. Ela deu aos heróis Finn e Jake o mapa com as torres musicais, as conexões das pontes e o som inicial de cada torre e perguntou a eles se seria possível organizar tal festival. Como Finn e Jake não sabem muito sobre ciência, eles pediram para você resolver essa tarefa.";Terão diversos casos testes. Cada caso teste contém dois inteiros: N (1 ≤ N ≤ 1000) e M (1 ≤ M ≤ 4000). A próxima linha contém N letras, indicando o som inicial da i-ésima torre. As próximas M linhas, contém dois inteiros a (1 ≤ a) e b (b ≤ N e a != b ), indicando que existe uma ponte conectando a torre a e a torre b. A entrada termina com o final do arquivo.;Para cada caso você deve imprimir Y se for possível o festival acontecer ou N caso contrário.;False;6 / 10;473;179;37.84%
1707;Jogo com Números;Paradigmas;8;"Kirito ama jogos, especialmente aqueles envolvendo números ímpares. Em um dia chuvoso, sem poder sair para brincar com os amigos, ele decidiu brincar sozinho. Ele escreveu números aleatórios em papéis e colocou dentro de um saco. Então misturou tudo e pegou 2 números (x,y) e se perguntou: ""Qual a soma dos dígitos decimais dos números ímpares que estão no intervalo [min(x,y), max(x,y)] (inclui os limites)?""

                    Agora sua tarefa é ajudar Kirito em seu jogo respondendo suas perguntas.";A entrada consiste de diversos casos testes e termina com EOF. Cada caso de teste consiste de 2 inteiros x e y, o par de números que Kirito tirou do saco (1 ≤ x, y ≤ 10^9);Imprima um único inteiro por linha, a resposta da pergunta do Kirito.;False;8 / 10;439;111;25.28%
1708;Volta;Ad-Hoc;2;"No automobilismo é bastante comum que o líder de uma prova, em determinado momento, ultrapasse o último colocado. O líder, neste momento, está uma volta à frente do último colocado, que se torna, assim, um retardatário. Neste problema, dados os tempos que o piloto mais rápido e o piloto mais lento levam para completar uma volta, você deve determinar em que volta o último colocado se tornará um retardatário, ou seja, será ultrapassado pelo líder. Você deve considerar que, inicialmente, eles estão lado a lado, na linha de partida do circuito, ambos no início da volta de número 1 (a primeira volta da corrida); e que uma nova volta se inicia sempre depois que o líder cruza a linha de partida.";A única linha da entrada contém dois números inteiros X e Y (1 ≤ X < Y ≤ 10000), os tempos, em segundos, que o piloto mais rápido e o piloto mais lento levam para completar uma volta, respectivamente.;Seu programa deve produzir uma única linha, contendo um único inteiro: a volta em que o piloto mais lento se tornará um retardatário.;False;2 / 10;4406;2356;53.47%
1709;Baralho Embaralhado;Estruturas e Bibliotecas;2;"Um baralho contém um número par 2n de cartas a1, a2,..., a2n, todas distintas (a1 < a2 ... < a2n). O baralho encontra-se perfeitamente ordenado, ou seja, a primeira carta é a1, a segunda carta é a2, e assim por diante, até a última carta, que é a2n.

                    Um croupier então executa repetidamente um procedimento de embaralhar, que consiste de dois passos:

                    
                    	O baralho é divido ao meio;
                    	As cartas das duas metades são então intercaladas, de maneira que se a sequência de cartas do baralho no início do passo 1 é x1, x2, ..., x2n, então ao final do passo 2 a sequência de cartas se torna xn+1, x1, xn+2, x2,..., x2n, xn.
                    

                    Dado o número de cartas do baralho, escreva um programa que determine quantas vezes o procedimento de embaralhar descrito acima deve ser re
                        petido de forma que o baralho volte a ficar ordenado.";A única linha da entrada contém um inteiro par P (2 ≤ P ≤ 2 x 105 ), indicando o número de cartas do baralho (note que o valor P corresponde ao valor 2n na descrição acima).;Seu programa deve produzir uma única linha contendo um único inteiro, o número mínimo de vezes que o processo de embaralhamento deve ser repetido para que o baralho fique novamente ordenado.;False;2 / 10;2371;1205;50.82%
1710;Confederação;Ad-Hoc;6;"A Confederação Galática resolveu fazer uma reforma administrativa, para melhor distribuir os recursos de sua frota. Para isso, ela dividiu todo o espaço em regiões. Para definir as regiões, inicialmente um conjunto de planos infinitos foi especificado, e as regiões foram definidas pelos cortes desses planos. Note que algumas regiões são ilimitadas, mas que também podem existir regiões limitadas. O conjunto de planos foi escolhido de tal maneira que nenhum dos planos intercepta a órbita de um planeta, e portanto cada planeta transita por apenas uma região durante sua órbita (ou seja, um planeta dentro de uma região nunca cruzará um plano para outra região).
                    Sua tarefa consiste em determinar, dadas as equações dos planos e as posições dos planetas, quantos planetas existem na região com o maior número de planetas (em outras palavras, qual o número máximo de planetas dentro de uma região).";A primeira linha da entrada contém dois inteiros M (1 ≤ M ≤ 500) e N (1 ≤ N ≤ 10000), indicando respectivamente o número de planos e número de planetas. As M linhas seguintes contêm cada uma quatro inteiros A, B, C e D (−10000 ≤ A, B, C, D ≤ 10000), os coeficientes e o termo livre da equação Ax + By + Cz = D que define cada um dos planos. A seguir, cada uma das N linhas seguintes contém três inteiros X, Y e Z (−10000 ≤ X, Y, Z ≤ 10000), indicando a posição (X, Y, Z) de um planeta.;Seu programa deve produzir uma única linha contendo apenas um número inteiro, o número de planetas na região que contém o maior número de planetas.;False;6 / 10;794;364;45.84%
1711;Dona Minhoca;Grafos;6;"Dona Minhoca fica furiosa quando ouve as pessoas dizerem que minhocas são bichos palíndromes, nos quais não é possível distinguir a cabeça do rabo. Que infâmia!

                    Dona Minhoca vive em uma linda caverna, composta de salões e túneis. Cada túnel liga dois salões distintos e pode ser usado nas duas direções. Um “ciclo” na caverna é uma sequência de salões s1, s2, . . . , sn, sn+1 = s1 , tais que s i ≠ si+1 e (si, si+1) é um túnel, para 1 ≤ i ≤ n. A caverna de Dona Minhoca pode conter ciclos, mas cada salão faz parte de no máximo um ciclo da caverna. Os túneis e salões são estreitos, de forma que se uma parte do corpo de Dona Minhoca ocupa um túnel ou salão, não há espaço para Dona Minhoca entrar novamente por esse túnel ou salão.

                     Alguns salões da caverna têm acesso a partir da superfície. Dona Minhoca tem um mapa que descreve a caverna, informando para cada túnel o seu comprimento e quais dois salões o túnel liga. Dona Minhoca também é vaidosa e conhece o seu próprio comprimento.

                     Dona Minhoca quer saber, para os salões que têm acesso à superfície, se é possível entrar na caverna pelo salão, percorrer a menor distância possível dentro da caverna, e sair novamente pelo mesmo salão que entrou, sempre andando para a frente, sem nunca dar marcha-a-ré. Você pode ajudá-la?";"A primeira linha contém dois inteiros S (2 ≤ S ≤ 104 ) e T (1 ≤ T ≤ 2S) representando respectivamente o número de salões e o número de túneis da caverna. Os salões são identificados por inteiros de 1 a S. Cada uma das T linhas seguintes descreve um túnel e contém três inteiros A, B e C (1 ≤ A < B ≤ S; 1 ≤ C ≤ 100), onde A e B representam os salões ligados pelo túnel, e C representa o comprimento do túnel. Um salão é ligado por túneis a no máximo outros 100 salões e cada dois salões são ligados por no máximo um túnel. A próxima linha contém um inteiro Q (1 ≤ Q ≤ 100), que indica o número de consultas. Cada uma das Q linhas seguintes descreve uma consulta, e contém dois inteiros X (1 ≤ X ≤ S) e M (1 ≤ M ≤ 105 ), que indicam respectivamente o salão pelo qual Dona Minhoca quer entrar e o comprimento de Dona Minhoca.";Para cada consulta da entrada seu programa deve produzir apenas uma linha, contendo apenas um número inteiro, o comprimento do percurso mínimo que Dona Minhoca deve percorrer dentro da caverna para entrar e sair pelo salão indicado na consulta, sem dar marcha-a-ré. Se não for possível para Dona Minhoca entrar e sair sem dar marcha-a-ré, a linha deve conter o valor −1.;False;6 / 10;448;197;43.97%
1712;Ecologia;Ad-Hoc;10;"O reino da Poliminogônia passou recentemente uma lei ecológica que obriga todas as fazendas a preservar o máximo de árvores possível em uma porcentagem fixa da área da fazenda. Além disso, para que os animais silvestres possam se movimentar livremente, a área preservada deve ser conexa. As fazendas na Poliminogônia são sempre um reticulado de N × N quadrados de um hectare cada. A figura ao lado ilustra uma fazenda com N = 5. A área preservada deve cobrir exatamente M quadrados. No exemplo da figura, M = 6. Ela deve ser conexa ortogonalmente; quer dizer, tem que ser possível se movimentar entre quaisquer dois quadrados preservados apenas com movimentos ortogonais entre quadrados preservados. A área não preservada, entretanto, pode ser desconexa.

                    Os fazendeiros sabem o número de árvores que há dentro de cada quadrado e você deve escrever um programa que calcule o número máximo possível de árvores que podem ser preservadas com uma area de M quadrados. No exemplo, é possível preservar 377 árvores!";A primeira linha da entrada contém dois inteiros N e M (2 ≤ N ≤ 50, 1 ≤ M ≤ 10). As N linhas seguintes contêm, cada uma, N inteiros de valor entre 1 e 1000, representando o número de árvores dentro de cada quadrado da fazenda.;Seu programa deve imprimir uma linha contendo um número inteiro, o número máximo de árvores que podem ser preservadas, com as restrições dadas.;True;10 / 10;663;112;16.89%
1713;Teletransporte;Grafos;6;"A Confederação Galática instalou um novo sistema de teletransporte em suas naves espaciais. Cada nave recebeu uma cabine de teletransporte, na qual há um painel com quatro botões. Cada botão é rotulado com uma letra diferente A, B, C ou D e com um número que indica a nave destino para a qual o usuário será transportado, instantaneamente, se o respectivo botão for pressionado (como todos sabem, as naves da Confederação são identificadas por inteiros de 1 a N ). 

                    Para usar o sistema, o usuário deve adquirir um bilhete para cada viagem que deseja realizar (uma viagem corresponde a pressionar um botão). Note que como o número botões no painel é pequeno comparado com o número de naves da Confederação, pode ser necessário que o usuário tenha que comprar um bilhete múltiplo de L viagens para ir de uma dada nave S para uma outra nave T. 

                    Por exemplo, para as naves da figura abaixo, se o usuário está na cabine de teletransporte da nave 3 e pressiona o botão B ele é transportado para a nave 2. Se ele tem um bilhete múltiplo e pressiona novamente o botão B ele é então transportado para a nave 1.

                    

                    Sua tarefa neste problema é, dados a nave de partida S, a nave de chegada T e o número de viagens L do bilhete, determinar quantas sequências distintas de L botôes levam o usuário da nave S para a nave T . Por exemplo, para as naves da figura acima, existem quatro sequências distintas de L = 2 botôes que levam um usuário da nave S = 3 para a nave T = 1: CD, DA, AB, e BB.";A primeira linha da entrada contém dois inteiros N (1 ≤ N ≤ 100) e L (0 ≤ L < 230 ), indicando respectivamente o número de naves e o número de viagens do bilhete. A segunda linha da entrada contém dois inteiros S e T (1 ≤ S, T ≤ N ), indicando respectivamente a nave de partida e a nave de chegada. Cada uma das N linhas seguintes descreve o painel da cabine de teletransporte de uma nave. A i-ésima dessas linhas, 1 ≤ i ≤ N , contém quatro inteiros A, B, C e D (1 ≤ A, B, C, D ≤ N ), que representam os números escritos nos quatro bot ̃oes da cabine de teletransporte da nave de número i.;Seu programa deve produzir uma única linha, contendo um único inteiro, que deve ser igual a r módulo 104 , onde r é o número de sequências distintas de L botões que levam o usuário da nave S para a nave T.;True;6 / 10;638;323;50.63%
1714;Letras;Ad-Hoc;8;"Os parques na Cidade da Lógica são reticulados de N × N quadrados (2 ≤ N ≤ 100), onde cada quadrado contém uma das 10 primeiras letras ASCII, abcdefghijABCDEFGHIJ, em caixa minúscula ou maiúscula. As pessoas na Cidade da Lógica têm orgulho de seguir apenas caminhos consistentes quando cruzam os parques. Por exemplo, se eles passam por um c minúsculo, eles não vão se permitir, mais adiante, passar por um C maiúsculo. Para definir isso mais precisamente, um caminho consistente é uma sequência de quadrados satisfazendo: quadrados consecutivos na sequência são adjacentes ortogonalmente; nenhuma letra ocorre na sequência tanto minúscula quanto maiúscula. Quer dizer, ou a letra não está na sequência, ou ela ocorre apenas em caixa minúscula, ou somente em caixa maiúscula.

                    

                    Você deve escrever um programa para ajudar as pessoas da Cidade da Lógica a computar o comprimento do menor caminho consistente entre o quadrado de coordenadas (1, 1), no canto superior esquerdo, e o quadrado de coordenadas (N, N ), no canto inferior direito. Por exemplo, para o parque acima, o menor caminho consistente tem comprimento 13.";A primeira linha da entrada contém um inteiro N (2 ≤ N ≤ 100), o tamanho do parque. As N linhas seguintes contêm, cada uma, uma sequência de N letras, definindo o parque.;Seu programa deve imprimir uma linha contendo um inteiro, o comprimento de um caminho consistente mínimo. Se não houver um caminho consistente, imprima -1.;True;8 / 10;752;239;31.78%
1715;Handebol;Ad-Hoc;2;"Frustrado e desanimado com os resultados de sua equipe de futebol, o Super Brasileiro Clube (SBC) resolveu investir na equipe de handebol. Para melhor avaliar os atletas, os técnicos identificaram que seria útil analisar a regularidade dos jogadores. Especificamente, eles estão interessados em saber quantos jogadores fizeram gols em todas as partidas.

                    Como o volume de dados é muito grande, eles gostariam de ter um programa de computador para realizar essa contagem.";A primeira linha da entrada contém dois inteiros N e M (1 ≤ N ≤ 100 e 1 ≤ M ≤ 100), indicando respectivamente o número de jogadores e o número de partidas. Cada uma das N linhas seguintes descreve o desempenho de um jogador: a i-ésima linha contém M inteiros Xj (0 ≤ X j ≤ 100, para 1 ≤ j ≤ M ), informando o número de gols do i-ésimo jogador em cada partida.;Seu programa deve produzir uma única linha, contendo um único inteiro, o número de jogadores que fizeram gols em todas as partidas.;False;2 / 10;3303;1918;58.07%
1716;RSA;Ad-Hoc;8;"O algoritmo RSA é um dos algoritmos de criptografia mais utilizados e é considerado uma das alternativas mais seguras existentes. Seu funcionamento básico é descrito a seguir.

                    Dois números primos ímpares P e Q são escolhidos e calcula-se N = PQ. A seguir é calculada a função totiente φ(N) = (P − 1)(Q − 1) e um inteiro e satisfazendo 1 < E < φ(N) é escolhido de forma que mdc(φ(N), e) = 1. Finalmente é calculado o inteiro D, o inverso multiplicativo de e módulo φ(N), ou seja, o inteiro D satisfazendo DE = 1 (mod φ(N)).

                    Assim obtemos a chave pública, formada pelo par de inteiros N e E, e a chave secreta, formada
                    pelos inteiros N e D.

                    Para criptografar uma mensagem M, com 0 < M < N, calcula-se C = Me (mod N), e C é a mensagem criptografada. Para descriptografá-la, ou seja, para recuperar a mensagem original, basta calcular M = Cd (mod n). Note que, para isso, a chave secreta deve ser conhecida, não sendo suficiente o conhecimento da chave pública. Note ainda que a expressão x = 1 (mod y) usada acima equivale a dizer que y é o menor natural tal que o resto da divisão de x por y é 1.
                    Neste problema você deve escrever um programa para quebrar a criptografia RSA.";A única linha da entrada contém três inteiros N, E, e C, onde 15 ≤ N ≤ 109 , 1 ≤ E < N e 1 ≤ C < N, de forma que N e E constituem a chave pública do algoritmo RSA descrita acima e C é uma mensagem criptografada com essa chave pública.;Seu programa deve produzir uma única linha, contendo um único inteiro M, 1 ≤ M < N , a mensagem original.;False;8 / 10;1209;421;34.82%
1717;Corte;Ad-Hoc;8;Todo polígono convexo, com 2N vértices, pode ser decomposto em N − 1 quadril ́ateros, fazendo-se N − 2 cortes em linha reta entre certos pares de vértices. A figura abaixo ilustra três diferentes decomposiçõoes do mesmo polígono com N = 5. O peso da decomposição é a soma dos comprimentos de seus N − 2 cortes. Seu programa deve computar o peso de uma decomposição de peso mínimo!;A primeira linha da entrada contém um inteiro N (2 ≤ N ≤ 100). As 2N linhas seguintes contém cada uma dois números reais X e Y (0 ≤ X, Y ≤ 10000), com precisão de 4 casas decimais: as coordenadas dos 2N pontos, em sentido anti-horário, do polígono convexo.;Seu programa deve imprimir uma linha contendo um número real, com precisão de 4 casas decimais. O número deve ser o peso de uma decomposição de peso mínimo do polígono dado.;True;8 / 10;177;67;37.85%
1718;Pizza do Vô Pepe;Ad-Hoc;8;"Vovô Pepe é famoso por suas pizzas. Elas são deliciosas, e têm o formato de um círculo perfeito. Vovô preparou uma pizza especial para o jantar de hoje à noite, e colocou um certo número de azeitonas distribuídas aleatoriamente, mas colocadas exatamente na borda da pizza.
                    Sua tarefa é determinar, conhecendo a circunferência da pizza, a quantidade de azeitonas e a posição de cada azeitona, se é possível dividir a pizza em setores circulares de mesmo tamanho, de tal forma que cada pedaço de pizza contenha exatamente uma azeitona. 
                    A figura abaixo mostra (a) uma pizza de circunferência 12 com 3 azeitonas e uma possível divisão em pedaços iguais; e (b) uma pizza de circunferência 12 com 4 azeitonas que não pode ser dividida em pedaços iguais como descrito acima. Apesar de deliciosas, as azeitonas são muito pequenas, e suas dimensões podem ser desconsideradas no cálculo da divisão.";"A primeira linha contém dois inteiros C (3 ≤ C ≤ 105 ) e N (3 ≤ N ≤ 104 , N ≤ C) representando
                    respectivamente a circunferência da pizza e o número de azeitonas. O inteiro C é múltiplo de N. A segunda linha contém N inteiros distintos Xi (0 ≤ X1 < X2 < . . . < XN < C), em ordem crescente, descrevendo as posições das azeitonas, dadas pelo comprimento do arco circular no sentido horário, a partir de um ponto fixo da circunferência.";"Seu programa deve produzir apenas uma linha, com apenas uma letra, que deve ser S se é possível
                    dividir a pizza como descrito acima, ou N caso contrário.";True;8 / 10;1682;328;19.50%
1719;Computadores Simples;Ad-Hoc;8;"Você escreverá um interpretador para um computador simples. Este computador usa um processador com um pequeno número de instruções de máquina. Além disso, é equipado com 32 bytes de memória, um acumulador de 8 bits (accu) e um contador de programa de 5 bits (pc). A memória contém dados, bem como código, que é a arquitetura habitual de von Neumann. 

                    O contador de programa contém o endereço da instrução a ser executada em seguida. Cada instrução tem um comprimento de 1 byte - os 3 bits mais significativos (bits mais a esquerda) definem o tipo de instrução e os 5 bits menos significativos definem um operando opcional que é sempre um endereço de memória (xxxxx). Para instruções que não precisam de um operando, os 5 bits menos significativos não têm significado (-----). Aqui está uma lista de instruções da máquina e a sua semântica:
                    

                    000xxxxx   STA x   armazena o valor do acumulador no byte x da memória
                    001xxxxx   LDA x   carrega o valor do byte x da memória para o acumulador
                    010xxxxx   BEQ x   se o valor do acumulador for 0, carregue o valor x para o contador de programa
                    011-----   NOP     nenhuma operação
                    100-----   DEC     subtraia 1 do acumulador
                    101-----   INC     adicione 1 ao acumulador
                    110xxxxx   JMP x   carregue o valor de x para o contador de programa
                    111-----   HLT     finaliza o programa

                    

                    No início, o acumulador e o contador do programa são definidos como 0. Depois de buscar uma instrução, mas antes de sua execução, o contador de programa é incrementado. Você pode assumir que os programas serão encerrados.";O arquivo de entrada contém vários casos de teste. Cada caso de teste especifica o conteúdo da memória antes da execução do programa. Byte 0 a 31 são dadas em linhas separadas em representação binária. Um byte é indicado por seus bits mais e menos significativos. A entrada é terminada por EOF.;Para cada caso de teste, dê como saída o valor final do acumulador em representação binária, novamente: bits mais significativos primeiro.;False;8 / 10;1094;150;13.71%
1720;Sonho de Mondriaan;Paradigmas;6;"Quadrados e retângulos fascinaram, o famoso pintor holandês, Piet Mondriaan. Uma noite, depois de produzir os desenhos em sua ""idas ao banheiro"" (onde ele teve que usar o seu papel higiênico para desenhar, pois todo o seu papel estava cheio de quadrados e retângulos), sonhou em preencher um retângulo maior com pequenos retângulos de largura 2 e altura 1 em formas variadas.

                    

                    Especialista como ele era neste matéria, ele viu de relance que ele iria precisar de um computador para calcular o número de maneiras possiveis de preencher um retângulo maior cujas dimensões eram valores inteiros, como dito. Ajude-o, de modo que o seu sonho não vá se transformar em um pesadelo!";O arquivo de entrada contém vários casos de teste. Cada caso de teste é composto de dois números inteiros: a altura H (1 ≤ H ≤ 11) e largura W (1 ≤ W ≤ 11) do retângulo maior. A entrada é terminada H = W = 0.;Para cada caso de teste, imprima o número de maneiras diferentes que retângulo dado pode ser preenchido com pequenos retângulos de tamanho 2 por 1. Suponha que o retângulo maior dado seja orientado.;True;6 / 10;90;54;60.00%
1721;Equidistância;Geometria Computacional;9;"Alie e Bob não se encontram àlgum tempo. Bob não está feliz com isso, então ele instiga Alice a marcar um encontro. Vamos ver um trecho da ligação:

                    Alice:...talvez devêssemos nos encontrar em um lugar neutro.
                    Bob:Eu já ouvi isso de você --- dois anos atrás. 
                    Alice:eu sei, eu só não encontrei ainda um lugar adequado a mesma distancia de mim e de você.
                    Bob:Bom, o lugar geométrico que . é equidistante de dois dados pontos na superfície de uma esfera( e a terra está mais para esfera do que disco) é um grande circulo ( ou seja, o que intersecta o circulo grande pelos pontos dados ortogonalmente no centro deles). Se você insiste em somente numa distancia aproximadamente igual, então nós temos uma área de alguns quilômetros de largura e cerca de 40000 km de comprimento. Nem tudo nesta área é agua. Assim, eu acho que é uma tarefa possível encontrar um lugar apropriado.
                    Alice:Agora, se eu te falar para escolher qualquer um, nós certamente acabaremos em Honolulu.
                    Bob:O que não é uma má ideia. Então, devo escolher qualquer um? 
                    Alice:Contando que eu não tenha que aceitar --- mas estou aberta a sugestões.
                    Bob: Honolulu ?
                    Alice: Está na área geométrica que você falou, não?
                    Bob: Nem tanto ...

                    Bom. Agora vamos parar com as preliminares e chegar aos fatos: Dadas duas localizações na superfície da terra, você pode encontrar o lugar geométrico de todos os pontos equidistantes sobre a superfície. Para outro dado local, calcule sua distância para esta área geométrica. Assuma que a terra é uma esfera de raio de 6378 km.";"A entrada consiste de duas partes: uma lista de localidades e uma lista de casos.

                    A lista de localidade possui até 100 linhas, uma por localidade. Cada uma contém uma String S e dois números não inteiros, La, Lo, separados por espaço em branco. S representa o nome da localidade, La a latitude e Lo a longitude. Nomes são únicos e menores do que 30 caracteres e não contem espaços em branco. Latitudes estão entre -90 (Polo Sul) e 90 (Polo Norte) inclusive. Longitudes estão entre -180 e 180 inclusive, onde números negativos denotam locais à oeste do meridiano e positivos a leste. (Meridiano de Greenwich, Londres). A lista termina com uma linha com somente um caracter ‘#’.

                    Cada linha dos casos contém três localidades, A, B, M. Assuma que, A é a localidade da casa da Alice, B é a localidade da casa do Bob, e M o terceiro local, em que pode ser o possível ponto de encontro. A lista de casos acaba com uma linha com somente um caracter ‘#’.";"Para cada caso, imprima a frase ""M is x km off A/B equidistance."" com M,x,A,B aproximadamente substituidos, M pelo local de encontro, x  pela distancia calculada e arredonda para o mais próximo número inteiro., A pela localidade da casa de Alice, B pela localidade da casa de Bob.

                    Se uma das localidades do caso não estiver na lista de localidades subistitua  x por ""?"" .";False;9 / 10;101;32;31.68%
1722;Quantos Fibs?;Matemática;7;"A definição da recursão dos números de Fibonacci:

                    f1 = 1

                    f2 = 2

                    fn = fn-1 + fn-2         (n ≥ 3)

                    Dado dois números a e b, calcule quantos números Fibonacci estão no intervalo [a,b].";A entrada contém alguns casos de teste. Cada caso de teste consiste de dois números inteiros não negativos a e b. Entrada é terminada por a = b = 0. Caso contrário a ≤ b ≤ 10100. Os números a e b são dados sem zeros desnecessários à esquerda.;Para cada caso de teste a saída é escrita em uma única linha o número de números de Fibonacci com a ≤ fi ≤ b.;False;7 / 10;1342;314;23.40%
1723;Árvores Filogenéticas Herdadas;Grafos;10;"Entre outras coisas, Biologia Molecular Computacional lida com o processamento de seqüências genéticas. Considerando a relação evolutiva de duas seqüências, podemos dizer que eles estão intimamente relacionados, se eles não diferem muito. Podemos representar a relação por uma árvore, colocando seqüências de ancestrais acima de seqüências de seus descendentes. Tais árvores são chamadas árvores filogenéticas.

                    Considerando que uma tarefa da filogenia é inferir uma árvore a partir de seqüências de dados, vamos simplificar um pouco as coisas e proporcionar uma estrutura de árvore - esta será uma árvore binária completa. Você receberá as n folhas da árvore. Claro que você sabe, n é sempre uma potência de 2. Cada folha é uma sequência de aminoácidos (designadas pelos códigos compostos de um caractere que você pode ver na figura). Todas as sequências serão de igual comprimento l. Sua tarefa é derivar a seqüência de um ancestral comum com custos mínimos.

                    
                        

                            
                                
                                    Aminoácido                           
                                    Alanine AlaA  
                                    ArginineArgR 
                                    AsparagineAsnN 
                                    Aspartic Acid AspD 
                                    CysteineCysC 
                                    Glutamine     GlnQ 
                                    Glutamic Acid GluE 
                                    Glycine       GlyG 
                                    Histidine     HisH 
                                    Isoleucine    IleI 
                                 
                            
                            
                                
                                    Aminoácido
                                    Leucine       LeuL
                                    Lysine        LysK
                                    Methionine    MetM
                                    Phenylalanine PheF
                                    Proline       ProP
                                    Serine        SerS
                                    Threonine     ThrT
                                    Tryptophan    TrpW
                                    Tyrosine      TyrY
                                    Valine        ValV
                                
                            
                         
                       
                    

                    Os custos são determinados como se segue: cada nó interior da árvore é marcado com uma sequência de comprimento L. O custo de uma extremidade da árvore é o número de posições nas quais as duas sequências diferem nas extremidades. O total custo é a soma dos custos em todas as bordas. A seqüência de um ancestral comum de todas as sequências é então encontrado na raiz da árvore. Um antepassado comum ideal é um ancestral comum com os custos totais mínimos.";O arquivo de entrada contém vários casos de teste. Cada caso de teste começa com dois números inteiros N e L, denota o número de sequências para as folhas e do seu comprimento, respectivamente. A entrada é terminada por N = L = 0. Caso contrário, 1 ≤ N ≤ 1024 e 1 ≤ L ≤ 1000. Em seguida, siga N palavras de comprimento L sobre o alfabeto dos aminoácidos. Eles representam as folhas de uma árvore binária completa, a partir da esquerda para a direita.;Para cada caso de teste, imprima uma linha contendo algum ancestral comum ideal ótimo e os custos totais mínimos.;False;10 / 10;42;9;21.43%
1724;Caminhada em um Grafo;Grafos;6;"""Caminhada em um Grafo"" é um jogo jogado em um tabuleiro onde um grafo não-direcionado é desenhado. O grafo é completo e tem todos os ciclos, isso é, para quaisquer dos locais, existe exatamente uma ligação entre eles. As ligações são coloridas. Existem três jogadores e cada um deles tem uma peça. No início do jogo, as três peças estão em lugares pré-determinados no grafo. Em seu turno, os jogadores podem fazer um movimento. Um movimento consiste em mover a peça ao longo de uma ligação para um novo local no tabuleiro. A seguinte restrição é imposta sobre isso: a peça pode ser movida somente entre ligações da mesma cor que a ligação entre as peças dos jogadores adversários.
                    Nos anos sessenta (""faça amor, não faça guerra"") surgiu uma variante para um jogador desse jogo. Nessa variação, uma pessoa move todas as três peças, não necessariamente em ordem, mas apenas uma por vez. O objetivo desse jogo é colocar todas as peças no mesmo local com o menor número de movimentos possível. Encontre o menor número de movimentos necessários para colocar todas as três peças no mesmo local, dada uma configuração de tabuleiro e posições iniciais.";O arquivo de entrada contém diversos casos de teste. Cada caso de teste começa com o número n. A entrada é terminada por n = 0. Caso contrário, 1 ≤ n ≤ 50. A seguir há três inteiros p1, p2, p3 com 1 ≤ pi ≤ n denotando as posições iniciais das peças do jogo. As cores das ligações são dadas em seguida como uma matriz m x m de letras minúsculas separadas por espaço. O elemento mij denota a cor da ligação entre os locais i e j. Como o grafo não é direcionado, você pode assumir que a matriz é simétrica.;"Para cada caso de teste imprima em uma linha o número mínimo de movimentos necessários para levar as três peças para a mesma posição, ou a palavra ""impossible"" caso isso não seja possível para o tabuleiro e as posições iniciais dadas.";True;6 / 10;64;37;57.81%
1725;Quadtree II;Estruturas e Bibliotecas;9;"Quando percebeu que o mapa do tesouro codificado em quadtree era uma falsificação, Florida Jones fez um plano maligno para pregar uma peça no próximo caçador de tesouros que viesse atrás do tesouro. Mas para isso, ele precisa da sua ajuda novamente.

                    Você pode escrever um programa que use uma figura no formato XBM e codifica-la no esquema quadtree?";"A primeira linha será “#define quadtree_width N”, onde N é o tamanho da figura em pixels. (A figura é quadrática, contendo N*N pixels).
                    	A segunda linha será “define quadtree_height N”, concordando com a primeira.
                    	A terceira linha será “#define quadtree_bits[ ] = {“.
                    	Então seguirão N linhas, cada uma codificando uma linha de pixels na figura. Haverão N/8 números hexadecimais por linha.
                    	Cada número hexadecimal é composto por 8 bits que codificam 8 pixels da esquerda para a direita (onde o bit da extrema esquerda tem valor 1 e o bit da extrema direita tem valor 128). Os números hexadecimais são impressos no formato 0xdd, onde d é um dos caracteres do conjunto { 0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f }.
                    	Exemplo: Os 8 pixels WBBBWWB são escritos como 0x9e. (2 + 4 + 8 + 16 + 128 = 158 = 0x9e)
                    	A última linha será “};”.
                    

                    Nota: Os comentários no exemplo de entrada (delimitados por /* e */) não são parte da entrada. Eles devem ajudar a explicar o formato XBM.";Primeiro, imprima o inteiro N (8 ≤ N ≤ 512) em uma única linha. Então, imprima uma string de letras B, W e Q que corretamente codificam a figura com o esquema quadtree. Finalmente, acabe a string com um caractere de nova linha.;False;9 / 10;39;17;43.59%
1726;Amigos;Strings;6;Você quer planejar uma grande festa de aniversário com seus amigos. Durante o planejamento você percebeu que você deve fazer inúmeros operações com conjuntos de amigos. Existe um grupo que consiste do Arthur, Biene e Clemens. Existe outro grupo de amigos que você conhece do snowboarding que consiste do Daniel, Ernst, Frida e Gustav. Se você quer convidar ambos, o resultado do grupo da festa consiste de g1 + g2 (o resultado é a união de ambos os grupos). Então você pode computar a intersecção dos dois grupos g1 * g2, que consiste no conjunto vazio. Talvez você queira convidar o grupo g1, mas excluindo todos os membros do outro grupo g2, que pode ser escrito como g1 – g2. Intersecção (*) precede sobre união (+) e diferença (-). Todas as operações são associadas a esquerda, o que significa que em A op1 B op2 C você primeiro deve avaliar A op1 B (desde que op1 e op2 possuam uma precedência igual).;"A entrada consiste de uma ou mais linhas. Cada linha contém uma expressão que você deve avaliar. Expressões são sintaticamente corretas e somente consistem dos seguintes caracteres:

                    
                    	'{' e '}'
                    	Os elementos 'A' à 'Z' significando amigos de Arthur até Zora.
                    	Operações '+', '-' e '*'
                    	'(' e ')' para agrupar operações
                    	Caracter de nova linha '\n' marcando o fim de uma expressão.
                    

                    Uma linha nunca é maior que 255 caracteres.";Como saída, mostre o conjunto de resultados entre chaves ‘{’ e ‘}’, cada um em uma linha. Imprima os elementos de cada conjunto em ordem alfabética.;False;6 / 10;476;202;42.44%
1727;Copa Européia 2000;Paradigmas;6;"Como você talvez saiba, a qualificação para o Campeonato Europeu de Futebol 2000 é um torneio em que em cada grupo cada time joga um contra o outro duas vezes.A Alemanha está no grupo 3 junto com a Turquia, Finlândia, Moldávia e Irlanda do Norte. 14 jogos foram disputados e 6 ainda acontecerão. 
                    Uma olhada rápida nas posições atuais talvez te faça pensar que a Irlanda do Norte já está fora do páreo. Mas isso está errado! Imagine que a Irlanda do Norte ganhe os seus três jogos restantes, a Alemanha empata com a Turquia e perde para a Finlândia, e a Moldávia derrota a Turquia. Aí a Irlanda do Norte fica em primeiro!
                    Para aqueles que não estão familiarizados com o modelo de pontuação: Em cada jogo um time ganha 3 pontos por uma vitória, 1 ponto por um empate ou 0 pontos por uma derrota. Depois que todos os jogos tenham sido jogados, os times são ordenados de acordo com seus pontos. No caso de empate, os desempates adicionais são: diferença de gols (gols feitos - gols tomados), gols feitos e escolha aleatória, nessa ordem.
                    A questão que seu programa deve responder é: Levando em conta todas as possibilidades de como os jogos restantes possam terminar, qual é a posição mais alta e mais baixa de cada time no grupo quando o torneio acabar?";"A entrada consistirá em um ou mais estudos de caso. Cada estudo de caso se atém ao seguinte formato:

                
                    Na primeira linha haverá um inteiro n (1 ≤ n ≤ 20), representando o número de times no grupo.
                    Nas próximas n linhas, os nomes dos times se seguirão. Nomes sempre são menores que 30 caracteres e não contém espaços em branco.
                    Na próxima linha, haverá um inteiro g, representando o número de jogos completos.
                    Finalmente, cada uma das g linhas seguintes, descrevem um jogo completo no formato time1 time2 gols1 gols2.
                    Você pode partir do pressuposto que no máximo 10 jogos restam e cada time tem ao menos um jogo a jogar. (Isso simplifica o problema um pouco).
            
                    A entrada será encerrada quando o valor de n for igual a zero.";"Para cada estudo de caso, primeiro exiba uma linha escrito “Grupo #x” onde x é o número do caso (contando de 1).

                    Então, imprima uma linha por time na ordem em que aparecem na entrada. Em cada linha, exiba o nome do time, um caractere vazio, sua melhor posição possível, um sinal de menos e sua pior posição possível.

                    Imprima uma linha vazia após cada estudo de caso, inclusive após a última.";False;6 / 10;319;109;34.17%
1728;Difícil de Acreditar, Mas é Verdade!;Ad-Hoc;3;"A briga continua para decidir se é melhor armazenar números começando pelos seus dígitos mais significativos ou pelos seus dígitos menos significativos. Às vezes ela é chamada de ""Endian War"". Essa batalha teve início há muito tempo atrás, nos primórdios da Ciência da Computação. Joe Stoy, em seu (a propósito, excelente) livro ""Denotational Semantics"" (""Semântica Denotacional""), conta a história a seguir:

                    ""A decisão sobre para que lado escrevermos os dígitos é, claro, matematicamente trivial. Entretanto, um dos primeiros computadores britânicos tinha números escritos da direita para a esquerda (porque o feixe de luz de um tubo de osciloscópio vai da direita para a esquerda, mas na lógica serial trata-se primeiro dos dígitos menos significativos). Turing costumava confundir seu público em palestras públicas quando, por acaso, ele entrava neste modo mesmo para aritmética decimal, e escrevia coisas como 73+42=16. A versão seguinte da máquina foi tornada mais convencional simplesmente invertendo os fios da deflexão no eixo X: isso, porém, preocupou os engenheiros, já que suas formas de onda ficaram todas ao contrário. Esse problema, por sua vez, foi resolvido criando uma pequena janela para que os engenheiros (que tendiam a ficar atrás do computador mesmo) pudessem ver a tela do osciloscópio de trás.
                    [C.Strachey - comunicação privada.]""

                    Você vai fazer o papel do público e julgar se as equações de Turing são verdadeiras.";"A entrada contém vários casos de teste. Cada caso especifica em uma única linha uma equação de Turing. Uma equação de Turing tem a forma ""a+b=c"", onde a, b, c são números compostos de dígitos 0,...,9. Cada número consiste de, no máximo, 7 dígitos. Isso inclui possíveis zeros à esquerda ou à direita. A equação ""0+0=0"" terminará a entrada e deve ser processada também. As equações não contêm espaços.";"Para cada caso de teste gere uma linha contendo a palavra ""True"" ou a palavra ""False"", se a equação é verdadeira ou falsa, respectivamente, na interpretação de Turing, ou seja, com os números escritos de trás para frente.";False;3 / 10;1777;966;54.36%
1729;Média Não é Rápida o Suficiente!;Matemática;6;"Uma corrida de revezamento é feita para dois ou mais times de corredores. Cada membro de um time corre uma parte da corrida. Sua tarefa é ajudar a computar o resultado de uma corrida de revezamento. Você tem que avaliar varios times. É dado uma lista com os tempos das seções da corrida de cada time. Você deve calcular o tempo médio por quilômetro ao longo de toda a distância. Isto é fácil, certo?

                    Então se você gosta de um pouco de diversão e desafio, você provavelmente irá gostar de uma corrida de revezamento. Estudantes da universidade de Ulm participaram da corrida de revezamento ""SOLA"", em Zurique, Suiça.";"A primeira linha da entrada especifica o número N de seções seguido pela distancia total D, em kilometros, da corrida de revezamento. Você pode assumir que 1 ≤ N ≤ 20 e 0.0 < D < 200.00. Cada linha seguinte possui informação sobre um time: o número (inteiro) do time T e seguido por N resultados de cada seção, separado por um espaço. O tempo é dado no formato ""h:mm:ss"", sendo horas, minutos e segundos números inteiros. Se algum corredor foi desclassificado, o tempo da corrida será denotado por ""-:--:--"". E no final, a linha é acabada por um caracter de ""nova linha"". Entrada é terminada por EOF.";"Para cada time deverá ser impresso uma linha contendo o numero do time t e o tempo médio no formato ""m:ss"". Se ao menos um corredor do time foi desclassificado, a saída devera ser ""-"". Olhe o exemplo de Saída para o formato exato de apresentação.";False;6 / 10;743;222;29.88%
1730;Global Roaming;Geometria Computacional;6;Hoje em dia vários dispositivos móveis de comunicação dependem de uma vista direta para um satélite. Portanto, para os provedores de comunicação é crucial saber onde os seus serviços estão disponíveis. Sua tarefa é identificar os locais que têm uma vista direta para um satélite particular, ou seja, este satélite deve estar acima do horizonte. Para facilitar as coisas, você pode assumir que a Terra é uma esfera perfeita com um raio de 6378km (montanhas serão adicionadas no próximo ano...). O satélite é um objeto pointlike acima da superfície terrestre.;"A entrada consiste de vários casos de teste. Em cada caso de teste, a primeira linha contém o número de localizações N a serem verificados, seguido pela a posição do satélite: a sua latitude, a longitude (ambas em grau) e sua altura (em km) acima da superfície terrestre.

                    Cada uma das seguintes linhas N contém um local na superfície terrestre: o nome da localidade (uma string com menos de 60 caracteres ASCII que não contém espaços em branco), seguido por sua latitude e longitude (ambos em graus). A entrada é terminada por N = 0.";"Para cada caso de teste o seu programa deverá imprimir uma linha dizendo ""Test case K:"", onde K é o número da instância atual. Então nas seguintes linhas, imprimir em linhas separadas,  os nomes das localidades onde o satélite é visível na mesma ordem em que aparecem no arquivo de entrada. Imprima uma linha em branco após cada instância.";False;6 / 10;43;28;65.12%
1731;Frutas Avançadas;Ad-Hoc;5;"A companhia ""Frutas do século 21"" tem se especializado em criar novos tipos de frutas através de transferência de genes a partir de um fruto no genoma da outra. Muita das vezes este método não funciona, mas as vezes, em casos muito raro, uma nova fruta é gerada e tem o gosto da mistura das duas.

                    Um grande tópico de discussão dentro da empresa é ""Como deveria chamar as novas criações?"" Uma mistura entre uma apple e uma pear poderia ser chamada apple-pear, é claro, mas isso não pareçe muito interessante. O patrão finalmente decide usar a menor palavra que contém a combinação ambos os nomes das frutas originais como sub-palavras para o novo nome. Por exemplo, ""applear"" contém ""apple e ""pear"" (APPLEar e apPlEAR), e não tem uma palavra menor que tem a mesma propriedade.
                    A combinação de um cranberry e um bosenberry poderia ser chamado então um ""boysecranberry"" ou um ""craboysenberry"", por exemplo.

                    Seu trabalho é escrever um programa que crie um nome tão curto quanto a combinação das duas frutas fornecidas. Seu algoritmo deve ser eficiente, do contrário é pouco provavel que executará no time alocado para frutas com nomes longos.";Cada linha do arquivo de entrada contém duas palavras que representa os nomes das frutas que deve ser combinado. Todos os nomes tem um tamanho máximo de 100 e consiste somente em caracteres do alfabeto. A entrada é terminada por fim de arquivo.;Para cada caso de teste, imprima o menor nome da fruta resultante em uma linha. Se mais de nome for possível, qualquer um será aceito.;False;5 / 10;122;70;57.38%
1732;Abelha Maja;Ad-Hoc;3;"Maja é uma abelha. Ela mora em uma colméia de abelhas, com milhares de outras abelhas. Esta colméia é composta de muitos favos hexagonais, onde o mel é armazenado dentro destes. Mas abelha Maja tem um problema. Willi disse a ela onde pode encontrá-lo, mas pelo fato de Willi ser um drone masculino e Maja uma trabalhadora, eles têm diferentes sistemas de coordenadas.

                    Sistema de Coordenadas de Maja

                    Maja, que muitas vezes precisa voar diretamente a um hexágono especial de mel, usa um sistema avançado, bidimensional, ao longo de toda a colméia.

                    

                    Sistema de Coordenadas de Willi

                    Willi que é mais preguiçoso, anda apenas em torno de células numeradas no sentido horário a partir de 1, no meio da colméia.

                    

                    Ajude Maja a converter o sistema de Willi para o dela. Escreva um programa que dado um número de favo (hexágono) de mel localizado na colméia de Willi, determine suas coordenadas no sistema de Maja.";A entrada é composta por um ou mais inteiros que representam os números de Willi. Cada linha contém apenas um número, seguido por nova linha. Os números dos favos são todos menos que 100 000.;Você deverá imprimir a coordenada de Maja para os números de Willi, cada uma em uma linha separada.;True;3 / 10;618;288;46.60%
1733;Vladimir o Vampiro;Grafos;9;"Vladimir tem a pele branca, dentes muito longos e tem 600 anos, mas isso não é problema, porque Vladimir é um vampiro.

                    Vladimir nunca teve qualquer problema por ser um vampiro. Na verdade, ele é um médico bem sucedido no turno da noite, e tem feito muitos amigos entre os colegas. Ele tem um truque muito impressionante, que sempre mostra em jantares. Ele pode dizer o grupo sanguíneo de uma amostra de sangue apenas pelo seu gosto.

                    Vladimir adora viajar, mas por ser um vampiro, ele passa por três problemas sempre que vai viajar:

                    
                    	Primeiro, ele só pode viajar de trem, porque ele tem que levar seu caixão com ele. Mas viaja sempre de primeira classe, pois tem investido muito dinheiro em ações de longo prazo.
                    	Segundo, ele só pode viajar do anoitecer até o amanhecer, ou seja, das 6 da noite até às 6 da manhã. Durante o dia, ele tem que ficar dentro da estação de trem.
                    	Terceiro, ele tem que ter algo para comer com ele. Ele precisa de um litro de sangue por dia, que ele bebe ao meio-dia, 12:00, dentro de seu caixão.
                    

                    Você deve ajudar Vladimir encontrar rotas mais curtas entre duas cidades, para que ele possa viajar com uma quantidade mínima de sangue, pois do contrário, as pessoas podem acabar fazendo perguntas, como, “O que você vai fazer com todo esse sangue?”.";"A primeira linha da entrada contém um único número que diz a quantidade de casos de testes. A segunda linha começa com um único número que diz quantas especificações de rotas haverá seguir, ou seja, quantas conexões, válidas ou não, serão feitas até o seu destino. As linhas seguintes indicam as rotas (conexões entre duas cidades). Cada rota consiste nos nomes de duas cidades, a hora de partida e tempo total de viagem. Os tempos são em horas. Note que, Vladimir não pode usar as rotas que partem antes das 18h ou cheguem depois das 6h. Haverá no máximo 100 cidades, e menos do que 1000 conexões. Nenhuma conexão demora menos que 1 hora ou mais que 24 horas. Lembre-se, Vladimir tem no máximo 12 horas para realizar cada trajetoria, entre o anoitecer e o amanhecer. Todos os nomes de cidades devem ser menores que 32 caracteres.
                    A última linha de cada caso de teste contém dois nomes de cidades. O primeiro nome é a cidade de partida de Vladimir, o segundo é o nome do destino.";Para cada caso de teste, você deve imprimir na primeira linha, “Test Case #.”, indicando o número do caso de teste. Na linha seguinte você deve imprimir “Vladimir needs # litre(s) of blood.” indicando quantos litros de sangue ele necessita para realizar a(s) rota(s) ou “There is no route Vladimir can take.” caso não exista rota(s) válida(s).;False;9 / 10;109;32;29.36%
1734;Limite Encontrado;Matemática;10;"Sinais possivelmente de origem extraterrestre foram recebidos e digitalizados pela Aeronautic and Space Administration (que deve estar passando por uma fase desafiadora: ""Mas eu quero usar pés, e não metros!""). Cada sinal parece vir em duas partes: uma sequência de valores inteiros n e um inteiro não negativo t. Não vamos entrar em detalhes, mas os pesquisadores descobriram que um sinal codifica dois valores inteiros. Estes podem ser encontrados como o limite inferior e superior de uma subfaixa da sequência cujo valor absoluto de sua soma é mais próximo de t.

                    Dada à sequência de n números inteiros e o alvo não negativo t, você deve encontrar uma variedade não vazia da sequência (ou seja, uma subsequência contínua) e saída de seu índice mais baixo l e seu índice superior u. O valor absoluto da soma dos valores da sequência a partir do l-nésimo para o elemento de u-nésimo (inclusive) deve ser pelo menos tão perto de t como o valor da soma absoluta quanto qualquer outro intervalo não vazio.";O arquivo de entrada contém vários casos de teste. Cada caso de teste começa com dois números de n (1 ≤ n ≤ 105) e k. A entrada é terminada por n = k = 0. Caso contrário, segue n inteiros com valores absolutos menores do que 104 que constituem a sequência. Em seguida, segue k consultas para esta sequência. Cada consulta é um alvo t (0 ≤ t ≤ 109).;Para cada consulta imprima três números em uma mesma linha: sendo o valor absoluto da soma mais próxima e os índices inferiores e superiores de algum intervalo onde esta soma absoluta é alcançada. Possíveis índices começam com 1 e vão até n.;False;10 / 10;112;15;13.39%
1735;Codifique a Árvore;Matemática;7;"Uma árvore (isto é, um grafo conexo sem ciclos) com os vértices numerados por números inteiros 1, 2, ..., n é dado. O código ""Prufer"" de tal estrutura é construído como da seguinte forma: a folha (um vértice que é incidente a uma única aresta) com o menor número é tomado. Esta folha, juntamente com a sua aresta incidente é removida do grafo, enquanto o número do vértice que era adjacente à folha é anotado. No grafo obtido, este procedimento se repete, até que haja apenas um vértice restante (que, por sinal, sempre tem o número n). A sequência de escrita com n-1 números, é chamado o código Prufer da árvore.

                    Sua tarefa é, dada uma árvore, para calcular o seu código Prufer. A árvore é indicada por uma palavra do idioma especificado pela seguinte gramática:

                    T ::= ""("" N S "")""

                    S ::= "" "" T S

                    | vazio

                    N ::= número

                    Ou seja, as árvores têm parênteses em torno deles, e um número indicando o identificador do vértice raiz, seguido por arbitrariamente muitas (talvez nenhuma) subárvores separadas por um único caractere de espaço. Como exemplo, dê uma olhada na árvore na figura abaixo que é indicado na primeira linha da entrada de amostra.

                    Observe que, de acordo com a definição dada acima, a raiz de uma árvore pode ser uma folha também. É só para facilitar a denotação que designa algum vértice para ser a raiz. Normalmente, o que estamos lidando aqui com é chamada de ""árvore não enraizada"".";A entrada contém vários casos de teste. Cada caso de teste especifica uma árvore, como descrito acima em uma linha do arquivo de entrada. A entrada é terminada por EOF. Você pode assumir que 1 ≤ n ≤ 50.;Para cada caso de teste imprima uma única linha que contém o código Prufer da árvore especificada. Separe os números por um único espaço. Não imprima espaços no final da linha.;True;7 / 10;107;54;50.47%
1736;Decodifique a Árvore;Matemática;8;"Uma árvore (isto é, um grafo conexo sem ciclos) com os vértices numerados por números inteiros 1, 2, ..., n é dado. O código ""Prüfer"" de tal estrutura é construído da seguinte forma: a folha (um vértice que tem uma única aresta incidente) com o menor número é escolhido. Esta folha, juntamente com a sua aresta incidente é removida do grafo, enquanto que o número do vértice que era adjacente à folha é anotado. No grafo obtido, este procedimento é repetido, até que haja apenas um vértice restante (que, a propósito, sempre tem o número n). A sequência com n-1 números anotados, é chamado de código de Prüfer da árvore.

                    Sua tarefa é reconstruir uma árvore, dado o seu código de Prüfer. A árvore deve ser indicada por uma palavra da linguagem especificada pela seguinte gramática:

                    
                        T ::= ""("" N S "")""
                        S ::= "" "" T S
                            | vazio
                        N ::= número
                    

                    Ou seja, as árvores têm parênteses em torno delas, e um número que indica o identificador do vértice raiz, seguido por arbitrariamente muitas (talvez nenhuma) subárvores separadas por um único caractere de espaço. Como um exemplo, dê uma olhada na árvore na figura abaixo que é indicado na primeira linha do exemplo de saída.

                    Observe que, de acordo com a definição dada acima, a raiz de uma árvore pode ser uma folha também. Apenas para facilitar a notação nós designamos um vértice como raiz. Normalmente, o que estamos tratando aqui é chamado de ""árvore não enraizada"".";A entrada contém vários casos de teste. Cada caso de teste especifica o código de Prüfer de uma árvore em uma linha. Você encontrará n-1 números separados por um único espaço. A entrada é terminada por EOF. Você pode assumir que 1 ≤ n ≤ 50.;Para cada caso de teste imprima uma única linha que contém a árvore correspondente, denotada como descrito acima. Observe que, em geral, há muitas maneiras para denotar tal árvore: escolha sua favorita.;True;8 / 10;103;21;20.39%
1737;Etaoin Shrdlu;Strings;4;"A frequência relativa de caracteres em textos de linguagem natural é muito importante para a criptografia. No entanto, as estatísticas variam para diferentes idiomas. Aqui estão os top 9 caracteres ordenados por suas frequências relativas para várias línguas comuns:

                    
                    	Inglês: ETAOINSHR
                    	Alemão: ENIRSATUD
                    	Francês: EAISTNRUL
                    	Espanhol: EAOSNRILD
                    	Italiano: EAIONLRTS
                    	Finlandês: AITNESLOK
                    

                    Tão importante quanto as frequências relativas de caracteres simples são os de pares de caracteres, os chamados dígrafos. Dado vários exemplos de texto, calcule os dígrafos com as melhores frequências relativas.";A entrada contém vários casos de teste. Cada um começa com um número n em uma linha separada, indicando o número de linhas do caso de teste. A entrada é terminada por n = 0. Caso contrário, 1 ≤ n ≤ 64, e seguem n linhas, cada uma com um comprimento máximo de 80 caracteres. A concatenação dessas n linhas, onde os caracteres de fim de linha (end-of-line) são omitidos, dá o exemplo de texto que você tem que analisar. O texto irá conter apenas caracteres ASCII imprimíveis.;Para cada caso de teste gere 5 linhas contendo os top 5 dígrafos juntamente com suas frequências absolutas e relativas. Imprima o último arredondado com uma precisão de seis casas decimais. Se dois dígrafos tiverem a mesma frequência, ordene-os em (ASCII) ordem lexicográfica. Imprima uma linha em branco após cada caso de teste.;False;4 / 10;661;371;56.13%
1738;Rede de Fibra;Grafos;4;"Diversas empresas iniciantes decidiram construir uma Internet melhor, a chamada ""FiberNet"". Eles já instalaram muitos nós que atuam como roteadores em todo o mundo. Infelizmente, eles começaram a discutir sobre as linhas de conexão, e acabou cada empresa estabelecendo seu próprio conjunto de cabos entre alguns dos nós. Agora, provedores de serviços, que querem enviar dados do nó A para o nó B estão curiosos, qual é a empresa capaz de fornecer as conexões necessárias. Ajude os provedores, respondendo às suas perguntas.";"A entrada contém vários casos de teste. Cada caso de teste inicia-se com o número de nós da rede n. A entrada é terminada por n = 0 . Caso contrário, 1 ≤ n ≤ 200. Os nós tem os números 1 , ..., n . Depois segue-se uma lista de conexões . Cada conexão começa com dois números A, B. A lista de conexões é terminada por A = B = 0. Caso contrário, 1 ≤ A, B ≤ n, e eles indicam o início e o ponto final da conexão unidirecional, respectivamente. Para cada conexão, os dois nós são seguidos pelas empresas que têm uma ligação do nó A para o nó B. A companhia é identificada por uma letra minúscula. O conjunto de empresas que possuem uma conexão é uma palavra composta apenas por letras minúsculas.

                    Depois da lista de conexões, cada caso de teste é completado por uma lista de consultas. Cada consulta é composta de dois números A, B. A lista (e com ela o caso de teste) é terminada por A = B = 0. Caso contrário, 1 ≤ A, B ≤ n, e eles indicam o início e o ponto final da consulta. Você pode assumir que nenhuma ligação e nenhuma consulta contém os nós iniciais e finais idênticos.";"Para cada consulta em todos os casos de teste, gere uma linha contendo os identificadores de todas as empresas que podem rotear pacotes de dados em suas próprias conexões a partir do nó de início para o nó final da consulta. Se não houver empresas, imprima ""-"". Imprima uma linha em branco após cada caso de teste.";True;4 / 10;1298;512;39.45%
1739;Sequência de Threebonacci;Ad-Hoc;4;"Um número pertence à sequência de Threebonacci caso pertença à sequência de Fibonacci (assuma que o primeiro termo da série é o 1) e atenda pelo menos um dos últimos critérios abaixo:

                    1 – A representação do número possui pelo menos um dígito 3.

                    2 – O número é múltiplo de 3.";Cada caso de teste contém um inteiro N (1 ≤ N ≤ 60 ). A entrada termina com o fim de arquivo (EOF).;Para cada caso de teste imprima uma linha contendo o N-ésimo termo da série de Threebonacci.;False;4 / 10;1254;585;46.65%
1740;Está Ordenado?;Estruturas e Bibliotecas;10;"Chavaska gosta de jogar com sequência de inteiros. Ele tem uma sequência A que contém N inteiros que ele modifica
                e analisa. Particularmente ele está interessado na ordem de algumas sequências contíguas.

                 Ele explicou a Kabralouco como ele está se divertido e lhe convidou para jogar. Kabralouco quer jogar, mas como ele não consegue pensar tão rápido como Chavaska e não gosta de ficar atrás, ele decidiu roubar e agora esté te
                pedindo para ajudá-li criando um programa que pode realizar as seguintes operações


                
                    0 X Y – Troca os elementos X e Y.
                    1 X Y – Troca o valor do elemento na posição X por Y.
                    2 X Y – Insere o elemento Y na posição X.
                    3 X – Remove o elemento na posição X X.
                    4 X Y – Pergunta a estrutura dos elementos A[X..Y] e as respostas devem ser:
                
                
                    “ALL EQUAL” – Se A[i] = A[i+1] para todo i em [X,Y −1]
                    “NON DECREASING” – Se A[i] ≤ A[i+1] para todo i em [X,Y−1] e A[i] ≠ A[i+1] para algum i em [X,Y−1]
                    “NONINCREASING” – Se A[i] ≥ A[i+1] para todo i em [X,Y−1] e A[i] ≠ A[i+1] para algum i em [X,Y−1]
                    “NONE” – Se nenhum dos casos acontecem.";A entrada contém diversos casos testes e termina com o fim de arquivo. A primeira linha de cada caso teste começa com um inteiro N (1 ≤ N ≤ 104,) o número de elementos na sequência inicial. Na próxima linha tem N inteiros |A[i]| ≤ 109 (1 ≤ i ≤ N). A próxima linha contém um inteiro Q (1 ≤ Q ≤ 105), o número de operações que devem ser executadas. As próximas Q linhas são as operações.;O programa deve imprimir uma linha por pergunta do tipo 4 (“4 X Y”), respondendo se a sequência A[X...Y] é NON INCREASING, NON DECREASING, ALL EQUAL ou NONE como explicado acima.;False;10 / 10;538;55;10.22%
1741;Notação Reversa de João;Ad-Hoc;9;"O pequeno João está aprendendo como resolver expressões aritmética. Mas as expressão convencionais são muito
                chatas para ele. Por causa disso, o seu pai está ensinando como resolver expressões escritas em formas diferentes.
                A primeira forma que ele aprendeu é a Notação Polonesa Reversa, uma forma interessante que não precisa de parentêses
                . João achou interessante essa notação, mas achou que poderia criar uma ainda mais legal. Por isso ele criou
                a Notação Reversa de João (NRJ). 

                 João chegou a seguinte definição recursiva para NRJ

                
                    Um único dígito é uma expressão válida e o resultado é o valor deste dígito.
                    Um operador binário (+, −, * or /), seguido por duas expressões válidas, é uma expressão válida. O resultado
                    dessa expressão é aplicação do operador com os dois argumentos trocados. Isto é, + a b vale a soma dos dois operandos
                    - a b, vale b - a, * a b vale o produto dos dois operandos e /a b vale floor(b/a).
                

                 João agora se diverte escrevendo e resolvendo expressões nesse novo formato. Como ele é uma criança aventureira,
                ele gosta de expressões grandes. Porém, algumas vezes ele acha algum problema. Parte da expressão que ele escreve não
                tem solução, porque elas estão mal-formadas ou ocasionam divisão por 0. Mas quando ele resolve novamente, encontra outro valor

                 Agora ele gostaria de ter certeza do resultado. Como você realmente gosta do João, você escreveu um programa
                para ajudá-lo";"A entrada contém diversos cados testes. Cada caso teste é uma linha com n caracteres (1 ≤ n ≤ 2×106)
                que pode possivelmente representar uma expressão em NRJ. Essa expressão conterá apenas dígitos de 0 a 9 e os operadores mencionados acima separados por um único espaço.

                 A entrada termina com fim de arquivo.";"Para cada caso teste, imprima uma única linha no seguinte formato.

                    “The answer is N.” se a expressão é válida, pode ser resolvida e o resultado é N
                    
                    “Division by zero.” se a expressão é válida sintaticamente, mas existe divisão por 0.
                    
                    “Invalid expression.” se a expressão não pode ser resolvida em NRJ

                    Todos os resultados, tanto finais quanto intermediários caberão em um inteiro com sinal de 32 bits.";False;9 / 10;2805;392;13.98%
1742;Entrando em Confusão;Grafos;10;"Bob foi a Babilônia procurando por novas aventuras. Mas, assim que chegou, ele encontrou confusão com as criaturas daquele lugar que não eram muito gentis. Eles tinham um jogo esquisito e agora era a vez de Bob jogá-lo. Eles colocariam o Bob em algum lugar e objetivo era sair com vida. 

                 Como Bob sabia que ele seria frito caso não fizesse um plano a tempo, ele robou um mapa do terreno em que ele seria jogado. Mas ele ainda não sabia exatamente onde seria largado. Então ele teve que memorizar o mapa inteiro para poder sair com vida. Felizmente, o terreno era retangular (N+1)x(M+1) e as únicas possíveis direções eram ir para o norte,sul, leste e oeste. Uma coisa crucial era memorizar onde eram os buracos, também retangulares. Como ele tinha que sair o mais rápido possível, ele não podia errar o caminho.
                
                

                Exemplo de um grid 6x6 com dois buracos e um jeito de sair.

                 Agora ele está te perguntando de quantas maneiras ele poderia sair o mais rápido possivel se ele fosse largado
                em uma posição (xi, yi) e tivesse que chegar em (xf , yf).";"A entrada é composta por diversos casos testes e termina com o fim de arquivo. Cada uma descreve um mapa e começa com três inteiros N,M (1 ≤ N, M ≤ 1000) e H (0 ≤ H ≤ 100), os quais são, respectivamente, o tamanho do grid e o número de buracos, como descrito acima. Então, seguem H linhas, cada linha com 4 inteiros xi, yi, xf e yf (0 ≤ xi,xf ≤ N; 0 ≤ yi,yf ≤ M ) descrevendo o canto inferior esquerdo e o canto superior direito de um buraco. Depois vem um inteiro Q (1 ≤ Q ≤ 100), o número de queries. As próximas Q linhas, cada uma com 4 inteiros xi, yi, xfe yf (0 ≤ xi,xf ≤ N; 0 ≤ yi,yf ≤ M ), os quais são o começo e o fim como descrito acima. Entre casos de testes consecutivos, haverá uma linha em branco. É garantido que em um mapa, todos os buracos são disjuntos e terá sempre pelo menos um jeito de sair.";"Seu programa deve imprimir uma linha para cada query com o número de maneiras de fugir o
                    mais rápido possível. Como o número pode ser muito grande, sua saída deve ser módulo 109 + 7. Imprima uma linha em branco após cada caso teste.";True;10 / 10;374;29;7.75%
1743;Máquina de Verificação Automatizada;Ad-Hoc;1;"A Internet Computer Parts Company (ICPC) é uma loja on-line que vende peças de computador. Pares de conectores elétricos em linha estão entre as peças mais populares que ICPC vende. No entanto, elas também são uma das peças que são devolvidos com mais freqüência por clientes insatisfeitos, porque devido a erros na embalagem os conectores enviados para os clientes podem não ser compatíveis..

                    Um conector em-linha é constituído por cinco pontos de ligação, marcadas de 1 a 5. Cada ponto de ligação de um conector pode ser ou um plugue ou uma tomada. Dizemos dois conectores são compatíveis se, para cada rótulo, um ponto de conexão é um plugue e outro ponto de ligação é uma tomada (em outras palavras, dois conectores são compatíveis se, para cada ponto de conexão com o mesmo rótulo, um plugue e uma tomada se encontram quando os dois conectores estão conectados).

                    A figura abaixo mostra exemplos de dois conectores que são compatíveis e dois conectores que não são compatíveis.

                    

                    ICPC está introduzindo uma Máquina de Verificação Automártica (ACM) de última geração, com um verificador óptico, que vai verificar se os dois conectores embalados para um cliente são realmente compatíveis. O complexo e caro hardware do ACM está pronto, mas eles precisam de sua ajuda para terminar o software.

                    Dadas as descrições de um par de conectores em linha, sua tarefa é determinar se os conectores são compatíveis.";A primeira linha contém cinco números inteiros Xi (0 ≤ Xi≤ 1 para i = 1, 2,..., 5), que representa os pontos de conexão do primeiro conector do par. A segunda linha contém cinco números inteiros Yi (0 ≤ Yi ≤ 1 para i = 1, 2,..., 5), que representa os pontos de conexão do segundo conector. Na entrada, um 0 representa uma tomada e um 1 representa um plugue.;"Apresente uma linha com um caractere que representa se os conectores são compatíveis ou não. Se eles são compatíveis escrever a letra maiúscula ""Y""; caso contrário, escrever a letra maiúscula ""N"".";True;1 / 10;6254;4125;65.96%
1744;Pedras Pretas e Brancas;Paradigmas;7;"Shagga e Dolf gostam de jogar um jogo com pedras, cada uma das quais é preto ou branco. No início do jogo, Dolf organiza todas as pedras em uma única linha, da esquerda para a direita. Então, o objetivo da Shagga é reordenar as pedras para que todas as pedras pretas fiquem à esquerda de todas as pedras brancas. Para fazer isso, ele pode escolher qualquer par de pedras de cor diferente e trocar as suas posições, pagando A moedas para Dolf no processo. No entanto, se as duas pedras cujas posições que ele está trocando são adjacentes, Dolf deve dar-lhe um reembolso de B moedas, o que significa que a operação vai custar a Shagga apenas A - B moedas.

                    Shagga não é muito esperto, por isso ele ainda não percebeu que ele só vai perder moedas ao jogar este jogo. No entanto, ele está consciente de suas limitações, então ele sabe que, se ele jogar de forma ótima ele perderá menos moedas do que ele está perdendo agora, com sua estratégia de escolher aleatoriamente as pedras que ele troca a cada movimento. Por isso, ele quer saber o número mínimo de moedas que ele terá que pagar a Dolf, a fim de chegar a ordenação desejada das pedras, e ele está ameaçando a te dar de alimento as cabras, se você não ajudá-lo.";"A primeira linha contém dois inteiros A e B (0 ≤ B <A ≤ 106), que representam, respectivamente, o custo da troca de duas pedras e o valor da restituição ao trocar pedras adjacentes. A segunda linha contém uma string não-vazia S de, no máximo, 5.000 caracteres. O i-ésimo caracter de S indica a cor da i-ésima pedra, a partir da esquerda para a direita, no arranjo inicial das pedras. O caracter é a letra maiúscula ""B"" ou a letra maiúscula ""W"", indicando, respectivamente, uma pedra preta ou uma pedra branca.";Imprima uma linha contendo um inteiro que representa o número mínimo de moedas que Shagga terá que pagar a Dolf para ordernar as pedras de tal forma que todas as pedras pretas estejam à esquerda de todas as pedras brancas.;False;7 / 10;687;244;35.52%
1745;Contando Substhreengs;Matemática;5;"Substrings são strings formadas pela escolha de um subconjunto de caracteres contíguos a partir de uma string. Isto é bem conhecido. Um pouco mais obscura é a definição de substhreengs. A substhreeng é uma substring que cumpre com os seguintes requisitos adicionais:

                    1. É não-vazio, e composto inteiramente de dígitos de base 10.

                    2. Interpretada na base 10 (permitindo zeros extras), o inteiro resultante é um múltiplo de 3.

                    Por exemplo, a string ""130a303"" contém 9 substhreengs: o substhreeng ""3"" três vezes, os substhreengs ""30"" e ""0"" duas vezes cada, e os substhreengs ""303"" e ""03"", uma vez cada. A substring ""30a3"" não é um substhreeng porque não é inteiramente composto por dígitos de base 10, enquanto a substring ""13"" não é um substhreeng porque 13 não é um múltiplo de três.

                    Note que dois substhreengs são consideradas diferentes se eles são diferentes em comprimento ou começar numa posição diferente, mesmo se os caracteres selecionados são os mesmos.

                    Dado uma string, você está convidado a contar o número de substhreengs que ela contém.";A entrada consiste de uma única linha que contém uma string não-vazia S de, no máximo, 10 6 caracteres. Cada personagem do S ou é um dígito ou uma letra minúscula.;Apresente uma linha com um inteiro que representa o número de substhreengs contido em S.;False;5 / 10;575;267;46.43%
1746;Dividindo os Nomes;Estruturas e Bibliotecas;8;"A Rainha da Nlogônia decidiu mudar a capital do reino para uma nova cidade chamada Sortonia. O projeto da cidade é uma grade de N × N consistindo de N avenidas na direção Norte-Sul e N ruas direção Leste-Oeste. Assim, cada avenida cruza todas as ruas, e não há duas ruas ou duas avenidas que cruzam entre si.

                    Como a cidade está quase terminada, agora é hora de atribuir nomes as suas ruas e avenidas. O povo de Nlogônia já votou nos 2×N nomes que eles querem usar, mas não foi decidido ainda qual desses será usado para as ruas e que para as avenidas. A questão não é tão simples, porque em cada cruzamento deve ter uma placa de identificação da rua e da avenida que se cruzam ali, e a rainha ordenou expressamente que as letras destas placas deve ser escritas em ouro cravejado com rubis.

                    Como você é o Contador Oficial de Dinheiro (Accountant who Counts the Money - ACM), é sua tarefa encontrar uma forma de minimizar o número total de letras escritas nas placas dos cruzamentos, por razões óbvias. Felizmente, você pensou em uma maneira muito inteligente atingir esse objetivo, que é a utilização de abreviaturas nas placas para os nomes das ruas e avenidas. A abreviação do nome de uma avenida (e da mesma forma para uma rua) é o prefixo mais curto de seu nome, que não é um prefixo do nome de qualquer outra avenida (e da mesma forma para outra rua). Naturalmente, a abreviatura a ser utilizada para cada nome depende de como o conjunto de 2×N nomes é dividido em dois conjuntos disjuntos composto de N nomes a ser utilizado para as ruas e avenidas.

                    Por exemplo, considere o caso de N = 2, onde os quatro nomes escolhidos são ""GAUSS"", ""GALOIS"", ""ERDOS"" e ""EULER"". Se são atribuídos os nomes ""GAUSS"" e ""GALOIS"" para as ruas, ao passo que são atribuídos os nomes ""ERDOS"" e ""EULER"" as avenidas, então as abreviaturas seriam ""GAU"" para ""GAUSS"", ""GAL"" para ""Galois"", ""ER"" para ""ERDOS"" e ""EU"" para ""EULER"". Com essa divisão, o número total de letras a serem escritas nas placas seria 20, já que as quatro interseções seriam rotuladas como ""GAU|ER"", ""GAU|UE"", ""GAL|ER"" e ""GAL|UE"".

                    No entanto, no exemplo acima, seria mais conveniente atribuir para as ruas os nomes ""GAUSS"" e ""ERDOS"", deixando ""GALOIS"" e ""EULER"" para as avenidas. Assim, as abreviaturas seriam ""G"" para ""GAUSS"", ""E"" para ""ERDOS"", ""G"" para ""GALOIS"" e ""E"" para ""EULER"", e o número total de letras a serem escritas nas placas seria apenas 8 (pois as intersecções seriam rotuladas como “G|G”, “G|E”, “E|G” e “E|E”).

                    Felizmente, o conjunto de nomes que foi escolhido é tal que nenhum nome nele é um prefixo de algum outro nome no conjunto, garantindo assim que o sistema que você propõe será sempre viável. Você pode calcular o número mínimo de letras a ser escritas nos sinais se você dividir os nomes na forma ideal?";A primeira linha contém um número inteiro N (2 ≤ N ≤ 100) que representa tanto o número de ruas quanto o número de avenidas em Sortonia. Cada uma das próximas 2 × N linhas contém uma string não-vazia de no máximo 18 letras maiúsculas, indicando um dos nomes que foram escolhidos. Você pode assumir que nenhuma das strings dadas é um prefixo de outra string na entrada.;Imprima uma linha contendo um inteiro que representa o número mínimo total de letras a serem escritas nas placas, quando a divisão dos nomes das ruas e avenidas é escolhida de forma otimizada.;False;8 / 10;116;40;34.48%
1747;Distribuição Igual;Grafos;10;"Endre tem muitos sobrinhos e sobrinhas. Uma vez por ano, ele leva alguns deles em uma viagem para um arquipélago onde um barco empresa opera serviços bidirecionais entre alguns pares de ilhas. Como Endre e as crianças podem voar e retornar diretamente de ou para qualquer uma das ilhas, qualquer viagem pode ser descrita como uma seqüência não vazia i1, i2,..., in de ilhas, de tal modo que cada par consecutivo de ilhas ij e ij + 1 têm um serviço de barco entre eles. A primeira e as última ilha de uma viagem pode ou não ser a mesma ilha, e as ilhas podem ser visitadas mais de uma vez durante a viagem.

                    Cada ilha do arquipélago produz uma diferente variedade peculiar de doces, e recebe os seus visitantes dando a cada grupo que chega um determinado número de peças de doces. Endre não gosta de doces, mas as crianças comem todos quase que instantaneamente. Para evitar brigas, cada vez que o grupo chega a uma ilha e recebe doces, ele distribui uniformemente eles entre os filhos.

                    Você pode se perguntar como Endre sempre consegue distribuir uniformemente os doces que recebem em cada ilha. Bem, a resposta é realmente muito simples. A cada ano, a agência de viagens envia-lhe o plano de viagem (a seqüência i1, i2,..., in ) de antemão. Como ele quer viajar com a maior quantidade de seus sobrinhos e sobrinhas possíveis, ele calcula o número máximo de crianças k ele pode levar para a viagem sem violar a regra sobre a distribuição uniforme de doces. Observe que cada plano de viagem determina exclusivamente o número de crianças a serem tomadas.

                    Isso vem acontecendo há anos, e cada vez Endre acaba levando um número diferente de crianças na viagem. Ele gostaria de saber quantos números diferentes de crianças, ele pode levar em uma viagem, ou seja, o número de inteiros k tal que existe um plano de viagem para a qual ele acaba levando k crianças na viagem. Agora Endre está ocupado preparando a viagem deste ano. Você pode ajudá-lo com a resposta?";A primeira linha contém dois números inteiros I e S (1 ≤ I, S ≤ 104), que representam, respectivamente, o número de ilhas e o número de serviços de barco entre eles. Ilhas são identificados com números inteiros distintos de 1 a I. A segunda linha contém I inteiros C1, C2,. . . , CI, onde Ci indica o número de doces o grupo recebe ao chegar a ilha i (1 ≤ Ci ≤ 105 para i = 1, 2,..., I). Cada uma das próximas linhas S descreve um serviço de barco diferente, com dois inteiros A e B (1 ≤ A < B ≤ I), o que representa que é possível viajar da ilha A para ilha B e da ilha B para a ilha A. Não existem dois serviços de barco permitem viajar entre o mesmo par de ilhas.;Aprezente uma linha com um inteiro que representa o número de inteiros k tal que existe um plano de viagem para que Endre acaba levando k crianças na viagem.;False;10 / 10;562;172;30.60%
1748;Cerque Os Vegetais;Geometria Computacional;8;"Na tenra idade de 40 anos, Alice e Bob decidiram se aposentar. Depois de mais de duas décadas de trabalho como exemplos para protocolos de rede, livros teóricos sobre jogos e de vários outros textos, eles estavam cansados. Para se manterem ativos, eles decidiram praticar jardinagem.

                    Alice e Bob plantaram vários vegetais em um campo enorme. Após terminar, eles perceberam que as suas plantas precisavam de proteção contra animais selvagens, por isso eles decidiram construir uma cerca em volta deles. O campo é representado como o plano XY, e cada vegetal é representado por um ponto diferente no mesmo. Uma cerca é representada como um polígono no plano. No entanto, nem todo polígono é uma cerca válida.

                    Uma carca deve ser um único polígono simples com cada um dos seus lados paralelos a um dos eixos. Naturalmente, o polígono tem de conter todos os pontos que representam os vegetais. Uma cerca muito perto das plantas ou de si mesma poderia tornar difícil passear pelo campo, desta forma cada lado do polígono precisa ter, pelo menos, um milímetro de distância de todas as outras plantas e de todos os lados não adjacentes.

                    Entre todas as cercas válidas, Alice e Bob decidiram construir aquela com menor perímetro, a fim de economizar no material. Se existem várias cercas válidas com perímetro mínimo, eles querem construir uma com área mínima entre aquelas disponíveis, para economizar tempo quando forem regar seu jardim.

                    Nas imagens seguintes, várias cercas diferentes são mostrados em um campo com quatro vegetais representados como círculos.

                    

                    Por sorte, Alice e Bob já participaram de projetos científicos rigorosos e por isso ele foram muito cuidadosos com seus registros: eles sabem a localização exata de suas plantas com precisão milimétrica. Usando esses dados, ajude-os a calcular o perímetro e a área de uma cerca ideal.";A primeira linha contém um inteiro V (1 ≤ V ≤ 105) representando o número de vegetais no campo de Alice e Bob. Cada uma das V linhas seguintes descreve um vegetal diferente com dois inteiros X e Y (1 ≤ X, Y ≤ 108), indicando as coordenadas da planta, em milímetros. Não há duas plantas em um mesmo local.;Imprima uma linha com dois inteiros P e A que representam, respectivamente, o perímetro em milímetros e a área em milímetros quadrados da cerca que Alice e Bob querem construir.;True;8 / 10;64;28;43.75%
1749;Colisão Galática;Grafos;9;"A galáxia de Andrômeda está prevista para colidir com a nossa Via Láctea, em cerca de 3,8 bilhões de anos. A colisão será, provavelmente, uma fusão das duas galáxias, sem duas estrelas, na verdade, colidindo. Isso porque a distância entre as estrelas em ambas as galáxias é tão grande. Professor Andrew está construindo um modelo computacional para prever os possíveis resultados da colisão e precisa de sua ajuda! Um conjunto de pontos nos dois plano dimensional é dada, representando estrelas em uma determinada região das galáxias já incorporadas. Ele não sabe quais estrelas vieram originalmente de qual galáxia; mas ele sabe que, para esta região, se duas estrelas vieram da mesma galáxia, então a distância entre elas é maior do que 5 anos-luz. Uma vez que cada estrela nesta região veio ou de Andrômeda ou da Via Láctea, o professor também sabe que um dado conjunto de pontos pode ser separado em dois subconjuntos disjuntos, um compreendendo as estrelas de Andromeda e outro as estrelas da Via Láctea, ambos subconjuntos com a propriedade de que a distância mínima entre dois pontos no subconjunto é maior do que 5 anos-luz. Ele chama isso de uma boa separação, mas a má notícia é que pode haver diversas boas separações. Contudo, entre todos as possíveis boas separações existe um número mínimo de estrelas que um subconjunto deve conter, e este é o número que o seu programa tem de calcular.

                    Por exemplo, a figura ilustra um dado conjunto de seis pontos. Professor Andrew não pode dizer que as estrelas vieram de Andromeda, mas note que há quatro possíveis boas separações: {{1, 2, 4, 5}, {3, 6}}; {{1, 2, 3, 4}, {5, 6}}; {{1, 4, 5}, {2, 3, 6}}; {{1, 3, 4}, {2, 5, 6}}. Portanto, pelo menos duas estrelas devem ter vindo de Andrômeda, uma vez que este é o número mínimo de pontos que um subconjunto pode ter em uma boa separação.";A primeira linha contém um número inteiro N (1 ≤ N ≤ 5 × 104) que representa o número de pontos no conjunto. Cada uma das próximas N linhas descreve um ponto diferente, com dois inteiros X e Y (1 ≤ X, Y ≤ 5 × 105), indicando as suas coordenadas, em anos-luz. Não há pontos coincidentes, e o conjunto admite pelo menos uma boa separação.;Apresente uma linha com um inteiro que representa o número mínimo de pontos que um subconjunto pode ter em uma boa separação.;True;9 / 10;783;180;22.99%
1750;Ajude o Cupido;Ad-Hoc;6;"O trabalho de Cupido está ficando mais difícil, por isso ele está adotando novas tecnologias para ajuda-lo com sua difícil tarefa de combinar pessoas em casais felizes. Ele nomeou os melhores programadores em sua equipe para um novo projeto chamado Advanced Couples Matching (ACM). Para este projeto, os programadores precisam produzir um algoritmo que leva um conjunto de um número par de N pessoas solitárias e combina-los em N/2 casais, de modo que cada pessoa esteja exatamente em um casal.

                    Infelizmente, os dados disponíveis sobre cada pessoa são limitados. Neste mundo moderno, usando de gênero, etnia, idade ou nacionalidade como critério para formar casais não é uma opção sensata, de modo que os programadores só podem utilizar os dados sobre a conexão à internet de cada candidato. Eles decidiram concentrar-se em fusos horários nesta fase. As pessoas que vivem em zonas de tempo mais próximas são mais propensos a encontrar tempo para interagir uns com os outros. Assim, os programadores decidiram criar casais de modo a minimizar a diferença de tempo total.

                    Cada fuso horário é identificado por um número inteiro entre -11 e 12, inclusive, representando a sua diferença em horas de um fuso horário especial chamado Tempo Universal Coordenado (ou UTC). A diferença de tempo de duas pessoas que vivem em zonas de tempo representados por números inteiros i e j é o mínimo entre | i - j | e 24 - | i - j |. Dada uma partição de um conjunto de um mesmo número N de candidatos em N/2 casais, a sua diferença de tempo total é a soma da diferença de tempo de cada casal.

                    Você está convidado a escrever um programa que recebe como entrada os fusos horários de um conjunto de N candidatos. A saída do programa deve ser o mínimo da diferença total de tempo entre todas as partições possíveis do conjunto para casais.";A primeira linha contém um inteiro par N (2 ≤ N ≤ 1000) representando o número de candidatos que serão acoplados. A segunda linha contém N inteiros T1, T2,. . . , TN (-11 ≤ Ti ≤ 12 para i = 1, 2,..., N), indicando os fusos horários dos candidatos.;Apresente uma linha com um inteiro que representa o mínimo da diferença total de tempo entre todas as partições possíveis do conjunto de candidatos em casais.;False;6 / 10;731;303;41.45%
1751;Alpinista Intrépido;Grafos;8;"Quem iria adivinhar? Você escalou a montanha mais alta de sua cidade. Você está tão animado sobre isso que você precisa dizer a todos os seus amigos, e você decidiu começar com aqueles que estão a tentar estar exatamente onde você está neste exato momento.

                    A montanha tem N marcos, e um deles é o topo da montanha, onde você está agora. Cada um de seus amigos que está escalando a montanha está em algum outro local de referência, e você pretende visitar todos eles. Existem trilhas que ligam os pares de pontos de referência, de tal forma que existe exatamente um percurso (isto é, uma sequência de trilhas consecutivas) que vai para baixo a partir do topo da montanha para cada outro ponto de referêmcia. Para visitar dois amigos em duas referências diferentes, você pode ter que descer em algumas trilhas, subir em outras, e descer outras novamente. Descer a montanha é ""fácil"", já que não consome muito sua energia quando você desce por uma trilha. Mas cada vez que você subir uma trilha, você consome uma certa quantidade de energia. Depois de visitar todos os seus amigos, você pode apenas sentar e descansar.

                    Por exemplo, considere a montanha na imagem abaixo, que tem N = 6 pontos de referência. Se seus amigos estão em raferenciais 5 e 2, você pode visitar tanto se você seguir a seqüência de referências 1 ↓ 2 ↑ 1 ↓ 3 ↓ 5, onde a ↓ b significa que você desce uma trilha de uma referência a até uma referência b, e a ↑ b significa que você subir uma trilha de uma referência a até uma referência b. Outra sequência possível é 1 ↓ 3 ↓ 5 ↑ 3 ↑ 1 ↓ 2.

                    

                    Dadas as trilhas entre os pontos de referência, a energia necessária para escalá-los, e os pontos de referência onde seus amigos estão, calcular o montante total mínimo de energia necessária para visitar todos os seus amigos a partir do topo da montanha.";A primeira linha contém dois inteiros N e F (1 ≤ F <N ≤ 105), representando, respectivamente, o número de pontos de referência e o número de seus amigos que estão subindo a montanha. Referenciais são identificados com números inteiros distintos entre 1 e N, sendo 1 o topo da montanha, onde você está inicialmente. Cada uma das próximas N - 1 linhas descreve uma diferente trilha com três números inteiros A, B e C, o que indica que existe uma trilha de A a B, que vai para baixo e requer uma quantidade de energia C para ser escalado (1 ≤ A ≤ N , 2 ≤ B ≤ N, A != B e 1 ≤ C ≤ 100). A próxima linha contém F diferentes inteiros L1, L2,. . . , LF (2 ≤ Li ≤ N para i = 1, 2,.,.,. F), representando os marcos onde seus amigos estão. Você pode assumir que as trilhas entre os marcos são tais que existe exatamente uma rota que vai para baixo a partir do topo da montanha para cada outro referencial.;Apresente uma linha com um inteiro que representa o montante total mínimo de energia necessária para visitar todos os seus amigos a partir do topo da montanha.;True;8 / 10;1113;279;25.07%
1752;Jornada Pelo Reino;Grafos;10;"O reino de Quadradônia é dividido em províncias que formam um padrão de grade de R linhas e C colunas. Diz a lenda que muitas coisas maravilhosas esperam ser descobertas em algumas das províncias, embora não esteja claro se você pode realmente encontrar a forma sólida indescritível de histórias de água chamada de ""gelo"", ou se são apenas dragões.

                    Você está planejando uma viagem através do reino para descobrir, mas as estradas são perigosas por isso você tem que ter muito cuidado. Para ir de uma província para outra que você gostaria de usar o sistema de transporte conveniente escoltado, gerido pela Interprovincial Communication & Peregrination Company (ICPC). Em cada província, o ICPC fornece uma carruagem fortemente guardada para você viajar para qualquer outra província em um retângulo que a contém, com a mesma taxa fixa (que pode no entanto variar de uma província para outra). Mais formalmente, na província na linha i-ésima e coluna j-ésima você pode alugar um carro escoltado por um custo de Vij, que lhe permite viajar com segurança para qualquer província na maioria das linhas Rij de distância da linha i, e na maioria das colunas Cij de distância da coluna j (isto é, ter número da linha i' e coluna j' com número | i - i' | ≤ Rij e | j - j' | ≤ Cij).

                    Em sua jornada você deseja visitar N províncias p1, p2,. . . , pN, nessa ordem. Andando à procura de aventuras é um negócio caro e seu orçamento é limitado, então você gostaria de gastar o mínimo possível no transporte. Portanto, você gostaria de calcular o custo mínimo de cada etapa de sua viagem, ou seja, o custo mínimo dos carros que você tem que alugar para ir da província pk para a província pk + 1, para k = 1, 2,. . . , N - 1.";A primeira linha contém três inteiros R, C e N, representando respectivamente o número de linhas, o número de colunas e o número de províncias que deseja visitar (1 ≤ R, C ≤ 500 e 2 ≤ N ≤ 5). As linhas são numeradas de 1 a R e colunas são numeradas de 1 a C. As próximas 3 × R linhas descrevem o sistema de transporte escoltado do ICPC por meio de três grupos de R linhas cada, com cada linha contendo C inteiros. Na i-ésima linha do primeiro grupo, o j-ésimo número representa o custo Vij de alugar um carro na província de linha i e coluna j, enquanto os números correspondentes no segundo e terceiro grupo representam, respectivamente, Rij e Cij (1 ≤ Vij ≤ 1000, 0 ≤ Rij ≤ R e 0 ≤ Cij ≤ C, para i = 1, 2,..., R e j = 1, 2,..., C). As N linhas seguintes descrevem as províncias p1, p2,. . . , pN que você quer visitar, na mesma ordem que você quiser visitá-los. O k-ésimo número dessas linhas descreve a província pk com dois inteiros Ik e Jk, indicando que pk esta na linha Ik e coluna Jk (1 ≤ Ik ≤ R e 1 ≤ Jk ≤ C para k = 1 , 2,..., N).;Apresente uma linha com N - 1 inteiros que representam o custo mínimo de cada etapa de sua viagem, ou o valor -1 se é impossível viajar usando o sistema de transporte escoltado do ICPC para aquela etapa. Mais precisamente, para k = 1, 2,. . . , N - 1, o k-ésimo número deve ser o custo mínimo dos carros que você tem que alugar para ir da província pk para província pk + 1, utilizando o sistema escoltado de transporte do ICPC , ou o valor -1 se é impossível viajar da província pk para província pk + 1 com este sistema.;False;10 / 10;216;70;32.41%
1753;Cavaleiros Da Tàvola Redonda;Ad-Hoc;9;"Todos os meses o Rei Arthur celebra uma reunião do Conselho Superior. Os K cavaleiros que participam desses encontros são conhecidos como Os Cavaleiros da Távola Redonda, provavelmente porque eles se sentam em uma enorme mesa de carvalho redonda tendo K lugares e um grande trono com uma espada e uma pedra esculpidas em sua parte traseira.

                    Para a reunião de hoje, cada cavaleiro recebeu um número entre 1 e K que indica o assento que ele deve tomar durante a reunião. Os assentos são numerados no sentido horário de 1 a K, sendo o assento numerado 1 o primeiro a esquerda do grande trono. Obviamente, o próprio rei não foi dado um número, porque ele se senta no trono. O escudeiro do Rei Arthur garantiu que não há dois cavaleiros com o mesmo número portanto não deverá haver nenhum problema.

                    Como de costume, o rei foi o primeiro a entrar na sala do conselho hoje. De acordo com as regras de protocolo, ele sentou-se no seu trono e preparou-se para receber os K cavaleiros que devem entrar e sentar-se um a um. Após os D primeiros cavaleiros chegarem, o rei observou que alguns deles poderiam ter-se sentado em assentos errados, porque eles estavam distraídos falando sobre quem iria ganhar o próximo torneio. Que confusão! O escudeiro do Rei Arthur prontamente interveio e deu instruções para o restante K - D cavaleiros. Cada um deles deve entrar na sala do conselho e tentar sentar-se em seu assento legítimo; se sua cadeira já está ocupada, o cavaleiro deve caminhar no sentido horário ao redor da mesa e sentar no primeiro assento desocupado que ele encontra. Assim, a distribuição final de cavaleiros em torno da mesa depende da ordem em que entram na sala.

                    Rei Arthur está agora interessado em saber o número de distribuições distintas dos K cavaleiros ao redor da mesa, dadas as cadeiras ocupadas pelos primeiros D cavaleiros. Duas distribuições são consideradas distintas quando há pelo menos um cavaleiro que se sente em diferentes lugares em ambas as distribuições.

                    Como o Royal Advisor in Combinatorics and other Mathematics (ou Real ACM) a tarefa é atribuída a você. Você precisa dar uma resposta dentro de cinco horas em risco de perder o favor do rei. Anda logo!";A primeira linha contém dois inteiros K (1 ≤ K ≤ 106) e D (1 ≤ D ≤ 105), representando, respectivamente, o número de cavaleiros e o número de cavaleiros distraídos. Cada uma das linhas próximas D descreve um cavaleiro distraído diferente com dois inteiros A e B (1 ≤ A, B ≤ K), indicando que o cavaleiro que foi atribuído o assento A na verdade sentou-se no assento B. É garantido que não há dois cavaleiros que se sentaram no mesmo assento.;Apresente uma linha com um inteiro que representa o número de distribuições distintas dos K cavaleiros ao redor da mesa. Este número pode ser bastante grande, por isso imprima o resto da divisão por 109 + 7.;False;9 / 10;75;26;34.67%
1754;A Sala do Tempo;Matemática;5;"Na tentativa de parar Super Buu, Goten e Trunks entraram na Sala do Tempo para treinar. Dentro dessa sala o tempo passa mais rápido (1 segundo fora da sala pode ser equivalente a segundos, minutos, horas ou até mesmo dias dentro da sala). Goten e Trunks precisam de X segundos para finalizar o treinamento, porém Super Buu ficou impaciente e ordenou que Sr. Picollo o levasse até seus oponentes imediatamente.

                    Sr. Picollo usou seus poderes telepáticos para alertar os meninos (que até então estavam apenas brincando pela sala) e eles iniciaram o treinamento imediatamente.

                    Sr. Picollo tentou retardar ao máximo o trajeto até a entrada da Sala do Tempo, levando um tempo Y para tal.

                    Seja K a quantidade de segundos que se passa dentro da sala durante 1 segundo fora da mesma. Encontre o menor valor de K que permita que os meninos finalizem o treinamento antes da chegada de Super Buu. Considere que independente da duração do treinamento os meninos jamais param para descansar, afinal eles tem várias sementes dos Deuses para repor as energias e que o treinamento se encerra no momento que Super Buu passar pela porta.";A primeira linha da entrada contém um inteiro T (1 ≤ T ≤ 100), o número de caso de teste. As T linhas seguintes contém 2 inteiros cada: X (1 ≤ X ≤ 1015) e Y (1 ≤ Y ≤ 105), o tempo necessário para completar o treinamento e o tempo do trajeto de Super Buu.;Para cada caso de teste imprima uma única linha contendo o inteiro K.;False;5 / 10;1000;316;31.60%
1755;O Troco;Ad-Hoc;6;"O pai de Joãozinho lhe pediu que fosse à venda comprar um determinado ingrediente e lhe deu as seguintes instruções:

                    1 - Não me importo com qual marca você vai escolher, contanto que compre o máximo possível.

                    2 - Não volte de mãos vazias (compre pelo menos um produto).

                    3 - Não me traga produtos de marcas diferentes.

                    4 - Se não violar nenhuma das restrições anteriores o troco é seu.

                    Joãozinho não é muito bom em matemática e pediu sua ajuda para escolher a marca que maximizaria seu troco de acordo com as restrições impostas. Você não gosta de pessoas preguiçosas e prometeu a Joãozinho que faria um programa para resolver apenas uma parte do problema: encontrar o valor máximo (sem dizer qual marca ele deve escolher para obter tal troco).";"A primeira linha contém um inteiro T (1 ≤ T ≤ 2000), o número de casos de teste.

                    Cada caso de teste é composto por 2 linhas. A primeira linha contém os inteiros D (10 ≤ D ≤ 500) e N ( 2 ≤ N ≤ 300), indicando a quantia que Joãozinho levou ao mercado e a quantidade de marcas diferentes disponíveis (assuma que o estoque da loja é suficiente para vender qualquer quantidade de qualquer produto), respectivamente.

                    A segunda linha contém N números de ponto flutuante pi, representando o preço da unidade fabricada pela marca mi.

                    Assuma que não haverá nenhum preço com mais de 2 dígitos após o ponto decimal.";Para cada caso de teste imprima uma única linha contendo um valor de ponto flutuante com 2 dígitos após o ponto decimal: o maior troco que Joãozinho poderá obter.;False;6 / 10;1927;423;21.95%
1756;Algoritmo Genético;Matemática;3;"Algumas disciplinas de computação são muito teóricas e as vezes entediantes. Na tentativa de despertar o interesse dos alunos pelo conteúdo, o professor de Inteligência Artificial, sempre que possível, propõe um desafio envolvendo o conteúdo visto na aula do dia.

                    A aula de hoje foi sobre algoritmos genéticos e procedimento explicado pelo professor foi o seguinte:

                    A partir de 2 indivíduos (duas sequências de N bits: x0x1...xN-1) A e B, escolhe-se um posição de corte Y ( 1 ≤ Y < N) e então ocorre a recombinação (crossover), gerando 2 novos indivíduos: o primeiro é formado pelos bits x0...xY-1 do indivíduo A seguidos dos bits xY..xN-1 do indivíduo B, o segundo é formado pelos bits x0...xY-1 do indivíduo B seguidos dos bits xY..xN-1 do indivíduo A.

                    A imagem abaixo ilustra o resultado do crossover com Y = 5.

                    

                    Após o crossover, cada bit dos novos indivíduos pode sofrer mutação (alterar seu valor) de acordo com uma probabilidade de mutação P especificada.

                    O enunciado do desafio deixado pelo professor foi o seguinte:
                    ""Escreva um programa que receba 3 indivíduos, a posição do ""corte"" e a probabilidade de mutação. O programa deverá calcular qual a probabilidade de se obter o terceiro indivíduo como resultado de um crossover entre os dois primeiros.""";"A primeira linha contém um inteiro T (1 ≤ T ≤ 50), o número de casos de teste.

                    Cada caso de teste é composto por 5 linhas.

                    A primeira linha contém o inteiro N (2 ≤ N ≤ 8), a quantidade de bits de cada indivíduo.

                    A segunda linha contém um número inteiro Y (1 ≤ Y < N) seguido de um número de ponto flutuante P (0 ≤ P ≤ 1), a posição de corte e probabilidade de ocorrência de mutação, respectivamente.

                    A terceira linha contém o primeiro indivíduo que será utilizado no crossover.

                    A quarta linha contém o segundo indivíduo que será utilizado no crossover.

                    A quinta linha contém o indivíduo que será comparado com os possíveis resultados do crossover.";Para cada caso de teste imprima uma única linha contendo a resposta com 7 dígitos após o ponto decimal.;True;3 / 10;70;42;60.00%
1757;Viagem Barril;Grafos;6;"Donkey Kong tem alguns assuntos pendentes a resolver ao redor do país e como está com muita pressa, optou por se deslocar de um local à outro através do SUTVB (Sistema Unificado de Transporte Via Barril). 

                    

                    Cada uma das cidades possui um único barril que consegue disparar para o barril de qualquer outra cidade que o ""passageiro"" desejar ir.

                    Donkey quer fazer uma viagem discreta e pediu sua ajuda para encontrar um conjunto de rotas que minimize a quantidade de disparos em que ele é visto.

                    O conjunto de rotas que Donkey deseja encontrar depende do posicionamento das nuvens. Como mostra a figura acima, os barris ficam imediatamente acima das nuvens. O plano de Donkey é utilizar as nuvens para esconder seu trajeto. Pra facilitar seu trabalho, Donkey te emprestou um radar que mostra quais rotas podem ser visualizadas do solo em um dado momento.

                    Sua tarefa é dizer a Donkey qual a menor quantidade de rotas visíveis que ele precisará usar de modo que consiga chegar a qualquer cidade que deseje.

                    Cada rota é considerada apenas uma vez na contagem, independente da direção em que for usada. Em outras palavras, Se a rota A-B é visível e ele usar 10 vezes essa rota, só será contabilizado como 1 rota visível.";"A primeira linha da entrada conterá um inteiro T (1 ≤ T ≤ 100) indicando o número de casos de teste.

                    A primeira linha de cada caso de teste contém os inteiros N (1 ≤ N ≤ 100) e V (0 ≤ V < N2/2), a quantidade de cidades e a quantidades de rotas visíveis do solo, respectivamente.

                    As próximas V linhas conterão os inteiros Ai e Bi (Ai ≠ Bi; 0 ≤ Ai, Bi < N) , indicando que a rota entre os barris das cidades Ai e Bi​ encontra-se visível do solo. Em nenhum caso de teste o par Ai, Bi aparecerá mais que uma vez.";Para cada caso de teste imprima uma única linha contendo o inteiro que representa a menor quantidade de rotas visíveis que Donkey deverá usar.;True;6 / 10;633;195;30.81%
1758;Pontos Extras;Ad-Hoc;4;"A instituição em que o professor Charles ensina possui o seguinte critério para decidir a aprovação de um aluno:

                    

                    média ≥ 7.0 = APROVADO

                    4.0 ≤ média < 7.0 = PROVA FINAL

                    média < 4.0 = REPROVADO

                     

                    O professor Charles resolveu dar uma bonificação aos seus alunos com base no seu desempenho e estabeleceu os seguintes critérios:

                    1 - Arredondamentos que prejudiquem o aluno serão desconsiderados, permanecendo a nota original.

                    2 - Nenhum arredondamento deve modificar a situação do aluno (APROVADO, FINAL, REPROVADO).

                    3 - Se o aluno foi aprovado ou se tem nota suficiente para realizar a prova final, a média desse aluno será substituida pela maior nota obtida nas provas.

                    4 - Os alunos reprovados foram preguiçosos e não devem receber nenhuma pontuação extra. 

                    A aplicação da regra 3 deve ocorrer sempre que possível, desde que não viole as regras 1 ou 2.

                    Escreva um programa que recebe as notas que os alunos obtiveram em cada prova e calcule a sua média conforme os critérios do professor.";"A primeira linha da entrada contém o inteiro T ( 1 ≤ T ≤ 5000) que indica a quantidade de casos de teste.

                    A primeira linha de um caso de teste contém os inteiros P (2 ≤ P ≤ 5) e N (2 ≤ N ≤ 50), indicando a quantidade de provas que o professor realizou e a quantidade de alunos matriculados na turma, respectivamente.

                    As N linhas seguintes conterão P números de ponto flutuante com um dígito após o ponto decimal, indicando as notas (0.0 ≤ nota ≤ 10.0)  obtidas pelo i-ésimo aluno em cada uma das provas aplicadas pelo professor.";Para cada aluno imprima uma única linha contendo a média obtida pelo aluno após o arredondamento do professor. A média deve ter exatamente dois dígitos após o ponto decimal.;False;4 / 10;1469;526;35.81%
1759;Ho Ho Ho;Iniciante;3;"Papai Noel está brincando com seus duendes para entretê-los durante a véspera do Natal. A brincadeira consiste nos elfos escreverem números em pedaços de papel e colocarem no gorro do Papai Noel. Após todos terminarem de colocar os números Noel sorteia um papel e aquele número representa quantos ""Ho"" o Noel deve falar.

                    Seu trabalho é ajudar o Papai Noel montando um problema que mostre todos os ""Ho"" que ele deve falar dado o número sorteado.";"A entrada é composta por um único inteiro N (0 < N ≤ 106) representando quantos ""Ho"" serão falados por Noel.";"A saída é composta por todos ""Ho"" que Papai Noel deve falar separados por um espaço. Após o último ""Ho"" deve ser apresentado um ""!"" encerrando o programa.";False;3 / 10;27285;14684;53.82%
1760;Floco de Neve de Koch;Matemática;1;"A Lapônia é um lugar pacato e muito frio. Não há muita coisa para se fazer por lá depois do Natal (época na qual os elfos trabalham incessantemente na fábrica de brinquedos do Papai Noel). O marasmo fez com que o elfo Tod pesquisasse sobre a única coisa que mais se via na Lapônia: Neve.

                    Em seus estudos, Tod descobriu coisas muito interessantes sobre os flocos de neve. Como fazia buscas incessantes nos sites por informações sobre flocos de neve, acabou encontrando links que falavam sobre uma teoria chamada floco de Neve de Koch.

                    Tod achou a teoria muito interessante porque o floco de neve de Koch é um fractal que se obtém a partir de um triângulo equilátero. A seguir, dividimos cada um de seus lados em três partes iguais e acrescentamos, a partir de cada parte intermediária, um novo triângulo equilátero de lado igual a 1/3 da medida do lado do triângulo inicial.

                    A cada iteração o perímetro do fractal aumenta e após n iterações, o mesmo tende ao infinito mas a área permanece menor que a área do círculo que circunda o triângulo original. Portanto, uma linha infinitamente longa é rodeada por uma área finita.

                    Com base nessas informações e sabendo que a área de um triângulo equilátero é igual a l2 √3 /4 (onde l é a medida do comprimento de um lado do triângulo equilátero) sua tarefa é ajudar Tod a encontrar a área de um floco de neve de Koch com base na medida do comprimento de lado do triângulo equilátero dado.";A entrada possui vários casos de teste e consiste em um número inteiro l (1 ≤ l ≤ 1000) que representa a medida do comprimento de um lado do triângulo equilátero em milímetros. O final da entrada é determinado por EOF.;A saída deve apresentar o valor também em milímetros da área do floco de neve de Kock com duas casas decimais.;True;1 / 10;1507;980;65.03%
1761;Decoração Natalina;Matemática;2;"Neste Natal, Papai Noel designou alguns de seus mais dedicados elfos para enfeitar o quintal da fábrica de presentes no Polo Norte. No quintal haviam vários pinheiros, de tamanhos diversos.

                    Papai Noel orientou aos elfos que para enfeitar uma árvore com cordões luminosos, o tamanho dos mesmos deveria ser 5 vezes o tamanho da árvore.

                    Para descobrir a altura de cada árvore, Papai Noel deu a eles um teodolito velho (aparelho utilizado para medir ângulos) e mandou que utilizassem conceitos trigonométricos para descobrir a altura de cada árvore.

                    Sua tarefa é ajudar os elfos a descobrir uma forma de calcular a quantidade de cordões luminosos necessários para cada árvore.

                    Considere para este desafio que o teodolito fica posicionado na altura de cada elfo e que essa altura precisa ser computada. O teodolito informará valores em graus. Utilize neste problema PI = 3.141592654.";A entrada possui vários casos de teste. Cada caso de teste é composto de um valor de ponto flutuante de dupla precisão A que é o ângulo calculado pelo teodolito (1.00 < A < 90.00), um valor de ponto flutuante de dupla precisão B (1 ≤ B ≤ 100) que corresponde à distância entre o teodolito e a árvore e um valor de ponto flutuante de dupla precisão C (0,50 ≤ C ≤ 1.50  ) que é a altura do elfo medidor. O final da entrada é determinado por EOF.;A saída deverá apresentar a quantidade de cordão luminoso necessário para adornar a árvore. Observação: Os valores deverão ser arredondados em 2 casas decimais.;False;2 / 10;1377;1039;75.45%
1762;Trenós do Papai Noel;Estruturas e Bibliotecas;8;"Todos os anos quando chega o natal, o Papai Noel tem a importante e difícil tarefa de entregar milhares de presentes a todas as crianças do mundo. O que ninguém sabe, é que ele desenvolveu uma maneira eficaz para conseguir entregar todos os presentes antes que o natal acabe, e essa maneira consiste numa infinidade de trenós espalhados pelo globo entregando simultaneamente todos os presentes. Dessa maneira fica muito mais fácil para completar as entregas, mas por conta de ser um número muito grande de presentes a ser entregue, o Papai Noel sempre tem dificuldades em saber quantos trenós ele disponibilizará para cada lote de presentes. Noel tem uma lista com o número de presentes de cada lote contendo o nome do presente e o seu peso, e ele também sabe a capacidade de carga de cada trenó. Sabendo essas informações, todo ano, Noel pede ajuda a um estudante para desenvolver um programa que possa ajuda-lo a saber quantos trenós serão necessários para cada lote.

                    Sua tarefa é desenvolver um programa que armazene um número determinado de presentes de um lote, cada presente é armazenado com o nome do brinquedo e o seu respectivo peso em Quilogramas(considerar duas casas após a vírgula), depois de armazenar a lista, você irá informar a capacidade de carga do trenó, e após você deve informar a lista de pedidos, contendo o nome do presente e a sua quantidade, feito isso você deve calcular o peso total dos presentes e determinar quantos trenós serão necessários para efetuar a entrega.";"A primeira linha contem um número inteiro Y correspondendo a o número de casos de testes, após você deverá informar um inteiro T (0 < T < 1000) que corresponde a o número de presentes do lote, após você deve ler a lista de presentes, uma string N com o nome do presente e um valor de ponto flutuante K (0 < K <= 100 ) que corresponde ao peso em quilogramas do presente, o nome e o peso devem ficar em linhas separadas. Após inserir todos os T presentes você deve informar um valor de ponto flutuante M (0 < M <= 100) que corresponde em quilogramas a capacidade de carga do trenó, considerar duas casas após a vírgula. Após inserir o valor M você deve informar a lista que contém X pedidos da seguinte forma, uma string P correspondendo ao nome do presente, na próxima linha um valor inteiro J (0 < J <= 100) que corresponde a quantidade desse presente. Essa lista só termina quando forem inseridos um ""-"" para o nome do presente e ""0"" para o peso do presente.";"Na primeira linha de saída deverá ser informado o peso total de presentes da lista de pedidos, com duas casas após a vírgula. Na segunda linha será informado o número de trenós necessários para levar os presentes da lista de pedidos. Caso seja inserido na lista de pedidos um presente que não consta na lista do lote dos brinquedos, deverá ser impresso a seguinte mensagem “NAO LISTADO: ” seguido pelo nome do presente. 
                    Deixar uma linha em branco após a impressão de cada caso de teste.";False;8 / 10;327;162;49.54%
1763;Tradutor do Papai Noel;Estruturas e Bibliotecas;4;"Nicolau já está bastante cansado e sua memória não é mais a mesma. Você, como navegador, deverá auxiliar o Papai Noel a gritar a frase ""Feliz Natal"" no idioma correto de cada país de que trenó está sobrevoando.

                    Como você é um elfo muito esperto, você já criou um pequeno app no seu celular (sim, elfos tem celular) que irá lhe informar a frase no idioma correto dado o nome do país. Como o trenó é moderno (foi atualizado no ano 2000) ele exibe no painel de navegação o nome do país atual.

                    

                    Os dados inseridos no seu app foram:

                    brasil              Feliz Natal!
alemanha            Frohliche Weihnachten!
austria             Frohe Weihnacht!
coreia              Chuk Sung Tan!
espanha             Feliz Navidad!
grecia              Kala Christougena!
estados-unidos      Merry Christmas!
inglaterra          Merry Christmas!
australia           Merry Christmas!
portugal            Feliz Natal!
suecia              God Jul!
turquia             Mutlu Noeller
argentina           Feliz Navidad!
chile               Feliz Navidad!
mexico              Feliz Navidad!
antardida           Merry Christmas!
canada              Merry Christmas!
irlanda             Nollaig Shona Dhuit!
belgica             Zalig Kerstfeest!
italia              Buon Natale!
libia               Buon Natale!
siria               Milad Mubarak!
marrocos            Milad Mubarak!
japao               Merii Kurisumasu!

                    Para não correr o risco de infomar o nome errado você decidiu testar o aplicativo mais algumas vezes.";Você irá testar o seu aplicativo com diversos nomes de paises, simulando os dados informados pelo painel de navegação do trenó.;"O seu aplicativo deverá mostrar na tela a frase no idioma correto. Caso ela não esteja cadastrada, você deverá exibir a mensagem ""--- NOT FOUND ---"" para que depois dos testes você possa completar o banco de dados.";True;4 / 10;4457;1878;42.14%
1764;Itinerário do Papai Noel;Grafos;3;Antes de Papai Noel começar a fazer as suas viagens de trenó pelo Brasil para entregar os presentes de Natal, ele solicitou que você o ajudasse a desenhar um mapa com todas as cidades que deverá visitar. A regra para desenhar este mapa é a seguinte: a soma de todas rotas (distâncias entre duas cidades) existentes no mapa deve ser a menor possível e deve-se poder chegar em qualquer cidade, independente de onde se esteja partindo. Noel não se importa de passar por uma determinada cidade mais de uma vez, contanto que ele utilize apenas as rotas desenhadas no mapa.;A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros, M (2 ≤ M < 40000) e N (1 ≤ N < 50000), que indicam respectivamente a quantidade de cidades e a quantidade de caminhos existentes ligando estas cidades. A entrada é terminada por M = N = 0. Seguem N conjuntos de três valores X (0 ≤ X), Y (Y < M) e Z (1 ≤ Z ≤ 999), especificando que há uma rota bidirecional entre X e Y com distância de Z kilômetros, sendo que X ≠ Ye a soma total de todas as rotas de cada mapa é menor do que 231.;Para cada caso de teste de entrada, seu programa deverá imprimir um único valor, indicando a soma de todas as distâncias ou rotas existentes no seu mapa.;False;3 / 10;3130;1399;44.70%
1765;Trapézios de Natal;Ad-Hoc;3;"Jorge era um cara muito determinado a criar trapézios doces de Natal. Os trapézios são feitos de fios de balas puxa-puxa e recheados com sorvete. Após assados eles assumem uma perfeita forma bidimensional de um trapézio. Por padrão, todos os trapézios possuem a mesma altura, 5cm, mas as suas bases podem alterar de tamanho dependendo da disponibilidade de balas puxa-puxa que Jorge possui. Um dia Jorge estava curioso para saber quanto de sorvete ele estava ocupando para cada tamanho de trapézio que fazia, então ele chamou você para ajudá-lo.

                    Você deve fazer um programa que dados quantos tamanhos diferentes de trapézios vão ser feitos, quantos trapézios daquele tamanho serão produzidos e as medidas das bases de puxa-puxa, você diga quantos cm2 de soverte serão ocupados por cada tamanho.";A entrada é composta por diversos casos de teste. A primeira linha de cada caso de teste começa com um inteiro T (0 ≤ T ≤ 50) indicando quantos tamanhos diferentes haverá nessa fornada. As T linhas seguintes contém 3 valores, um inteiro Q (0 ≤ Q ≤ 50) indicando a quantidade de trapézios feitos com as medidas A e B  (0 ≤ A,B ≤ 50) ambos de dupla precisão antecedidos por Q. A entrada termina quando T for zero.;Para cada caso de teste apresente o valor de sorvete usado, em cm2, para cada um dos tamanhos. Após cada caso de teste, imprima uma linha em branco.;False;3 / 10;1753;1012;57.73%
1766;O Elfo das Trevas;Estruturas e Bibliotecas;4;"O estábulo onde ficam as renas foi intencionalmente aberto pelo Elfo das Trevas permitindo que cada uma delas corresse e voasse livremente pela fábrica do Papai Noel, causando o maior transtorno. Os elfos estão tentando desesperadamente fazer o possível para deixar o trenó pronto para embarque. Você ficou responsável por colocar cada rena na sua posição correta assim que ela é capturada por um dos outros elfos.

                    

                    Você sabe que o estábulo segue uma organização baseada na ordem que as renas irão ocupar no trenó. Desta forma, na hora da partida todas podem ser facilmente posicionadas. Diferentemente do que muitos pensam, as renas são posicionadas em uma fila única à frente no trenó. Nem todas as renas do estábulo são utilizadas em cada viagem, isto depende da carga total do trenó.

                    Você conseguiu a lista com as características que são utilizadas para determinar a ordem de rena. Elas devem ser ordenadas primeiramente de forma decrescente por peso. Caso duas ou mais apresentarem o mesmo peso elas devem ser ordenadas de forma ascendente pela idade, após pela altura e caso ainda persista empate, pelo nome.

                    Utilizando seu computador mágico de última geração você quer escrever um programa que ordene as renas, de acordo com as características informadas, e exiba somente o número exato de renas que serão utilizadas no trenó (de forma ordenada).";Este problema possui diversos casos de teste. A primeira linha de entrada contém um inteiro T (1 ≤ T ≤ 105) que indica o número de casos de teste a seguir. A primeira linha de cada caso de teste contém dois inteiros N e M (5 ≤ N, M ≤ 103) que indicam respectivamente o número total de renas e o número de renas que irão puxar o trenó. Na sequência serão informados uma string S seguida por 2 inteiros P (1 ≤ P ≤ 300) e I (1 ≤ I ≤ 300) e por um número de ponto flutuante A (0.00 ≤ A ≤ 3.00), indicando respectivamente o nome, o peso, a idade e a altura de cada uma das renas. O nome de cada uma das renas é composto somente por uma palavra com até 100 caracteres.;"Para cada caso de teste você deverá exibir a mensagem ""CENARIO {i}"", onde i indica o caso de teste atual, seguido da posição e o nome de cada umas das M renas que irão puxar o trenó, ordenadas conforme descrito acima.";True;4 / 10;3624;1462;40.34%
1767;Saco do Papai Noel;Paradigmas;6;"Papai Noel vai começar a fazer as suas viagens de trenó para entregar os presentes de Natal. A SBC (Sociedade Brasileira de Carregadores) determinou que o máximo de peso de cada saco com presentes, poderá ser 50 kgs, para que os elfos, que são ""puxa-sacos"" ou ajudantes de Papai Noel não fiquem com dores nas costas ao carregarem o trenó e também para que o Papai Noel não se machuque ao entregar os brinquedos.

    				Uma vez que todos os brinquedos estão agrupados em pacotes, sua tarefa é auxiliar com um programa que agrupe o máximo de brinquedos possíveis dentro do peso limite de 50 kgs. Logo na sequência Y-URI, que é o elfo chefe, levará este saco até o trenó para que Noel possa seguir com sua viagem.";A entrada contém vários casos de teste. A primeira linha de entrada contém um inteiro N que é o número de casos de teste, ou melhor, o número viagens que Papai Noel irá fazer para entregar os presentes. Cada viagem inicia com um inteiro Pac (1 < Pac < 100) que indica a quantidade de pacotes disponíveis para esta viagem. As próximas Pac linhas irão conter dois valores inteiros cada uma, qt (1 < qt ≤ 300) e peso (1 ≤ peso ≤ 50) que são respectivamente a quantidade de brinquedos e o peso de cada um destes pacotes, separados por um espaço em branco.;"Para cada caso de teste de entrada, seu programa deverá imprimir três linhas de saída, com mensagem correspondente conforme o exemplo abaixo, seguidas por uma linha em branco. A primeira destas linhas deverá conter a quantidade de brinquedos que Y-URI irá carregar até o trenó. A segunda linha conterá o peso total destes brinquedos. A última linha, por pedido de Noel, será a quantidade de pacotes que sobraram para uma viagem futura. No segundo caso de teste abaixo, por exemplo, foram selecionados para a viagem 106 brinquedos que estão agrupados nos pacotes com 24, 2, 3, 4, 5 e 8 kg, somando um total de 46 kg.
					Para a maior quantidade de brinquedos selecionada, haverá apenas uma quantidade de peso e pacote que irá sobrar.";True;6 / 10;2983;1076;36.07%
1768;Árvore de Natal;Strings;5;"As crianças adoram desenhar árvores de natal e você desafiou algumas delas a desenharem árvores de diversos tamanhos com apenas com o caractere asterisco ""*"".

A regra é simples. De baixo para cima, o tronco da árvore consiste de 3 asteriscos e depois 1. Em seguida vem o restante da árvore, com cada fileira de folhas iniciando no tamanho que você determinou e diminuindo de dois em dois, até chegar na copa da árvore que terá apenas um asterisco. Note que para isso dar certo, somente será permitido tamanhos ímpares para estas árvores.";A entrada contém vários casos de teste e termina com EOF. Cada caso de teste consiste em um inteiro N (2 < N < 100).;Para cada caso de teste de entrada, seu programa deverá desenhar uma árvore conforme especificação acima e exemplo abaixo, com uma linha em branco após cada árvore.;False;5 / 10;4311;1693;39.27%
1769;CPF 1;Ad-Hoc;4;"Você foi contratado pelas Indústrias Udilandenses (INUDIL) para desenvolver uma maneira de verificar se o Cadastro de Pessoa Física (CPF) indicado por um cliente era válido ou não. Conversando com amigos, você chegou à conclusão de que um CPF seria válido se a soma de todos os seus dígitos resultasse em número múltiplo de 11. Após verificação minuciosa, você descobriu que essa maneira só funciona em cerca de 80% dos casos, e você precisa de mais do que isso para garantir a qualidade do seu trabalho. Após pesquisar mais, você descobriu que dos 11 dígitos do CPF, os dois últimos são verificadores e dependem dos 9 dígitos anteriores. Vamos introduzir alguma notação. Considere um CPF com os seguintes dígitos

a1a2a3.a4a5a6.a7a8a9-b1b2

Para descobrirmos o dígito b1, procedemos da seguinte maneira: multiplicamos o primeiro por 1, o segundo por 2, o terceiro por 3, o quarto por 4 e vamos assim até multiplicarmos o nono por 9. Então, somamos tudo isto. Após termos somado tudo, dividimos por 11. O dígito b1 será o resto da divisão (ou 0, caso o resto seja 10).

Para o segundo dígito verificador, temos o seguinte: multiplicamos o primeiro por 9, o segundo por 8, o terceiro por 7, o quarto por 6 e vamos assim até multiplicarmos o nono por 1. Então, somamos tudo isto e dividimos por 11. O dígito b2 será o resto da divisão (ou 0, caso o resto seja 10).

Sabendo que isso vale para 100% dos CPFs, sua missão é implementar um programa que, dado um CPF, diga se ele é válido ou não.";"A entrada contém um número desconhecido de CPFs, que não excede 10000 casos. Em cada linha, um CPF na forma

d1d2d3.d4d5d6.d7d8d9-d10d11";"Se o CPF informado for válido, escreva ""CPF valido"". Caso contrário, escreva ""CPF invalido"".";False;4 / 10;4597;1690;36.76%
1770;Shuffle;Ad-Hoc;2;"Sua banda favorita acaba de lançar um novo álbum, e para tornar a experiência mais empolgante você decidiu escutar as músicas em uma ordem aleatória. Para isto você escreveu um algoritmo que iria montar uma playlist com K músicas desse álbum. O problema, porém, é que seu algoritmo não é muito eficiente na forma que as músicas são escolhidas, de forma que algumas músicas poderiam ser tocadas repetidas vezes antes que outras fossem tocadas ao menos uma vez.

                    Dado o número de músicas do álbum, a duração de cada música, e a playlist gerada pelo seu algoritmo, diga quanto tempo se passou até que você tivesse escutado todas as músicas do álbum ao menos uma vez, se isso for possível.";"Haverá no máximo 150 casos de teste. Cada caso de teste inicia com dois inteiros M e K, indicando o número de músicas do álbum e o número de músicas na playlist do seu algoritmo (1 ≤ M ≤ 100, 1 ≤ K ≤ 1000).

                    Em seguida haverá M inteiros mi, indicando que a i-ésima música do álbum dura mi minutos (1 ≤ mi ≤ 300, para todo 1 ≤ i ≤ M).

                    Em seguida haverá K inteiros ki, indicando que a i-ésima música da playlist é a música de faixa número ki (1 ≤ ki ≤ M, para todo 1 ≤ i ≤ K).

                    A entrada termina com final de arquivo (EOF).";Para cada caso de teste imprima uma linha, contendo um inteiro, indicando quanto tempo se passou até que você tivesse escutado todas as músicas do álbum ao menos uma vez. Caso isso não seja possível, imprima -1.;False;2 / 10;506;359;70.95%
1771;Cartelas de Bingo Aleatórias;Ad-Hoc;5;"Você pediu ao estagiário que fizesse um programa para gerar cartelas de bingo aleatoriamente. O estagiário dispensou suas explicações, alegando que sabia como o bingo funcionava.

                    

                    E qual foi o resultado de tanta pressa? O estagiário simplesmente gerou 24 números aleatórios diferentes (no intervalo [1, 75] para cada cartela, sem respeitar os intervalos em que cada número pertencia (B -> [1, 15], I -> [16, 30], ...)).

                    Você decidiu então fazer um programa para julgar as cartelas geradas pelo programa do estagiário.";Cada caso de teste contém uma linha 24 números inteiros separados por espaço. O exemplo da figura conteria a sequência 15, 28, 36, 49, 65, 13, ..., 53, 69. A entrada termina com o fim de arquivo (EOF).;Para cada cartela analisada imprima uma linha contendo uma das três palavras: “OK” caso a cartela seja válida, “RECICLAVEL” caso exista alguma permutação de números que faça com que a cartela se torne válida ou “DESCARTAVEL” caso não exista tal permutação.;True;5 / 10;226;127;56.19%
1772;Embaralhamento de Bits;Ad-Hoc;7;"Para descobrir se seus alunos realmente entenderam a aula de representação binária de números inteiros, o professor Marcelo mostrou o seguinte problema:
                    “Dado um número inteiro e uma sequência de permutações dos bits de sua representação binária, encontre 3 números: o resultado final após todas as permutações, o maior e o menor valor encontrado durante as permutações”.

                    O professor prometeu um ponto extra na média pra quem resolvesse o problema primeiro. Como ele nunca fez isso na vida (dar ponto extra), você se apressou pra resolver o mais rápido possível com medo que o professor mudasse de ideia.";A primeira linha de um caso de teste contém os inteiros N (0 ≤ N ≤ 232 - 1)e K (1 ≤ K ≤ 100), representando o número inicial e a quantidade de permutações, respectivamente. As K linhas seguintes conterão dois inteiros A e B separados por espaço (0 ≤ A, B ≤ 31), indicando que deve haver a permutação entre os bits A e B do número N. A entrada encerra com N = K = 0.;Para cada caso de teste imprima uma linha contendo 3 inteiros separados por espaço: RES MAX MIN, onde RES representa o número N após as permutações, MIN representa o menor valor intermediário e MAX representa o maior valor intermediário. (MAX e MIN também devem considerar também os valores inicial e final de N).;True;7 / 10;1136;377;33.19%
1773;Preso no Castelo;Grafos;8;"Você está preso em um castelo com N salas e M corredores. As salas são enumeradas com números entre 1 e N, e você inicialmente está na sala de número 1. Cada um dos M corredores liga duas salas distintas. Para tentar encontrar a saída você decidiu visitar todas as salas deste castelo.

                    Todas estas salas, com exceção da sala de número 1 onde você está, precisam de uma chave para que possam ser visitadas. Para sua sorte, você encontrou algumas anotações no chão, dizendo onde estão todas estas chaves. Por exemplo, sejam S e D duas salas distintas do castelo, para visitar a sala D é preciso antes visitar a sala S que contém a chave que abre a sala D.

                    Dadas as informacões sobre as salas, corredores e as posições das chaves, descubra se é possível visitar todas as salas do castelo.";"Haverá no máximo 70 casos de tests. Cada caso de teste inicia com dois inteiros N e M, indicando o número de salas e corredores do castelo (2 ≤ N ≤ 103, 1 ≤ M ≤ 104).

                    Em seguida haverá M linhas contendo dois inteiros A e B cada, indicando que há um corredor que liga a sala A e B, o qual pode ser atravessado em ambas as direções (1 ≤ A, B ≤ N).

                    Em seguida haverá N-1 inteiros k2, k3, …, kN, indicando que na sala ki você pode encontrar a chave que abre a sala i (1 ≤ ki ≤ N, para todo 2 ≤ i ≤ N). Note que não é dada a sala que contém a chave da sala 1, pois tal sala já está aberta.

                    A entrada termina com final de arquivo (EOF).";Se for possível visitar todas as salas deste castelo imprima a palavra “sim”, caso contrário imprima a palavra “nao”.;False;8 / 10;693;168;24.24%
1774;Roteadores;Grafos;2;"Bruno é o responsável por configurar os roteadores de uma empresa. Os roteadores transmitem os dados entre si através dos cabos de internet, Os dados transmitidos podem trafegar por uma ou mais rotas para serem entregues ao destinatário.
					
					O preço dos cabos de rede utilizados nos roteadores da empresa pode chegar a ser muito caro, e a empresa precisa cortar gastos. Pensando nisso a empresa decidiu fazer algumas alterações na infra-estrutura de redes.
					
					Bruno deve modificar a infra-estrutura da rede da empresa de forma com que todos os roteadores consigam transmitir dados entre si e exista somente uma rota entre cada par de roteadores, economizando o máximo possível de cabos de internet.
					
					A sua tarefa é descobrir qual será o custo total com cabos que a empresa terá após as modificações feitas por Bruno. A figura abaixo mostra (a) a infraestrutura de redes atual; e (b) a infraestrutura de redes após as modificação feitas.";"A primeira linha é composta por dois inteiros R (3 ≤ R ≤ 60) e C (R ≤ C ≤ 200) representado respectivamente a quantidade de roteadores e a quantidade de cabos de internet utilizados atualmente.
					
					Seguem C linhas, cada uma contendo três inteiros V (1 ≤ V ≤ R), W (1 ≤ W ≤ R) e P (1 ≤ P ≤ 10000), sendo V e W um par de roteadores que estão conectados por um cabo de internet e P o preço do cabo de internet utilizado.";Seu programa deve imprimir um único valor inteiro que representa o custo total que a empresa gastará com cabos após as modificações.;True;2 / 10;2717;1308;48.14%
1775;André e os Mentos;Paradigmas;5;"André é um maratonista do CIn-UFPE. Todo sábado, durante os treinos, ele come de tudo: salgadinho, refrigerante, biscoito, água e mentos. Principalmente mentos. Mas o problema, porém, é que toda vez que André vai tirar alguns mentos do tubo, ele tem que parar de codar por alguns instantes, o que atrapalha sua concentração.

                    O mentos vem em um tubo com duas pontas. Cada vez que André quer chupar alguns, ele escolhe um certo sabor, e olha pra cada ponta do mentos. Em cada uma, se houver um mentos do sabor escolhido, ele pega. Se não houver nenhum daquele sabor nas pontas, ele não pega nenhum, e só parou de codar à toa. Para diminuir a perda de tempo durante o contest, André decidiu minimizar suas paradas para pegar mentos. Ele fez um corte fino ao longo do tubo, para poder ver com antecedência quais sabores tem dentro dele. Mas ele não vai pegar do meio, e fez isso apenas para poder decidir melhor quais sabores irá escolher tirar das pontas em cada uma de suas paradas.

                    Agora, André precisa calcular o número mínimo de vezes que ele deve parar para pegar seus mentos, seguindo o método descrito, até eles acabarem. Ele calcularia isso facilmente usando Transformada de Fourier, mas ele está ocupado codando uma questão. Por isso cabe a você, um companheiro de time dele, fazer isso para ajudá-lo.";A primeira linha contém um inteiro T (1 ≤ T ≤ 200), o número de casos de teste. Cada caso de teste começa com uma linha com um inteiro N, o número de mentos do tubo (1 ≤ N ≤ 1000). Na linha seguinte, há N inteiros, o i-ésimo deles é o número do sabor do i-ésimo mentos no tubo. Cada um desses números está entre 1 e 10⁹.;"Para cada caso imprima uma linha contendo ""Caso #X: Y"", onde X é o número do caso atual, iniciando em 1, e Y é a quantidade mínima de vezes que André precisa parar para pegar mentos.";False;5 / 10;447;234;52.35%
1776;Baile de Formatura;Matemática;8;"A turma de Ciência da Computação do CIn-UFPE de 2025.1 está se formando! É uma formatura muito especial, não só porque todos os projetões dos alunos desta turma viraram multinacionais, mas também porque o número 2025 é um quadrado perfeito! Por isso, os alunos decidiram tornar todos os números da cerimônia quadrados perfeitos: datas, quantidade de convidados, hash do nome da turma, até a quantidade de formandos (roleta russa FTW!).

                    Os organizadores da festa estavam conseguindo atender a essa exigência, até chegar a hora de comprar os salgados. Eles vinham em caixas com N salgados de uma vez. Se N não for um quadrado perfeito, terão que comprar mais de uma caixa. Calcule o número mínimo de salgados que eles devem comprar para atender à demanda excêntrica dos formandos.";A primeira linha contém um inteiro T (1 ≤ T ≤ 1000), o número de casos de teste. Cada uma das próximas T linhas contém um número N (1 ≤ N ≤ 10⁹), o número de salgados que vem numa caixa só.;"Para cada caso imprima uma linha contendo ""Caso #X: Y"", onde X é o número do caso atual, iniciando em 1, e Y é o número mínimo de salgados que eles devem comprar.";False;8 / 10;1203;200;16.63%
1777;Calçada da Fama;Paradigmas;8;"Na calçada da fama, há várias estrelas no chão com os nomes dos artistas. Alguns vândalos, talvez por inveja ou talvez pelo simples fato de querer vandalizar, estavam pichando várias dessas estrelas e colocando outros nomes no lugar:

                    

                    O prefeito, afim de tentar minimizar esse problema, instalou várias câmeras nessa calçada. A calçada pode ser vista como um segmento [1..N], onde cada posição possivelmente se encontra uma estrela.

                    

                    Cada câmera protege um segmento [a..b], inclusivos. Deseja-se saber, para cada estrela, se elas estão cobertas por uma câmera ou não. Você foi contratado para fazer esse trabalho.";A primeira linha da entrada contém T (1 ≤ T ≤ 100), o número de casos de teste. Cada caso de teste começa com dois inteiros N (1 ≤ N ≤ 10⁹) e C (1 ≤ C ≤ 10⁴), o tamanho da calçada e o número de câmeras, respectivamente. A seguir há C linhas, cada uma descrevendo uma câmera i com dois inteiros ai e bi (1 ≤ ai ≤ bi ≤ N), representando o intervalo coberto pela câmera. A seguir, há um número E (1 ≤ E ≤ 10⁴), o número de estrelas. A seguir há uma linha com E inteiros xi, indicando a posição da estrela i na calçada (1 ≤ xi ≤N).;Para cada caso imprima “Caso #X: Y”, onde X é o número do caso atual, começando em 1, e Y é o número de estrelas que estão cobertas por alguma câmera.;True;8 / 10;856;239;27.92%
1778;Defesa ao Grafo;Grafos;9;"Tower Defense é um famoso jogo de estratégia onde o jogador deve posicionar torres de defesa para proteger algo - seja um castelo, um tesouro ou até você mesmo - contra uma horda de monstros. Há várias variações do jogo: em alguns tipos, o mapa se assemelha a um tabuleiro, e os monstros tem um caminho especifico a seguir; em outros tipos, o mapa é aberto e os monstros podem chegar ao destino final por vários meios diferentes.

                    Graph Defense é uma variação do Tower Defense comum. Aqui, o mapa é representado como um grafo de N vértices e M arestas. Cada vértice é uma posição em que um monstro ou uma torre (ou ambos) podem estar, em um dado momento, e as arestas representam conexões bidirecionais entre esses vértices (i.e. se há uma aresta de u para v, um monstro que está no vértice u em um dado momento pode ir para o vértice v no momento seguinte e vice-versa). O castelo, que você deseja proteger, se encontra no vértice F.

                    Cada torre i possui um alcance Ci, um ataque Ai e está no vértice Vi. Todos os vértices que estão a no máximo Ci arestas de distância de Vi receberão Ai de dano a cada unidade de tempo. As torres não se movem, e existem desde o início do jogo. O castelo possui um escudo mágico protetor que faz com que nenhuma torre consiga atacar o vértice F onde ele se encontra, tampouco propagar o ataque, ou seja, o vértice F é uma barreira e nada passa por ele, a não ser os monstros, possivelmente.

                    Cada monstro i surge durante o decorrer do jogo em um vértice Ki e possui Hi pontos de vida. Os monstros nunca ficam parados e, a cada unidade de tempo, se movem para um vértice adjacente. Eles sempre vão seguir para o destino final, o castelo, pelo caminho que causará o menor dano possível. Os monstros morrem quando alcançam 0 ou menos pontos de vida. Um monstro só consegue invadir o castelo quando chega ao destino F vivo. Se houver uma torre que alcança a posição inicial Ki do monstro, ela irá inflingir dano já no primeiro instante em que o monstro surge. Um monstro pode surgir já no castelo.

                    Você foi contratado para fazer uma simulação do jogo. Depois de todas as aparições de monstros, quantos conseguiram invadir o castelo ainda com vida?";A primeira linha da entrada contém T (1 ≤ T ≤ 100), o número de casos de teste. Cada caso de teste começa com três inteiros N (1 ≤ N ≤ 1000), M (0 ≤  M ≤ (N*(N-1))/2) e F (1 ≤ F ≤ N), o número de vértices, arestas e o vértice em que se encontra o castelo, respectivamente. A seguir há M linhas, cada uma com dois inteiros u (1 ≤ u ≤ N) e v (1 ≤ v ≤ N e v != u), indicando a existência de uma aresta que liga os vértices u e v. Não haverá mais de uma aresta entre um mesmo par de vértices. A seguir há um número P (0 ≤ P ≤ 100), indicando o número de torres. Cada uma das próximas P linhas conterá três inteiros Vi (1 ≤ Vi ≤ N e Vi != F), Ai (1 ≤ Ai ≤ 10⁵), e Ci (1 ≤ Ci ≤ 1000), indicando que a i-ésima torre se encontra no vértice Vi com Ai de ataque e Ci de alcance, conforme explicado na descrição do problema. Pode haver mais de uma torre no mesmo vértice, e não haverá nenhuma torre no vértice F. Por fim, haverá um inteiro Q (1 ≤  Q ≤ 10⁴), indicando o número de monstros. Cada uma das próximas Q linhas contém dois inteiros Ki (1 ≤ Ki ≤ N) e Hi  (1 ≤ Hi ≤ 10⁸),  indicando o vértice onde o i-ésimo monstro nasce e a quantidade de pontos de vida que ele tem no começo, respectivamente. É garantido que existe pelo menos um caminho que, não fosse pelos ataques das torres, o monstro conseguiria chegar ao castelo.;Para cada caso imprima “Caso #X: Y”, onde X é o número do caso atual, começando em 1, e Y é o número de monstros que conseguiram chegar ao castelo com vida.;False;9 / 10;589;122;20.71%
1779;Estimando a Média;Ad-Hoc;4;Guga fez N provas em toda sua vida acadêmica. Agora, perto de se formar, ele quer saber qual foi o maior período de tempo contíguo em que ele possuiu a maior média aritmética.;A primeira linha contém um inteiro T (1 ≤ T ≤ 100), o número de casos de teste. Cada caso começa com uma linha com um número N (1 ≤ N ≤ 10⁵), o número de provas que Guga realizou em toda sua vida acadêmica. Em seguida, há uma linha com N inteiros Pi (0 ≤ Pi ≤ 10000), o i-ésimo inteiro representa a nota da i-ésima prova.;"Para cada caso imprima uma linha contendo ""Caso #X: Y"", onde X é o número do caso atual, iniciando em 1, e Y é o tamanho da maior sequência de provas que contém a maior média obtida por Guga.";False;4 / 10;2150;825;38.37%
1780;Formação de Robôs;Ad-Hoc;9;"A inventora de Heitor Ado, a doutora Ruína Balística, terminou a construção de um novo exército de robôs, e ele está pronto para ser enviado para conquistar o mundo. Os robôs possuem N cores diferentes, cada uma demonstrando o tipo de armamento que ele usa. Heitor mandou você, um de seus lacaios, organizá-los em formação, ou seja, em várias fileiras lado a lado, formando uma matriz. Heitor lhe deu certas regras para isso:

                    
                    	Deve haver no mínimo duas fileiras
                    	Todas as fileiras devem ter a mesma quantidade de robôs
                    	Considerando as cores dos robôs, toda a formação deve ser simétrica em relação a um eixo central paralelo às fileiras
                    

                    


                    As imagens acima mostram duas possíveis organizações dos robôs para diferentes quantidades de cores. As fileiras são dispostas verticalmente, e na primeira imagem o eixo simétrico paralelo às fileiras passa entre as duas fileiras do centro; já na segunda imagem, o eixo simétrico passa pelo centro da fileira central.

                    Se você não for capaz de organizar os robôs da forma como Heitor pediu, a doutora Ruína irá dissecá-lo e transformá-lo em um deles. Dadas as quantidades de robôs de cada cor, decida se você pode cumprir a ordem dele ou se deve fugir enquanto ainda há tempo.";A primeira linha contém um inteiro T (1 ≤ T ≤ 1000), o número de casos de teste. Cada caso começa com uma linha com um número N (1 ≤ N ≤ 100), o número de cores diferentes. Em seguida, há uma linha com N inteiros Ai (1 ≤ Ai ≤ 1000), o número de robôs com a i-ésima cor.;"Para cada caso imprima uma linha contendo ""Caso #X: Y"", onde X é o número do caso atual, iniciando em 1, e Y é a string “Challenge Accepted!”, se for possível organizar os robôs do jeito que Heitor quer, ou “Run for your life!”, caso contrário.";True;9 / 10;139;46;33.09%
1781;Guga e a String;Strings;8;"Guga tem uma string S contendo apenas letras minúsculas e quer fazer operações nela. Cada operação pode ser de um dos seguintes tipos:

                
                	
                	0 x, deslocar cada vogal de S x posições da esquerda pra direita (voltando para o começo, caso necessário)
                	
                	
                	1 x, deslocar cada consoante de S x posições da esquerda pra direita (voltando para o começo, caso necessário)
                	
                	
                	2, imprimir como S se encontra atualmente
                	
                

                As vogais que estamos considerando são as letras a, e, i, o e u.

                Uma operação do tipo 0 só desloca vogais por posições de S que possuem vogais.

                Uma operação do tipo 1 só desloca consoantes por posições de S que possuem consoantes.

                

                Por exemplo,

                A string “computador” após a operação 1 2 fica “dorcumapot”, ou seja, cada consoante vai para a posição em S da segunda próxima consoante.

                A string “abe” após a operação 0 1, fica “eba”.";A primeira linha da entrada contém T (1 ≤ T ≤ 100), o número de casos de teste. A primeira linha de cada caso de teste possui S (1 ≤ |S| ≤ 10⁴), a string que Guga possui. A segunda linha de cada caso possui Q (1 ≤ Q ≤ 10⁵) , o número de operações que Guga irá executar em S. Cada uma das próximas Q linhas possuem uma operação como explicado acima. Para cada operação, 0 ≤ x ≤ |S|.;Para cada caso imprima “Caso #X:”, onde X é o número do caso atual, começando em 1. Para cada operação 2, imprima em uma nova linha como a string S se encontra depois de todas as operações anteriores terem sido executadas. A saída possui aproximadamente 3*10⁶ caracteres.;False;8 / 10;4284;535;12.49%
1782;Honorável Presente;Grafos;9;"Guga ganhou um grafo conexo de aniversário, com N nós e N-1 arestas bidirecionais. Cada aresta conecta dois nós e possui um peso. Quando André descobriu a existência do presente de Guga pensou na seguinte brincadeira: Dado um número inteiro X, quantos pares (A,B) (A ≤ B) existem tal que o menor caminho do nó A para o nó B possui todas as arestas com peso menor ou igual a X?

                    Agora Guga e André estão precisando de um programa que responda várias dessas perguntas, para que assim eles possam brincar infinitamente e saber se acertaram a resposta ou não.";A primeira linha da entrada contém um inteiro T (1 ≤ T ≤ 50), o número de casos de teste. A primeira linha de cada caso de teste contém N (1 ≤ N ≤ 10⁵), o número de nós que o grafo de Guga possui. Cada uma das N-1 linhas possui três inteiros A (1 ≤ A ≤ N), B (1 ≤ B ≤ N) e C (1 ≤ C ≤ 10⁶), indicando que existe uma aresta do nó A para o nó B com peso C. A próxima linha contém um inteiro Q (1 ≤ Q ≤ 10⁴), o número de partidas que Guga e André irão jogar. A próxima linha possui Q inteiros Xi (1 ≤ Xi ≤ 10⁶), o maior peso permitido no caminho, como explicado acima.;Para cada caso imprima “Caso #X:”, onde X é o número do caso atual, iniciando em 1, seguido pelas respostas das Q consultas desse caso de teste, precedidas por um espaço.;False;9 / 10;219;66;30.14%
1783;Ih, Ferrou, um Buraco Negro!;Geometria Computacional;3;"André é um astrônomo amador que luta para revelar uma verdade ao mundo: há um buraco negro em direção à Terra! Todos os outros astrônomos tratam ele feito louco, e por consequência, as pessoas normais também, mas ele não desiste de derrubar essa conspiração!

                    Mas como ele descobriu esse buraco negro? Foi assim: buracos negros possuem uma gravidade avassaladora, e todas as estrelas próximas a um começam a girar em torno dele. Algumas mais rápidas, outras mais lentas, algumas mais próximas, outras mais distantes, mas sempre mantendo velocidade angular e distância do buraco negro constantes. Ao observar o céu com seu telescópio um certo dia, André anotou as posições de todas as estrelas que viu. Um mês depois, repetiu a experiência e viu que duas certas estrelas haviam se movido, o que indica que caíram na órbita de um buraco negro!

                    

                    

                    

                    A imagem acima ilustra a trajetória de duas estrelas ao redor do buraco negro.

                    Porém, André não é bom em matemática, e ele não sabe como calcular a posição exata do buraco negro. A superfície do céu pode ser representada por um plano coordenado por eixos X e Y, e ele possui as coordenadas antigas e novas das duas estrelas. Ajude-o calculando as coordenadas do buraco negro no céu e salve o mundo antes que seja tarde demais!";A primeira linha contém um inteiro T (1 ≤ T  ≤ 10000), o número de casos de teste. Cada caso de teste possui 4 linhas, cada uma com um par de números reais com 2 casas decimais, X e Y (-1000.0 ≤ X, Y ≤ 1000.0). Cada par representa, respectivamente, as antigas coordenadas da primeira e da segunda estrela, e as novas coordenadas da primeira e da segunda estrela. As posições antiga e nova de cada estrela são diferentes, assim como as posições de duas estrelas no mesmo instante de tempo.;"Para cada caso imprima uma linha contendo ""Caso #i: X Y"", onde i é o número do caso atual, iniciando em 1, e (X, Y) são as coordenadas de onde o buraco negro deve estar. X e Y são números reais com 2 casas decimais cada um. Para cada caso haverá exatamente uma solução válida.";True;3 / 10;403;284;70.47%
1784;Jacutingas vs Jaburus;Paradigmas;9;Há N jacutingas em uma floresta, cada um em sua respectiva árvore. Há N jaburus cansados voando nesta floresta, e eles desejam pousar em árvores diferentes o mais cedo possível (jaburus são muito briguentos e não conseguem dividir uma mesma árvore). A cada Pi minutos, a jacutinga i sai da árvore para voar um pouco, e pode-se considerar que ela volta instantaneamente. A cada Ci minutos, o jaburu i pode tentar pousar em uma árvore em que a jacutinga não se encontre, e caso não consiga, volta instantaneamente a voar. Pode-se considerar que jaburus voam mais rápido que jacutingas e conseguem ocupar as árvores mais rápido do que elas. Dado uma estratégia ótima entre os jaburus, qual o menor tempo em que todos os jaburus estarão relaxando, cada um em uma árvore diferente?;A primeira linha da entrada contém T (1 ≤ T ≤ 100), o número de casos de teste. Cada caso de teste começa com um inteiro N (1 ≤ N ≤ 9), o número de jacutingas e de jaburus. A segunda linha do caso de teste contém N inteiros Pi (1 ≤ Pi ≤ 10⁴), como descrito na questão. A terceira e última linha do caso de teste contém mais N inteiros Ci (1 ≤ Ci ≤ 10⁴), como também descrito na questão.;Para cada caso imprima “Caso #X: Y”, onde X é o número do caso atual, começando em 1, e Y é a resposta da questão.;False;9 / 10;226;64;28.32%
1785;Kaprekar;Matemática;4;"O inteiro 6174 é conhecido como a constante de Krapekar em homenagem ao matemático indiano Dattathreya Ramachandra Kaprekar. Esse número é interessante graças ao fato que se X é um número de 4 dígitos (zeros iniciais são permitidos para completar os 4 dígitos) em que todos os dígitos não são iguais entre si, a rotina de Krapekar iniciando no número X sempre converge para 6174. Ou seja, a rotina de Krapekar converge para 6174 se, e somente se, X possui 4 dígitos com pelo menos dois deles diferentes entre si. A rotina de Krapekar é executada da seguinte forma:

                    

                    int krapekar(int X) {

                       int cnt = 0;

                       while (X != 6174) {

                           int maior = maior_numero_com_digitos_de(X);

                           int menor = menor_numero_com_digitos_de(X);

                           X = maior - menor;

                           cnt = cnt + 1;

                       }

                       return cnt;

                    }

                    

                    maior_numero_com_digitos_de(X) é o maior número que pode ser formado usando-se os dígitos de X.

                    menor_numero_com_digitos_de(X) é o menor número que pode ser formado usando-se os dígitos de X.

                    

                    Por exemplo:

                    maior_numero_com_digitos_de(3524) = 5432

                    menor_numero_com_digitos_de(3524) = 2345

                    maior_numero_com_digitos_de(10) = 1000 //pois 10 = 0010 com quatro dígitos

                    menor_numero_com_digitos_de(10) = 1";A primeira linha da entrada contém T (1 ≤ T ≤ 10⁴), o número de casos de teste. Cada caso de teste consiste de uma linha contendo um inteiro X (0 ≤ X ≤ 9999).;Para cada caso de teste imprima “Caso #X: Y”, onde X é o número do caso atual, iniciando em 1, e Y é o retorno da rotina de krapekar ou -1 caso a rotina entre em loop infinito.;False;4 / 10;1138;565;49.65%
1786;CPF 2;Ad-Hoc;4;"As Indústrias Udilandenses (INUDIL) precisam outra vez de sua ajuda! Depois de criar um programa que verifica se um CPF é válido ou não, agora querem que você crie um programa que exiba o CPF do cliente conhecendo apenas os 9 primeiros dígitos. O setor de Recursos Humanos gentilmente te informou como funciona um CPF:

                    Dos 11 dígitos do CPF, os dois últimos são verificadores e dependem dos 9 dígitos anteriores. Vamos introduzir alguma notação. Considere um CPF com os seguintes dígitos

                    a1 a2 a3 . a4 a5 a6 . a7 a8 a9 - b1 b2

                    Para descobrirmos o dígito b1, procedemos da seguinte maneira:
                    MUltiplicamos o primeiro por 1, o segundo por 2, o terceiro por 3, o quarto por 4 e vamos assim até multiplicarmos o nono por 9. Então, somamos tudo isto. Após termos somado tudo, dividimos por 11. O dígito b1 será o resto da divisão (ou 0, caso o resto seja 10).

                    Para o segundo dígito verificador, temos o seguinte:
                    Multiplicamos o primeiro por 9, o segundo por 8, o terceiro por 7, o quarto por 6 e vamos assim até multiplicarmos o nono por 1. Então, somamos tudo isto e dividimos por 11. O dígito b2 será o resto da divisão (ou 0, caso o resto seja 10).";"A entrada contém um número desconhecido de sequências na forma:

                    a1a2a3a4a5a6a7a8a9

                    Cada sequência representa os 9 primeiros dígitos de algum CPF.";"Para cada sequência informada, você deverá exibir a sequência informada mais os dígitos verificadores, formatados na forma padrão do CPF, ou seja

                    a1a2a3.a4a5a6.a7a8a9-b1b2";False;4 / 10;2079;1111;53.44%
1787;URI;Ad-Hoc;6;"Uilton, Rita e Ingred criaram um novo jogo para decidir quem não pagará sua parte da pizza do próximo final de semana e deram o nome de ""URI"" para o jogo (talvez eles decidiram unir as iniciais de seus nomes para formar o nome do jogo). O URI consiste de N rodadas, a cada rodada, cada um dos três jogadores falam um número, não é permitido números iguais em uma rodada. Se o número que o jogador falar for uma potência de 2, o mesmo ganha 1 ponto, e se além de ser uma potência de 2, for o maior número da rodada, o jogador ganha mais 1 ponto, se o número não for potência de 2 o jogador não ganha nenhum ponto. Sua tarefa é criar um programa que os ajude a contabilizar a pontuação e informar o vencedor, dado a quantidade de rodadas, e os números de cada rodada.

                    Considere que as 4 primeiras potências de 2 são: 2, 4, 8, 16.";A entrada contém vários casos de teste. A primeira linha de entrada contém um único inteiro N indicando o número de rodadas (1 ≤ 10⁵), cada uma das N linhas seguintes contem 3 números inteiros Ui, Ri, Ii (1 < Ui, Ri, Ii ≤ 10⁹), representando respectivamente o número de Uilton, Rita e Ingred na i-ésima rodada. O final da entrada é indicado quando N = 0.;"Para cada caso de teste imprima uma única linha contendo o nome do jogador que tenha a maior quantidade de pontos. Caso haja empate no primeiro lugar, imprima o nome do jogo ""URI"" (sem aspas).";False;6 / 10;2488;995;39.99%
1788;Brincando com Números;Paradigmas;9;"Alguns amigos, entediados em uma tarde de domingo, resolveram inventar uma brincadeira. Eles desenharam uma matriz de L linhas e C colunas em uma folha de papel, e em seguida escreveram um número em cada uma de suas LxC posições.

                    A brincadeira funciona da seguinte maneira:

                    
                    	Uma posição (i, j) qualquer da matriz pode ser escolhida para começar o jogo, i representando uma linha, e j uma coluna.
                    	A partir dessa posição, é possível mover para as posições (i-1, j) – (i, j+1) se o modo do jogo for normal ou para as posições (i+1, j) – (i, j-1) se o modo do jogo for reverso. Porém, só é possível mover para alguma dessas posições, se o número contido nela for menor que o número da posição atual.
                    	Nesse jogo, há algumas posições especiais. São as posições que contêm um número primo. Quando um jogador cai nessa posição, ele pode se mover para qualquer uma das 2 adjacentes(de acordo com o modo do jogo), mesmo que o número contido nela não seja menor que o número atual.
                    	Em uma partida, é possível utilizar apenas K posições especiais. Após a utilização das K posições, uma posição com número primo será tratada como uma posição normal.
                    	O objetivo do jogo é “visitar” o maior número de posições possíveis.";"Haverá diversos casos de testes. Cada caso inicia com três inteiros, L, C e K (1 ≤ L, C ≤ 1000, 0 ≤ K ≤ 5), representando, respectivamente, a quantidade de linhas, colunas, e a quantidade de posições especiais que podem ser utilizadas. A segunda linha contém um caractere P (‘N’ ou ‘R’) representando o modo do jogo, normal ou reverso.

                    A seguir haverá L linhas, cada linha contendo C inteiros X (0 <= X <= 10^7).

                    A entrada termina com L = C = K = 0, a qual não deve ser processada.";Para cada caso, exiba uma única linha, a quantidade máxima de posições possíveis de serem visitadas se a posição de início for escolhida de forma ótima.;False;9 / 10;332;120;36.14%
1789;A Corrida de Lesmas;Iniciante;3;"A corrida de lesmas é um esporte que cresceu muito nos últimos anos, fazendo com que várias pessoas dediquem suas vidas tentando capturar lesmas velozes, e treina-las para faturar milhões em corridas pelo mundo. Porém a tarefa de capturar lesmas velozes não é uma tarefa muito fácil, pois praticamente todas as lesmas são muito lentas. Cada lesma é classificada em um nível dependendo de sua velocidade:

                    
                    Nível 1: Se a velocidade é menor que 10 cm/h .
                    Nível 2: Se a velocidade é maior ou igual a 10 cm/h e menor que 20 cm/h .
                    Nível 3: Se a velocidade é maior ou igual a 20 cm/h .

                    
                    Sua tarefa é identificar qual nível de velocidade da lesma mais veloz de um grupo de lesmas.";"A entrada consiste de múltiplos casos de teste, e cada um consiste em duas linhas: A primeira linha contém um inteiro L (1 ≤ L ≤ 500) representando o número de lesmas do grupo, e a segunda linha contém L inteiros Vi (1 ≤ Vi ≤ 50) representando as velocidades de cada lesma do grupo.

                    A entrada termina com o fim do arquivo (EOF).";Para cada caso de teste, imprima uma única linha indicando o nível de velocidade da lesma mais veloz do grupo.;False;3 / 10;17459;9012;51.62%
1790;Detectando Pontes;Grafos;7;"Pedrinho Ritchie mora em um país chamado Grafolândia. As cidades desse país estão interligadas através de pontes. Não existem cidades isoladas e nenhuma ponte é inserida mais de uma vez. Seu professor propôs um desafio: detectar a quantidade de pontes que não estão contidas em qualquer ciclo. Podemos dizer que um ciclo começa e termina na mesma cidade e nenhuma cidade se repete.

                    Pedrinho gosta muito de desafios de programação, mas precisa de sua ajuda para resolver esse problema, será que você consegue ajudá-lo?";A entrada termina em EOF. Para cada caso de teste, a primeira linha contém dois inteiros positivos C e P que representam respectivamente a quantidade de cidades (2 <= C <= 50) e a quantidade de pontes (1 <= P <= 1250). Seguem-se P linhas onde cada linha contém dois inteiros positivos X e Y (indexados a partir do 1) indicando que há uma ponte interligando as cidades X e Y.;Seu programa deve imprimir a quantidade de pontes que não estão contidas em qualquer ciclo.;False;7 / 10;2881;833;28.91%
1791;Descobrindo uma Matriz;Ad-Hoc;10;"Uma matriz é uma Matriz de Potências se atende 3 pré-requisitos:

                    
                    1. É uma matriz quadrada.
                    2. A primeira coluna é formada apenas por 1's.
                    3. Para todo elemento (i, j) com j > 1, (i, j) = (i, 2)j-1 e (i, j) é diferente de zero.

                    Por exemplo:

                    

                    Sua tarefa é descobrir se uma matriz quadrada pode ser transformada em uma Matriz de Potências utilizando dois tipos de operações:

                    1. Troca(x, y): Inverte as posições de todos os elementos das colunas x e y da matriz.
                    2. Transposta(): A matriz é transposta.

                    Por exemplo:

                    

                    Logo P pode ser transformada em uma Matriz de Potência.";A entrada consiste de múltiplas linhas. A primeira linha contém um inteiro C que indica o número de casos de teste. Em seguida, em cada caso de teste a primeira linha contém um inteiro N (1 < N < 8) que indica o número de linhas e colunas da matriz, em seguida N linhas, cada uma com N inteiros d (􀀀-50000 < d < 50000) representando os elementos da matriz .;"Imprima em uma única linha para cada caso de teste a ""Potencia"" (sem aspas) caso a matriz possa ser transformada, ou ""Nao Potencia"" (sem aspas) caso contrário.";True;10 / 10;364;39;10.71%
1792;Ataque Programado;Grafos;8;"Você é o líder de uma equipe de soldados de elite, e acaba de descobrir que os soldados que você enviou recentemente para atacar os postos inimigos foram capturados e mantidos como refém. Sua estratégia agora é recuperar sua tropa sem perder um soldado em batalha, e sem nunca deixar que o inimigo soe o alarme.

                    Existem N postos inimigos e M linhas de visão entre eles, de tal modo que se existe uma linha de visão do posto A ao posto B, os soldados do posto A saberiam quando o posto B fosse atacado e soariam o alarme. Como seu objetivo é total descrição você decidiu que só atacaria um posto quando todos os postos que tem linha de visão sobre ele tivessem sido atacados anteriormente, o que impossibilitaria que o alarme fosse soado.

                    Inicialmente você tem S soldados em sua tropa. Em cada posto inimigo há E soldados inimigos e F soldados reféns. Para garantir que cada ataque seja um sucesso, você decidiu que só vai atacar um posto quando o número de soldados em sua tropa for maior que o número de soldados inimigos daquele posto. Após cada ataque, os soldados reféns daquele posto são adicionados à sua tropa para os próximos ataques.

                    O plano parece bom, mas é preciso ter absoluta certeza de que é possível completá-lo. Com os dados sobre os postos trazidos pelo seu espião, descubra se é possível atacar todos os postos inimigos seguindo as duas restrições acima.";"Haverá no máximo 30 casos de teste. Cada caso de teste inicia com três inteiros, N, M e S, indicando o número de postos, o número de linhas de visão e o número inicial de soldados de elite em sua equipe, respectivamente (1 ≤ N ≤ 104, 0 ≤ M ≤ 105, 1 ≤ S ≤ 100).

                    Em seguida haverá uma linha com N inteiros ei, onde o i-ésimo inteiro indica quantos soldados inimigos há no posto i (1 ≤ ei ≤ 106, para todo 1 ≤ i ≤ N).

                    Em seguida haverá uma linha com N inteiros fi, onde o i-ésimo inteiro indica quantos soldados reféns há no posto i (0 ≤ fi ≤ 100, para todo 1 ≤ i ≤ N).

                    Em seguida haverá M linhas, cada uma contendo dois inteiros A e B, indicando que o posto A tem uma linha de visão sobre o posto B (1 ≤ A, B ≤ N, A <> B).

                    O último caso de teste é indicado quando N = M = S = 0, o qual não deverá ser processado.";Para cada caso de teste imprima uma linha, contendo a palavra “possivel” caso seja possível atacar todos os postos respeitando as restrições dadas, ou “impossivel” caso contrário.;False;8 / 10;590;166;28.14%
1793;Escada Rolante;Ad-Hoc;1;"Escadas rolantes sem dúvidas facilitam muito a vida das pessoas. Subir escadas é uma das tarefas mais tediosas já inventadas (após a invenção das escadas normais).

                    Após algumas observações você percebeu que há muita energia gasta com escadas rolantes, pois elas continuam funcionando mesmo quando não há ninguém à utilizando. Para contornar isso, o dono de um shopping local instalou um sensor que verifica quando há alguém na escada rolante. Quando o sensor não detecta nenhuma presença, a escada rolante é desativada, assim economizando energia até que a próxima pessoa chegue.

                    Para ser mais específico, o sistema funciona da seguinte maneira: a escada está inicialmente desativada. O tempo necessário para que uma pessoa chegue de um lado até o outro da escada rolante é 10 segundos. Ou seja, se uma única pessoa se aproximar da escada rolante no tempo t, a escada rolante ficará ativada nos tempos t, t+1, t+2, …, t+8 e t+9, e será desativada no tempo t+10, momento no qual a pessoa já saiu da escada rolante. Tal duração pode ser prolongada caso uma ou mais pessoas se aproximem da escada rolante durante tal processo.

                    O dono do shopping local agora pediu sua ajuda. Escreva um algoritmo que, dados os tempos em que as pessoas se aproximaram da escada rolante, diga por quantos segundos a escada ficou ativada.";"Haverá no máximo 30 casos de teste. Cada caso de teste inicia com uma linha contendo um inteiro N, indicando o número de pessoas que usaram a escada rolante no dia em questão (1 ≤ N ≤ 100).

                    Na linha seguinte haverá N inteiros distintos, dados em ordem crescente, indicando o tempo t em que cada pessoa se aproximou da escada (1 ≤ t ≤ 1000).

                    O último caso de teste é indicado quando N = 0, o qual não deverá ser processado.";Para cada caso de teste imprima uma linha, contendo um inteiro, indicando o número de segundos que a escada rolante ficou ativa.;False;1 / 10;1393;937;67.26%
1794;Lavanderia;Ad-Hoc;1;"Cansada de lavar suas roupas sujas, sua mãe decidiu que a partir de agora quem lava suas roupas é você.

				Na lavanderia da sua casa existe uma lavadora e uma secadora de roupas, cada uma com um limite mínimo e máximo de peças a serem lavadas e secadas por vez. Assim sendo, a lavadora só deve ser usada se forem colocadas no mínimo LA e no máximo LB peças dentro dela, e semelhantemente a secadora só deve ser usada se forem colocadas no mínimo SA e no máximo SB peças dentro dela.

				Você tem atualmente N peças de roupa a serem lavadas e secadas, e quer descobrir se é possível usar a lavadora e secadora para lavar e secar todas as suas peças, seguindo as regras acima.";"Na primeira linha da entrada haverá um inteiro N (1 ≤ N ≤ 100).

				Na segunda linha da entrada haverá dois inteiros LA e LB (1 ≤ LA < LB ≤ 100).

				Na terceira linha da entrada haverá dois inteiros SA e SB (1 ≤ SA < SB ≤ 100).";"Imprima a palavra ""possivel"" caso seja possível lavar e secar suas peças de roupa seguindo as regras descritas no enunciado, ou ""impossivel"" caso contrário.";False;1 / 10;4456;2995;67.21%
1795;Triângulo Trinomial;Matemática;3;"O triângulo trinomial é um triângulo numérico de coeficientes trinomiais. Ele pode ser obtido com uma linha contendo um único ""1"", a próxima linha contendo três 1 e cada elemento das linhas seguintes sendo calculado como a soma do elemento acima à esquerda, imediatamente acima e acima à direita:

				 

				A primeira linha do triângulo trinomial é numerada com zero, a segunda linha é a de número 1 e assim sucessivamente.

				Sua tarefa é, dado um número de linha R, escrever um programa que exiba a soma de seus elementos. Por exemplo, a soma dos elementos da linha 2 é 9 = 1 + 2 + 3 + 2 + 1.";A entrada é o número de linha R (0 ≤ R ≤ 20).;A saída é a soma de todos os elementos da linha R. Não esqueça do caractere de fim-de-linha após exibir a soma.;True;3 / 10;4800;2626;54.71%
1796;Economia Brasileira;Ad-Hoc;2;Ultimamente a economia brasileira tornou-se o assunto de todos os jornais. A população brasileira têm diferentes opiniões sobre o cenário econômico atual. Sua tarefa é fazer uma pesquisa para saber se a maioria da população está ou não satisfeita com o cenário econômico atual.;"A primeira linha contém um inteiro Q (4 ≤ Q ≤ 233000) representando o número de pessoas que participaram da pesquisa. A segunda linha contém Q inteiros Vi (0 ≤Vi ≤ 1, 1 ≤ i ≤ Q), representando a opinião do i-ésimo cidadão Brasileiro sobre o cenário econômico atual. Sendo ""0"" os que consideram o cenário atual satisfatório e ""1"" os que consideram não satisfatório.";"Seu programa deve imprimir ""Y"" caso a maioria da população esteja de acordo com o cenário econômico. Caso contrário imprima ""N""";False;2 / 10;5983;3538;59.13%
1797;Ferozes e Curiosos;Geometria Computacional;9;"Vin Gasoline e seu melhor amigo Paul Runner estão na cobertura de um edifício em Abu Dhabi roubando um Lykan HyperSport. É o ano de 2300, e os andares dos prédios não mais se sustentam um sobre o outro, mas são todos flutuantes e movem-se de vez em quando, apenas mantendo sua altitude. No prédio em que nossos heróis estão, os andares são todos quadrados. A figura à esquerda ilustra o prédio como visto de cima e a figura à direita o ilustra como visto de frente, representando o solo pela linha mais espessa.

				 

				Gasoline e Runner querem abandonar o prédio o mais rápido possível e precisam, portanto, acelerar o supercarro para pular da cobertura para o penúltimo andar, do penúltimo para o antepenúltimo andar, e assim sucessivamente até chegarem ao solo e fugirem. Eles sabem que o Lykan HyperSport aguenta pular de um andar i para um andar j se e somente se j = i - 1 e a distância horizontal necessária a ser percorrida no ar não é maior que AAH, o Alcance Aéreo Horizontal do carro. Com o computador de bordo, eles têm todas as informações pertinentes à localização dos andares, mas precisam rapidamente calcular se a fuga será possível ou não.";A primeira linha da entrada estabelece o número N de andares do edifício (1 ≤ N ≤ 106) e o valor de AAH (0 < AAH < 2 × 104). Cada uma das N linhas seguintes descreve um andar do edifício através de 3 inteiros: XC, YC e L (0 < XC, YC, L < 104), os quais representam respectivamente as coordenadas do centro e o comprimento do lado do andar. Os andares são descritos em ordem decrescente de altitude.;A saída de seu programa deve consistir de uma só linha, contendo a palavra YEAH caso a fuga seja possível ou a palavra OUCH caso não seja.;True;9 / 10;594;166;27.95%
1798;Cortando Canos;Paradigmas;5;"A OBI (Organização Brasileira de Instalações) é uma empresa que atua na área de produção de tubos e conexões. A técnica de produção utilizada na OBI produz sempre canos longos, que são então cortados para satisfazer a necessidade dos clientes.

				Os seus clientes tem aplicações variadas, necessitando de diferentes comprimentos de canos. No início, quando a empresa era pequena e os clientes eram poucos, todo o processo de planejamento dos cortes (para maximizar o lucro) era efetuado por um funcionário muito dedicado. Porém, com o aumento dos pedidos, isto se tornou proibitivo. É aí que você entra: contratado pela OBI, sua tarefa é escrever um programa que, dada uma relação de comprimentos de cano e seus respectivos valores de venda, determine o maior valor total que possa ser obtido com o corte de um cano de comprimento inicial determinado. Comprimentos de cano podem ser repetidos, e podem haver sobras de cano.";"A entrada é iniciada por um linha contendo o inteiro N (1 ≤ N ≤ 1000) que é o número de tamanhos de canos solicitados e o inteiro T (1 ≤ T ≤ 2000) que é o tamanho do cano produzido pela OBI.

				A seguir virão N linhas, cada uma contendo dois inteiros Ci e Vi (1 ≤ Ci, Vi ≤ 5000, 1 ≤ i ≤ N), representando, respectivamente, o comprimento do cano i desejado por um cliente e seu valor de venda.";Imprima em uma linha o maior valor que pode ser obtido com o corte e a venda o cano original de tamanho T.;False;5 / 10;2019;813;40.27%
1799;O Rato no Labirinto;Grafos;3;"Em 1942, um estudo feito por Robert Tryon concluiu que os traços genéticos frequentemente podem contribuir para o comportamento, independente do meio ambiente. Para fazer isso Tryon criou uma experiência que testou a proficiência de gerações sucessivas de ratos em completar um labirinto, separando os que fizeram os menores números de erros em ""brilhantes"", e aqueles com mais erros em ""medíocres"". Dando continuidade a este processo durante sete gerações ele criou duas raças distintas de ratos: ""brilhantes"" e ""medíocres"".

				O ratinho IBO é descendente da linhagem de ratos ""brilhante"", sendo o melhor de todos no desempenho deste experimento. Ele consegue entrar, pegar o queijo e sair de qualquer labirinto sem se perder, e sempre faz o caminho mais curto possível.

				Sua tarefa neste problema é, dado o desenho do Labirinto e a posição do queijo, determinar por quantos pontos estrategicamente marcados por letras do alfabeto (ou palavras contendo somente letras) IBO deve passar para pegar o queijo (indicado pelo caractere '*') e sair, sempre partindo do ponto Entrada e terminando em Saida (sem acento). No exemplo abaixo, a sequência de IBO à partir da Entrada seria: A, F, J, *, I, M, K e Saida, o que resultaria em 8, que é a quantidade mínima de pontos pelos quais IBO deve passar para cumprir a sua tarefa. Se IBO tiver que passar por um ponto duas vezes (uma indo para o queijo e outra indo para a saída) isso conta como dois pontos visitados.";A primeira linha de entrada contém dois inteiros Pontos (4 ≤ Pontos ≤ 4000) e Ligacoes (4 ≤ Ligacoes ≤ 5000) representando respectivamente o número de pontos estrategicamente marcados no labirinto e quantidade de ligações existentes entre estes pontos. Seguem as linhas que indicam cada uma das ligações entre estes pontos. As ligação entre dois pontos indica que qualquer um dos dois pode ser a origem.;Imprima um valor inteiro identificando a quantidade mínima de pontos do labirinto pelos quais IBO deve passar para cumprir a sua tarefa.;True;3 / 10;1179;660;55.98%
1800;Onde Estão Minhas Chaves;Ad-Hoc;3;"Gabriel trabalha como Engenheiro de Software na empresa FingerBook, na última semana estava com tanto trabalho para fazer que resolveu dormir no FingerBook a semana inteira. Depois que terminou todo o trabalho e resolveu ir embora percebeu que não estava com as chaves de casa, então decidiu voltar e buscar as chaves.

				Gabriel decidiu começar a procurar visitando quais escritórios ele esteve recentemente, Após procurar em todos os escritórios que esteve nos úlimos dois dias, ele ainda não encontrou as chaves. Então resolveu pedir sua ajuda para procurar pelas chaves novamente. Para isso ele informará alguns dos escritórios em que ele esteve na última semana.

				Ajude-o a encontrar as chaves informando em quais escritórios é possível que ele tenha esquecido as chaves.";"A primeira linha é composta por dois inteiros Q(1 ≤ Q ≤ 1*103) e E(1 ≤ E ≤ Q) representado respectivamente a quantidade de escritórios que ele esteve na última semana e a quantidade de escritórios que esteve nos últimos dois dias.

				A linha seguinte contém E inteiros Si (1 ≤ Si ≤ 1000) contendo o número de identificação de cada um dos escritórios em que ele esteve nos últimos dois dias. 

				Seguem Q inteiros Ci (1 ≤ Ci ≤ 1000) contendo número de identificação de cada um dos escritórios em que ele esteve durante a última semana.";"Para cada escritório em que ele esteve na última semana seu programa deverá retornar ""0"" caso ele já tenha visitado esse escritório ao procurar pelas chaves, ou ""1"" caso ele não tenha visitado esse escritório ainda enquanto procurava pelas chaves.";False;3 / 10;1901;1103;58.02%
1801;Brincando com Números;Matemática;8;"O Professor Cedrado-Cueta gosta de brincar com números, especialmente quando estes são quadrados perfeitos. Um número natural n é um quadrado perfeito se existe um número natural m tal que n = m2. Por exemplo, 9 e 36 são quadrados perfeitos porque 9 = 32 e 36 = 62; contudo 5 e 12 não são quadrados perfeitos.

				O Professor encontrou recentemente um número x e ele gostaria de criar um quadrado perfeito o utilizando. Para isso, ele vai reordenar os dígitos de x para formar um número y e, então, calcular n = x + y. De quantas maneiras é possível obter assim um valor de n que seja um quadrado perfeito? Por exemplo, se x = 29 o Professor pode formar y = 92, de modo que n = 29 + 92 = 121 = 112.

				Perceba que, quando reordena os dígitos de x, o Professor deve usar todos os dígitos e obter uma expressão correta para o número y, ou seja, não podem haver zeros à esquerda em y. Tambem note que ele pode escolher manter os dígitos de x na mesma ordem e, nesse caso, obter para y o mesmo valor de x.";A única linha da entrada tem um inteiro positivo x com no máximo 12 dígitos.;Mostre uma única linha com um inteiro que indica o número de formas com que o Professor pode obter um valor de n que seja um quadrado perfeito. Duas formas são consideradas distintas se elas diferem no valor obtido para n.;False;8 / 10;409;180;44.01%
1802;Catálogo de Livros;Ad-Hoc;2;"Bino está elaborando um catálogo de livros escolares. Ele está organizando um catálogo com conjuntos distintos de livros para vender em sua loja online. Cada conjunto de livros é formado por 5 livros, sendo um de cada matéria (português, matemática, física, química e biologia). Dois conjuntos de livros são considerados distintos se existe pelo menos um livro que está em um e não está no outro. Bino quer expor no site apenas os conjuntos distintos mais caros, e pediu sua ajuda.

				O valor de um conjunto é a soma dos valores de cada livro que está nele. Sua tarefa é informar qual a soma dos valores dos K conjuntos distintos de livros mais caros. Em caso de empate entre conjuntos mais caros, Bino escolhe qualquer um dos conjuntos empatados.";A entrada consiste em 6 linhas: A primeira linha contém um inteiro P (5 ≤ P ≤ 10), representando que Bino tem P tipos diferentes de livros de português, seguido por P inteiros vi ( 1 ≤ vi ≤ 1000), representando os valores de cada livro de português.  A segunda linha contém um inteiro M (5 ≤ M ≤ 10), representando que Bino tem M tipos diferentes de livros de matemática, seguido por M inteiros vi ( 1 ≤ vi ≤ 1000), representando os valores de cada livro de matemática. A terceira linha contém um inteiro F (5 ≤ F ≤ 10), representando que Bino tem F tipos diferentes de livros de física, seguido por F inteiros vi ( 1 ≤ vi ≤ 1000), representando os valores de cada livro de física. A quarta linha contém um inteiro Q (5 ≤ Q ≤ 10), representando que Bino tem Q tipos diferentes de livros de química, seguido por Q inteiros vi ( 1 ≤ vi ≤ 1000), representando os valores de cada livro de química. A quinta linha contém um inteiro B (5 ≤ B ≤ 10), representando que Bino tem B tipos diferentes de livros de biologia, seguido por B inteiros vi ( 1 ≤ vi ≤ 1000), representando os valores de cada livro de biologia. A sexta linha contém um inteiro K (1 ≤ K ≤ P*M*Q*F*B), representando a quantidade de conjuntos distintos de livros que o catálago de livros terá.;Imprima o valor da soma dos valores dos K conjuntos distintos de livros mais caros.;False;2 / 10;1430;814;56.92%
1803;Matring;Strings;3;"Matring é uma mistura de Matriz e String. Ela foi desenvolvida pela UNILA (União dos Nerds para Integração da Lógica e da Aventura) para manter mensagens seguras de escutas.

				A primeira e última coluna de uma matring guarda a chave para traduzi-la na mensagem original. As colunas restantes de uma matring representam uma string codificada em ASCII, uma coluna por caractere.

				Para uma mensagem com N caracteres, a matring correspondente é uma matriz 4x(N+2) de dígitos. Cada coluna é lida como um número de 4 dígitos; uma sequência de dígitos de cima para baixo é o mesmo que uma sequência de dígitos da esquerda para a direita na horizontal.

				Seja o primeiro número F, o último número L e os restantes uma sequência de números Mi, onde 1 ≤ i ≤ N. A primeira coluna de uma matring é indexada por zero.

				Para decodificar uma matring para uma string, calculamos: Ci = (F * Mi + L) mod 257, onde Ci é o caractere em ASCII na posição i da mensagem original.

				Sua tarefa é desenvolver um algoritmo para decodificar matrings.";A entrada é uma matring, ou seja, uma matriz 4x(N+2) de dígitos (de 0 a 9) com 0 < N < 80.;A saída é dada em uma única linha e corresponde a string decodificada. Inclua o caractere de fim-de-linha após a string.;False;3 / 10;1309;878;67.07%
1804;Precisa-se de Matemáticos em Marte;Estruturas e Bibliotecas;6;"Aconteceu na semana passada em Beberibe, CE, o VIII Latin-American Algorithms, Graphs and Optimisation Symposium (LAGOS 2015), uma conferência que reuniu matemáticos e cientistas da Computação do mundo todo para discutirem alguns desafios computacionais. A fim de que os participantes pudessem relaxar um pouco, os organizadores do evento contrataram buggies para levar os pesquisadores a alguns pontos turísticos da região. Os buggies saíram do hotel numa fila, um atrás do outro.

				Quem conhece os passeios de buggy do Ceará sabe que o turista pode pedir ao bugueiro um passeio com emoção ou sem emoção. No entanto, a excursão do LAGOS contou com uma emoção extra. Como em Marte atualmente há uma carência de pesquisadores em Algoritmos, Grafos e Otimização, alienígenas marcianos começaram a abduzir alguns buggies, com todas as pessoas a bordo (inclusive o pobre bugueiro, que nada tinha a ver com a história). Foi muito triste nosso planeta ter perdido mentes tão brilhantes para Marte, mas a tragédia teria sido menor se cada bugueiro mantivesse atualizada a informação de quantas pessoas no total estavam nos buggies atrás dele — assim ele poderia perceber a aproximação da sonda alienígena e acelerar o buggy.";"Um inteiro N (1 ≤ N ≤ 105) constitui a primeira linha da entrada, o qual representa o número de buggies que deixaram o hotel. A segunda linha da entrada é constituída por N inteiros pi (1 ≤ pi ≤ 5, 1 ≤ i ≤ N), cada um representando o número de pessoas no buggy i (incluindo o bugueiro). Cada uma das linhas seguintes pode ser constituída:

				
					por um caractere 'a' seguido de um inteiro i (1 ≤ i ≤ N), o qual caracteriza a abdução do buggy i (que ainda não havia sido abduzido);

					por um caractere '?' seguido de um inteiro i (1 ≤ i ≤ N), o qual caracteriza que, naquele momento, o bugueiro do (ainda) não abduzido buggy i gostaria de saber quantas pessoas da excursão restavam atrás do seu buggy.
				

				Considere que o identificador i de um buggy não muda. Assim, o terceiro buggy a deixar o hotel deverá sempre ser identificado pelo inteiro 3, mesmo que os buggies 1 e 2 sejam abduzidos.";"Para cada linha ""? i"", imprima uma linha contendo o número de pessoas da excursão ainda remascentes atrás do buggy i naquele momento. Mas não seja bugueiro (nada de pôr bugs em seu código)!";False;6 / 10;1731;855;49.39%
1805;Soma Natural;Matemática;4;"Um número natural é um inteiro não-negativo (0, 1, 2, 3, 4, 5,...). A sua tarefa neste problema é calcular a soma dos números naturais que estão presentes em um determinado intervalo [A,  B] inclusive.

				 Por exemplo, a soma dos números naturais no intervalo [2, 5] é 14 = (2+3+4+5).";Cada caso de teste contém dois inteiros  A e  B (1 ≤  A ≤  B ≤ 109), representando o limite inferior e o superior respectivamente.;Para cada caso de teste, a saída consiste de uma linha contendo a soma dos números naturais do intervalo.;False;4 / 10;15652;4398;28.10%
1806;Agente 004;Grafos;7;"Uma organização criminosa da cidade está ficando mais poderosa a cada dia, e para tentar acompanhar esse avanço, a organização protetora da cidade está investindo muito no treinamento dos seus homens. Bino, também conhecido como Agente 004, é o melhor agente da organização protetora, então ele foi designado para uma missão especial.

				A missão especial de Bino é entregar uma mensagem secreta de uma sede de treinamento de agentes especiais para outra. Porém a cidade está cheia de criminosos, e todos eles querem interceptar Bino na sua missão.

				Bino não conhece muito bem as rotas da cidade, pois passou a maior parte do tempo de sua vida sendo treinado em campos especiais, diferentemente dos criminosos, que passam maior parte das suas vidas nas ruas, e conhecem todas as rotas possíveis.

				Como Bino é o melhor agente do mundo, ele sabe que é capaz de eliminar qualquer quantidade de criminosos que estão no mesmo local dele instantaneamente. Os criminosos podem interceptar Bino em qualquer lugar da cidade(Em todas as rotas e em tudos os lugares, inclusive, nos lugares onde estão as sedes de treinamento inicial e a destino). Bino e os criminosos se deslocam com velocidade de 12 m/s. Bino sempre utiliza o caminho que encontrará menos criminosos, porém, os criminosos sempre utilizam os melhores caminhos para interceptar Bino.

				Sua tarefa é descobrir qual a quantidade mínima de criminosos que Bino terá que eliminar para entregar uma mensagem secreta de uma sede de treinamento para outra. É garantindo que existirá um caminho entre qualquer lugar na cidade para qualquer outro lugar.";A primeira linha contém 4 inteiros,  N(1 ≤ N ≤ 10000), C(1 ≤ C ≤ 50000), S(1 ≤ S ≤ 50000) e B (1 ≤ B ≤ 10000), representando respectivamente o número de lugares na cidade, o número de rotas conhecidas pelo Bino, o número de rotas conhecidas somente pelos criminosos  e o número de criminosos. Cada uma das próximas C linhas contém três inteiros a(1 ≤ a ≤ N), b(1 ≤ b ≤ N) e v(1 ≤ v ≤ 1000), representando que existe uma rota entre os lugares a e b com distância de v metros. Cada uma das próximas S linhas contém três inteiros a(1 ≤ a ≤ N), b(1 ≤ b ≤ N), v(1 ≤ v ≤ 1000), representando que existe uma rota secreta entre os lugares a e b com distância de v metros. A próxima linha contém B inteiros li(1 ≤ li ≤ N) representando que o criminoso i está inicialmente no lugar l. A última linha do caso de teste contém 2 inteiros K(1 ≤ K ≤ 10000),  e F(1 ≤ F ≤ 10000), representando respectivamente o lugar inicial do Bino e o lugar onde ele vai ter que entregar a mensagem secreta.;Imprima a quantidade mínima de criminosos que Bino vai eliminar no caminho.;False;7 / 10;453;171;37.75%
1807;Triângulo Trinomial, a Vingança;Matemática;4;"O triângulo trinomial é um triângulo numérico de coeficientes trinomiais. Ele pode ser obtido com uma linha contendo um único ""1"", a próxima linha contendo três 1 e cada elemento das linhas seguintes sendo calculado como a soma do elemento acima à esquerda, imediatamente acima e acima à direita:

				

				A primeira linha do triângulo trinomial é numerada com zero, a segunda linha é a de número 1 e assim sucessivamente.

				Sua tarefa é, dado um número de linha R, escrever um programa que exiba a soma de seus elementos. Por exemplo, a soma dos elementos da linha 2 é 9 = 1 + 2 + 3 + 2 + 1.

				Mas desta vez o número de linha R pode ser muito maior! Sendo assim, a soma dos elementos da linha R deve ser mostrada módulo (231 - 1). Por exemplo, a soma dos elementos da linha 20 é 3486784401 mas a resposta a ser dada é 1339300754, que é congruente a 3486784401 módulo (231 - 1).";A entrada é o número de linha R (0 ≤ R ≤ 999999999).;A saída é a soma módulo (231 - 1) de todos os elementos da linha R. Não esqueça do caractere de fim-de-linha após exibir a soma.;True;4 / 10;2002;872;43.56%
1808;O Retorno do Rei;Ad-Hoc;4;"O profílico autor Stephen King estava entrando com as notas dos seus estudantes de literatura numa calculadora geral de médias on-line. Quando terminou, ele percebeu que sua tecla de retorno (ENTER) estava quebrada. Então, ao invés de entrar com as notas de um estudante numa linha separada cada, ele entrou com elas numa única linha sem separação alguma. Uma vez que o Sr. King não possui as habilidades para consertar sua tecla de retorno, ele precisa que você calcule a média das notas dos estudantes a partir da entrada não separada.

Cada nota é um inteiro entre 1 e 10. Todas as notas foram digitadas na base 10 sem zeros à esquerda. Por exemplo, se as notas do estudante do Sr. King foram 3, 10, 1 e 10, elas seriam entradas com “310110”.";A entrada consiste de uma única linha que contém uma cadeia de caracteres não-vazia S de no máximo 100 dígitos na base 10. Há uma única maneira de particionar S numa lista de subcadeias de caracteres de tal modo que cada subcadeia represente um inteiro entre 1 e 10 na base 10 sem zeros à esquerda.;Imprima uma linha com um número racional representando a média das notas do estudante cujas notas o Sr. King entrou como S. O resultado deve ser impresso como um número racional, arredondado se necessário, com exatos dois dígitos depois do ponto decimal.;False;4 / 10;2017;1137;56.37%
1809;Agentes Secretos;Ad-Hoc;7;"Todas as pessoas que já assistiram a filmes ou seriados de espionagem como 007, Missão Impossível ou Hawai 5-0, sabem que alguns países do mundo mantém grupos de agentes secretos infiltrados em governos e organizações do Oriente Médio, América do Sul e Leste Europeu.

                    Um dado serviço de inteligência possui n agentes espalhados em um país não muito amigável. Cada agente conhece outros agentes e tem procedimentos específicos para arranjar um encontro secreto com cada um deles. Normalmente são trocadas mensagens codificadas para marcar tais encontros. Dados dois agentes que se conhecem i e j, existe uma certa probabilidade pij de que uma mensagem trocada entre eles seja interceptada por pessoas hostis.

                    De tempos em tempos, o líder do serviço de inteligência precisa difundir informações confidenciais a todos os seus agentes em campo. Para tanto, ele utiliza-se do mecanismo de troca de mensagens dos agentes, isto é, ele contacta alguns dos agentes que conhece e estes se encarregam de propagar as informações de modo que a probabilidade de interceptação P seja mínima. Como você pode perceber, o serviço é tão secreto que nem o líder conhece todos os agentes subordinados a ele. Sua tarefa neste problema é construir um programa que calcule P.";Seu programa deverá estar preparado para trabalhar sobre diversos cenários, isto é, diversas difusões de informações confidenciais em diversos países. Cada cenário é descrito da forma que segue. Na primeira linha são especificados o número de agentes no país, 0 < n ≤ 100, incluindo o líder do serviço de inteligência, e o número de pares de agentes que estão no país e se conhecem, 0 ≤ m ≤ 4950. Nas m linhas seguintes existem dois inteiros i, j e um racional pij, com 1 ≤ i,j ≤ n e 0 ≤ pij ≤ 1. Cada linha significa que os agentes i e j se conhecem e que uma mensagem trocada entre eles é interceptada com probabilidade pij. Um valor igual a zero para n indica o fim dos cenários. Você pode supor que sempre será possível difundir as informações confidenciais entre todos os agentes.;Para cada cenário da entrada, seu programa deve imprimir o texto Cenario x, probabilidade de interceptacao = P, onde x é a posição do respectivo cenário no arquivo de entrada (numerado a partir de 1) e P a probabilidade da informação a ser difundida ser interceptada. Tal probabilidade deve ser impressa com três casas decimais. Você deve deixar uma linha em branco entre cada cenário.;False;7 / 10;64;30;46.88%
1810;Beverly Hills, Century City;Paradigmas;9;"Beverly Hills e Century City figuram entre os condados mais abastados e sofisticados de grande Los Angeles. Seus habitantes, pessoas de gostos pouco convencionais e atitudes demasiadamente excêntricas, estão sempre procurando novas diversões, novas quinquilharias e novos hobbies para empregar seus dividendos. A grande mania da região, no momento, é a criogenia. Inspirados pelo enredo do filme Vanilla Sky, vários cidadãos e cidadãs têm recorrido à empresa local A.C.M – Agência Criogênica keith-Morris – com o intuito de ""prolongar"" sua existência.

Tal movimentação deixou a A.C.M com um problema a ser resolvido: construir um plano de produção de suas células criogênicas num dado período de tempo. De maneira mais precisa a empresa deseja encontrar um plano de produção de custo mínimo num período de n dias, sujeito a:


	Custo de produção fixos não negativos ft, 1 ≤ t ≤ n;
	Custos unitários de produção pt;
	Custos unitários de estocagem ht;
	Demandas não negativas dt;


Sua tarefa é construir um programa para ajudar a A.C.M a resolver seu problema.";"A entrada é constituída por várias instâncias, armazenadas em sequência ao longo do arquivo de entrada. Cada instância possui a estrutura que segue. Na primeira linha é especificado um valor inteiro 0 ≤ n ≤ 180 que indica o número de dias do planejamento. O caso em que n = 0 representa o final do arquivo e não deve ser processado.

Nas próximas n são especificados, na ordem que segue, os inteiros ft ≥ 0, pt, ht e dt ≥ 0, em que 1 ≤ t ≤ n.";Para cada pesquisa processada, seu programa deve imprimir na primeira linha do texto Instancia #x, onde x é o número da instância do arquivo de entrada. (As instâncias são numeradas sequencialmente a partir de um). Na segunda linha deve ser impresso o custo mínimo do período de n dias. Nesta fase de seu trabalho, não é necessário imprimir o plano de produção. Uma linha em branco deve ser deixada entre cada pesquisa.;False;9 / 10;165;37;22.42%
1811;O Óscar Vai Para...;Ad-Hoc;8;"Não há momento de maior angústia entre as estrelas do cinema que a cerimônia de entrega das estatuetas no Kodak Theatre. Não são raros os atores e atrizes que veem suas pulsações atingirem níveis alarmantes. Os riscos de um enfarto crescem muito quando os batimentos se tornam mais e mais rápidos em períodos consecutivos, caracterizando um período de grande ansiedade.

                    Preocupada com este fato, a Academia de Artes e Ciências de Hollywood resolveu monitorar em intervalos regulares os batimento cardíacos dos vários candidatos a receber a estatueta. Com estes dados pretende-se fazer um programa que alerte os médicos de plantão caso um dos famosos esteja à beira de um ataque cardíaco. Sua tarefa neste problema é auxiliar a Academia nesta nobre missão.";São dadas várias instâncias. A primeira linha de cada instância contem o número 0 ≤ n ≤ 1000 de atores/atrizes monitorados (que serão identificados pelos números 1, 2, ..., n) e o numero 0 ≤ m ≤ 100 de batimentos observados nestes atores. A seguir, em cada um das próximas n linhas são dadas as m medições (o batimento cardíaco é um inteiro entre 0 e 200). O caso em que n = 0 representa o final do arquivo e não deve ser processado.;"Você devera imprimir um cabeçalho indicando o número da instância que está tratando (Instancia #i) e na linha seguinte o numero de ator/atriz que está com maior risco de sofrer um infarto. O risco para o infarto cresce com o número de observações consecutivas em que o numero de batimentos cresceu. Caso haja empate neste critério, devolva o ator que apresenta a maior diferença entre a primeira e a última medição do intervalo em que os batimentos foram aumentando. Se persistir o empate, o risco será maior para aquele com o maior batimento no fim do intervalo. Se ainda não houver decisão, retorne o de menor índice.
					
					 Obs: deve ser impressa uma linha em branco após cada instância.";False;8 / 10;380;113;29.74%
1813;Anacrônico?;Grafos;9;"Mr. Řež Slovankou é proprietário de uma empresa em Praga especializada no transporte de produtos perecíveis. Por ser uma das mais antigas e tradicionais empresas do ramo, ela é responsável por mais de 90% dos transportes deste tipo de mercadoria realizadas no país. Diariamente, vários caminhões carregados deixam postos da empresa (local onde os produtos ﬁcam armazenados) com destino aos centros consumidores.

Visando um futuro ingresso no Espaço Econômico Europeu, o governo da República Tcheca, através do órgão de inspeção e vigilância sanitária, baixou uma série de medidas para assegurar ainda mais a qualidade dos alimentos consumidos pela população. Para não perder mercado, a empresa de Mr. Řež precisa adequar-se, o mais rápido possível, às novas regras.

Segundo o governo, a partir de agora, produtos destinados a diferentes centros consumidores não mais poderão compartilhar um mesmo caminhão. Além disso, todo transporte deverá ser concluído em um período abaixo de um tempo limite, especiﬁcado para cada mercadoria.

A adequação a essas novas regras trará consigo um aumento generoso nos custos operacionais da empresa. Preocupado com isso, Mr. Řež decidiu que seus caminhões deverão satisfazer às regras, mas que também deverão percorrer sempre o menor caminho possível até os centros consumidores (para economizar combustível, gastar menos os pneus, etc.).

Para resolver este problema logístico, Mr. Řež pediu auxílio a você, que disse ser capaz de construir um programa que recebe um mapa da malha viária (em que cada estrada tem associado um comprimento em quilômetros e um tempo em minutos que leva para ser percorrida), a origem e o destino do transporte, o tempo limite, e diz se é ou não possível realizar a entrega de acordo com as restrições impostas. Em caso aﬁrmativo, você ainda disse que responderá o tempo gasto e a distância percorrida.

Mr. Řež ﬁcou muito impressionado e satisfeito com sua prestatividade, e prometeu-lhe uma boa gratificação.";"Seu programa será capaz de resolver várias instâncias do problema logístico. Cada instância possui a estrutura descrita abaixo.

Na primeira linha são fornecidos o número de cidades (0 ≤ n ≤ 100) e o número de estradas (0 ≤ m ≤ 10000) da malha viária. Nas próximas m linhas são dados, em cada linha, quatro números inteiros separados por espaços em branco, x y c t, em que x e y são as cidades de onde sai e onde chega uma estrada, respectivamente, c é o comprimento desta estrada e t o tempo gasto para percorrê-la (obtido junto ao departamento nacional de estradas e rodagem, que afere o trânsito de tempos em tempos). Observe que 1 ≤ x, y ≤ n e que c, t ≥ 0. Uma característica interessante na República Tcheca é que as estradas são de mão única para evitar as ultrapassagens indevidas, que causam acidentes.

Na linha seguinte é fornecido um inteiro k ≥ 0 que representa o número de entregas que seu programa deve planejar nesta malha viária. As próximas k linhas possuem, em ordem, a cidade de origem, a cidade de destino e o tempo limite t para o transporte da mercadoria, em minutos. De acordo com o órgão de inspeção e vigilância sanitária, nenhum transporte com duração superior a 100 horas será admitido. Logo, 0 ≤ t ≤ 6000. Um valor n = 0 indica o término das instâncias e não deve ser processado.";"Para cada instância solucionada, você deverá imprimir um identiﬁcador ""Instancia h"", em que h é um número inteiro, sequencial e crescente a partir de 1. As próximas k linhas referem-se à possibilidade das entregas. Para 1 ≤ j ≤ k, você deve imprimir na j-ésima linha a mensagem ""Impossivel"" se não for possível realizar a entrega dentro do tempo limite, ou ""Possivel - <d> km, <t> min"", onde <d> é a distância que deve ser percorrida e <t> o tempo gasto para percorrer essa distância. Se houver mais de um caminho com a menor distância possível, escolha o de menor tempo.

Uma linha em branco deve separar a saída de cada instância.";False;9 / 10;334;72;21.56%
1814;DNA Storage?;Ad-Hoc;7;"A Universidade Charles, situada em Praga, a exemplo de diversas outras universidades de renome ao redor do mundo, instituiu recentemente um programa interdepartamental de pós-graduação na área de biologia computacional. Integrante do corpo docente, Ms. Dolejškova está atualmente interessada no problema das árvores filogenéticas, e trabalhando, portanto, com n cadeias de DNA. Para simplificar o trabalho, Ms. Dolejškova resolveu trabalhar apenas com cadeias gênicas de comprimento m (isto é, todas as cadeias possuem exatamente m bases nitrogenadas).

                    Um subproblema interessante envolve o armazenamento das n cadeias em disco. Até o momento, Ms. Dolejškova está utilizando um esquema ingênuo que requer n × m caracteres, além dos delimitadores. Isto é, todas as sequências são gravadas dentro de um arquivo texto, sequencialmente. Mr. Chuchle, um colega de departamento e especialista em técnicas de armazenamento, sugeriu uma alternativa que pode ser mais econômica.

                    Segundo Mr. Chuchle, é possível armazenar uma cadeia juntamente com informações que permitam transformá-la em outras. Mais especificamente, considere duas cadeias de DNA D1 = ACTA e D2 = AGTC, onde A, C, G, T representam as bases nitrogenadas adenina, citosina, guanina e timina, nesta ordem. Observe que é possível transformar D1 em D2 trocando-se as bases nitrogenadas C e A das posições 2 e 4 de D1 para G e C, respectivamente. Considere agora uma terceira cadeia D3 = CGTC. E necessária apenas uma modificação para transformar D2 em D3 e são necessárias três modificações para transformar D1 em D3. Logo, é vantajoso permitir a transitividade das modificações entre as cadeias.

                    Ms. Dolejškova observou rapidamente que, se as cadeias envolvidas forem muito diferentes entre si, este esquema de armazenamento alternativo não oferece ganhos. Assim, em vez de adotá-lo prontamente, ela solicitou a você que construa um programa que recebe as n cadeias, e determina o número mínimo de transformações que devem ser gravadas (além de uma cadeia) para que seja possível, no futuro, obter-se novamente as n cadeias originais. Baseado no resultado fornecido por seu programa, Ms. Dolejškova vai decidir qual dos esquemas deve utilizar em cada instância de dados que tiver.";Seu programa deve estar preparado para trabalhar com diversas instâncias. Cada instância tem a estrutura que segue. Na primeira linha são fornecidos dois inteiros n e m (0 ≤ n ≤ 100 e 1 ≤ m ≤ 1000) que representam, nesta ordem, o número de cadeias de DNA e o comprimento delas. Nas próximas n linhas são fornecidas as n cadeias, uma por linha, sem espaços adicionais. Cada cadeia é uma sequência de caracteres tomada sobre o alfabeto Σ = {A, C, G, T}. Um valor n = 0 indica o final das instâncias e não deve ser processado.;Para cada instância solucionada, você deverá imprimir um identificador Instancia h em que h é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte, você deve imprimir o número mínimo de transformações que devem ser gravadas para esta instância. Uma linha em branco deve ser impressa após cada instância;False;7 / 10;270;64;23.70%
1815;Drunk People?;Matemática;8;Nos invernos de Praga o frio é insuportável. Para manter o corpo aquecido, diversos moradores utilizam-se de bebidas quentes (como café ou chá) ou alcoólicas. De tempos em tempos, Mr. Třeboň frequenta um pequeno bar de seu bairro. Porém, depois de muitas horas, alguns acabam exagerando nas doses. Nesse momento, Mr. Třeboň precisa retornar a sua casa. O problema é que ele não está se sentindo bem (ele está bêbado mesmo :-) e não lembra onde mora. Então ele começa a tocar as campainhas das casas e a perguntar se mora ali. Assim faz até encontrar sua casa. Devido ao seu estado, o Mr. Třeboň não segue nenhuma ordem lógica para tocar as campainhas das casas. Após tocar uma campainha e verificar que não é a sua casa, ele irá continuar procurando. Além disso, ele não consegue memorizar quais campainhas já tocou. A forma como ele escolhe as casas para tocar a campainha segue uma distribuição de probabilidade condicionada apenas à última casa tocada. Considere que alguém sempre atende à porta e responde ao Mr. Třeboň se ele mora ali ou não. Queremos saber qual a chance dele não conseguir chegar em casa para dormir, sabendo que após tocar um certo número de campainhas ele não aguentará mais e ficará por ali mesmo.;O arquivo de entrada tem a seguinte composição para cada instância: a primeira linha contém os inteiros 0 ≤ n ≤ 100, 0 < t ≤ n, 0 < k ≤ n, 0 < m ≤ 100, representando o número de casas, a casa inicial, a casa do Mr. Třeboň e a quantidade de casas que ele poderá tocar a campainha para tentar chegar em casa, respectivamente. São dadas então n linhas. A i-ésima linha representa a casa i e contém os números ai1, ... , aij, ... , ain, separados por brancos, representando a probabilidade do Mr. Třeboň ir da casa i para a casa j. A entrada termina com n = 0.;O arquivo de saída deve conter, para cada instância de entrada, um identificador Instancia h, em que h é um número inteiro, seqüencial e crescente a partir de 1. Na linha seguinte um número (arredondado em 6 casas decimais) indicando a probabilidade do Mr. Třeboň não ter encontrado a sua casa após m campainhas tocadas. Uma linha em branco deve separar a saída de cada instância, inclusive na ultima.;False;8 / 10;269;114;42.38%
1816;Vikings em Praga?;Ad-Hoc;2;"Vestígios de uma antiga civilização viking foram descobertos nos arredores de Praga, e uma grande quantidade de material impresso foi achada junto ao sítio arqueológico. Como esperado, a leitura deste material mostrou-se uma tarefa árdua e desafiadora, já que essa civilização utilizava um esquema de codifucação de texto para evitar que seu conhecimento fosse assimilado por seus rivais.

Recentemente, pesquisadores tchecos anunciaram com grande euforia à imprensa a compreensão do mecanismo de codificação utilizado por esses vikings. De acordo com os pesquisadores, o alfabeto viking era composto pelas letras de A até Z (incluindo as letras K, W e Y).

A codificação era realizada da forma que segue. Inicialmente, era construída uma lista em que a letra A aparecia na primeira posição, a letra B aparecia na segunda, e assim sucessicamente,com as letras sequindo a mesma ordem que em nosso alfabeto. Em sequida, o texto a ser codificado era barrido da esquerda para a direita e, para cada letra l encontrada, o número de sua posição na lista era impresso e l era movida para o início da lista. Por exemplo, a codificação viking para a mensagem:

A B B B A A B B B B A C C A B B A A A B C

era dada pela seguinte sequência de inteiros:

1 2 1 1 2 1 2 1 1 1 2 3 1 2 3 1 2 1 1 2 3

Os pesquisadores tchecos pediram sua ajuda para construir um programa que recebe uma sequência de inteiros que representa uma mensagem codificada e decodifica-a.";Seu programa deve estar preparado para trabalhar com diversas instâncias. Cada instância tem a estrutura que segue. Na primeira linha é fornecido um inteiro m (0 ≤ m ≤ 10000) que representa o número de inteiros que compõem o texto codificado. Na próxima linha são dados, separados por espaços em branco, os m valores inteiros (cada valor é maior ou igual a 1 e menor ou igual a 26). Um valor m = 0 indica o final das instâncias e não ser processado.;Para cada instância solucionada, você deverá imprimir um identificador Instancia h em que h é um número inteiro, sequêncial e crescente a partir de 1. Na linha seguinte, você deve imprimir o texto decodificado. Uma linha em branco deve ser impressa após cada instância.;False;2 / 10;613;347;56.61%
1817;Arqueólogos de Tsing Ling;Ad-Hoc;9;"A região de Tsing Ling é internacionalmente famosa por grandes achados arqueológicos. Alguns desses achados, como as ruínas de Tsé Lung Zhao, desafiam os melhores cientistas do mundo. Encravados nessas ruínas foram encontrados vários pares de sequências de caracteres de significados desconhecidos, e tal fato tornou-se o maior enigma de Tsing Ling. Cada par tem uma sequência menor e uma maior. Acima do portal do mosteiro de Tsing Ling está escrito que aquele que descobrir o significado das sequências terá a resposta para todas as perguntas do universo.

O arqueólogo alemão Harry Thanan Gruber acha que descobriu o enigma, mas para isso precisa da ajuda de vocês neste problema. Ele acha que a solução do enigma dos caracteres de Tsé Lung Zhao fornecerão os números para decifrar o livro de Tsin Wu, achado na mesma região pelo seu orientador, Dr. Cauchy-Schwartz, no fim do século XIX. Segundo a conjectura de Herr Gruber, a sequência de números que deve ser usada para decifrar o enigma é dada pelo número de vezes em que cada sequência menor ocorre na maior como subsequência.";São dados vários pares de sequências. Para cada par é dado o número 0 ≤ m ≤ 100 de caracteres na sequência menor ou igual e o número 0 ≤ n ≤ 1000 de caracteres na sequência maior. Nas linhas seguintes são dadas as duas sequências, uma por linha, primeiro a menor e depois a maior. Valores m = n = 0 indicam o final dos dados.;"Para cada par de sequências, doravante denominadas instância, você deverá imprimir um identificador ""Instância h"", em que h é um número inteiro, sequencial e crescente a partir de 1. Na próxima linha, você deve imprimir o número de vezes que a sequência menor ocorre como subsequência da maior. Uma linha em branco deve separar a saída de cada instância.";False;9 / 10;65;21;32.31%
1819;Estimando a Produção;Matemática;10;"A China é uma grande produtora de alimentos, mas também uma enorme consumidora. Pesquisadores chineses perceberam que em certos momentos de sua história a produção agrícola foi maior que o consumo, e em outros momentos esse quadro se inverteu. Preocupados com o futuro da grande nação, passaram a coletar dados sobre a área de plantio, a quantidade de trabalhadores e a produção agrícola. Para melhor investir seus recursos, eles agora desejam fazer uma previsão sobre a produção do país.

                    O conjunto de dados que os pesquisadores conseguiram coletar é formado por triplas (Xi,Yi,Zi), em que Xi representa a área de plantio, Yi a quantidade de trabalhadores e Zi a produção agrícola. Como essa produção está ligada diretamente com os demais dados coletados, eles decidiram estimar a produção futura usando a função linear a1+a2x+a3y, que minimiza a soma dos erros quadrados

                     

                    em que n é o total de triplas disponíveis. Desta forma eles serão capazes de planejar melhor a produção e o consumo dos próximos anos. Seu objetivo é calcular a função linear desejada.";A entrada é composta de diversas instâncias. Para cada instância da entrada é dado um número inteiro 3 ≤ n ≤ 1000 indicando quantas triplas foram obtidas na coleta de dados. Em cada uma das próximas n linhas é dada uma tripla Xi, Yi e Zi ,como área de plantio (em milhares de hectares), a quantidade de trabalhadores envolvidos (dado em milhares de pessoas), e a produção agrícola (dada em toneladas de alimentos), respectivamente. O arquivo de entrada termina quando for encontrado n = 0. Assuma que não existe uma relação linear entre a quantidade de trabalhadores e a área de plantio, ou seja, não existem constantes α,β tais que, para todo i, xi = αyi + β. Assuma também que 0 ≤ Xi,Yi,Zi ≤ 1000 e que todos os valores dados são inteiros.;"Para cada instância solucionada, você deverá imprimir um identiﬁcador Instancia h em que h é um número inteiro, sequencial e crescente a partir de 1. Na próxima linha, você deve imprimir os três números a1, a2 e a3, representando os cocientes da função linear procurada. Esses números devem estar truncados em três casas decimais.

                    Uma linha em branco deve separar a saída de cada instância.";True;10 / 10;43;1;2.33%
1820;Grupos da Universidade de Sing Pil;Ad-Hoc;9;"Na famosa Universidade de Sing Pil os estudantes sempre fazem os trabalhos em grupo. As regras para a formação dos grupos, no entanto, são estritas e o reitor sempre verifica se não há um grupo de estudantes que violou as regras.

                    Bom, para falar a verdade, a única regra existente remonta à criação da universidade. Naquela época os alunos compunham grupos de três alunos para fazer as tarefas. Quatro alunos, chamados Ting, Ling, Xing e Ming eram muito amigos e, para todas as tarefas que precisavam ser feitas, montavam um grupo entre eles. Isso era muito ruim, porque obrigar as tarefas em grupos visava a aumentar a interação entre os alunos. Desde então proibiu-se em Sing Pil a formção de quadrados, isto é, que quatro alunos montem quatro grupos em que apenas eles são os membros.

                    No caso dos alunos {Ting, Xing, Ling, Ming} (usaremos apenas a primeira letra para simplificar), um quadrado seria formado pelos quatro grupos a seguir:

                    {TLX, TXM, MXL, LMT}.

                    Sua tarefa neste problema é escrever um programa para ajudar o reitor da universidade a verificar se existem ou não quadrados nos grupos.";"São dadas várias instâncias. Para cada instância é dado o número m (0 ≤ m ≤ 50) de grupos. O valor m = 0 indica o fim dos dados e não deve ser processado.

                    Cada estudante em Sing Pil é identificado com um número inteiro entre 1 e 100, inclusive. Nas próximas m linhas são dados, em cada linha, três números correspondentes a três estudantes que formam um grupo.";"Para cada instância solucionada, você deverá imprimir um identificador Instancia h em que h é um número inteiro, sequencial e crescente a partir de 1. Caso não existam quadrados nos grupos, seu programa deve imprimir ok. Em caso contrário, seu programa deve imprimir todos os quadrados encontrados, um por linha, com os números dos alunos separados por um espaço em branco. Para facilitar a leitura do reitor, os números dos alunos em um quadrado deverão estar em ordem crescente e os quadrados deverão estar listados em ordem lexicográfica crescente.

                    Uma linha em branco deve separar a saída de cada instância.";False;9 / 10;75;23;30.67%
1821;Miai Chinês;Grafos;9;"São notórios os problemas que a China vem enfrentando ao longo do tempo para controlar a explosão populacional que aflige o país. Para piorar a situação, no interior, os casamentos costumam ser tradicionalmente arranjados nas famílias, aumentando as chances do nascimento de crianças com pais aparentados.
	                   
                    Ciente do problema, o governo chinês resolveu criar uma agência oficial de matrimônios. Esta agência deve receber as informações dos jovens que pretendem se casar e decidir se é possível realizar casamentos entre eles que evitem uniões de parentes e de tal forma que nenhum dos jovens termine solteiro. Como em muitos outros países do mundo, na China são permitidos apenas casamentos monogâmicos entre rapazes e garotas.

                    Sua tarefa neste problema é auxiliar o governo, escrevendo um programa para descobrir se é possível realizar casamentos em dados grupos de jovens.";"Seu programa deve estar preparado para trabalhar com diversos grupos de jovens, doravante denominados instâncias. Cada instância tem a estrutura que segue.

                    Na primeira linha são fornecidos inteiros n (0 ≤ n ≤ 100), que representa o número de rapazes e garotas, e m (0 ≤ m ≤ 1000) que representa o número de parentescos existentes entre eles. Não foram incluídos em m parentescos entre um mesmo sexo, pois isso é irrelevante ao problema.

                    Nas próximas m linhas são fornecidos m pares de números entre 1 e n, inclusive, um par por linha. O primeiro número representa um rapaz e o segundo uma garota que são parentes.

                    Valores n = m = 0 indicam o final das instâncias e não devem ser processados.";"Para cada instância solucionada, você deverá imprimir um identificador Instancia h, em que h é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte, você deve imprimir possivel se for possível realizar os casamentos entre os n rapazes e as n garotas sem que parentes se casem, e imprimir impossivel em caso contrário.

Uma linha em branco deve separar a saída de cada instância.";False;9 / 10;152;53;34.87%
1822;Obras da China;Paradigmas;5;"Devido à abertura econômica ocorrida na China nos últimos anos, boa parte do país foi transformada em canteiro de obras. Algumas construções em curso são tão monumentais que, juntamente com a já famosa Muralha da China, poderão ser vistas da lua a olho nu.

                    Uma empreiteira radicada em Shangai é responsável pela execução de várias obras no país. Após algum tempo, os engenheiros da empreiteira perceberam que, a cada nova obra, tinham de resolver um problema semelhante ao que já tinham resolvido no início das obras anteriores. Cansados de realizar sempre os mesmos tipos de cálculos, pediram a sua ajuda na construção de um programa que resolvesse o problema deles, descrito a seguir.

                    Considere uma obra que tem duração de n semanas. Na i-ésima semana da obra, para i ≤ 1 ≤ n, são necessários fi funcionários para executá-la. Os custos com recrutamento e instrução de um funcionário são de x yuan. Gasta-se y yuan para demitir um funcionário. Um funcionário necessário custa z yuan por semana e cada funcionário excedente, isto é, cada funcionário contratado que não é necessário em uma semana da obra, custa w yuan por semana para a empreiteira. (yuan é a moeda chinesa.) Funcionários podem ser contratados e demitidos a cada semana. Inicialmente, a obra não possui nenhum funcionário. Ao final da mesma, todos os funcionários devem ser demitidos. O problema consiste em determinar o menor valor possível que a empreiteira deve gastar com funcionários ao longo da obra, satisfazendo sempre as restrições semanais. Ou seja, não pode haver menos de fi funcionários trabalhando na obra na i-ésima semana.";"Seu programa deve estar preparado para trabalhar com diversas obras, doravante denominadas instâncias. Cada instância tem a estrutura que segue.

                    Na primeira linha é fornecido um inteiro n (0 ≤ n ≤ 200) que representa o número de semanas de duração da obra.

                    Na próxima linha são dados, separados por espaços em branco, n valores inteiros não negativos e menores ou iguais a 50, em que o i-ésimo valor (1 ≤ i ≤ n) representa o número fi de funcionários necessários na i-ésima semana.

                    Na linha seguinte, também separados por espaços em branco, são fornecidos quatro inteiros x, y, z e w (0 ≤ x, y, z, w ≤ 1000), em que x é o custo de recrutamento e instrução de um funcionário novo, y é o custo de demitir um funcionário empregado, z é o custo semanal de um funcionário necessário e w é o custo para manter um funcionário excedente, por uma semana, na obra.

                    Um valor n = 0 indica o final das instâncias e não deve ser processado.";"Para cada instância solucionada, você deverá imprimir um identificador “Instancia h” em que h é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte, você deve imprimir o menor valor possível que a empreiteira deve gastar com funcionários ao longo dessa obra.

                    Uma linha em branco deve separar a saída de cada instância.";False;5 / 10;43;28;65.12%
1823;O Penúltimo Imperador;Grafos;10;"Muito se conhece do último imperador da China, imortalizado no clássico filme vencedor do Oscar. Porém, seu antecessor, o Imperador Thang Po Lop teve uma vida muito mais interessante, uma vez que morreu ainda na cidade proibida, cercado de concubinas e criados eunucos.

                    O Imperador Po Lop era um grande colecionador de pauzinhos (daqueles que os orientais utilizam para comer). Desde seus 9 anos ele os guardava e construía com eles enormes labirintos utilizando uma estratégia bastante interessante. Inicialmente Po Lop escolhia um dos pátios retangulares da cidade proibida para construir o labirinto, e esse labirinto sempre ocupava todo o espaço do pátio escolhido. Os pauzinhos eram então colocados nesse pátio aparentemente em lugares aleatórios, sempre paralelos a um dos cantos do pátio. O imperador nunca colocava pauzinhos sobrepostos (nem mesmo parte deles), apesar de ser possível existir cruzamentos ou até mesmo pauzinhos se encostando. Consta na biografia do imperador Po Lop que ele construiu labirintos gigantescos, sempre tomandos esses cuidados.

                    Infelizmente havia um problema. Apesar de exímio construtor de labirintos, o imperador era incapaz de saber se afinal o labirinto continha ou não um caminho ligando sua a entrada à sua saída (sempre em lados opostos do pátio). Para saber isso, ele se utilizava de seus eunucos. Ele instruía o eunuco a procurar o caminho naquele labirinto. Muitas vezes, o eunuco dizia não ser possível. O imperador Po Lop se zangava e degolava o infeliz, pois duvidava da resposta do criado. Felizmente, além de muito paciente (não com eunucos) o imperador era bastante cuidadoso, e anotava criteriosamente as informações sobre os labirintos que construía. Estas anotações foram encontradas na biblioteca da cidade proibida quando da revolução e salvas da destruição. Sua tarefa neste problema é resolver finalmente o enigma, verificando se os labirintos construídos pelo Imperador Po Lop têm ou não saída.";Seu programa deve estar preparado para trabalhar com diversos labirintos, doravante denominados instâncias. Cada instância é iniciada com uma linha contendo 5 números, ditos  n xi yi xf yf . O valor  n  indica o número de pauzinhos que foram usados para construir o labirinto. O par ( xi , yi ) é o canto inferior esquerdo do pátio e também o ponto de partida. O par ( xf , yf ) é o canto superior direito e também ponto de chegada do labirinto. Nas próximas  n  linhas são dadas as coordenadas  x1 y1 x2 y2  representando os extremos ( x1 , y1 ) e ( x2 , y2 ) de um dos pauzinhos usados na construção do labirinto. O arquivo de entrada termina com  n  < 0. Pode-se assumir que todos os números dados são inteiros e que  n  ≤ 1000.;"Para cada instância solucionada, você deverá imprimir um identificador Instancia h em que h é um número inteiro, seqüencial e crescente a partir de 1. Na linha seguinte, voce deve imprimir sim se existir uma maneira de ir do ponto de partida do labirinto até seu ponto de chegada (sem atravessar nenhum pauzinho...), e imprimir nao em caso contrário.

                    Uma linha em branco deve separar a saída de cada instância.";False;10 / 10;28;5;17.86%
1824;Sapos de Tsé-Tsé;Ad-Hoc;9;"A mosca do sono é uma das pragas mais sérias na China, que causa prejuízos enormes ao governo do país. Populações inteiras de pequenas cidades são picadas pela mosca e acabam caindo no sono durante o trabalho (muitos suspeitam que nem são as moscas as causadoras do problema, mas isso é outra história...).

                    Preocupados com esta situação os pesquisadores de Engenharia Genética da Universidade de Zhao-Zhao estudaram o genoma de um sapo comedor de insetos da região e descobriram que o padrão de saltos do sapo poderia ser facilmente controlado se uma alteração fosse feita em seu cromossomo 12. Infelizmente nem todos os experimentos resultaram em sucesso e, além de alguns sapos sem pernas e com 12 olhos, os experimentos deram origem a várias espécies de sapos com características diferentes de saltos. O objetivo deste problema é que vocês desenvolvam um programa que, a partir da observação do padrão de saltos de um sapo, verifique se ele é do tipo desejado. Um sapo é do tipo desejado se colocado no canto superior esquerdo de um lago retangular ele cobrir toda a extensão do lago com um número mínimo de saltos.

                    Para anotar o padrão de saltos de um sapo foram feitos vários experimentos. Em cada experimento o sapo foi colocado em uma posição do lago e se anotou para que posição vizinha ele saltou. As posições vizinhas são ordenadas de 1 a 8 no sentido dos ponteiros do relógio, começando na posição imediatamente acima da posição do sapo, como na figura abaixo.

                    
                    	
                    	
                    		8
                            1 
                            2
                        
                    
                    		7
                            sapo 
                            3
                        

                    		
                    		6
                            5 
                            4
                        
                    	
                    

                    Sua tarefa é dada uma instância de um lago, marcado em cada uma de suas posições com o padrão de saltos do sapo, verificar se este, quando colocado no canto superior esquerdo do lago, percorre todas as suas posições.";São dadas várias instâncias. Cada instância começa com dois inteiros m (0 ≤ m ≤ 1000) e n (0 ≤ n ≤ 1000) que definem a dimensão do lago. Em seguida vêm m linhas com n números inteiros, descrevendo o comportamento do sapo quando colocado naquela posição do lago. Valores m = n = 0 indicam o final das instâncias e não devem ser processados.;Para cada instância solucionada, você deverá imprimir um identificador Instancia h, em que h é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte, você deve imprimir sim se o sapo passou por todas as mn posições do lago e nao em caso contrário. Uma linha em branco deve separar a saída de cada instância.;False;9 / 10;199;60;30.15%
1825;Formigando;Geometria Computacional;6;"Um grupo de cientistas malucos da ACGOP (Academia de Ciência e Ginástica Olímpica Pindamonhangabense) está estudando o comportamento de uma estranha raça de formigas cegas. Após anos de estudo, eles concluíram que:


	Essas formigas só andam em linha reta e seu comportamento é o mesmo da luz. Ou seja, quando encontram uma parede pela frente, sua rota é ""refletida"" (como se fosse um raio de luz incidindo num espelho plano) e ela segue andando de modo que sua rota forme com o obstáculo um ângulo igual ao de incidência;
	Essas formigas só param quando passam por um alimento e voltam a andar no mesmo sentido que vinham logo após devorar o alimento;
	O máximo que uma formiga consegue viajar sem morrer de fome é 2 metros.


Para comprovar essas conclusões, os cientistas construíram uma série de cenários, onde eles colocariam as formigas para andar. Cada cenário consiste num retângulo de dimensões M x N metros com 4 entradas, situadas nos vértices, que de agora em diante chamaremos pelos nomes dos pontos cardeais, conforme a figura:



Dentro do retângulo foram distribuidas MN comidas, colocadas no centro de cada quadrado de 1 metro de lado interior ao retângulo. As formigas são introduzidas nos retângulos por uma das quatro portas numa rota que forma 45 graus com os lados do retângulo de modo que, após percorrer aproximadamente 0,707 metros, alcançam o primeiro alimento e, em seguida, continuam suas viagens pelo mesmo caminho, até que uma das três situações ocorra:


	A formiga bate na parede: neste caso sua rota é refletida e ela segue andando de modo que sua rota forma com a aparede um ângulo igual ao de incidência (ou seja, permanece 45 graus);
	A formiga anda mais de 2 metros e não encontra comida: nesse caso ela morre (tadinha);
	A formiga encontra uma porta: nesse caso ela sai e o experimento está concluído.


Sua missão é escrever um programa que preveja o que vai acontecer com a formiga colocada em cada um dos cenários da pesquisa.";A entrada consistirá de diversos cenários. Para cada cenário serão fornecidas, numa única linha, as medidas do retângulo, primeiro a largura M (Norte - Oeste), depois a profundidade N (Norte - Leste) (0 < m,n ≤ 100.000), e a porta por onde entrou a formiguinha. Uma linha contendo o valor 0 para uma das dimensões do retângulo marca o final da entrada.;"Para cada cenário, você deverá escrever uma linha no arquivo de saída, com um dos seguintes conteúdos:


	No caso da formiga morrer de fome, a espressão ""Morreu...""
	Caso contrário, você deverá escrever:
	
		A porcentagem das comidas que foram devoradas na peregrinação da formiga rumo à saída (com três digitos, espaços à esquerda se for o caso, arredondado para o inteiro mais próximo, ou para baixo, no empate, seguido seguido do sinal %);
		A quantidade de trombadas que a formiga deu nas paredes do retângulo (10 casas, alinhado à direita, espaços à esquerda);
		A porta pela qual ela saiu.
	
	


A imagem a seguir é sobre o exemplo abaixo:";True;6 / 10;34;14;41.18%
1826;A Linguagem é Infinita?;Grafos;10;"Gramática livre-do-contexto – GLC – é uma estrutura matemática utilizada para gerar cadeias, que são sequências finitas de símbolos terminais. Dizemos que o conjunto de todas as cadeias que podem ser geradas por uma GLC G é a linguagem de G, escrito L(G). Neste problema, dada uma GLC G, você deve determinar se L(G) é um conjunto vazio, finito, ou infinito.

Uma GLC é uma 4-upla (V, Σ, R, S), onde


	V é um conjunto finito e não-vazio cujos elementos chamamos de variáveis.
	Σ é um conjunto finito e não-vazio, disjunto de V, cujos elementos chamamos de símbolos terminais.
	R é um conjunto regras. Uma regra tem a forma 
	A → U1U2...Uk
	onde A ∈ V, k ≥ 0 e Ui ∈ V ∪ Σ para i = 1,2,...,k.
	S ∈ V é a variável inicial.


Para gerar uma cadeia utilizando uma GLC, realizamos o seguinte procedimento.

Primeiro, escrevemos a variável inicial S. Em seguida, escolhemos uma regra para substituir S, digamos, S → U1U2...Uk. Após esta escolha, apagamos o S e escrevemos em seu lugar a cadeia de variáveis e/ou terminais U1U2...Uk. Repetimos este processo até que não restem variáveis escritas. Se não é possível gerar uma cadeia sem variáveis partindo apenas da variável inicial, dizemos que a linguagem da GLC é vazia.

Por exemplo, seja a GLC abaixo, onde S é a variável inicial.

S → aSa

S → bSb

S → a

S → b

S → 

Utilizando a GLC acima, podemos gerar qualquer palíndromo feito de a's e b's. Por exemplo:

S → aSa → abSba → abba

Observe que a cadeia vazia é uma cadeia válida. Logo, se uma GLC G gera, por exemplo, apenas a cadeia vazia, L(G) é finita, mas não é vazia.

Neste problema, as variáveis serão palavras feitas somente de letras maiúsculas, ou seja, caracteres entre A e Z. Os símbolos terminais serão letras minúsculas, ou seja, caracteres entre a e z. As regras serão dadas conforme descrito na próxima seção. A variável inicial será sempre a primeira variável do caso de teste.";"A entrada contém vários casos de teste. Cada caso de teste fornece a descrição de uma gramática livre-do-contexto.

A primeira linha de um caso de teste contém dois inteiros v e r, onde v é a quantidade de variáveis da GLC, r é a quantidade de regras, 1 ≤ v ≤ 102 e 0 ≤ r ≤ 2·102.

Cada uma das próximas v linhas contém uma palavra feita somente de letras maiúsculas, ou seja, uma variável da GLC. A variável da primeira linha é a variável inicial.

Cada uma das próximas r linhas descreve uma regra da GLC. É dada uma palavra de letras maiúsculas, um inteiro 0 ≤ k ≤ 102 e uma sequência de k elementos, onde cada elemento é uma variável, ou um símbolo terminal.";"Para cada caso de teste, imprima uma linha com a palavra ""vazia"" se a GLC não gera nenhuma cadeia de terminais, ou a palavra ""finita"" se a GLC gera alguma, mas não infinitas cadeias de terminais, ou a palavra ""infinita"" se a GLC gera infinitas cadeias de terminais.";False;10 / 10;67;30;44.78%
1827;Matriz Quadrada IV;Iniciante;3;"Neste programa seu trabalho é ler um valor inteiro que será o tamanho da matriz quadrada (largura e altura) que será preenchida da seguinte forma: a parte externa é preenchida com 0, a parte interna é preenchida com 1, a diagonal principal é preenchida com 2, a diagonal secundária é preenchida com 3 e o ponto central contém o valor 4, conforme os exemplos abaixo.

					Obs: o quadrado com '1' sempre começa na posição tamanho/3, tanto na largura quanto quanto na altura. A linha e a coluna começam em zero (0).";A entrada contém vários casos de teste e termina com EOF (fim de arquivo. Cada caso de teste consiste de um valor inteiro ímpar N (5 ≤ N ≤ 101) que é o tamanho da matriz.;Para cada caso de teste, imprima a matriz correspondente conforme o exemplo abaixo. Após cada caso de teste, imprima uma linha em branco.;False;3 / 10;8815;4746;53.84%
1828;Bazinga!;Iniciante;2;"No oitavo episodio da segunda temporada do seriado The Big Bang 
        Theory, The Lizard-Spock Expansion, Sheldon e Raj discutem qual 
        dos dois é o melhor: o filme Saturn 3 ou a série Deep Space 
        9. A sugestão de Raj para a resolução do impasse é uma disputa de 
        Pedra-Papel-Tesoura. Contudo, Sheldon argumenta que, se as partes 
        envolvidas se conhecem, entre 75% e 80% das disputas de 
        Pedra-Papel-Tesoura terminam empatadas, e então sugere o 
        Pedra-Papel-Tesoura-Lagarto-Spock. 
 As regras do jogo proposto são:
        a tesoura corta o papel;o papel embrulha a pedra;a pedra esmaga o lagarto;o lagarto envenena Spock;Spock destrói a tesoura;a tesoura decapita o lagarto;o lagarto come o papel;o papel contesta Spock;Spock vaporiza a pedra;a pedra quebra a tesoura.
 Embora a situação não se resolva no episódio (ambos escolhem 
        Spock, resultando em um empate), não é difıcil deduzir o que 
        aconteceria se a disputa continuasse. Caso Sheldon vencesse, ele se 
        deleitaria com a vitória, exclamando ""Bazinga!""; caso Raj vencesse, 
        ele concluiria que ""Raj trapaceou!""; caso o resultado fosse empate, 
	    ele exigiria nova partida: ""De novo!"".  Conhecidas as personagens do        jogo escolhido por ambos, faça um programa que imprima a provável 
        reação de Sheldon.";"A entrada consiste em uma série de casos de teste. A primeira 
        linha contém um inteiro positivo T 
        (T ≤ 100), que representa o número de casos de 
        teste. Cada caso de teste é representado por uma linha da entrada, 
        contendo as escolhas de Sheldon e Raj, respectivamente, separadas 
        por um espaço em branco. As escolha possíveis são as personagens do 
        jogo: pedra, papel, tesoura, lagarto e Spock.";"Para cada caso de teste deverá ser impressa a mensagem 
        ""Caso #t: R"", onde t 
        é o número do caso de teste (cuja contagem se inicia no número um) 
        e R é uma das três reações possíveis de Sheldon: 
        ""Bazinga!"", ""Raj trapaceou!"", ou ""De novo!"".";False;2 / 10;15348;7384;48.11%
1829;Jogo do Maior Número;Matemática;6;"Lucas e Pedro são alunos do ensino médio que ficaram impressionados 
        após uma aula de matemática, na qual foi apresentado o fatorial de um 
        número natural n, isto é,
		 
        com 0! = 1. Ficaram com uma dúvida, porém: qual operação produz os
        maiores resultados, o fatorial ou a exponenciação?
Com esta dúvida em mente, propuseram o Jogo do Maior Número: os dois
        participantes teriam que dizer, ao mesmo tempo e o mais rápido possível,
        o maior número que viesse a cabeça, sendo o vencedor aquele que dissesse
        o maior dentre os dois números.
        Escolheram Beto como juiz, que foi tomando notas dos números que
        os dois não cessavam de falar. Lucas citava sempre exponenciais, 
        enquanto Pedro se concentrava nos fatoriais.
Ao fim da brincadeira, um porém: nem os participantes, tampouco o 
        juiz, tinha a menor ideia de quem havia sido o vencedor. Escreva, 
        portanto, um programa que os auxilie a decidir quem foi o vencedor de 
        cada rodada da brincadeira, e quem se sagrou campeão (maior número de 
        vitórias, consideradas todas as rodadas).";"A primeira linha da entrada contém o número inteiro positivo 
        N (N ≤ 1.000), que representa o número de
        rodadas disputadas.
Cada rodada é representada por duas linhas: a primeira contém a 
        exponencial dita por Lucas, na forma a^b
        (2 ≤ a, b ≤ 10.000), e a segunda contém o fatorial 
        escolhido por Pedro, na forma n! (2 ≤ n ≤ 
        10.000).  
        Os números a, b, n são inteiros e a expressão
        a^b significa ""a elevado à 
        b-ésima potência"".";"A primeira linha da saída consiste na mensagem 
        ""Campeao: C!"", onde C é o nome do participante
        que venceu o maior número de rodadas, ou a mensagem 
        ""A competicao terminou empatada!"", se for o caso.
Após esta mensagem inicial, deve ser impressa, para cada rodada 
        disputada, a mensagem ""Rodada #r: V foi o
        vencedor"", onde r é o número da rodada (cuja contagem se 
        inicia no número um) e V é o nome do participante que 
        venceu a rodada de número r.
Ao final de cada mensagem da saída deve ser impressa uma quebra de
        linha.";True;6 / 10;1476;462;31.30%
1830;Caixas de Bombons;Matemática;9;"Uma fábrica de chocolates produz três tipos de bombons. Os 
        ingredientes básicos necessários para a fabricação de uma unidade de 
        cada tipo estão listados abaixo:
        Crocante:5 gramas de amendoim, 25 gramas de chocolate branco e 20 
            gramas de chocolate ao leite;Misto:25 gramas de chocolate branco e 25 gramas de chocolate ao 
            leite;Tradicional:50 gramas de chocolate ao leite.
Esta fábrica comercializa três tipos de caixa de bombons, com 30 
        unidades cada, com os nomes e composições listados a seguir:
        Especial:30 bombons do tipo Crocante;Predileta:10 bombons do tipo Crocante e 20 bombons do tipo Misto;Sortida:10 bombons de cada um dos três tipos.
Sabendo que no mês de abril a fábrica gastou, na fabricação dos 
        bombons dos três tipos descrito, X kg de amendoim, 
        Y kg de chocolate branco e Z kg de chocolate ao 
        leite, quantas caixas, de cada tipo, foram produzidas neste referido 
        mês?";"A entrada consiste em vários casos de teste, sendo cada caso 
        representado por uma única linha com os valores de X, 
        Y e Z, 
        (0 ≤ X,Y,Z ≤ 10000), em kilogramas,
	    separados por um espaço em branco e seguidos de uma quebra de linha. 
        Uma linha com três zeros indica o fim da entrada, e não deve ser 
        processada.
Os valores de X, Y, Z são números reais com até 3 casas 
        decimais de precisão.";"Para cada caso de teste a saída deve ser a mensagem
        ""Caso #t: A Especial, B Predileta e 
	    C Sortida"", onde os inteiros A,B,C são as 
        quantidades de cada 
        tipo de caixa de bombom e t é o número do caso de teste, 
        cuja contagem tem início no número um. Ao final de cada mensagem deverá         ser impressa uma quebra de linha.";False;9 / 10;475;100;21.05%
1831;Dia Difícil de Trabalho;Matemática;8;"José trabalha no ramo de vendas de laranjas. Ele tem uma equipe de 
	    funcionários que embalam as laranjas para a venda e distribuição em 
        sacos, onde cada saco contém o mesmo número de laranjas.
Com o aumento da produção, José contratou novos funcionários. No 
        primeiro dia de trabalho da nova equipe, os trabalhadores embalaram as 
        laranjas em sacos com 5 laranjas cada, e restaram 2 laranjas. A equipe,         contudo, não sabia que o número de laranjas em um saco havia subido 
        para 7, de modo que tiveram que desembalar as laranjas e reempacotá-las         em sacos com 7 unidades cada.  Ao fim deste segundo serviço sobraram 3 
        laranjas.
Ao chegar, José observou que eles não tinham atentado à promoção de 
        fim de ano, onde cada saco teria 9 laranjas. Uma vez mais foram 
        obrigados a reembalar as laranjas: desta vez não houve nenhuma 
        sobra.
Uma vez que o caminhão de entregas já tinha partido, a equipe de 
        iniciantes percebeu que cometera mais um erro: ninguém contou o total 
        de laranjas embaladas, nem o número de sacos preparados! Antes que 
        tivessem que comunicar mais esta falha ao patrão, um dos funcionários 
        sugeriu que seria possível, apenas com as informações sobre o número 
        de laranjas em cada saco e os restos, recuperar o total de laranjas.
Você pode escrever um software que auxilie os trabalhadores neste 
        dia difícil de trabalho?";"A entrada consiste em uma série de casos de teste. Cada caso de teste
        é representado por três linhas, onde cada linha representa o número
        de laranjas restantes ri (0 ≤ ri <
        Li) após o empacotamento em sacos com 
        Li (2 ≤ Li ≤ 1000) laranjas cada, 
        separados por um espaço em branco, com 
        i = 1, 2, 3.
Pode-se considerar que Li e ri são números 
        inteiros tais que
        não há divisores comuns entre L1, L2, L3, e que as sobras         se referem às laranjas que não foram devidamente embaladas (uma laranja         só é considerada devidamente embalada se estiver em um saco com 
        exatamente Li laranjas).";"Para cada caso de testes deve ser impressa a mensagem
        ""Caso #t: N laranja(s)"", onde t é o 
        número do caso de teste (cuja contagem tem início no número um) e 
        N é o total de laranjas. Caso exista
        mais de uma solução, deve ser escolhida a menor solução inteira
        positiva possível.";False;8 / 10;324;95;29.32%
1832;EBCDIC;Ad-Hoc;4;"O EBCDIC (Extended Binary Coded Decimal Interchange Code) é um
	    esquema de codificação de caracteres de 8 bits desenvolvido 
        pela IBM nos anos 60. 
	    O EBCDIC tem origem nos esquemas de codificação dos cartões perfurados,         e era utilizado nos mainframes da empresa. Apesar de utilizar 
        um intervalo maior de codificação, o esquema é menos amigável ao 
        programador
	    do que o esquema ASCII de 7 bits, uma vez que as letras do 
	    alfabeto não ficam em posições contíguas.
A tabela a seguir apresenta a codificação EBCDIC. Células em branco 
	    representam valores que não estão associados a um caractere em 
        particular, e dois ou mais caracteres maiúsculos indicam caracteres não        imprimíveis.  O caractere BLANK é o espaço em branco.
  
Escreva um programa que receba um texto em codificação EBCDIC e o 
	    traduza para a codificação ASCII.";"A entrada consiste em vários casos de teste. Cada caso de teste é 
        representado por uma única linha, que contém os valores de cada 
        caractere EBCDIC, em números octais de três dígitos, separados por
        um espaço em branco.
Pode-se considerar os códigos que aparecem nas mensagens correspondem
        apenas à caracteres alfanuméricos e espaços em branco.";"Para cada linha da entrada a saída deve ser a mensagem decodificada
        para o padrão ASCII, seguida de uma quebra de linha.";True;4 / 10;690;294;42.61%
1833;Decoração Natalina;Paradigmas;8;"Maria bem que tentou ajustar a decoração natalina de seu comércio, 
        mas o resultado final não a agradou: o jeito foi contratar uma empresa 
        especializada no ramo de decorações natalinas. O serviço que ela 
        precisa é simples até: colocar N luzes de pisca-pisca 
        coloridas em uma dada sequência, mas seus ajudantes conseguiram apenas 
        colocar M lâmpadas em uma sequência que não era a 
        desejada.
A empresa conta com profissionais do ramo, que fazem o serviço com 
        rapidez e eficiência, e tarifa seu serviço pelo tempo que o profissional
        levaria para concluí-lo se trabalhasse de maneira ótima. No caso de
        montagem de pisca-pisca, o profissional leva 30 segundos para remover 
        uma lâmpada já instalada, um minuto para trocar uma lâmpada já 
        instalada por outra de outra cor e dois minutos e meio para inserir uma         nova lâmpada na armação (esta tarefa demanda mais tempo que as demais 
        porque é necessário inserir um novo contato na fiação).
Dado o valor cobrado pela empresa para cada minuto de trabalho, em 
        reais, a sequência desejada de N lâmpadas e a sequência de 
        M lâmpadas montadas na ordem não desejada, calcule o valor 
        do serviço da empresa, em reais.";"A entrada consiste em T (T ≤ 1.000) casos de         teste, onde o valor de T é informado na primeira linha da
        entrada.

        
Cada caso de testes é representado por até cinco linhas: a primeira 
        delas contém o valor R (1 ≤ R ≤ 10), em 
        reais, que a empresa cobra por minuto de serviço.  A linha seguinte 
        contém o número M (0 ≤ M ≤ 100) de lâmpadas 
        da sequência errada, e as M cores desta sequência são dadas 
        na linha abaixo (caso M seja maior do que zero),
        separadas por espaços em branco. Estas cores são strings 
        de caracteres de tamanho S (1 ≤ S ≤ 50) e 
        há, no máximo, 20 cores distintas em cada caso de teste.
        De forma semelhante, as últimas duas linhas do caso de teste contém a
        quantidade N (0 ≤ N ≤ 100) de lâmpadas da 
        sequência desejada e a relação das N cores que deve compôr a         montagem final.";"Para cada caso de teste deve ser impressa a mensagem
        ""Caso #t: R$ C"", onde t é o número do 
        caso de teste (cuja contagem tem início no número um) e C é 
        o valor do serviço, com duas casas decimais, representando os centavos,         sem separador de milhar e com a vírgula separando os reais dos 
        centavos.
Ao final de cada mensagem deve ser impressa uma quebra de linha.";False;8 / 10;342;110;32.16%
1834;Vogons!;Geometria Computacional;6;"Os vogons são uma raça alienígena que habita a Vogosfera, segundo o 
        ""Guia do Mochileiro das Galáxias"", escrito por Douglas Adams. Nas 
        palavras do próprio autor:
""Here is what to do if you want to get a lift from a Vogon: 
        forget it. They are one of the most unpleasant races in the Galaxy. Not         actually evil, but bad-tempered, bureaucratic, officious and callous. 
        They wouldn't even lift a finger to save their own grandmothers from 
        the Ravenous Bugblatter Beast of Traal without orders - signed in 
        triplicate, sent in, sent back, queried, lost, found, subjected to 
        public inquiry, lost again, and finally buried in soft peat for three 
        months and recycled as firelighters. The best way to get a drink out of         a Vogon is to stick your finger down his throat, and the best way to 
        irritate him is to feed his grandmother to the Ravenous Bugblatter 
        Beast of Traal. On no account should you allow a Vogon to read poetry 
        at you.""
No romance, os vogons foram os responsáveis pela destruição da 
        Terra, pois ela ficava na rota de construção de uma autoestrada 
        intergalática. Este é típico modo de trabalho vogon: muitas raças já 
        foram exterminadas e planetas inteiros destruídos para que o trânsito 
        entre as galáxias ficasse menos congestionado.
Dados dois pontos de referência, pelos quais a nova autoestrada 
        intergalática passará em linha reta, e as coordenadas e habitantes dos 
        planetas do setor espacial, escreva um programa que gere um relatório 
        para os vogons.";"A primeira linha da entrada contém as coordenadas 
        X1, Y1, X2, Y2 (-10.000 ≤ Xi, Yi ≤ 
        10.000) dos pontos de referência P1 e P2 pelos 
        quais a autoestrada passará em linha reta, separadas por um espaço em 
        branco. As coordenadas são números inteiros e a unidade de distância 
        é o ano-luz.
A segunda linha da entrada contém o número N (1 ≤ 
        N ≤ 1.000) de planetas que fazem parte do setor espacial 
        onde a estrada passará. As próximas N linhas contém, cada 
        uma, as coordenadas X e Y (-10.000 ≤ 
        X, Y ≤ 10.000) do planeta e o número H (1 ≤
        H ≤ 100.000) de habitantes, em bilhões. Estes valores 
        são números inteiros separados por espaços em branco.";"O relatório a ser impresso contém várias linhas. A primeira delas 
        deverá conter a mensagem ""Relatorio Vogon #35987-2"". 
        Em seguida, deve ser impressa, em uma linha, a mensagem ""Distancia 
        entre referencias: d anos-luz"", onde d é a 
        distância entre os dois pontos de referência pelos quais a autoestrada 
        deve passar, em anos-luz, com duas casas decimais de precisão.
Na linha seguinte deve ser impressa a mensagem ""Setor Oeste:"" e, nas         duas linhas seguintes,  as mensagens ""P planeta(s)"" e 
        ""H bilhao(oes) de habitante(s)"", onde P é o 
        número de planetas que ficaram à esquerda da autoestrada, quando se 
        viaja no sentido do primeiro ponto de referência ao segundo, e 
        H é o total de habitantes destes planetas.
        De modo semelhante, devem ser produzidas três mensagens equivalentes 
        para o Setor Leste, que fica à direita da autoestrada.
Por fim, deve ser impressa a mensagem: ""Casualidades: P 
        planeta(s)"", onde P é o número de planetas que estavam na 
        rota da construção da autoestrada e, naturalmente, tiveram que ser 
        dizimados.";False;6 / 10;622;269;43.25%
1835;Promessa de Campanha;Grafos;4;"Durante sua campanha eleitoral, o prefeito do município de Barro 
        Bravo prometeu que, até o fim de seu mandato, os cidadãos conseguiriam 
        se locomover entre os principais pontos do município sem passar por 
        nenhum trecho de estrada de terra (quando assumiu o cargo, não era 
        possível ir a lugar algum sem passar pelo barro...).
A primeira providência que tomou foi finalizar as diversas vias de 
        ligação que haviam sido parcialmente construídas, mas não terminadas. 
        Assim que concluiu esta etapa, já com o orçamento reduzido, o prefeito 
        precisava determinar se a promessa já fora cumprida ou não, e caso não 
        tem sido, quantas estradas ainda deveriam ser construídas para que a 
        promessa se concretizasse.
Escreva, portanto, um programa que auxilie o prefeito a obter sua
        resposta.";"A entrada consiste em uma série de casos de teste. O número 
        T (T ≤ 100) de casos de teste é indicado na 
        primeira linha da entrada.
Cada caso de teste é composto por várias linhas.  A primeira e a 
        segunda linha do caso de teste contém, respectivamente, os valores 
        N (1 ≤ N ≤ 100) e M 
        (0 ≤ M ≤ N(N
        - 1)/2), onde N é o número de pontos principais da cidade e 
        M o número de estradas já construídas.  Os principais
        pontos da cidade são identificados sequencialmente por números 
        inteiros, a partir do número um.
As M linhas seguintes contém pares de valores X        e Y (1 ≤ X, Y ≤ N), que indicam
        que existe uma estrada que liga o ponto X ao ponto 
        Y.";"Para cada caso de teste deverá ser impressa ou a mensagem 
        ""Caso #t: ainda falta(m) E estrada(s)"" ou a 
        mensagem ""Caso #t: a promessa foi cumprida"", conforme for o 
        caso, onde t é o número do caso de teste (cuja 
        contagem tem início no número um) e E é o número mínimo de 
        estradas que devem ser construídas para que a promessa seja 
        cumprida.
Ao final de cada mensagem deve ser impressa uma quebra de linha.";False;4 / 10;1741;870;49.97%
1836;Pokémon!;Ad-Hoc;2;"Na primeira geração, as criaturas do jogo Pokémon tinham
        quatro atributos básicos: vitalidade (HP), ataque (AT), defesa (DF) e
        velocidade (SP), que aumentavam de valor a medida que o pokémon evoluía
        (ganhava níveis de experiência) através de batalhas e itens 
        especiais.
O valor de cada um destes atributos, para um determinado nível (o 
        qual varia entre 1 e 99), pode ser computado através das expressões:
	      
	    e 
	    
        onde BS é o valor base do atributo (vitalidade, ataque, 
        defesa e velocidade), EV é o valor dos esforços do pokémon 
        (que depende de quantas e quais batalhas ele participou), IV         é o valor individual do pokémon no referido atributo (equivalente ao 
        ""gene"" do pokémon) e L é o nível.
Os atributos EV e IV faz com que dois pokémons         de mesmo tipo evoluam de forma diferente. Como o atributo deve ter um 
        valor inteiro, a parte decimal deve ser descarada ao final do cálculo 
        da fração.
Dado um determinado pokémon, os valores base de seus atributos e 
        seu nível, determine seus respectivos atributos.";"A entrada consiste em uma série de casos de teste. A quantidade de 
        casos de teste T (T ≤ 1.000) 
        é indicada na primeira linha da entrada.
Cada caso de teste consiste em cinco linhas. A primeira linha contém
        o nome do pokémon P e o seu nível L (1 ≤ 
        L ≤ 99), separados por um espaço em branco. O nome do 
        pokémon contém apenas caracteres alfanuméricos.
As quatro linhas seguintes contém três inteiros cada uma: 
        BS
        (1 ≤ BS ≤ 255), IV (1 ≤ IV
        ≤ 15) e EV (1 ≤ EV ≤ 262.140), separados 
        por 
        um espaço em branco, para cada um dos quatro atributos: HP, AT, DF e 
        SP.";"Para cada caso de teste, a saída deve ser composta de cinco 
        mensagens, uma por linha: 
        Caso #t: P nível LHP: HPCAT: ATCDF: DFCSP: SPC
        onde P é o nome do pokémon, L o nível e 
        SC o atributo calculado para o nível L, conforme       as expressões apresentadas, e t é o
        número do caso de teste, cuja contagem tem início no número um.";True;2 / 10;1625;1024;63.02%
1837;Prefácio;Iniciante;6;"Começou a 4ạ Maratona de Programação da UFFS! Esperamos que você aproveite as próximas horas que passará conosco e que se divirta muito! Boa sorte!

					Este é o 3ọ ano do Clube de Programação, projeto de extensão que visa em primeiro lugar tornar os programadores da região brasileira conhecida como Fronteira Sul muito mais aptos a enfrentar os desafios computacionais tanto da academia quanto do mercado do trabalho. Nossa principal estratégia está em promover oficinas e treinos para competições de Programação, não apenas para estudantes da UFFS, mas para quem quiser participar. Apesar das várias dificuldades, estamos muito felizes com os resultados que temos conquistado. Em parceria com a UNOCHAPECÓ, a URI e a UNOESC, colaboramos para fazer de Chapecó nos dois últimos anos a 2ª maior sede do Brasil na etapa regional da Maratona de Programação, o que é mais um indicador do entusiasmo que o povo daqui tem por Programação.

					Para aquecer você para esta competição, vamos pedir que você desenvolva um programa que calcule o quociente e o resto da divisão de dois números inteiros, pode ser? Lembre que o quociente e o resto da divisão de um inteiro a por um inteiro não-nulo b são respectivamente os únicos inteiros q e r tais que 0 ≤ r < |b| e:

					a = b × q + r

					Caso você não saiba, o teorema que garante a existência e a unicidade dos inteiros q e r é conhecido como ‘Teorema da Divisão Euclidiana’ ou ‘Algoritmo da Divisão’.";A entrada é composta por dois números inteiros a e b (-1.000 ≤ a, b < 1.000).;Imprima o quociente q seguido pelo resto r da divisão de a por b.;False;6 / 10;19880;4803;24.16%
1838;A Pedra Filosofal;Paradigmas;8;"A Universidade Federal da Fronteira Sul (UFFS) foi criada no dia 15 de setembro de 2009, tendo suas atividades de ensino, pesquisa e extensão começado em 29 de março de 2010 em prédios provisórios alugados. Atualmente, a UFFS possui 6 campi, nas cidades de: Chapecó, Laranjeiras do Sul, Realeza, Cerro Largo, Erechim e Passo Fundo. Em Chapecó, a mudança dos prédios provisórios para o campus ocorreu no 2ọ semestre de 2013.

					No prédio provisório em que funcionava o curso de Ciência da Computação funcionavam também vários outros cursos, como o curso de Defesa contra as Artes das Trevas, mas havia somente 3 laboratórios, 2 auditórios e 1 pedra filosofal. Todos os pesquisadores interessados em usar a pedra filosofal precisavam fazer suas requisições com no mínimo uma semana de antecedência. Com base na lista de requisições feitas para a semana, o secretário decidia quais requisições atender visando minimizar o tempo em que a pedra filosofal ficaria ociosa. A pedra filosofal ficava disponível para uso 12 horas por dia, o que corresponde a 3.600 minutos por semana. Numerando-se, então, esses 3.600 minutos de 1 a 3.600, cada pesquisador, ao fazer sua requisição, deveria informar o minuto a partir do qual gostaria de começar a usar a pedra filosofal e o minuto a partir do qual a pedra filosofal estaria livre para ser usada por outro pesquisador.

					Escreva um programa capaz de gerenciar as requisições conforme descrito. Nós nos encarregaremos de voltar no tempo para entregar seu programa ao secretário.";A primeira linha da entrada é constituída por um único inteiro N (1 ≤ N ≤ 103), o qual representa o número de requisições que foram feitas para a semana. Cada uma das N linhas seguintes, por sua vez, descreve uma requisição através de dois inteiros i e j (1 ≤ i < j ≤ 3.600), os quais representam respectivamente o minuto a partir do qual o pesquisador gostaria de começar a usar a pedra filosofal e o minuto a partir do qual a pedra filosofal estaria livre para ser usada por outro pesquisador.;Imprima uma única linha contendo o número máximo de minutos da semana em que é possível não deixar a pedra filosofal ociosa.;False;8 / 10;605;244;40.33%
1839;A Câmara Secreta;Matemática;6;"A cidade de Chapecó, no oeste do estado brasileiro de Santa Catarina, é onde ficam situados a Reitoria da Universidade Federal da Fronteira Sul e um dos 6 campi da universidade. No próximo dia 25 de agosto, comemorar-se-ão os 98 anos da cidade, e os vereadores já estão organizando os preparativos da festa. O objetivo desta festa, além da celebração do aniversário da cidade, é arrecadar fundos para a construção da nova Câmara de Vereadores, a qual será uma Câmara Secreta, onde os vereadores poderão votar mais tranquilamente os aumentos da tarifa de ônibus sem serem tão incomodados pelos estudantes.

					A Câmara Secreta será um verdadeiro labirinto, isso para que eventuais invasores não consigam sair com tanta facilidade. Mas os arquitetos ainda não estão certos quanto à planta e querem fazer modificações no projeto. Para facilitar o trabalho, eles projetaram toda a planta sobre um grid de unidades quadradas, de modo que cada unidade quadrada fosse integralmente parede ou integralmente espaço livre, como na figura abaixo.

					
					

					Visando atacar o problema de modo mais restrito, os arquitetos ainda elegeram algumas regiões da planta para estudarem cada região isoladamente. Agora, eles querem saber qual o número de possibilidades que têm para rearranjar as unidades quadradas de parede de cada região apenas dentro da própria região. Por exemplo, para a região destacada na figura acima, há 5 possibilidades, as quais ilustramos na figura abaixo.";A primeira linha da entrada informa as dimensões N e M (1 ≤ N, M ≤ 50) da planta em unidades quadradas, as quais representam respectivamente o número de linhas e o número de colunas do grid, e as N linhas seguintes descrevem o grid, de modo que unidades quadradas livres são representadas pelo caractere ‘.’ e unidades quadradas de parede pelo caractere ‘#’. Cada uma das demais linhas da entrada é composta por quatro inteiros xA, yA, xB e yB (1 ≤ xA < xB ≤ N, 1 ≤ yA < yB ≤ M), os quais definem uma região através do ponto superior esquerdo (xA, yA) e do ponto inferior direito (xB, yB) da região. A entrada termina em fim de arquivo.;Para cada região descrita na entrada, imprima uma linha contendo unicamente o número de possibilidades que os arquitetos têm para rearranjar as unidades quadradas de parede da região apenas dentro da própria região. Como o número de possibilidades pode ser muito grande, imprima apenas o resto que o número deixa quando dividido por 109 + 7.;True;6 / 10;467;199;42.61%
1840;O Prisioneiro de Azkaban;Ad-Hoc;8;"Em 1950, quatro homens foram presos acusados de incendiarem a igreja de Chapecó. Se de fato eram os culpados ou não nunca se saberá, mas a fúria do povo é sempre mais rápida a julgar que os tribunais. Preocupado em preservar a integridade física dos prisioneiros, o delegado de polícia local quis transferi-los para Azkaban. “Eles estarão mais seguros nas mãos dos dementadores que nas mãos do povo de Chapecó”, declarou enquanto acertava com o Ministro da Magia os detalhes da transferência, programada para a manhã seguinte.

					Enquanto esperavam sem sono pela transferência que jamais aconteceria, os presos resolveram jogar Dane-se, um jogo muito popular no Brasil. Numa de suas muitas versões, as regras do jogo são:

					
						São usadas apenas 40 cartas de um baralho francês tradicional com 52 cartas, descartando-se todas as cartas com número 8, 9 ou 10. A ordem crescente básica de valor das figuras empregada no Dane-se é:
					

					4 5 6 7 Q J K A 2 3

					
						Um dos jogadores distribui a cada jogador n cartas. Depois, ainda vira uma carta sobre a mesa, a qual determina as manilhas do jogo, que são as cartas com figura imediatamente posterior à figura da carta virada na ordem básica. Por exemplo, se é virada uma carta com figura 7, são definidas como manilhas do jogo as cartas Q♦, Q♠, Q♥ e Q♣. Se é virada uma carta com figura 3, as manilhas são 4♦, 4♠, 4♥ e 4♣. As manilhas de uma partida valem mais que qualquer outra carta. Embora o naipe não interfira no valor de cartas que não são manilhas, entre manilhas a ordem crescente de valor dos naipes é:
					

					♦  ♠  ♥  ♣

					
						Uma vez definidas as manilhas da partida, cada jogador tem de dizer quantas das n rodadas ele acha que fará. Todos os jogadores devem declarar seus palpites antes mesmo de começarem as rodadas. Iniciam-se, então, as rodadas, em cada uma das quais cada jogador joga uma de suas cartas revelando-a sobre a mesa. Diz-se que um jogador faz uma rodada se a carta que ele joga naquela rodada é de maior valor que todas as outras cartas jogadas naquela rodada. Quando uma rodada não é feita por jogador algum, o que é possível dado que o desempate por naipe ocorre apenas entre as manilhas, diz-se que aquela rodada embuchou.
						Ao final do jogo, cada jogador ganha tantos pontos quanto for a diferença entre o número de rodadas que o jogador disse que faria e o número de rodadas que de fato fez. Vence o jogador com menos pontos.";A primeira linha da entrada informa o inteiro n (1 ≤ n ≤ 9), seguido da carta virada sobre a mesa no início da partida. Cada uma das 4 linhas seguintes informa o nome de um jogador, seguido de um inteiro m (0 ≤ m ≤ n), o qual representa o número de rodadas que o jogador declarou que faria no início da partida. A ordem em que são informados os jogadores é sempre a mesma ordem em que jogam em cada rodada. Seguem-se por fim n linhas, de modo que a i-ésima dessas linhas informa as 4 cartas que foram jogadas na i-ésima rodada, na ordem em que foram jogadas. Cada carta é informada no formato XY, com X ∈ {4, 5, 6, 7, Q, J, K, A, 2, 3}, Y ∈ {D, S, H, C}, e D, S, H e C correspondendo respectivamente aos naipes ♦, ♠, ♥, ♣. Considere que o nome de cada jogador é composto por no mínimo 1 e no máximo 10 caracteres do conjunto {a, b, …, z, A, B, …, Z}.;Imprima uma linha contendo unicamente o nome do vencedor da partida. Se não é possível definir um único vencedor para a partida, imprima uma linha contendo unicamente o caractere asterisco (*).;False;8 / 10;289;110;38.06%
1841;O Cálice de Fogo;Matemática;10;"Uma das provas do Torneio Tribruxo de 2015 será uma partida de futebol, e a Chapecoense tem treinado duro para enfrentar os jogadores de Hogwarts. A Associação Chapecoense de Futebol (ACF, ou simplesmente Chapecoense) é o time de futebol da cidade de Chapecó. Fundado em 1973, o time hoje joga entre os melhores times do Brasil, e não são uns adolescentes esquisitos de chapéu e vassoura que vão amedrontar nossos desbravadores guerreiros, mesmo que todos nós tenhamos ficado espantados quando o Cálice de Fogo escolheu os trouxas dos nossos jogadores para participarem do Torneio Tribruxo. Como já mencionamos, a história do time começa 1973 quando…

					Interrompemos este texto para a transmissão de um comunicado urgente do Ministro da Magia.

				
					
						
							
								Boa tarde, senhores e senhoras trouxas! Maldito o dia em que Dolores Umbridge saiu da prisão. Agora, vive a me atazanar com esses problemas de Matemática. E ela sabe que eu não sou bom nessas coisas. Enfim, vocês podem fazer um programa para me ajudar? O problema é o seguinte: ela me diz um número inteiro N e pede que eu lhe diga quantos divisores N tem e guarde esse N na minha cabeça. Até aí tudo bem. Não sou tão burro e não preciso de ajuda nesta parte. Mas daí ela fica me dizendo alguns números primos e, para cada primo p que ela diz, eu devo multiplicar p por N, atualizando o valor de N na minha cabeça, e, como se não bastasse, preciso ainda lhe dizer quantos divisores tem esse novo N que são compostos apenas por fatores primos menores que p. Por exemplo, se eu tenho guardado na minha cabeça N = 630 e ela diz p = 5, eu tenho que atualizar N para 3150 e dizer 6, pois os únicos divisores de 3150 compostos apenas por fatores primos menores que 5 são: 1, 2, 3, 6, 9 e 18. Mas o número N cresce muito rápido, e eu não quero perder o jogo para ela. Por favor, façam alguma coisa!";A entrada é composta por no mínimo 2 e no máximo 105 linhas. A primeira linha consiste unicamente do inteiro N (2 ≤ N ≤ 1012). Cada uma das linhas seguintes consiste unicamente de um número primo p (2 ≤ p ≤ 107). Os inteiros são fornecidos na entrada na ordem em que são proferidos por Dolores Umbridge. A entrada termina em fim de arquivo.;Para cada primo p proferido por Dolores Umbridge, imprima uma linha consistindo unicamente da resposta que o Ministro da Magia deveria lhe dar. Como a resposta pode ser um número muito grande, imprima apenas o resto que a resposta deixa quando dividida por 109 + 7.;False;10 / 10;365;79;21.64%
1842;A Ordem da Fênix;Strings;8;"Dentre as mais importantes rodovias que cruzam o estado de Santa Catarina estão a BR282, que o cruza de leste a oeste, e a BR153, que cruza praticamente o Brasil inteiro de norte a sul. O encontro entre essas duas rodovias é conhecido popularmente como Trevo de Irani, porque ocorre na cidade de Irani, ou Trevo da Fênix, porque sua forma, vista de cima, lembra a criatura mítica fênix, conforme mostra a Figura. A região do estado em que fica o Trevo da Fênix é chamada de Vale do Contestado, porque foi palco de uma das mais importantes guerras civis da história do Brasil: a Guerra do Contestado (1912–1916), entre rebeldes da população cabocla, sob a liderança notória do monge José Maria dentre outras, e tropas federais do Exército Brasileiro, sob a liderança notória do Cel. João Gualberto dentre outras.

					
					

					Conta-se que, certa vez, um grupo de rebeldes fugia desesperado das tropas do Exército e veio parar no Trevo da Fênix. Frustrado com a batalha que haviam perdido no dia, um deles chutou o pó da terra. O vento levantou o pó, o qual, na verdade, não era pó, mas cinzas, e por um momento os caboclos viram uma fênix, que lhes deu uma Ordem: “Morse!”. Tendo regressado ao acampamento no dia seguinte e contado a história ao monge José Maria, os caboclos passaram a estudar o Código Morse, a interceptar mensagens das tropas do Cel. João Gualberto e a tentar identificar padrões repetidos nessas mensagens.";A entrada é composta por uma cadeia S de no mínimo 1 e no máximo 105 caracteres, finalizada por uma quebra de linha, a qual representa uma mensagem interceptada. Além da quebra de linha, apenas os caracteres ‘.’ (ponto) e ‘-’ (traço) compõem a entrada.;Imprima uma linha composta unicamente da maior subcadeia de S com no mínimo 3 caracteres que se repete em S no mínimo uma vez. Se há mais de uma subcadeia que se repete com comprimento máximo, imprima a primeira delas em ordem lexicográfica, lembrando que o caractere ‘-’ aparece antes na tabela ASCII que o caractere ‘.’. Se não há subcadeias de S com comprimento no mínimo 3 que se repetem, a linha de saída deve ser composta unicamente do caractere ‘*’.;True;8 / 10;295;104;35.25%
1843;O Enigma do Príncipe;Paradigmas;9;"Neste ano, ao invés de se submeterem a rituais de iniciação humilhantes, os calouros do curso de Ciência da Computação resolver fazer algo muito mais humanitário para celebrarem seu ingresso numa universidade federal. Primeiramente, eles foram doar sangue no HEMOSC, o hemocentro do estado de Santa Catarina. Depois, ainda com metade do sangue no corpo, eles foram até uma escola pública, o Centro de Educação Infantil Municipal Pequeno Príncipe (ou simplesmente Pequeno Príncipe), realizar trabalhos voluntários. Numa das atividades desenvolvidas, as crianças da escola deveriam jogar no computador um jogo single-player muito interessante chamado Flood It!.

					Em Flood It!, é apresentado ao jogador um grid N × M em que cada célula está pintada com uma cor, como na figura à esquerda. Quando o jogador clica numa célula qualquer do grid de cor α, a célula no canto superior esquerdo do grid, chamada de origem, de cor β, assume a cor α, mas não somente ela: todas as células que estejam conectadas à origem por caminhos que usam apenas as cores α ou β também assumem a cor α. As adjacências entre as células devem ser consideradas apenas nos sentidos horizontal ou vertical para formar os caminhos. Por exemplo, quando o jogador clica na célula destacada na figura à esquerda, o grid assume a coloração da figura à direita. O objetivo do jogo é tornar o grid monocromático.

					
					    ";A primeira linha da entrada é constituída por 2 números inteiros N e M (1 ≤ N ≤ 4, 1 ≤ M ≤ 5), os quais representam respectivamente o número de linhas e o número de colunas do grid. As próximas N linhas descrevem a configuração inicial do grid, representando cada cor por um inteiro entre 0 e 9. A entrada não é constituída por nenhuma outra linha.;Imprima uma linha contendo unicamente o inteiro que representa o menor número de cliques que o jogador precisa fazer para tornar o grid monocromático. Tome cuidado! Fomos generosos ao definirmos os casos de teste e o limite de tempo deste problema, mas nem tanto.;True;9 / 10;167;61;36.53%
1844;As Relíquias da Morte;Geometria Computacional;9;"A cultura dos povos nativos do Brasil está morrendo! Enquanto que se estima que no séc. XV havia mais de mil povos indígenas no Brasil, hoje há o registro de apenas 215 povos. Recentemente, foram descobertas na região do oeste catarinense relíquias fósseis atribuídas a um povo indígena extinto. As relíquias tratam-se provavelmente de bases de muros de edificações. A figura abaixo ilustra algumas relíquias encontradas representando cada relíquia por um segmento de reta.

					
					

					Agora, o Governo quer transformar todas as terras em que estão as relíquias em área de preservação ambiental. Para facilitar o trabalho dos arqueólogos, o governo também construirá trilhas, cada uma conectando duas relíquias. A intenção é construir o mínimo possível de trilha, a fim de que o impacto ambiental seja o menor possível, mas que haja caminho entre quaisquer duas trilhas. A figura abaixo ilustra uma maneira de construir trilhas entre as relíquias da figura acima de modo a minimizar a soma total dos comprimentos das trilhas.";A primeira linha da entrada é constituída unicamente por um inteiro N (1 ≤ N ≤ 103), o qual representa o número de relíquias encontradas. Cada uma das N linhas seguintes descreve uma relíquia através de quatro inteiros, xA, yA, xB e yB (0 ≤ xA, yA, xB, yB ≤ 104), os quais representam as coordenadas dos extremos (xA, yA) e (xB, yB) do segmento de reta, de comprimento não necessariamente positivo, que representa a relíquia.;Imprima uma linha constituída unicamente por um valor que representa a soma total ótima dos comprimentos das trilhas que conectam as relíquias. Como a empresa contratada para construir as trilhas cobra por unidade inteira de trilha construída, se o valor não for inteiro arredonde-o para cima.;True;9 / 10;310;95;30.65%
1845;Efílogo;Ad-Hoc;8;"E aí, goftou da nofa tarde funtof? Fem melhor que ir ao foológico, não é mefmo? A 4ạ Maratona de Frogramação da UF eftá infelifmente acafando, maf eferamof que efte fim fignifique fara focê, quem fafe, um nofo começo: um começo de uma carreira de muito fucefo! E a fórmula do fucefo não é muito difícil: faça aquilo que focê realmente gofta de fafer, algo com que focê fe difirta e fe mantenha motifado. Afinal, o que é fucefo fenão fentir-fe realifado e felif configo mefmo?

					Fara encerrar a comfetição, efcrefa maif um frograminha, uma faideira. Efcrefa um frograma que conferte teftof fara a Língua do Dinofauro. Na Língua do Dinofauro, frimeiramente trocamof algumaf confoantef fela letra F (minúfcula ou maiúfcula quando for o cafo) e defoif eliminamof qualquer ocorrência de refetiçõef confecutifaf da letra F. Não famof difer quaif fão efaf confoantef. Focê defe adifinhá-laf (ou dedufi-laf).";A entrada é comfofta for fáriaf linhaf de tefto. Não famof refelar o número fofitifo de linhaf nem tamfouco o limite de caracteref for linha de tefto.;Imfrima o tefto da entrada confertido fara a Língua do Dinofauro.;False;8 / 10;4959;731;14.74%
1846;Numero Para Nome;Strings;7;A tarefa para este problema é simples: dada uma lista de números, escreva o nome de cada um por extenso.;A entrada consiste de uma lista de números, de tamanho desconhecido (cerca de 100000 números). Haverá um único número inteiro n (0 ≤ n < 106) em cada linha.;"O nome do número, por extenso, sem vírgulas (para facilitar). Preste atenção ao ""e"" conectivo. Veja o exemplo de saída.";False;7 / 10;818;243;29.71%
1847;Bem-vindos e Bem-vindas ao Inverno!;Iniciante;4;"Bem-vindos e bem-vindas à Escola de Inverno da Maratona de Programação 2015 de Erechim! Esperamos sinceramente que vocês aprendam muito nestes dias para que tenham muito sucesso nas competições de Programação ainda por vir, mas sobretudo esperamos que vocês curtam a Escola, pois quando nos divertimos e temos prazer em estudar e programar, o treino deixa de ser um fardo e se torna um hobby. Então, divirtam-se!

O inverno é uma estação maravilhosa, não é mesmo? Todos nós amamos vestir um poncho, participar de uma roda de chimarrão, assar pinhões no fogão a lenha… Mas nem todos gostam do inverno, especialmente em lugares onde o inverno costuma ser muito cruel. Em Westeros, por exemplo, o humor das pessoas é definido de acordo com as tendências climáticas. Com base nas temperaturas dos três últimos dias, as pessoas podem ficar tristes ou felizes, ficando mais propensas a fazer guerra ou fazer amor, respectivamente. E, sejamos sinceros, é justamente por causa das cenas de amor e de guerra que amamos Game of Thrones!


	Se a temperatura desceu do 1º para o 2º dia, mas subiu ou permaneceu constante do 2º para o 3º, as pessoas ficam felizes (primeira figura).
	Se a temperatura subiu do 1º para o 2º dia, mas desceu ou permaneceu constante do 2º para o 3º, as pessoas ficam tristes (segunda figura).
	Se a temperatura subiu do 1º para o 2º dia e do 2º para o 3º, mas subiu do 2º para o 3º menos do que subira do 1º para o 2º, as pessoas ficam tristes (terceira figura).
	Se a temperatura subiu do 1º para o 2º dia e do 2º para o 3º, mas subiu do 2º para o 3º no mínimo o tanto que subira do 1º para o 2º, as pessoas ficam felizes (quarta figura).
	Se a temperatura desceu do 1º para o 2º dia e do 2º para o 3º, mas desceu do 2º para o 3º menos do que descera do 1º para o 2º, as pessoas ficam felizes (quinta figura).
	Se a temperatura desceu do 1º para o 2º dia e do 2º para o 3º, mas desceu do 2º para o 3º no mínimo o tanto que descera do 1º para o 2º, as pessoas ficam tristes (sexta figura).
	Se a temperatura permaneceu constante do 1º para o 2º dia, as pessoas ficam felizes se subiu do 2º para o 3º dia ou tristes caso contrário (respectivamente, sétima e oitava figuras).";A entrada consiste apenas de três inteiros, A, B e C (-100 ≤ A, B, C ≤ 100), os quais representam respectivamente as temperaturas registradas no 1º, no 2º e no 3º dias.;Imprima uma linha contendo uma carinha feliz ou triste, representando como fica o humor do povo de Westeros de acordo com as tendências climáticas.;True;4 / 10;20710;7144;34.50%
1848;Corvo Contador;Iniciante;3;"Como se sabe, existe um corvo com três olhos. O que não se sabia é que o corvo com três olhos pode prever o resultado da loteria de Westeros. Enquanto todos os outros corvos coletam as apostas, o corvo de três olhos já sabe o resultado, e quando Bran sonha com o corvo, o corvo conta o resultado. O problema é que Bran apesar de lembrar do sonho, não consegue interpretá-lo sozinho em tempo hábil. A sua tarefa é fazer um programa para interpretar o sonho de Bran e calcular o resultado da loteria.

Durante o sonho, o corvo pisca diversas vezes e grita apenas 3 vezes. A cada grito um número do resultado da loteria é calculado.

Cada piscada do corvo comunica um número em binário. Um olho aberto significa 1 e um olho fechado significa 0. O olho da esquerda é o mais significativo e o da direita é o menos significativo. A cada piscada, este número deve ser somado, e quando o corvo grita, essa soma é um resultado.";"A entrada descreve, em cada linha, em sequência, ou um grito ou uma piscada do corvo.

Um grito é representado pela string caw caw

Uma piscada é representada por três caracteres * ou -, representando, respectivamente, um olho aberto ou um olho fechado, da esquerda para a direita.  Lembre-se que o corvo tem 3 olhos. Os números sorteados na loteria não excedem 1000.";A saída são três linhas, cada linha com um número da loteria.;False;3 / 10;10378;5578;53.75%
1849;Dracarys!;Ad-Hoc;5;"Daenerys Targaryen, a filha da tempestade, tem 3 dragões: Drogon, Viserion e Rhaegal. Ela os utiliza com frequência em batalhas e os faz cuspir fogo ao dizer ""Dracarys!"".

					
                    

Ocorre que quando os dragões lançam fogo em superfícies planas, o fogo queima sempre uma área retangular. As dimensões dessas áreas dependem de diversos fatores, mas Daenerys consegue indicar com precisão para Drogon e Viserion qual a largura e o comprimento do retângulo que vai ser incendiado.

Daenerys requer sua ajuda para que indique qual o maior tamanho de superfície plana quadrada é possível queimar dadas as dimensões dos retângulos que Drogon e Viserion conseguem fazer.";A entrada é composta por 4 inteiros positivos LD, CD, LV, CV separados por espaço, que representam a largura e o comprimento do retângulo a ser incendiado por Drogon e a largura e o comprimento do retângulo a ser incendiado por Viserion, respectivamente. Nenhum dos inteiros excede o valor de 10000.;A saída deve ser um número A, que indica a área do maior quadrado possível de se formar com os dois retângulos dados.;True;5 / 10;1978;584;29.52%
1850;O Labirinto de Ninguém;Grafos;7;"Nunca tome uma das faces da Casa do Preto e Branco se você não é ‘Ninguém’, ainda que seja para matar Meryn Trant, ou você ficará cego, além de receber várias outras punições. Talvez você veja você mesmo se tornar ‘Ninguém’. Talvez seja isto que esteja acontecendo com Arya. Ou não. Fato é que agora ela está cega e foi colocada num labirinto cheio de portas trancadas. Você pode ajudá-la?

As fechaduras das portas presentes no labirinto onde está Arya são de 7 tipos: A, B, C, D, E, F e G. Há também algumas cópias de chaves espalhadas pelo labirinto, as quais podem ser dos tipos a, b, c, d, e, f ou g. Uma chave do tipo a abre uma porta do tipo A, uma chave do tipo b abre uma porta do tipo B etc. É claro que, uma vez que Arya tenha aberto uma porta com uma chave, a porta permanece aberta, e Arya pode levar a chave consigo para abrir tantas portas quantas quiser daquele tipo. No labirinto há exatamente uma saída: um buraco no chão através do qual Arya pode entrar no túnel que a conduzirá em segurança à saída da Casa do Preto e Branco.";A entrada representa o labirinto e é composta por no máximo 100 linhas com no máximo 100 caracteres diferentes de fim de linha cada, e o número de caracteres por linha é sempre o mesmo. A posição onde Arya está é identificada pelo caractere @, a saída pelo caractere *, as paredes do labirinto são identificadas pelo caractere #, as portas por caracteres no conjunto {A, …, G}, as chaves por caracteres no conjunto {a, …, g}, e as demais posições livres pelo caractere . (ponto). O total de caracteres no labirinto diferentes de # e de . é no máximo 100, e há exatamente um caractere * e um caractere @. Arya sempre gasta 1 segundo para se mover de uma posição a outra, e só se move na horizontal ou na vertical, pois tem medo de bater o dedinho na quina de uma parede, já que as paredes são quadradas. A entrada termina em fim de arquivo.;Imprima uma linha contendo um único inteiro, o qual deve representar o tempo mínimo, em segundos, de que Arya precisa para deixar o labirinto. Se não é possível Arya deixar o labirinto, imprima uma linha contendo dois caracteres - (hífen), representando os olhos cerrados com que Arya precisará conviver até deixar de ser Arya.;False;7 / 10;321;160;49.84%
1851;Como Treinar Seu Dragão;Estruturas e Bibliotecas;8;"Após seu dragão Smaug fracassar na missão de tomar conta de Erebor, Sauron ficou muito aborrecido, e seu Olho começou a procurar por toda parte um treinador de dragões profissional, a fim de que seus demais dragões não falhassem em suas missões. Foi assim que Sauron conheceu Daenerys Targaryen. Impressionado com a reputação dela, Sauron a contratou imediatamente.

Sauron envia dragões a Daenerys quase diariamente. Alguns dragões levam mais tempo para serem treinados, outros menos, e ela sempre treina um dragão de cada vez, nunca mais de um no mesmo dia, até que ele esteja pronto para ser retornado a Sauron. Nos dias em que se dedica ao treinamento de um dragão, Daenerys deixa os demais dragões enviados por Sauron hibernando num alojamento até que chegue a vez de cada um deles. Mas o caráter de Sauron, embora de notável perseverança, não é famoso por sua paciência. Para cada dia que um dragão seu passa dormindo no alojamento, Sauron, cujo Olho enxerga tranquilamente tudo o que se passa nos domínios de Daenerys, cobra dela uma multa, que pode variar de dragão para dragão, dependendo dos planos de Sauron para seus dragões. Sauron envia exatamente um dragão por dia, e o dragão sempre chega bem no início do dia, de modo que Daenerys já pode começar a treiná-lo imediatamente. Ainda, se há dragões dormindo no alojamento e nenhum sendo treinado, Sauron envia um Nazgûl para matar Daenerys.

Daenerys Targaryen deseja minimizar a multa total a pagar a Sauron e está pedindo sua ajuda. Você já lhe disse que não pode prever o futuro e que o melhor que você pode fazer é: toda vez em que ela não estiver trabalhando com um dragão e quiser escolher um no alojamento para começar a treinar, você pode dizer a ela qual dragão escolher de modo que a escolha seria ótima se nenhum dragão mais viesse nos dias seguintes.";A i-ésima linha da entrada diz respeito ao i-ésimo dragão enviado por Sauron a Daenerys e consiste de dois	inteiros: Ti e Fi (1 ≤ Ti, Fi ≤	103), representando respectivamente o número de dias necessários para treinar o i-ésimo dragão e a multa cobrada por dia que o dragão passa dormindo. Para quaisquer i e j distintos, Ti / Fi ≠ Tj / Fj. A entrada possui no máximo 105 linhas e termina em fim de arquivo.;Imprima uma linha contendo unicamente o valor mínimo total da multa que Daenerys pagará a Sauron	se seguir seus conselhos.;False;8 / 10;981;251;25.59%
1852;Lobos Stark;Paradigmas;6;"Jon: ""Lorde Stark? Há cinco filhotes, um para cada criança Stark. O lobo é o brasão de sua Casa. Elas devem tê-los.""

Durante uma viagem, Ned Stark encontrou N filhotes de lobo e decidiu dar um filhote para cada um de seus N filhos. Ned quer fazer tanto as crianças quanto os lobos felizes, e, por isso, deseja encontrar a combinação ideal de lobos e crianças.
Depois de brincar um pouco com os filhotes, cada filho deu a Ned uma lista de lobos em ordem de preferência. Desta forma, cada criança quer ficar com o filhote que está no topo de sua lista; se isto não for possível, a criança quer ficar com o filhote que aparece em segundo na lista, e assim por diante.
Depois de observar como cada lobo reage a cada filho, Ned também deduziu, para cada lobo, a lista de crianças que ele quer que sejam seus donos, também em ordem de preferência.
Ned precisa encontrar uma combinação tal que, para toda criança Ci e todo lobo Dj, não ocorre que Ci prefere Dj ao filhote combinado a ela e Dj prefere Ci à criança combinada a ele. Se existe mais de uma combinação possível, Ned deseja aquela em que cada filho tem o melhor lobo (mais preferido) que pode ter.";"A primeira linha contém o inteiro N (1 ≤ N ≤ 200). As próximas N linhas descrevem os filhos de Ned. Cada linha contém N+1 strings. A primeira é o nome da criança. As próximas N strings são os nomes dos lobos em sua ordem de preferência. O primeiro lobo dado na linha é o preferido da criança.  As próximas N linhas descrevem os filhotes de lobo. Cada linha contém o nome do filhote e sua lista de crianças, também em ordem de preferência.

Cada string contém no máximo 10 letras maiúsculas e/ou minúsculas.";Imprima N linhas. Cada linha deve conter duas strings Ci e Dj, indicando que a criança Ci deve ficar com o filhote Dj. Imprima os filhos na mesma ordem em que são descritos na entrada.;False;6 / 10;104;64;61.54%
1853;O Jogo da Confiança de Daenerys;Strings;10;"Daenerys: ""(...) então eu deveria deixá-lo me servir porque você assassinou membros de sua própria família?""
Tyrion: ""Lhe servir? Majestade, nós acabamos de nos conhecer. É muito cedo para saber se você merece meus serviços.""

Para acertar as coisas com o anão, Daenerys decidiu desafiar Tyrion para um jogo de 2 jogadores que ela mesma inventou, quando estava no mar Dothraki. Se Tyrion vencê-la no jogo, ela irá fazer dele seu conselheiro, como ele queria. Caso contrário, ela irá mandar executá-lo.

Este é um jogo com palavras. Neste jogo, considera-se apenas o alfabeto Dothraki, que consiste nas primeiras L letras minúsculas do nosso alfabeto.

O jogo se inicia com uma lista de S strings s1, ..., sS. A partida é jogada por turnos, e Tyrion é o primeiro a jogar. Em cada turno, um jogador escolhe uma string da lista e adiciona uma letra (do alfabeto Dothraki) ao final da string, em seu lado direito.  Entretanto, um jogador não pode adicionar uma letra a uma string si (1 ≤ i ≤ S) se Fi letras já foram adicionadas à string durante o jogo. Um jogador também não pode adicionar uma letra a uma string se esta string, incluindo todas as letras adicionadas a ela durante o jogo (mas não a letra que o jogador quer adicionar), contém um adjetivo Dothraki como substring. Todos os adjetivos Dothraki são dados na entrada.

Se um jogador não puder adicionar nenhuma letra a nenhuma string, ele perde o jogo. Tanto Daenerys quanto Tyrion jogam de forma ótima. Sua tarefa é decidir se Tyrion pode vencer Daenerys neste jogo.

No primeiro exemplo, Tyrion pode vencer se adicionar a letra c à string s1: ela conterá um adjetivo e logo não poderá mais ser escolhida. Daenerys é forçada a adicionar uma letra à string s2. Tyrion então adicionará outra letra a s2.  Neste ponto, Daenerys não terá mais opções de jogadas, pois F2 = 2 letras já foram adicionadas à string s2.";"A primeira linha da entrada contém os inteiros D e L (D > 0, 2 ≤ L ≤ 10), onde D é o número de adjetivos Dothraki. Cada uma das próximas D linhas contém um adjetivo. A soma dos tamanhos de todos os adjetivos não será maior que 105. A próxima linha contém o número S (1 ≤ S ≤ 300). Cada uma das próximas S linhas contém uma string si e o inteiro Fi (1 ≤ Fi ≤ 50). A soma dos tamanhos de todas as strings si não será maior que 3×103.

É garantido que nenhuma dessas strings contém um adjetivo Dothraki.  Além disso, todos os adjetivos e todas as strings si contém apenas letras do alfabeto Dothraki.";Imprima una única linha contendo Tyrion se Tyrion pode derrotar Daenerys, ou Daenerys caso contrário.;False;10 / 10;222;67;30.18%
1854;Inverno em Winterfell;Estruturas e Bibliotecas;9;"Certa tarde, na Vila de Inverno, do lado de fora dos portões do castelo de Winterfell, as crianças começaram a construir bonecos de neve, para a alegria e o divertimento da plebe que negociava no mercado. Os bonecos estavam ficando adoráveis, não fosse por um detalhe: nenhum deles possuía nariz, já que as únicas cenouras agora remanescentes em Westeros estavam na despensa real da Casa Stark. O rei, comovido, resolveu ceder algumas de suas cenouras para que fossem distribuídas em regiões retangulares da Vila. Mas as crianças de Westeros são gananciosas e não se importam em colocar vários narizes em seus bonecos, ainda que outras crianças fiquem sem narizes para pôr em seus bonecos. Por exemplo, se o rei designa 2 cenouras idênticas para uma região em que há 3 bonecos, a, b e c, há 6 possibilidades para a distribuição dessas cenouras entre os bonecos depois que as crianças terminem de brigar entre si:


	a fica com 2 narizes e b e c com nenhum;
	a e b ficam com 1 nariz cada e c com nenhum;
	a e c ficam com 1 nariz cada e b com nenhum;
	b fica com 2 narizes e a e c com nenhum;
	b e c ficam com 1 nariz cada e a com nenhum;
	c fica com 2 narizes e a e b com nenhum.


Percebendo que as brigas entre as crianças estava levando um número considerável delas a óbito, e preocupando-se com o futuro populacional do reino, o rei decidiu escolher apenas uma região retangular por dia, de modo que a distribuição das cenouras fosse feita sempre no fim do dia, quando todos os bonecos de neve do dia já houvessem sido construídos. Não é permitido às crianças usar cenouras para bonecos fora da região premiada do dia, nem tampouco levar cenouras para casa a fim de as usar no dia seguinte. O rei também ordenou que, tão logo a noite caísse e as crianças fossem embora, um oficial recolhesse todas as cenouras, deixando, contudo, os bonecos de neve intactos. A propósito, os bonecos construídos pelas crianças de Westeros são muito resistentes, podendo permanecer de pé por todo o inverno, a menos que sejam destruídos propositalmente por outra criança.";"A entrada descreve, em sequência, todos os eventos que aconteceram durante o inverno à sombra das muralhas de Winterfell e é composta por no máximo 105 linhas. A primeira linha da entrada é constituída por dois inteiros: N e M (1 ≤ N, M ≤ 103), os quais representam as dimensões da Vila. Cada uma das linhas seguintes descreve um evento, caracterizado pelo número de inteiros presentes na linha:


	se a linha consiste de três inteiros, X, Y e B (1 ≤ X ≤ N, 1 ≤ Y ≤ M, 1 ≤ B ≤ 100), significa que uma criança construiu B bonecos de neve na posição da Vila de coordenadas (X, Y);
	se a linha consiste de dois inteiros, X e Y (1 ≤ X ≤ N, 1 ≤ Y ≤ M), significa que uma criança destruiu todos os bonecos presentes na posição de coordenadas (X, Y);
	se a linha consiste de cinco inteiros, X1, Y1, X2, Y2 e C (1 ≤ X1 ≤ X2 ≤ N, 1 ≤ Y1 ≤ Y2 ≤ M, 1 ≤ C ≤ 103), significa que o rei concedeu C cenouras idênticas para serem distribuídas entre os bonecos de neve construídos na região retangular definida pelas posições de coordenadas (X1, Y1) e (X2, Y2), marcando o fim de um dia.


A última linha da entrada é sempre uma linha de cinco inteiros.";Para cada dia do inverno, encerrado na entrada por uma linha de cinco inteiros, imprima uma linha contendo o número do dia e o número de possibilidades para a distribuição das cenouras entre os bonecos de neve da área delimitada. Considere que a contagem dos dias se inicia em 1. Como o número de possibilidades pode ser muito grande, imprima apenas o resto que esse valor deixa quando dividido por 109 + 7. O exemplo de entrada e saída esclarecem mais detalhes sobre o formato da saída.;False;9 / 10;483;102;21.12%
1855;Mapa do Meistre;Grafos;4;"Sam encontrou um conjunto de mapas do velho Meistre Aemon, que a princípio, deviam mostrar, cada um, a localização de um baú com obsidiana. Entretanto, ao analizar alguns mapas possuíam erros óbvios, e outros só mandando uma equipe para explorar para saber.

					É certo que alguns mapas apontam para uma localização absurda fora do mapa e alguns terminam em círculos, tornando estes mapas completamente inúteis.

					Como são muitos mapas, os irmãos da patrulha da noite são poucos e o inverno está chegando, o seu trabalho é fazer um programa para verificar se um mapa leva ou não a um ponto com um baú de obsidiana.

					Os mapas tem as seguintes características:

					
						
						O ponto de partida de todos os mapas é o canto superior esquerdo.
						
						
						São retangulares e em cada ponto apresenta um destes símbolos:

						
							
							Um espaco de terreno atravessável.
							
							
							Uma flecha, representando uma possível troca de direção;
							
							
							Um baú.
							
						
						
					

					Como os lugares que estes mapas descrevem são cheios de perigos, é vital que se siga o caminho descrito no mapa.";"Na primeira linha, está um inteiro positivo x
                    < 100  que simboliza a largura do mapa.

					Na segunda linha, está um inteiro positivo y < 100 que simboliza a altura do mapa.

					As linhas seguintes contêm diversos caracteres respeitando as dimensões do mapa.
					Os caracteres válidos são:

					
						
						Uma flecha para a direita: >
						
						
						Uma flecha para a esquerda: <
						
						
						Uma flecha para baixo: v
						
						
						Uma flecha para cima: ^
						
						
						Um espaco de terreno atravessável: .
						
						Um baú: *";"A saída deve consistir de uma única linha com um único caracter ! ou *.

					! significa que o mapa é inválido. * significa que o mapa é válido.";False;4 / 10;5324;1794;33.70%
1856;A Lista da Morte de Arya;Estruturas e Bibliotecas;10;"Arya: ""Cersei. Walder Frey. Montanha. Meryn Trant.""

					Para se manter motivada, Arya sempre lembra a lista de inimigos que ela mais odeia. O principal objetivo de sua jornada é matar todos na sua lista!

					Entretanto, às vezes algum inimigo dela pode ser morto por outra pessoa.  Quando ela descobre que tal inimigo morreu, ela o remove da sua lista.  Além disso, Arya também pode fazer novos inimigos durante sua jornada. Quando ela faz um novo inimigo, tal inimigo é incluído na sua lista.

					Arya quer matar seus inimigos um por um, na mesma ordem em que aparecem na sua lista. A qualquer momento, ela pode se perguntar quanto tempo irá levar para matar todos que estão entre dados dois inimigos. Para tal, dados dois inimigos a e b, ela deve determinar quantos inimigos estão na lista entre a e b, excluindo ambos. Ajude Arya respondendo tais perguntas.";"A primeira linha contém um inteiro N (1 ≤ N ≤ 5×104), o número de inimigos inicialmente em sua lista.

					Considere que todas as pessoas são numeradas de 1 a 109, inclusive. A próxima linha contém N inteiros, descrevendo a lista inicial de Arya. A próxima linha contém um inteiro Q (1 ≤ Q ≤ 5×104), o número de operações. As próximas Q linhas descrevem as operações. Cada operação pode estar em um dos seguintes formatos:

					
						I p e (1 ≤ e, p ≤ 109): Insira a pessoa p depois do inimigo e na lista. É garantido que e está na lista, e p não está na lista;
						R e (1 ≤ e ≤ 109): Remova o inimigo e da lista. É garantido que e está na lista;
						Q a b (1 ≤ a, b ≤ 109): Determine quantos inimigos estão na lista entre a e b, excluindo ambos. É garantido que a e b estão na lista.";Imprima uma linha para cada operação do tipo Q com sua resposta.;False;10 / 10;1535;113;7.36%
1857;Prelúdio de um Casamento Vermelho;Geometria Computacional;10;"Poucos sabem que, na série de eventos que antecederam o sangrento Casamento Vermelho, Lorde Frey prometeu a Robb Stark uma parte do território das Terras Fluviais, além de uma mansão. As exatas palavras que Lorde Frey disse a Robb Stark, numa reunião nas Gêmeas, foram:

					— Aqui está o mapa das Terras Fluviais e de todas as construções que existem nelas. Coloque um prego em cima da localidade onde você deseja que seja construída sua mansão. Escolha a localidade que quiser, desde que ela não fique em cima nem ao norte de uma construção já existente. Ainda, se a localidade que você escolher ficar na mesma latitude que outra construção, a outra construção deverá estar mais a leste que a sua localidade.

					E assim procedeu Robb Stark. Lorde Frey, então, continuou:

					— Pegue agora estes outros pregos e ponha-os em cima de construções já existentes, para que lhe pertençam também. Escolha as construções que quiser. Saiba que, após terminar, eu esticarei este elástico em volta de todo o mapa e o soltarei, de modo que o elástico seja parado pelos pregos. Todo o território no interior ou sobre a fronteira da região definida pelo elástico será seu. No entanto, não abuse de minha benevolência. Se a área do seu território exceder B metros quadrados, eu lhe cortarei fora a cabeça aqui mesmo.

					Robb fez sua escolha de modo a possuir a maior área de terra possível mantendo sua cabeça, pelo menos por um tempo. Você é capaz de adivinhar qual área ele obteve?";A primeira linha da entrada consiste de dois inteiros, N e B (0 ≤ N < 100, 1 ≤ B ≤ 103), os quais representam respectivamente o número de construções já existentes no mapa e o limite para a área do território de Robb Stark estabelecido por Lorde Frey. A segunda linha consiste de dois inteiros, Xm e Ym (0 ≤ Xm, Ym ≤ 104), os quais representam respectivamente a latitude e a longitude da localidade que Robb escolheu para a construção da mansão. Cada uma das N linhas seguintes é composta por dois inteiros X e Y (0 ≤ X, Y ≤ 104), os quais representam respectivamente a latitude e a longitude de cada construção.;Imprima uma linha contendo unicamente o valor exato da área da terra que Robb Stark recebeu, sem zeros desnecessários à esquerda ou à direita.;True;10 / 10;252;32;12.70%
1858;A Resposta de Theon;Iniciante;1;"Ramsay: ""(...) você vence se conseguir adivinhar quem eu sou e por que estou torturando você.""

					Theon deve pensar rápido e adivinhar quem é seu algoz! Entretanto, Ramsay já decidiu o que ele irá fazer depois que Theon der sua resposta.

					Theon pode dizer que seu algoz é alguma dentre N pessoas. Considere que as pessoas são numeradas de 1 a N. Se Theon responder que seu algoz é a pessoa i, Ramsay irá atingi-lo Ti vezes.

					Sua tarefa é ajudar Theon a determinar qual deve ser sua resposta de forma a minimizar o número de vezes que ele será atingido.";A primeira linha contém um inteiro N (1 ≤ N ≤ 100).  A segunda linha contém N inteiros T1, T2, ..., TN (0 ≤ Ti ≤ 20).;Imprima uma linha contendo o número da pessoa que Theon deve dizer ser seu algoz. Se existe mais de uma resposta possível, imprima a menor.;False;1 / 10;10742;6470;60.23%
1859;Arqueologia Congelante;Strings;10;"Após desfazerem o plano maquiavélico do malévolo Hans e salvarem o reino de Arendelle, Elsa, Anna e Kristoff iniciaram um projeto arqueológico para saber mais sobre o passado pré-histórico do continente sobre o qual hoje se situa Arendelle. Durante as escavações, eles descobriram que na verdade o continente foi formado geologicamente através da colisão entre quatro continentes outrora separados. Eles conseguiram inclusive descobrir os nomes com os quais os povos da época chavam esses continentes: Westeros, Essos, Sothoryos e Ulthos. No entanto, ainda estão no processo de identificar as famílias que habitavam o primeiro continente, Westeros, já que a promiscuidade entre os povos antigos era muito grande e os registros parecem muito confusos. Na presente etapa do projeto, eles estão considerando apenas que os povos eram divididos em duas grandes famílias: Stark e Lannister. Futuramente eles pretendem dividir essas famílias melhor. Por ora, o objetivo é, dados os códigos genéticos dos indivíduos fossilizados, classificar os indivíduos nessas duas famílias visando minimizar as relações de parentesco entre indivíduos classificados em famílias diferentes.

					Mais formalmente, dizemos que um indivíduo X é parente de um indivíduo Y se os códigos genéticos de ambos os indivíduos partilham de uma parte idêntica e contígua com comprimento no mínimo P% do comprimento de um dos códigos — como os indivíduos são todos humanos, os códigos genéticos possuem sempre o mesmo comprimento. Por exemplo, tomemos os indivíduos de códigos GATAGACA e CATACAGA. Se o critério de parentesco P é igual a 62, os indivíduos devem ser considerados parentes, já que ACAGA é uma parte contígua comum a ambos de comprimento 5 ≥ 8 × 62% (se você não consegue entender por que ACAGA é uma parte contígua de GATAGACA, entenda que Elsa e sua equipe consideram códigos genéticos como cadeias circulares). Agora, se P = 63, os indivíduos não devem ser considerados parentes. Destarte, o objetivo dos pesquisadores de Arendelle é classificar os indivíduos fossilizados nas famílias Stark e Lannister visando minimizar o número de pares maus. Dizemos que um par (s, l) é mau se satisfaz as três condições a seguir:

					
						s foi classificado como Stark;
						l foi classificado como Lannister;
						s deve ser considerado parente de l segundo o critério de parentesco estabelecido.
					

					Obrigatoriamente, ao menos um indivíduo deve ser classificado como Stark e ao menos um como Lannister.";A primeira linha da entrada consiste de dois inteiros, N e P (2 ≤ N ≤ 50, 0 ≤ P ≤ 100), os quais representam respectivamente o número de indivíduos fossilizados e o critério de parentesco estabelecido. Cada uma das N linhas seguintes consiste de no máximo 104 caracteres no conjunto {A, T, C, G}, representando o código genético de um indivíduo. À possível exceção da primeira, as linhas da entrada possuem todas o mesmo número de caracteres.;Imprima uma linha contendo unicamente o menor número possível de pares maus numa classificação dos indivíduos nas famílias.;False;10 / 10;143;21;14.69%
1860;A Caminhada da Vergonha de Cersei;Paradigmas;6;"Septa Unella: ""Vergonha! Vergonha!""

					Para pagar por seus pecados, Cersei deve caminhas pelas ruas de King's Landing, nua.

					Considere King's Landing como um plano Cartesiano. Cersei deve caminhar a partir do ponto (0, 0) até o ponto (X, 0), em linha reta. Note que, para completar seu trajeto, Cersei não deve deixar o eixo x.

					Entretanto, ela planeja não completar todo o trajeto! Em algum ponto (xl, 0) (0 ≤ xl ≤ X), ela sairá de seu trajeto e correrá para um dos N esconderijos na cidade. Ela quer ficar o mais longe possível do trajeto original. Por isso, ela correrá para o esconderijo que ficar mais longe do ponto (xl, 0).

					Entretanto, Cersei deve chegar ao esconderijo o mais cedo possível. Sua tarefa é ajudar Cersei a determinar o valor de xl tal que, se ela sair do trajeto no ponto (xl, 0), a distância para o esconderijo mais longe é minimizada.";A primeira linha contém dois inteiros N e X (1 ≤ N ≤ 5×104, 10 ≤ X ≤ 104). As próximas N linhas indicam as posições dos esconderijos. Cada linha contém dois inteiros xi e yi (0 ≤ xi ≤ X, -104 ≤ yi ≤ 104, yi ≠ 0) indicando a existência de um esconderijo no ponto (xi, yi).;Imprima uma linha com dois valores: o valor de xl e a distância para o esconderijo mais longe. Arredonde e imprima ambos os valores com exatamente duas casas decimais.;False;6 / 10;334;169;50.60%
1861;O Hall dos Assassinos;Estruturas e Bibliotecas;5;Quem matou Meryn Trant? Quem matou Syrio Forel, se é que ele de fato morreu? Quem matou Stannis Baratheon? Quem matou Myrcella Baratheon? Quem matou Aerys II Targaryen? Quem vai matar (alerta de spoiler!) Jaime Lannister? Para algumas destas perguntas já sabíamos a resposta. Para outras, tínhamos apenas especulações. No entanto, recebemos de um correspondente anônimo uma lista descrevendo vários assassinatos, que já aconteceram ou que estão para acontecer, revelando tanto o nome dos assassinos quanto dos assassinados. Mas os assassinatos não estão em ordem lexicográfica, nem mesmo em ordem cronológica, e fica difícil contar quantas pessoas cada assassino matou. Você pode nos ajudar?;Cada linha da entrada descreve um assassinato informando o nome do assassino seguido pelo nome do assassinado. Cada nome é composto por no mínimo um e no máximo 10 caracteres, sendo o primeiro sempre uma letra maiúscula e os demais sempre letras minúsculas. A entrada consiste de no mínimo uma e no máximo 105 linhas e é encerrada em fim de arquivo.;A primeira linha da saída deve consistir da frase “HALL OF MURDERERS”, sem as aspas. Cada uma das linhas seguintes deve conter um nome de um assassino seguido do número de pessoas que ele matou. A lista de assassinos deve obedecer a ordem lexicográfica. Se um assassino também acabou sendo assassinado, ele não deve figurar na lista.;False;5 / 10;3678;1182;32.14%
1862;Casas de Westeros;Grafos;6;"Daenerys: ""Lannister, Targaryen, Baratheon, Stark, Tyrell. Estão todos em uma mesma roda"".

					As casas nobres de Westeros estão lutando constantemente pelo Trono de Ferro. Para vencer a Guerra dos Tronos, deve-se sempre saber quantas casas existem no continente. Também é importante saber o tamanho de cada casa, uma vez que casas com muitas pessoas são, normalmente, mais fortes que casas com poucos membros.

					Existem N pessoas em Westeros. Para cada par de pessoas, um espião lhe informou se elas pertencem à mesma casa ou não. Se a informação obtida pelo espião for consistente, sua tarefa é determinar quantas casas existem em Westeros, e quantas pessoas pertencem a cada casa.";"A primeira linha contém um inteiro N (1 ≤ N ≤ 1000), o número de pessoas. Considere que as pessoas são numeradas de 1 a N.

					As próximas N linhas contém N caracteres cada. O j-ésimo caractere na i-ésima linha (1 ≤ i, j ≤ N) é S se as pessoas i e j pertencem à mesma casa, ou D se as pessoas i e j pertencem a casas diferentes. É garantido que, para todo 1 ≤ i, j ≤ N, o j-ésimo caractere na i-ésima linha é igual ao i-ésimo caractere na j-ésima linha. Além disso, para todo 1 ≤ i ≤ N, o i-ésimo caractere na i-ésima linha é sempre S.";Se a informação dada pelo espião é inconsistente e não é possível determinar o número de casas, imprima uma linha contendo o inteiro -1. Caso contrário, imprima duas linhas. A primeira linha contém um inteiro K, o número de casas. A segunda linha contém K inteiros, o número de pessoas em cada casa. Os inteiros devem ser impressos em ordem não crescente. Imprima um espaço entre dois inteiros consecutivos.;False;6 / 10;1611;455;28.24%
1863;O Contra-ataque de Ramsay;Estruturas e Bibliotecas;10;"Ramsay: ""Não preciso de um exército. Preciso de 20 homens bons.""

					Os Boltons conquistaram o castelo de Winterfell e agora precisam protegê-lo da invasão do ""Rei"" Stannis. Os N soldados de Stannis estão posicionados entre Castle Black, que fica a nordeste de Winterfell, e Winterfell. Para cada soldado i (1 ≤ i ≤ N), os Boltons sabem sua posição (x[i], y[i]) no mapa.

					Ramsay Bolton decidiu contra-atacar antes que a invasão ocorra, enviando seus homens para matar alguns dos soldados de Stannis. Ramsay quer que eles morram um de cada vez, em uma ordem tal que seus homens precisem viajar apenas para o norte e para o leste, e tal que todo soldado deve ser mais forte que os que morreram antes dele (isto é loucura, mas Ramsay é mesmo louco).

					Em outras palavras, Ramsay quer encontrar uma sequência de soldados (s1, s2, ..., sK) tal que, para todo 1 < i ≤ K:

					
						x[si] > x[si-1];
						y[si] > y[si-1]; e
						si é mais forte que si-1
					

					Um espião forneceu a Ramsay uma lista de M pares ordenados de soldados na forma (i, j), indicando que o soldado i é mais forte que o soldado j. Note que esta relação é transitiva, isto é, se i é mais forte que j e j é mais forte que k, então i é mais forte que k, mesmo que o par (i, k) não apareça na lista.   Além disso, para qualquer par de soldados i e j, se não é possível concluir que um soldado é mais forte que o outro através da lista, então i não é considerado mais forte que j, e nem j é considerado mais forte que i.  Por fim, a lista é dada de tal forma que, para todo soldado i, existe no máximo um soldado j tal que (i, j) está na lista.

					Sua tarefa é determinar o número máximo de soldados que podem ser mortos pelos homens de Ramsay.";A primeira linha contém dois inteiros N e M (0 ≤ M < N ≤ 5×104). As próximas N linhas fornecem as posições dos soldados. A i-ésima linha contém dois inteiros x[i] e y[i] (-400 ≤ x[i], y[i] ≤ 400). Não há dois soldados na mesma posição.  As próximas M linhas contém dois inteiros i e j cada (1 ≤ i, j ≤ N, i ≠ j), descrevendo a lista fornecida pelo espião.;Imprima uma linha contendo o número máximo de soldados que podem ser mortos.;False;10 / 10;388;51;13.14%
1864;Nossos Dias Nunca Voltarão;Iniciante;1;"E aí? Curtiu a Escola de Inverno deste ano? Para que esta Escola acontecesse, foram muitos que trabalharam, seja na elaboração dos problemas, na configuração do Portal, na logística do evento ou na captação dos recursos. Nosso agradecimento especial deste ano vai para o Prof. Ricardo Oliveira, que não somente aceitou vir ministrar as oficinas como também participou ativamente na organização da Escola. Temos certeza que a experiência e a carreira dele no ICPC como competidor e como coach motivaram e inspiraram todos nós.

					Esperamos que você tenha gostado desses últimos dias em Essos e em Westeros, que tenha aprendido bastante e que tenha se divertido. Mas não é só em Essos e em Westeros que você deve se divertir. Aqui, em Além da Muralha, programar também é divertido. Continue estudando, continue treinando, e cada vez mais. O importante é o caminho que você vai trilhar daqui para frente. Nosso conselho é que você procure sempre aproveitar ao máximo cada momento, cada oficina, cada escola, cada treino, cada tempo de prática ou estudo em casa. Nossos dias nunca voltarão.";A entrada consiste de um único inteiro N (1 ≤ N ≤ 34) numa linha.;Imprima os N primeiros caracteres da citação de Søren Kierkegaard definida pelas letras que foram sublinhadas no enunciado deste problema. Preste atenção, pois nenhum espaço foi sublinhado — você é que deve adivinhar o número e a localização dos espaços na frase. A única linha da saída deve consistir apenas de letras maiúsculas e espaços e ser finalizada por fim de linha.;False;1 / 10;10382;6784;65.34%
1865;Mjölnir;Iniciante;1;"Odin criou para Thor a mais fiel e poderosa arma possível, o martelo Mjölnir. Feito de um minério místico especial chamado Uru e forjado no coração de uma estrela pelos Deuses ferreiros de Asgard, Brokk e Eitri, os lendários ferreiros.

Um dia, Thor desafiou seus amigos para ver quem conseguia levantar o Mjölnir.

Escreva um programa que, dado um nome, e a força, em Newtons, aplicado ao tentar levantar o Mjölnir, informar se a pessoa conseguiu ou não levantá-lo.";Um número inteiro C será informado, que será a quantidade de casos de teste. Cada caso de teste inicia com uma palavra, que é o primeiro nome de quem está tentando levantar o Mjölnir, e um inteiro N (1 ≤ N ≤ 25000), indicando a força aplicada para cima, em Newtons, ao puxar o martelo, de modo a tentar levantá-lo.;Para cada caso de teste imprima um caractere ‘Y’, caso a pessoa tenha conseguido levantar , ou ‘N’, caso não tenha conseguido.;False;1 / 10;12128;8426;69.48%
1866;Conta;Iniciante;1;"Dois amigos pedem ao atendente de uma lanchonete propor um desafio, de modo que quem acertasse mais, não precisaria pagar a conta. Então foi proposto o seguinte: Dado o seguinte somatório abaixo, informar o resultado, com uma quantidade de termos no mesmo:

S = 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 ...

Escreva um programa que, dada uma quantidade de termos, informar o resultado do somatório acima.";Um número inteiro C será informado, que será a quantidade de casos de teste. Cada caso de teste inicia com um número inteiro N (1 ≤ N ≤ 1000), indicando a quantidade de termos da soma.;Para cada caso de teste imprima um número S, que é o resultado da soma dos N termos da expressão.;False;1 / 10;11707;9256;79.06%
1867;Maior Número de Um Algarismo;Ad-Hoc;4;"Os habitantes do planeta Uno possuem um terrível problema de detecção de números com mais de um algarismo, de modo que, para tudo que vão fazer, transformam qualquer valor inteiro em um número de um algarismo, realizando somas sucessivas do número até o mesmo ser reduzido a um algarismo. Por exemplo, o número 999999999991, no planeta Uno, soma-se todos os algarismos, resultando em 9+9+9+9+9+9+9+9+9+9+9+1 = 100. Como o número 100 tem mais de um algarismo, o processo se repete, resultando em 1+0+0 = 1

Uma das grandes dificuldades que os habitantes possuem está em comparar dois números e verificar qual deles é o maior, segundo as regras do planeta.

Escreva um programa que, dados dois números inteiros, identifique qual deles é o maior número de um algarismo.";"Haverá diversos casos de teste. Cada caso de teste inicia com dois inteiros N e M (0 ≤ N ≤ 10100, 0 ≤ M ≤ 10100), indicando os dois números a serem comparados.

O último caso de teste é indicado quando N = M = 0, sendo que este caso não deverá ser processado.";Para cada caso de teste, imprima uma linha, contendo um inteiro, indicando 1 se o primeiro número for o maior de um algarismo, 2 se o segundo número for o maior de um algarismo ou 0 se ambos os números possuírem o mesmo valor de um algarismo.;False;4 / 10;3838;1325;34.52%
1868;Espiral Quadrada;Strings;3;"A empresa Animações Livres de Falhas, ou ALF, realiza as mais diversas animações usando apenas caracteres na tela. Um dia, foram desafiados a fazer uma animação de uma Espiral Quadrada. Esta deverá proceder da seguinte forma:

					*Sempre exibirá uma tabela quadrada, com N linhas e N colunas, com um caractere em seu respectivo lugar, sem espaços entre os mesmos;

					*Esta quantidade N será sempre ímpar;

					*O primeiro quadro desta animação será com um caractere ‘X’ no centro da tabela e o restante da mesma ocupado com caracteres ‘O’;

					*Nos quadros seguintes, o caractere ‘X’ será deslocado para os outros locais da tabela, substituindo onde o mesmo estava com ‘O’, exibindo sempre uma vez o ‘X’ em cada quadro. O deslocamento será no formato de uma espiral quadrada, realizando o deslocamento para direita, para cima, para esquerda e para baixo. Veja um exemplo de todos os quadros da animação com N = 5:

					
					                    				

					Escreva um programa que, dado um número inteiro, imprima todos os quadros da animação da espiral quadrada.";"Haverá diversos casos de teste. Cada caso de teste inicia com um inteiro N (1 ≤ N ≤ 25), indicando o tamanho da tela.

					O último caso de teste é indicado quando N = 0, sendo que este caso não deverá ser processado.";Para cada caso de teste imprima N x N tabelas, cada uma separada com um ‘@’, seguindo as regras da animação como descritas anteriormente.;True;3 / 10;1334;745;55.85%
1869;Base 32;Matemática;5;"Num país chamado Tresdoislândia, todos os números são tratados na base 32, na qual cada símbolo numérico representa a ordem numérica, e os algarismos seguintes utilizam as letras de A até V. Por exemplo, o número 31 na base 32 é o algarismo V, e o número 32 na base 32 se torna 10.

Escreva um programa que, dado um número inteiro na base decimal, converta para a base 32.";"Haverá diversos casos de teste. Cada caso de teste inicia com um inteiro N (0 ≤ N ≤ 263), indicando um número na base decimal.

O último caso de teste é indicado quando N = 0.";Para cada caso de teste, imprima o valor correspondente à entrada, na base 32.;False;5 / 10;3234;1111;34.35%
1870;Ventiladores e Balões;Ad-Hoc;2;"Em um feriado, os empregados da empresa fabricante de ventiladores Irmãos Fulano, mais conhecida como IF, propuseram uma gincana. Dada uma caixa retangular, de grandes dimensões, formadas por compartimentos, contendo apenas a parede frontal e traseira, com todos os compartimentos acessíveis internamente, ventiladores pequenos, mas potentes, e sem a grade de proteção, foram amarrados internamente na caixa, em alguns compartimentos. Após isto, um balão é solto dentro da caixa, na reta de uma determinada coluna de compartimentos. Cada ventilador estará ligado com um determinado nível de força. Então, é verificado o ventilador mais próximo à esquerda e à direita do balão. Se ambos estiverem com o mesmo nível de força, o balão continua descendo normalmente. Caso seja diferente, o balão será empurrado para o lado do ventilador com o nível mais fraco, e o mesmo se deslocará tantas colunas forem a diferença entre o maior nível e o menor entre os ventiladores. Veja o caso abaixo em todos os detalhes:

					

					
						Balão solto na coluna 6;
						Na primeira linha, o ventilador mais próximo à direita do balão tem dois níveis a mais que o mais próximo da esquerda, deslocando o balão para a coluna 4;
						Na segunda linha, o ventilador mais próximo à direita do balão tem dois níveis a mais que o mais próximo da esquerda, deslocando o balão para a coluna 2;
						Na terceira linha, o ventilador mais próximo à direita do balão tem o mesmo nível em relação ao mais próximo da esquerda, mantendo o balão na coluna 2;
						Na quarta linha, o ventilador mais próximo à direita do balão tem dois níveis a menos que o mais próximo da esquerda, deslocando o balão para a coluna 4, saindo sem estourar;
					


					Se, na mesma caixa, o balão fosse solto na coluna 2, o balão teria estourado na linha 1 e coluna 1, nas hélices do ventilador que se encontra neste local.

									
					                	
									

					Escreva um programa que, dada uma matriz, representando a caixa e uma coluna, na qual o balão será solto, e verifique se o mesmo passa por todos os ventiladores sem estourar.";"Haverá diversos casos de teste. Cada caso de teste inicia com três inteiros, L, C e P (1 ≤ L ≤ C ≤ P ≤ 9), indicando a quantidade de L linhas e C colunas da matriz e P a posição da coluna a qual o balão será solto.

					O último caso de teste é indicado quando L = C = P = 0, sendo que este caso não deve ser processado.";"Para cada caso de teste, imprima, caso o balão tenha passado ileso, a palavra “OUT”, seguida da posição da coluna da qual o mesmo saiu no final; e caso tenha estourado no meio do caminho,  a palavra “BOOM”, e em qual linha e coluna o mesmo estourou.";True;2 / 10;553;378;68.35%
1871;Zero vale Zero;Strings;2;"Um dia o Prof. Humberto José Roberto fez o seguinte questionamento: Se o zero a esquerda de um número não tem valor algum, por que teria em outras posições de um número? Analisando da seguinte forma, ele pede sua ajuda para, ao somar dois valores inteiros, que o resultado seja exibido segundo o raciocínio dele, ou seja, sem os Zeros. Por exemplo, ao somar 15 + 5, o resultado seria 20, mas com esta nova ideia, o novo resultado seria 2, e, ao somar 99 + 6, o resultado seria 105, mas com esta nova ideia, o novo resultado seria 15.


					Escreva um programa que, dado dois números inteiros, sem o algarismo zero, some os mesmos e, caso o resultado tenha algum algarismo zero, que os retire antes de exibir.";"Haverá diversos casos de teste. Cada caso de teste inicia com dois inteiros M e N (1 ≤ M ≤ N ≤ 999.999.999).

					O último caso de teste é indicado quando N = M = 0, sendo que este caso não deve ser processado.";Para cada caso de teste, imprima o resultado da soma dos dois valores, sem os Zeros.;False;2 / 10;7760;3848;49.59%
1872;Palíndromo Real;Matemática;10;"Um palíndromo é uma palavra, frase ou qualquer outra sequência de unidades (como uma cadeia de ADN; Enzima de restrição) que tenha a propriedade de poder ser lida tanto da direita para a esquerda como da esquerda para a direita. Capicua ou número palíndromo é um número (ou conjunto de números) inteiros cujo reverso é ele próprio. Este problema quer que você analise um número real e verifique qual o menor valor que deve ser somado a este para que o mesmo se torne um palíndromo real, sem nome específico até o momento. Por exemplo, se o número for 101,099 , ao somar com 0,002, obteremos o palíndromo real 101,101. Outro exemplo seria o número 13,31 , que já é um palíndromo real, devendo somar 0 para que o mesmo continue assim. Um último exemplo é o número 100,9 , o qual deve somar 0,1 , para que a soma se torne 101.

Escreva um programa que, dado um número real, verifique qual o menor valor a ser somado para que o mesmo se torne um palíndromo real.";Haverá diversos casos de teste. O primeiro número a ser lido será um inteiro C, representando a quantidade de casos de teste. Cada caso de teste tem um número real R (0 ≤ R ≤ 999.999,999999). Lembrando que a entrada terá, no máximo, 6 casas decimais, e que o separador decimal é o ponto ao invés da vírgula.;Para cada caso de teste, imprima o valor esperado, com a quantidade de casas necessária.;False;10 / 10;401;23;5.74%
1873;Pedra-papel-tesoura-lagarto-Spock;Strings;1;"Pedra-papel-tesoura-lagarto-Spock é uma expansão do clássico método de seleção em jogo de pedra-papel-tesoura. Atua sob o mesmo princípio básico, mas inclui outras duas armas adicionais: o lagarto (formado pela mão igual a uma boca de fantoche) e Spock (formada pela saudação dos vulcanos em Star Trek). Isso reduz as chances de uma rodada terminar em um empate. O jogo foi inventado por Sam Kass e Karen Bryla, como ""Rock Paper Scissors Lizard Spock"".  As regras de vantagem são as seguintes:


					
						Tesoura corta papel
						Papel cobre pedra
						Pedra derruba lagarto
						Lagarto adormece Spock
						Spock derrete tesoura
						Tesoura prende lagarto
						Lagarto come papel
						Papel refuta Spock
						Spock vaporiza pedra
						Pedra quebra tesoura
					


					Um dia, dois amigos, Rajesh e Sheldon, decidiram apostar quem pagaria um almoço para o outro, com esta brincadeira. Sua missão será fazer um algoritmo que, baseado no que eles escolherem, informe quem irá ganhar ou se dará empate.";Haverá diversos casos de teste. O primeiro número a ser lido será um inteiro C, representando a quantidade de casos de teste. Cada caso de teste tem duas palavras, representando a escolha de Rajesh e de Sheldon, respectivamente.;Para cada caso de teste, imprima quem venceu, ou se houve empate.;False;1 / 10;6151;3085;50.15%
1874;Empurrando Blocos;Estruturas e Bibliotecas;4;A Empresa Blocos Regulares Inventando Serventia de Algo, mais conhecida como BRISA, construi blocos, sempre do mesmo tamanho. Um detalhe que chama a atenção está na forma em que os blocos são armazenados em estoque, depois de fabricados. Os mesmos são formados por uma fileira de pilhas. A retirada de uma caixa do estoque é um tanto quando desordenado, pois se escolhe uma pilha aleatoriamente e retira-se algum bloco do topo dela. Porém, a forma de armazenamento é um tanto quanto interessante: uma esteira, localizada na reta do topo da pilha mais à direita do estoque, é utilizada. Com isto, forma-se uma fila com os novos blocos. A esteira roda da direita para a esquerda. Assim que houver um espaço vago em uma das pilhas seguintes, o bloco será inserido na mesma, caso não haja, ele vai avançando até as pilhas seguintes. Segue abaixo um exemplo de inserção de blocos.;Haverá diversos casos de teste. Cada caso de teste terá 3 números inteiros, H, P e F, indicando a altura da pilha mais a direita , a quantidade de pilhas de blocos e o tamanho da fila de blocos a ser inserida. Após isto, serão lidos H linhas com P valores, com valores 1, representando onde tem bloco, e 0, representando onde não tem bloco. A seguir, será lida uma linha com F valores, representando a fila com os blocos novos. O último caso de teste é representado por três zeros, e não deverá ser processado.;Para cada caso de teste, imprima as pilhas após a inserção dos novos blocos. Em alguns casos, a fila de novos blocos será mais que suficiente para que todas as pilhas fiquem do mesmo tamanho. Neste caso, desconsidere os blocos que sobrarem na fila.;True;4 / 10;889;423;47.58%
1875;Tribol;Geometria Computacional;3;"Na cidade de Triangulândia, o maior sonho de sua população era construir um campo de futebol, mas lá todos os terrenos são triangulares. Se fosse para fazer um campo retangular, uma boa parte do terreno não seria aproveitada para construir o campo. Então, os irmãos Hipo e Tenusa tiveram uma grande ideia: A criação de um novo jogo, derivado do futebol, mas jogado em um campo triangular, e chamaram o jogo de Tribol. As regras eram simples:

Jogam três equipes ao mesmo tempo: Red, Green e Blue.


	A partida tem um tempo de trinta minutos.
	A equipe que fizer um gol no adversário do sentido anti-horário ao mesmo, é um gol normal.
	A equipe que fizer um gol no adversário do sentido horário ao mesmo, vale o dobro.
	Se as três equipes fizerem a mesma quantidade de gols, ocorre um trempate
	Se as duas equipes que fizerem mais gols tiverem feito a mesma quantidade, ocorre um empate, e o jogo é decidido por pênaltis.
	A equipe que fizer mais gols, vence.


Exemplo de partida. Os times estão dispostos no campo igual à imagem abaixo.


					

	A equipe Green faz um gol na equipe Blue e um gol na equipe Red, totalizando 3 gols;
	A equipe Blue faz dois gols na equipe Green, totalizando 2 gols;
	A equipe Red faz dois gols na equipe Green, totalizando 4 gols e vencendo a partida. ";Haverá diversos casos de teste. O primeiro número a ser lido será um inteiro C, representando a quantidade de casos de teste. Cada caso de teste se inicia com um número inteiro P, representando a quantidade de gols na partida. A seguir serão lidos P linhas, cada um com dois caracteres M e S, indicando a primeira letra do time que marcou o gol e a primeira letra do time que sofreu o gol, respectivamente.;Para cada caso de teste, imprima o resultado da partida no tempo normal, baseado nos gols que foram marcados.;True;3 / 10;2979;1348;45.25%
1876;Rabiola;Ad-Hoc;2;"Todo ano, os moradores da cidade de Pipacicaba organizam o campeonato municipal de pipas. Neste lugar, eles utilizam um tipo especial de cipó para usar como rabiola da pipa. Este cipó é formado por uma fita única, formado por folhas normais e folhas aderentes. Nos exemplos, as folhas normais serão representadas por uma letra ‘o’ e as folhas aderentes, formadas por uma letra ‘x’. Para aproveitar as diversas cores dos cipós, cada pipa do campeonato pode apenas colocar uma única fita. Cada folha aderente deverá ser colada em um ponto único na base da pipa. Com isto, filetes de folhas normais são formados. Os dois filetes mais externos ficam, normalmente, sem dobras. Os filetes internos, sempre formados por uma quantidade par de folhas, são dobrados: Abaixo, temos um exemplo de cipó, e sua colocação na pipa:

Cipó: ooxooooooxo

Após colar as folhas aderentes, a rabiola ficará assim:


					
Os filetes aparecem separados na imagem para melhor visualização. Na verdade, os filetes ficam sobrepostos. Sua missão é fazer um algoritmo que, dado um cipó, informe o tamanho do maior filete de rabiola feito com o mesmo.";A entrada possui múltiplos casos de teste. Cada caso de teste é dado em uma linha, que contém uma única palavra P composta apenas pelas letras ‘o’ ou ‘x’, representando um cipó. Essa palavra possui no máximo 100 caracteres. A entrada termina com o fim do arquivo. ;Para cada caso de teste, imprima uma linha contendo um único inteiro N, que é o tamanho do maior filete de rabiola formado por este cipó. ;True;2 / 10;480;312;65.00%
1877;O Castelo de Neve de Sansa;Ad-Hoc;2;"Robin: ""O que você está fazendo?""
Sansa: ""Estou construindo minha casa, Winterfell.""

Sansa está construindo um castelo de neve no jardim do Ninho da Águia. O castelo de neve é feito para parecer com o verdadeiro castelo de Winterfell.

O castelo de neve pode ser descrito como uma sequência de N torres de neve, numeradas de 1 a N da esquerda para a direita. A altura da torre i (1 ≤ i ≤ N) é igual a hi centímetros.

Sansa diz que o castelo é bonito se ele consiste em uma sequência de K ""picos"" alterados com K-1 ""vales"", como o castelo de Winterfell. Em outras palavras, o castelo é bonito se existe uma sequência de K torres T1 < T2 < ... < TK tal que:


	As alturas das torres no intervalo [1, T1] estão em ordem crescente;
	Existe um ""vale"" no intervalo [Ti, Ti+1], para todo 1 ≤ i < K;
	As alturas das torres no intervalo [TK, N] estão em ordem decrescente.


Existe um ""vale"" em um intervalo [A, B] se B ≥ A+2 e existe alguma torre J, A ≤ J ≤ B, tal que as alturas das torres no intervalo [A,J] estão em ordem decrescente, e as alturas das torres no intervalo [J,B] estão em ordem crescente.

Ajude Sansa a determinar se seu castelo é bonito ou não!";A primeira linha contém dois inteiros N e K (1 ≤ N ≤ 1000, 1 ≤ K ≤ N). A segunda linha contém N inteiros h1, h2, ..., hN (1 ≤ hi ≤ 100), as alturas das torres, em centímetros. A primeira e a última torre sempre terão 1 centímetro de altura. Duas torres consecutivas nunca terão a mesma altura.;Imprima uma linha contendo a palavra beautiful se o castelo dado é bonito, ou a palavra ugly caso contrário.;False;2 / 10;441;320;72.56%
1878;Torneios em Sequência;Paradigmas;3;"Denis é um professor de programação competitiva muito justo. Em sua disciplina, ele faz uma sequência de N torneios de programação para avaliar seus M alunos. A última ideia de Denis foi premiar os três alunos que se saírem melhor nos torneios. Para isto, Denis teve a ideia de criar a seguinte função classificatória.

					f(T1,T2,...,TN) = c1T1 + c2T2 + ... + cNTN

					Na função, a N-upla (T1,T2,...,TN) indica as classificações de um aluno nos N torneios. Por exemplo, se há dois torneios, um aluno fica em terceiro lugar no primeiro torneio e em primeiro lugar no segundo torneio, seu par ordenado é (3, 1).
					Como Denis quer ser o mais justo possível, ele não quer que haja possibilidade de empate. Como ele também está com preguiça de tentar provar que sua função é livre de empates, ele pediu a sua ajuda para fazer um programa que, dados os coeficientes c1, c2, ..., cN, determine se a função pode de fato ser usada para classificação. Ou seja, se a função não irá classificar dois alunos distintos igualmente.
					Observe que o software utilizado por Denis para classificar seus alunos em um torneio é livre de empates. Ou seja, não é possível que dois alunos fiquem em primeiro lugar em um mesmo torneio, ou em segundo lugar, etc.";"A entrada é composta por vários casos de teste e termina com fim de arquivo.

					A primeira linha de um caso de teste é composta por dois inteiros N e M, que são respectivamente o número de torneios realizados por Denis e o número de alunos que irão competir em cada torneio, onde 1 ≤ N ≤ 3 e 1 ≤ M ≤ 10.

					Em seguida são dados N inteiros c1, c2, ..., cN, os coeficientes da função de Denis, onde ci ≥ 1 para todo i.

					Em um caso de teste, é garantido que os valores da função de Denis não passam de 109.";"Para cada caso de teste, imprima a linha ""Lucky Denis!"" se a função pode ser usada por Denis, ou ""Try again later, Denis..."" em caso contrário.";False;3 / 10;736;379;51.49%
1879;Bridge;Ad-Hoc;6;"Bridge é um grande jogo de cartas! O mundial juvenil de bridge foi realizado na Tailândia em 2006, mesmo país da final mundial da ICPC em 2016! Vamos falar sobre as regras do jogo. Ele é jogado com um baralho de 52 cartas, 13 de cada naipe (copas, espadas, paus e ouros). As cartas têm uma ordenação (A, K, Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2), onde ás é a maior carta e 2 a menor. Existe também um trunfo pré definido (H = copas, S = espadas, C = paus, D = ouros, NT = não há trunfo). Um naipe definido como trunfo vale mais que os outros.

O jogo é jogado por 4 jogadores (N, E, S, W), como mostrado na figura, e consiste de várias rodadas, chamadas de vazas. Um jogador começa a rodada/vaza jogando uma carta. Em seguida, cada jogador, em sentido horário, joga uma carta até que todos os jogadores tenham jogado. Nesse momento, acaba a vaza. O jogador que começa a vaza pode jogar a carta que quiser; o naipe dessa carta é definido como o naipe da vaza. Todo jogador que não for o jogador que começou a vaza é obrigado a jogar uma carta com o mesmo naipe da vaza atual, a não ser que ele não tenha nenhuma tal carta. Nesse caso, pode jogar qualquer carta.

O vencedor de uma vaza é definido da seguinte forma: se uma carta de trunfo tiver sido jogada na vaza, ganha o jogador que jogou a maior carta de trunfo. Caso contrário, ganha a maior carta do naipe da vaza. O jogador que ganhou a vaza começa a seguinte.

O jogador N inicia a primeira vaza. Os jogadores N e S formam uma dupla, enquanto E e W formam outra. O objetivo do jogo é ganhar o maior número possível de vazas.



Nesse problema, cada jogador tem R cartas e queremos saber quantas vazas a dupla NS consegue ganhar se todos jogarem de forma ótima.";"A primeira linha da entrada contém um inteiro T indicando o número de instâncias.

Cada instância inicia com uma linha contendo uma string (dentre H,S, C, D, NT) indicando o trunfo da partida e um inteiro R (1 ≤ R ≤ 4) indicando o número de cartas que os jogadores têm. Cada uma das próximas 4 linhas contém uma lista de R cartas separadas por espaços. Uma carta é representada como uma cadeia XY, onde X está dentre A, K, Q, J, T (representando 10), 9, 8, 7, 6, 5, 4, 3, 2, e Y representa o naipe (dentre H, S, C, D). As 4 linhas contêm as cartas dos jogadores N, E, S e W, nessa ordem. Note que não existe carta repetida!";Para cada instância, imprima uma linha contendo um único inteiro, correspondente ao número máximo de vazas que a dupla NS pode ganhar.;True;6 / 10;39;17;43.59%
1880;Renzo e a Decoração Capicuânica;Ad-Hoc;4;"Nas ruínas de Wat Phra Si Sanphet (วัดพระศรีสรรเพชญ์) estão inscrições famosas que apenas recentemente tiveram seu significado desvendado. Vários números decoram as ruínas, escritos usando os dígitos tailandeses.

				Há dois anos, o famoso pesquisador peruano Renzo ""el intrépido"" Morales verificou que a maioria dos números encontrados nas ruínas são capicuas, isto é, representam o mesmo valor se lidos ao contrário. Por exemplo, 171 é capicua, mas 17 não é capicua.

				Intrigado pela presença de números que não são capicuas na decoração dasruínas, Renzo descobriu que, apesar de esses números não serem capicuas quando representados em base 10 (utilizada na escrita tailandesa), eles são capicuas se representados em uma base diferente. A representação em uma base b > 0 de um número N dado na base 10 é dada pela sequência amam-1...a1a0, tal que 0 ≤ ai ≤ b-1, para todo 0 ≤ i ≤ m, am > 0 e ambm + am-1bm-1 + ... + a1b + a0= N. No exemplo anterior, a representação em base 2 do número 17 é 10001, que é capicua.

				Para comprovar sua descoberta, Renzo quer que você escreva um programa que recebe um número representado na base 10 e verifica em quais bases, de 2 a 16, sua representação é capicua.";"A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias.

				Cada instância consiste de uma única linha contendo um número inteiro N (0 ≤ N < 231) escrito na base 10.";Para cada instância, imprima em uma única linha a sequência crescente das bases, de 2 a 16, para as quais a representação de N é capicua. Se a representação de N não for capicua para nenhuma base entre 2 e 16, imprima -1.;False;4 / 10;506;275;54.35%
1881;Competição de Robótica;Ad-Hoc;10;"Malai participará da final tailandesa de robótica na próxima semana. Nessa competição, cada competidor dará ao seu respectivo robô uma instrução e o número de vezes que essa instrução deverá ser executada. No final da competição, o robô que se aproximar mais do alvo final será o campeão.

					Cada robô pode ser representado como um ponto (x, y) no plano cartesiano e sua posição inicial será a origem do plano. Cada instrução é definida por I(α, l), onde α representa um ângulo em graus e l uma distância em metros. Para executar a instrução I(α, l), o robô deve rotacionar α graus no sentido anti-horário em torno da origem e depois somar l metros na coordenada x da sua posição.
										
					

					Malai é iniciante nessa competição e precisa da sua ajudar para descobrir a posição final do robô.";"A primeira linha da entrada contém um inteiro T indicando o número de instâncias.

				Cada instância consiste de uma única linha contendo o ângulo α (0 ≤ α ≤ 365), a distância l (0 ≤ l ≤ 10) racional e o número inteiro N (1 ≤ N ≤ 1.000.000.000) de vezes que a instrução I(α, l) deverá ser executada. Considere que α N são inteiros e l é racional.";Para cada instância, imprima uma única linha contendo as coordenadas (x, y), em metros, da posição final do robô, após executar N vezes a instrução I(α, l). As coordenadas x e y devem ser arredondadas e impressas com 2 casas decimais.;True;10 / 10;419;59;14.08%
1882;Passeios Aleatórios pela Tailândia;Ad-Hoc;10;"A Tailândia tem algumas centenas de ilhas. Todas as ilhas de tamanho razoável têm pequenas pistas de voo, onde aviões de pequeno porte operam. O sistema de transporte, no entanto, é bastante estranho às vistas de um estrangeiro...

Os barqueiros são muito confiáveis. Partindo, por exemplo, de Ko Khang Khao (เกาะค้างคาว), você consegue um barco para as ilhas vizinhas a preços razoáveis: Ko Sichang (เกาะสีชัง), Ko Kham Yai (เกาะขามใหญ่), Ko Kham Noi (เกาะขามน้อย), Ko Ram Dok Mai (เกาะร้ามดอกไม้), Ko Prong (เกาะปรง), ou Ko Yai Thao (เกาะใหญ่ท้าว) (sim, Ko significa ilha em tailandês).

Os pilotos de avião, por sua vez, são muito temperamentais. Você pega o avião e ele deixa você em uma ilha aleatória, que ele decide de acordo com sua própria vontade. Toda ilha tem a mesma probabilidade de ser escolhida pelo piloto, inclusive a ilha de origem. Apesar de o destino ser incerto, toda viagem de avião tem o mesmo preço fixo.

Assim, quando você quer ir de uma ilha a outra tem sempre duas opções. Pegar um barco para uma ilha vizinha, cujo preço varia de acordo com o trecho percorrido, ou arriscar e pegar um avião, pagando o preço fixo de K baht.

Considere que as ilhas são numeradas de 1 a N. Sua tarefa neste problema é determinar o valor mínimo esperado de uma viagem a ser feita da ilha 1 para a ilha N.";"A primeira linha da entrada contém um inteiro T indicando o número de instâncias.

Cada instância inicia com 3 inteiros, N, M (1 ≤ N, M ≤ 100.000) e K (1 ≤ K ≤ 1000), representando o número de ilhas, a quantidade de barqueiros e o custo da viagem de avião.

As próximas M linhas contêm 3 inteiros cada, A, B, C (1 ≤ C ≤ 1.000), indicando que existe um barqueiro cobrando C baht para ir da ilha A para a B, ou da ilha B para a A. Entre cada par de ilhas existe no máximo um barqueiro.";Para cada instância, imprima um número real arredondado para 3 casas decimais com o valor mínimo esperado. O número deve sempre ser impresso com as 3 casas decimais.;False;10 / 10;163;1;0.61%
1883;Fuga de Ayutthaya;Grafos;7;"Ayutthaya foi um dos primeiros reinos da Tailândia. Ele existiu entre os anos 1351 e 1767. A organização de Investigadores de Mistérios Extraordinários (IME) tem um grande interesse em revelar os segredos dessa antiga civilização. Um dos historiadores mais renomeados dessa instituição é Márcio ""o imprescindível"" Himura. Atualmente, ele está investigando as regras de conduta e os castigos que eram impostos na época do rei Ramathibodi I, fundador de Ayutthaya. Descobertas recentes mostram uma forma de punição dada aos habitantes de Ayutthaya que não se convertiam ao budismo theravada, religião que foi adotada pelo rei Ramathibodi I.

					Esse castigo consistia em deixar a pessoa presa em uma sala que tinha uma única saída, e onde era aceso fogo em diferentes lugares. Se a pessoa conseguia chegar à saída antes de ser atingida pelo fogo, sua vida era perdoada. Márcio tem acesso a diferentes registros que mostram a estrutura de algumas salas onde eram feitos esses castigos. Porém, não existem documentos onde se registre se a pessoa punida foi perdoada ou não. Márcio gostaria de saber se para cada uma dessas pessoas existe alguma chance de ela ter sido perdoada. Para isso, Márcio representou cada sala como uma grade de N linhas e M colunas onde cada posição contém um símbolo com o seguinte significado

					

					onde ""início"" se refere à posição da pessoa dentro da sala quando o fogo foi aceso. Além disso, Márcio impôs as seguintes restrições para modelar cada situação:


	O fogo se propaga nas quatro direções cardinais (N, S, E, O) à velocidade de uma célula por minuto.
	A pessoa presa também se move em essas quatro direções com essa mesma velocidade.
	Nem o fogo e nem a pessoa presa podem ultrapassar uma parede.
	Se a pessoa e o fogo chegarem a ocupar a mesma posição no mesmo instante de tempo, então considera-se que essa pessoa morre instantaneamente.


Você é um membro do IME e Márcio quer saber se você merece tal distinção. Por isso, encarregou a você a tarefa de determinar se um preso teve a chance de ser perdoado.";"A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias.

Cada instância consiste de diversas linhas. A primeira linha contém dois inteiros, N (1 ≤ N ≤ 103) e M  (1 ≤ M ≤ 103) . A seguintes N linhas contêm exatamente M símbolos representando, como descrito no enunciado, uma sala onde uma pessoa foi presa.";"Para cada instância, imprima uma linha contendo um único caractere. Imprima 'Y' se a pessoa teve alguma chance de ter sido perdoada; caso contrário, imprima 'N'.";True;7 / 10;722;219;30.33%
1884;Lutando Contra os Rajasi;Ad-Hoc;10;"O Muay Thai é uma arte marcial originária da Tailândia. Muitos praticantes dessa arte são considerados lendas pelo povo tailandês. Dentre todos eles, Nai Khanom Tom é considerado o ""pai"" do muay thai. A seguinte história faz parte da lenda desse lutador.

					O rei Mangra da Birmânia organizou uma luta entre um preso de guerra tailandês e um guerreiro birmano para decidir qual tinha o melhor estilo de luta. Nai Khanom Tom foi escolhido para lutar e derrotou com muita facilidade seu adversário. Porém, o árbitro da luta alegou que isso aconteceu pela dança (Ram Muay) feita por Nai Khanom Tom. Por isso, o rei mandou a que Nai lutasse contra dez guerreiros birmanos, um após o outro. Ainda assim, o resultado foi o mesmo, Nai Khanom Tom venceu todos. Após ver as habilidades de Nai, o rei Mangra concedeu-lhe a liberdade.

					Essa história passou de geração a geração. Existem até pessoas que acreditam que Nai Khanom Tom podia vencer qualquer quantidade de adversários, incluindo seres da mitologia tailandesa.

					Você é um grande fã do muay thai e deseja testar a veracidade dessa afirmação. Suponha que Nai Khanom Tom possui H pontos de vida e tem que lutar contra N Rajasis. Cada um deles possui xi pontos de vida e yi pontos de recuperação. Para vencer uma luta, os pontos de vida de Nai devem de ser maiores do que os pontos de vida do Rajasi. Após lutar, Nai perde xi pontos de vida e recupera yi pontos em seguida. Além disso, pelo seu treinamento Nai conhece K feitiços que podem ser usados para derrotar um Rajasi instantaneamente. Porém, nesse caso, ele não perde nem ganha os pontos de vida como o caso anterior.

					Agora, chegou a sua oportunidade de provar essa hipótese. Dada a descrição de um conjunto de N Rajasis, você deve responder se Nai Khanom Tom pode vencer todos eles. Note que Nai Khanom Tom pode lutar com os Rajasis na ordem que ele quiser.";"A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias.

					A primeira linha de cada instância contém 3 inteiros, N (1 ≤ N ≤ 2000), H (0 ≤ H < 109) e K (1 ≤ K ≤ 2000), onde H representa o valor inicial dos pontos de vida. Cada uma das N linhas seguintes contém 2 inteiros, xi e yi (1 ≤ xi, yi < 109).";"Para cada instância, imprima uma linha contendo 'Y' se for possível que Nai Khanom Tom vença todos os Rajasis; imprima 'N' caso contrário.";False;10 / 10;598;74;12.37%
1885;Loteria Tailandesa;Ad-Hoc;7;"Borommarachathirat IV (สมเด็จพระบรมราชาธิราชที่ 4) foi um monarca do reino de Ayutthaya no século XVI. Borommarachathirat IV decidiu organizar uma loteria para sua população de súditos, utilizando uma certa quantidade de dados. São dados tradicionais tailandeses, que podem ter várias faces, cada face podendo ocorrer com a mesma probabilidade.

Por seu forte senso de justiça, o monarca exige que o sorteio seja perfeitamente justo, ou seja, que cada um de seus súditos tenha a mesma chance de ser sorteado. O sorteio consiste de um número finito de lançamentos e, após cada lançamento, é decidido se houve algum vencedor ou se será necessário realizar um novo lançamento. Os lançamentos devem seguir as seguintes regras:


	vários dados podem ser jogados simultaneamente no mesmo lançamento;
	resultados anteriores podem influenciar na escolha dos dados para os lançamentos seguintes;
	um mesmo dado pode ser escolhido para vários lançamentos.


O importante é garantir que, como resultado do sorteio, cada um dos habitantes tenha iguais chances de ser sorteado. Veja que nem sempre isso é possível. Por exemplo, se tivermos 5 pessoas e apenas um dado de 6 faces, não há como realizar o sorteio. Já com este dado é possível realizar o sorteio se a população for de 3, 6, 18, ou 36 pessoas, por exemplo.

Sua tarefa neste problema é fazer um programa para ajudar o monarca a decidir se é possível realizar o sorteio com os dados disponíveis.";"A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias.

Cada instância é composta por duas linhas. A primeira linha contém 2 inteiros, N (1 ≤ N ≤ 1018) e K (0 ≤ K ≤ 105), que representam o número de pessoas e o número de dados, respectivamente. A segunda linha contém K inteiros. O i-ésimo inteiro dessa linha, digamos fi (1 ≤ fi ≤ 1018), representa o número de faces do i-ésimo dado.";"Para cada instância, imprima uma linha contendo um único caractere. Imprima 'Y' se for possível fazer o sorteio; caso contrário, imprima 'N'.";False;7 / 10;105;35;33.33%
1886;Resguardando os Templos;Ad-Hoc;6;"Existem milhares de templos budistas na Tailândia. Em geral, os templos budistas são chamados de ""wat"". Além disso, existem alguns templos que recebem uma distinção pela sua importância e são chamados de ""templos reais"". Um exemplo desse último tipo é o templo ""Wat Phra Kaew"", localizado no Grande Palácio de Bangkok. Esse templo acolhe a imagem do Buda Esmeralda, que é a mais venerada na Tailândia. Em 2016, a final mundial do ACM ICPC será realizada em Phuket, Tailândia. Por isso, espera-se que o turismo se incremente nessa cidade. Isso levou às autoridades de Phuket a pensar em melhorar a segurança dos templos reais da cidade.

Por esta razão a Unidade de Segurança de Phuket (USP) contratou a pesquisadora Lua ""a engenhosa"" Kuratowski. A USP está interessada em resolver o seguinte problema, dados N templos reais e M ruas que ligam esses templos, posicionar guardas nessas ruas de forma que todo templo real seja vigiado. Consideramos que um templo é vigiado se pelo menos uma das ruas que tem como extremo esse templo é vigiada por algum guarda. Por outro lado, as ruas foram construídas de forma que sempre existe uma sequência de ruas que liga dois templos quaisquer. Além disso, por costumes ancestrais de Tailândia, se fazemos uma trilha pelos templos reais da cidade, sempre andando por ruas distintas e visitando templos distintos até retornar ao templo de partida, sempre temos a certeza de ter passado por um número par de ruas, já que existe certa superstição com os números ímpares.

Como Lua é muito esperta, basta-lhe apenas olhar a descrição dos templos de Phuket, que ela já sabe qual é a resposta ótima (aquela que usa o número mínimo de guardas). Ela escreveu a resposta em um papel, enquanto assobiava ""Elephant Gun"", e o entregou à USP.

Ela sabe que você deseja participar da final mundial do próximo ano, e considera que este é um bom problema para testar suas habilidades. Por isso, desafia a você a resolvê-lo.";"A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias.

Cada instância consiste de diversas linhas. A primeira linha contém dois inteiros, N (1 ≤ N ≤ 103) e M (1 ≤ M ≤ 5*103) que representam o número de templos reais de Phuket e o número de ruas entre templos reais, respectivamente. Cada templo e identificado por um inteiro entre 1 e N. As seguintes M linhas descrevem as ruas da cidade. Cada rua é descrita por dois inteiros que representam os templos que ela liga.";Para cada instância, imprima uma única linha contendo o numero mínimo de guardas necessários para vigiar todos os templos reais da cidade.;False;6 / 10;231;119;51.52%
1887;As Vias Férreas Kunming-Cingapura;Ad-Hoc;9;"A via férrea Kunming-Cingapura é um conjunto de vias (já construídas e em plano de construção) que têm como objetivo ligar diferentes cidades da Ásia. Esse projeto começou em 1900 com a proposta de construir uma via férrea que ligasse a cidade de Kunming (China) a Cingapura, por parte do império britânico. Depois, em 1918, essa via férrea foi conectada ao conjunto de vias de Tailândia mediante uma via férrea que ligava Bangkok e Cingapura. No ano 2000, a ASEAN (Associação de Nações do Sudeste Asiático) propôs completar esse sistema de vias férreas.

O término desse projeto está previsto para o ano 2020. Devido à importância desse sistema para a integração do sudeste asiático, as empreiteiras responsáveis têm contactado você para calcular o custo mínimo para manter este sistema ao longo do tempo. Cada via (já construída e por construir) tem um custo de manutenção. O que se deseja é, dadas as N cidades que o sistema Kumming-Cingapura liga, as M vias iniciais do sistema e as Q vias que serão adicionadas ao longo do tempo, calcular o custo mínimo para manter o sistema conectado após construir cada uma dessas Q vias. Consideramos que o sistema está conectado se, para cada par de cidades existe um conjunto de vias que as ligam.";"A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias.

Cada instância é composta por diversas linhas. A primeira linha de cada instância contém três inteiros, N, M e Q (descritos no enunciado, 1 ≤ N, M, Q  ≤ 3*104) separados por um espaço. As seguintes M linhas descrevem as vias iniciais do sistema. Cada via é representada por três inteiros a, b e c (1 ≤ a, b ≤ N e 1 ≤ c ≤ 3*104), onde a e b representam as cidades que são ligadas por essa via, e c é o custo de manutenção. As Q linhas seguintes representam as vias adicionadas ao sistema. A i-ésima linha desse grupo de Q linhas descreve a i-ésima via adicionada ao sistema através de três inteiros, como no caso anterior.";Para cada instância, imprima Q linhas. A i-ésima linha desse grupo de Q linhas deve conter um único inteiro que representa o custo mínimo de manutenção do sistema após a adição da i-ésima via.;False;9 / 10;127;33;25.98%
1888;Os chedis de Kamphaeng Phet;Ad-Hoc;9;"Um chedi (conhecido também como estupa, pagode ou dágaba) é um monumento geralmente em formato de torre cônica construído sobre os restos mortais de uma pessoa importante da religião budista. Alguns sítios históricos tailandeses contêm dezenas desses monumentos, muitos deles dedicados a monges ou líderes religiosos antigos (bhikkhu - ภิกษุณี, como são chamados na Tailândia). Vários desses monges dedicaram suas vidas à contemplação e oração a diferentes entidades. Para citar um exemplo, no sítio de Kamphaeng Phet encontram-se vários chedi em que as inscrições fazem referência a Garuda (ครุฑ) (não confunda com o personagem homônimo do Street Fighter). O mesmo se repete no sítio de Si Satchanalai e de Sukhothai.

A língua tai tem diferenças muito sutis entre as diferentes letras, que torna a análise dos especialistas extremamente difícil. Por exemplo, quando qualquer símbolo da palavra correspondente ao deus Ramakien (รามเกียรติ์) é mudado, seu significado é completamente alterado. Lembrando que algumas dessas ruínas têm mais de 700 anos, estes escritos já sofrem a ação do tempo e de vândalos há séculos. Assim, o trabalho desses pesquisadores é muito complicado. Um outro exemplo é o par de inscrições abaixo encontrada em chedis diferentes.

จัดษุตังขึ้นโดยพรภิะบมพุธานุญาษุ

จัดตั้งขึ้โกดยพระบรมษุพุทธานญาต

Os especialistas acreditam que se refiram à mesma entidade. Para chegar a essa conclusão, eles desenvolveram um método que chamam de análise da diferença probabilística mínima.

Essa análise funciona da seguinte maneira. Sejam a = a1a2...aN e b = b1b2...bM duas inscrições com N e M caracteres, respectivamente. O valor do parâmetro chamado diferença é inicializado com zero. A cada passo, analisa-se um par de caracteres (ai, bj), com 1 ≤ i ≤ N + 1 e 1 ≤ j ≤ M + 1, começando por (a1,b1). Note que quando  i = N + 1, ai é o caracter vazio e o mesmo vale para bj quando j = M + 1. Se ai = bj, pode-se considerar que existe uma correspondência entre tais caracteres nas inscrições e trocar o par atual por (ai+1, bj+1). Tal correspondência nunca existe se ai ≠ bj e um caracter de uma inscrição nunca pode corresponder a dois caracteres da outra inscrição. Se for considerado que não existe correspondência entre os caracteres do par, então o valor da diferença deve ser aumentada por uma das seguintes formas:


	
	adicionando 1 à diferença e trocando o par atual por (ai+1, bj) ou por (ai, bj+1);
	
	
	adicionado K à diferença e trocando o par atual por (ai+x, bj+y), onde x e y são escolhidos aleatoriamente com distribuição uniforme nos intervalos [1, N-i+1] e [1, M-j+1], respectivamente. Se i > N, apenas y varia aleatoriamente. Se j > M, apenas x varia aleatoriamente.
	


A análise termina quando os caracteres ai e bj são ambos o caracter vazio. Note que o valor da diferença pode variar de acordo com as escolhas tomadas.

Os especialistas consideram que quanto menor for a diferença obtida, maior será a correspondência entre as inscrições. Assim, eles pedem que você escreva um programa para encontrar a diferença mínima esperada entre duas inscrições.";"A primeira linha da entrada contém um inteiro T indicando o número de instâncias.

Cada instância inicia com 3 inteiros, N, M (1 ≤ N, M ≤ 3.000), e K (0 ≤ K ≤ 100.000), onde N é o tamanho da primeira inscrição e M é o tamanho da segunda inscrição. As próximas duas linhas contém, respectivamente, a primeira e a segunda inscrição. Uma inscrição consiste de uma cadeia de caracteres de 'a' a 'z'.";Para cada instância, imprima um número real arredondado para 3 casas decimais com a diferença mínima esperada entre as duas inscrições. Imprima a resposta com exatamente 3 casas decimais.;False;9 / 10;67;23;34.33%
1889;Treinando com as Larvas de Phuket;Ad-Hoc;8;"A culinária tailandesa é conhecida mundialmente por tentar combinar especiarias de forma a sempre ter presente num prato os elementos doce (açúcar, frutas, pimentões), apimentado, azedo (vinagre, tamarindo, lima) e salgado (shoyu, molho de peixe). O prato mais exótico, que sempre é oferecido aos turistas, é o que contém larvas de inseto fritas. O paladar ocidental costuma rejeitar a ideia de comer larvas, mas elas são muito apreciadas na Tailândia e disputadas em festas e encontros. As crianças tailandesas costumam brincar com a comida e, em particular, adoram construir triângulos usando as larvas fritas como arestas.

Marcos ""o resolvedor"" de Rubik ajuda no treinamento de alunos de sua universidade para uma famosa competição de programação de computadores. No ano que vem, a final mundial dessa competição será em Phuket, na Tailândia.

De conhecimento desse costume das crianças tailandesas, Marcos teve uma ideia para um treino especial. A ideia é preparar uma grande quantidade de larvas fritas de diversos comprimentos. Cada um de seus amigos, em sequência, deve selecionar 3 delas para formar um triângulo e precisará comer uma quantidade de larvas fritas proporcional à área do triângulo formado.

Marcos espera que, para comer menos larvas fritas possível, você escreva um programa para escolher as larvas que formam um triângulo de área mínima. Dessa forma, além de treinar suas habilidades de programação, você também estará treinando para enfrentar a culinária tailandesa. Caso goste dessa iguaria, você pode usar esse programa para ajudar seus amigos, fazendo com que mais larvas fritas sobrem na sua vez.";"A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias.

Cada instância consiste de um inteiro N (1 ≤ N ≤ 2*103), representando o número de larvas, seguido de N números reais, representando seus comprimentos. O comprimento de cada larva é um número real entre 1 e 500.";"Para cada instância, imprima uma única linha contendo a área mínima para os dados da instância, arredondado para 2 casas decimais; se não for possível formar um triângulo com as larvas, imprima -1.

.";False;8 / 10;347;105;30.26%
1890;Emplacando os Tuk-tuks;Ad-Hoc;1;"Na Tailândia, um tipo popular de transporte público é o chamado tuk-tuk (ตุ๊กตุ๊ก), também conhecido como auto-riquixá. O governo de Phuket decidiu criar um novo sistema de placas para os tuk-tuks, com a finalidade de diferenciá-los dos outros tipos de veículos. Devido ao turismo, que é uma das principais atividades econômicas da província, a frota de tuk-tuks vem crescendo rapidamente. Espera-se que com o novo sistema de placas seja possível criar uma quantidade suficiente de placas distintas para atender à demanda pelos próximos 42 anos.

Um sistema de placas é definido por dois números, C e D. Uma placa nesse sistema é uma cadeia com C consoantes seguidas por D dígitos. Uma placa não pode ser vazia (sem consoantes e sem dígitos).

No alfabeto tailandês existem 44 consoantes e 10 dígitos. No entanto, como os símbolos de algumas consoantes são parecidos com os de outras, o governo decidiu que serão utilizadas somente 26 consoantes, cujos símbolos foram considerados suficientemente diferentes.

Para garantir que existirão tuk-tuks suficientes para os competidores da Final Mundial da Maratona de Programação em 2016, o governo de Phuket quer saber qual o número de placas distintas é possível gerar com um determinado sistema de placas.";"A primeira linha da entrada contém um inteiro T indicando o número de instâncias.

Cada instância consiste em uma linha contendo os números inteiros C (0 ≤ C ≤ 6) e D (0 ≤ D ≤ 9) representando as quantidades de consoantes e dígitos, respectivamente, em um sistema de placas.";Para cada instância, imprima uma linha com a quantidade de placas distintas que podem ser geradas pelo sistema correspondente. É garantido que a resposta sempre será menor que 231.;False;1 / 10;983;741;75.38%
1891;Removendo Moedas no Kem Kradãn;Ad-Hoc;6;"Andréh e Andréas são dois amigos multiperitos que gostam muito de jogos. Sabendo que vários de seus amigos anseiam por uma viagem a Phuket, na Tailândia, Andréh e Andréas querem desafiar

seus amigos em um tradicional jogo tailandês, o Kem Kradãn.

Kem Kradãn (เกมกระดาน) é um jogo de tabuleiro tailandês existente desde o século II a.C. As peças do jogo são N moedas em que uma das faces é dourada e a outra é branca. Inicialmente as moedas são dispostas em linha sobre o tabuleiro e numeradas de 1 a N, da esquerda para a direita.

Quando uma moeda de número i está com a face dourada exposta, ela pode ser retirada da mesa. Ao fazê-lo, as moedas de números i-1 e i+1, caso existam e ainda estejam no tabuleiro, são revertidas. Isto é, se estavam com a face dourada exposta, passam a ficar com a face branca exposta e vice-versa. O jogo consiste em tentar remover todas as moedas da mesa.

Antes de desafiar seus amigos, Andréh e Andréas querem ter certeza que as configurações escolhidas para o desafio têm solução. Para ajudá-los, dada uma configuração inicial, você deve determinar se é possível remover todas as moedas e, se possível, mostrar como fazer isso.";"A primeira linha da entrada contém um inteiro T indicando o número de instâncias.

Cada instância é dada por um inteiro N (0 ≤ N ≤ 105), representando o número de moedas, seguido por uma cadeia de comprimento N, formada pelos caracteres 'B' (face branca exposta) e 'D' (face dourada exposta), representando uma configuração inicial.";Para cada instância, imprima em uma linha Y se for possível remover todas as moedas, ou N caso contrário. Se for possível remover todas as moedas, a linha seguinte deve conter uma lista de N inteiros separados por espaços, cada qual representando o número de uma moeda, indicando a sequência em que elas devem ser removidas. Caso haja mais de uma sequência possível, imprima a lexicograficamente menor.;False;6 / 10;321;161;50.16%
1892;Calouro Vence Veterano?;Paradigmas;9;Professor Denis está curioso para saber se a classificação final de seus N alunos de programação competitiva segue a ordem de matrícula na universidade. Ele pediu a sua ajuda para, dada a classificação final, contar quantos pares (i, j) existem tais que i < j e m[i] > m[j], onde 1 ≤ i,j ≤ N e m[i] significa a matrícula do aluno que ficou em i-ésimo lugar.;"A entrada contém vários casos de teste.

A primeira linha de um caso de teste contém um único inteiro N, que representa o número de alunos, onde 1 ≤ N ≤ 105.

As próximas N linhas são a classificação final dos alunos. Cada linha contém uma cadeia de exatamente 10 caracteres.";Para cada caso de teste, imprima uma única linha com o número pedido na especificação.;False;9 / 10;1370;184;13.43%
1893;Fases da Lua;Ad-Hoc;3;"Jade ganhou de presente de aniversário um telescópio e ficou muito feliz, pois adora olhar a lua à noite. Ela sempre foi uma estudante muito boa, e só analizando a lua por duas noites seguidas, já consegue identificar as mudanças que ocorreram na iluminação e o percentual aproximado da lua que está iluminada.

				

				Você, que é amigo da Jade e estuda Computação, resolveu fazer um pequeno programa que, baseado nesta avaliação que ela fez nas duas últimas noites, informa a fase na qual a lua se encontra. Se a porção visível da lua no momento estiver entre 0 e 2%, por exemplo, é lua nova, se for entre 3 e 96% é lua crescente, se for entre 97 e 100% é lua cheia e se for entre 96 e 3% (diminuindo) é lua minguante.";A entrada é composta por uma única linha contendo dois valores inteiros. O primeiro valor corresponde ao percentual observado por Jade na noite de dois dias atrás. O segundo valor corresponde ao percentual observado por jade na noite anterior.;Baseado nos dois percentuais observados por Jade, imprima na tela a fase na qual a lua se encontrava na noite anterior, conforme o exemplo abaixo. Não esqueça de imprimir o caractere de fim de linha após a saída :).;True;3 / 10;5468;2220;40.60%
1894;Filogenia;Grafos;10;"Bino é um naturalista, e viajou para o planeta Binox com o objetivo de estudar a filogenia dos seres desse planeta. Bino conseguiu desenhar as árvores filogenéticas dos seres do planeta Binox, porém ele precisa da sua ajuda para determinar a menor quantidade possível de mudanças evolutivas que ocorreram entre os decendentes diretos na árvore.

					Computacionalmente, as árvores filogenéticas são representadas por árvores binárias, em que suas folhas representam indivíduos conhecidos e seus nós internos e a raiz representam ancestrais hipotéticos, que geralmente não se possui informações genéticas precisas sobre. Com isso, Bino vai fornecer uma topologia de árvore e o código genético dos indivíduos representados pelas folhas. O código genético dos seres de Binox é representado por uma sequência de letras minúsculas do alfabeto.

					Como Bino irá fornecer apenas os códigos genéticos dos indivíduos representados pelas folhas, a sua tarefa será inferir os códigos genéticos dos indivíduos representados pelos outros nós. Sua inferência terá que minimizar a quantidade de mudanças entre os códigos dos indivíduos diretamente ligados na árvore. As figuras a seguir apresentam a configuração inicial e duas possíveis configurações finais para a árvore do primeiro caso de teste:

					

					Para calcular o custo total da árvore depois de inferida, basta comparar todas as posições do código genético de indivíduos ligados diretamente. Para cada diferença encontrada, o custo é incrementado em um. Por exemplo, para a árvore resposta do primeiro caso de teste:


	    Custo inicia em 0
	    Ligação entre 1 (""ac"") e 4 (""aa""): 'c' ≠ 'a' (Custo + 1).
	    Ligação entre 2 (""ba"") e 4 (""aa""): 'b' ≠ 'a' (Custo + 1).
	    Ligação entre 3 (""ab"") e 5 (""aa""): 'b' ≠ 'a' (Custo + 1).
	    Ligação entre 4 (""aa"") e 5 (""aa""): ""aa"" = ""aa"".
	    Custo total 3.


As duas árvores inferidas tem custo total 3. Porém, Bino quer a árvore com menor custo possível e que a raiz tenha o menor valor lexicográfico possível para esse custo. Logo, Bino escolherá a árvore com raiz de código ""aa"".

É garantido que todos as indivíduos folhas não tenham filhos e que todos os demais tenham exatamente dois filhos.";A entrada consiste de múltiplas linhas. A primeira linha contém 2 inteiros N (3 ≤ N ≤ 10000) e L (1 ≤ L ≤ 1000), representando o número de espécies e o comprimento dos códigos. As próximas N linhas contêm as sequências genéticas dos indivíduos das folhas (1, ..., N). As próximas (N-1)*2 linhas contêm dois inteiros A (1 ≤ A ≤ (N*2)-1) e B (1 ≤ B ≤ (N*2)-1) representando que existe uma ligação entre o individuo de índice A e o individuo de índice B.;A saída esperada consiste em duas linhas. A primeira linha contém o custo mínimo da árvore. A segunda linha contém a sequência genética do indivíduo de índice (N*2)-1, que sempre é a raiz da árvore.;True;10 / 10;104;21;20.19%
1895;Jogo do Limite;Ad-Hoc;3;"Alice e Bob decidiram jogar um jogo simples para passar o tempo. Este jogo é jogado com um baralho contendo N cartas, numeradas de 1 a N. Uma carta está inicialmente na mesa. Além disso, há uma pilha contendo todas as outras cartas do baralho.

					Alice começa retirando uma carta do topo da pilha. Ela então verifica se a diferença absoluta entre a carta que está atualmente na mesa e a carta retirada da pilha é no máximo um limite L. Em outras palavras, se a carta atualmente na mesa for T e a carta retirada da pilha for S, então ela verifica se |T-S| ≤ L. Se isto for verdade, ela substitui a carta na mesa pela carta removida, e marca |T-S| pontos. Se isto não for verdade, ela não faz nada -- a carta na mesa não é alterada, e ela não marca nenhum ponto.

					Bob então joga fazendo a mesma coisa. Ele remove uma carta da pilha, a compara com a carta atualmente na mesa e age de acordo. Alice então joga novamente, seguida de Bob, seguido novamente de Alice, e assim por diante. Eles continuam jogando até que a pilha de cartas esteja vazia. Sua tarefa é determinar a pontuação final de ambos os jogadores.";A primeira linha contém três inteiros N, T0 e L (1 ≤ N < 60, N é impar, 1 ≤ T0 ≤ N, 1 ≤ L ≤ 10), o número de cartas, a carta inicialmente na mesa, e o limite L. As próximas N-1 linhas contém um inteiro Si cada (1 ≤ Si ≤ N). Estes inteiros descrevem as cartas na pilha, em ordem. A primeira carta dada na entrada é a carta no topo da pilha. Todas as cartas usadas no jogo são distintas.;Imprima uma linha com dois inteiros A e B separados por um espaço, onde A é a pontuação final de Alice, e B é a pontuação final de Bob.;False;3 / 10;1518;865;56.98%
1896;É Hora do Duelo!;Ad-Hoc;6;"Monstros de Duelo é o mais famoso campeonato de cartas do mundo. Cada duelo é disputado por dois jogadores, onde cada jogador começa com 8.000 Pontos de Vida e com o seu Deck (Baralho). Cada carta representa um monstro que tem os atributos de Ataque, Defesa e habilidade. Estamos no duelo final com os dois maiores duelistas da história. De um lado Charlinho, um garoto que gosta muito de estudar, mas que também sabe sentir o coração das cartas. Do outro lado Gilmar, que não foi criado a leite com pêra, mas é reconhecido como o Mestre das Cartas. É a vez de Charlinho, e ele acaba de combinar seus monstros na mesa para obter o proíbido ""Prassódia"". 
					Prassódia é o monstro mais forte do jogo, e quando invocado, a partida é finalizada na hora e o jogador que o invocou ganha o duelo. Para invocar Prassódia é necessário combinar duas ou mais cartas na mesa somando ataque com ataque, defesa com defesa e habilidade com habilidade para obter os atributos de Prassódia informados no início do duelo.
					Se uma carta for escolhida para ser combinada, os atributos da carta tem que ser utilizados por inteiro, sendo inválido apenas utilizar o ataque ou apenas utilizar a defesa ou apenas a habilidade daquela carta e ainda não podendo utilizar apenas uma parte do ataque e/ou uma parte da defesa e/ou uma parte da habilidade. 
					Gilmar se espanta por um momento, pois ele foi o único em toda a história que conseguiu invocar Prassódia, mas acaba duvidando da jogada de Charlinho porque haviam várias cartas na mesa, o que tornaria tal jogada muito suspeita. 
					Você é o Juíz do duelo e ficou responsável por avaliar se o Charlinho realmente conseguiu invocar ou não Prassódia com as cartas na mesa.";A primeira linha da entrada contém 4 inteiros, o primeiro inteiro N ( 1 ≤ N ≤ 20) representa o número de cartas na mesa seguido por 3 inteiros A,D,H (1 ≤ A,D,H, ≤ 1000) que representam respectivamente o ataque, a defesa e a habilidade exata para invocar Prassódia. Cada uma das N linhas seguintes representam uma carta da mesa, onde cada linha contém os atributos na ordem X,Y,Z (1 ≤ X,Y,Z ≤ 50) ataque, defesa e habilidade respectivamente.;"A saída deverá conter ""Y"" caso Charlinho consiga realizar uma combinação válida para invocar Prassódia ou ""N"" caso contrário.";False;6 / 10;1071;434;40.52%
1897;Jogo Esperto;Estruturas e Bibliotecas;8;"Enquanto Bino descansava, inventou um jogo esperto. Dado um número N e um número M, Bino quer saber qual a quantidade mínima de operações para converter N em M.

Existe seis operações permitidas.


	Operação 1: N = N*2
	Operação 2: N = N*3
	Operação 3: N = N/2
	Operação 4: N = N/3
	Operação 5: N = N+7
	Operação 6: N = N-7";A entrada contém dois inteiros N ( 0 ≤ N ≤ 10000) e M ( 0 ≤ M ≤ 10000).;A saída é o número mínimo de operações para converter N em M.;False;8 / 10;2946;735;24.95%
1898;Soma de Propina;Strings;8;"A agência gaúcha para investigações criminais denominada OBI (Operação de Baita Investigação) notou que, a exemplo do que ocorreu na Petrobrás, muito dinheiro foi desviado dos cofres públicos do estado para pagamento de propina a políticos nos últimos anos, especialmente pelo partido QU (Quadrilha Unida).

					A investigação está em andamento e a agência recrutou você para converter alguns valores que ficaram com caracteres estranhos após terem sidos descriptografados dos arquivos originais. Sua tarefa neste caso é relativamente simples: basta retirar todos os caracteres estranhos (não numéricos) de cada um dos dois valores disponíveis e somar estes valores. Apenas tome o cuidado de separar da soma os primeiros 11 dígitos do primeiro valor. Eles correspondem ao CPF do corrupto :)";"A entrada é composta por duas linhas, cada uma delas contendo entre 1 e 60 caracteres ('0'-'9' e outros caracteres não numéricos ou, pelo menos, 1 caracter '0'-'9') e no máximo um ponto ""."". Desconsiderando os caracteres não numéricos, o número final não deve ter mais de 17 caracteres (incluindo o ponto decimal). Qualquer número após a segunda casa decimal deve ser descartado.";Imprima o CPF do corrupto, conforme apresentado abaixo e soma dos valores que foram desviados dos cofres públicos, sempre com duas casas decimais.;False;8 / 10;2515;630;25.05%
1899;Acerte o Alvo!;Ad-Hoc;8;"""Acerte o Alvo!"" é um jogo muito popular na Nlogônia.  As regras do jogo são muito simples. Há uma bola no chão. Além disso, existe uma parede a DT metros de distância da bola, a qual contém um alvo. O alvo começa a AT metros do chão, e termina a BT metros do chão (logo, o comprimento do alvo é de BT-AT metros).

Você deve chutar a bola em alguma direção. A bola irá seguir uma linha reta na direção em que for chutada. O objetivo do jogo é chutar a bola em uma direção tal que ela acerte qualquer ponto do alvo.

Entretanto, há também N paredes entre a bola e o alvo. A parede i (1 ≤ i ≤ N) está a Di metros de distância da bola. Existe apenas uma abertura em cada parede. A parede i tem uma abertura começando a Ai metros do chão e terminando a Bi metros do chão.

Naturalmente, a bola deve passar por todas as aberturas e acertar o alvo. No caso da bola passar exatamente em um ponto no qual uma abertura começa ou termina (isto é, a Ai ou Bi metros do chão), considere que a bola passa pela abertura com sucesso.

Dependendo das posições das paredes e das aberturas, pode não haver uma maneira de acertar o alvo. Sua tarefa é determinar se é possível acertar o alvo ou não.

A imagem a seguir mostra o primeiro exemplo de entrada e uma rota possível para a bola, provando que é possível acertar o alvo neste caso.";A primeira linha contém o inteiro N (0 ≤ N ≤ 1000). As próximas N linhas contém três inteiros cada, descrevendo as paredes. A linha i (1 ≤ i ≤ N) contém os inteiros Di, Ai e Bi (1 ≤ Di ≤ 104, 1 ≤ Ai < Bi ≤ 104). A última linha contém três inteiros DT, AT e BT (1 ≤ DT ≤ 104, 1 ≤ AT < BT ≤ 104). Você pode assumir que D1 < D2 < ... < DN < DT.;Imprima uma única linha contendo Y se é possível acertar o alvo, ou N caso contrário.;True;8 / 10;1277;273;21.38%
1900;Sequências Nulas;Paradigmas;7;"Chico ganhou de aniversário uma lista de números inteiros e chamou seu amigo Mário para brincar com ele. A brincadeira é a seguinte: ""Chico vai escolher N números da lista e vai colocá-los em uma sequência aleatória, e o Mário terá que dizer se existe pelo menos uma Sequência Nula nesta nova sequência."". Vamos chamar de uma Sequência Nula, uma sequência contígua de inteiros onde a soma de todos os elementos é igual a zero.

					Dada a sequência do primeiro caso de teste: (-2,-1,0,1,2).

					Exemplo de Sequências Nulas: (-2,-1,0,1,2), (-1,0,1), (0).

					Exemplo de Sequências Não Nulas: (-1,1), (-2,0,2), (1).

					Chico está furioso por que Mário está ganhando toda hora, então ele resolveu dificultar o jogo. Agora ele não terá que dizer se existe ou não uma Sequência Nula, mas dizer quantas sequências na lista são Sequências Nulas. Agora quem está ficando furioso é o Mário e você tem que ajudá-lo sem que o Chico perceba.";A primeira linha do caso de teste contém um inteiro N (1 ≤ N ≤ 105) que representa a quantidade dos números escolhidos por Chico. Na segunda linha do caso de teste contém os N inteiros Vi (-106 ≤ Vi ≤ 106) separados por espaços representando os elementos da sequência.;Para cada caso de teste imprima o número de Sequências Nulas na sequência dada.;False;7 / 10;652;225;34.51%
1901;Borboletas;Ad-Hoc;2;"As florestas do planeta Binox possuem várias espécies raras de borboletas. Bino também é um caçador de borboletas, e quer coletar o máximo de espécies diferentes de borboletas. A floresta de Binox é representada por um grid quadrado de tamanho NxN, e cada célula 1x1 do grid pode conter uma borboleta. A imagem a seguir representa o primeiro exemplo de entrada. As espécies coletadas foram: 1, 2, 3, 4 e 8.

					

					Sua tarefa é determinar a quantidade de espécies de borboletas que Bino conseguirá coletar, conhecendo o mapa da floresta e todos os locais que Bino procurou por borboletas. Por algum motivo desconhecido, Bino sempre procura em 2*N posições da floresta.";A entrada é contituida por multiplas linhas. A primeira linha contém um inteiro N (0 < N ≤ 200) representando o tamanho da floresta. As próximas N linhas contém N inteiros Kij (0 < Kij ≤ 1000) cada, representando qual espécie de borboleta presente em cada célula. As próximas N*2 linhas contém 2 inteiros cada, representando as células visitadas por Bino.;Imprima uma linha contendo a quantidade de espécies diferentes que Bino coletou.;True;2 / 10;2340;1250;53.42%
1902;Sociedade Brasileira Casamenteira;Grafos;6;"A Sociedade Brasileira Casamenteira (SBC) perguntou a todas as pessoas solteiras do país se estavam apaixonadas e por quem estavam apaixonadas. Curiosamente, cada pessoa solteira respondeu que estava apaixonada por exatamente uma outra pessoa, mas que tinha vergonha de declarar seus sentimentos. Dispondo agora dessas informações, a SBC deseja formar casamentos, para que as pessoas vivam mais felizes. Se uma pessoa A1 é apaixonada por uma pessoa A2 e a pessoa A2 também é apaixonada pela pessoa A1, é claro que a SBC pode formar o casamento {A1, A2}. Contudo, se A1 é apaixonada por A2, mas A2 é apaixonada por A3, que é apaixonada por A4… que é apaixonada por Ak, sendo que Ak é apaixonada por A1, também é possível formar o casamento {A1, A2, …, Ak}, já que, recentemente, foi aprovado o casamento poligâmico no Brasil. Mais formalmente, a SBC pode formar o casamento {A1, …, Ak} se e somente se k ≥ 2, a pessoa Ak é apaixonada pela pessoa A1 e, para todo i ∈ {2, …, k}, a pessoa Ai - 1 é apaixonada pela pessoa Ai.

					Ajude a SBC a formar o maior número possível de casamentos.";A entrada é composta por no máximo 105 linhas e finalizada por fim de arquivo. Cada linha da entrada consiste dos nomes de duas pessoas A e B, indicando que a pessoa A é apaixonada pela pessoa B. Cada nome de pessoa é uma cadeia de no mínimo 1 e no máximo 10 letras do alfabeto latino, sem diacríticos.;Seu programa deve imprimir numa linha um único inteiro, representando o maior número de casamentos que é possível a SBC formar.;False;6 / 10;644;263;40.84%
1903;Cadeia Alimentar;Grafos;10;"Na viagem de Bino, ele desenhou algumas cadeias alimentares dos seres de Binox. Porém ele notou que em algumas cadeias, todos os pares de espécies se relacionavam (diretamente ou indiretamente). Ele denominou essas cadeias de Cadeias Boladas.

					Representando a cadeia alimentar como um grafo, todos os pares de espécies (u, v) se relacionam se existe um caminho de u para v OU um caminho de v para u.

					

					Dado uma cadeia alimentar, Bino quer saber se ela é uma Cadeia Bolada ou não.";A entrada consiste em múltiplas linhas. A primeira linha contém dois inteiros N (1 ≤ N ≤ 100000) e M (1 ≤ M ≤ 1000000), representando a quantidade de espécies e o número de relações respectivamente. As próximas M linhas contêm dois inteiros U (1 ≤ U ≤ N) e V (1 ≤ V ≤ N), representando que existe uma relação unidirecional entre U e V.;"Imprima uma linha com a mensagem ""Bolada"" (sem aspas) se a cadeia for uma Cadeia Bolada, ou ""Nao Bolada"" caso contrário.";True;10 / 10;1034;178;17.21%
1904;Par ou Ímpar 2.0;Matemática;9;"Alice e Bob são dois amigos que moram no planeta Terra 2.0, construído após a destruição do planeta Terra 1.0 pelos Vogons. Em Terra 2.0, tudo é melhorado. Os seres humanos, por exemplo, não possuem 10 dedos nas mãos, mas 10 milhões: 5 milhões em cada mão. O tradicional jogo ‘Par ou Ímpar’, muito jogado em Terra 1.0, também foi bastante melhorado. Alice e Bob jogam ‘Par ou Ímpar 2.0’ o tempo todo. Nesta versão do jogo, os jogadores devem ao mesmo tempo exibir usando as mãos um número inteiro entre 0 e 10 milhões. Se os números exibidos pelos dois jogadores forem iguais, configura-se empate. Senão, os jogadores se alternam escrevendo números num pedaço de papel. Sendo A o inteiro exibido por Alice no início da partida e B o inteiro exibido por Bob, cada número escrito no papel deve ser um produto de |A - B| fatores, sendo todos os fatores números primos, não necessariamente distintos, pertencentes ao intervalo definido pelos inteiros A e B. Além disso, não é permitido que um mesmo número seja escrito no papel mais de uma vez. Perde o jogador que, em sua vez de jogar, não for capaz de escrever no papel um número novo. Como Bob é um cavalheiro, Alice é sempre a primeira a jogar. Note que se não há primos no intervalo definido pelos inteiros A e B, Alice não consegue escrever número algum no papel na sua primeira jogada, e Bob vence a partida.

Por exemplo, se A = 5 e B = 2, há somente 10 números que podem ser escritos no papel, os quais são:

8 = 2 × 2 × 2
12 = 2 × 2 × 3
20 = 2 × 2 × 5
18 = 2 × 3 × 3
30 = 2 × 3 × 5
50 = 2 × 5 × 5
27 = 3 × 3 × 3
45 = 3 × 3 × 5
75 = 3 × 5 × 5
125 = 5 × 5 × 5

Assim, se tanto Alice quanto Bob jogarem de maneira ótima, Bob vence a partida neste caso.";A entrada consiste de dois inteiros A e B (0 ≤ A, B ≤ 107), os quais representam respectivamente os números exibidos por Alice e Bob no início do jogo, conforme explicado anteriormente.;Seu programa deve imprimir uma única linha contendo unicamente o nome do vencedor da partida, assumindo-se que ambos os jogadores jogam de maneira ótima. Se a partida empata, a linha da saída deverá conter unicamente o símbolo ?.;False;9 / 10;629;133;21.14%
1905;Polícia e Ladrão;Paradigmas;5;"Mario adora convidar seus amigos para brincar em sua casa. Então decidiu convidar seus amigos para brincarem de Polícia e Ladrão. O jogo consiste em dois grupos, um grupo é a polícia e o outro é o grupo dos ladrões. Os ladrões devem se esconder e a polícia deve capturá-los. Caso a polícia consiga capturá-los e prendê-los os ladrões perdem o jogo e caso a polícia não consiga capturá-los os ladrões vencem o jogo.
					Mario decidiu que seria do grupo da polícia e que teria que procurar seus amigos do grupo dos ladrões e capturá-los, porém algum de seus amigos sentiram-se em desvantagens por não possuírem lugares estratégicos para se esconder no seu quintal.

					Portanto decidiram planejar uma forma em que poderiam deixar os policiais sem saída e terem chances de ganhar o jogo. Para isso montaram um labirinto usando caixas de papelão e marcaram como “0” todos os lugares no quintal aonde os policiais poderiam atravessar e como “1” aonde os policiais não poderiam atravessar.
					Os ladrões irão se esconder sempre no último espaço do labirinto, Se os policiais ficarem encurralados no labirinto os ladrões vencem e poderão comemorar a fuga, mas se os policiais alcançarem o ultimo espaço do labirinto os policiais serão os vencedores. Os policiais poderão andar somente nos blocos marcados como 0. Sua tarefa é determinar a partir do labirinto quem vai ganhar o jogo.";"A primeira entrada consiste de um inteiro T(1 ≤ T ≤ 400) indicando o número de casos de testes.

					As próximas T entradas consistem de uma matriz 5x5, composta de valores inteiros, sendo 0 ou 1";"Seu programa deverá imprimir ""COPS"" caso o grupo dos policiais ganhem, e ""ROBBERS"" caso o grupo dos ladrões ganhem.";True;5 / 10;5352;1635;30.55%
1906;Senhas de Collatz;Ad-Hoc;9;"Quando o Prof. Antônio Neri, mais jovem, conheceu a Conjectura de Collatz, ficou muito fascinado. Caso você ainda não conheça a Conjectura de Collatz, ela enuncia que, para qualquer inteiro positivo X, a sequência de Collatz para X eventualmente atinge 1. A propósito, a sequência de Collatz para um inteiro positivo X é definida como a sequência infinita a0, a1, a2… tal que a0 = X e, para todo i > 0, ai = ai-1 / 2 se ai-1 é par ou ai = 3 × ai-1 + 1 se ai-1 é ímpar. Por exemplo, para X = 7, os primeiros 20 termos da sequência de Collatz são:

					7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1, 4, 2, 1…

					A Conjectura de Collatz ainda não foi provada, apesar de existirem vários matemáticos brilhantes neste mundo, como o Prof. Antônio Neri. Ele continua tão fascinado pelo assunto que, noutro dia, ao olhar para o teclado do sistema de alarme da sua casa, o qual contém uma tecla para cada inteiro de 1 a N, ele resolveu trocar sua senha para que a nova senha seja uma sequência de K números que apareçam consecutivamente numa sequência de Collatz. Por exemplo, se N = 20 e K = 5, há 11 possibilidades para a nova senha do Prof. Antônio Neri:

					1, 4, 2, 1, 4

					2, 1, 4, 2, 1

					3, 10, 5, 16, 8

					4, 2, 1, 4, 2

					5, 16, 8, 4, 2

					6, 3, 10, 5, 16

					8, 4, 2, 1, 4

					10, 5, 16, 8, 4

					12, 6, 3, 10, 5

					16, 8, 4, 2, 1

					20, 10, 5, 16, 8";A única linha da entrada consiste de dois inteiros positivos N e K (N, K ≤ 107).;A única linha da saída deve consistir de apenas um único inteiro, representando o número de possibilidades para a nova senha do Prof. Antônio Neri, considerando que o teclado contém uma tecla para cada inteiro de 1 a N e que a nova senha é uma sequência de K números que aparecem consecutivamente numa sequência de Collatz.;False;9 / 10;503;66;13.12%
1907;Coloração de Cenários de Jogos;Grafos;4;O Prof. Fernando Bevilacqua está muito preocupado com os cenários do seu mais novo jogo. Os contornos dos cenários já foram desenhados por um artista, restando ao Prof. Fernando apenas colori-los. No momento, cada cenário é uma imagem em que cada pixel está preto ou branco. Assim, quando o Prof. Fernando, em seu programa de coloração de imagens, clica num pixel branco para ser colorido com uma cor α, toda a região branca em que está o pixel selecionado recebe a cor α. Dizemos que um pixel branco A está na mesma região branca que um pixel branco B se existe um caminho entre A e B que passa apenas por pixels brancos e que considera as adjacências apenas nos sentidos horizontal e vertical. Por exemplo, são necessários 6 cliques para colorir a figura da esquerda.;A primeira linha da entrada consiste de dois inteiros positivos N e M (N, M ≤ 1.024), os quais representam a resolução da imagem. Cada uma das N linhas seguintes contém M caracteres, os quais podem ser . (ponto) ou o (letra ‘o’ minúscula), representando respectivamente um pixel branco ou um pixel preto.;Imprima uma linha contendo um único inteiro que represente o número de cliques necessários para colorir toda a figura descrita na entrada.;True;4 / 10;1762;960;54.48%
1908;UFFS Multicampi;Grafos;8;É o ano de 2.265, e a UFFS (Universidade da Fronteira Final da Sapiência) já conta com 112.345 campi espalhados pela galáxia. Para integrar todos os campi, a UFFS criou várias linhas de transporte coletivo em velocidade de dobra. O itinerário de cada linha L é uma sequência de |L| ≥ 2 campi C1, C2, …, C|L|, e cada linha conta com uma única nave, a qual passa por todos os campi da linha, seguindo a ordem do itinerário, parando em cada um deles e dando meia-volta sempre que atinge um extremo do itinerário, revertendo a ordem dos campi no itinerário. O passe do transporte custa Ƀ1 (1 bitcoin, a unidade monetária que se tornou a moeda oficial da galáxia graças aos trabalhos do Prof. Emílio Wuergues no início do séc. XXI), e deve ser pago pelo passageiro ao embarcar na nave, independente do tempo que passará nela. Deste modo, o menor custo para ir do campus A ao campus B considerando as linhas hipotéticas da figura abaixo é de Ƀ2.;A primeira linha da entrada consiste de dois inteiros N e K (2 ≤ N ≤ 104, 1 ≤ K ≤ 103), os quais representam respectivamente o número de campi e o número de linhas de transporte coletivo criadas pela UFFS. Cada uma das K linhas de entrada seguintes descreve uma linha de transporte L e consiste do inteiro |L| (2 ≤ |L| ≤ 102) seguido pelos |L| identificadores Ci (1 ≤ Ci ≤ N, 1 ≤ i ≤ |L|) dos campi pelos quais a nave passa, sendo C1 e C|L| os extremos de L. Para todo campus A e todo campus B é garantido que é possível ir de A a B usando o sistema de transporte coletivo da UFFS.;Imprima o menor custo para ir do campus 1 ao campus N.;True;8 / 10;791;197;24.91%
1909;Ajude Kiko;Matemática;8;"Depois de tanto pedir uma bola quadrada à sua mãe, Kiko não ganhou apenas uma, mas sim várias bolas de aniversário! A diversão de Kiko é soltar várias bolas de uma vez no chão e ficar observando elas quicarem. Como as bolas possuem tamanho, peso e são feitas de matérias diferentes, o tempo de quique de uma para outra é variável. Nesse problema iremos supor que toda bola quica infinitamente de acordo com seu tempo de quique.

					Kiko soltou ao mesmo tempo N bolas e percebeu que dependendo das bolas que solta, em alguns instantes, todas as bolas quicam ao mesmo tempo, e ele achou isso genial!

					Dado o tempo de quique em segundos das N bolas que Kiko escolheu e um tempo T, que é o segundo que Kiko deseja que todas as bolas quiquem ao mesmo tempo, sua tarefa é escolher o menor tempo de quique de mais uma bola para que todas as N+1 bolas, quando forem soltas juntas, quiquem todas ao mesmo tempo pela primeira vez exatamente no segundo T.

					Obs: O tempo de quique que irá escolher, não pode ser igual ao de nenhum previamente escolhido por Kiko e deverá ser maior que 1.

					Tempo de quique é a diferença dos tempos que a bola encosta no chão por duas vezes consecutivas. Se uma bola tem tempo de quique = 4, iremos considerar que ela quicará nos segundos 4, 8, 12, 16...";"Haverá diversos casos de testes. A primeira linha de cada caso inicia com dois inteiros N (1 ≤ N ≤ 100) e T (1 ≤ T ≤ 105) representando a quantidade de bolas que Kiko tem em mãos e o segundo que Kiko deseja ver as N+1 bolas quicando juntas. Na próxima linha, N inteiros no intervalo [1, T] seguem representando o tempo de quique de cada uma das bolas.  

					A entrada termina com N = T = 0, a qual não deve ser processada.";Para cada caso, exiba o tempo de quique da bola escolhida por você, ou “impossivel” caso não exista uma bola que irá satisfazer o desejo de Kiko.;False;8 / 10;1858;406;21.85%
1910;Ajude Clotilde;Grafos;8;"Clotilde ama assistir novelas, porém o controle da sua televisão não é nada convencional. Ele possui apenas seis botões, o botão liga/desliga e cinco botões para mudar de canal.

					Os botões de mudança de canal funcionam da seguinte maneira: +1 (avança um canal), -1(volta um canal), x2(vai para o dobro do canal atual), x3(vai para o triplo do canal atual) e /2(vai para a metade do canal atual, esse botão só funciona se o canal atual for par).

					

					Eis o famoso controle de Clotilde.

					Os vizinhos de Clotilde costumam visitar sua casa nos finais de semana, assistem televisão e não voltam ao canal de sua novela, assim fazendo com que Clotilde perca muito tempo tentando achar o canal de seu interesse novamente.

					Sua tarefa é, dado o número do canal atual e o número do canal de interesse de Clotilde, você deve calcular a menor quantidade de cliques nos botões necessária para sair de um e chegar no outro. Lembrando que como Clotilde é uma pessoa séria, ela não gosta de passar por alguns canais específicos, mesmo que tenha que apertar mais botões para chegar no canal destino. Outra restrição é, não existe canal menor igual a 0 ou maior que 105. Ex: Se está no canal 55000, você não pode apertar o botão x2 nem o x3.";"Haverá diversos casos de testes. Cada caso inicia com três inteiros, O, D e K (1 ≤ O, D ≤ 105, 0 ≤ K ≤ 100), representando, respectivamente, o canal de origem, destino, e a quantidade de canais que Clotilde não quer passar. A segunda linha conterá os K canais proibidos por Clotilde. É garantido que o canal de origem e destino nunca serão proibidos.

					A entrada termina com O = D = K = 0, a qual não deve ser processada.";Para cada caso, exiba uma única linha, a menor quantidade de cliques nos botões necessária para ir do canal de origem ao destino ou -1 caso seja impossível chegar ao canal de destino devido as restrições de Clotilde.;True;8 / 10;3175;782;24.63%
1911;Ajude Girafales;Estruturas e Bibliotecas;3;Minutos antes do término das aulas, professor Girafales passa uma lista de presença. Certo dia, ele resolveu conferir as assinaturas e notou que alguns alunos assinavam diferente em algumas aulas e desconfiou que alguém poderia estar assinando por eles. Como o professor possui muitos alunos e pouco tempo (o café com dona Florinda é prioridade), ele pediu sua ajuda para validar as assinaturas. Uma assinatura é considerada falsa se houver mais de uma diferença entre a original e a que estiver sendo checada. Considere diferença uma troca de maiúscula para minúscula ou o contrário.;"Haverá diversos casos de testes. A primeira linha de cada caso inicia com um inteiros N (1 ≤ N ≤ 50) representando a quantidade de alunos de sua turma. As próximas N linhas serão da seguinte forma:

					                                                        Nome do aluno   Assinatura Original

					A seguir haverá um inteiro M (0 ≤ M ≤ N), representando a quantidade de alunos que compareceram a uma aula. M linhas seguem, no seguinte formato:

					                                                        Nome do aluno   Assinatura na aula

					Todos os alunos possuem apenas o primeiro nome na lista, nenhum nome se repete e todos os nomes contêm no máximo 20 letras (a-z A-Z).

					A entrada termina com N = 0, a qual não deve ser processada.";Para cada caso, exiba uma única linha, a quantidade de assinaturas falsas encontradas.;False;3 / 10;2434;1150;47.25%
1912;Ajude Seu Madruga;Paradigmas;7;"Seu Madruga finalmente arrumou um emprego, é sua grande chance de pagar os 14 meses de aluguel que estão atrasados. Seu cargo é o de cortador de papel e o salário é excelente.

					Madruga irá receber N tiras retangulares de papel com 1 cm de largura e C cm de comprimento. As tiras devem ser colocadas uma ao lado da outra de forma que suas bases estejam alinhadas. A tarefa de seu Madruga será, com apenas um corte em linha reta, paralelo à base, fazer com que a soma das áreas das tiras cortadas seja igual a A cm².

					Veja a ilustração abaixo com N = 5 e as tiras com 5, 3, 6, 2 e 3 cm de comprimento, respectivamente, para um A = 3 cm².

					

					Com um corte feito a uma altura de 4 cm em relação a base, a área resultante, pintada de vermelho, é exatamente igual a A cm². Sua tarefa é descobrir essa altura H e ajudar Seu Madruga a se manter no emprego.";"Haverá diversos casos de testes. A primeira linha de cada caso inicia com dois inteiros N (1 ≤ N ≤ 105) e A (1 ≤ A ≤ 109) representando, respectivamente, a quantidade de tiras e a área resultante esperada. A próxima linha conterá N inteiros, representando o comprimento Ci (1 <= Ci <= 104) de cada tira.

					A entrada termina com N = A = 0, a qual não deve ser processada.";"Para cada caso, exiba uma única linha, a altura H do corte que Seu Madruga deve fazer para que a soma da área das tiras cortadas seja igual a A cm². Use 4 casas decimais após o ponto.

					Exiba “:D”, caso nenhum corte seja necessário, ou  “-.-“ caso seja impossível.";True;7 / 10;6726;1388;20.64%
1913;Ajude o Sr. Barriga;Paradigmas;8;"Nhonho, filho do Sr. Barriga está participando de uma brincadeira nova criada pelas crianças da vila bastante conhecida por “Torre de cilindros”. A brincadeira consiste em construir a maior torre composta por cilindros, respeitando todas as regras, claro! Logo abaixo está descrito o funcionamento da brincadeira.

					
						
						Será disposta em uma mesa, uma quantidade N de cilindros.
						
						
						Cada cilindro possui uma cor, que pode ser: Vermelho, laranja, verde ou azul.
						
						
						Cada cilindro possui uma altura h, e uma base com um raio de tamanho r.
						
						
						Para a construção da torre, os cilindros deverão ser empilhados, sendo que o cilindro do topo deverá sempre ter a base menor que a do cilindro logo abaixo dele. Exceto o primeiro cilindro, que poderá ter a base de qualquer tamanho, já que não existe nenhum outro cilindro abaixo dele.
						
						
						Existem também algumas restrições bem interessantes quanto às cores dos cilindros. Elas estão descritas abaixo:

						
							
							Um cilindro vermelho nunca pode ser colocado sobre um cilindro laranja.
							
							
							Um cilindro laranja nunca pode ser colocado sobre um cilindro azul.
							
							
							Um cilindro azul nunca pode ser colocado sobre um cilindro verde.
							
							
							Um cilindro verde nunca pode ser colocado sobre um cilindro vermelho.
							
						
						
					

					Cansado de ver o seu filho reclamar de perder sempre e consequentemente de ouvir a frase

					“Olha ele hein! Olha ele hein! Olha ele...” repetidas vezes, Sr. Barriga quer dar uma pequena dica para Nhonho, informando a maior altura que é possível ser construída dado a lista com as características dos cilindros disponíveis para construção da torre. Porém, apesar de ser bom em matemática e cobrar o preço do aluguel corretamente, Sr. Barriga não conseguiu calcular a altura máxima que a torre pode ter, devido a grande quantidade de cilindros disponíveis. Então ele contratou você para escrever um programa capaz de informar esse valor.

					Para lhe ajudar a entender melhor o problema, Sr. Barriga lhe demonstrou através de um desenho a altura da maior torre possível de ser construída com cinco peças, seguindo todas as regras da brincadeira. Logo abaixo você pode consultar o desenho do Sr. Barriga.";"A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 10³ ), que representa a quantidade de cilindros dispostos sobre a mesa, seguem N linhas, cada linha contendo a altura h (1 ≤ h ≤ 1000) do cilindro em centimetros, o raio r (1 ≤ r ≤ 1000) da base do cilindro e uma palavra p representando a cor do cilindro. A palavra pode ser: VERMELHO, LARANJA, VERDE ou AZUL.

					O fim da entrada é indicado quando N == 0, a qual não deverá ser processada.";Para cada caso de teste, seu programa deverá imprimir uma única linha com o valor da altura da maior torre de cilindros que pode ser construída, seguido da palavra “centimetro(s)”.;True;8 / 10;391;133;34.02%
1914;De Quem é a Vez?;Iniciante;2;Amarelinha provavelmente é a brincadeira em que as crianças da vila mais se divertem, porém a mesma vem causando um bom tempo de discussão e choro nas crianças que a praticam. A causa do transtorno é para decidir quem será o próximo a pular, mas recentemente Quico (O gênio!) teve uma grande ideia para solucionar o problema. Basicamente a brincadeira só poderá ser jogada de dois em dois jogadores e para escolher o próximo jogador Quico indicou o uso do tradicional método par ou ímpar, onde os dois jogadores informam um número e se a soma desses números for par o jogador que escolheu PAR ganha ou vice verso. Entretanto a utilização desse método vem deixando o Quico louco, louco, louco... E por esse motivo ele pediu a sua ajuda! Solicitou a você um programa que dado o nome dos jogadores, suas respectivas escolhas PAR ou IMPAR e os números, informe quem foi o vencedor.;A primeira linha de entrada contém um número inteiro QT (1 ≤ QT ≤ 100), indicando a quantidade de casos de teste que vem a seguir. Cada caso de teste contém duas linhas. Na primeira linha será informado o nome do jogador 1 seguido de sua escolha, “PAR” ou “IMPAR” e logo após, o nome do jogador 2 seguido de sua escolha, “PAR” ou “IMPAR”. Na segunda linha de entrada, contém 2 números inteiros N (1 ≤ N ≤ 10⁹) e M (1 ≤ M ≤ 10⁹), representando respectivamente os números escolhidos pelo jogador 1 e pelo jogador 2. É garantido que a escolha (PAR ou IMPAR) do jogador 1 será diferente da escolha (PAR ou IMPAR) do jogador 2 e que o nome dos jogares são formados somente por letras e não ultrapassarão 100 caracteres.;Para cada caso de teste, imprima uma única linha contendo o nome do jogador vencedor.;False;2 / 10;10446;6086;58.26%
1915;Ajude Chaves;Grafos;9;"Uma das coisas que a turma da vila mais faz é brincar, porém na maioria das vezes a brincadeira termina em confusão, pois Chaves sempre fica sem nenhum brinquedo. Para tentar evitar as confusões e poderem se divertir em paz o dia todo, Chaves deu a ideia de cada um pegar apenas um brinquedo e ficar o dia todo com ele. O processo para a escolha dos brinquedos é um tanto quanto diferente e será explicado abaixo.

					Dado os nomes dos N amigos da vila e M diferentes brinquedos, cada nome/brinquedo será criptografado em uma sequência de números, de acordo com a tabela a seguir:

					

					Os valores da tabela acima só serão válidos para a primeira aparição de cada letra, se uma letra aparecer pela segunda vez, seu valor será o valor original + 26. Se a mesma letra aparecer pela terceira vez, seu valor será o valor original + 26 + 26 e assim por diante. Ex: O nome KIKO será criptografado na seguinte sequência: 11 9 37 15.

					Agora vem a parte necessária para a escolha dos brinquedos, uma pessoa X só irá desejar ficar com um brinquedo Y, se a soma da quantidade mínima de números necessários de serem retirados de suas sequências para que elas se tornem iguais for um múltiplo de cinco.

					Veja o exemplo:

					CHAVES = 3 8 1 22 5 19 - Retirando os números 3, 8, 22 e 19, sobrará a sequência 1 5.

					PATINETE = 16 1 20 9 14 5 46 31 - Retirando os números 16, 20, 9, 14, 46 e 31, sobrará a mesma sequência 1 5.

					Ou seja, foi necessário retirar 4 + 6 = 10 números, logo Chaves deseja brincar com o Patinete, pois 10 é um múltiplo de 5.

					Dado o nome dos N amigos e M brinquedos, você deverá maximizar o percentual de amigos que ficarão com um brinquedo.";Haverá diversos casos de testes. A primeira linha de cada caso inicia com dois inteiros N e M (1 ≤ N, M ≤ 100) representando a quantidade de amigos da vila e a quantidade de brinquedos. N linhas seguem, cada uma contendo o nome de um amigo, o tamanho do nome nunca ultrapassará 100 caracteres [A-Z]. Após isso, M linhas seguem contendo cada o nome de um brinquedo, o tamanho do nome de um brinquedo nunca ultrapassará 100 caracteres [A-Z]. A entrada termina com N = M = 0, a qual não deve ser processada.;Para cada caso de teste exiba, com duas casas após o ponto, o percentual máximo de amigos da vila que ficarão com um brinquedo. Veja a formatação de saída.;True;9 / 10;385;122;31.69%
1916;Banco de Horas de Jaiminho;Ad-Hoc;5;"A empresa em que o carteiro Jaiminho trabalha tem uma política de banco de horas bem interessante. Toda vez que um funcionário inicia suas atividades ele deve registrar a sua chegada na ""máquina de ponto"" recebendo um pequeno comprovante, da mesma forma que toda vez que o funcionário finaliza suas atividades ele também deve registrar o término. A maioria dos funcionários nunca teve a curiosidade de saber como a ""máquina do ponto"" processa a quantidade de horas trabalhadas, mas Jaiminho além de ser um excelente funcionário é bastante curioso.

					Ao registrar a sua digital (no primeiro dia de trabalho) Jaiminho foi informado por uma senhora que trabalha no departamento de Recursos Humanos que existe uma tolerância de 5 minutos tanto na entrada como na saída. A jornada de trabalho de Jaiminho consiste em dois períodos, das 08:00 hrs às 12:00 hrs e das 14:00 hrs às 18:00 hrs (contabilizando 8 horas trabalhadas por dia), sendo assim, se ele chegar às 07:55 hrs e sair às 12:03 hrs, a “máquina do ponto” perceberá que ele respeitou a tolerância e não registrará nenhum minuto a mais ou a menos no banco de horas de Jaiminho, porém se na segunda parte do seu expediente, ele registrar a sua entrada às 13:54 hrs e sua saída às 18:02 hrs, a máquina perceberá que ele abusou da tolerância e então adicionará 6 minutos extras no seu banco de horas.

					Como Jaiminho é um funcionário dedicado e sempre tenta evitar a fadiga, ele montou uma planilha com o registro (horário de entrada e saída) de todos os dias trabalhados, mas infelizmente ele não é um programador e precisa de sua ajuda para simular o banco de horas da empresa em que ele trabalha.";"A primeira linha de entrada contém um único inteiro QT (1 ≤ QT ≤ 100) indicando a quantidade de casos de teste que vem a seguir. Cada caso de teste inicia com uma linha contendo um único inteiro N (1 ≤ N ≤ 10³) que representa a quantidade de registros na planilha de Jaiminho, seguem N linhas, cada linha contendo a descrição dos horários de entrada e saída no seguinte formato ""A1:B1 A2:B2 | C1:D1 C2:D2"", onde A1 e B1 representam respectivamente as horas e os minutos de entrada do primeiro período de trabalho no dia, A2 e B2 representam respectivamente as horas e os minutos de saída do primeiro período de trabalho do dia, C1 e D1 representam respectivamente as horas e os minutos de entrada do segundo período de trabalho do dia e C2 e D2 representam respectivamente as horas e os minutos de saída do segundo período de trabalho no dia. Jaiminho garante que nunca dormiu no trabalho, que (A1:B1 ≤ A2:B2 && C1:D1 ≤ C2:D2) e que as horas e os minutos no seu banco de horas nunca ultrapassarão 2 dígitos. Lembre-se, 1 dia tem 24 horas e 1 hora tem 60 minutos.";"Para cada caso de teste, seu programa deverá imprimir uma linha com a quantidade de horas e minutos que atualmente estão registradas no banco de horas simulado para Jaiminho no seguinte formato: ""S HH:MM"", onde S pode ser o sinal ""-"", representando horas negativas no banco, ou sinal ""+"" representando horas positivas no banco, HH representa a quantidade de horas e MM representa a quantidade de minutos do banco de horas simulado.

					Caso HH:MM seja igual a 00:00, você pode considerar como horas positivas no banco.";False;5 / 10;169;97;57.40%
1917;Ajude o Chapolin Colorado!;Ad-Hoc;8;"Tripa Seca é um exímio programador de computadores, mas infelizmente ele faz parte de uma entidade formada pelos vilões mais cruéis do universo. Após dominar inúmeros planetas, o próximo alvo dessa entidade é o planeta Terra e o foco é de capturar toda a tecnologia dos terráqueos. A sede da entidade até alguns dias atrás nunca tinha sido avistada por nenhum ser do planeta Terra, mas o poderoso Chapolin Colorado com toda a sua astúcia, realizou esse feito e conseguiu entrar na sala de reuniões dos super vilões. E advinha? Estava tendo uma grande reunião!

					Chapolin escutou toda a conversa dos vilões e acabou descobrindo que o plano para conquistar a terra, é a criação de um vírus super poderoso capaz de dominar qualquer aparelho que utilize algum tipo de tecnologia terrestre. Naquele exato momento Chapolin Colorado pegou o seu gravador de áudio e começou gravar Tripa Seca explicando o funcionamento do vírus. Abaixo está descrito uma parte da gravação:

					""[..]Primeiramente o vírus que eu criei é capaz de se reproduzir, mas infelizmente eu errei em alguma parte do algoritmo e o vírus tem um tempo limitado de vida (Admitam, ninguém é perfeito!), por isso no fim do segundo minuto de vida o vírus morre, porém no início de cada minuto 1 vírus nasce de um outro vírus mais velho vivo, e esse é capaz de herdar as mesmas características do vírus pai, como por exemplo a capacidade de se reproduzir e também o tempo limitado de vida. Mesmo com o problema do tempo limitado de vida, tenho quase certeza que a devastação será gigantesca e nós dominaremos toda a tecnologia deste planeta fútil...Minha ideia é a seguinte: colocarei uma quantidade X de vírus no planeta dos terráqueos e depois deixarei que eles cumpram o resto do serviço! Por exemplo, se eu colocar de início somente 1 vírus, de acordo com meus cálculos já no fim do terceiro minuto terão 5 vírus![..]""

					Apesar de Chapolin ser um grande herói, ele não é muito bom para entender certas explicações e pediu que o professor Girafales explicasse para ele a capacidade de destruição daqueles vírus, para que ele tenha uma noção do quanto a Terra corre perigo. Após várias tentativas sem sucesso, o professor Girafales decidiu desenhar o processo e mostrar a Chapolin. Veja o desenho do professor Girafales abaixo:

					

					Entretanto Chapolin achou o desenho um grande insulto a sua capacidade mental e pediu para que você informasse a quantidade de vírus que terá em um determinado minuto, dado a quantidade de vírus inseridos inicialmente por Tripa Seca. Um detalhe importante, Chapolin odeia números quebrados ou restos, ele gosta de ver o número original sem nenhum tipo de corte!";"Haverá diversos casos de teste. Cada caso inicia com dois inteiros, X e Mf (1 ≤ X ≤ 105 , 1 ≤ Mf ≤ 105), representando respectivamente, a quantidade inicial de vírus inseridas no planeta Terra e o minuto em que Chapolin deseja saber a quantidade de vírus que estarão vivos no planeta.

					A entrada termina com X = Mf = 0, a qual não deverá ser processada.";Para cada caso de teste, exiba uma única linha com a quantidade de vírus que estarão vivos no fim do minuto solicitado pelo Chapolin Colorado.;True;8 / 10;219;96;43.84%
1918;Viagem para Acapulco;Ad-Hoc;10;"Após terem realizado uma grande viagem para Acapulco há algum tempo atrás, o moradores da vila fizeram uma grande reunião e decidiram se unir para viajar novamente para aquela linda cidade. Apesar de Seu Madruga ter tido uma grande sorte e ganhado a viagem passada com todas as despesas pagas, o gasto geral entre todos os moradores da vila foi gigantesco e dessa vez eles estão querendo economizar o máximo possível, ainda mais porque ninguém da vila ganhou a viagem paga novamente.

					Acontece que eles foram informados por um desconhecido, que o melhor hotel da cidade (o mesmo que eles se hospedaram na viagem passada) estará com uma promoção por um tempo limitado, então como eles desejam economizar, estão querendo chegar a tempo de pegar a promoção.

					Seu Barriga responsável por administrar o dinheiro gasto é um homem que entende bem de números e agora quer utilizar o poder da tecnologia para conseguir algumas informações úteis antes de realizar a viagem. Como ele já conhece suas habilidades como matemático e programador, ele contratou você para desenvolver um programa que dado todas as informações sobre as cidades e rotas disponíveis, a data e o horário que eles pretendem sair da vila e a data e o horário limite da promoção do hotel em Acapulco, informe se é possível chegar a Acapulco antes que a promoção termine, e qual a menor data e horário possível, ou se não é possível chegar a tempo de pegar a promoção.";A primeira linha de entrada contém um único inteiro QT (1 ≤ QT ≤ 100), indicando a quantidade de casos de teste que vem a seguir. A primeira linha de cada caso de teste é composta por 2 inteiros N (2 ≤ N ≤ 105) e M (1 ≤ M ≤ 3x105), representando respectivamente a quantidade de cidades e a quantidade de rotas que ligam essas cidades. A segunda linha de cada caso de teste é composta pela data e o horário que os moradores da vila pretendem sair e a terceira linha de cada caso é composta pela data e o horário limite que o hotel de Acapulco estará em promoção. As datas e os horários estão descritos na seguinte notação: “DD/MM/AAAA – hh:mm:ss”, onde DD (1 ≤ DD ≤ 31) representa o dias do mês, MM (1 ≤ MM ≤ 12) representa o mês do ano, AAAA (1970 ≤ AAAA ≤ 2100) representa o ano, hh (0 ≤ hh ≤ 23) representa as horas, mm (0 ≤ mm ≤ 59) representa os minutos, ss (0 ≤ ss ≤ 59) representa os segundos. Seguem M linhas, cada linha contêm 2 inteiros a e b e uma data, indicando que existe uma rota bidirecional entre a cidade a (0 ≤ a ≤ N-1) e b (0 ≤ b ≤ N-1), e a data no formato “DD-hh-mm-ss”, representando o tempo necessário para ir de a para b e vice-versa. Considere que a vila fica na cidade de número 0 e a cidade de Acapulco é a cidade de número N-1.;Para cada caso de teste, se for possível chegar a Acapulco antes que a promoção finalize, imprima duas linhas. Na primeira linha a palavra “POSSIBLE” (sem aspas) e na segunda linha a menor data possível no seguinte formato: “DD/MM/AAAA – hh:mm:ss”. Caso não seja possível chegar até a data limite, imprima apenas uma linha com a palavra “IMPOSSIBLE” (sem aspas).;False;10 / 10;129;25;19.38%
1919;Ajude Nhonho;Ad-Hoc;3;"Depois de Professor Girafales descobrir que Nhonho faltava às aulas e pedia para Chaves assinar seu nome na lista de presença em troca de um pão com presunto, Nhonho começou a receber toda semana um desafio especial do professor, e se ele não os resolvesse, seria dedurado para seu pai.

					O desafio dessa semana se chama “Soma permutada”, e consiste em resolver o seguinte enigma: abc + acb + bac + bca + cab + cba = K, dado um valor de K, sem que ocorram repetições de dígitos (a ≠ b ≠ c).

					Com K = 1332, uma das possíveis soluções seria usar a = 1, b = 2 e c = 3, somando suas permutações: 123 + 132 + 213 + 231 + 312 + 321 = 1332.

					Outra solução seria: a = 0, b = 1, c = 5: 015 + 051 + 105 + 150 + 501 + 510 = 1332.

					As explicações acima usaram apenas 3 dígitos para maior facilidade de entendimento, o problema real, que Professor Girafales passou a Nhonho e você terá que ajudá-lo a resolver, consiste em 5 dígitos, e deverá ser somada todas suas permutações (abcde + abced + ..... + edcba), sem repetição de dígitos (a ≠ b ≠ c ≠ d ≠ e).

					Dado o valor de K, exiba, lexicograficamente, todos os possíveis conjuntos de números que satisfaçam o enigma de Girafales.";A primeira linha da entrada possui um inteiro T, indicando a quantidade de casos de testes. Cada uma das T linhas a seguir contém um inteiro K (1 ≤ K ≤ 107), como descrito acima.;"Para cada caso, exiba lexicograficamente o(s) conjunto(s) de valores {a, b, c, d, e} que resolvem o enigma do professor Girafales, ou “impossivel” caso não exista solução.

					Deixe uma linha em branco após cada caso de teste. Observe a formatação de saída.";False;3 / 10;178;122;68.54%
1920;Fonte dos Desejos;Ad-Hoc;6;"Cansada de jogar moedas na fonte dos desejos e não ter nenhum desejo atendido, Chiquinha e Pópis decidiram usar a fonte como alvo na brincadeira de arremesso de moedas. Elas irão tomar uma distância da fonte e jogar, alternadamente, N moedas cada tentando acertá-la. Cada moeda arremessada pode cair dentro da fonte, na borda ou fora.

					Dado a coordenada (cx, cy) do centro da fonte, o raio de onde é considerado dentro(r1) , e o raio da borda(r2), sua tarefa é checar os arremessos de ambas e dizer quem acertou mais moedas dentro da fonte. Em caso de empate, ganha quem acertou mais nas bordas. Se o empate persistir, consideraremos que a brincadeira terminou empatada.

					Obs: Se uma moeda cair exatamente nos extremos de qualquer círculo, será considerado borda (pontos vermelhos na imagem abaixo).";"Haverá diversos casos de testes. A primeira linha de cada caso inicia um inteiro N (1 ≤ N ≤ 1000) representando a quantidade de moedas que cada uma arremessou. A segunda linha conterá quatro inteiros, CX, CY (-1000 ≤ CX, CY≤ 1000), R1 e R2

					(1 ≤ R1 < R2 ≤ 5000), representando respectivamente, o centro da fonte e os raios como mostram a figura acima.

					Após isso, 2*N linhas seguem, cada uma contendo dois inteiros X e Y, representando a coordenada x e y de onde uma moeda caiu. Lembre-se que elas jogam alternadamente e Chiquinha sempre joga primeiro.

					A entrada termina com N = 0, a qual não deve ser processada.";Para cada caso, exiba C > P caso Chiquinha vença a disputa, P > C caso Pópis vença ou C = P caso termine empatado.;True;6 / 10;430;206;47.91%
1921;Guilherme e Suas Pipas;Iniciante;3;"Guilherme adora brincar com pipas, pipas de várias cores, formas e tamanhos. Ele tem percebido que para as pipas possuírem maior estabilidade, e dessa forma voarem mais alto, elas devem possuir um barbante bem esticado ligando todos os pares de pontas não vizinhas.

					Apesar de ser uma criança bastante criativa e astuta, Guilherme não sabe como determinar a quantidade de barbantes que ele terá que utilizar para tornar uma pipa de n lados, estável. Você pode ajudá-lo?.";A entrada será composta por uma única linha, que contém um inteiro 3 ≤ n ≤ 105, representando o número de lados da pipa.;Imprima um número inteiro, que será a quantidade de barbantes que Guilherme terá que utilizar para tornar a pipa de n lados estável.;False;3 / 10;11016;5064;45.97%
1922;Diego e o Jogo do Martelo;Paradigmas;7;"Durante a festa do Padroeiro de Lagoa de Roça, diferentes jogos, brinquedos e parques de diversão se instalam no centro da pequena cidade do interior da Paraíba. Um deles é o não tão conhecido Jogo do Martelo. O jogo consiste de um tabuleiro esburacado e um martelo que cobre totalmente o tabuleiro. Além disso, há pequenas criaturas (bonecos) que vez por outra saem dos buracos do tabuleiro, ficam visíveis por um segundo e após isso voltam a se esconder no buraco por onde saíram. O objetivo do Jogo do Martelo é atingir a maior quantidade de criaturas com uma quantidade m de marteladas.

Após ficar um tempo observando o jogo, Diego percebeu que cada uma das criaturas possuía um padrão de aparição, ou seja, se uma determinada criatura i, apareceu pela primeira vez no instante di, ela tornará a aparecer no instante 2di, depois no instante 3di e assim por diante até que o instante kdi chegasse, após isso essa criatura não apareceria mais. Diego anotou os instantes da primeira e da última aparição de cada uma das criaturas e agora ele precisa de você. Escreva um programa que com essas informações e com a quantidade m de marteladas disponíveis, informe qual a quantidade máxima de criaturas que podem ser marteladas.

Obs.: Quando uma criatura é martelada ela não aparece mais durante o jogo.";A primeira linha da entrada será composta por dois inteiros 1 ≤ n ≤ 103 e 1 ≤ m ≤ 10, representando a quantidade de criaturas e a quantidade de marteladas disponíveis, respectivamente. Cada uma das próximas n linhas irá conter dois inteiros 2 ≤ di ≤ 500 e 2 ≤ kdi ≤ 103, representando o instante da primeira e da última aparição da criatura i, respectivamente. É garantido que di  ≤ kdi.;Imprima a quantidade máxima de criaturas que podem ser atingidas com no máximo m marteladas.;False;7 / 10;130;59;45.38%
1923;Rerisson e o Churrasco;Grafos;6;"Após ter feito um churrasco para festejar os resultados da OPI (Olimpíada Paraibana de Informática) com os amigos, Rerisson pretende fazer outro churrasco, dessa vez um bem maior, com o intuito de conhecer novas pessoas. Ele irá convidar todas as pessoas que possuem um grau de relacionamento para com ele (chamado g) de no máximo, G.

					Por exemplo, considere “>” como sendo o sinal de relacionamento direto:

					Rerisson > Lucas

					Rerisson > Jonathan

					Lucas > Jonathan

					Jonathan > Pedro

					Pedro > Juan

					Lucas > Juan

					Para esse exemplo, considerando o G = 1, apenas Lucas e Jonathan seriam convidados para o churrasco.

					Com o auxílio de uma rede social, Rerisson conhece todas os relacionamento diretos, mas está ocupado preparando o churrasco e gostaria que você, com a lista de relacionamentos preparada por Rerisson, informe quais pessoas serão convidadas para a grande festa.";A primeira linha da entrada irá conter dois inteiros 3 ≤ n ≤ 103 e 1 ≤ G ≤ 500, representando a quantidade de relações de amizades direta e o grau de distância máxima a ser considerado. Cada uma das próximas n linhas irá conter duas strings sem espaços S e T, 1 ≤ |S|, |T| ≤ 20, descrevendo uma relação de amizade direta, (A relação é mútua).;Imprima a quantidade de pessoas que serão convidadas para o churrasco, em seguida o nome de cada uma delas em ordem lexicográfica crescente.;False;6 / 10;1673;552;32.99%
1924;Vitória e a Indecisão;Iniciante;1;"Está para nascer alguém mais indeciso do que Vitória. Apesar dela saber que é uma ótima programadora, daquelas que possui projetos na área de TI publicados e diversos outros em andamento, ela não tem certeza se vai seguir na área. Há noites que ela diz que não quer Computação, há dias que ela diz que quer alguma Engenharia, em outros ela quer qualquer outro curso, já chegou até a pensar em algum de Humanas, que pecado!

					Mas você está aqui pra ajudá-la. A sua tarefa é bem simples, será dado uma lista com diversos nomes de cursos de graduação e você terá que imprimir o nome do curso que Vitória deve fazer.";A primeira linha de entrada contém um inteiro 1 ≤ n ≤ 2000, que representa a quantidade de cursos a serem considerados. Cada uma das próximas n linhas irá conter uma cadeia de caracteres S, 1 ≤ |S| ≤ 100, representando o nome do curso.;Imprima o nome do curso que Vitória deve fazer, sem acentuação.;False;1 / 10;8804;6862;77.94%
1925;Ordan e as Novinhas;Grafos;10;"Ordan está no grandioso Shopping de Campina Grande, ele vai participar de um evento de games e animes. Hoje é o primeiro dia do evento e a abertura já está prestes a acontecer, ela será no salão de palestras do Shopping. Algumas pessoas já estão acomodadas no salão, há muitos boe e muitas novinhas também, para a alegria de Ordan.

					Ele quer sentar em um lugar do salão em que haja o maior número de novinhas juntas, para ele poder aplicar nelas, é claro. O salão pode ser visto como um grid de 2 dimensões, e as cadeiras do salão são identificadas por um par de números inteiros, o número da linha e da coluna onde a mesma se encontra. Se houver ‘n’ na cadeira então é uma novinha que lá está sentada, se houver um ‘b’ então é um boe que lá está sentado, caso haja um ‘*’, então essa cadeira está vazia.

					    1 2 3 4

					1  n n n n

					2  b n * n

					3  n b * b

					4  b b n b

					Nesse exemplo, há duas cadeiras vazias, caso Ordan sente na cadeira (2, 3) ele estará perto de 6 novinhas que estão juntas, caso ele sente na cadeira (3, 3) ele estará perto de apenas uma novinha. Dessa forma, ele deve sentar na cadeira (2, 3).

					Sua tarefa é determinar qual a cadeira vazia que Ordan deve sentar para que ele esteja próximo do maior número de novinhas juntas, caso haja dois ou mais lugares que podem ser a resposta, escolha aquele que tem o menor número da linha, se ainda assim houver mais de uma cadeira que pode ser a resposta, escolha aquela que tenha o menor número da coluna.

					É garantido que sempre haverá pelo menos uma cadeira livre.";A primeira linha da entrada irá conter dois inteiros 1 ≤ l, c ≤ 103, que representam o número de linhas e de colunas do salão, respectivamente. Cada uma das próximas l linhas irá conter c caracteres. Os caracteres podem ser ('n','b','*').;Imprima a linha e a coluna da cadeira que Ordan deve sentar separados por vírgula.;False;10 / 10;736;129;17.53%
1926;Marianne e os Primos Gêmeos;Matemática;8;"Marianne está criando um jogo chamado “Herói da Guitarra”. É um trabalho extremamente cansativo, que requer bastante empenho e tempo, mas nada que uma greve não resolva. Ao abrir o seu email, Mari se deparou com um problema bastante curioso proposto pelos primos Renè e Leonhard e pelos gêmeos Isaac e Carl.

					O problema é descrito da seguinte forma:

					“Um número natural é dito primo, se ele possui exatamente dois divisores naturais distintos: o número um e ele mesmo. Um número é dito primo gêmeo, se e somente se, ele for primo e houver outro número primo qualquer cuja diferença absoluta entre esse dois números primos seja igual a dois. Por exemplo, o número 3 é um primo gêmeo, pois ele é primo e existe outro primo (5) tal que |3 - 5| = 2, já o número 23, apesar de ser primo, não é um primo gêmeo. Você poderia nos dizer quantos número primos gêmeos existem entre x e y, inclusive?”

					Marianne adora resolver esse tipo de problema, mas está muito ocupada criando o seu próprio jogo de Herói da Guitarra. Você pode ajudar?";A primeira linha de entrada irá conter um inteiro 1 ≤ Q ≤ 105, o número de consultas, cada uma das próximas Q linhas irá contér dois inteiros, 1 ≤ X, Y ≤ 106.;Para cada uma das Q consultas, imprima a quantidade de número primos gêmeos entre X e Y, inclusive.;False;8 / 10;1826;507;27.77%
1927;Tapioca e a Chuva de Trufas;Paradigmas;9;"Tapioca sonhou que estava chovendo trufas na cidade onde ele mora, Lagoa de Roça (Lá já choveu granizo, mas isso é papo pra outro problema). Trufas de todos os sabores, pena que ele não pode comer todas, porque as que caem no chão se espatifam completamente. Mas ele pode tentar comer a maior quantidade possível, basta pegá-las antes que elas caiam no chão. Felizmente, nesse sonho Tapioca é capaz de prever o futuro e é por isso que ele sabe o instante e a posição em que cada uma das trufas irá cair. No entanto ele não tem o poder de fazer duas coisas ao mesmo tempo e é por isso que sua ajuda é necessária. Escreva um programa que com as premonições de Tapioca, informe a quantidade máxima de trufas que ele pode comer.

					Considere Lagoa de Roça como sendo um plano e que Tapioca se encontra no instante 0 na posição (6, 6). Além disso ele só pode se mover para posições ortogonais, ou seja, Norte, Sul, Leste e Oeste. Para se movimentar ele leva 1 segundo. E ele só é capaz de pegar uma trufa se estiver na mesma posição e no momento em que ela irá cair.";A primeira linha de entrada contém um inteiro 1 ≤ n ≤ 2000, que representa a quantidade de trufas que irão cair do céu. Cada um das próximas n linhas irá conter três inteiros, 0 ≤ xi, yi ≤ 20 e 0 ≤ ti ≤ 1000, representando as coordenadas do local da queda e o momento da queda da trufa i.;Imprima a quantidade máxima de trufas que Tapioca é capaz de comer.;False;9 / 10;1151;325;28.24%
1928;Jogo da Memória;Grafos;7;"Pedro e Paulo resolveram complicar um pouco o tradicional Jogo da Memória, em que os jogadores precisam virar duas cartas iguais. Eles colocam N cartas no chão, com as faces viradas para baixo. A face de cada carta tem a figura de um número de 1 até N/2, sendo que exatamente duas cartas possuem a figura de cada número entre 1 e N/2. Como as cartas têm as faces viradas para baixo, elas podem também ser identificadas por suas posições, que são inteiros de 1 a N. Pedro e Paulo então desenham no chão, usando giz, algumas linhas ligando pares de cartas, de modo que para qualquer par de cartas (A, B) existe uma e apenas uma sequência de cartas e linhas desenhadas que leva de A até B. A figura abaixo mostra um exemplo de jogo, (a) com todas as cartas com as faces viradas para baixo, e (b) com todas as cartas com as faces viradas para cima.
					   
					O jogo é jogado com todas as cartas com as faces viradas para baixo. A cada jogada, o jogador deve escolher um par de cartas A e B. Se as faces das duas cartas escolhidas têm a mesma figura, o jogador acumula um número de pontos igual ao número de linhas desenhadas que existem no caminho entre as cartas A e B. Pedro e Paulo, agora, estão estudando qual é a melhor estratégia para esse jogo e precisam da sua ajuda para resolver uma tarefa específica: dadas as cartas existentes em cada posição, e as ligações desenhadas com giz, calcular o maior valor total de pontos que é possível acumular.";A primeira linha da entrada contém o número de cartas N (2 ≤ N ≤ 50000, N é par). A segunda linha da entrada contém N inteiros Ci, indicando qual número está anotado na carta na posição i (1 ≤ Ci ≤ N/2, para 1 ≤ i ≤ N). As cartas são dadas na ordem crescente das posições: a primeira carta ocupa a posição 1, a segunda a posição 2, e assim por diante até a última carta, que ocupa a posição N. Cada uma das N − 1 linhas seguintes contém dois números A e B, indicando que existe uma linha desenhada entre as cartas nas posições A e B (1 ≤ A ≤ N e 1 ≤ B ≤ N).;Seu programa deve produzir uma linha contendo um inteiro, o maior valor total de pontos que é possível acumular.;True;7 / 10;1107;450;40.65%
1929;Triângulo;Iniciante;3;"Ana e suas amigas estão fazendo um trabalho de geometria para o colégio, em que precisam formar vários triângulos, numa cartolina, com algumas varetas de comprimentos diferentes. Logo elas perceberam que não dá para formar triângulos com três varetas de comprimentos quaisquer: se uma das varetas for muito grande em relação às outras duas, não dá para formar o triângulo.

					Neste problema, você precisa ajudar Ana e suas amigas a determinar se, dados os comprimentos de quatro varetas, é ou não é possível selecionar três varetas, dentre as quatro, e formar um triângulo.";A entrada é composta por apenas uma linha contendo quatro números inteiros A, B, C e D (1 ≤ A, B, C, D ≤ 100).;Seu programa deve produzir apenas uma linha contendo apenas um caractere, que deve ser ‘S’ caso seja possível formar o triângulo, ou ‘N’ caso não seja possível formar o triângulo.;False;3 / 10;13180;6249;47.41%
1930;Tomadas;Iniciante;1;"Finalmente, o time da Universidade conseguiu a classificação para a Final Nacional da Maratona de Programação da SBC. Os três membros do time e o técnico estão ansiosos para bem representar a Universidade, e além de treinar muito, preparam com todos os detalhes a sua viagem a São Paulo, onde será realizada a Final Nacional.

					Eles planejam levar na viagem todos os seus vários equipamentos eletrônicos: celular, tablet, notebook, ponto de acesso wifi, câmeras, etc, e sabem que necessitarão de várias tomadas de energia para conectar todos esses equipamentos. Eles foram informados de que ficarão os quatro no mesmo quarto de hotel, mas já foram alertados de que em cada quarto há apenas uma tomada de energia disponível.

					Precavidos, os três membros do time e o técnico compraram cada um uma régua de tomadas, permitindo assim ligar vários aparelhos na única tomada do quarto de hotel; eles também podem ligar uma régua em outra para aumentar ainda mais o número de tomadas disponíveis. No entanto, como as réguas têm muitas tomadas, eles pediram para você escrever um programa que, dado o número de tomadas em cada régua, determine o número máximo de aparelhos que podem ser conectados à energia num mesmo instante.";A entrada consiste de uma linha com quatro números inteiros T1, T2, T3, T4, indicando o número de tomadas de cada uma das quatro réguas (2 ≤ Ti ≤ 6).;Seu programa deve produzir uma única linha contendo um único número inteiro, indicando o número máximo de aparelhos que podem ser conectados à energia num mesmo instante.;False;1 / 10;12066;9963;82.57%
1931;Mania de Par;Grafos;7;"Patrícia é uma ótima desenvolvedora de software. No entanto, como quase toda pessoa brilhante, ela tem algumas manias estranhas, e uma delas é que tudo que ela faz tem que ser em número par.
					Muitas vezes essa mania não atrapalha, apesar de causar estranhamento nos outros. Alguns exemplos:
					ela tem que fazer diariamente um número par de refeições; no café da manhã toma duas xícaras de	café, duas torradas e duas fatias de queijo; sempre que vai ao cinema compra dois bilhetes de entrada
					(felizmente sempre tem um amigo ou amiga lhe acompanhando); e toma dois banhos por dia (ou quatro, ou seis...).

					Mas algumas vezes essa mania de Patrícia atrapalha. Por exemplo, ninguém gosta de viajar de carro com ela, pois se no trajeto ela tem que pagar pedágios, o número de pedágios que ela paga tem que ser par.

					Patrícia mora em um país em que todas as estradas são bidirecionais e têm exatamente um pedágio. Ela precisa ir visitar um cliente em uma outra cidade, e deseja calcular o mínimo valor total de pedágios que ela tem que pagar, para ir da sua cidade à cidade do cliente, obedecendo à sua estranha mania de que o número de pedágios pagos tem que ser par.";A entrada consiste de diversas linhas. A primeira linha contém 2 inteiros C e V, o número total de cidades e o número de estradas (2 ≤ C ≤ 104 e 0 ≤ V ≤ 50000). As cidades são identificadas por inteiros de 1 a C. Cada estrada liga duas cidades distintas, e há no máximo uma estrada entre cada par de cidades. Cada uma das V linhas seguintes contém três inteiros C1, C2 e G, indicando que o valor do pedágio da estrada que liga as cidades C1 e C2 é G (1 ≤ C1, C2 ≤ C e 1 ≤ G ≤ 104). Patrícia está atualmente na cidade 1 e a cidade do cliente é C.;Uma única linha deve ser impressa, contendo um único inteiro, o custo total de pedágios para Patrícia ir da cidade 1 à cidade C, pagando um número par de pedágios, ou, se isso não for possível, o valor −1.;False;7 / 10;3938;1226;31.13%
1932;Bolsa de Valores;Ad-Hoc;6;"Um investidor principiante deseja aprender a investir na bolsa de valores. Como ele não tem experiência, selecionou uma única empresa, e acompanhou os valores diários das ações dessa empresa, durante N dias. Ficou curioso quanto teria ganhado se tivesse investido nesse período em que acompanhou os valores. Na verdade, o investidor é milionário e tem muito dinheiro, suficiente para comprar qualquer quantidade de ações da empresa. Entretanto, como é um investidor cuidadoso, decidiu que nunca teria mais do que uma ação da empresa.

					Como sempre há intermediários, a corretora de valores cobra uma taxa fixa de C reais a cada compra de uma ação da empresa.

					Você deve calcular qual o lucro máximo que o investidor poderia ter auferido, investindo durante alguns dos N dias, podendo inclusive decidir não investir.";"A primeira linha contém dois inteiros, N e C (1 ≤ N ≤ 2 × 105 e 0 ≤ C ≤ 30).
					A segunda linha contém as N cotações P1, P2, . . . , PN , dos dias 1, 2, . . . , N, respectivamente. Cada cotação Pi satisfaz as desigualdades 1 ≤ Pi ≤ 1000.";Seu programa deve produzir uma única linha com um inteiro representando o lucro máximo do investidor, em reais.;False;6 / 10;2045;810;39.61%
1933;Tri-du;Iniciante;1;"Tri-du é um jogo de cartas derivado do popular jogo de Truco. O jogo utiliza um baralho normal de 52 cartas, com treze cartas de cada naipe, mas os naipes são ignorados. Apenas o valor das cartas,considerados como inteiros de 1 a 13, são utilizados.

					No jogo, cada jogador recebe três cartas. As regras são simples:

					
						
							 Um trio (três cartas de mesmo valor) ganha de uma dupla (duas cartas de mesmo valor).
							Um trio formado por cartas de maior valor ganha de um trio formado por cartas de menor valor.
							Uma dupla formada por cartas de maior valor ganha de uma dupla formada por cartas de menor valor.
						
					

					Note que o jogo pode não ter ganhador em muitas situações; nesses casos, as cartas distribuídas são devolvidas ao baralho, que é embaralhado e uma nova partida é iniciada

					Um jogador já recebeu duas das cartas que deve receber, e conhece seus valores. Sua tarefa é escrever um programa para determinar qual o valor da terceira carta que maximiza a probabilidade de esse jogador ganhar o jogo.";A entrada consiste de uma ´unica linha que contém dois inteiros, A (1 ≤ A ≤ 13) e B (1 ≤ B ≤ 13) indicando os valores das duas primeiras cartas recebidas.;Seu programa deve produzir uma única linha com um inteiro representando o valor da carta que maximiza a probabilidade de o jogador ganhar a partida.;False;1 / 10;10493;8260;78.72%
1934;Quebra-cabeça;Ad-Hoc;6;"Discussões recentes na Internet causaram uma onda de renovado interesse em quebra-cabeças de lógica. Neste problema a sua tarefa é escrever um programa que resolva quebra-cabeças como o mostrado na figura abaixo, muito comum em revistas de desafios lógicos. Nesse quebra-cabeças, as letras dentro do quadriculado representam variáveis, e os números representam as somas dos valores das variáveis em cada linha ou coluna.
					
					O objetivo desse tipo de quebra-cabeça é determinar o valor de cada variável de modo a satisfazer as somas das linhas e colunas mostradas. Mas como esse tipo de quebra-cabeças é para crianças, ele tem uma propriedade que o torna mais fácil de encontrar a solução: sempre é possível encontrar uma linha ou coluna em que há apenas uma variável cujo valor ainda é desconhecido. Assim, uma possível maneira de resolver o problema é, a cada passo da solução, encontrar o valor de uma variável.	

					Dado um quebra-cabeça, você deve determinar os valores das variáveis que o solucionam.";A primeira linha contém dois inteiros L (1 ≤ L ≤ 100) e C (1 ≤ C ≤ 100) indicando o número de linhas e o número de colunas do quebra-cabeça. Cada uma das L linhas seguintes contém C nomes de variáveis, seguidos de um inteiro S, a soma resultante das variáveis dessa linha (−108 ≤ S ≤ 108). A última linha contém C inteiros Xi (−108 ≤ Xi ≤ 108), indicando respectivamente a soma das variáveis na coluna i. Nomes de variáveis são formados por precisamente duas letras minúsculas, de ’a’ a ’z’. Todos os quebra-cabeças têm solução única, em que todas as variáveis são números inteiros entre −106 and 106.;"Seu programa deve produzir uma linha para cada variável do quebra-cabeças, contendo o nome da variável e o seu valor inteiro. As variáveis devem ser escritas em ordem alfabética crescente, ou seja,respeitando a ordem

					  aa, ab, . . . , az, ba, bb, . . . , za, zb, . . . , zz.";True;6 / 10;644;296;45.96%
1935;Espiral;Ad-Hoc;8;Dado um tabuleiro de dimensões N × N, gostaríamos de colocar feijões, um grão em cada quadrado, seguindo uma espiral como mostrado na figura. Começando do canto superior esquerdo, com coordenadas (1, 1), e depois indo para a direita enquanto possível, depois para baixo enquanto possível, depois para esquerda enquanto possível e depois para cima enquanto possível. Repetimos esse padrão, direita-baixo-esquerda-cima, até que B grãos de feijão sejam colocados no tabuleiro. O problema é: dados N e B, em que coordenadas será colocado o último grão de feijão? Na figura, para N = 8 e B = 53, o último grão foi colocado no quadrado de coordenadas (4, 6).;A entrada contém apenas uma linha com dois inteiros, N e B, onde 1 ≤ N ≤ 230 e 1 ≤ B ≤ N2 .;Seu programa deve produzir uma única linha com dois inteiros L e C representando as coordenadas do último grão de feijão.;True;8 / 10;1402;365;26.03%
1936;Fatorial;Ad-Hoc;2;"O fatorial de um número inteiro positivo N, denotado por N!, é definido como o produto dos inteiros positivos menores do que ou iguais a N. Por exemplo 4! = 4 × 3 × 2 × 1 = 24.

Dado um inteiro positivo N, você deve escrever um programa para determinar o menor número k tal que N = a1! + a2! + ... + ak!, onde cada ai, para 1 ≤ i ≤ k, é um número inteiro positivo.

Por exemplo, para N = 10 a resposta é 3, pois é possível escrever N como a soma de três números fatoriais: 10 = 3! + 2! + 2!. Para N = 25 a resposta é 2, pois é possível escrever N como a soma de dois números fatoriais: 25 = 4! + 1!.";A entrada consiste de uma única linha que contém um inteiro N (1 ≤ N ≤ 105).;Seu programa deve produzir uma única linha com um inteiro representando a menor quantidade de números fatoriais cuja soma é igual ao valor de N.;False;2 / 10;2273;1464;64.41%
1937;Guardiões Curiosos;Ad-Hoc;10;"Oa é um dos mundos mais antigos do universo DC, é lá que habitam os guardiões do universo. Eles administram a tropa dos lanternas verdes, uma das maiores forças do universo! Todos sabem que os lanternas verdes sabem voar devido ao poder do anel, porém nem todos os habitantes de Oa fazem parte da tropa. Para esses habitantes está difícil se locomover entre as cidades, pois não há estradas!

					Os guardiões desejam conectar as cidades de Oa construindo algumas estradas. Existem N cidades em Oa, e eles desejam construir N−1 estradas de duas mãos, de tal forma que seja possível chegar de uma cidade até qualquer outra, direta ou indiretamente. Os guardiões também não desejam privilegiar demais nenhuma cidade, por isso eles estabeleceram que nenhuma cidade pode ter mais de K estradas. Por exemplo, se temos três cidades e K vale 2, temos as três opções:

					

					Os guardiões, porém, são muito curiosos, e perguntaram aos lanternas verdes se eles eram capazes de dizer de quantas formas é possível construir N−1 estradas obedecendo estas restrições. Sua tarefa, como membro da tropa dos lanternas verdes é, dados N e K, satisfazer a curiosidade dos guardiões.";A entrada consiste de uma única linha que contém dois números inteiros N (1 ≤ N ≤ 102) e K (1 ≤ K ≤ N).;Seu programa deve produzir uma única linha, contendo um único número inteiro, a resposta do problema. Como essa resposta pode ser muito grande, imprima-a módulo 109 + 7.;True;10 / 10;342;87;25.44%
1938;Praça do Retângulo;Geometria Computacional;6;"Retangolândia é uma cidade muito antiga e, por isso, guarda diversas riquezas históricas. A cidade foi planejada muitas décadas atrás, com todas as suas ruas indo nas direções norte-sul ou leste-oeste. Atualmente, há um projeto de revitalização da cidade, no qual uma nova praça retangular será feita. A escolha da nova praça será feita pela administração pública mas, no momento, eles estão interessados em quais seriam as posições possíveis para esta praça, levando-se em consideração que a praça deve estar alinhada com as ruas e, assim, quando visualizada em um mapa, seus lados devem ser segmentos horizontais e verticais. Com o objetivo de conciliar as riquezas históricas com as novas iniciativas, alguns cuidados devem ser tomados.

Existem postes de iluminação, do século XIX, espalhados pela cidade. Por seu valor histórico, nenhum poste pode ser derrubado. Por conta do desgaste natural e da falta de manutenção, nenhuma rua possui mais do que um poste restante. Para o posicionamento da praça, entretanto, não se deseja que um destes postes esteja no interior da mesma. Por outro lado, o projeto paisagístico da nova praça prevê que dois dos postes históricos estejam em duas das esquinas. A figura abaixo mostra um exemplo com quatro postes e as três localizações possíveis para a praça.



A prefeitura contratou uma empresa de georeferenciamento para efetuar um levantamento das posições dos postes. Com esses dados em mãos, o próximo passo é determinar quantas são as localizações possíveis para a praça, para que se possa dimensionar o tamanho da equipe necessária para avaliar cada uma das localizações.";A primeira linha da entrada contém um número inteiro N, 1 ≤ N ≤ 3000, representanto o número de postes. As N linhas seguintes descreverão, cada uma, a posição de um poste. A posição de um poste será dada por um par de números inteiros, X e Y, −108 ≤ X, Y ≤ 108 , correspondendo às suas coordenadas no plano.;Seu programa deve produzir uma única linha contendo o número de diferentes localizações possíveis para a praça.;True;6 / 10;658;329;50.00%
1939;Ominobox;Ad-Hoc;10;"O planeta de Skyrk nunca vai conhecer a paz enquanto o malvado Mago estiver livre. Dessa vez, o malicioso plano do Mago foi armar uma bomba no meio da maior cidade do planeta. Mago aprecia observar o caos, então, ao invés de explodir a bomba imediatamente, ele colocou um temporizador na bomba e a deixou junto com um desafio. A bomba tem um teclado, e a solução do desafio desarma a bomba.

					O desafio se chama Omnibox; ele consiste de uma caixa retangular com alguns cubos unitários dentro e de uma coleção de todos os possíveis N-ominos. Skyrk deve soltar todo omino em algum lugar da caixa para ganhar pontos. A pontuação máxima é a solução do Ominobox.

					Um N-omino é uma coleção de N quadrados unitários arranjados com lados coincidentes. Um 1-omino é um quadrado unitário, e um N-omino é um (N − 1)-omino com pelo menos um dos seus lados ligados a um quadrado unitário.

					
						
						Os seis possíveis 3-ominos.
					
					
						
						Some of the 19 possible 4-omnis.
					

					A caixa tem uma superfície retangular e paredes verticais; cada um dos quadrados de um sistema Cartesiano de coordenadas em grade colocado na superfície da caixa possui uma pilha não negativa de cubos unitários. Os cubos não podem ser movidos.

					Skyrk irá alinhar cada omino com os quadrados da grade, e soltá-lo na caixa. O omino irá cair até tocar um cubo ou o fundo. Não é permitido que Skyrk reflita ou rotacione o omino, e ele deve situar-se completamente dentro dos limites da caixa. O número de pontos obtidos após soltá-lo é a distância entre o omino e o topo da caixa. Após soltá-lo, Skyrk anota o número de pontos, remove o omino, e solta o próximo. A pontuação final é a soma de todos os pontos.

					O tempo está passando e a contagem regressiva na bomba diz 5:00 (cinco horas!). Você consegue descobrir a pontuação máxima que Skyrk pode obter para desarmar a bomba e salvar o destino do planeta das mãos do vil Mago?";"A primeira linha contém T (T ≤ 200) — o número de desafios, após essa linha haverá T desafios. Cada desafio começa com uma linha com quatro inteiros R, C, H e N (1 ≤ R, C, H ≤ 30; 1 ≤ N ≤ 10) — as dimensões da superfície da caixa são R × C, a altura é H, e a ordem dos ominos é N. Cada uma das próximas R linhas contém C inteiros Hij (0 ≤ Hij ≤ H) — o número de cubos no quadrado (i, j) da grade.";Para cada desafio, imprima uma linha contendo X, onde X é a solução do Ominobox.;True;10 / 10;56;19;33.93%
1940;Jogo da Estratégia;Ad-Hoc;3;"Um jogo de estratégia, com J jogadores, é jogado em volta de uma mesa. O primeiro a jogar é o jogador 1, o segundo a jogar é o jogador 2 e assim por diante. Uma vez completada uma rodada, novamente o jogador 1 faz sua jogada e a ordem dos jogadores se repete novamente. A cada jogada, um jogador garante uma certa quantidade de Pontos de Vitória. A pontuação de cada jogador consiste na soma dos Pontos de Vitória de cada uma das suas jogadas.

Dado o número de jogadores, o número de rodadas e uma lista representando os Pontos de Vitória na ordem em que foram obtidos, você deve determinar qual é o jogador vencedor. Caso mais de um jogador obtenha a pontuação máxima, o jogador com pontuação máxima que tiver jogado por último é o vencedor.";A entrada consiste de duas linhas. A primeira linha contém dois inteiros J e R, o número de jogadores e de rodadas respectivamente (1 ≤ J, R ≤ 500). A segunda linha contém J × R inteiros, correspondentes aos Pontos de Vitória em cada uma das jogadas feitas, na ordem em que aconteceram. Os Pontos de Vitória obtidos em cada jogada serão sempre inteiros entre 0 e 100, inclusive.;Seu programa deve produzir uma única linha, contendo o inteiro correspondente ao jogador vencedor.;False;3 / 10;2929;1477;50.43%
1941;Palíndromo;Strings;6;"Um palíndromo é uma cadeia de caracteres tal que sua reversão é igual à cadeia original. Em outras palavras, é uma cadeia que, quando lida de trás pra frente, é igual à cadeia original. Por exemplo BANANAB é um palíndromo, enquanto BANANAS não. Neste problema estamos interessados em uma questão um pouco mais interessante.

Dada uma cadeia S, queremos encontrar uma subsequência que seja um palíndromo. Uma subsequência é uma cadeia que pode ser obtida a partir da remoção de zero ou mais caracteres da cadeia original. Por exemplo ANNA é uma subsequência de BANANAS.

Será dado também um conjunto de posições de S que chamamos de posições especiais. Sua tarefa é encontrar o tamanho da subsequência que seja um palíndromo e que contenha o maior número de posições especiais possível. Caso exista mais de uma subsequência maximizando o número de posições especiais, você deve imprimir o tamanho da maior delas.";A entrada consiste de duas linhas. A primeira linha contém uma cadeia de caracteres maiúsculos S com pelo menos 1 e no máximo 2000 caracteres. A segunda linha contém um inteiro N, (0 ≤ N ≤ |S|), indicando o número de posições especiais que estamos interessados em incluir no palíndromo, seguido de N números distintos, entre 1 e |S|, inclusive, contendo as posições especiais de S.;Seu programa deve imprimir um único inteiro, representando o tamanho do maior palíndromo possível, como definido acima.;False;6 / 10;929;372;40.04%
1942;Loteria;Ad-Hoc;9;"A loteria BWS é feita anualmente. Nela N pessoas apostam escolhendo K números cada uma. De modo formal, podemos dizer que Bij é o j-ésimo valor apostado pela i-ésima pessoa. Então os organizadores escolhem K inteiros positivos. Os números escolhidos são chamados de W1, W2, ..., WK.

Os vencedores são calculados da seguinte maneira:


	Um subconjunto não vazio dos N participantes é escolhido aleatoriamente, ou seja, alguns participantes são escolhidos por pura sorte.
	Para cada pessoa neste subconjunto é calculado o valor S1, que é a soma de todos os primeiros números apostados por elas, ou seja, a soma de Bi1, onde i seria o índice de cada pessoa escolhida. Da mesma maneira os valores S2, ..., SK são calculados.
	E feito um teste de paridade entre Wj e Sj , ou seja, é testado se as paridades (se o número é par ou ímpar) casam entre W1 e S1, W2 e S2, e assim por diante até WK e SK.
	Se todas as paridades casam, então este conjunto de pessoas é considerado vencedor!


Os organizadores querem saber: é possível escolher os números W1, W2, ..., WK de forma que não exista nenhum subconjunto de participantes vencedor?";A primeira linha contém os números N (1 ≤ N ≤ 104 ) e K (3 ≤ K ≤ 50), representando o número de participantes e a quantidade de números apostados por cada pessoa respectivamente. As pessoas apostam em inteiros maiores do que 1 e menores do que 50, inclusive. Cada uma das N linhas seguintes contém K números, representando as apostas de cada pessoa, uma pessoa por linha.;Imprima ‘S’ caso seja possível ou ‘N’ caso contrário.;False;9 / 10;494;124;25.10%
1943;Top N;Ad-Hoc;1;"Recentemente aconteceu a fase regional da Maratona de Programação da SBC, onde mais de 600 times participaram em mais de 40 sedes diferentes pelo Brasil. Seu amigo participou da competição, e quando questionado sobre sua colocação lhe disse: “Ficamos no top 10”.

Você ficou feliz pelo seu amigo, mas não pode deixar de ficar curioso sobre qual foi sua real colocação. “Top 10” poderia indicar qualquer posição entre primeiro e décimo colocado, porém se ele estivesse em primeiro provavelmente teria dito “Top 1”, se estivesse em segundo ou terceiro provavelmente teria dito “Top 3”, e se estivesse em quarto ou quinto provavelmente teria dito “Top 5”. Logo, sua real colocação foi entre sexto e décimo, pois as pessoas geralmente se colocam na menor categoria a qual pertencem.

Você reuniu então todas as categorias de colocações que as pessoas mais usam: 1, 3, 5, 10, 25, 50 e 100. Dada uma colocação K, diga o número da menor categoria que esta colocação pertence.";Cada caso de teste contém um inteiro K, representando uma colocação (1 ≤ K ≤ 100).;Para cada caso de teste imprima uma linha contendo a frase “Top N”, e substitua a letra N pelo número da menor categoria que a colocação K pertence.;False;1 / 10;4812;3215;66.81%
1944;BRINDE FACE 2015;Estruturas e Bibliotecas;2;"A FACE em 2015 está apoiando a terceira edição da Maratona de Programação, mas desta vez a organização solicitou sua ajuda para criar um sistema de sorteio utilizando as letras da palavra FACE. Como a feira utiliza uma proposta diferenciada e alegre, cada participante que entra na feira ganha 4 letras, uma de cada cor e em formato de bloco de madeira, conforme Figura 1, e deve inserí-las num painel. Se, no momento da inserção, as 4 letras formarem o contrário das 4 últimas letras, o visitante ganhará um brinde.
					
					 Figura 1 - Entrada de FACE no painel seguido de ACEF.
					Por exemplo: suponha que já tiveram 3 participantes que entraram na feira e o painél ficou da seguinte forma: F A C E E C F A A C F E A C E F. Note que sempre que o painél fica vazio, assim como no início do evento, as letras F A C E são inseridas pela organização do evento. Agora, na entrada do quarto participante, ele inseriu as letras F E C A e, com isso, receberá um brinde por fechar o contrário de A C E F. Após essa situação, o painél deve ficar F A C E E C F A A C F E.
					Escreva um algoritmo que, dadas as letras recebidas e inseridas pelos participantes, diga quantos participantes ganharam brindes. Lembre-se que sempre que o painel fica vazio as letras F A C E são inseridas pela organização do evento.";A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 100), representando o número de visitantes que vão receber as letras. Em cada uma das N linhas seguintes deve ser informada a combinação das 4 letras que o visitante deseja inserir no painel, separadas por espaço.;Para cada grupo de visitantes, deve ser informado quantos destes receberão brindes.;True;2 / 10;2374;998;42.04%
1945;Simulador;Ad-Hoc;3;"Séculos após a invasão alienígena, quando a humanidade já está completamente reconstruída, foram encontrados um conjunto de programas escritos em uma linguagem obsoleta, chamada Java++. Por curiosidade histórica, você foi designado a tentar entender oque estes programas faziam.
					Sua tarefa é escrever um simulador para estes programas, e como teste inicial, o simulador deve ser capaz de calcular o resultado da última variável atribuída de cada programa.";"Cada entrada consiste de um programa. O programa só contem 2 tipos de instruções. Uma para atribuir uma variável e outra para executar uma soma.

					As instruções de declaração são no formato:

					A := B

					Onde A é um nome de variável válido e B é um inteiro positivo.

					As instruções de soma são no formato:

					A := B + C

					Onde A é um nome de variável válido e B ou C são ou um nome de variável válido ou um inteiro positivo.

					Os tokens deste programa são sempre separados por espaço e as instruções são separadas por uma quebra de linha.

					São nomes de variáveis válidos todas as combinações de até 8 letras minúsculas.

					Os programas tem, no máximo, 2000 instruções.

					Variáveis são atribuídas, no máximo, 1 vez.";A saída consiste de apenas 1 linha, contendo apenas um número inteiro, referente ao valor a última variável atribuída, seja por uma atribuição direta ou por uma soma.;False;3 / 10;650;367;56.46%
1946;Pirâmide da Sorte;Matemática;5;"Um grande show de TV distribui prêmios à platéia através da Pirâmide da Sorte. Um convidado joga uma bolinha no topo da pirâmide (que é um triângulo, na verdade) e ela vai descendo para a esquerda ou para a direita aleatoriamente até chegar em uma das caixinhas na base. O convidado ganha o prêmio que está associado àquela caixinha.

					O grande prêmio sempre fica no meio da base da pirâmide, que sempre tem, portanto, um número ímpar de caixinhas na base. Veja uma pirâmide com 15 caixinhas na figura.

					

					Os produtores do programa querem economizar o máximo possível e pediram para você calcular qual a probabilidade de alguém ganhar o grande prêmio, dado o número de caixinhas na base da pirâmide. Considere que, em cada ponto da pirâmide, existe a mesma chance da bolinha ir para a esquerda ou para a direita.";A entrada é dada em uma única linha, que contem o número S de caixinhas na base da pirâmide (3 ≤ S ≤ 4999). S é sempre ímpar.;A saída deve ser dada em uma única linha, que contem a probabilidade da bolinha cair na caixinha com o grande prêmio. A probabilidade deve ser exibida com 2 casas decimais.;True;5 / 10;386;181;46.89%
1947;Rota do Taxista;Ad-Hoc;9;"Um evento importante acontecerá hoje na sua cidade, e com isso há muitos turistas perdidos. Para que todos consigam chegar a seus destinos nessa cidade desconhecida eles costumam chamar táxis. Você foi contratado para ajudar os taxistas, que estão sobrecarregados com tantas chamadas.

					A cidade pode ser representada por N pontos de referências, e M ruas que interligam estes pontos. Cada rua tem um determinado comprimento, e sempre haverá um caminho entre quaisquer dois pontos distintos da cidade.

					O objetivo do taxista o qual você vai ajudar é atender a K pedidos. Cada pedido consiste de dois pontos no mapa, O e D (origem e destino), sendo que o turista atualmente está no ponto O e deseja chegar no ponto D. O taxista está inicialmente no ponto 1, pretende atender a apenas um pedido por vez (na ordem em que desejar), e após o último pedido deve voltar ao ponto 1.

					Por exemplo, considere uma cidade com N = 5 pontos de referência e K = 2 turistas, onde o primeiro turista deseja ir do ponto 4 ao ponto 3, e o segundo deseja ir do ponto 2 ao ponto 4. O taxista então tem duas opções de trajeto: 1 -> 4 -> 3 -> 2 -> 4 -> 1; ou 1 -> 2 -> 4 -> 3 -> 1. Note que A -> B representa um caminho entre os pontos A e B, contendo uma ou mais ruas.

					Confuso com tantas opções de trajeto e querendo economizar combustível, o taxista pediu que você calculasse qual trajeto teria a menor distância percorrida.";"Cada caso de teste inicia com três inteiros N, M e K (2 ≤ N ≤ 104, N-1 ≤ M ≤ 105, 1 ≤ K ≤ 15).

					Em seguida haverá M linhas, cada uma com três inteiros A, B e C, indicando que há uma rua que interliga os pontos A e B, a qual pode ser percorrida em ambas as direções, de comprimento C (1 ≤ A, B ≤ N, 1 ≤ C ≤ 100, A <> B).

					Em seguida haverá K linhas, cada uma com dois inteiros O e D, indicando que há um turista no ponto O que deseja chegar no ponto D (1 ≤ O, D ≤ N, O <> D).";Para cada caso de teste imprima uma linha contendo um inteiro, indicando a menor distância possível de ser percorrida se o taxista iniciar no ponto 1, atender a todos os pedidos (um por vez), e voltar ao ponto 1.;False;9 / 10;251;80;31.87%
1948;Compilador;Grafos;9;"Depois do ataque dos alienígenas que acabou com 
        quase toda a tecnologia avançada da humanidade,
        você foi designado a participar da força tarefa para reconstruir.
        
        Depois de muita tentativa e erro, foi descoberto que os
        computadores que tinham apenas 2 registradores
        fonte e um destino eram imunes as radiações alienígenas.
        O problema agora é que nenhum programa escrito até então funcionava nestes
        computadores, e muito menos um compilador adequado.
        
        Você está de posse de um dos últimos computadores
        de verdade que ainda funcionam, e
        sua tarefa será escrever o compilador. Mas como tempo é
        dinheiro, e tempo de CPU é muito mais dinheiro,
        antes de compilar o programa inteiro, você deve
        apenas checar se é possível compilar
        o programa desejado.";"Cada entrada consiste de um programa.
        O programa só contem 2 tipos de instruções.
        Uma para declarar o valor de uma variável e outra para executar uma soma.
        
        As instruções de declaração são no formato:
        
        A := B
        
        Onde A é um nome de variável válido e B é um inteiro positivo.
        
        As instruções de soma são no formato:
        
        A := B + C
        
        Onde A é um nome de variável válido e B ou C são ou um
        nome de variável válido ou um inteiro positivo.
        
        Os tokens deste programa são sempre separados por espaço
        e as instruções são separadas por uma quebra de linha.
        
        São nomes de variáveis válidos todas as combinações de até 8 letras minúsculas.
        Os programas tem, no máximo, 2000 instruções.
        Variáveis recebem uma atribuição, seja através de uma soma ou de uma declaração, no máximo, 1 vez.";"A saída consistirá sempre de somente 1 linha:
        
        OK
        
        No caso de ser possível compilar.
        
        Compilation error
        
        No caso de não ser possível.";False;9 / 10;103;13;12.62%
1949;Registrador de Deslocamento;Matemática;10;"Um Registrador de Deslocamento é um circuito que desloca de uma posição os elementos de um vetor de bits. O registrador de deslocamento tem uma entrada (um bit) e uma saída (também um bit), e é comandado por um pulso de relógio. Quando o pulso ocorre, o bit de entrada se transforma no bit menos significativo do vetor, o bit mais significativo é jogado na saída do registrador, e todos os outros bits são deslocados de uma posiçãoo em direção ao bit mais significativo do vetor (em direçãoo à saída).

					Um Registrador de Deslocamento com Retroalimentação Linear (em inglês, LFSR) é um registrador de deslocamento no qual o bit de entrada é determinado pelo valor do OU-EXCLUSIVO de alguns dos bits do registrador antes do pulso de relógio. Os bits que são utilizados na retroalimentação do registrador são chamados de torneiras. A figura abaixo mostra um LFSR de 8 bits, com três torneiras (bits 0, 3 e 5).

					

					Neste problema, você deve escrever um programa que, dados o número de bits de um LFSR, quais bits são utilizados na retroalimentação, um estado inicial e um estado final do LFSR, determine quantos pulsos de relógio serão necessários para que, partindo do estado inicial, o LFSR chegue ao estado final (ou determinar que isso é impossível).";"A entrada contém vários casos de teste. Cada caso de teste é composto por três linhas. A primeira linha contém dois números inteiros N, T, indicando respectivamente o número de bits (2 ≤ N ≤ 32) e o número de torneiras (2 ≤ T ≤ N). Os bits são identificados por inteiros de 0 (bit menos significativo) a N − 1 (bit mais significativo). A segunda linha contém T inteiros, separados por espaços, apresentando os identificadores dos bits que são torneiras, em ordem crescente. O bit 0 sempre é uma torneira. A terceira linha contém dois números em notação hexadecimal I e F, separados por um espaço em branco, representando respectivamente o estado inicial e o estado final do LFSR.

					O final da entrada é indicado por uma linha que contém dois zeros separados por espaços em branco.";Para cada caso de teste da entrada seu programa deve imprimir uma única linha. Se for possível chegar ao estado final a partir do estado inicial dado, a linha da saída deve conter apenas um inteiro, o menor número de pulsos de relógio necessários para o LFSR atingir o estado final. Caso não seja possível, a linha deve conter apenas o caractere '*'.;True;10 / 10;96;19;19.79%
1951;Validador de Circuitos;Grafos;5;"O Prof. Padilha pediu um trabalho para a componente curricular de Circuitos Digitais e agora está todo mundo desesperado! Os calouros precisam construir um circuito combinacional usando apenas circuitos de uma lista de circuitos publicados pelo professor. No entanto, devido a alguns problemas com tamanho, eles mal estão conseguindo determinar se os circuitos que eles construíram são válidos, quanto mais decidir se estão corretos. Cabe agora a você, veterano, fazer um programa para validar os circuitos construídos pelos calouros. Você pode ajudá-los?

A propósito, de acordo com o que o Prof. Padilha pediu, um circuito C é válido se:


	para toda entrada de C e toda saída de um circuito menor usado internamente na construção de C existe ao menos um caminho até alguma saída de C;
	para toda saída de C existe ao menos um caminho que vem de alguma entrada de C;
	não há ciclos em C.


Todos os circuitos publicados pelo professor possuem só uma saída cada, embora os circuitos construídos pelos calouros possam ter várias saídas. É óbvio que os circuitos publicados pelo professor são todos válidos.";"A entrada contém a descrição de um circuito C, o qual se deseja validar. A primeira linha da entrada consiste de três inteiros, I, N e O (1 ≤ I, N, O ≤ 104), os quais representam respectivamente o número de entradas de C, o número de circuitos publicados pelo professor usados internamente na construção de C e o número de saídas de C, de modo que as entradas são identificadas pelos inteiros 1, …, I, os circuitos internos pelos inteiros I + 1, …, I + N, e as saídas identificadas pelos inteiros I + N + 1, …, I + N + O. Cada uma das próximas N linhas descreve como é alimentado cada um dos circuitos internos, seguindo a ordem I + 1, …, I + N, e consiste de um inteiro K (1 ≤ K ≤ 102), o qual representa o número de entradas no circuito interno, seguido por K inteiros, os quais identificam a origem do sinal alimentado em cada entrada. A última linha da entrada consiste de O inteiros, identificando a origem do sinal devolvido por cada saída de C, seguindo a ordem I + N + 1, …, I + N + O.

A figura abaixo ilustra o circuito C descrito pelo primeiro exemplo de entrada.";Imprima uma linha contendo unicamente o.o se o circuito descrito na entrada é válido ou u.u caso contrário.;True;5 / 10;109;52;47.71%
1952;O Cavalo no Xadrez 3D;Grafos;8;"Caso você ainda não saiba, o estudante Alesom Zorzi, um dos nossos heróis do AKM (time da UFFS que fez 6 balões na Primeira Fase da Maratona de Programação), é enxadrista, tendo inclusive conquistado algumas medalhas em torneios importantes.

Das peças do xadrez, uma das peças mais interessantes é o cavalo, a qual pode pular de uma casa de coordenadas (i1, j1) para uma de coordenadas (i2, j2) se e somente se {|i1 - i2|, |j1 - j2|} = {1, 2}.

Inspirado na série Star Trek, Alesom desenvolveu sua própria variante do Xadrez 3D, na qual o jogo é composto não de 1, mas de L tabuleiros de dimensões N × M, cada um num nível numerado de 1 a L. A propósito, as linhas de cada nível são numeradas de 1 a N, e as colunas, de 1 a M, de modo que cada posição do jogo pode ser identificado por uma tripla de coordenadas (i, j, k), sendo i o índice da linha, j o índice da coluna e k o índice do nível. Um cavalo nesta variante do Xadrez 3D pode pular de uma casa de coordenadas (i1, j1, k1) para uma de coordenadas (i2, j2, k2) se e somente se {|i1 - i2|, |j1 - j2|, |k1 - k2|} = {0, 1, 2}. A figura ilustra um cavalo na posição (5, 5, 1) de um jogo com 3 níveis de dimensões 8 × 8, destacando suas posições adjacentes.";A primeira linha da entrada contém unicamente os inteiros N, M e L (8 ≤ N, M ≤ 100, 3 ≤ L ≤ 100). A segunda linha contém uma tripla de coordenadas (i1, j1, k1), e a terceira linha contém uma tripla de coordenadas (i2, j2, k2) (1 ≤ i1, i2 ≤ N, 1 ≤ j1, j2 ≤ M, 1 ≤ k1, k2 ≤ L).;Imprima uma linha contendo um único inteiro, o qual represente o número mínimo de movimentos necessários para um cavalo ir da posição (i1, j1, k1) à posição (i2, j2, k2).;True;8 / 10;301;134;44.52%
1953;Roberto e a Sala Desenfreada;Ad-Hoc;1;"Roberto precisava coletar o numero de matricula dos alunos da sua turma de engenharia de produção e engenharia hídrica para a chamada. Logo, ele teve a excelente ideia de falar para todos os seus alunos gritarem os números de chamada para seus assistentes anotarem. Obviamente, isso não deu certo, e logo a sala entrou em colapso. Todos queriam falar ao mesmo tempo, e com a competição para ver quem conseguia ir embora mais rápido, houve um principio de tumulto, com cadeiras sendo jogadas nos colegas, puxões de cabelo, e socos na cara.

Júnior como é um cara pacífico, está tentando atender todos rapidamente. Porem, como são muitas requisições, está ficando sobrecarregado. Ele então, lembrou que você sabe programar e decidiu dar uma ideia.

Todos os alunos da sala deverão dar os nomes de matricula e a sigla do curso em uma folha, e a chamada sera computada posteriormente. Ele precisa saber quantos alunos de cada curso compareceram. Ele tem os dados, mas infelizmente, não tem a proeficiencia necessária em programação para “codar” isso. Você poderia ajuda-lo a saber, dada uma lista de alunos, quantos são de EPR, quantos são de EHD e quantos são intrusos?";"A primeira linha da entrada um inteiro n ( 1<=n<=100000 ) que indicam o numero de alunos na sala.

As n linhas seguintes contem o numero de matricula e a sigla do curso.

A leitura do programa deve acabar com fim de arquivo.";Seu programa deve imprimir 3 linhas contendo o numero de alunos que são de EPR, EHD, e INTRUSOS no formato: “sigla: quantidade”. ( Ver exemplo de saída ).;False;1 / 10;1435;932;64.95%
1954;Caminhos Evolucionários Possíveis;Grafos;10;"— Já que a senhora é bióloga, poderia nos definir o conceito de ‘espécie’? — Senhora, senhora, volta aqui!

Laura é uma bióloga muito interessada em Computação. Recentemente ela escreveu um programa que, dados os códigos genéticos de dois indivíduos A e B, decide se A é um possível pai genético de B, o que significa que não há nada nos códigos genéticos de ambos os indivíduos que nos permita afirmar com certeza que B não foi gerado por A. Note que, se A é um possível pai genético de B, isso não significa que B seja da mesma espécie que A, pois pode ter ocorrido uma mutação durante a geração de B. Naturalmente, dizemos que um indivíduo A é um possível ancestral genético de um indivíduo B se existe uma sequência de k indivíduos I1, I1, …, Ik tais que I1 = A, Ik = B e, para todo j ∈ {1, …, k - 1}, Ij é um possível pai genético de Ij + 1.

Laura está estudando os fósseis encontrados mês passado em Chapecó para determinar, através dos códigos genéticos extraídos, as espécies que habitavam a região. Mas o conceito de ‘espécie’ é muito polêmico. Laura, que não quer viver situações como a da senhora da imagem acima, preferiu adotar a seguinte definição: dois indivíduos A e B pertencem à mesma espécie se e somente se A é um possível ancestral genético de B e B é um possível ancestral genético de A. O diagrama abaixo ilustra uma situação com 7 indivíduos fossilizados, em que um arco de um indivíduo A para um indivíduo B representa que A é um possível pai genético de B. No exemplo, podemos identificar 3 espécies: I, II e III.



Dados as informações fornecidas pelo programa de Laura, ajude-a a calcular o número de caminhos evolucionários possíveis da espécie de um indíviduo S para a espécie de um indivíduo T. Um caminho evolucionário possível de uma espécie E1 para uma espécie Ek é uma sequência de k espécies E1, E2, …, Ek tal que, para todo j ∈ {1, …, k - 1}, existe algum indivíduo B da espécie Ij + 1 que tem um possível pai genético da espécie Ij.";A primeira linha da entrada consiste de 4 inteiros, N, M, S e T (1 ≤ N ≤ 105, 0 ≤ M ≤ 106, 1 ≤ S, T ≤ N), sendo N o número de indivíduos fossilizados, designados pelos inteiros de 1 a N, cujos códigos genéticos foram obtidos por Laura. Cada uma das próximas M linhas consiste de 2 inteiros, A e B (1 ≤ A, B ≤ N), representando que o programa de Laura considera o indivíduo A um possível pai genético de B.;Seu programa deve imprimir uma linha contendo um único número inteiro, o qual representa o número de caminhos evolucionários possíveis da espécie à qual pertence o indivíduo S para a espécie à qual pertence o indivíduo T. Como esse número pode ser muito grande, seu programa deve apenas imprimir o resto que esse número deixa quando dividido por 109 + 7.;True;10 / 10;342;67;19.59%
1955;See World;Grafos;5;Sob a orientação da Profª Graziela Tonin, os estudantes de Tópicos Engenharia de Software estão desenvolvendo um sistema para ajudar o See World, o novo parque temático da cidade, a alocar orcas em dois tanques gigantes. As orcas, em particular, possuem uma hierarquia social bastante complexa, de pelo menos 4 níveis, e o curioso é que orcas são capazes de vocalizar diferentes dialetos, dependendo do nível da hierarquia social pelo qual se relacionam com seus interlocutores. Uma das maiores dificuldades em manter orcas em cativeiro é que, se duas orcas são postas juntas num mesmo tanque mas falam nenhum dialeto em comum, elas eventualmente brigarão, por não se entenderem, e por serem oriundas de culturas totalmente diferentes. Às vezes elas podem se machucar gravemente ou até morrer. Assim, o See World deseja alocar suas orcas nos seus dois tanques de modo que, se duas orcas forem alocadas num mesmo tanque, seja garantido que elas partilhem de ao menos um dialeto.;A primeira linha da entrada consiste de um inteiro N (1 ≤ N ≤ 103), o qual representa o número de orcas do See World. A propósito, cada orca do See World é representada unicamente por um único código entre 1 e N. Cada uma das N linhas seguintes consiste de N inteiros, de modo que o j-ésimo inteiro da i-ésima linha (1 ≤ i, j ≤ N) é 1 se as orcas de códigos i e j partilham de ao menos um dialeto ou 0 caso contrário.;Imprima uma linha contendo unicamente a expressão Fail! se não é possível alocar as orcas nos tanques como desejado ou a expressão Bazinga! se é possível.;True;5 / 10;1021;558;54.65%
1956;Acácias;Grafos;6;"Talvez você não saiba, mas nem todos os elfos foram embora para Valinor. Há lendas segundo as quais alguns noldor vivem numa floresta de acácias ao norte de Chapecó, embora mortal algum jamais os tenha visto, pois sobre suas habitações paira um encantamento de ocultação entoado pela Senhora Galadriel pouco antes de tomar o último barco para as Terras Imortais. Cada habitação está construída na copa de uma acácia, e há várias pontes de corda élfica conectando pares de habitações, satisfazendo a seguinte tradição antiga: se dois elfos pertencem à mesma família mas moram em casas diferentes, então é possível sair da habitação onde um mora e chegar na habitação onde o outro mora tomando um caminho composto apenas de pontes de corda élfica. Reciprocamente, se dois elfos não pertencem à mesma família, eles não moram na mesma casa, e qualquer modo de sair da casa de um e chegar na casa do outro precisa obrigatoriamente passar pelo chão.

A Terra já enfrentou ameaças terrível, como as de Morgoth e de Sauron. Porém, nenhuma se compara com a ameaça que os próprios homens estão sendo para a Terra. Pois noutro dia um fumante descuidado jogou uma bituca de cigarro próximo à floresta de acácias e o fogo se alastrou. Os elfos conseguiram salvar suas habitações, mas todas as pontes foram destruídas. Agora, eles querem reconstruir as pontes, mas não todas, já que as cordas élficas dos antigos noldor lhes são muitíssimo preciosas. Eles querem reconstruir apenas as pontes que realmente são necessárias para que a tradição antiga mencionada seja novamente satisfeita, e utilizando o mínimo possível de corda élfica. A tarefa de decidir quais pontes devem ser reconstruídas foi designada a você. Se você não encontrar um meio, ninguém mais encontrará.";A primeira linha da entrada consiste de um único inteiro N (1 ≤ N ≤ 104), o qual representa o número de habitações élficas na floresta de acácias, as quais são designadas pelos inteiros de 1 a N. Cada i-ésima (1 ≤ i ≤ N - 1) das N - 1 linhas seguintes consiste de um inteiro não-negativo k seguido por k pares de inteiros j e cij (i < j ≤ N, 1 ≤ cij ≤ 106), indicando que havia uma ponte entre as moradias i e j e que reconstruí-la custa cij metros de corda élfica. Cada ponte é descrita exatamente uma vez na entrada e não há mais de 106 pontes ao todo.;A linha da saída deve consistir apenas de dois valores, separados por um espaço em branco, de modo que o primeiro represente o número de famílias élficas que habitam a floresta de acácias e o segundo represente o custo mínimo necessário para reconstruir as pontes visando satisfazer a tradição antiga.;False;6 / 10;921;313;33.98%
1957;Converter para Hexadecimal;Iniciante;1;"Os dados armazenados no computador estão em binário. Uma forma econômica de ver estes números é usar a base 16 (hexadecimal).

Sua tarefa consiste em escrever um programa que, dado um número natural na base 10, mostre sua representação em hexadecimal.";A entrada é um número inteiro positivo V na base 10 (1 ≤ V ≤ 2 x 109).;A saída é o mesmo número V na base 16 em uma única linha (não esqueça do caractere de fim-de-linha). Use letras maiúsculas, conforme os exemplos.;False;1 / 10;9321;6118;65.64%
1958;Notação Científica;Iniciante;4;"Números em ponto flutuante podem ser bastante extensos para mostrar. Nesses casos, é conveniente usar a notação científica.

Você deve escrever um programa que, dado um número em ponto flutuante, mostre este número na notação científica: sempre mostre o sinal da mantissa; sempre mostre 4 casas decimais na mantissa; use o caractere 'E' para separar a mantissa do expoente; sempre mostre o sinal do expoente; e mostre o expoente com pelo menos 2 dígitos.";A entrada é um número em ponto flutuante de dupla precisão X (de acordo com o padrão IEEE 754-2008). Nunca haverá um número com mais de 110 caracteres nem com mais de 6 casas decimais.;A saída é o número X em uma única linha na notação científica detalhada acima. Veja os exemplos abaixo.;False;4 / 10;10519;3214;30.55%
1959;Polígonos Regulares Simples;Iniciante;2;"Na geometria Euclidiana, um polígono regular é um polígono em que todos os ângulos são iguais e todos os lados tem o mesmo comprimento. Um polígono simples é aquele cujos segmentos de reta não se interceptam. Abaixo pode-se ver vários mosaicos feitos por polígonos regulares.

				

				

				Você deve escrever um programa que, dados o número e o comprimento dos lados de um polígono regular, mostre seu perímetro.";A entrada tem dois inteiros positivos: N e L, que são, respectivamente, o número de lados e o comprimento de cada lado de um polígono regular (3 ≤ N ≤ 1000000 and 1 ≤ L ≤ 4000).;A saída é o perímetro P do polígono regular em uma única linha.;True;2 / 10;12737;6372;50.03%
1960;Numeração Romana para Números de Página;Iniciante;3;"A ECI (Editio Chronica Incredibilis ou Editora de Crônicas Incríveis) é muito tradicional quando se trata de numerar as páginas de seus livros. Ela sempre usa a numeração romana para isso. E seus livros nunca ultrapassam as 999 páginas pois, quando necessário, dividem o livro em volumes.

Você deve escrever um programa que, dado um número arábico, mostra seu equivalente na numeração romana.

Lembre que I representa 1, V é 5, X é 10, L é 50, C é 100, D é 500 e M representa 1000.";A entrada é um número inteiro positivo N (0 < N < 1000).;A saída é o número N escrito na numeração romana em uma única linha. Use sempre letras maiúsculas.;False;3 / 10;7710;3959;51.35%
1961;Pula Sapo;Iniciante;2;"Em cada fase do jogo do Pula Sapo você deve conduzir seu anfíbio através de uma sequência de canos de alturas diferentes até chegar a salvo no cano mais à direita. Entretanto, o sapo só consegue sobreviver se a diferença de altura entre canos consecutivos for de, no máximo, a altura do pulo do sapo. Caso a altura do cano seguinte seja muito alta, o sapo bate no cano e cai. Se a altura do cano seguinte for muito baixa, o sapo não aguenta a queda. O sapo sempre começa em cima do cano mais à esquerda.

Neste jogo, a distância entre os canos é irrelevante, ou seja, o sapo sempre consegue alcançar o próximo cano com um pulo.



Você deve escrever um programa que, dadas as alturas dos canos e a altura do pulo do sapo, mostra se a fase do jogo pode ser vencida ou não.";A entrada é dada em duas linhas. A primeira tem dois inteiros positivos P e N, a altura do pulo do sapo e o número de canos (1 ≤ P ≤ 5 e 2 ≤ N ≤ 100). A segunda linha tem N inteiros positivos que indicam as alturas dos canos ordenados da esquerda para a direita. Não há altura maior do que 10.;"A saída é dada em uma única linha. Se o sapo pode chegar no cano mais à direita, escreva ""YOU WIN"". Se o sapo não consegue, escreva ""GAME OVER"".";True;2 / 10;14013;6088;43.45%
1962;Há Muito, Muito Tempo Atrás;Iniciante;1;"Raul Seixas cantava que nasceu há 10 mil anos atrás e não tinha nada nesse mundo que ele não sabia demais. Os Mamomas Assassinas cantavam que mais de 10 mil anos ""se passaram-se"" [sic] quando eles repetiram a 5a série. Tantos eventos passados e o professor MC ficou curioso para saber em que ano tudo isso aconteceu.

Você deve escrever um programa que, dada uma série de número de anos transcorridos, mostre, para cada número, em que ano o evento aconteceu. Lembre-se de indicar se ele aconteceu A.C. (Antes de Cristo) ou D.C. (Depois de Cristo).";A entrada tem várias linhas. A primeira tem um inteiro positivo N (1 ≤ N ≤ 100000). A seguir existem N linhas. Cada uma dessas N linhas tem um único inteiro não negativo T, que indica o número de anos transcorridos até 2015 D.C. (0 ≤ T < 231).;A saída tem N linhas. Em cada uma, deve ser indicado o ano A em que o correspondente tempo T aconteceu. Veja o exemplo de saída.;False;1 / 10;8173;5147;62.98%
1963;O Filme;Iniciante;1;"Bem-vindo à 3ạ Maratona de Programação Júnior da UFFS. Esperamos sinceramente que as próximas horas sejam muito produtivas para você, que você faça muitos balões e que, acima de tudo, você se divirta! Lembre que você sempre pode pedir esclarecimento quando não entender direito a descrição de um problema. Lembre também que às 17:30 os juízes automáticos serão desligados e a competição entrará em modo blind, de modo que todas as submissões neste período só começarão a ser julgadas às 18:10. Por favor, fique conosco até o fim da competição, trabalhando nas soluções dos problemas até o último minuto, pois, enquanto a competição ainda está ocorrendo, sempre há esperança!

E foi esperança que motivou a Vovó Zazá, uma senhora de 72 anos, a realizar seu sonho de começar um curso universitário. Ela está fascinada com tudo o que diz respeito à Universidade: com as aulas, com a biblioteca, com os projetos de pesquisa e extensão, com o restaurante universitário, mas especialmente com a carteirinha de estudante que ela pode utilizar para pagar meia entrada no cinema. Semana passada, Vovó Zazá e seus colegas de turma foram ao cinema assistir a um filme, mas ficaram estarrecidos com o aumento do preço do ingresso. Revoltados, eles decidiram fazer uma manifestação contra o sistema capitalista opressor, agendada para amanhã na Praça General Bertaso. Vovó Zazá quer colaborar com o movimento fazendo um cartaz com a seguinte palavra de ordem:

QUE ABSURDO! O PREÇO DO CINEMA SUBIU … % !!

Mas ela não é muito boa em Matemática, e está solicitando sua ajuda para calcular a porcentagem de que precisa para completar o cartaz.";A única linha da entrada consiste de dois valores A e B (0.00 < A ≤ B ≤ 1000.00), os quais, fornecidos com exatos dois dígitos após o ponto separador decimal, representam respectivamente o valor antigo e o valor novo do ingresso do cinema.;A única linha da saída deve consistir unicamente de um valor, que represente como uma porcentagem o aumento do valor do ingresso. O valor deve ser acompanhado do símbolo % e conter exatos dois dígitos após o ponto separador decimal.;False;1 / 10;12086;6941;57.43%
1964;A Ira de Khan;Ad-Hoc;9;"Khan é um rapaz muito inteligente que estuda Ciência da Computação na Universidade Federal da Fronteira Sul (UFFS). Porém, ontem à tarde ele e sua namorada discutiram feio e acabaram terminando, o que o deixou muito irado. Como ele tinha aula à noite, resolveu ir a pé para a universidade, a fim de espairecer um pouco. Ao chegar no campus, parou em frente ao obelisco da UFFS e instantaneamente decidiu que não usaria sua ira para o ódio, mas para o amor: ficaria ali parado até que uma moça passasse por ele, com a qual, convidando-a para sair, tentaria reconstruir sua vida. Se mais de uma moça passasse por ele ao mesmo tempo, Khan escolheria a mais bonita.

O campus da UFFS em Chapecó é circundado por uma estrada, à qual se chega através de um único acesso pela cidade de Guatambu, já que o acesso antigo foi desativado. Conforme ilustrado na figura acima, é bem na interseção entre o acesso e a estrada circundante que se encontra o obelisco da UFFS, representado na figura pelo símbolo *.

Ana e Bia são duas amigas que também estudam à noite na UFFS. Ambas são muito saudáveis, apesar de Ana ser mais bonita que Bia, e gostam de se exercitar correndo na estrada circundante antes da aula, sempre no sentido horário. Elas sempre começam a correr juntas em algum ponto da estrada circundante, mas, como correm a velocidades constantes não necessariamente iguais, podem se separar e se encontrar diversas vezes durante a atividade. Ontem elas começaram a correr não depois de Khan chegar ao obelisco, e não havia outras moças no campus.";"A única linha da entrada consiste de cinco inteiros, C, VA, VB, T e D:


	C (0 < C ≤ 1000) representa o comprimento da estrada que circunda o campus, em metros;
	VA e VB (0 < VA, VB ≤ 400) representam as velocidades constantes, em centímetros por segundo, a que correm respectivamente Ana e Bia;
	T (0 ≤ T ≤ 200) representa o tempo, em minutos, entre o início da corrida das moças e a chegada de Khan ao obelisco;
	D (0 ≤ D < C) representa a distância, em metros, no sentido horário do ponto onde Ana e Bia começaram a correr até o obelisco.";Imprima uma linha contendo unicamente o nome da moça que Khan convidou para sair.;True;9 / 10;431;82;19.03%
1965;A Procura por Spock;Ad-Hoc;10;"‘Coxinha’ é o nome dado a uma tradicional comida brasileira que consiste de carne de frango desfiada envolta numa massa e frita. Recentemente, o Sr. Spock, o chefe do Enterprise, um restaurante em Chapecó, ganhou um importante prêmio gastronômico por fazer as coxinhas mais gostosas do mundo. Você devia experimentar uma coxinha do Sr. Spock. Elas são tão maravilhosas que o sabor notoriamente levará você aonde nenhum homem jamais esteve. Mas não é fácil conseguir uma coxinha no Enterprise. A procura por Spock é tanta que é preciso encomendar o pedido com pelo menos 42 dias de antecedência.

O Sr. Spock gosta de fazer coxinhas de diferentes tamanhos e formatos. Para moldar uma coxinha, ele primeiro seleciona ao menos duas formas circulares sem fundo de mesma altura mas diâmetros todos distintos. Em seguida, põe uma forma sobre a outra em ordem decrescente de diâmetro da base até o topo, amarrando-as com um barbante na lateral. Finalmente, usa as formas para dar forma à sua coxinha. A primeira e a segunda figuras exibem a estrutura de formas vista respectivamente de cima e de lado. A terceira e a quarta figuras exibem a coxinha resultante, também vista respectivamente de cima e de lado.



Visando atender melhor seus clientes, o Enterprise também oferece o serviço de entrega a domicílio. Algo importante que o Sr. Spock descobriu é que, para não perderem seu sabor e crocância, as coxinhas devem ser colocadas na embalagem sequencialmente, uma ao lado da outra, sempre deitadas de modo que as bases fiquem perfeitamente perpendiculares ao fundo da embalagem. Ainda, coxinhas consecutivas na sequência devem sempre ter ou suas bases ou seus topos se tocando, e as partes que se tocam devem sempre ter o mesmo diâmetro. Coxinhas cujos topos apontam para a esquerda são chamadas de ‘coxinhas de esquerda’, aquelas cujos topos apontam para a direita são chamadas ‘coxinhas de direita’, e o Sr. Spock usa a orientação das coxinhas para que o cliente saiba o tipo de tempero no recheio de cada uma. Não importando o tamanho, duas coxinhas são vendidas pelo mesmo preço se e somente se são ambas de esquerda ou ambas de direita. Há sempre ao menos uma coxinha de esquerda e ao menos uma coxinha de direita numa embalagem. A figura abaixo ilustra uma embalagem (linha tracejada) contendo 4 coxinhas (linhas contínuas). Como se pode ver, as coxinhas sempre cabem perfeitamente na embalagem.



Você foi contratado para trabalhar na equipe de controle de qualidade do Enterprise. Sua função é pegar as embalagens já cheias, passar as embalagens por um scanner de raio-X e, com base nas medições reportadas pelo scanner, determinar quantas coxinhas de esquerda e quantas de direita há nas embalagens. As medições são feitas da esquerda para a direita, a um espaçamento idêntico à altura das formas usadas na modelagem das coxinhas. Em cada medição é reportada a altura da coxinha dentro da embalagem naquele ponto, mas apenas se o resultado da medição é diferente do resultado da última medição (senão, nada é reportado). Na figura acima, 14 medições são ilustradas pelas linhas pontilhadas. Note que apenas 10 delas são reportadas.

Como você é novo na equipe, seus colegas esconderam de você os preços das coxinhas e querem não apenas que você calcule quantas coxinhas de esquerda e quantas coxinhas de direita há na embalagem, mas também que adivinhe o preço das coxinhas de esquerda e o preço das coxinhas de direita. Para tanto, eles apenas lhe contaram qual o preço total das coxinhas na embalagem, qual a diferença entre os preços e o tipo das coxinhas que são mais caras.";"Três linhas compõem a entrada. A primeira linha da entrada consiste de 3 valores, N, D e P, sendo o primeiro um inteiro e os outros fornecidos com dois dígitos após o ponto separador decimal: N (3 ≤ N ≤ 106) representa o número de medições reportadas pelo scanner, D (0.01 ≤ D ≤ 100.00) representa a diferença entre o preço de uma coxinha de esquerda e o preço de uma de direita, e P (0.01 ≤ P ≤ 10000000.00) representa o preço total das coxinhas na embalagem. A segunda linha da entrada consiste de N inteiros positivos não maiores que 30, os quais representam os resultados das medições reportadas. A última linha da entrada consiste unicamente: de uma coxinha de esquerda, representada por <), se as coxinhas de esquerda são mais caras que as de direita; ou de uma coxinha de direita, representada por (>, caso contrário.";Seu programa deve imprimir duas linhas, informando na primeira a quantidade de coxinhas de esquerda na embalagem e o preço de cada uma, e na segunda as mesmas informações, mas para as coxinhas de direita. A saída deve obedecer rigorosamente o formato esclarecido nos exemplos abaixo.;True;10 / 10;207;37;17.87%
1966;A Volta para Casa;Ad-Hoc;8;"Este problema é dedicado a todos nós que estudamos ou trabalhamos longe da cidade onde moram nossas famílias!

João adora queijo. Muçarela, parmesão, provolone, não importa, ama-os todos. João gosta tanto de queijo que põe queijo em tudo o que cozinha, até mesmo em sobremesas. A família de João é tão louca por queijo quanto ele. Como neste fim de semana ele está indo visitar seus familiares, que moram longe, decidiu levar um pouco do famoso queijo chapecoense para eles. João pretende organizar uma festa assim que chegue à sua cidade natal. A ideia é cortar todo o queijo que levar em cubos de 1 cm de lado e montar uma pirâmide com eles como a pirâmide da figura, que possui 5 cubos de queijo na base. Talvez não seja possível utilizar todos os cubos de queijo na construção da pirâmide. Neste caso, João come todo o queijo que sobrar.



Na loja de queijos de Chapecó, há queijos de vários tamanhos e preços, todos em forma de paralelepípedo. Não é necessário comprar uma peça inteira de queijo. Pode-se solicitar um volume específico, por exemplo:

— Sr. Cleijon, poderia por favor cortar para mim um pedaço de 20 cm × 10 cm × 30 cm de queijo parmesão?

João estava com um orçamento restrito para comprar os queijos para levar para sua família, mas mesmo assim comprou o maior volume de queijo possível respeitando o orçamento que destinou para isso.";A primeira linha da entrada consiste de dois inteiros, N e B (1 ≤ N ≤ 105, 0 ≤ B ≤ 109), os quais representam respectivamente o número de peças de queijo na loja e o orçamento de João. A segunda linha da entrada consiste de N inteiros vi (1 ≤ vi ≤ 104, 1 ≤ i ≤ N), cada um representando o volume, em centímetros cúbicos, da i-ésima peça de queijo. A última linha da entrada consiste de N inteiros pi (0 ≤ pi ≤ 104, 1 ≤ i ≤ N), cada um representando o preço da i-ésima peça de queijo.;Imprima uma linha contendo unicamente o número de cubos de queijo que haverá na base da pirâmide de João.;True;8 / 10;984;128;13.01%
1967;A Fronteira Final;Matemática;8;É o ano de 2.265, e a Universidade da Fronteira Final Sideral (UFFS) já conta com diversos campi espalhados pela galáxia, de modo que todos os cursos de graduação da UFFS são ofertados em todos os campi. Cada curso promove várias atividades por ano, e as atividades promovidas por um curso são as mesmas em todos os campi da UFFS. Para que cada atividade possa acontecer, a Universidade precisa comprar uma certa quantidade de materiais, mas os preços de cada material não são os mesmos para todos os campi. Um lápis, por exemplo, pode custar Ƀ2 (2 bitcoins) para o campus de Chapecó, no planeta Terra, e Ƀ7 (7 bitcoins) para o campus de ShiKahr, no planeta Vulcano. Apesar das diferenças de custo, nunca compensa comprar materiais num campus para enviá-los para outro campus, dados os elevadíssimos custos de transporte e taxas de importação e de exportação. Assim, a fim de que todas as atividades da Universidade possam ser realizadas, a Reitoria precisa transferir para cada curso de cada campus a quantia certa de bitcoins a fim de que os cursos possam eles próprios comprar os materiais.;"A primeira linha da entrada consiste de quatro inteiros positivos, G, A, M e C (G ≤ 600; A, C ≤ 100; M ≤ 2000), os quais representam respectivamente o número de cursos de graduação, o número total de tipos de atividade que podem ocorrer, o número total de tipos de material que podem ser necessários e o número de campi da UFFS. Os cursos são designados na entrada pelos inteiros de 1 a G, os tipos de atividade pelos inteiros de 1 a A, os tipos de material pelos inteiros de 1 a M e os campi pelos inteiros de 1 a C. Seguem, então, três tabelas de inteiros não-negativos. Cada tabela é precedida por uma linha em branco, entre duas colunas consecutivas de uma mesma tabela há uma coluna de espaços de largura 1, e espaços adicionais podem preceder cada inteiro duma tabela a fim de que todas as colunas daquela tabela fiquem alinhadas à direita e haja ao menos um inteiro por coluna que não seja precedido por espaços adicionais. A primeira tabela consiste de G linhas, cada uma contendo A inteiros não maiores que 10, de modo que o j-ésimo inteiro da i-ésima linha representa quantas atividades do tipo j um curso de graduação i precisa realizar no ano corrente. A segunda tabela consiste de A linhas, cada uma contendo M inteiros não maiores que 10, de modo que o j-ésimo inteiro da i-ésima linha representa de quantos materiais do tipo j a realização de uma atividade do tipo i precisa. A terceira e última tabela consiste de M linhas, cada uma contendo C inteiros não maiores que 100, de modo que o j-ésimo inteiro da i-ésima linha representa o preço, em bitcoins, de uma unidade do material do tipo i no planeta em que se situa o campus j.";Imprima G linhas contendo C inteiros cada, de modo que o j-ésimo inteiro da i-ésima linha represente a quantia de bitcoins que a Reitoria precisa transferir para o curso i do campus j. Siga rigorosamente as mesmas regras de espaçamento entre colunas da entrada.;False;8 / 10;375;55;14.67%
1968;A Terra Desconhecida;Matemática;10;"No último dia 12 de outubro comemoramos no Brasil o Dia das Crianças. Quem dera nós adultos vivêssemos mais no mundo das crianças, pois o inverso não tem dado certo, não mesmo. Nós adultos dividimos o mundo em nações, e são as crianças que mais sofrem com as guerras. Nós adultos criamos um sistema de distribuição de riqueza, e são as crianças que mais sofrem com a fome. Mas há uma Terra Desconhecida, não muito distante daqueles que ainda conservam um pouco da sua imaginação, que pertence às crianças. Lá não há guerra, não há pobreza, não há fome. Lá as crianças brincam dia e noite.

Mas uma catástrofe está ocorrendo com a Terra Desconhecida. Uma catástrofe! Os carneiros que habitavam a Terra Desconhecida acabaram ficando velhos, ou doentes, ou engolidos por jiboias. Com isso, os baobás começaram a crescer e tomaram conta da Terra Desconhecida. Agora, os cidadãos precisam se mudar urgentemente. Para auxiliar na evacuação, todos os cidadãos foram numerados de A a B (é óbvio que essa ideia foi dos adultos — eles adoram essas coisas!). Para definir quem seriam os líderes dos grupos durante a evacuação, alguém sugeriu que os líderes deveriam ser todos aqueles que houvessem recebido um número primo (é óbvio que essa ideia foi de uma criança — crianças têm muita imaginação e adoram se deleitar com coisas que dispensam maiores explicações!). Mas logo outra ideia surgiu:

— Um número primo é um número que possui exatamente 2 divisores. E se os líderes fossem aqueles que receberam um número com exatamente N divisores?

Todas as crianças adoraram a ideia. Já os adultos ficaram um longo tempo debatendo sobre como o número N deveria ser escolhido. Quando finalmente o número N foi escolhido, cada cidadão que não fosse líder de um grupo deveria escolher o grupo que quisesse para nele entrar. Nenhuma outra restrição foi imposta aos grupos. Nada impedia, por exemplo, que um grupo consistisse apenas do seu líder. Note que, dependendo do valor de N, nem haveria grupo algum.

Sabendo dos valores de A, B e N, solte a criança dentro de você e tente descobrir o número total de possibilidades para a formação dos grupos. Se, por exemplo, A = 5, B = 8 e N = 4, situação em que os líderes são os cidadãos 6 e 8, há 4 possibilidades:


	ambos os cidadãos 5 e 7 escolhem entrar para o grupo liderado pelo cidadão 6;
	ambos os cidadãos 5 e 7 escolhem entrar para o grupo liderado pelo cidadão 8;
	o cidadão 5 escolhe entrar para o grupo liderado pelo cidadão 6 e o cidadão 7 escolhe entrar para o grupo liderado pelo cidadão 8;
	o cidadão 5 escolhe entrar para o grupo liderado pelo cidadão 8 e o cidadão 7 escolhe entrar para o grupo liderado pelo cidadão 6.";"A única linha da entrada consiste unicamente dos inteiros positivos A, B e N (A ≤ B; B, N ≤ 107).";Imprima uma linha contendo unicamente um valor que represente o número de possibilidades para a formação dos grupos. Como esse número pode ser muito grande, imprima apenas o resto que ele deixa quando dividido por 109 + 7.;False;10 / 10;255;51;20.00%
1969;Generations;Matemática;10;"Ainda não é possível construir uma máquina que permita viagens no tempo a um corpo de matéria. No entanto, o físico Asdrubal Keyla Monteiro já conseguiu desenvolver uma máquina que consegue enviar mensagens através do tempo, comunicando-se com gerações do futuro. Teoricamente também seria possível utilizar essa máquina para enviar mensagens a gerações do passado, mas elas não teriam a tecnologia para receber essas mensagens. Cada mensagem é uma sequência binária de um comprimento fixo estabelecido pela geração com a qual A. K. M. está se comunicando. O fim de cada mensagem é sempre marcado por 11, padrão que obviamente não pode ocorrer em nenhum outro lugar da mensagem, senão a mensagem chegaria truncada ao seu destino. Por exemplo, se o comprimento de mensagem estabelecido pela geração com a qual A. K. M. está se comunicando é 6, há 5 possibilidades para a mensagem enviada para aquela geração:

000011      001011      010011      100011      101011

O interessante desse protocolo de comunicação é que, concatenando-se mensagens, é possível entrar com um único arquivo na máquina para que ela envie uma mensagem para cada uma dentre um conjunto de gerações especificadas. Por exemplo, se A. K. M. deseja se comunicar com as gerações cadastradas na máquina respectivamente como 1, 2 e 3, e se os comprimentos de mensagem estabelecidos pelas gerações são respectivamente 3, 5 e 3, são 3 possibilidades para o arquivo com o qual se pode entrar na máquina:

01100011011      01101011011      01110011011

A máquina que A. K. M. desenvolveu apenas envia mensagens. Por enquanto, ainda não é possível receber mensagens do futuro. A única coisa que é possível receber de uma geração do futuro é a informação do comprimento da mensagem. Frequentemente as gerações atualizam esse valor, e A. K. M. precisa estar atento.";"A primeira linha da entrada consiste de dois inteiros, G e E (1 ≤ G, E ≤ 105), os quais representam respectivamente o número de gerações cadastradas na máquina e o número de eventos descritos na entrada. As gerações são identificadas na entrada pelos inteiros de 1 a G. A segunda linha da entrada consiste de G inteiros, de modo que o i-ésimo inteiro, Ci (2 ≤ Ci ≤ 1010, 1 ≤ i ≤ G), representa o comprimento de mensagem estabelecido pela geração i. Cada uma das E linhas seguintes representa um evento e obedece um dos formatos abaixo:

                    
                        
                            -> A B
                            indica que A. K. M. entrou com um arquivo na máquina para enviar uma mensagem para cada geração de A até B (1 ≤ A, B ≤ G);
                        
                        
                            <- A C
                            indica que o comprimento de mensagem estabelecido pela geração A deve ser atualizado para C (1 ≤ A ≤ G, 2 ≤ C ≤ 1010).";Para cada evento da forma -> A B, imprima uma linha contendo um valor que represente o número de possibilidades para o arquivo com o qual se entrou na máquina. Após processar todos os eventos, imprima uma linha extra contendo um valor que represente o número de possibilidades para o arquivo com o qual A. K. M. entraria na máquina se desejasse enviar uma mensagem para todas as G gerações. Como os números de possibilidades representados em cada linha da saída podem ser muito grandes, imprima apenas o resto que eles deixam quando divididos por 109 + 7.;False;10 / 10;189;36;19.05%
1970;Primeiro Contato;Paradigmas;7;"Quem já teve um Super Nintendo deve lembrar que os cartuchos quase nunca pegavam no primeiro contato com o console. Às vezes, era preciso soprar repetidas vezes nos conectores tanto dos cartuchos quanto do console para que a conexão fosse estabelecida com sucesso. Ainda bem que a tecnologia evoluiu, mas, diga a verdade, você até que sente falta daquele tempo, não?

Fernando é um garoto fascinado por estudar video games antigos. Ele descobriu que é possível inclusive gravar música nos cartuchos antigos do Super Nintendo. Ele tem uma coleção de canções em seu computador e gostaria de gravá-las em alguns cartuchos. Ele sabe que cada cartucho tem capacidade para gravar no máximo um número limitado de minutos de música, e sabe a duração em minutos de cada canção. No entanto, ele está tendo dificuldades para decidir quais canções gravar em quais cartuchos visando maximizar o uso dos cartuchos.";A primeira linha da entrada consiste de dois inteiros positivos N e K (N ≤ 100, K ≤ 3), os quais representam respectivamente o número de canções no computador de Fernando e o número de cartuchos que ele tem. A segunda linha da entrada consiste de N inteiros positivos, os quais representam as durações em minutos de cada música. A última linha da entrada consiste de K inteiros positivos, os quais representam o número máximo de minutos de música que é possível gravar em cada cartucho. Nenhuma música possui mais de 50 minutos, e em nenhum cartucho cabe mais de 50 minutos de música.;Imprima uma linha contendo unicamente o número máximo total de minutos de música que é possível gravar nos cartuchos.;True;7 / 10;777;193;24.84%
1971;Insurreição;Geometria Computacional;10;Numa insurreição, um estudante resolveu fugir da Frida, mas foi seguido por quatro policiais. Num dado momento da perseguição, os policiais gritaram: Pare! Você está cercado! Agora, o estudante quer saber se realmente está cercado, situação em que deve se render, ou se pode continuar fugindo. Dizemos que o estudante está cercado pelos policiais se os policiais não estão todos sobre uma mesma reta e se o estudante se encontra no interior ou na fronteira do único polígono formado pelos policiais (sim, se os policiais não estão todos numa mesma reta, é garantido que o polígono formado por todos eles é único).;A entrada consiste de cinco linhas contendo dois inteiros X e Y cada (0 ≤ X, Y ≤ 104). As quatro primeiras linhas representam as coordenadas dos quatro policiais, e a última linha representa as coordenadas do estudante. Dois corpos não podem ocupar o mesmo lugar no espaço.;A saída deve consistir de exatamente três linhas com exatamente três caracteres cada, representando se o estudante deve se render ou se pode continuar correndo. Os exemplos esclarecem quais caracteres devem ser impressos.;False;10 / 10;641;61;9.52%
1972;Nêmesis;Grafos;6;Nêmesis, a deusa da vingança, irou-se contra Euterpe, a musa dos prazeres, e a pôs num labirinto infestado de bestas. Agora, apenas Hércules poderá salvar Euterpe. Iniciando sua jornada em alguma posição do labirinto, Hércules só pode avançar para uma posição do labirinto guardada por uma besta se matar a besta. Embora terrível, uma besta nunca deixa a posição que guarda. Ainda, bestas diferentes podem exigir de Hércules quantias diferentes de energia para serem mortas. Ajude Hércules a salvar Euterpe gastando o mínimo de energia possível, sabendo que ele só pode se mover nas direções horizontal e vertical e, apesar de ser um herói invencível e de possuir energia infinita, Hércules não consegue destruir as paredes do labirinto.;"A primeira linha da entrada consiste de dois inteiros, N e M (2 ≤ N, M ≤ 500), os quais representam o número de linhas e o número de colunas no labirinto. As próximas N linhas descrevem o labirinto e possuem exatamente M caracteres cada, os quais podem ser:


	H, se aquela é a posição onde Hércules começa sua jornada;
	E, se aquela é a posição onde Euterpe está presa;
	., se aquela posição é uma posição livre;
	#, se aquela posição é uma parede;
	um inteiro X entre 1 e 9, se aquela posição é guardada por uma besta que requer X de energia hercúlea para ser morta.";Imprima uma linha contendo unicamente a quantidade mínima de energia necessária para Hércules chegar até Euterpe. Se não é possível a Hércules chegar até Euterpe, imprima uma linha contendo unicamente a palavra ARTSKJID.;False;6 / 10;872;373;42.78%
1973;Jornada nas Estrelas;Iniciante;5;Após comprar vários sítios adjacentes na região do oeste catarinense, a família Estrela construiu uma única estrada que passa por todos os sítios em sequência. O primeiro sítio da sequência foi batizado de Estrela 1, o segundo de Estrela 2, e assim por diante. Porém, o irmão que vive em Estrela 1 acabou enlouquecendo e resolveu fazer uma Jornada nas Estrelas para roubar carneiros das propriedades de seus irmãos. Mas ele está definitivamente pirado. Quando passa pelo sítio Estrela i, ele rouba apenas um carneiro daquele sítio (se o sítio tem algum) e segue ou para Estrela i + 1 ou para Estrela i - 1, dependendo se o número de carneiros em Estrela i era, respectivamente, ímpar ou par. Se não existe a Estrela para a qual ele deseja seguir, ele interrompe sua jornada. O irmão louco começa sua Jornada em Estrela 1, roubando um carneiro do seu próprio sítio.;A primeira linha da entrada consiste de um único inteiro N (1 ≤ N ≤ 106), o qual representa o número de Estrelas. A segunda linha da entrada consiste de N inteiros, de modo que o i-ésimo inteiro, Xi (1 ≤ Xi ≤ 106), representa o número inicial de carneiros em Estrela i.;Imprima uma linha contendo dois inteiros, de modo que o primeiro represente o número de Estrelas atacadas pelo irmão louco e o segundo represente o número total de carneiros não roubados.;False;5 / 10;11386;3147;27.64%
1974;Além da Escuridão;Grafos;10;"E esta foi a 3ạ Maratona de Programação Júnior da UFFS! Esperamos sinceramente que você tenha se divertido! Se porventura você não conseguiu resolver algum problema, discuta-o depois com seus colegas e professores, estude os conteúdos que você ainda não domina, e encare o problema novamente. Todos os problemas desta competição estarão disponíveis no URI Online Judge assim que possível. Se você nunca havia participado de uma Maratona de Programação antes e gostou, venha participar do Clube de Programação para se aperfeiçoar, aprender mais e treinar!

                     

					Mas antes de dizermos adeus, temos ainda mais uma tarefa para você. O oeste catarinense está na escuridão total, pois um tornado devastou a região. Antes, a infraestrutura elétrica da região era maravilhosa, de modo que duas torres de energia eram conectadas diretamente por cabos de energia se e somente se entre essas torres existia uma estrada. O tornado não danificou as estradas, apenas as torres e cabos de energia. De todas as empresas que se propuseram a restaurar a infraestrutura elétrica da região, a que apresentou a melhor proposta foi a Pikachu S. A. Para começar os trabalhos, a Pikachu S. A. exigiu do Governo algumas informações. Se essas informações não satisfizerem algumas condições, a Pikachu S. A. rescindirá o contrato e o Governo terá de contratar uma empresa, para nossa tristeza. A saber, as condições exigidas pela Pikachu S. A. são:


	A empresa não construirá nenhuma torre nova, apenas restaurará todas as torres antigas.
	A empresa não conectará duas torres por cabos de energia se essas torres não eram antes conectadas.
	A empresa fará apenas o mínimo de conexões entre torres necessário para que as torres estejam todas interconectadas, direta ou indiretamente, e gastará o mínimo possível de metros de cabeamento.
	Cada torre que for restaurada precisará receber um funcionário da Pikachu S. A. para monitorar a torre diariamente. Este funcionário pode ser um funcionário efetivo ou um estagiário.
	Se os funcionários que duas torres receberem forem estagiários, então deve existir uma estrada conectando as duas torres diretamente.
	Se os funcionários que duas torres receberem forem efetivos, então não deve existir uma estrada conectando as duas torres diretamente.
	O número de funcionários efetivos deve ser o menor possível.


Uma curiosidade acerca da infraestrutura antiga é que a cada torre havia sido atribuído um código binário, de modo que a conexão entre duas torres, se existisse, custasse, em metros de cabeamento, exatamente o comprimento do maior subcódigo binário comum aos códigos de ambas as torres. Por exemplo, se os códigos de duas torres eram respectivamente 000011 e 001100, o custo da conexão entre essas duas torres era, e continua sendo, 4.";A primeira linha da entrada contém dois inteiros, N e M (2 ≤ N ≤ 103, 0 ≤ M ≤ 105), os quais representam respectivamente o número de torres e o número de conexões na infraestrutura antiga, sendo cada conexão descrita numa das M linhas seguintes por dois inteiros, i e j (1 ≤ i, j ≤ N), os quais identificam as torres que eram conectadas. Por fim, a i-ésima das N últimas linhas da entrada descreve o código binário, de comprimento positivo não maior que 100, da torre i.;"Se não é possível satisfazer as condições da Pikachu S. A., imprima uma linha contendo unicamente a carinha :[. Senão, imprima duas linhas: a primeira contendo unicamente a carinha :]; e a segunda contendo três valores, representando respectivamente o número de estagiários necessários, o número de funcionários efetivos e o custo mínimo necessário para restaurar a infraestrutura.";True;10 / 10;40;11;27.50%
1975;Pérolas;Ad-Hoc;7;"VI é uma professora de cálculo muito excêntrica, sempre que corrige as provas dos alunos (Que por sinal são provas dificílimas), ela anota todas as pérolas que encontra enquanto corrige, para que no dia da entrega ela possa escrever todas no quadro, para deixar os alunos envergonhados e que eles nunca mais errem as mesmas coisas.

					Sempre que a bronca termina e as provas são entregues, os alunos tentam descobrir quem foi que teve mais pérolas no quadro. Como a cada prova os números de pérolas aumentam e os alunos tem que estudar muito pois a cada semana acontece uma nova prova de cálculo, eles não tem tempo para verificar todas as provas e ver quem apareceu mais vezes no quadro.

					Sabendo que você é programador eles pediram sua ajuda para mostrar qual foi o aluno que teve mais pérolas escritas no quadro naquele dia.";A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém três inteiros P, A e R (1 ≤ P, A, R ≤ 104), indicando respectivamente, o número de pérolas, número de alunos e a quantidade de respostas dadas por cada aluno. Segue P linhas com as pérolas escritas no quadro que terão no máximo 1000 caracteres. Em seguida terão A alunos, para cada aluno a primeira linha será seu nome com no máximo 100 caracteres minúsculos de 'a' até 'z', seguindo as R linhas mostrando suas respostas. A entrada termina quando P = A = R = 0, e não deve ser processada.;Para cada saída, você deverá imprimir o nome do aluno que teve mais aparições no quadro, em caso de empate seu programa deverá mostrar todos os alunos com mais aparições separados por vírgulas em ordem alfabética.;False;7 / 10;585;162;27.69%
1976;Matrizes;Paradigmas;10;"Gustavo em uma de suas aulas de pré-cálculo aprendeu a fazer multiplicações de matrizes, como ele é um aluno muito esperto, rapidamente percebeu que quando fazemos a multiplicação, a ordem com que as matrizes são multiplicadas pode influenciar na quantidade total de contas necessárias para encontrar a resposta.

					Apesar de muito dedicado, Gustavo está com pouco tempo para realizar trabalhos da faculdade, pois atualmente está estudando muito para a maratona de programação, então ele pediu sua ajuda em um tarefa solicitada na aula de pré-cálculo.
					A professora passou como exercício diversas matrizes para que a turma treinasse a multiplicação, então Gustavo precisa de um programa que dado as dimensões das matrizes, o informe qual a melhor ordem de realizar as multiplicações levando em consideração a menor quantidade de contas necessárias para gerar a resposta.

					Como você é amigo de Gustavo e tem mais tempo do que ele, resolveu ajudá-lo, mas com algumas regras:
				    1ª Gustavo sempre terá que informar matrizes onde a multiplicação na ordem dada é sempre possível;
				    2ª Caso haja mais que uma solução ótima, seu programa irá informar somente a quantidade de contas necessárias para a multiplicação.";A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 1000), indicando o número de matrizes a serem multiplicadas. Segue então N linhas cada uma contendo dois inteiros L e C (1 ≤ L, C ≤ 100), indicando o número de linhas e colunas de cada matriz. A entrada termina quando N = 0 e não deverá ser processada.;Assuma que as matrizes em nomes A1, A2, ..., AN. Para cada caso de teste, seu programa deverá imprimir uma linha contendo a ordem das matrizes a serem multiplicadas (Seguindo o exemplo de saída), em caso de mais de uma solução possível seu programa deverá imprimir apenas a quantidade total de contas necessárias.;False;10 / 10;614;70;11.40%
1977;Não Posso me Atrasar;Grafos;8;"Anne é uma aluna muito aplicada do curso de ciência da computação. Ela não gosta de chegar atrasada de forma alguma, sempre tenta chegar no máximo 18:00 em ponto que é o horário de início das aulas. Porém o trânsito na cidade de Teresópolis entre 16:30 e 19:00 é muito lento, então um trajeto que normalmente levaria 10 minutos, leva um tempo bem maior. Anne sai do seu trabalho às 17:00 e leva aproximadamente X minutos para chegar ao ponto, porém os ônibus em direção à faculdade passam exatamente as 17:30, nesse horário passam diversos ônibus com trajetos diferentes que levarão à faculdade, caso Anne os perca, terá de esperar até as 17:50 até passar mais ônibus. Do ponto de ônibus que ela geralmente espera, até a faculdade, levará facilmente mais de 30 minutos se não escolher o ônibus que tenha o melhor trajeto. Anne precisa saber que horas ela chegará a faculdade escolhendo o melhor trajeto e se chegará atrasada.  
					 
					Sua tarefa é, a partir de N rotas possíveis, dizer que horas Anne chegará na faculdade indo pelo melhor trajeto, sabendo que ela deve sair da varzea e chegar ao alto, com pesos T de tempo entre um local e outro, levando em consideração o trânsito (o T da varzea ao alto não é o mesmo que do alto a varzea, pois o transito no sentido contrário pode ser diferente) e informar se houve ou não atraso. Assuma que Anne sempre chegará no ponto antes de 17:50 e que sempre terá um caminho entre a Várzea e o Alto.";A entrada contém vários casos de teste. A primeira linha contém três inteiros separados por um espaço, X (1 ≤ X ≤ 50), N (1 ≤ N ≤ 90) e V (1 ≤ V ≤ 10), indicando o tempo que Anne levá para ir do trabalho ao ponto, a quantidade possíveis rotas e o número de pontos que ela poderá passar. Seguem-se, então, N linhas, cada uma com duas strings não-vazias e únicas contendo os locais das rotas que Anne pode passar e um inteiro separados por espaço, O, D e T (1 ≤ T ≤ 60), indicando que existe uma rota para ir do local O para o local D, e que tal trajeto levará T minutos. A entrada termina quando X = N = V = 0, e não deve ser processada.;"Seu programa deverá produzir duas linhas na saída. Uma contendo o horário de chegada a faculdade e outra contendo ""Ira se atrasar"" ou ""Nao ira se atrasar"".";False;8 / 10;862;177;20.53%
1978;Câmeras;Paradigmas;9;"O coordenador do curso de ciência da computação pretende instalar novas câmeras em um corredor da faculdade, no intuito de poder identificar os alunos que costumam ficar ali em horário de aula, assim quando esses alunos forem reclamar que o curso está difícil ele poderá facilmente mostrar para o aluno que está difícil pois o mesmo não tem frequentado muito as aulas.

					As câmeras que serão instaladas são de uma tecnologia um pouco diferente, elas tem visão de 360 graus sem a necessidade de fazer o giro, o coordenador irá instalar as câmeras no teto do corredor e todas estarão exatamente centrada entre as paredes do corredor. Como essas câmeras são caras e consomem muita energia, o coordenador terá que usar as câmeras já existentes no corredor, que por motivo de economia estavam desligadas, porém nem todas são do mesmo modelo, assim cada uma tem um alcance de visão diferente.

					Sabendo que você é o melhor programador do curso, o coordenador pediu para que você determinasse a quantidade mínima de câmeras necessárias para cobrir todo o corredor, sem deixar nenhum espaço sem visão, ou dizer se terá que comprar mais câmeras.

					Assuma o corredor como um plano cartesiano, onde o tamanho das abscissas é L com início em 0, e o tamanho das ordenadas é A. As câmeras estão sempre posicionadas sobre o eixo das abscissas.";A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém três inteiro N, L, A (1 ≤ N ≤ 10000), indicando respectivamente o número de câmeras presentes na faculdade, largura do corredor e a distância entre as duas paredes do corredor. Segue N linhas contendo dois inteiros X e R (R ≥ A), indicando a posição onde a câmera está instalada e o seu alcance de visão. A entrada termina com N = 0 e não deve ser processada;"Para cada caso de teste você deverá imprimir a quantidade mínima de câmeras necessárias para cobrir todo o corredor. Caso não seja possível você deverá imprimir ""Tera que comprar mais cameras."".";False;9 / 10;112;41;36.61%
1979;Salas Separadas;Grafos;6;"Luiz é um coordenador muito dedicado do curso de ciência da computação. Ele sabe a importância de incentivar seus alunos a esforçarem-se em algoritmos, por isso decidiu realizar uma competição de programação individual entre estes, com direito a premiação.

					Luiz gostaria de evitar ao máximo a possibilidade de fraude na competição, e por isso não gostaria que houvessem dois candidatos amigos na mesma sala durante a realização da prova.

					Infelizmente Luiz só dispõe de duas salas para a realização da prova, mas felizmente conhece muito bem seus alunos, e sabe dizer com facilidade quem é amigo de quem. Entretanto, ele precisa saber se será possível, apenas com as duas salas disponíveis, combinar os alunos da forma que deseja e para isso solicitou a você, aluno dedicado do curso,
					que crie um programa para ajudá-lo.";"A entrada é composta de diversos casos de teste. A primeira linha de cada caso de teste consiste em um inteiro N (2 ≤ N ≤ 100) indicando o número de alunos que irão realizar a prova.
					Cada N par de linhas seguintes descreve as relações de amizade de cada participante, de forma que a primeira linha 
					consiste no identificador do participante, e a linha seguinte consiste em uma lista descrevendo uma quantidade M de 
					alunos (1 ≤ M < N) com os quais aquele participante possui uma relação de amizade.
					Considere que não é relevante o número de pessoas dispostas em cada sala, e que, se existe uma relação de amizade entre 
					alunos x e y, existe uma relação de amizade entre y e x. A entrada termina quando N = 0, e não deve ser processada.";"Para cada caso de teste, deverá ser impressa uma linha contendo a resposta ""SIM"", caso seja possível dispor os alunos 
					de forma que não hajam dois amigos realizando a prova na mesma sala, e ""NAO"", caso contrário.";False;6 / 10;1407;413;29.35%
1980;Embaralhando;Ad-Hoc;5;"Gabriel é aluno do curso de ciência da computação, ele sempre gostou de jogos de lógica, um exemplo é o cubo mágico, os alunos ficam admirados em ver a facilidade que ele tem para resolvê-lo. Gabriel decidiu montar seu próprio jogo envolvendo lógica, a primeira informação que ele irá precisar para montar o jogo é de quantos anagramas é possível formar com certa quantidade de caracteres distintos sem espaço.

					Como ele tem se dedicado muito para maratona de programação, ele acaba não tendo tempo para verificar isso, por isso precisará de sua ajuda.
					Sua tarefa é, dado um conjunto de caracteres distintos e sem espaços, informar quantos anagramas é possível formar.";A entrada é composta por vários casos de teste. Cada caso de teste terá uma única linha S com no máximo 15 caracteres. A entrada termina quando S = 0 e não deve ser processada.;Para cada caso de teste você deverá imprimir quantos anagramas são possíveis formar com os caracteres informados.;False;5 / 10;5626;1753;31.16%
1981;Embaralhando de Novo;Ad-Hoc;9;"Agora que você já ajudou o Gabriel com os primeiros dados necessários para seu jogo de lógica, ele necessita de sua ajuda novamente.
					Dessa vez ele precisa que seu programa consiga tratar casos onde as palavras podem ter letras repetidas.";A entrada é composta por vários casos de teste. Cada caso de teste terá uma única linha, com uma palavra S (1 ≤ S ≤ 10000), composta apenas com caracteres entre 'a' e 'z'. A entrada termina quando S = 0 e não deve ser processada.;Para cada caso de teste você deverá imprimir quantos anagramas distintos são possíveis de se formar com os caracteres informados. Como os números podem ser grandes, imprima a resposta módulo 100000007.;False;9 / 10;1008;205;20.34%
1982;Novos Computadores;Geometria Computacional;6;"Acaba de chegar novos supercomputadores para os laboratórios de ciência da computação. Os funcionários do curso estão muito ocupados e as máquinas são muito pesadas, sendo assim necessitará de bastante tempo e de vários funcionários para tirarem elas do lugar, portanto nem tão cedo eles conseguirão buscar as máquinas.

					

                	Figura 1: Os pontos representam como estão dispostos os computadores no depósito.

					Os funcionários precisam isolar as máquinas com uma fita de segurança, para poder evitar que as pessoas esbarrem ou mexam. Como na Serra tudo é muito caro, eles precisam comprar o mínimo de fita possível para passar em volta dos computadores. Devido ao peso das supermáquinas eles irão apenas dar uma volta de fita nas máquinas que estão nas bordas, sem tirar nenhum computador do lugar.

					

					Figura 2: A linha vermelha representa como deve ser feito o isolamento.
					
					Você como um aluno muito entusiasmado com as máquinas irá auxiliar na compra da fita, dizendo para eles qual a menor quantidade possível de fita se deve comprar para que seja possível isolar todos os computadores.";A entrada é composta por vários casos de teste. Cada caso de teste inicia com um inteiro N (3 ≤ N ≤ 2000), em seguida terão N linhas, cada uma contendo dois inteiros X e Y (-2000 ≤ X, Y ≤ 2000), indicando as coordenadas de cada supercomputador dentro do depósito. A entrada termina com N = 0 e não deve ser processada.;"Para cada caso de teste você deverá imprimir: ""Tera que comprar uma fita de tamanho x."", onde x é o total de fita necessário para cobrir todos os computadores, com duas casas decimais.";True;6 / 10;687;354;51.53%
1983;O Escolhido;Iniciante;2;As aulas do Prof. Jatobá estão dando o que falar. Os representantes do MEC vieram até a UNIME de Lauro de Freitas para saber mais detalhes sobre essa nova forma de ensinar Algoritmos. Além disso, eles queriam selecionar 1 aluno para participar da OBI-Tec (Olimpíada Brasileira de Informática Nível Técnica) e representar a rede Kroton na competição, pois sabem que lá estão os melhores. Para selecionar o melhor, eles têm disponível uma lista com o número de inscrição de cada aluno e a sua respectiva nota na disciplina. Sua tarefa é ajudar o pessoal do MEC a encontrar o aluno mais apto a representar a instituição e quem sabe garantir sua vaga. Só tem um detalhe, se a nota mais alta não for maior ou igual a 8, você deverá imprimir “Minimum note not reached”.;"O arquivo contém primeiro a quantidade de alunos (3 <= n <= 100) existentes e em seguida, os n alunos contendo o número da matrícula (0 < m < 1000000) de cada um, seguido da respectiva nota (0 <= nota <= 10.0, com 1 casa decimal).

Obs.: as notas não serão repetidas. Ou seja, não tem chance de ter dois alunos com a mesma nota.";"Você deve imprimir o número do estudante que obteve a maior pontuação ou ""Minimum note not reached"" (sem aspas) caso nenhum estudante tenha tirado uma nota maior ou igual a 8.";False;2 / 10;9616;5598;58.22%
1984;O Enigma do Pronalândia;Iniciante;4;Os cientistas da NASA descobriram um novo exoplaneta que fica a 1 bilhão de anos luz da terra. O nome desse planeta foi batizado de Pronalândia em homenagem aos novos cientistas que estão sendo formados no PRONATEC. Só que o mais incrível ainda está por vir. Ao observar melhor o planeta eles conseguiram identificar que os habitantes da Pronalândia estavam querendo se comunicar por uma numeração. Só que a numeração que encontraram está invertida e como encontraram muitas delas chamaram você para conseguir automatizar esse processo. Logo, dado um número grande, sua tarefa é imprimir esse número invertido.;"O arquivo contém apenas uma linha de teste que é o número encontrado (0 < n < 9999999999).

Obs.: Perceba que o número lido é muito alto para armazenar em uma variável do tipo int, logo você irá precisar utilizar o tipo long, que para a leitura e impressão em C, você deve utilizar o %llu.";Imprimir o número lido invertido. Não esqueça de imprimir a quebra de linha (\n) no final, caso contrário você receberá (Presentation Error).;False;4 / 10;12428;5555;44.70%
1985;MacPRONALTS;Iniciante;1;"O MacPRONALTS está com uma super promoção, exclusivo para os competidores da primeira Seletiva do MaratonaTEC. Só que teve um problema, todos os maratonistas foram tentar comprar ao mesmo tempo, com isso gerou uma fila muito grande. O pior é que a moça do caixa estava sem calculadora ou um programa para ajudá-la a calcular com maior agilidade, eis que surge você para fazer um programa para ajudar a coitada e aumentar a renda do MacPRONALTS. Segue o cardápio do dia contendo o número do produto e seu respectivo valor.

1001 | R$ 1.50

1002 | R$ 2.50

1003 | R$ 3.50

1004 | R$ 4.50

1005 | R$ 5.50";"A primeira entrada informada é a quantidade de produtos comprados (1 <= p <= 5). Para cada produto segue a quantidade (1 <= q <= 500) que o consumidor comprou.

Obs.: não poderão ser informados números de produtos repetidos.";Você deve imprimir o valor da compra com duas casas decimais.;False;1 / 10;7501;5798;77.30%
1986;Perdido em Marte;Ad-Hoc;2;"No filme ""Perdido em Marte"", o astronauta Mark Watney está presumidamente morto depois de ter sido apanhado numa tempestade, onde é deixado para trás enquanto o resto da equipe planejam evacuar o planeta e regressar à Terra. Watney encontra-se assim sozinho e abandonado, com algumas provisões e a sua sagacidade, destreza e espírito para sobreviver e encontrar uma maneira de enviar um sinal para casa, sabendo que mesmo que saibam que ele está vivo, é muito vaga a hipótese de um salvamento.

 Watner, ainda vivo, necessitava entrar em contato com a NASA para informar que ainda estava vido, porém no lugar onde estava não tinha um meio de comunicação com a Terra, foi então que ele lembrou da missão da Pathfinder. que a nave aterrou no Planeta Vermelho a 4 de Julho de 1997 e libertou um pequeno rover com seis rodas, chamado Sojourner, para estudar o terreno vizinho. A missão tinha a duração de umas poucas semanas mas acabou por durar quase três meses. A nave comunicou pela última vez com as equipas na Terra a 27 de Setembro. Ele analisando no mapa percebeu que o Pathfinder ficou próximo de sua ""estação"", então o mesmo pensou em usá-lo como comunicação.

Porém a única comunicação que existia era uma câmera que rotacionava 360 graus em seu próprio eixo, para registrar fotos em Marte e mandar para a NASA, como a distância da Terra para Marte são de 55,76 milhões de km (Não é exato, pois depende da posição da rotação com a terra, como referência o SOL), uma mensagem que é enviado da terra para Marte dura um tempo de 30 minutos (tecnologia da época), hoje é menor, e acredite, a mensagem andava na velocidade da luz, quando se criar a Dobra(Star Trek) isso será tranquilo.

Watner Teve uma ideia, como a Câmera gira 360 Graus, ele estabeleceu em cada ponto, equidistante, no círculo, um valor Hexadecimal, na qual a Câmera iria apontar o código desejado, numa fração de segundos, E Watner iria anotar e verificar a lestra correspondente na sua tabela ASCII, conforme a figura abaixo.



Você foi selecionado para trabalhar na NASA e terá que ajudar Watner a sobreviver, faça um programa que converta em hexadecimal para caracter para traduzir a msensagem, as letras só serão de ""a-z"" 26 caracteres.

Exemplo: n=3, depois teremos três duplas de hexadecimais ""6F 6C 61"", e se verificar na tabela as letras correspondentes a 6F =o, 6C=l e 61=a, transformando em ""ola"".";"Ele terá um número n (1<=n<=100) indicando o tamanho da palavra, e ""n"" vezes de duas casas hexadecimais, na qual significa uma letra.

Veja o exemplo abaixo:";Somente a mensagem traduzida;True;2 / 10;400;258;64.50%
1987;Divisibilidade Por 3;Ad-Hoc;2;"No mundo da matemática, para sabermos se um grande número é divisível por outro existe uma regra, chamada de regra de divisibilidade. Um número natural é divisível por 3 quando a soma de todos os seus algarismos forma um número divisível por 3, ou seja, um múltiplo de 3.

Ex1: 1.104 é divisível por 3?

Resposta: SIM. É divisível por 3, pois seus algarismos quando somados: 1 + 1 + 0 + 4 = 6, que é um número divisível por 3 (porque 6 ÷ 3 = 2, que é um número natural).

Ex2: 2.791.035 é divisível por 3?

Resposta: SIM. 2.791.035 é constituído de algarismos que somados: 2 + 7 + 9 + 1 + 0 + 3 + 5 = 27, gera um número divisível por 3 (pois 27 ÷ 3 = 9, número natural).";"O arquivo de entrada conterá dois números, n (1< n <10) indicando o número de algarismos de m, (1< m < 1000000000).
					 A entrada termina com o fim do arquivo (EOF).";Seu programa deve fornecer o número da soma dos algarismos de m e logo depois apresentar “sim” caso o número seja divisível por 3 ou “nao” caso não seja. Não esqueça o fim de linha após o produto, caso contrário seu programa apresentará a mensagem: “Presentation Error”.;False;2 / 10;2848;1336;46.91%
1988;Circuitos Turísticos;Grafos;10;"Todo mundo está ciente da existência do bem conhecido arquipélago Nordenskjold, situado no Oceano Ártico e pertencente ao Krasnoyarsk Krai da Rússia. Este arquipélago é constituído por um grupos de ilhas N e M rotas aquáticas entre alguns pares de ilhas. Cada percurso liga um par de ilhas e para cada par, há no máximo um percurso ligando-os.

                    Considerando a popularidade do Archipelago Nordenskjold, autoridades de Krasnoyarsk estão preocupadas com o seu valor turístico. O valor turístico do arquipélago é dado pelo número total de ilhas que pertencem a pelo menos um ""circuito turístico"". Um circuito turístico é um caminho que começa e termina na mesma ilha que visita pelo menos três diferentes ilhas, nunca visita a mesma ilha mais de uma vez e usa apenas as rotas aquáticas para ir de uma ilha para a próxima.

                    Autoridades de Krasnoyarsk quer saber o número mínimo de rotas aquáticas adicionais que devem ser construídas de modo que cada ilha pertença a pelo menos um circuito turístico. Sua tarefa é escrever um programa que responde a esta pergunta.";A entrada contém vários casos de teste. Cada teste é descrito em várias linhas. A primeira linha contém dois números inteiros N e M (3 <= N <= 100, 1 <= M <= 1000) que indicam o número de ilhas e o número de vias aquáticas, respectivamente. Cada ilha é identificada por um número entre 1 e N. Cada uma das M linhas seguintes contém dois inteiros U e V (1 <= U <V <= N), indicando que existe um percurso de ligação aquático ilhas U e V. Pode-se supor que em cada caso de teste existe no máximo um percurso aquático que liga o mesmo par de ilhas. A última linha da entrada contém o número -1 duas vezes e não deve ser processado como um caso de teste.;Para cada caso de teste, imprima em uma única linha um inteiro que representa o número mínimo de vias aquáticas adicionais que devem ser construídas de modo que cada ilha pertença a pelo menos um circuito turístico.;False;10 / 10;44;7;15.91%
1989;Fazendo Nada;Matemática;3;"Um jovem casal faz o seu tempo ser o mais produtivo possível. Esta atividade é muito estressante, então eles decidiram ""perder"" algum tempo assistindo sua série de TV favorita.

                    A série tem N temporadas, e cada temporada pode ter um numero diferente de capítulos de acordo com o seu sucesso, a disponibilidade de atores, tempo de produção e outros fatores externos. Cada capítulo tem uma duração de exatamente M minutos.

                    Para manter-se com o enredo, antes de assistir a cada nova temporada, eles assistem, sem qualquer descanso, todos os capítulos de todas as temporadas anteriores. Isto os fez preocupar com quanto tempo irão gastar com este passatempo, que deve mantê-los calmos. Eles precisam de sua ajuda para que eles voltem para a situação estressante que tinham.";A entrada contém vários casos de teste. Cada teste é descrito em duas linhas. A primeira linha tem dois inteiros N e M representando respectivamente quantas temporadas a série tem e a duração em minutos de cada capítulo (1 <= N <= 105, 1 <= M <= 106). A próxima linha tem N inteiros C_i representando quantos capítulos cada temporada tem ordenados cronologicamente. (1 <= C_i <= 100 para 1 <= i <= N). A última linha da entrada contém o número -1 duas vezes e não deve ser processado como um caso de teste.;Para cada caso de teste, imprima em uma única linha um inteiro que representa o número de minutos que o casal gasta em assistir toda a série.;False;3 / 10;487;306;62.83%
1990;Equilíbrio;Matemática;9;"A média e a mediana geralmente confunde os alunos por causa de sua ortografia semelhante, mas eles são muito diferentes conceitos. Neste problema, vamos trabalhar com a média e a mediana de um conjunto constituído por N pares inteiros distintos, onde N é ímpar. A média de tal conjunto é definida, como é habitual, como a soma dos números divididos por N, enquanto que a mediana é o único elemento no conjunto que é maior do que (N-1) / 2 dos seus elementos, e menor do que o outro (N-1) / 2 elementos do conjunto. Por exemplo, se o conjunto é {0, 2, 6, 4, 13}, a média é 5 enquanto a mediana é 4.

                    Nosso objetivo é tornar a vida do aluno mais fácil através da geração de conjuntos ""equilibrados"", isto é, conjuntos compostos por um número ímpar de inteiros, todos distintos entre si, onde a média e a mediana coincidem. Por exemplo, o conjunto {0, 2, 6, 4, -2} é equilibrado, uma vez que tem N = 5 inteiros diferentes, e a média e mediana, são ambos iguais a 2.

                    O procedimento seguinte tem sido sugerido para a obtenção de conjuntos equilibrados. Um conjunto com um número par de inteiros distintos é escolhido, e um número inteiro adicional diferente de cada elemento do conjunto é adicionada a ele, de tal modo que o conjunto resultante é equilibrado. Nós queremos que você verifique se o procedimento indicado funciona. Por isso a sua tarefa é, dado N-1 inteiros distintos, com N ímpar, contar o número de conjuntos equilibrados que podem ser formados, seguindo o procedimento descrito.";A entrada contém vários casos de teste. Cada caso de teste é descrito em duas linhas. A primeira linha contém um único número inteiro positivo N que indica o número de elementos do conjunto equilibrado deve ter (3 <= N <= 499). A segunda linha contém N-1 inteiros distintos Z_i que representam os elementos dados do conjunto (-1014 <= Z_i <= 1014 para 1 <= i <= N-1). A última linha da entrada contém o número -1, e não deve ser processado como um caso de teste.;Para cada caso de teste, imprima por linha um inteiro que representa o número total de diferentes conjuntos equilibrados que pode ser obtido através da adição de um número inteiro para o conjunto dado, tal como se explica na descrição do problema.;False;9 / 10;176;78;44.32%
1991;Fábrica de Pontes;Geometria Computacional;10;"Na área central da Macedónia há um rio seguindo a direção LesteOeste. Habitantes da região querem construir uma ponte que cruza o rio na direção NorteSul, uma tarefa para a qual foram contratados os fabricantes mais baratos que eles conhecem, a Short Bridge Construction Company. Como demonstrado por seu nome, esta empresa de construção especializada na construção de pontes mais curtas possíveis para cada rio.

                    A primeira coisa que a empresa faz é modelar as margens do rio (Norte e Sul). Cada um deles é considerado como sendo formado por semicírculos de diferentes raios, alternativamente orientado para um lado ou para o outro, com todos os seus centros colineares. As duas retas que são definidas pelos centros dos semicírculos de cada margem tem a direção LesteOeste e são separados por uma distância A uma da outra. O valor A é a largura do rio. Note que se ambas as margens estão alinhadas, isto é, a margem do Norte não começa nem termina mais a oeste ou para o leste do que na margem sul.

                    Na figura a seguir você pode ver o modelo de um determinado rio. Na margem do Norte o semicírculo mais para o Oeste está orientado para o Norte, enquanto que na margem sul o semicírculo mais para o Oeste está orientado para o Sul. Em cada margem, a orientação do próximo semicírculo alterna. A ponte mais curta possível no sentido NorteSul é a mostrada na figura.

                    
                        


                    Sua tarefa é ajudar a empresa de construção a encontrar o comprimento mais curto possível da ponte que liga as duas margens do rio, no sentido Nortesul.";"A entrada contém vários casos de teste. Cada caso de teste é descrito por três linhas. A primeira linha contém um número inteiro A, denotando a largura do rio em metros (3 <= A <= 104). A segunda linha descreve a margem norte do rio, enquanto que a terceira linha descreve sua margem sul.

                    A descrição de cada margem começa com um número inteiro C que indica o número de semicírculos que são utilizados para modelar esta margem (1 <= C <= 1000). Isto éseguido por um caractere ""N"" ou ""S"", que significa, respectivamente, que o semicírculo mais para o Oeste nesta margem é orientado para o Norte ou mais para o Sul. A descrição termina com C números inteiros R_i, representando o raio em metros dos semicírculos que formam a margem (1 <= R_i <A / 2 para 1 <= i <= C). Os semicírculos são dados em ordem, do que estiver situado mais para o Oeste (raio R_1) para o situado mais ao Leste (raio R_C). As orientações dos semicírculos alternam entre Norte e Sul após o primeiro semicírculo, cuja orientação é dada como descrito acima. Assumese que em cada caso de teste ambas as margen estão alinhadas, o que implica que a soma dos raios dos semicírculos que formam cada margem é o mesmo.

                    O final da entrada é indicado por uma única linha contendo o número -1.";Para cada caso de teste, imprima uma única linha contendo um número racional que representa o comprimento em metros da ponte mais curta que liga as duas margens do rio dada no sentido NorteSul. O resultado deve ser arredondado para o número racional mais próximo com 2 dígitos decimais. Em caso de empate, o número deve ser arredondado para cima. Notese que você deve sempre imprimir 2 dígitos após o ponto, mesmo que isso signifique terminar com um zero.;True;10 / 10;91;22;24.18%
1992;Ganhando Tempo;Matemática;2;"Gabriela dirige um ônibus escolar. Sendo uma das poucas mulheres que têm esse trabalho, ela é sempre ridicularizada pelos motoristas do sexo masculino. Para melhorar a sua condição, ela decidiu que além de dirigir com responsabilidade ela vai conduzir de forma mais eficiente. Sua ideia é terminar a sua rota gastando o mínimo de tempo possível, sem violar qualquer regra de trânsito.

                    O ônibus que Gabriela dirige tem um sistema de condução muito moderno que lhe permite ajustar a aceleração para qualquer número real instantaneamente. Assim, a aceleração é constante em intervalos, mudando para outra aceleração sempre que Gabriela decidir. Se v é a velocidade do ônibus em um determinado instante de tempo, e a sua aceleração que permanece constante ao longo de um período de tempo t, a velocidade de rotação no final desse período será v+ at. Além disso, o ônibus vai passar a uma distância de at² / 2 + vt durante esse período de tempo. As regras de trânsito impede os veículos de usar uma aceleração maior do que A, ou uma desaceleração menor que D, ou seja, a aceleração a em qualquer momento deve satisfazer -D <= a <= A. Além disso, existem pontos de verificação ao longo da rota do ônibus onde a velocidade deve situarse dentro de um determinado intervalo dado. 

                    Gabriela sabe de antemão a localização dos pontos de verificação, o comprimento total do percurso, e as constantes A e D. No início do percurso, a velocidade e a aceleração do ônibus são ambos 0. Não há restrições adicionais em relação a velocidade ou a aceleração que o ônibus deve ter no final do percurso (em particular, não é necessário parar no final). Seu trabalho é usar esses dados para determinar o tempo mínimo que Gabriela precisa para terminar o percurso sem violar as regras.";A entrada contém vários casos de teste. Cada caso de teste é descrito usando várias linhas. A primeira linha de cada caso de teste contém quatro inteiros N, L, A e D. N representa o número total de pontos de verificação que estão presentes na rota de Gabriela (1 <= N <= 105). L indica o comprimento do percurso em metros (2 <= L <= 107). A e D representam, respectivamente, o número máximo permitido da aceleração e desaceleração para o ônibus (1 <= A, D <= 100). Cada uma das N linhas seguintes descrevem um ponto de verificação diferente usando três inteiros X, V e W, que representam, respectivamente, a distância entre o ponto de verificação e o ponto de início do trajeto (1 <= X <= L-1), a velocidade mínima, e a velocidade máxima permitida para o ônibus no momento em que passa por esse ponto de verificação (1 <= V, W <= 100). Suponha que, em cada caso de teste dos pontos de verificação os pontos são dados em ordem de distância ascendente desde o ponto de partida da rota, e não existem dois pontos de verificação que estão à mesma distância do ponto de partida. Neste problema, o comprimento é expresso em metros, a velocidade em m/s e a aceleração em m/s2. O fim da entrada é indicado por uma linha contendo o número 1 quatro vezes, e não deve ser processado como um caso de teste.;Para cada caso de teste, imprima uma única linha contendo um numero que representa o tempo mínimo (em segundos) necessário para Gabriela terminar seu percurso sem violar qualquer regra de tráfego, ou um asterisco se é impossível fazer isso. O resultado deve ser arredondado para o número racional mais próximo com 2 dígitos decimais. Em caso de empate, o número deve ser arredondado para cima. Notese que você deve sempre imprimir 2 dígitos após o ponto, mesmo que isso signifique terminar com um zero.;False;2 / 10;12;2;16.67%
1993;Ele é Preguiçoso;Grafos;8;"Como todos sabemos, Humberto é realmente preguiçoso. Ele é tão preguiçoso que ele coloca o nariz para fora da janela para o vento soprar para ele. Obviamente, ele nunca trabalhou em toda a sua vida. No entanto, ele teve sorte e ganhou um monte de dinheiro na loteria. Com parte desse dinheiro ele comprou um terreno vazio, e construiu várias casas no interior do mesmo, para onde se mudou com sua família e amigos. Assim, Humberto pode ir em linha reta a partir de qualquer ponto em seu terreno a qualquer outro, sem ter que fazer desvios por causa do desenho urbano (por uma questão de simplicidade, consideramos os objetos no terreno de Humberto como pontos, para que eles não interfiram no caminho do Humberto).

                    Infelizmente, isso não foi suficiente para Humberto, por isso, para caminhar menos ele decidiu instalar algumas catapultas em pontos estratégicos de seu terreno. Cada catapulta pode enviar-lhe a partir do ponto em que está instalada para qualquer ponto a uma certa distância fixa (que depende do alcance da catapulta).

                    Mas, apesar de simplificar a sua vida, as catapultas fizeram a escolha do caminho no terreno uma verdadeira dor de cabeça, porque Humberto quer andar menos possível. Cansado dos seus problemas, ele decidiu usar o resto do seu dinheiro para contratá-lo para lhe dizer a distância mínima que tem que caminhar para se deslocar de um determinado ponto para outro no terreno.";A entrada contém vários casos de teste. Cada teste é descrito em várias linhas. A primeira linha contém cinco inteiros N, P_X, P_Y, L_X e L_Y. N representa o número de catapultas no terreno (1 <= N <= 100). O par (P_X, P_Y) indica as coordenadas no plano XY do ponto de partida para Humberto, enquanto o par (L_X, L_Y) indica o ponto de destino (1 <= P_X, P_Y, L_X, L_Y <= 109). Cada uma das próximas N linhas descreve uma catapulta diferente, utilizando três inteiros C_X, C_Y e F, que indicam o ponto (C_X, C_Y) onde a catapulta de força F está instalada. Isto significa que Humberto pode se mover, sem andar, a partir do ponto (C_X, C_Y) para qualquer ponto do plano que está a uma distância de exatamente F de (C_X, C_Y). Assume-se que em cada caso de teste todos os pontos indicados no plano são diferentes. O fim da entrada é indicado por uma única linha que contém o número -1 cinco vezes, e não deve ser processado como um caso de teste.;Para cada caso de teste, imprima uma única linha contendo um número racional que representa a distância mínima que Humberto tem que andar a fim de chegar, a partir do ponto de partida, ao destino, usando alguma ou nenhuma das catapultas. Arredonde a resposta para o numero mais próximo com dois dígitos decimais. Em caso de empate, arredondar o número para cima. Imprimir exatamente dois dígitos depois do ponto decimal, mesmo que isso signifique acabar com o número 0.;False;8 / 10;432;117;27.08%
1994;Imperialismo;Grafos;8;"A ambição de conquista e expansão é uma doença muito conhecida no planeta Terra... E também em todo o universo.

                    No planeta ""Imperius"" várias fortalezas foram construídas uma de cada vez e cada uma delas, menos a primeira, estavam ligadas no momento da sua construção para uma fortaleza previamente construída por um caminho direto, para fins comerciais.

                    Imperius estava se tornando um dos planetas mais pacífico e próspero no universo, até que eles pararam de construir mais fortalezas. Naquele momento, surgiram N diferentes impérios (numeradas de 1 a N), cada um deles dominando uma fortaleza diferente. E a sede de conquista se apoderou de Imperius. Assim, a cada ano, exatamente um dos impérios vivos conquista cada império vizinho, e domina cada fortaleza pertencente a eles. Dois impérios são considerados vizinhos se existem duas fortalezas unidas por um caminho, cada uma dominada por um império diferente destes dois.

                    Eventualmente um único império vai dominar cada fortaleza. Sua tarefa é encontrar o número mínimo de anos que isso pode acontecer.

                    Como um exemplo, no lado esquerdo da figura abaixo um cenário possível é mostrado, onde seis fortalezas são inicialmente dominadas por seis impérios diferentes. Cada fortaleza é identificada com o número do império que a domina. Se o império 2 conquistou cada vizinho no primeiro ano, a situação seria como na figura central. Finalmente, se o império 5 conquistou seus impérios vizinhos, ele acabaria dominando cada fortaleza, como pode ser visto no lado direito da figura.";A entrada contém vários casos de teste. Cada teste é descrito em duas linhas. A primeira linha contém um inteiro N (2 <= N <= 104) representando o número de fortalezas no planeta Imperius. A linha seguinte contém N-1 inteiros P_i indicando que a fortaleza i + 1 foi ligada a fortaleza P_i (1 <= P_i <= i para 1 <= i <= N-1). A última linha da entrada contém um único -1 e não deve ser processado como um caso de teste.;Para cada caso, imprima a saída em uma única linha com um número inteiro representando o número mínimo de anos de modo que um único império possa dominar todas as fortalezas.;True;8 / 10;276;107;38.77%
1996;Construção de Tendas;Paradigmas;9;"O Comitê Internacional de Preparação de Tendas (ICPC) tem um procedimento peculiar para a criação de suas tendas. O procedimento depende de uma visão bidimensional das tendas.

                    Uma determinada tenda é criada utilizando N pólos de diferentes alturas. Para configurar as tendas, o ICPC usa o seguinte procedimento. Primeiro, N+2 pontos são marcadas no chão, todos na mesma linha, de modo que dois pontos consecutivos são sempre separados por uma distância de exatamente dois pés. Depois disso, uma vara é colocada verticalmente sobre cada um dos N pontos centrais. Finalmente, a tenda é estendida sobre as varas, juntando-se a extremidade superior de cada vara com a extremidade superior das varas vizinhas. As primeiras e últimas varas são unidas com os pontos livres no chão.

                    A figura a seguir mostra três possíveis formas de criação de uma tenda usando as instruções mencionadas antes, com alturas das varas de 4, 5, 7, 8 e 9.

                     
                        

                    Depois de anos de trabalho duro, o ICPC chegou à conclusão de que, a fim de obter tendas úteis e robustas, é necessário que o ângulo formado por duas lonas consecutivas na extremidade de uma vara, medido em seu interior, é estritamente inferior a 180 graus. Na figura, somente a tenda na esquerda satisfaz esta condição. A tenda no meio tem um ângulo superior a 180 graus nas varas de altura 4 e 7, enquanto a tenda da direita tem um ângulo de exatamente 180 graus na vara de altura 8. Dizemos umatenda é válida quando cumpre a recomendação da ICPC.

                    É claro que, dado o número de varas e suas alturas, há um grande número de diferentes maneiras de colocá-los, alguns dos quais irão produzir telas válidas e alguns não. A tarefa é, através destes dados, contar o número de diferentes tendas válidas que podem ser criadas. Duas tendas válidas são consideradas diferentes se a sequência de alturas das varas em um deles, visto da esquerda para a direita, é diferente da sequência de alturas do outro, visto da mesma maneira.";A entrada contém vários casos de teste. Cada caso de teste é descrito em duas linhas consecutivas. A primeira linha contém um inteiro N que indica o número de varas (1 <= N <= 60). A segunda linha contém N inteiros H_i representando as alturas das varas em pés (1 <= H_i <=109 para 1 <= i <= N). A última linha da entrada contém um único -1 e não deve ser processado como um caso de teste.;Para cada caso de teste, imprima em uma única linha um inteiro representando o número de tendas diferentes válidas que podem ser configurados usando as varas dadas.;True;9 / 10;37;8;21.62%
1997;Branco e Preto;Ad-Hoc;2;"O famoso jogo Preto e Branco é um jogo individual que é jogado com um conjunto de fichas idênticas. Cada ficha tem duas faces com cores diferentes. Surpreendentemente, essas cores são preto e branco.

                    O jogo começa colocando N fichas formando uma única linha. Existe um objetivo que é uma dada sequência de N cores preto ou branco. Em um único movimento, o jogador pode escolher um grupo de fichas consecutivas e inverter a sua cor, em outras palavras, para cada ficha no grupo, a cor que estava voltada para cima, esta voltada para baixo, e a que estava voltada para baixo está virada para cima. O jogo termina quando as cores voltadas para cima são iguais ao objetivo.

                    Barby acaba de descobrir este jogo e logo ela percebeu que você pode sempre ganhar invertendo cada ficha individualmente, se necessário. Para tornar o jogo mais desafiador para ela, ela queria ganhar no menor número possível de movimentos. Note que Barby apenas se preocupa com quantos movimentos ela faz, e não importa quantas fichas são invertidas em cada jogada. Para saber o quão bem Barby está jogando, ela lhe pediu para fazer um programa que, dada a posição inicial da ficha e o objetivo, mostra o menor número possível de movimentos para ganhar o jogo. Você vai dizer que não?";"A entrada contém vários casos de teste. Cada caso de teste é descrito em uma única linha que contém duas palavras não vazias S e T de igual tamanho e, no máximo, 500 caracteres cada. S indica a posição inicial da ficha, enquanto T representa o objetivo. Ambas as palavras contêm apenas letras maiúsculas ""B"" e ""N"", que representam, respectivamente, branco e preto. A última linha da entrada contém dois asteriscos (""*"") separados por um espaço único e não deve ser processado como um caso de teste.";Para cada caso de teste de saída, imprima uma única linha com um inteiro representando a quantidade mínima de jogadas necessárias para passar as fichas da posição inicial S para o objetivo T.;False;2 / 10;305;211;69.18%
1998;Awari 2.0;Ad-Hoc;5;"Awari é um jogo de um jogador das Antilhas, que é jogado com caixas e pedras em vez de cartões. Outra versão de Awari é jogado com N caixas numeradas de 1 a N, cada uma contendo, no início do jogo, zero ou mais pedras. As regras deste jogo são muito simples, porque há apenas um tipo de movimento válido, que consiste em escolher uma caixa numerada i que contém exatamente i pedras, e em seguida, pegar essas pedras da caixa, a fim de usá-las para adicionar uma única pedra para cada caixa numerada de 1 a i-1; a pedra restante é mantida pelo jogador. Estes movimentos são aplicados em sucessão, desde que exista uma caixa i que contém exatamente i pedras. Quando isso não é mais verdade, o jogo termina. O jogador ganha se, nesta fase, cada caixa está vazia, e perde caso contrário.

                    Na figura a seguir, no lado esquerdo há um possível estado inicial de um jogo com n = 5 caixas (os círculos) contendo P1 = 0, P2 = 1 , P3= 3, P4 = 0 e P5 = 2 pedras (os pontos pretos). Se a caixa de número 3, que contém P3 = 3 pedras, foi escolhida para dar o próximo passo, a configuração resultante seria a do mostrado no lado direito da figura. Além disso, para o jogador teria agora uma pedra em seu poder.

                    

                    Dado o estado inicial das caixas, você deve determinar se é possível ganhar o jogo, ou seja, se houver uma sequência de movimentos válidos que depois de todas as caixas são deixadas vazias.";Cada caso de teste é descrito usando duas linhas. A primeira linha contém um inteiro N, indicando o número de caixas (1 ≤ N ≤ 500). A segunda linha contém N números inteiros Pi, que representa o número de pedras nas caixas no início do jogo, a partir da caixa 1 para a caixa N, respectivamente (0 ≤ P_i ≤ 500 para i = 1, ..., N) . Em cada caso de teste que haja pelo menos uma caixa não vazia, isto é, existe i de 1 a N tal que Pi ≠ 0. O fim da linha de entrada é uma linha que contém o número -1.;"Para cada caso de teste, você deve imprimir uma única linha contendo um único caractere. Este caractere deve ser a letra maiúscula 'S' se é possível ganhar o jogo; Caso contrário, deve-se a letra maiúscula 'N'.";True;5 / 10;548;275;50.18%
1999;Baile de Reconciliação;Matemática;4;"Todos os anos, os reinos da Cubiconia, Quadradonia e Noglônia organizam um baile para comemorar o fim da guerra que devastou a região por um longo tempo. Algum número de nobres de cada reino é convidado a participar do evento, e espera-se cada par de convidados de diferentes reinos dancem juntos exatamente uma vez. Ou seja, cada convidado de Cubiconia deve dançar uma vez com todos os convidados de Quadradonia e Noglônia, e da mesma forma a cada convidado Quadradonia deve dançar uma vez com todos Noglônia. Porém, os hóspedes de um mesmo reino nunca devem dançar juntos.

                    Para ajudar a organizar o baile, o numero total de danças é determinado antecipadamente, então é preciso ter cuidado ao escolher o numero de convidados de cada reino. Por exemplo, se você decidir que o baile tem N = 20 danças, uma possibilidade é convidar 6 nobres de Cubiconia, 2 de Quadradonia e 1 de Noglônia, que pode ser representado pela expressão (6, 2, 1). Esta é uma opção válida, porque a quantidade total de danças seria 6 × 2 + 6 × 1 + 2 × 1 = 20.

                    Tradições, cuja origem ninguém se lembra, indicam que o número de convidados Cubiconia deve ser maior ou igual ao número de convidados de Quadradonia, e por sua vez o número de convidados Quadradonia deve ser maior ou igual o número de convidados Noglônia. Assim, para N = 20 danças há exatamente 5 possíveis formas de escolher o número de convidados em cada reino (5, 4, 0), (4, 2, 2), (10, 2, 0), (20, 1, 0) e o acima mencionado (6, 2, 1).

                    Com tantas restrições, o comitê organizador da cerimônia tem problemas em encontrar o número de convidados de cada reino. Sua missão é ajudar o comitê a contar as diferentes formas que os convidados podem ser escolhidos para um baile com N danças. Duas maneiras de escolher o número de convidados de cada reino são consideradas diferentes se eles diferem no número de convidados em pelo menos um dos reinos.";Cada caso de teste é descrito usando uma linha, que contém um inteiro N que indica o número total de danças que o baile deve ter (1 ≤ N ≤ 104). O fim da entrada é indicado por uma linha contendo o número -1.;Para cada caso de teste, imprima uma única linha contendo o numero de formas diferentes em que o numero de convidados de cada reino podem ser escolhidos para um baile com exatamente N danças, com todas as restrições mencionadas no problema.;False;4 / 10;302;179;59.27%
2000;Adeildo da Odonto;Strings;10;Adeildo faz odontologia, mas sua verdadeira paixão é por strings. Ele tem várias strings favoritas. Em uma de suas disciplinas ele conheceu um colega que também é fã de strings, e que também tem suas strings favoritas. Ele gostaria de saber se as strings tem algo em comum. Ele pediu que você descubra se duas strings possuem a mesma quantidade de substrings distintas.;A primeira linha da entrada contém um inteiro T, representando a quantidade de casos teste. Cada caso teste consiste de duas linhas. Cada uma das duas linhas contém uma string não-vazias de tamanho até 100000, contendo apenas letras do alfabeto minusculas.;"Para cada caso teste imprima uma linha com ""s"" (sem aspas) se as duas strings tem a mesma quantidade de substrings distintas e ""n"" caso contrário.";False;10 / 10;830;122;14.70%
2001;Bile;Matemática;10;"Bile é um garoto esperto que gosta bastante de recorrências. Ele estava participando de uma competição em que a melhor sequência ganharia um premio. Bile criou uma sequência F em que os N primeiros valores são conhecidos, e para descobrir o valor de FK, para um K  N, é utilizada a formulação abaixo.



Para N  K: FK = 1*FK-1 + 2*FK-2 + ... + N*FK-N



Mas Bile não sabe calcular de forma rápida os valores de sua sequência e pediu a sua ajuda.

No primeiro caso de teste: N = 2, K = 3, F1 = 2, F2 = 5, F3 = F2 + 2*F1 = 9, F4 = F3 + 2*F2 = 19 ...";A entrada consiste em vários casos de teste. Cada caso de teste consiste de duas linhas. A primeira linha de cada caso de teste contém dois inteiros, N ( 2 ≤ N ≤ 100 ) e K ( N ≤ K ≤ 1018 ), representando o número de valores inicialmente conhecidos da sequência de Bile. A segunda linha consiste de N inteiros Fi ( F1, F2, … ,FN ) e ( 0 ≤ Fi ≤ 1010 ) que representam os valores inicialmente conhecidos. A entrada termina com final de arquivo (EOF).;Para cada caso de teste imprima o valor do FK e a soma de todos os elementos da função de Bile menores ou iguais a FK, separados por um espaço. Suas respostas devem ser apresentadas em módulo 303700049.;False;10 / 10;518;55;10.62%
2002;Casa de Rogério;Grafos;9;"Rogério é um menino bem esperto e malino. Ele gosta de usar seu tempo livre para criar jogos de tabuleiro.
O último jogo criado por Rogério foi o ""Casa de Rogério"".


Nesse jogo, o tabuleiro tem tamanho NxM. Cada célula do tabuleiro possui um valor inteiro.
O Rogério (Personagem do jogo) começa na célula superior esquerda e a casa de Rogério na célula inferior direita.
O objetivo do jogo é mover Rogério até a casa com menor custo possível.


Cada rodada, você pode mover Rogério para uma das células adjacentes (não é permitido mover Rogério nas diagonais). O custo para mover Rogério de uma célula de valor X para uma célula de valor Y é definido pela função C(X,Y).




	C(X, Y) = min(X,Y) XOR (min(X,Y)+1) XOR ... XOR max(X,Y).



Perceba que se X é igual a Y, C(X,Y) = X. XOR é a operação binária conhecida como ""ou exclusivo"".

Para facilitar a entendimento da função C(X,Y), seu código em C++ está apresentado abaixo:";"A entrada consiste de vários casos de teste.
A primeira linha de cada caso de teste contém dois inteiros N (1 ≤ N ≤ 100) e M (1 ≤ M ≤ 100), representando o tamanho do tabuleiro.
Em seguida, N linhas, cada uma com M inteiros, representando os valores das células do tabuleiro (o valor de cada célula pode variar de 1 até 1000000000000). A entrada termina com final de arquivo (EOF). E garantido que a resposta pode ser representada por um inteiro de 64 bits com sinal.";Para cada caso de teste, imprima o menor custo de mover Rogério até a Casa de Rogério;True;9 / 10;287;77;26.83%
2003;Domingo de Manhã;Iniciante;2;"Domingo é dia de feira. Logo de manhã muitas pessoas se deslocam para o polo de lazer da Parangaba, onde acontece uma feira, conhecida por ser a maior da cidade. Na feira da Parangaba você pode encontrar de tudo.
Todos os domingos, Bino faz compras na feira. Ele sempre marca com seu amigo Cino de se encontrarem no terminal de ônibus da Parangaba às 8h, para irem juntos comprar na feira. Porém, muitas vezes Bino acorda muito tarde e se atrasa para o encontro com seu amigo.
Sabendo que Bino leva de 30 a 60 minutos para chegar ao terminal. Diga o atraso máximo de Bino.";A entrada consiste em múltiplos casos teste. Cada caso de tese contém uma única linha contendo um horário H (5:00 ≤ H ≤ 9:00)  que Bino acordou. A entrada termina com final de arquivo (EOF).;"Para cada caso de teste, imprima ""Atraso maximo: X"" (sem aspas), X indica o atraso maximo (em minutos) de Bino no encontro com Cino.";False;2 / 10;8036;4097;50.98%
2004;Enisvaldo Com Fome;Ad-Hoc;5;"Enisvaldo sempre foi um menino muito magrinho. Ele sempre comia pouco, e só comia pão com ovo. Certo dia, ele foi ao médico e descobriu que possuía uma pedra no rim que precisou ser removida cirurgicamente.

Ele decidiu que era hora de mudar sua alimentação, e comer corretamente. Ele foi ao nutricionista, que lhe deu várias dicas. É prejudicial a saúde consumir mais de 100g ou menos de 10g de um mesmo tipo de alimento por dia. Mas se não puder consumir a quantidade ideal, ele deve preferencialmente comer o máximo possível do tipo de alimento.

O nutricionista também falou que é muito importante comer o máximo possível de tipos diferentes de alimentos. A mãe de Enisvaldo sempre fazia as compras pra ele, mas dessa vez ele quis fazer as compras para escolher os alimentos que ele vai comer nesse dia. Enisvaldo foi fazer as compras mas percebeu que possuía pouco dinheiro, então ele só poderia comprar um alimento de cada tipo, mas ele queria consumir a maior quantidade de alimentos possíveis.

Como Enisvaldo não está conseguindo descobrir a quantidade em gramas de alimentos que ele conseguirá consumir, ajude-o. Dada uma lista de alimentos, cada alimento com seu respectivo tipo e peso, diga a quantidade máxima em gramas que Enisvaldo deve consumir. Lembrem-se, Enisvaldo pode comer apenas um alimento de cada tipo.";A primeira linha da entrada contém um valor Q, que representa a quantidade de casos teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 1000) que representa a quantidade de alimentos diferentes no supermercado. Cada uma das próximas N contém dois inteiros T (1 ≤ T ≤ 100) e P ( 1 ≤ P ≤ 1000 ), representando o tipo e o peso do alimento respectivamente.;Imprima a maior quantidade de gramas de alimentos que Enisvaldo deve consumir.;False;5 / 10;991;332;33.50%
2005;Fracil Bolado;Ad-Hoc;9;"Fracil tem uma criação de N ratos e possui M alimentos para alimenta-los.
Cada rato possui um nível de fome.
Cada alimento possui um nível de sustento.
Quando um rato com nível de fome f é alimentado com um alimento com nível sustento maior ou igual a f, o rato fica saciado e seu nível de fome é zerado.
Quando um rato com nível de fome f é alimentado com um alimento com nível sustento menor que f,
o novo nível de fome do rato é f-s.

Para alimentar seus ratos, Fracil segue uma estratégia:


	Os alimentos serão fornecidos aos ratos de forma sequencial, primeiro é fornecido o alimento com índice 1, depois o de índice 2 e assim sucessivamente.
	Fracil tem preferência em alimentar os ratos que tenham o maior nível de fome e que possam ser saciados com a comida da vez.
	Caso não tenha nem um rato que possa ser saciado, Fracil tem preferência em alimentar os ratos com maior nível de fome.
	Cada alimento só poderá ser fornecido uma vez e sem divisão (não se pode fornecer partes de um alimento para ratos diferentes).


 

Fracil quer saber quantos ratos vão estar saciados quando acabarem os alimentos.";"A entrada consiste em vários casos de teste.
A primeira linha de cada caso de teste contém dois inteiros N (1 ≤ N ≤ 1000) e M (1 ≤ M ≤ 1000),
representando a quantidade de ratos e a quantidade de alimentos.
A segunda linha de cada caso de teste contém N inteiros, representando os níveis de fome dos ratos (1 ≤ fi ≤ 1000).
A terceira linha de cada caso de teste contém M inteiros, representando os níveis de sustento dos alimentos (1 ≤ si ≤ 1000). A entrada termina com final de arquivo (EOF).";Para cada caso de teste, imprima a quantidade de ratos saciados.;False;9 / 10;739;136;18.40%
2006;Identificando o Chá;Iniciante;1;"Degustação de chá às escuras é a habilidade de identificar um chá usando apenas seus sentidos do olfato e paladar.

Isto faz parte da Competição Ideal de Consumidores de Chá Puro (da sigla em inglês ICPC), que um programa de TV local está organizando. Durante o show, um bule de chá completo é preparado e são entregues uma xícara de chá para cada um dos cinco competidores. Os participantes devem cheirar, saborear e avaliar a amostra, de modo a identificar o tipo de chá, que pode ser: (1) o chá branco; (2) chá verde; (3) chá preto; ou (4) chá de ervas. No final, as respostas são verificadas para determinar o número de suposições corretas.

Dado o tipo de chá real e as respostas fornecidas, determinar o número de participantes que receberam a resposta correta.";A primeira linha contém um inteiro T representando o tipo de chá (1 ≤ T ≤ 4). A segunda linha contém cinco inteiros A, B, C, D e E, que indica a resposta dada por cada competidor (1 ≤ A, B, C, D, E ≤ 4).;A saída contém um inteiro representando o número de concorrentes que obtiveram a resposta correta.;False;1 / 10;10344;8115;78.45%
2007;Falha Ao Cercar Legumes;Matemática;9;"Aos 40 anos, Alice e Bob decidiram se aposentar. Depois de mais de duas décadas de trabalho como exemplos de protocolos de rede, livros teóricos sobre jogos e vários outros textos, eles estavam cansados. Para permanecerem ativos, eles decidiram praticar a jardinagem.

Alice e Bob plantaram vários vegetais em um enorme campo. Depois de terminado, eles perceberam que as plantas precisariam de proteção contra animais selvagens, então eles decidiram construir uma cerca para protegê-los. O campo é representado pelo plano XY e cada vegetal está em um ponto diferente. A cerca é representada como um polígono no plano. De qualquer forma, nem todo polígono é uma cerca válida. Ela deve ser uma cerca de um único polígono simples, com cada um dos seus lados paralelos a um dos eixos. Claro que, o polígono deve conter todos os pontos que representam as plantas. Uma cerca demasiado perto das plantas ou para si poderia tornar difícil para caminhar ao redor, de modo que cada lado do polígono precisa ser afastado de todas as plantas e todos os lados não adjacentes.

Infelizmente, Alice e Bob contrataram uma multinacional desagradável para a construção da cerca. A empresa tinha um monte de advogados na folha de pagamento, mas não há bons designers da cerca, pois eles não cumpriram com todos os requisitos. Eles construíram uma cerca que é um polígono simples com lados paralelos aos eixos e cujos lados são longe de plantas e em si. No entanto, eles se esqueceram de fazer a cerca conter todas as plantas! Alice e Bob querem ajuda para avaliar a extensão do problema.

Uma vez que nem todas as plantas são igualmente valioso para eles, eles querem saber o valor total das plantas que foram deixados do lado de fora da cerca.";"A primeira linha contém dois inteiros P e V, que representam, respectivamente, o número de plantas e o número de vértices de cima do muro poligonal (1 ≤ P, V ≤ 105). Cada uma das linhas próximas a P descreve uma planta diferente, com dois inteiros Xp e Yp, indicando as coordenadas da planta (-109 ≤ Xp, Yp ≤ 109). O valor da planta p-th na entrada é P, para p = 1, 2,. . . , P. Cada uma das seguintes linhas V descreve um vértice da vedação com dois números inteiros Xv e Yv, indicando as coordenadas do vértice (-109 ≤ Xv, Yv ≤ 109).
Vértices são dadas na ordem anti-horário. Cada um destes pontos é um real vértice do polígono, isto é, ela não é colinear com os seus dois vértices adjacentes. O polígono é representado um polígono simples com cada lado paralelo a um eixo. Não há duas plantas estão na mesma posição, e nenhuma planta encontra-se no lado de uma cerca.";A saída é uma linha com um número inteiro que representa a soma dos valores de todas as plantas que se encontram no exterior da vedação.;False;9 / 10;323;103;31.89%
2008;Expondo a Corrupção;Ad-Hoc;7;"O Comitê Central em Nlogônia é formado por muitos membros do congresso. Como o sistema político é dicotômico, cada membro do congresso pertence a um dos dois partidos: o Partido Sério Mortal e o Partido Festa! Festa!. Por tradição, chamam-os de DSP e PPP, respectivamente.
					
Edward é um jornalista investigativo. Ele descobriu que os congressistas são corruptos e vai mudar de partido, se for oferecido à ele uma determinada quantidade de Nlogmoney. Cada membro do Congresso tem o seu preço específico, mas todos eles têm um preço. Como de costume na política, existem rivalidades entre alguns pares de congressistas. Rivais nunca aceitariam estar no mesmo partido. 

Edward tem um orçamento e quer usá-lo para fazer alguns congressistas mudarem de partido e assim coletar provas irrefutáveis ​​para sua investigação. Ao fazer isso, ele tem que respeitar rivalidades: depois que todos os políticos envolvidos aceitarem sua proposta, os rivais devem ser colocados em diferentes partidos.

Edward quer causar o máximo impacto. Você pode ajudá-lo a descobrir o número máximo de congressistas que podem pertencer a DSP se ele usar no máximo todo o seu orçamento para esse objetivo? Da mesma forma, o que é o número máximo de membros do Congresso que pode pertencer a PPP sob o mesmo restrições?";"A entrada contém vários casos de teste; cada caso de teste é formatado como segue.
A primeira linha contém quatro inteiros D, P, R e B, que representam, respectivamente, o número de congressistas que, inicialmente, pertencem a DSP (1 ≤ D ≤ 100), o número de congressistas que, inicialmente, pertencem a PPP (1 ≤ P ≤ 100), o número de rivalidades entre os membros do congresso (1 ≤ R ≤ 2,000), e o orçamento do jornalista expresso em Nlogmoney (1 ≤ B ≤ 104). Os membros do DSP são identificados com números inteiros de 1 a distintas D, enquanto os membros do PPP são identificados com inteiros distintos de 1 a P. A segunda linha contém D inteiros S1, S2, ..., SD, indicando que i membro de DSP mudará de partido se oferecido Si Nlogmoney (1 ≤ Si ≤ 100 para i = 1, 2, ..., D). A terceira linha contém inteiros P T1, T2, ..., TP, indicando que j membros de PPP vão mudar de partido, se for oferecido Tj Nlogmoney (1 ≤ Tj ≤ 100 para j = 1, 2, ..., P). Cada uma das próximas R linhas descreve uma rivalidade com dois inteiros X e Y, onde X representa o membro de DSP e Y o de PPP que são rivais (1 ≤ X ≤ D e 1 ≤ Y ≤ P).";Para cada caso de teste na entrada, a saída deve conter dois números inteiros representando o número máximo de congressistas que podem pertencer a DSP usando o orçamento dado e, da mesma forma, o número máximo dos congressistas que pode pertencer a PPP usando o orçamento dado.;False;7 / 10;670;225;33.58%
2009;Apenas um Pouco Classificadas;Ad-Hoc;4;"Jurgen Guntherswarchzhaffenstrassen é conhecido por sua forma virtuosa de tocar guitarra e os métodos crueis de ensino que emprega com seus alunos. O que a maioria das pessoas ignora sobre ele é que ele também é um fã de números.

Ultimamente Jurgen vem estudando listas ordenadas, mas ele está ficando entediado. Ele acha que estas listas são muito previsível e não muito abundantes, então ele decidiu apimentar as coisas um pouco.

Jurgen diz que uma lista l de N não necessariamente de diferentes inteiros positivos é apenas um pouco sortido se, e somente se, para cada inteiro positivo x > 1 que ocorrido em l, o número x - 1 aparece pelo menos uma vez antes da última ocorrência de x em l. Por exemplo:
• [2, 3, 1, 2] é um pouco sortida porque um 1 aparece antes do último 2 e um 2 aparece antes do último 3;
• [2, 3, 4, 3, 2, 1, 3, 4] não é apenas um pouco ordenada porque cada 1 aparece depois do último 2;
• [1, 1, 3, 1, 3, 3, 1, 3] não é apenas um pouco classificadas porque nenhum 2 aparece antes do último 3 (e o 2 não aparece em nenhum momento nesta lista).

Jurgen está tentando descobrir quantas listas um poucos ordenadas, diferentes de N inteiros positivos e não superiores a K, existem. Duas listas são diferentes se, e apenas se, houver pelo menos uma posição em que as listas têm elementos distintos. Você pode ajudar Jurgen na contagem do número de listas diferentes?";"A primeira linha contém dois inteiros N e Q, representando respectivamente o número de elementos nas listas apenas um pouco ordenadas e o número de consultas para responder (1 ≤ N ≤ 5000 e 1 ≤ Q ≤ 1000).
A segunda linha contém Q inteiros K1, K2,. . . , KQ, indicando que as listas que você deve contar na consulta i-th não pode conter valores maiores do que Ki i (1 ≤ Ki ≤ 109 for i = 1, 2, . . . , Q).";A saída deve conter uma linha com Q números inteiros, de tal modo que o número inteiro de i-th representa o número de diferentes listas apenas um pouco ordenadas classificadas de n inteiros positivos não superiores a Ki (para i = 1, 2,..., Q). Uma vez que este número pode ser muito grande, o restante de saída dividindo-o por 109 + 7.;False;4 / 10;35;20;57.14%
2010;Mantenha Isso Energizado;Ad-Hoc;7;"A Incrível Companhia de Produção de Consoles (ICPC) está agora a projetar o seu mais novo console de videogame modelo, o Super-Arcade Reloaded (SAR). O lançamento do SAR será acompanhado pela liberação de um jogo carro-chefe, que só estará disponível para os seus usuários. Este jogo, que, aliás, será chamado ""Aventuras do Capitão Mikado (ACM)"" e o mesmo dispõe de uma moeda do jogo que pode ser convenientemente comprado com o dinheiro do mundo real!

O ACM é um jogo muito simples que consiste em níveis de N numerados 1, 2,. . . , N. O nível i-th requer exatamente Ei unidades de energia para ser concluída. Isto significa que, a fim de completar esse nível, o utilizador deve ter pelo menos Ei de energia, e depois de fazê-lo, vai diminuir exatamente esse montante. Para ganhar o jogo o usuário deve completar todos os níveis, em ordem crescente, começando no nível 1 e continuando até nível N, sem nunca voltar para algum nível já concluído.

Inicialmente, o usuário começa com nenhuma energia, e, a fim de obter alguma ele deve comprar pacotes de energia das lojas distribuídas entre os N níveis. Há M lojas. Cada loja vende um pacote de energia tendo um teor S e um custo C que variam a cada loja. O usuário só pode comprar pacotes de energia das lojas do nível que ele está atualmente antes de começar a completar esse nível. O efeito de uma compra de pacote de energia de força S é que a energia do usuário se transforma imediatamente em S, independentemente do valor que tinha antes.

A fim de aumentar ainda mais as suas vendas, o ICPC tem o pensamento de uma promoção revolucionária: ela vai reembolsar o custo total da SAR para quem completa o jogo ACM usando o mínimo de quantidade de dinheiro no jogo. Dada a descrição do jogo, você pode ajudá-los a descobrir o que é a quantidade mínima de dinheiro necessário para terminar o jogo?";"A entrada contém vários casos de teste; cada caso de teste é formatado como segue.
A primeira linha contém dois inteiros N e M, representando respectivamente o número de níveis e o número de lojas no jogo (1 ≤ N, M ≤ 105). A segunda linha contém N inteiros E1, E2. . . , EN, onde Ei é a energia necessária para completar o nível i-th (1 ≤ Ei ≤ 104 para i = 1, 2,. . . , N). Cada uma das próximas M linhas descreve uma loja com três inteiros L, S e C, que representam, respectivamente, o nível em que a loja está localizada, a força e o custo da energia vendida (1 ≤ L ≤ N, 1 ≤ S ≤ 109 e 1 ≤ C ≤ 104).";"Para cada caso de teste na entrada, há a saída de uma linha com um inteiro que representa a quantidade mínima de dinheiro do jogo que é necessário para concluir todos os níveis de N no jogo. Se é impossível completar todos os níveis, escreva o valor ""-1"".";False;7 / 10;203;99;48.77%
2011;Impostos Galácticos;Ad-Hoc;9;"O ano é 2115. O Centro Interplanetário de Planejamento Comercial (da sigla em inglês, ICPC) é suportado pelo Ministério de Comunicação Autônoma (ACM). Uma operação comercial é realizada executando transações entre escritórios ACM conectados ao longo da galáxia. A execução de uma transação entre dois escritórios conectados à ACM envolve um fiscal não-negativo, cujo valor aumenta ou diminui, continuamente como uma função linear A × t + B de tempo t, onde t é um número real medido em minutos durante o dia (0 ≤ t ≤ 24 × 60).

O imposto total de uma operação comercial realizada entre um escritório fonte ACM e um escritório destino ACM em algum momento t, é calculada como a mínima soma possível dos impostos das transações executadas entre os escritórios ACM visitados ao longo de algum caminho a partir do escritório fonte ACM para o escritório destino ACM. O imposto de cada transação é calculado ao mesmo tempo t. Desde que o imposto das transações entre escritórios ACM conectados está mudando continuamente durante a dia, seria melhor executar a operação comercial em algum horário específico do dia, em ordem para maximizar o imposto recolhido. Naquela época, ACM decidiu realizar a operação comercial, e não antes ou depois.

Sua tarefa é escrever um programa que recebe como entrada a descrição da rede de escritório ACM e retorna como saída o imposto total máximo da operação comercial que pode ser alcançado durante o dia, ou seja, o imposto total máximo que ACM pode coletar.";A primeira linha contém dois inteiros N e M, representando, respectivamente, o número de escritórios ACM na rede e o número de conexões (2 ≤ N ≤ 1000 e 1 ≤ M ≤ 102). São escritórios ACM os identificados com inteiros distintos de 1 a N, sendo 1 o escritório fonte ACM e N  o escritório destino ACM. Cada uma das próximas linhas M descreve uma conexão com quatro inteiros I, J, A e B, indicando que há uma conexão bidirecional entre escritório I e o escritório J (1 ≤ I < J ≤ N), de tal forma que o fiscal de uma transação executada entre escritório I e escritório J no tempo t é definido pelo fórmula A × t + B (−100 ≤ A ≤ 100 e 0 ≤ B ≤ 10^6). Os impostos são não-negativo, então um A × t + B ≥ 0, para 0 ≤ t ≤ 24 × 60. E no máximo uma conexão entre cada par de escritórios ACM, e há pelo menos um caminho entre o fonte de gabinete ACM e o escritório ACM de destino.;Saída de uma linha com um número racional, que representa o imposto total máximo que ACM pode coletar. O resultado deve ser saída como um número racional com exatamente cinco dígitos após o ponto decimal, arredondado, se necessário.;False;9 / 10;528;186;35.23%
2012;Altura do Mapa;Ad-Hoc;9;"Um Height Map é uma matriz bidimensional de inteiros positivos que representa um poliedro. Cada célula da matriz com o valor V representa uma coluna em forma de paralelepípedo 1 × 1 × V que é colocada sobre um dos seus 1 × 1 virado para a célula. Isso cria um poliedro com um único rosto no fundo compo de todas as para baixo de frente para 1 × 1 rostos combinados, e possivelmente várias faces no topo e nos lados.

					Por exemplo, uma matriz de 2 x 2 com todos os valores iguais a 2 representa um cubo do lado 2. No entanto, se a pessoa dos valores é 1, o poliedro representado é o mesmo cubo com um canto cortado. Os seguintes imagem representa ambas as alternativas.

					

					Embora nem todos os poliedro pode ser representado desta forma, há vários que pode. Aqui estão um par de outros exemplos.

					

					Dado um Mapa, você está convidado a contar o número de faces do poliedro representados. Note-se que uma face é definido como um polígono simples que descreve um limite máximo de contígua e poliedro. Como você pode ver nos dois últimos exemplos, é possível que duas faces coplanares diferentes compartilhar um vértice comum, ou mesmo um lado, ou porções de um lado.";"A primeira linha contém dois inteiros R e C, representando, respectivamente, o número de linhas e colunas do Height Map (1 ≤ R, C ≤ 100). Cada uma das linhas próximas R contém inteiros C; o número inteiro de ordem j na linha de ordem i é o valor Vi, J localizado na linha i-ésimo e j-ésimo coluna da matriz (1 ≤ Vi, J ≤ 109 para i = 1, 2,... , R e j = 1, 2,..., C).";Saída de uma linha com um inteiro representando o número de faces do poliedro representados por o Height Map de entrada.;True;9 / 10;284;80;28.17%
2013;No Máximo Duas Vezes;Ad-Hoc;6;Dado um inteiro positivo U, ache o maior inteiro L tal que L ≤ U e L não contenha nenhum algarismo repetido mais do que 2 vezes.;A entrada consiste em uma única linha que contém um inteiro U (1 ≤ U ≤ 1018).;Mostre uma linha com um inteiro representando o maior numero menor ou igual à U que não contenha algarismos repetidos mais que 2 vezes.;False;6 / 10;545;215;39.45%
2014;Grupos Sanguineos;Ad-Hoc;6;"Existem quatro grupos possíveis de sangue para os seres humanos: AB, A, B e O, o que significa que os glóbulos vermelhos têm antigenes de tipos, respectivamente, A e B, a apenas A, apenas B, e sem antigene em tudo. O nosso grupo de sangue é determinado por dois alelos no nosso DNA. Cada alelo é do tipo A, B ou O. A tabela a seguir lista os possíveis combinações de alelos que alguém pode ter para cada grupo sanguíneo:

					

					Nós herdamos exatamente um alelo de cada um dos nossos dois pais. Assim, tendo em conta os grupos sanguíneos de ambos os pais, podemos dizer com certeza se algum grupo de sangue é possível, ou não, em sua prole. Por exemplo, se os grupos sanguíneos dos dois pais são AB e B, em seguida, as possíveis combinações de alelos para eles são, respectivamente, {AB} e {OB, BB}. Desde o fim dos alelos não importa, as possíveis combinações de alelos para a prole são {OA, AB, OB, BB}. Isso significa que os grupos sanguíneos AB, A e B são possíveis em sua prole, mas o grupo sanguíneo O não é. Muito bom de fato! Mas e se a vida na Terra evoluiu de modo que uma pessoa tinha três pais, três alelos, e três tipos de antígenos diferentes? As combinações de alelos ficaria assim:

					

					Se os grupos sanguíneos dos três pais são A, BC e O, em seguida, todos os grupos sanguíneos são possíveis em sua prole, exceto os grupos BC e ABC. O universo é vasto! Pode haver, lá fora, no espaço, alguma forma de vida cujos indivíduos têm pais N, N alelos, e N diferentes tipos de antígenos. Tendo em conta os grupos sanguíneos para os pais N, e uma lista de grupos sanguíneos Q para testar, o programa tem de determinar quais os que são possíveis, e quais não são, na descendência dos pais dadas.";A primeira linha contém dois inteiros N e Q, representando respectivamente o número de pais (e alelos e tipos de antígenos) e o número de consultas (1 ≤ N ≤ 100 e 1 ≤ Q ≤ 40). Cada uma das N linhas seguintes descreve o grupo de sangue de um dos pais. Depois disso, cada uma das seguintes linhas Q descreve um grupo de sangue para testar. Tipos de antigenes são identificados com números inteiros distintos de 1 a N, não letras. Cada linha que descreve um grupo sanguíneo contém um número inteiro B que indica o número de tipos de antigenes do grupo sanguíneo (0 ≤ B ≤ N), seguido por B inteiros diferentes C1, C2, ..., CB representando os tipos de antigénios presentes no sangue grupo (1 ≤ Ci ≤ N para i = 1, 2, ..., B).;"Para cada uma das Q consultas, mostre uma linha com a letra maiúscula ""Y"" se o grupo sanguíneo correspondente é possível na descendência dos pais dadas; caso contrário saída a letra maiúscula ""N"". Escreva os resultados na mesma ordem que as consultas aparecem na entrada.";True;6 / 10;150;77;51.33%
2015;Fatia do Bolo;Ad-Hoc;7;"Carol e Carla são companheiras de quarto. Ontem elas tiveram uma grande festa e hoje eles têm um bolo parcialmente comido que eles querem dividir. Uma vez que as pessoas foram descuidados ao cortar-se de uma fatia, o bolo é agora a forma de um prisma com as suas faces superior e inferior sendo a mesma polígono convexo simples.

Para adicionar um pouco de diversão para o processo de dividir o bolo, as meninas vieram com o jogo seguinte. Carol escolhe um vértice v da face superior do bolo. Carla escolhe outro vértice w da face superior que não é adjacente ao v. Em seguida, cortam o bolo em dois pedaços em sentido para baixo ao segmento vw, de modo a obter duas peças separadas de bolo, cada um na forma de um prisma. Por fim, Carol escolhe a peça que ela prefere, e Carla começa o outro. Carla imediatamente viu que este sistema dá uma vantagem Carol. Carla quer saber exatamente o quanto da vantagem Carol tem.

É lhe dado um polígono que representa tanto as faces superior e inferior do bolo. A altura do bolo é 2, de modo que o volume de uma parte de bolo é de 2 vezes a área da sua face superior. Assumindo que o bolo é dividido conforme explicado, e que ambas as meninas tomam suas decisões para maximizar o volume da peça que eles têm no final, calcule o volume da peça que cada menina vai conseguir.";A primeira linha contém um inteiro N representando o número de vértices da face de topo poligonal do bolo (4 ≤ N ≤ 105). Cada uma das N linhas seguintes descreve um vértice do polígono com dois inteiros X e Y, que indica as coordenadas do vértice no plano XY (-108 ≤ X, Y ≤ 108). Vértices são dadas em sentido anti-horário e definir um polígono convexo simples. Nenhum de três pontos na entrada são colineares.;Saída de uma linha com dois números inteiros representando o volume da peça Carol e Carla terá, em nessa ordem, se ambos tomam suas decisões de forma otimizada.;False;7 / 10;253;88;34.78%
2016;D como em Daedalus;Ad-Hoc;4;"Daedalus está jogando o jogo de ""Não seja ganancioso"", no qual os N jogadores sentam em torno de uma mesa tendo cada um deles cinco cartões rotulados 1, 10, 100, 1000 e 10000 pontos. Em ""Não seja ganancioso"" os jogadores não podem conversar entre si uma vez que o jogo começa, e existem M rodadas. Em cada rodada, o banco anuncia um orçamento B. Em seguida, cada jogador escolhe uma das cartas e coloca-a, de rosto para baixo, sobre a mesa. O banco então vira as cartas, de modo que todos os jogadores podem ver todos as N cartas. Se a soma dos pontos nas cartas escolhidas é menor ou igual a B, então o banco para cada jogador dá exatamente a quantidade de pontos na placa de que ele ou ela escolheu. Caso contrário, ninguém recebe nada. Cada jogador recebe a sua carta de volta antes da próxima rodada. Os jogadores estão muito racionais e gostariam de maximizar os seus pontos e minimizar os seus arrependimentos! O que você faria nesta situação? Cooperaria ou afundaria o jogo?

					Tome a tabela a seguir como um exemplo. Daedalus ganhou um total de 10 pontos, no final, porque apenas o primeiro round foi bem sucedida. Mas, olhando para trás no jogo, ele vê que ele poderia ter ganho 110 pontos, se tivesse escolhido 100 pontos na primeira rodada e 10 pontos na terceira rodada. Ou seja, Daedalus poderia ter ganho 100 pontos extra! Isto somente, é claro, assumindo que as cartas escolhidas pelos outros jogadores permaneçam inalteradas.

					

					Dado o orçamento e as cartas escolhidas em cada rodada, é preciso calcular o número total máximo de pontos extras que Daedalus poderia ter obtido, no final, se tivesse escolhido o melhor cartão de possível em cada rodada, assumindo as cartas escolhidas pelo outro jogadores permaneçam inalteradas.";A primeira linha contém dois inteiros N e M, representando respectivamente o número de jogadores e o número de rodadas (1 ≤ N ≤ 20 e 1 ≤ M ≤ 50). Cada uma das M linhas seguintes descreve uma rodada com um número inteiro B, indicando o orçamento (1 ≤ B ≤ 106), seguido de N inteiros C1, C2, ..., CN representam que o jogador i-ésimo escolheu o cartão marcada com Ci pontos durante essa rodada (Ci ∈ {1, 10, 100, 1000, 10000} para i = 1, 2, ..., N). Daedalus é o primeiro jogador.;Saída de uma linha com um inteiro representando o número total máximo de pontos extras que Daedalus poderia ter obtido, se ele tivesse escolhido o melhor cartão de possível em cada rodada, assumindo que as cartas escolhidas pelos outros jogadores permaneçam inalteradas.;True;4 / 10;582;301;51.72%
2017;Seis Strings;Strings;3;O problema é simples. Dada uma string x e 5 outras strings, encontre a string com o menor valor de distância de edição com relação a x. Se o valor da distância de edição for maior do que k, imprima -1.;A primeira linha contém uma string x ( 1 ≤ len(x) ). A próxima linha contém um inteiro k ( 1 ≤ k ≤ 100 ). Cada uma das próximas 5 linhas contém uma string y ( len(y) ≤ 100000).;Imprima o índice da string mais próxima da primeira linha. Se este valor for diferente de -1, imprima o valor de distância de edição da segunda linha.;False;3 / 10;588;286;48.64%
2018;Olimpíadas de Natal;Estruturas e Bibliotecas;4;"Segundo a tradição, as provas das Olimpíadas de Natal são muito interessantes e diferentes. Dentre as provas existentes, podemos citar por exemplo, o levantamento de saco de brinquedos, a escalada de pinheiros, o hipismo com renas, o arremesso de duendes (com e sem o consentimento deles - esse segundo é mais perigoso) e o tempo de mergulho em buraco no gelo sem equipamentos, entre outros.

					Parte do melhoramento da competição proposto por Noel para este ano sera a disponibilização do quadro de medalhas dos países participantes através de um placar eletrônico. Você foi convidado para viajar até as montanhas de Korvatunturi na Lapônia, Finlândia, aonde será a sede destes jogos, para, à partir de uma relação das provas e os países vencedores, desenvolver o sistema para este placar.

					Serão quase trezentos países participantes e até 1000 modalidades de provas, no máximo.";A entrada contem um unico caso de teste que consiste em uma relacao com o resultado de todas as provas realizadas nas Olimpíadas de Natal. Cada prova ou modalidade contém quatro linhas de informação: a primeira linha contém a descrição da prova, a segunda linha contém o país que ficou campeão nesta modalidade, a terceira linha contém o país vice-campeão e a última linha contém o país que ficou com a medalha de bronze na referida prova. O final da entrada é determinado por EOF.;"Como saída, deve ser impresso o quadro de medalhas das Olimpíadas de Natal. A primeira linha contém a informação ""Quadro de Medalhas"". Cada uma das próximas linhas conterá o nome de um país seguido pelo respectivo número de medalhas de ouro, prata e bronze que este país conquistou, separadas por um espaço em branco. O critério de desempate é, na ordem, o número de medalhas de ouro seguido pelo número de medalhas de prata e de bronze. Se países empatarem nestes três critérios, a listagem será por ordem ascendente do nome do país participante.";False;4 / 10;788;370;46.95%
2019;Cici, Cini e Cino;Ad-Hoc;9;"Cici, Cini e Cino viajaram para o Polo Norte, e querem conhecer os principais pontos turísticos de lá. Para ajuda-los, o Papai Noel decidiu emprestar três renas para eles. As renas do Papai Noel tem capacidade de se teletransportarem, fazendo que as viagens entre os pontos turísticos sejam instantâneas.

Papei Noel informou que existem N pontos turísticos, e que suas renas podem realizar dois tipos de passeios:

Passeio tipo 1: Dada uma sequência de pontos turísticos que deseja visitar, a rena realiza um passeio parando durante um hora em cada ponto da sequência. Por exemplo: Dada a sequência <1, 2, 1>, a rena vai ficar durante uma hora no ponto 1, depois uma hora no ponto 2 e mais uma hora no ponto 1.

Passeio tipo 2: Dada uma sequência de pontos turísticos que deseja visitar, a rena realiza um passeio do tipo 1 utilizando uma subsequência não vazia da sequência escolhida.  Por exemplo, se a sequência escolhida for <1, 2, 1>, a rena pode fazer qualquer um dos 6 passeios distintos, escolhido aleatoriamente por ela:  <1>, <2>, <1, 1>, <1, 2>, <2, 1>, <1,2,1>.

Cici e Cini gostaram do fator surpresa do passeio de tipo 2, porém, Cino optou pelo do tipo 1. Como Cici, Cini e Cino possuem preferências diferentes, cada um pode escolher uma sequência diferente de lugares. Sabendo as sequências escolhidas por Cici e Cini, Cino vai escolher a menor sequência em que seja garantido que em pelo menos um local não seja visitado pelos três amigos ao mesmo tempo.

Por exemplo: O Papei Noel informou que o Polo Norte possui 3 pontos turísticos distintos. Cici escolhe a sequência <1, 2>. Cini escolhe <2, 3>. Logo, Cino pode escolher as sequências <1> e <3>, mas não pode escolher a sequência <2>, pois existe a chance de os três visitarem o ponto <2> ao mesmo tempo.";A entrada é constituída de múltiplos casos de teste. Cada caso de teste é constituído por 3 linhas. A primeira linha de cada caso de teste contém 3 inteiros, N (1 ≤ N ≤ 50), X e Y (1 ≤ X, Y ≤ 103), representando respectivamente a quantidade de pontos turísticos, o tamanho da sequência escolhida por Cici e o tamanho da sequência escolhida por Cini. A segunda linha contém X inteiros, representando a sequência escolhida por Cici. A terceira linha contém Y inteiros, representando a sequência escolhida por Cini. A entrada termina com final de arquivo (EOF).;Para cada caso de teste, imprima uma linha contendo o tamanho da menor sequência e o número de sequências que Cino pode escolher, separados por um único espaço. É garantido que um inteiro de 64 bits com sinal seja suficiente para armazenar a resposta.;False;9 / 10;74;17;22.97%
2020;Elfos e seus Códigos;Estruturas e Bibliotecas;8;"Neste ano Papai Noel recebeu várias listas de presentes, com pedidos e mais pedidos. Para dificultar, todas as listas são codificadas por elfos. Como são milhares de listas e o Papai Noel é organizado, decidiu pedir a sua ajuda. Ele sabe que você é dedicado e conhece o padrão de decodificação dos elfos, e para isso disponibilizou 26 gnomos e 676 duendes. Cada lista é decodificada através da colaboração de gnomos e duendes ajudantes do Papai Noel. Os gnomos são enumerados de 1 a 26 e para cada gnomo, 26 duendes que correpondem a letras de A até Z (incluindo as letras K, W, Y). Quando a decodificação é iniciada, todas as N linhas são executadas. Cada N linha corresponde a um presente. Seguem os passos para decodificar uma determinada lista criada por elfos:

                    
                        1º Os gnomos e duendes são organizados, gnomos representam linhas e duendes representam as colunas.
                        
                        2º Para cada gnomo, é encontrado um duende. Por exemplo, se o número inteiro i for 2 (linha 2) o gnomo é 2 e obrigatoriamente o duende também é 2, correspondendo, portanto, ao caractere B.
                        
                        3º Todos os duendes, na posição gnomo devem ser movidos para o final.
                        
                        4º A linha correspondente ao gnomo é movida para a última posição válida.
						
                         Após este primeiro movimento, se o próximo número da entrada para i for 2 (linha 2) o gnomo agora será 3 e consequentemente o duende também será 3, correspondendo portanto, ao caractere D.
                    
          
						O 1º passo é executado a cada nova lista codificada por elfos, o 2º, 3º e 4º passo são executados a cada número inteiro i que corresponde a linha da matriz. Papai Noel quer saber os presentes que contém na lista codificada por elfos.";A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 10000), que corresponde ao número de linhas codificadas por elfos. As N  linhas seguintes contém um número indefinido de inteiros i (1 ≤ i ≤ 27), cada número inteiro i  representa a linha da matriz e se i for 27, um espaço. A entrada termina com final de arquivo (EOF).;Para cada lista codificada por elfos, deve-se apresentar a mensagem “LISTA #X:”, onde X é o número da lista seguindo a sequência (1, 2, 3, ...), em seguida deve-se listar todos os presentes em ordem alfabética e maiúsculo, um em cada linha.  Imprimir uma linha em branco entre dois casos de teste consecutivos. No fim da saída não deve haver uma linha em branco.;True;8 / 10;452;117;25.88%
2021;Luzes de Natal;Ad-Hoc;8;"Chegou o Natal e é época de organizar a casa para refletir o clima de festividades do fim de ano. A familia de Jon começou a enfeitar a casa e sua função é pendurar inúmeras luzes de natal ao redor da casa no formato de um retângulo. No entanto essas luzes são um pouco chatas, após guardá-las durante todo o ano algumas acabam quebradas e outras queimadas. O modelo de luzes que ele está usando é no formato de retângulo.

					Jon vai comprar todas as luzes avulsas que precisam ser substituidas porque ele não sabe que a primeira coluna das luzes funciona de forma paralela enquanto que pra cada linha elas funcionam em série fazendo-o pensar que todas a partir de um determinado ponto estão queimadas. O que ele faz na verdade é contar, em ordem, o numero das luzes até achar aquela que não acende mais e então anota o seu número num papel e então pula para a próxima linha recomeçando a contagem.

					Por exemplo numa rede 5x5 existem 2 posições que ele encontrou 5 e 1, isso teria a seguinte representação:

					****-
					- - - - -
					*****
					*****
					*****

					Logo a quantidade que Jon deve comprar é 6.

					Sua tarefa é dizer quantas luzes estão apagadas a partir das posições que Jon anotou para que ele possa comprar elas avulsas.";A entrada consiste em multiplas entradas que começam com uma linha com 3 inteiros M, N e P (2 ≤ M, N ≤ 500 e 1 ≤ P ≤ N) que representam respectivamente altura, largura e quantidade de posições que ele encontrou. As próximas P linhas contém um número Q (1 ≤ Q ≤ M*N) que são as posições de cada luz apagada. A entrada termina quando M = N = P = 0.;"Para cada caso imprima a frase ""Lights: X"" sendo X o total de luzes apagadas que Jon deve comprar.";False;8 / 10;821;253;30.82%
2022;Presentes de Natal;Estruturas e Bibliotecas;4;"Ah o natal... época mágica, tempo de sentimentos bons, jantares cheios de pessoas legais e recheados de boas comidas e, é claro: muitos presentes. 
					
					Jucilena foi uma boa menina durante esse ano. Sabendo disso, está montando sua lista de desejos natalinos. 
					Porém, Jucilena é uma menina muito indecisa (e seus desejos são muitos), o que acaba confundindo o seu Nicolau quanto ao presente que ela realmente quer ganhar. Em suas listas, ela elencou o nome do presente desejado, seu preço (campo este solicitado pela sua mãe) e a escala de preferência pelo mesmo, do menos preferido (1) ao mais desejado (10). Vendo essa ideia de Jucilena, seus amigos também fizeram o mesmo, pois todos tinham diversas opções de presentes. 
					
					
					Todo esse emaranhado de listas e presentes deixaram o seu Nicolau maluco! Vendo isso, o espírito natalino lhe tocou e você decidiu que ajudará Noel, criando um programa que elencará a lista dos mais desejados presentes para Jucilena e seus amigos. Os presentes devem ser mostrados na ordem descrescente do valor de preferência. Caso a preferência entre um e outro presente seja a mesma, o presente que deverá ser mostrado antes é o de menor preço. Caso haja semelhança entre preferência e preço, eles deverão ser elencados em ordem alfabética.";A entrada consiste de vários casos de teste. A primeira linha de cada caso de teste contém o Nome (sem espaços) do respectivo dono da lista, junto com um inteiro Q, (1 < Q <100) que define a quantidade de presentes listados. As próximas Q*2 linhas consistem no nome O do objeto desejado descrito em uma linha e o P preço do mesmo (1< P < 100.000.000) e a escala de preferência E (1< E < 10) na linha seguinte.  A entrada termina em EOF.;"Deve ser impressa a lista ordenada, dentro das especificações descritas anteriormente, sendo mostrado primeiramente o nome do dono da lista antecedido de ""Lista de "" seguido por uma lista que mostra somente o nome do objeto seguido do seu preço em reais, definido com duas casas após o ponto decimal. Deve ser mostrada uma linha em branco após todas as saídas.";True;4 / 10;1208;354;29.30%
2023;A Última Criança Boa;Strings;4;"Papai Noel classifica todas as crianças do mundo em duas listas: uma das boazinhas e outra das malcriadas. Ele gostaria de saber qual das crianças do mundo é a última da lista de boazinhas, se usar a ordem alfabética. Para isso, ele pediu a todos seus elfos ajudantes que escrevessem os nomes das crianças boas em uma folha.

Entretanto, cada elfo escreveu os nomes de um jeito: maiúscula no início e minúsculas depois, todas maiúsculas, todas minúsculas, e todo tipo de combinação entre maiúsculas e minúsculas.

Papai Noel quer sua ajuda para, dada a lista de nome das crianças boas, dizer qual delas é a última.";A entrada possui várias linhas. Em cada linha há o nome de uma criança boa. Nenhum elfo escreveu os nomes com acentos. O maior nome tem no máximo 80 caracteres. Não existem mais de 1000 crianças na lista. Todos os nomes são distintos. A lista de nomes termina com EOF.;A saída é dada em uma linha. O nome da criança que fica na última posição da lista deve ser mostrado. Mostre o nome exatamente como foi lido na entrada. Use a ordem alfabética dos nomes para ordenar, mas considere maiúsculas e minúsculas como iguais.;False;4 / 10;3275;1417;43.27%
2024;Empilhando Presentes;Paradigmas;8;"Cansado de gerenciar a produção de presentes e calcular o caminho mínimo para entregá-los às crianças durante o natal, Papai Noel resolveu tirar um cochilo. Quando os duendes perceberam a ausência do Noel eles resolveram tirar uma folga do trabalho para jogar um jogo que vieram elaborando por um tempo.

O jogo que os duendes inventaram envolve N presentes que eles tinham recentemente fabricado, os quais tem formato de cubo com dimensões AxBxC, ou seja, A centímetros de largura, B centímetros de altura e C centímetros de profundidade.

O objetivo é simples: dados os N presentes, ganha o jogo aquele que conseguir colocar os N presentes um em cima do outro formando a pilha de maior altura possível. Os presentes devem ser empilhados em ordem, ou seja, primeiro posiciona-se o presente 1 no chão, em seguida empilha-se o presente 2 em cima do presente 1, e assim por diante.

Vale notar que é possível rotacionar o presente em qualquer eixo de forma que qualquer uma de suas 6 faces esteja paralela ao chão, porém o perímetro desta face deve estar completamente contido no perímetro da face superior do presente abaixo. No caso do primeiro presente é possível escolher qualquer face, pois o chão é grande o suficiente.

Por exemplo, seja N = 2, onde o primeiro presente tem dimensões 5x2x2, e o segundo presente tem dimensões 1x3x4, é possível posicionar o primeiro presente com a face de dimensões 2x2 para baixo e alcançar uma altura igual a 5, porém desta maneira não será possível posicionar o segundo presente em cima deste. Uma possível solução seria posicionar o primeiro presente com a face de dimensões 5x2 para baixo, e posicionar o segundo presente com a face de dimensões 3x1 logo acima deste, alcançando uma solução válida com altura igual a 6, tal como exemplificado na Figura 1.



Após um bom tempo jogando os duendes ficaram curiosos para saber se realmente chegaram ao melhor resultado, e para isso pediram sua ajuda. Dadas as dimensões dos N presentes, verifique se é possível formar uma pilha com os N presentes e qual seria a altura máxima alcançada.";"Cada caso de teste inicia com um inteiro N, representando a quantidade de presentes (1 ≤ N ≤ 105).

Em seguida haverá N linhas, cada uma contendo três inteiros cada, A, B e C, representando as medidas dos presentes, conforme especificado no enunciado (1 ≤ A, B, C ≤ 104).";Para cada caso de teste imprima uma linha contendo um inteiro, representando a altura máxima da pilha caso seja possível empilhar os N presentes, ou -1 caso contrário.;True;8 / 10;392;102;26.02%
2025;Joulupukki;Strings;3;"A Lapônia, na Finlândia, é região mais a norte da União Europeia e o seu habitante mais famoso é naturalmente o Papai Noel, ou Pai Natal, ou Joulupukki (seu nome em Finlandês). Naturalmente nos dias de hoje o Papai Noel recebe, além das tradicionais cartinhas, muitos e-mails de crianças de todo o mundo.

					O problema é que Noel pegou um virus denominado Amli.D em seu computador e todas as mensagens que ele deixou como rascunho tiveram o nome dele alterado. O lado bom é que este virus bagunça apenas o nome dele (Joulupukki) trocando por vezes o primeiro caractere, por vezes o último e não raro os dois. Assim, ao invés de ""Joulupukki"", o nome pode aparecer como ""Joulupukka"", ""SoulupukkA"" ou ""Toulupukki"", entre outras formas.

					Assim, sua tarefa aqui será fazer um software que corrija todas as aparições erradas de ""Joulupukki"" dos rascunhos dos e-mails de Papai Noel. Temos a garantia dos gnomos de que não há nenhuma palavra com mais de 10 caracteres que contenha a substring ""oulupukk"", mas seja cuidadoso com relação ao ponto final, como ""Toulupukki."", por exemplo. Neste caso teremos que considerar 11 caracteres.";A entrada contém milhares de linhas de texto. A primeira linha de entrada contém um inteiro N (1 < N < 10000) que indica a quantidade de linhas de texto dos rascunhos de Noel. Cada uma das N linhas pode conter até 100 caracteres, incluindo letras maiúsculas, minúsculas e espaços em branco.;"Seu programa deve corrigir o estrago causado pelo vírus Amli.D, imprimindo cada uma das linhas de entrada com a grafia correta da palavra ""Joulupukki"", sempre com a primeira letra maiúscula.";True;3 / 10;1297;600;46.26%
2026;Árvore de Natal;Paradigmas;3;"Com a chegada do clima natalino muitas famílias ao redor do mundo decoram suas casas, colocam luzes constroem suas próprias árvores de natal, colocando os mais váriados enfeites decorativos sempre com muita criatividade. Na família Enilno Egduj, descendetes de Italianos, sempre muito organizados e perfeccionistas criaram uma tradição onde todo o ano alguém fica responsável por enfeitar a árvore de natal. Neste ano o filho mais novo da família Rolien Enilno Egduj, ficou encarregado de fazer a decoração, e para isso precisava comprar os enfeites para a árvore. Para quem não conhece Rolien, ele é um menino muito perfeccionista, tão perfeccionista que decidiu fazer um programa para auxilia-lo na sua tarefa.
					Para enfeitar a árvore estavam disponíveis no mercado onde Rolien foi procurar enfeites natalinos, vários pacotes com uma quantidade X de enfeites e em cada pacote o seu respectivo peso em gramas. Baseando-se nessas informações Rolien estipulou que cada galho pudesse suporta uma quantidade K em gramas.
					Com isso ele precisava encontrar qual a melhor opção entre os pacotes, ou seja, quais pacotes ele deve levar que combinados possuam o maior número de enfeites e que o galho ao qual ele vai enfeitar consiga suportar suportar o peso dos enfeites.";A primeira linha de entrada possui um inteiro G para os galhos da árvore, e também representando o numero de casos de teste, a segunda linha de entrada possui um inteiro P (1 < P < 100)  que indica o número de pacotes, a próxima linha possui um inteiro W (1 < W < 1000) que indica a capacidade de peso que o galho da árvore suporta. As próximas P linhas indicam o número de enfeites em cadas pacote E(1 < E ≤ 300) e o peso de cada pacote PC (1 ≤ PC ≤ W).;A saída devera apresentar o número total de enfeites para cada galho.;False;3 / 10;1330;666;50.08%
2027;Aposta com Noel;Paradigmas;4;"Como é época de Natal, os gnomos Rolien e Naej fizeram uma aposta com o Papai Noel. Rolien e Noel tem 10 segundos para contar a quantidade de enfeites em uma árvore de natal. Após isso, se o máximo divisor comum entre os dois valores contados der um valor maior do que 5, Noel ganha, caso contrario, os gnomos ganham. Bem, o problema é que alguém mexeu no código de Rolien, que antes funcionava perfeitamente e agora dá uns erros estranhos: dependendo do que for mexido, às vezes dá ""Presentation Error"", às vezes dá ""Compilation Error"" e às vezes dá ""Runtime Error"".
					
					Tendo o código abaixo, acerte estes pequenos erros e submeta a versão correta para o Papai Noel.
					
					#include <bits/stdc++.h>

using namespace std;

int GCDsimp (int num, int den) {
	cout << num << den;
	if (den > 0)
		return GCDsimp (den, num % den);
	}
	return num;
}

int main() {
	int num, den, apostas [100], cont=-1;
	while (cin >> num >> den) {
		 apostas[++cont] = GCDsimp (num,den);
		 if  ( apostas[cont] ) > 5)
			cout << ""Noel"" ;
		 else
			cout << ""Gnomos"" << endl;
	}
	for (int i=cont; i>0; i++) {
		cout << apostas[cont] << "" "";
	}
	return 0;
}";A entrada pode conter até 100 casos de teste e termina com EOF. Cada caso de teste é composto por uma linha contendo dois números inteiros separados por um espaço, que representam o número de enfeites contados por Rolien e Noel, respectivamente, para uma das árvores de Noel.;Para cada caso de teste você deverá Imprimir uma linha de saída contendo Noel ou Gnomos, conforme explicação acima. No final, você deve imprimir os valores calculados para as 100 apostas entre os gnomos e Noel. Cada um dos valores é seguido por um espaço em branco, inclusive o último.;False;4 / 10;1202;519;43.18%
2028;Sequência de Sequência;Iniciante;4;"Hyam é um menino que adora sequências. Ele anda descobrindo sequências interessantes que nem mesmo Fibonacci imaginaria. Certo dia, Hyam percebeu que dado um número N, ele poderia fazer uma sequência do tipo 0 1 2 2 3 3 3 4 4 4 4 ... N N N ... N. No entanto, Hyam percebeu que cada valor que aumentava no número da sequência, a quantidade total de números da sequência aumentava semelhantemente à um crescimento fatorial, neste caso, ao invés de multiplicar, soma-se o número total de números da sequência com o valor do próximo número da sequência. Por exemplo, se N = 2. A sequência correta seria 0 1 2 2, obtendo-se 4 digitos. Agora, se N = 3, o próximo número da sequência tem valor 3, então a quantidade total de número da sequência seria a quantidade de números com N = 2, que é 4, mais o valor do próximo número da sequência, neste caso 3, obtendo-se 7, já que a sequência correta para N = 3 é 0 1 2 2 3 3 3.

					Sua tarefa é fazer um algoritmo que dado um número inteiro N, tenha como resposta a quantidade total de números dessa sequência e logo abaixo a sequência completa.";"A entrada é composta de vários casos de testes. Cada caso é composto por um inteiro N (0<=N<=200) que indica o valor dos últimos N números da sequência.

					A entrada termina com final de arquivo (EOF).";A saida é no formato Caso X: N numeros onde X é a ordem do número de casos e N é a quantidade de numeros que contém na sequência completa, na próxima linha a sequência de números com um espaço entre eles. É pedido que deixe uma linha em branco após cada caso.;False;4 / 10;10406;3485;33.49%
2029;Reservatório de Mel;Iniciante;1;"Seu Júlio é proprietário de um  grande apiário situado no interior da Paraíba. Todo ano, semestralmente, seu Júlio coleta o mel produzido pelas abelhas da sua propriedade e armazena-o em um recipiente  de formato CILÍNDRICO para que facilite o transporte do mel para os estabelecimentos que encomendam esse produto natural para a comercialização.
					Certa vez seu Júlio percebeu que devido a um crescimento na produção do mel, em relação ao semestre anterior, o recipiente que possuia não suportaria o volume de mel produzido por suas abelhas. Seu Júlio precisa agora que você faça um programa que informado o volume de mel em cm3 e o diâmetro da parte interna do recipiente em cm, calcule e mostre:

					- Qual deve ser a altura(em cm) da parte interna do recipiente;
					- A área(em cm2) da boca(entrada) do recipiente. 
					Obs.: Considere π = 3.14";A entrada contém vários casos de teste e termina com EOF. Cada caso de teste consiste de duas linhas contendo em cada uma um valor de ponto flutuante de dupla precisão com duas casas decimais após a vírgula, sendo um V (1.00 ≤ V ≤ 10000.00) e outro D (1.00 ≤ D ≤ 100.00), representando respectivamente o volume e o diâmetro do recipiente.;"Para cada teste, a saída contém na primeira linha a mensagem ""ALTURA = "", com um espaço depois de ALTURA e outro depois do símbolo de igualdade, seguido do valor da altura do recipiente com duas casas decimais após a vírgula e na segunda linha a mensagem ""AREA = "", também com um espaço depois de AREA e outro depois do símbolo de igualdade, seguido do valor da  area da boca(entrada) do recipiente  com duas casas decimais após a vírgula.

					- Não esqueça da quebra de linha ao final da saída,caso contrário você receberá ""Presentation Error"".";False;1 / 10;5161;3377;65.43%
2030;Pit Stop;Ad-Hoc;8;"“Grazie, grazie, bellissimo!” – dizia um engenheiro da Scuderia Ferrari após uma estratégia inusitada que os fez ganhar o GP de Formosa de 2016, famoso circuito de rua do calendário da Fórmula 1. 

					Fórmula 1 é um esporte meio maluco. Às vezes, quando o pneu está muito desgastado, compensa fazer uma paradinha, denominada de pit stop, para colocar pneus novos e fazer voltas mais rápidas do que se estava fazendo antes. 

					No entanto, nem sempre vale a pena trocar de pneu, dependendo da quantidade de voltas que faltam e do atraso de uma parada de pit stop. 

					Cada pneu tem uma determinada autonomia de algumas voltas, depois ele volta a ficar desgastado e possivelmente uma nova troca será necessária para conseguir bons tempos. 

					Será que você, como futuro engenheiro da Ferrari consegue calcular a melhor estratégia de pit stops?";"A entrada consiste de uma linha contendo um número N (1 ≤ N ≤ 1000) indicando a quantidade de casos de teste. As N linhas seguintes representam os casos de teste. Cada caso de teste é composto por cinco inteiros:

					
						T1 o tempo de volta em milésimos de segundo com o pneu novo (1 ≤ T1 ≤ 106).
						T2, o tempo de volta em milésimos de segundo com o pneu desgastado (1 ≤ T1 ≤ T2 ≤ 106).
						A, o atraso em milésimos de segundo do pit stop (1 ≤ A ≤ 106).
						V, o número de voltas que um pneu novo pode dar até ficar desgastado (1 ≤ V ≤ 100).
						R, o número de voltas totais do GP de Formosa (1 ≤ R ≤ 100).
					

					Considere que os carros largam de pneus novos.";"Cada saída de um caso de teste deve conter a linha “Teste #i”, indicando o número do teste. Após isso uma nova linha deve ser impressa informando o menor tempo possível (soma do tempo de todas as voltas e dos atrasos de pit stops) para que um piloto possa completar a prova e o menor número de pit stops para que isto ocorra, separados por espaço. 

					A cada caso de teste deve haver uma linha em branco.";True;8 / 10;350;102;29.14%
2031;Pedra, Papel, Ataque Aéreo;Iniciante;2;"Pedra, Papel, Ataque Aéreo é um jogo infantil muito popular, em que duas ou mais crianças formam um círculo e fazem gestos com a mão na tentativa de obter a vitória. As regras são surpreendentemente complexas para um jogo de crianças, mas mesmo assim é bastante popular por todo o mundo. 

					As partidas são muito simples. Os jogadores podem escolher entre o sinal de uma Pedra (o punho), o sinal de um Papel (a palma aberta), e o sinal para o Ataque Aéreo (igual o do Papel, mas com apenas o polegar e o mindinho estendidos). 

					

					Uma partida, com dois jogadores, possuem as seguintes regras para se definir um vencedor:

					
						Ataque Aéreo vs. Pedra: Neste caso, o jogador com o Ataque Aéreo derrota o jogador com a Pedra, por razões óbvias.
						Pedra vs. Papel: Neste caso, o jogador com a Pedra derrota o com Papel, porque a Pedra machuca muito mais.
						Papel vs. Ataque Aéreo: Aqui o Ataque Aéreo ganha, porque Ataque Aéreo sempre ganha e o Papel é patético.
						Papel vs. Papel: Nesta variação, ambos os jogadores ganham, porque o Papel é inútil e ninguém que enfrenta o Papel pode perder.
						Pedra vs. Pedra: Para este caso não há ganhador, porque depende do que os jogadores decidem fazer com a Pedra e normalmente não fazem nada.
						Ataque Aéreo vs. Ataque Aéreo: Quando isto acontece, todos os jogadores perdem, devido a Aniquilação Mútua.
					

					Sua tarefa é escrever um programa que, dada as escolhas de dois jogadores, informe quem venceu o jogo.";"A entrada consiste de N (1 ≤ N ≤ 1000) casos de teste. N deve ser lido na primeira linha da entrada. Cada caso de teste é composto por duas linhas, cada uma contendo uma string. A primeira string representa o sinal escolhido pelo jogador 1 e a segunda string representa o sinal escolhido pelo jogador 2. Essas strings podem ser:

					
						“ataque”: para representar o Ataque Aéreo
						“pedra”: para representar a Pedra
						“papel”: para representar o Papel";"A saída deve conter o seguinte:

					
						“Jogador 1 venceu”: se o Jogador Um tiver vencido a partida
						“Jogador 2 venceu”: se o Jogador Dois tiver vencido a partida
						“Ambos venceram”: se os dois jogadores tiverem vencido a partida
						“Sem ganhador”: se não houver ganhador
						“Aniquilacao mutua”: se ocorrer Aniquilação Mútua
					

					Cada saída de um caso de teste deve estar em uma linha.";True;2 / 10;6754;3937;58.29%
2032;Jogo dos Oito;Grafos;9;"João é um menino que adora brincar com jogos de lógica, ele passa diversas horas de seu dia solucionando puzzles.
Atualmente o jogo que ele está gastando mais horas brincando é o Sliding puzzle, também conhecido como Jogo dos Oito, no qual ele tem em mãos um tabuleiro de 3 linhas e 3 colunas, onde cada elemento desse tabuleiro possui um número ou um espaço em branco.

O objetivo desse jogo é simples, dado um tabuleiro embaralhado (Figura 1), João deve deixá-lo ordenado (Figura 2) e o único movimento possível para solucionar o problema é mover algum número para o espaço em branco.
Resolver o brinquedo não é um problema para João, ele já está fazendo isso sem dificuldades, porém ele ficou intrigado em saber qual é quantidade mínima de movimentos necessários para resolver.

 
Figura 1 - Figura 2

O que você precisa fazer para ajudar João na sua curiosidade é simples, ele te dará a configuração inicial do tabuleiro e você deverá mostrar, caso exista, a menor quantidade de passos possíveis para solucionar o brinquedo e quais passos são necessários para encontrar a solução.
Porém há um detalhe, João é um garoto bem metódico, portanto quando ele está jogando e existem diversas possibilidades em um dado momento ele usa a seguinte prioridade para definir a jogada:
1) Mover a peça que está em cima do espaço em branco
2) Mover a peça que está embaixo do espaço em branco
3) Mover a peça que está na direita do espaço em branco
4) Mover a peça que está na esquerda do espaço em branco
Você deverá usar a mesma prioridade que ele.";"A entrada é composta por vários casos de teste, cada caso terá 3 linhas cada uma com 3 números de 0 a 8, onde o número zero um representa o espaço em branco. Assuma que o brinquedo sempre estará embaralhado.
A entrada termina com o final do arquivo.";"Para cada caso de teste imprima a mensagem ""Quantidade minima de passos = X"", onde X é o total necessário, seguido por todos os passos feitos para solucionar, cada passo deve ser separado por uma linha em branco, para melhor visualização de João. Caso não seja possível solucionar o problema imprima: ""Problema sem solucao"".";True;9 / 10;1051;253;24.07%
2033;Juros Sobre o Empréstimo;Matemática;7;"Sempre que pode, Danilo compra acessórios para o seu computador, pois trabalha como programador e procura sempre melhorar o desempenho de seu PC. Certa vez Danilo resolveu fazer um upgrade geral em seu computador, mas como estava sem dinheiro no momento, resolveu solicitar um empréstimo em dinheiro com seu amigo Maclaud que é agiota. Maclaud então resolveu emprestar o dinheiro ao seu amigo Danilo e o aconselhou a verificar qual seria sua dívida se fosse aplicado o regime de “Juros Simples” ou “Juros Composto”, pois assim saberia que o agiota não aumentaria o valor.

Danilo ficou confuso e resolveu ir pra sua casa e calcular qual seriam os valores finais de acordo com cada regime de juros.  Mas Danilo não é muito bom de cálculo e resolveu pedir a ajuda de um programador que fosse capaz de criar um programa que informado o valor do empréstimo, a taxa de juros “mensal” e o prazo em “meses” que necessita para quitar o empréstimo com os juros, calcule e mostre:

- A diferença entre o valor final com juros simples e o valor final com juros composto;

- A diferença entre o valor a ser emprestado e o valor final com juros simples;

- A diferença entre o valor a ser emprestado e o valor final com juros composto;";A entrada consiste de vários casos de teste e termina com EOF. Cada caso contém dois valores de ponto flutuante de dupla precisão, um C (0.01 ≤ C ≤ 20000.00) e outro i (0.01 ≤ i ≤ 1.00), representando, respectivamente, o valor do empréstimo e a taxa de juros, e um inteiro n (1 ≤ n ≤ 20) representando a quantidade de “meses” referente ao prazo para efetuar o pagamento desse empréstimo ao agiota, já com os juros aplicados.;"Para cada caso, a saída é composta por três linhas. A primeira contendo a mensagem “DIFERENCA DE VALOR = “, seguido do valor da diferença entre o valor final com juros simples e o valor final com juros composto. Na segunda linha será exibida a mensagem “JUROS SIMPLES = “, seguido do valor da diferença entre o valor a ser emprestado e o valor final com juros simples. E na terceira linha será mostrada a mensagem “JUROS COMPOSTO = “, seguido do valor da diferença entre o valor a ser emprestado e o valor final com juros composto.

- Não esqueça de colocar os espaços existentes nas mensagens  e de por uma quebra de linha no final de cada saída.";False;7 / 10;939;234;24.92%
2034;Cantor;Matemática;6;"O matemático Georg Cantor foi um amante de conjuntos e infinito, mas não se dava tão bem com os colegas. Uma manhã ele acordou com a ideia de definir um conjunto tao estranho que, quando lançado, faria o resto dos matemáticos perderem o sono por alguns dias. E ele fez.

                    O conjunto foi definido como o conjunto Cantor, e é formado por todos os números reais no intervalo [0,1] nos quais a expressão decimal na base 3 usa exclusivamente os dígitos 0 e 2. Esse conjunto tem propriedades interessantes, que não serão mencionadas aqui assim você pode dormir hoje. Além disso, e felizmente pra todos envolvidos, nesse problema não iremos trabalhar com o conjunto Cantor, mas uma generalização desse conjunto para números inteiros.

                    Iremos dizer que um número inteiro é do tipo Cantor, ou para abreviar cantinger, se sua expressão em uma dada base B usa apenas os dígitos de um conjunto C dado {0,1,...,B-1}. Assim, o fato de um dado número ser um cantinger ou não depende de como escolhemos B e C.

                    O objetivo é contar os números cantinger, para prevenir que os matemáticos de todo o mundo percam seu sono. Mais precisamente, dados dois inteiros D e H, juntamente com B e C, você deve contar o número de cantingers com respeito a B e C de D a H inclusive.";"Cada caso de teste é descrito usando uma linha. A linha contém três inteiros D, H e B, e uma string L. Os valores de D e H indicam os pontos finais do intervalo fechado [D,H] que estamos interessados (1 ≤ D ≤ H ≤ 1016). O valor de B é a base mencionada no problema (2 ≤ B ≤ 10). A string L = L0 L1 ... LB-1 tem exatamente B caracteres, e descreve o conjunto C também mencionado no problema. O caractere Li é a letra ""S"" maiúscula quando i ∈ C, e a letra ""N"" maiúscula caso contrário (i = 0, 1, ... , B-1). O conjunto C não está vazio, isto é, existe pelo menos um caractere ‘s’ em L. O fim da entrada é indicado por uma linha contendo três vezes o numero -1 e um caractere ‘*’.";Para cada caso de teste, você deve imprimir uma única linha contendo um numero inteiro, representando o número de cantingers (com respeito a B e C) que são maiores ou iguais a D e menores ou iguais a H.;False;6 / 10;58;24;41.38%
2035;Projetando Camisetas;Strings;8;"O Rúgbi da Argentina está atualmente em um de seus melhores momentos de todos os tempos. Recentemente, os menores de 18 anos e as equipes sub-21 nacionais foram qualificados para seus campeonatos mundiais, de modo que os treinadores de ambas as equipes pediram à Incrível Comissão para a Produção de Roupas (ICPR) para fornecer as camisetas para esses eventos. Cada equipe é formada por N jogadores, mas porque as duas Copas do Mundo não ocorrem simultaneamente, a ICPR forneceria apenas N camisetas, para serem usadas por ambas as equipes.

                    Por esta razão, as camisetas deve ser um conjunto válido de roupas para ambas as equipes. As regras das Copas do Mundo de Rúgbi determinam que cada jogador deve ir a campo com uma camiseta que tenha impresso um único número, juntamente com uma abreviação do sobrenome do jogador, não necessariamente único. Isto inclui os casos como camisetas sem abreviação de sobrenome (ou seja, um sobrenome de comprimento 0) e uma camiseta com um sobrenome completo.

                    Os peritos do ICPR imediatamente perceberam que podiam simplesmente fornecer N camisetas com apenas números e sem sobrenomes, e cada uma delas seria uma camiseta válida para ser usado por qualquer jogador. No entanto, os treinadores preferem ter as camisetas com os mais longos sobrenomes possíveis, é claro, sem violar as regras da Copa do Mundo, porque desta forma é mais fácil para eles identificar os jogadores, enquanto os jogos estão ocorrendo.

                    Sua tarefa é ajudar o ICPR encontrar o máximo de letras que podem ser impressas em um conjunto de N camisetas, de modo que este conjunto seja válido para ambas as equipes. Por exemplo, se temos N = 3 jogadores, a equipe sub-18 é composto por ""PEREZ"", ""GONZALEZ"" e ""LOPEZ"", enquanto que a equipe sub-21 é composto por ""GARCIA"", ""PERALTA"" e ""RODRIGUEZ"", a escolha ideal consiste em ter uma camiseta com 1 letra ""G"" (para ser usado por ""GONZALEZ"" e ""GARCIA""), outra com 3 letras sobrenome ""PER"" (a ser utilizado por ""PEREZ"" e ""PERALTA""), e a terceira camiseta com 0 letras (sendo utilizadas por ""LOPEZ"" e ""RODRIGUEZ""). Desta forma, a resposta neste caso seria 1 + 3 + 0 = 4.";"Cada caso de teste é descrito usando três linhas. A primeira linha contém um número inteiro N, indicando o número de jogadores em cada uma das duas equipes (1 ≤ N ≤ 104). A segunda linha contém os apelidos dos N jogadores na equipe sub-18, e a terceira linha contém os sobrenomes dos N jogadores na equipe sub-21. Cada sobrenome é uma string não vazia de no máximo 100 letras maiúsculas. Em cada caso de teste, o número total de caracteres nos 2N sobrenomes é, no máximo, 105, e dois ou mais jogadores do mesmo ou de diferentes equipes podem ter o mesmo sobrenome.

                    O final da entrada e indicado por uma linha contendo -1.";Para cada caso de teste, você deve imprimir uma única linha contendo um número inteiro, o que representa o número máximo de letras que podem ser impressas em um conjunto de N camisetas válidas para serem utilizadas por ambas as equipes, como explicado na declaração do problema.;False;8 / 10;263;82;31.18%
2036;Efeito Dominó;Paradigmas;10;"O efeito dominó é um fenômeno que ocorre quando, em uma linha de peças de dominó, cada uma sobre o seu menor lado, a primeira peça a partir de uma das extremidades cai em direção à próxima peça. Por sua vez, esta segunda peça cai sobre a terceira na linha, e assim por diante até que a outra extremidade da linha seja atingida, e então todas as peças terão caído. Note que para que isso aconteça, a distância entre as peças consecutivas na linha deve ser menor ou igual à altura das peças.

                    Emma encontrou recentemente sobre o efeito dominó e foi imediatamente surpreendida por ele. Ela passou toda a manhã formando uma linha com N peças de dominó que seu irmão Ezequiel deu a ela, mas pouco antes de fazer a primeira peça cair, sua avó foi a casa dela e levou-a para brincar no parque. Ezequiel sabe que Emma não levou em conta a distancia entre as peças consecutivas quando ela formou sua linha de dominó, e não quer vê-la frustrada se todas as peças não caírem depois que ela derrubar a primeira.

                    Assim, Ezequiel quer mover algumas peças de dentro da linha para que a distância entre peças consecutivas é sempre menor ou igual à sua altura H. Para que Emma não descubra que ele moveu algumas peças, ele irá deixar a primeira e a ultima peça onde elas estão, e ele deseja também mover o mínimo possível de peças de dentro da fila. Qual é o numero mínimo de peças que ele deve mover?";"Cada caso de teste é descrito usando duas linhas. A primeira linha contém dois números inteiros N e H, indicando, respectivamente, o número de peças na linha (3 ≤ N ≤ 1000) e sua altura (1 ≤ H ≤ 50). A segunda linha contém N-1 inteiros Di, que representam as distâncias entre pares de peças consecutivas de dominó, na ordem dada pela linha (1 ≤ Di ≤ 100 para i = 1, 2, ..., N-1).

                    O fim da entrada é indicado por uma linha que contém duas vezes o número -1.";Para cada teste, você deve imprimir uma linha contendo um único número inteiro, que representa o número mínimo de peças que têm de ser deslocadas, de modo a manter a distância entre peças consecutivas sempre inferior ou igual a H. Note que a primeira e a última peça não podem ser movidas, e que a ordem relativa entre as peças não pode ser alterada. Se for impossível alcançar o resultado desejado, imprimir o número -1.;False;10 / 10;449;83;18.49%
2037;A Lista;Ad-Hoc;9;"O Comitê Internacional de Xadrez Profissional organiza um torneio para jogadores avançados, com uma metodologia muito estranha. Como esperado, em cada jogo exatamente dois jogadores se enfrentam mutuamente, mas neste caso apenas um jogo ocorre de cada vez, porque existe apenas um tabuleiro de xadrez disponível. Depois de receber as inscrições dos competidores e atribuindo-lhes um número, a organização decide arbitrariamente quais jogos irão acontecer e em qual ordem. Cada concorrente pode enfrentar qualquer outro concorrente qualquer número de vezes, e é até possível que alguns concorrentes nunca joguem uns contra os outros. Assim que decidido todos os jogos a serem jogados, a organização distribui a cada competidor uma lista não-vazia de seus rivais, em ordem cronológica (ou seja, a ordem em que os jogos serão realizados).

                    Florência inscreveu em primeiro lugar, de modo que a ela foi atribuído o número 1. Depois de conversar um pouco com os outros concorrentes, ela percebeu que havia perdido sua lista de rivais. Ela não quer incomodar os organizadores do torneio, então ela pediu a todos os outros concorrentes para obter uma cópia de suas próprias listas de rivais, na esperança de que, com esta informação, ela seria capaz de reconstruir sua lista perdida. Florência não tem certeza se existe apenas um tipo de lista de rivais que é compatível com todas as listas copiadas que foram dadas a ela pelos outros concorrentes. No entanto, ela sabe que a lista que ela foi dada pelos organizadores do torneio é de fato única. Sua tarefa é ajudá-la a reconstruir esta lista.";Cada caso de teste é descrito usando duas linhas. A primeira linha contém um único número inteiro N, que representa o número de competidores (2 ≤ N ≤ 9). Cada concorrente é identificado por um número inteiro diferente de 1 a N, e concorrente número 1 é sempre Florência. A segunda linha contém N-1 strings não vazias Li de no máximo de 100 caracteres cada (para i = 2, 3, ..., N). A string Li é composta unicamente de dígitos entre 1 e N, excluindo o dígito i, e representa a lista de rivais do concorrente número i em ordem cronológica. Note que o número do competidor 1 aparece pelo menos uma vez em uma das listas dadas. Em cada caso de teste, existe uma lista única de rivais para a concorrente número 1, que é compatível com as outras listas de rivais. O final da entrada é indicada por uma linha que contém o número -1.;Para cada caso de teste, você deve imprimir uma única linha contendo uma string, representando a lista única de rivais da concorrente número 1 (Florência) que seja compatível com as listas dos rivais dos outros concorrentes. Os rivais indicados nessa lista devem aparecer em ordem cronológica.;False;9 / 10;257;68;26.46%
2038;Gerando DNA Alienígena;Grafos;10;"GigaFarma é uma das maiores empresas farmacêuticas do mundo, e está atualmente conduzindo experimentos usando DNA alienígena. Seu objetivo é produzir uma cadeia de DNA alienígena que irá resultar no maior lucro possível quando comercializado.

                    Uma cadeia de DNA estranho pode ser entendida como uma sequência não vazia de genes ligados, e por sua vez, cada gene é uma sequência não vazia de bases. Devido ao fato que nem todas as sequências possíveis de bases corresponde a um gene válido, a GigaFarma criou um catálogo de genes que aparecem no DNA alienígena, que são as únicas consideradas sequências válidas de bases. Cada um destes genes tem um valor de acordo com a sua funcionalidade, e uma dada cadeia de DNA alienígena tem um valor de mercado que é a soma dos valores dos genes que o compõem.

                    Vamos representar as diferentes bases com letras minúsculas, 'a' - 'z', e as ligações usando um hífen ""-"". No exemplo a seguir, podemos ver na esquerda uma possível lista de genes e seus valores correspondentes; à direita há algumas cadeias de DNA alienígena que podem ser formados com esses genes, juntamente com os seus correspondentes valores de mercado.

                    

                    GigaFarma só pode produzir cadeias de DNA muito específicas, que chamamos de produzível. Estas cadeias são uma sequência não vazia de partes de DNA que a empresa pode sintetizar, unidas sem quaisquer ligações adicionais entre eles. Cada parte é uma sequência de bases e conexões que contenham pelo menos uma conexão, mas sem quaisquer ligações consecutivas, iniciais ou finais. Cada parte tem um custo, determinado pela dificuldade associada com a sua produção, de modo que cada cadeia produzível de DNA tem um custo de produção que é a soma dos custos de cada uma das partes que o compõem. No exemplo a seguir, podemos ver na esquerda uma lista de partes de DNA e os seus custos; do lado direito, temos algumas cadeias produzíveis de DNA que podem ser formadas com essas partes, juntamente com os seus custos de produção.

                    

                    Note que pode haver várias maneiras de formar uma mesma cadeia produzível usando diferentes partes. Este é o caso de ""como-como-les"" no exemplo, que pode ser obtido usando porções ""como-co"" e ""mo-les"" com um custo de produção de 7, ou simplesmente usando ""como-como-les"" com um custo de produção de 12. É claro que, quando existe mais de uma maneira de sintetizar uma determinada cadeia produzível de DNA, GigaFarma sempre faz usando o processo mais barato possível.

                    Claramente, o conjunto de cadeias de DNA alienígena é infinito, assim como o conjunto de cadeias de DNA produzíveis. No entanto, a GigaFarma não está interessada em nenhum destes conjuntos, mas na sua intersecção. Se verificar os exemplos anteriores, podemos ver que ""como-les"" é uma cadeia de DNA alienígena válida, mas não é produzível, ""mo-les"" é produzível, mas não é uma cadeia de DNA alienígena, e ""como-como-les"" é produzível e uma cadeia de DNA alienígena.

                    Para cada cadeia de DNA alienígena e produzível, a empresa pode comercializar essa cadeia para obter um lucro que equivale ao valor dessa cadeia menos o seu custo de produção do mercado. É claro que, se este lucro não é positivo, a cadeia correspondente nunca será produzida. Por existir muito material genético em todo o lugar, GigaFarma pagaria qualquer coisa para saber o lucro máximo que ela pode obter por algumas cadeias de DNA produzível e alienígena.";"Cada caso de teste é descrito usando várias linhas. A primeira linha contém dois números inteiros G e P, representando o número de genes no catálogo e o número de partes que a GigaFarma pode produzir (1 ≤ L, P ≤ 100).

                    Cada uma das seguintes G linhas descrevem um gene diferente, usando uma string S e um número inteiro V. A string S tem entre 1 e 10 caracteres, e é formada exclusivamente por letras minúsculas representando as bases que formam este gene; o número inteiro V representa o valor desse gene (1 ≤ V ≤ 1000).

                    Cada uma das P linhas seguintes descrevem uma parte diferente do DNA, usando uma string T e um inteiro C. A string T tem entre 1 e 30 caracteres, e é composta de apenas letras minúsculas e hifens, respectivamente representando as bases e as conexões nesta parte. T contém pelo menos uma conexão, mas nunca terá conexões iniciais, finais ou consecutivos. O inteiro C representa o custo de produção para a parte correspondente (1 ≤ C ≤ 1000).

                    Note que em todos os casos de teste, todos os genes são diferentes um dos outros, e todas as partes também são diferentes uma da outra. O fim da entrada é indicado por uma linha que contém duas vezes o número -1.";Para cada caso de teste, você deve imprimir uma única linha contendo um número inteiro, representando o lucro máximo que a GigaFarma pode obter a partir de uma cadeia de DNA produzível e alienígena. Se nenhum lucro é positivo, você deve imprimir o valor 0. Se o lucro pode ser arbitrariamente grande, você deve imprimir um asterisco '*'.;True;10 / 10;172;9;5.23%
2039;Programadores Devem Aprender Teoria da Computação;Grafos;6;"Durante sua aventura em Imaginalândia, Alan Leopold ""Butters"" Stotch Turing inventou sua famosa máquina de fazer sorvete. Basta dizer para a máquina o sabor, que ela faz um sorvete delicioso!

					Fonte da imagem: http://southpark.cc.com/avatar

					Neste momento, Butters está preocupado com uma coisa. Ele é capaz de construir sua máquina de muitas maneiras diferentes; e está fazendo experimentos para determinar qual é a melhor. Você decidiu ajudá-lo, pois está ansioso por um sorvete de creme. Dada a descrição de uma máquina e uma série de Q consultas de sabores, Butters quer saber quantos passos esta máquina leva para fabricar o sorvete de cada consulta.

					Uma máquina de sorvete é uma configuração com um estado (um número inteiro), uma cadeia e uma posição nesta cadeia. Para cada configuração <estado,cadeia,posição>, um passo é gerar uma nova configuração: atualiza-se o estado, atualiza-se o símbolo que está na posição atual; e move-se a posição atual para uma posição adjacente (à esquerda, ou à direita). Caso o comando movimente a posição para uma posição além dos limites da cadeia, deve ser concatenado um espaço em branco no respectivo extremo; e a posição da nova configuração deve apontar para este espaço em branco. A máquina começa na configuração <1,sabor,1>, onde sabor é uma cadeia e o segundo 1 indica a primeira posição desta cadeia. A máquina termina de fazer o sorvete quando atinge uma configuração cujo estado é o inteiro S, de sorvete.

					O truque mágico é que, para cada configuração <estado,cadeia,posição>, a máquina de Butters é capaz de executar vários passos distintos, de modo que ela pode terminar de fazer o sorvete mais rapidamente. Sempre que a máquina chega a uma configuração que leva a múltiplas novas configurações, a máquina cria cópias de si mesma, de modo que cada cópia segue independentemente. Há uma nova cópia para cada nova configuração. Após gerar as cópias para as novas configurações, a máquina morre. Caso uma configuração não gere novas cópias, ela só morre. O processo termina quando alguma cópia termina de fazer o sorvete. É garantido que alguma ramificação da máquina terminará de fazer o sorvete.";"A entrada é composta por vários casos de teste e termina com fim de arquivo.

					A primeira linha de um caso de teste contém os inteiros N, S e Q, onde 0 ≤ N ≤ 25 e 1 ≤ S,Q ≤ 10.

					As próximas N linhas descrevem os comandos da máquina a ser testada. Cada linha está no formato q a t b c, indicando que se uma configuração estiver no estado q e o símbolo na posição atual for a, então deve-se gerar uma nova configuração com estado t, atualizar o símbolo na posição atual para b e deve-se mover a posição na direção c, de acordo com a descrição do enunciado. Note que 1 ≤ q,t ≤ S. O dado a pode ser uma letra minúscula, '0', ou '~' seguido de uma cadeia não-vazia w, que pode conter letras minúsculas ou '0'. No terceiro caso, o comando deve ser executado quando o símbolo na posição atual não aparecer em w. O dado b pode ser uma letra minúscula, '0', ou '*'. No terceiro caso, o símbolo na posição atual não deve ser atualizado. O dado c vale 'E' (esquerda), ou 'D' (direita). O símbolo '0' significa espaço em branco.

					As próximas Q linhas descrevem as consultas. Cada linha é uma cadeia sabor de letras minúsculas, com no mínimo 1 e no máximo 20 letras.";Para cada consulta de cada caso de teste, imprima uma linha com o número de passos da ramificação que produziu o sorvete.;True;6 / 10;21;11;52.38%
2040;O Campeão;Ad-Hoc;7;"Thyago é um torcedor fanático do Sport Clube de Recife e sempre acompanha as finais dos campeonatos em que seu time está jogando. Como os jogos são geralmente à noite e Thyago está ocupado nesse horário trabalhando ou ministrando aula, ele não está com tempo de ver os jogos do seu time de coração e nem acompanhar a pontuação total do campeonato ao longo do dia, no qual está na rodada final. Deoclécio, que é amigo de Thyago e também gosta muito de futebol, está assistindo o campeonato e anotou a pontuação de todos os times até então e também o placar dos jogos da rodada final.

Sua tarefa é ajudar Deoclécio fazendo um programa que, dado o nome dos times participantes do campeonato, a sua pontuação até então e o placar dos últimos jogos, determine qual foi o time campeão e a pontuação final desse time.

Regras desse campeonato:


	Cada gol marcado valerá 3 pontos;
	Caso os times empatem, será adicionado +1 ponto para cada time da partida;
	O time vencedor de uma partida ganhará +5 pontos.


Observações:


	É garantido que sempre haverá um time vencedor do campeonato;
	O time Sport sempre aparece nas entradas do problema;
	Não haverá empates de pontuação final entre dois ou mais times após os placares dados;
	O nome do time da entrada sempre terá apenas uma palavra;
	Os nomes dos times não se repetem e não contém caracteres especiais;
	Nenhum dos times joga mais de uma vez (mais de uma partida no mesmo caso de teste).";"A entrada contém vários casos de teste. A primeira linha contém um inteiro N (2 ≤ N ≤ 100) representando a quantidade de times a seguir que estão participando do campeonato. Seguem Ni linhas contendo o nome do time S e a pontuação do time P até então (0 ≤ P ≤ 100). Logo após, seguem N/2 linhas contendo o placar de cada jogo da última rodada, no formato ""TimeA golsA-golsB TimeB"", conforme ilustrado no exemplo abaixo. A entrada termina com N = 0, na qual não deve ser processada.";"Para cada caso de teste na entrada, seu programa deve produzir uma linha de saída, contendo caso o Sport seja o campeão: ""O Sport foi o campeao com X pontos :D"", sendo X a quantidade total de pontos. Caso contrário, o seu programa deve produzir a seguinte linha: ""O Sport nao foi o campeao. O time campeao foi o S com X pontos :("", sendo S o nome do time vencedor e X a quantidade total de pontos. Deixe uma linha em branco depois de cada caso de teste.";True;7 / 10;509;167;32.81%
2041;Sequência de Gödelito;Ad-Hoc;5;"Gödelito é fascinado por questões lógicas e matemáticas e passa muito tempo brincando em tentar descobrir a semântica por traz das sequencias matemáticas. O mais divertido para Gödelito não é tanto encontrar o próximo número da sequência, mas entender os axiomas que determinam o formato das sequencias.
					Muitas sequencias são ditadas por regras matemáticas, por exemplo a sequência de Fibonacci cujo axioma é que cada número é a soma dos dois anteriores. Outras sequencias envolvem axiomas mais semânticos, por exemplo a sequência: 2, 10, 12, 16, 17, 18, 19, 200..., no qual axioma é: números cujo nome começa com a letra D.
					Gödelito se deparou atualmente com uma sequência bem interessante. Depois de algum tempo ele descobriu que o axioma da sequência é semântico (ele tentou muitas contas matemáticas primeiro, o que só o deixou mais feliz quando descobriu o significado da sequência). A sequência é a mostrada abaixo:

					3
					13
					1113
					3113
					132113
					1113122113
					311311222113
					...

					Gödelito ficou impressionado com o quanto essa sequência cresce rapidamente. E como não quer gastar as folhas do seu caderno para calcular todos os números que quer, pediu a sua ajuda para criar um algoritmo para encontrar os outros números da sequência. Mas ele te explicou o significado da sequência primeiro para facilitar a sua vida:
					Cada número da sequência é gerado através da leitura do número anterior, por exemplo, o segundo número é 13 porque a linha de cima contém um (1) número três (3). O terceiro número é 1113, porque a linha de cima contém um (1) número um (1) e um (1) número três (3). O quarto número da sequência é 3113, pois a linha de cima contém três (3) números um (1) e um (1) número três (3). Acho que deu para entender a ideia, não é?";A entrada é composta de vários casos de teste. Cada caso de teste é composto de uma linha contendo um número inteiro N, que representa o enésimo número da sequência que deve ser calculado, com 0<N< = 40.;A saída de cada caso de teste é apenas uma linha contendo o enésimo número da sequência.;False;5 / 10;597;317;53.10%
2042;Fofão da Pérsia;Paradigmas;9;"É sabido que uma organização de seres extraordinários vem ascendendo nos últimos tempos. Não se sabe ao certo de onde ou como ela surgiu, mas é notável o quão influente mundialmente são seus membros e o quanto são adorados. Pergaminhos encontrados há décadas indicam que chegaria um tempo em que uma organização que traria felicidade à humanidade chamada Carreta Furacão surgiria e, ao que tudo indica, esse tempo chegou. As escrituras também dão nomes aos lendários seres que fazem parte da organização: Popeye, Capitão América, Patatá, Ben 10, Homem Aranha, Mickey Mouse, Pica-Pau e seu líder supremo: Fofão. As habilidades malabarísticas de Fofão fazem jus a seu apelido de sua forma suprema: Fofão da Pérsia.



Apesar de toda sua superioridade, Fofão da Pérsia tem um problema. Sua cidade é formada por bairros e ruas bidirecionais que os ligam. Em cada rua há exatamente um muro. Ele está a bordo do trenzinho da Carreta Furacão em um bairro P, mas todos os outros membros da Carreta Furacão estão em um bairro D. Com o objetivo de reunir todos os membros e formar o Exódia, Fofão deseja chegar no bairro D (o trenzinho consegue chegar em qualquer bairro partindo de qualquer outro bairro). Quando o trenzinho entra em uma rua, Fofão não resiste à tentação e sempre desce do trenzinho para aplicar o seu famoso mortal no muro daquela rua (ver imagem abaixo) e retorna logo após. Cada mortal proporciona aos fãs que estão dentro do trenzinho um nível de felicidade Fi, a depender da altura do muro. O solado do tênis de Fofão começa com uma quantidade B de borracha e, para cada mortal em um muro, uma quantidade Si de borracha é gasta do solado, a qual depende das condições do muro. Se em algum momento a quantidade de borracha no solado de Fofão for X e ele tentar aplicar um mortal em um muro que tem Si > X, Fofão explode. Fofão (e o motorista do trenzinho) não se importa de passar pela mesma rua várias vezes; a única coisa que ele deseja é chegar no bairro D com vida e tendo proporcionado o máximo de felicidade aos fãs dentro do trenzinho. Note que se em dado momento o trenzinho chegar no bairro D, o motorista irá tirar um cochilo e nenhuma rua mais poderá ser percorrida. Escreva um programa que diga ao Fofão qual é o máximo de felicidade que ele consegue proporcionar aos fãs que estão dentro do trenzinho.";"A entrada descreve um único caso de teste. A primeira linha consiste de dois inteiros N e M, que representam a quantidade de bairros e a quantidade de ruas, respectivamente. Os bairros são enumerados de 1 até N. (2 <= N <= 100, 1 <= M <= (N * (N - 1)) / 2)

A segunda linha consiste de dois inteiros P e D, que representam o bairro de partida e o bairro de destino, respectivamente. (1 <= P, D <= N e P != D)

A terceira linha contém um inteiro B, o qual representa a quantidade de borracha inicial no solado de Fofão. (1 <= B <= 1000).

As M linhas seguintes descrevem as ruas (e o muro presente em cada rua). Cada rua é descrita por quatro inteiros: Xi, Yi, Fi e Si, que representam, respectivamente, o primeiro bairro que é conectado à rua, o segundo bairro que é conectado à rua, a quantidade de felicidade que o muro presente na rua proporciona aos fãs quando um mortal é aplicado por Fofão e a quantidade de borracha do solado de Fofão que é gasta quando um mortal é aplicado no muro da rua. (1 <= Xi, Yi <= N, 1 <= Si <= 1000, 1 <= Fi <= 10^9 e Xi != Yi)";Imprima uma linha com um inteiro T que representa o máximo de felicidade que Fofão consegue proporcionar ao seus fãs na viagem do bairro P ao bairro D. Se for impossível para Fofão chegar com vida ao bairro D, imprima -1.;True;9 / 10;230;61;26.52%
2043;Montanha Alta;Geometria Computacional;10;"Para sair de férias, Horácio e Hernán sacrificaram sua participação em uma importante competição de programação. Enquanto você estiver nessa competição, eles estão perto do Andes dirigindo ao longo da estrada 40, na Argentina, desfrutando de uma vista agradável das montanhas no horizonte. Neste momento, o céu sobre a rodovia é limpo, azul, enquanto a parte visível das montanhas é um perfil apresentando texturas ricas e atraentes. Isso preocupa Horácio e Hernán, porque temem que as imagens que estão a fotografas vão ser muito caras para imprimir corretamente. Por esta razão, na próxima parada irão pegar os seus computadores portáteis e escrever um programa para calcular a área do perfil de montanha que tem de ser impresso em cada imagem. Você pode terminar este programa antes deles?

                    Horácio e Hernán irão modelar o perfil da montanha da seguinte maneira. Cada montanha é representada por um triângulo isósceles cuja base esta sobre o eixo X do plano XY. Dois lados de igual comprimento conectam as extremidades da base ao vértice oposto do triângulo, que é a ponta da montanha correspondente. Para descrever a posição e a forma do triângulo, usámos as coordenadas ao longo do eixo X dos pontos de extremidade da base, juntamente com a altura da montanha.

                    A figura abaixo é o modelo de um perfil formado por 4 montanha montanhas que são sobrepostas uma com a outra. A área da superfície do perfil da montanha que tem que se calcular é marcado com listras. A montanha menor da figura é descrita pelos valores I = 4 (o ponto de extremidade esquerda da base de montanha), D = 5 (a extremidade direita da base de montanha) e H = 1 (a altura da montanha)

                    

                    Neste problema, você terá a representação do perfil de montanha, e você tem que encontrar a área da união de todos os triângulos correspondentes, de tal forma que as partes sobrepostas são contadas apenas uma vez.";Cada caso de teste é descrito usando várias linhas. A primeira linha contém um único número inteiro N, indicando o número de montanhas (1 ≤ N ≤ 1000). Cada uma das N linhas seguintes descreve uma montanha usando três números inteiros I, D e H, que representam, respectivamente, a coordenada X do ponto de extremidade esquerda da base, o mesmo para a extremidade direita da base, e a altura da montanha (1 ≤ I, D, H ≤ 105 com I <D). Em cada caso de teste não existem duas montanhas que são exatamente a mesma (ou seja, com valores iguais para os três parâmetros I, D e H). O final da entrada é indicado por uma linha contendo -1.;Para cada caso de teste, você deve imprimir uma única linha contendo um número racional, o que representa a área do perfil de montanha correspondente. Aproxime o resultado para o numero mais próximo de dois dígitos decimais. Em caso de empate, aproxime para cima. Note-se que você deve sempre usar exatamente dois dígitos depois do ponto decimal, mesmo que isso signifique que termine com um zero.;True;10 / 10;108;27;25.00%
2044;Em Dívida;Matemática;3;"Ignácio e Inês realmente gostam de ciência. Eles vivem em Noglônia, onde todos sabem que há N museus de ciência. Ignácio e Inês têm N sábados livres, então eles concordaram em uma programação para visitar um museu de ciência diferente em cada um desses dias.

                    Ignácio é muito mesquinho, então todo sábado ele irá dizer a Inês que se esqueceu de trazer o dinheiro para pagar a entrada do museu, e pedi-la para pagar por ele. Inês sempre faz isso, e por conhecê-lo bem, sabe que também que ele nunca irá pagá-la se ela não pedir seu dinheiro de volta. Na verdade, Inês sabe que mesmo que ela peça Ignácio seu dinheiro de volta, ele só aceitará pagar se a dívida acumulada é um múltiplo de 100, porque senão ele vai argumentar que não tem nenhuma dívida a pagar exatamente, e então não pagará nada.

                    Sendo essa situação, todos os domingos, se a dívida acumulada é um múltiplo de 100 Inês vai até a casa de Ignácio para reivindicar o seu dinheiro, e porque ele não vai ter nenhuma desculpa irá pagar, sem qualquer tipo de desculpa. É claro que Ignácio não gosta disso, mas é consolado pela ideia de que, se a dívida acumulada depois de visitar os N museus não é um múltiplo de 100, Inês não deve cobrar a última parte de seu dinheiro.

                    Inês gostaria de saber quantas vezes ela vai ter que ir para a casa de Ignácio para pedir seu dinheiro. Para o cálculo, ela pode fornecer uma lista de preços dos ingressos para os N museus de ciência em Noglônia, na ordem em que ela e Ignácio vão visitá-los.";Cada caso de teste é descrito usando duas linhas. A primeira linha contém um número inteiro N, indicando o número de museus de ciência em Noglônia (1 ≤ N ≤ 100). A segunda linha contém N inteiros Pi representando os preços dos ingressos para os diferentes museus, na ordem em que eles vão ser visitados (1 ≤ Pi ≤ 100 para i = 1, ..., N). O final da entrada é indicado por -1.;Para cada caso de teste, você deve imprimir uma única linha contendo um número inteiro, o que representa o número de vezes que Inês vai ter de ir à casa de Ignácio para pedir seu dinheiro.;False;3 / 10;426;296;69.48%
2045;Defendendo Alamo;Geometria Computacional;10;"O forte do Alamo, originalmente chamado de Misión San Antonio de Valero, foi fundado pelos missionários para abrigar os padres e os índios convertidos na região que era disputada pelos colonos americanos e espanhóis. Foi fundado no século XVIII e serviu de palco para a mais sangrenta batalha pela emancipação do Texas. A batalha do Alamo ocorreu em 23 de fevereiro de 1836 quando o exército do Gal. Antonio Lopes de Sant’Anna cercou o forte. Texanos e “tejanos” (chamados “defenders”) defenderam a posição por 13 dias.

                    O forte do Alamo era uma fortificação de formato bastante intricado, cercado por uma alta cerca. Muitas vezes era difícil dizer se um soldado estava dentro ou fora dos limites do forte.

                    Sua tarefa neste problema é dada uma instância de um forte, dado pelas coordenadas dos vértices da cerca, as coordenadas da bandeira do Texas e a posição de vários soldados, determinar quais deles são “defenders” e quais são espanhóis.";"São dadas várias instâncias. Cada instância começa com um inteiro que é o número 0 ≤ N ≤ 1000 de vértices que a cerca do forte tem. O valor 0 indica o fim dos dados. Nas N linhas seguintes vêm as coordenadas dos postes da cerca do forte. Os postes são dados a partir do primeiro, seguindo a cerca em sentido horário. A seguir vem a posição da bandeira do Texas. Na próxima linha, vem o número 0 ≤ M ≤ 1000 de pessoas a serem verificadas. Nas M linhas seguintes vêm as coordenadas das posições de cada uma das pessoas. Todas as coordenadas fornecidas são números inteiros no intervalo [−100000; +100000].";Para cada instância solucionada, você deverá imprimir um identificador Instancia h em que h é um número inteiro, sequencial e crescente a partir de 1. Nas M linhas seguintes, você deve imprimir soldado k (para k = 1, . . . ,M) seguido de defender ou espanhol respectivamente se o soldado estiver dentro ou fora do forte. Uma linha em branco deve separar a saída de cada instância.;False;10 / 10;334;39;11.68%
2046;Entregadores de Steak;Grafos;9;O Texas é famoso pela sua carne de excelente qualidade. “Steaks” com até dois centímetros de espessura assados em churrasqueiras são a especialidade culinária do estado. Em San Antonio é difícil encontrar entregadores de pizza por telefone, mas é muito comum encontrar “disk steaks”. Você liga para o número e em poucos minutos chega um suculento bife à sua casa, quente e pronto para comer. É claro que tamanha eficiência depende de um complicado sistema de entregas. Há várias sedes da empresa espalhadas pela cidade, e sempre que uma chamada é feita a sede mais próxima é acionada, o steak é assado e o entregador segue com o suculento jantar. Sabemos que San Antonio é uma cidade planejada. Podemos imaginar os cruzamentos da cidade como vértices de uma grade. Por algum motivo obscuro, todas as sedes estão instaladas em cruzamentos. Sua tarefa é ajudar a empresa na entrega dos steaks.;São dadas várias instâncias. Para cada instância são dadas as dimensões 0 ≤ M, N ≤ 1000 da cidade (será uma grade com M linhas e N colunas). Um valor N = 0 ou M = 0 indica o fim dos dados. A seguir vem o número 0 < K ≤ 100000 de sedes da empresa. Nas K linhas seguintes vêm as coordenadas das sedes. A seguir, vem o número 0 ≤ L ≤ 100000 de ligações pedindo steaks. Nas L linhas seguintes vêm as coordenadas da posição de cada chamada (que também são vértices da grade).;Para cada instância solucionada, você deverá imprimir um identificador Instancia H em que H é um número inteiro, seqüencial e crescente a partir de 1. Nas L linhas seguintes, você deve imprimir por qual sede da empresa o pedido correspondente àquela linha foi atendido. Em caso de haver mais de uma sede à mesma distância, dê preferência pela que possuir menor índice de linha. Persistindo o empate, dê preferência pela com menor índice de coluna. Uma linha em branco deve separar a saída de cada instância.;False;9 / 10;1316;265;20.14%
2047;Fly By Night;Estruturas e Bibliotecas;8;"Bill Poucher anunciou em Shangai (China), em abril último, que a trigésima final mundial do ACM-ICPC será realizada em San Antonio (USA) na segunda semana de 2006.

                    Ao tomar conhecimento de tal informação (com alguns meses de atraso), uma empresa de transportes aéreos do Texas - conhecida como Fly by Night Ltd. - decidiu aproveitar o evento para tentar incrementar seu ganho anual.

                    O objetivo do CEO da empresa era oferecer transporte aéreo para os times (incluindo competidores e técnicos) e para a equipe de suporte (aqueles que fazem as coisas funcionarem) a partir de suas cidades de origem, em seus países de origem, até o local da competição. Para tentar garantir o sucesso de sua idéia, o mesmo CEO ofereceu tarifas ligeiramente abaixo do preço de mercado para aqueles que seriam transportados. Como eles eram em sua maioria estudantes e professores universitários, toparam na hora.

                    Como você já deve ter imaginado, a Fly by Night Ltd. opera vôos noturnos. No entanto, em vez de possuir seus proprios aviões, a referida empresa apenas vende assentos em vôos de outras companhias. Ela ganha uma boa comissão devido ao fato de tais vôos terem, historicamente, uma baixa ocupação.

                    No entanto, quando os funcionários da empresa foram verificar os vôos que teriam à disposição para realizarem a operação, tiveram uma bela surpresa. A maior parte dos vôos estava completamente lotada. Os que não estavam lotados, não possuiam muitos assentos livres. Ninguém soube explicar o motivo de tal demanda irregular. Duas hipóteses foram levantadas: a proximidade do spring-break americano e a popularidade da competição. :-)

                    Na tentativa de salvar a empresa (e seu próprio cargo), o CEO percebeu que teria de utilizar escalas e baldeações. O lucro desta forma seria menor, mas nada comparado ao prejuízo que teria se operasse com vôos diurnos ou deixasse de transportar os passageiros (que naquela altura, já tinham pago as passagens...).

                    Os funcionários da Fly by Night Ltd. levantaram então um conjunto de cenários com vôos que poderiam ser utilizados. O que foi percebido pouco depois é que nem todos os cenários eram viáveis, já que nem todos conseguiam transportar o montante de passageiros necessário. Finalmente, o CEO percebeu que não tinha pessoal qualificado para lidar com a situação. Você foi então contratado para desenvolver um programa que, para cada cenário construído, responda se o cenário é viável ou inviável.";"Um cenário será, daqui em diante, chamado de instância. Seu programa deve estar preparado para lidar com diversas instâncias.

                    Cada instância começa com um inteiro 0 ≤ m ≤ 100 que especifica o número de cidades de origem dos passageiros que devem ser transportados. Um valor m = 0 indica o final das instâncias e não deverá ser processado. Em caso contrário, em cada uma das próximas m linhas, são dados o nome de uma cidade de origem e o respectivo número de passageiros daquela cidade (um inteiro não negativo menor ou igual a 100). O nome de uma cidade possui entre 1 e 20 caracteres tomados do alfabeto Σ={a,b,...,z,-}.

                    Na próxima linha são dados um inteiro 0 ≤ n ≤ 100, que representa o número de vôos da instância, e o nome da cidade em que ocorrerá o evento (o CEO decidiu que o programa deveria aceitar isso). O nome desta cidade segue as mesmas regras estabelecidas acima.

                    Em cada uma das próximas n linhas são dados os nomes de duas cidades de um vôo (origem e destino, respectivamente), seguido por um inteiro não negativo menor ou igual a 200 que representa o número de assentos livres naquele vôo. Novamente os nomes das cidades estão sobre Σ e de comprimento entre 1 e 20. Você pode supor que não há duas cidades com o mesmo nome, e que as cidades de origem e destino são sempre diferentes. Além disso, a Fly by Night Ltd. não trabalha com mais de um vôo entre quaisquer duas cidades.

                    Em cada linha da entrada, um número qualquer de espaços pode separar os dados fornecidos.";Para cada instância solucionada, você deverá imprimir um identificador Instancia h em que h é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte, você deve imprimir viavel se é possível transportar todos os passageiros de suas origens até o destino especificado, e inviavel em caso contrário. Uma linha em branco deve separar a saída de cada instância. Inclusive na última instancia.;False;8 / 10;65;23;35.38%
2048;Houston, Nós Temos Um Problema!;Grafos;7;"No dia primeiro de julho de 1947, um estranho objeto foi detectado por radares da força aérea americana instalados em Roswell, White Sands e Alamogordo. A tremenda velocidade e os movimentos erráticos do objeto indicaram que ele não era um avião ou meteorito. Quatro dias depois um pastor de ovelhas e um grupo de arqueólogos encontram restos de um objeto acidentado ao norte de Roswell. A partir daí, autoridades americadas entram em cena e transportam os restos de tal objeto para Fort Worth no Texas. Elas disseram que os destroços encontrados eram simplesmente restos de um balão meteorológico experimental. Muitas pessoas, no entanto, acharam que se tratavam dos restos de um objeto voador não identificado (UFO). Muitos anos se passaram desde então, e o caso continua atraindo atenção e gerando polêmica.

                    Um grupo de ufólogos radicado em San Antonio, uma cidade texana situada a sul-sudoeste de Fort Worth, está convencido de que seres extraterrestres têm visitado a região com frequência desde então. Após muita pesquisa, os ufólogos descobriram que poderiam construir uma rede de comunicação alternativa para tentar contactar os ETs. Tal rede utilizaria resquícios do antigo sistema de telégrafos existentes no deserto do Texas e o fato de sua alternatividade advém da tentativa de evitar, segundo eles, a intromissão das autoridades supra citadas.

                    Após um minucioso levantamento (que identificou postes, fiações, condensadores, transformadores, etc.), os ufólogos perceberam que informações transmitidas em certos trechos da antiga estrutura dos telégrafos apresentavam qualidade pior do que em outros. Baseados em amostras estatísticas, levantaram, para alguns pares de pontos u e  v da antiga rede, uma probabilidade  puv de haver interferência nas informações transmitidas entre u e v. Sabendo que você estaria na região em abril do ano que vem, eles pediram a você que construísse um programa para identificar o menor conjunto de trechos a serem utilizados, de forma que (i) todos os pontos por eles desejados estejam interligados (mesmo que indiretamente), e tal que (ii) a probabilidade total de interferência nas mensagens enviadas nesta rede alternativa seja mínima. Ávido de interesse em descobrir a verdade (que ""está lá fora...""), você prontamente atendeu à solicitação.";Seu programa deve estar preparado para lidar com diversas instâncias. Cada instância possui o formato que segue. Na primeira linha, são especificados dois inteiros 0  ≤  n  ≤ 100 e 0  ≤  m  ≤  n(n-1)/2 que representam, respectivamente, o número de pontos na rede alternativa e o número de pares desses pontos para os quais as probabilidades de haver interferência foram medidas. Nas  m  linhas seguintes, são dados (em cada linha) dois inteiros 1  ≤  u,v  ≤  n  e um racional 0  ≤  puv  ≤ 1 representando que entre os dois pontos  u  e  v, a probabilidade de interferência é  puv. Um valor  n  = 0 indica o término das instâncias e não deve ser processado. Você pode supor que sempre será possível satisfazer a restrição (i).;Para cada instância solucionada, você deverá imprimir um identificador Instancia  h, em que  h  é um número inteiro, sequencial e crescente a partir de 1. Na próxima linha, você deve imprimir (com cinco casas decimais) a probabilidade mínima de interferência calculada para tal instância. Uma linha em branco deve separar a saída de cada instância.;False;7 / 10;110;50;45.45%
2049;Números de Ahmoc;Strings;5;"Antes da colonização hispânica e depois inglesa, a região de San Antonio era dominada pelos índios ahmoc-axhozupeck, ancestrais dos sioux e dos apaches. A etnia foi completamente destruída pelos colonizadores, no século XVIII, tornando impossível a tarefa de decifrar seus grandes painéis.

                    O Departamento de Arqueologia da Universidade Baylor dedica boa parte de sua pesquisa aos painéis dos índios Ahmoc. Surpreendentemente os índios já conheciam os algarismos hindus, mas não o usavam para cálculos (afinal não existia comércio naquela civilização). Os arqueólogos de Baylor suspeitam que os painéis repletos de números fossem apenas decorativos. Também suspeitam que alguns padrões que se repetiam eram assinaturas dos artistas, a fim de garantir a autenticidade do painel.

                    Sua tarefa neste problema será verificar se os painéis são verdadeiros, ou seja, se, de fato, contêm a assinatura do artista que o arqueólogo suspeita ser o autor.";São dadas várias instâncias de teste. Cada instância começa com um número inteiro positivo 0 ≤ a ≤ 1000000 que é a assinatura do artista. O inteiro 0 indica o fim dos dados. Na linha seguinte vem a sequência de números do painel, que poderá ter até 300000 algarismos.;"Para cada instância solucionada, você deverá imprimir um identificador ""Instancia h"" em que h é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte, você deverá imprimir ""verdadeira"" se a sequência de números contém a assinatura do artista ou ""falsa"" em caso contrário. Uma linha em branco deve separar a saída de cada instância.";False;5 / 10;2626;656;24.98%
2050;Bar do Ramsey;Paradigmas;7;"Bill “Snake” Ramsey foi um dos mais famosos donos de saloon em San Antonio. Seu saloon era conhecido até a costa oeste, e suas mesas de pôquer sempre lotadas eram sinônimo de jogos eletrizantes, muito dinheiro e, muitas vezes, muitas disputas sangrentas.

                    Ramsey tinha uma teoria (e seu revólver .38 intimidava os que dele discordavam ao contestá-lo) de que em uma mesa de pôquer com 6 participantes havia sempre ou 3 que eram amigos entre si, ou 3 que eram inimigos entre si (naquela época em San Antonio se você não era amigo de alguém automaticamente se tornava seu inimigo).

                    Hoje sabemos que Ramsey tinha de fato razão. Sua tarefa neste problema é checar a afirmação de Ramsey para vários exemplos.";São dadas várias mesas de pôquer (cada mesa tem sempre 6 jogadores). Para cada mesa é dado o número −1 ≤ m ≤ 15 de pares de amigos seguido, na linha seguinte, dos nomes dos participantes daquele jogo (cada nome é uma string de no mínimo 1 e no máximo 15 caracteres e você pode supor que os nomes dos jogadores são dois a dois distintos). O valor −1 indica o fim dos dados. Em seguida, vêm m linhas, cada uma com os nomes de dois amigos naquela mesa. Considere que um jogador não é amigo de si mesmo.;Para cada instância solucionada, você deverá imprimir um identificador Instancia h em que h é um número inteiro, seqüencial e crescente a partir de 1. Nas próximas linhas, você deve imprimir os nomes de três jogadores daquela mesa seguida de sao amigos ou sao inimigos conforme o caso. Devem haver tantas linhas quantos forem os casos determinados. Estas linhas devem estar listadas em ordem lexicográfica. O mesmo vale para os três nomes em uma mesma linha. Uma linha em branco deve separar a saída de cada instância.;False;7 / 10;91;36;39.56%
2051;Mapas de Karnaugh I;Ad-Hoc;8;"Mapa de Karnaugh é uma tabela montada para facilitar o processo de minimização das expressões lógicas. Eles permitem simplificações com 2, 3, 4 ou mais variáveis, nesse problema utilizaremos no máximo expressões com 4 variáveis. Sua tarefa é simples, dado a tabela verdade você deverá  imprimir o respectivo Mapa de Karnaugh e dizer se a expressão é uma ""Tautologia"", uma ""Contradicao"" ou uma ""Contingencia"".";A primeira linha do arquivo de entrada contém um inteiro N (0 ≤ N ≤ 50) que indica o número de casos de testes, na primeira linha do caso de teste contém um inteiro V [2, 3, 4] que indica a quantidade de variáveis que serão utilizadas, as próximas 2V linhas conterão a tabela verdade.;"Para cada caso, você deverá apresentar a mensagem “Mapa de Karnaugh”, seguido pelo mesmo conforme o exemplo abaixo, após apresentar o mapa você deverá identificar se é ""Tautologia"",""Contradicao"" ou ""Contingencia"", uma linha em branco deverá separar os casos de teste, cuidado com os espaços, os valores no mapa deverão ser alinhados com o primeiro dígito da coluna.";False;8 / 10;115;46;40.00%
2052;Mapas de Karnaugh II;Paradigmas;5;"O professor Jack entregou uma lista de exercícios de revisão, afirmando que na próxima aula vai fazer uma avaliação. O conteúdo principal desta lista é Mapas de Karnaugh. John recebeu a lista, mas percebeu que faltou as aulas de Mapas de Karnaugh. John é esperto e conhece um amigo que sempre vai as aulas, e sabe como resolver Mapas de Karnaugh. Neste problema você é o amigo de John, será que você consegue ajudar John? Conectando a menor quantidade de pares possíveis? Seguindo as especificações do professor:
                    
                        1º Formar pares: Um par é conectado, quando encontrar o menor ponto adjacente presente.
                        2º Formar termos isolados: Pares conectados não precisam ser conectados uma segunda vez.
				    



					 

                    
                        No Mapa de Karnaugh acima é possível identificar os pontos conectados seguindo as especificações do professor. Pares conectados: O par [ 2-6 ] indica que o ponto 2 encontrou o menor ponto adjacente presente 6. Pares isolados: Note que o par [ 6-8 ] não é um par isolado. O ponto 6 está conectado com o ponto 2, e o ponto 8 está conectado com o ponto 7. Portanto não é um par válido. Um par é válido se, e somente se, um de seus pontos não estiver conectado a nenhum outro ponto. Cada par consiste de [ origem-destino ], os pares sempre começam a ser conectados do menor ponto presente na N linha da entrada, origem, com o menor ponto adjacente presente de destino, um determinado ponto de origem tem quatro pontos de destino, por exemplo o ponto de origem 16 tem os pontos [ 8, 12, 14, 15 ] de destino.
                      
					
                        Uma instância contém um número inteiro N. As próximas N linhas consistem em pontos verdadeiros no Mapa de Karnaugh. Estamos falando de Mapas de Karnaugh de quatro variáveis. Portanto no máximo 16 números. Como o professor mostrou um exemplo, tudo fica mais fácil. Na imagem acima é possível observar que são quatro pares conectados: [ 2-6 ] [ 7-8 ] [ 12-16 ] [ 13-14 ]. E todos os pontos estão conectados. Ajude John a resolver os exercícios da revisão.";A primeira linha de cada instância contém um inteiro N ( 1 ≤ N ≤ 105 ), que corresponde ao número de exercícios presentes na lista do professor Jack. As N  linhas seguintes contém um número indefinido de inteiros E ( 1 ≤ E ≤ 16 ). Cada número inteiro E  indica que no Mapa de Karnaugh na posição E, é verdadeira, isto é contém 1, como mencionado acima. A entrada termina com final de arquivo (EOF).;"Para cada instância, imprimir a mensagem ""Instance #H:"", onde H é o número da instância, sequêncial e crescente a partir de 01. Em seguida, para cada N linha da instância, o professor pediu para imprimir, o número de pares conectados, o número de pontos não conectados, seguido da mensagem ""->"". Após, listar todos os pares conectados em ordem ascendente, com um espaço entre dois pares conectados. Se não conseguir conectar nenhum ponto, imprimir a mensagem ""No connection found"". Imprimir uma linha em branco entre duas instâncias consecutivas.";True;5 / 10;14;2;14.29%
2053;ET Phone Home;Paradigmas;6;"Desde o início de 2006 o Seti@home (programa de busca de vida alienígena) tem registrado padrões estranhos em transmissões de rádio recebidas do espaço. Inicialmente imaginou-se tratar apenas de estática. Porém, com o tempo e a repetição das transmissões os pesquisadores foram se convencendo que algo mais havia. Convidados a participar do projeto, linguistas da Universidade de Baylor identificaram uma linguagem na transmissão. Era uma linguagem bastante simples.

                    A língua tem várias regras de composição de palavras. As regras de composição serão descritas nesse problema pelos seguintes elementos: um conjunto de símbolos não-terminais V; um conjunto de símbolos terminais T; um símbolo não-terminal especial chamado de raiz; um conjunto de regras de composição de palavras.

                    Todas as regras de composição que consideramos aqui serão ou da forma A → BC ou da forma A → a, onde A, B, C são elementos de V e a é um elemento de T. A notação acima indica que podemos substituir o não-terminal A à esquerda da seta pelo terminal a (no primeiro caso) ou pela concatenação dos não-terminais A e B (no segundo caso) que aparecem à direita da seta.

                    Aplicando repetidamente as regras de composição sobre o símbolo raiz, podemos montar palavras válidas na língua.

                    Por exemplo, suponha que o seguinte conjunto de regras de composição é válido:

                    S → AB

                    A → a

                    B → b

                    A palavra ab pode ser obtida a partir desse conjunto de regras de composição da seguinte maneira:

                    S → AB

                    AB → aB, pois A → a

                    aB → ab, pois B → b

                    Já a palavra b não pode ser produzida a partir de S a partir desse mesmo conjunto de regras de composição.

                    Dado um conjunto de regras de composição e uma lista de palavras, sua tarefa é determinar, para cada uma das palavras, se ela pode ou não ser produzida a partir das regras descritas na instância atual.";"A entrada é composta por vários casos de teste. Cada teste segue as regras descritas acima.

                    Na primeira linha de cada teste aparece o símbolo raiz, que sempre será uma letra maiúscula. Na segunda linha, o conjunto V será fornecido como uma palavra composta apenas por letras maiúsculas. Cada letra dessa palavra será identificada como um membro de V.

                    O conjunto T será dado como uma palavra de caracteres imprimíveis (com exceção de # e caracteres em branco) na terceira linha. Cada caractere dessa palavra será identificado como um membro de T.

                    A seguir, serão fornecidas várias linhas, que descreverão as regras de composição para a instância atual. Uma regra de composição na forma # → # indica o fim da lista de regras de composição.

                    Por fim, são fornecidas várias linhas, cada uma contendo uma palavra que desejamos saber se pode ou não ser produzida a partir da raiz por meio das regras de composição. Essas palavras não vão conter qualquer caractere em V e são compostas por no máximo 50 caracteres. A lista de palavras termina com uma linha contendo # na primeira coluna.";No início de cada instância imprima a linha Instancia k, onde k é o número da instância atual. Em seguida, para cada palavra x da lista, imprima uma linha na saída dizendo x e uma palavra valida se ela pode ser obtida a partir da raiz por meio das regras de composição, e x nao e uma palavra valida caso contrário. Imprima uma linha em branco após cada instância.;False;6 / 10;12;4;33.33%
2054;Last Year at Marienbad;Ad-Hoc;9;"Durante a Guerra Fria a cidade de Marienbad na República Tcheca ﬁcou imortalizada pelos espiões que usaram seus hotéis luxuosos para troca de informações e até mesmo como um recanto de férias e descanso. Na cidade ﬁcou famoso o jogo de ""Streichholzpiramidentfernungspiel"", como era conhecido e apreciado pelos espiões das duas Alemanhas.

                    O jogo começa com 6 ﬁleiras de palitos. A primeira ﬁleira contém 1 palito, a segunda contém 3, a terceira 5, a quarta 7, a quinta 9 e a sexta 11. Segue abaixo um desenho com o esquema do jogo inicial.

                    

                    Participam do jogo duas pessoas, que alternam seus movimentos. Em cada jogada, uma pessoa deve tirar uma quantidade diferente de zero de palitos do tabuleiro. Todos os palitos retirados em uma jogada devem pertencer à mesma ﬁleira. Assim, se uma ﬁleira contém k palitos e um jogador decide retirar palitos dessa ﬁleira em sua jogada atual, ele tem k opções distintas de jogadas (poderá remover entre 1 e k palitos).

                    Se após uma jogada o tabuleiro ﬁcar completamente vazio (i.e., sem palitos em qualquer uma das 6 ﬁleiras), o jogador que realizou a última jogada (o jogador que removeu os últimos palitos) perde o jogo.

                    Dada a descrição de uma conﬁguração do tabuleiro após algumas jogadas, determinar se o jogador que fará a próxima jogada pode vencer o jogo, assumindo que o adversário é inteligente e portanto sempre escolhe a melhor jogada possível.";A entrada começa com um número inteiro N na primeira linha, indicando o número de instâncias do problema que seu programa deve resolver. As próximas N linhas contêm a descrição das instâncias. Cada uma dessas linhas contém uma sequência de 6 números inteiros. O i-ésimo número da sequência indica quantos palitos ainda restam na i-ésima ﬁleira de palitos do jogo. Todos os números da sequência são válidos (ou seja, o i-ésimo inteiro contém um valor entre 0 e o número de palitos com o qual a i-ésima ﬁleira começa o jogo).;"Para cada instância, você deverá imprimir um identiﬁcador ""Instancia K"", onde K é o número da instância atual. Na linha seguinte, seu programa deve imprimir ""sim"" se o jogador pode vencer a partida, e ""nao"" caso contrário. Imprima uma linha em branco entre cada instância.";True;9 / 10;93;26;27.96%
2055;Lisp é Melhor que Java, C e C++;Strings;9;"Acredite ou não, esse foi o resultado de um estudo conduzido por Ron Garret (Erann Gat) no início do século. A motivação de Garret foi um outro estudo, feito por Lutz Prechelt e publicado na Communications of the ACM, que comparava a performance de tempo de execução e uso de memória de programas escritos em C, C++ e Java. Porém, diferentemete dos benchmarks tradicionais, Prechelt comparou diferentes implementações de uma mesma tarefa feita por 38 desenvolvedores diferentes (em experiência e conhecimento). O estudo de Prechelt mostrou que Java é de 3 a 4 vezes mais lento que C ou C++, porém a variação maior ocorreu entre os programadores, não entre as linguagens, sugerindo que é melhor gastar mais tempo treinando os desenvolvedores do que discutindo que linguagem deve ser escolhida.

                    Anos depois Garret estendeu esse estudo adicionando Lisp como uma das implementações possíveis para o problema, e dessa vez, além de considerar todos os fatores de comparação de Prechelt, acrescentou o tempo de desenvolvimento como métrica. Os resultados de Garret foram surpreendentes: Lisp ganhou disparado em todos os quesitos, necessitando de menos tempo e linhas de código, consumindo menos memória e executando mais rápido que os programas feitos em C, C++ ou Java. Ficou provado que os programadores de Lisp são muito melhores que os outros programadores. Essa é a sua chance de mostrar que o estudo de Garret está errado. Como? Resolvendo o mesmo problema proposto, em menos tempo e com implementações mais rápidas.

                    O problema que foi a base de ambos os estudos é o seguinte: Considere o seguinte mapeamento entre letras e dígitos:

                    


                    Queremos usar esse mapeamento para codificar números de telefone em palavras de forma que seja fácil decorá-los. Sua tarefa é escrever um programa que ache, dado um número de telefone, todas as possíveis codificações do mesmo em palavras. Um número de telefone é uma string arbitrária contendo apenas hífen (-), barras (/) e dígitos. As barras e hífen não devem ser codificados. As palavras são tiradas de um dicionário informado em ordem alfabética. Você deve imprimir apenas as palavras que codifiquem completamente o número de telefone. As palavras no dicionário podem ter letras maiúsculas e mínusculas, hífen (-) e aspas (""), porém você deve usar apenas as letras para codificar um número. A palavra deve ser impressa como foi dada no dicionário. A codificação de um número de telefone pode consistir de uma ou mais palavras, separadas por espaço. A codificação é construída palavra por palavra, da esquerda para a direita. Se, em um dado ponto da codificação nenhuma palavra do dicionário pode ser inserida, então um único dígito de telefone pode ser usado para a codificação, porém dois números consecutivos não são permitidos numa codificação válida. Em outras palavras: em uma codificação parcial que cobre k dígitos, o dígito k+1 é codificado por ele mesmo se e somente se, primeiro, o dígito k não foi codificado por um dígito e, segundo, não existe palavra no dicionário que pode ser usada na codificação começando no dígito k+1.";Cada instância é composta por uma linha contendo um número inteiro 0 < n ≤ 75000, o número de palavras no dicionário. AS próximas n linhas contêm palavras com no máximo 50 caracteres. Depois do dicionário segue um inteiro 1 < t < 100000, e nas t linhas seguintes os números de telefone a serem codificados. QUando n for 0 seu programa deve parar.;Para cada instância seu programa deve imprimir uma linha contendo Instancia k, onde k é o número da k-ésima instância. Para cada número de telefone processado seu programa deve imprimir todas as codificaçõs possíveis em ordem lexicográfica (a ordem da tabela ASCII) crescente. Cada codificação deve ser impressa no seguinte formato: o número do telefone seguido de dois pontos (:), um espaço e a codificação. Uma linha em branco deve ser impressa entre dois casos de teste.;True;9 / 10;57;7;12.28%
2056;O Cubo;Grafos;9;"Num futuro não muito distante as pessoas buscarão jogos cada vez mais perigosos para se divertir. Depois de ultra-leve e bungee-jump as pessoas precisarão de jogos em que suas habilidades mentais sejam também colocadas a prova. É o caso deste jogo, chamado ""O Cubo"", inventado na Nova Zelândia. Em alguns lugares o jogo também é conhecido pelo seu nome em japonês: ""Sokoban"".

                    Considere um labirinto bi-dimensional composto por células quadradas. Cada uma delas ou está livre ou está sendo ocupada por uma pedra. A cada passo, você pode sair da célula em que está e se mover para outra célula vizinha livre (acima, abaixo, à direita ou à esquerda).

                    Uma única célula do labirinto contém uma pilha de caixas. A pilha pode ser movida de uma célula i para uma célula k (por exemplo, k = i + 1), vizinha de i, apenas se você estiver numa célula j (no caso, j = i - 1), vizinha de i, e a direção ik é igual à direção ji (ou seja, você está empurrando a caixa para a próxima célula). A caixa não pode ser movida de qualquer outra maneira (você não pode puxá-la, por exemplo). Logo, se ela for parar em algum canto do labirinto, você não será capaz de movê-la novamente. Por fim, note que em cada empurrão você dá um passo, e que o contrário não é necessariamente verdade.

                    Uma das células vazias é marcada como a célula final. Sua tarefa é trazer a caixa para essa célula final através de uma sequência de passos e de empurrões. Como a caixa é pesada, você quer realizar o menor número possível de empurrões.

                    Observe que no jogo da vida real há a possibilidade de você se prender ou mesmo ser esmagado pela caixa, tornando tudo muito mais divertido.";"O arquivo de entrada é composto por várias instâncias. Cada instância começa com uma linha contendo dois inteiros r e c (20 ≥ r,c) representando o número de linhas e colunas do labirinto.
                    
                    Em seguida, são fornecidas r linhas, cada uma contendo c caracteres. Cada caractere descreve uma célula do labirinto. Uma célula ocupada por uma pedra é indicada por # e uma célula vazia é representada por um ""."" (sem aspas). Sua posição inicial é indicada por S, a posição inicial da caixa é indicada por B e a posição final da caixa é indicada por T.

                    A entrada termina quando r = c = 0.";"Para cada labirinto, inicialmente imprima o número da instância, conforme mostra o exemplo de saída abaixo. Se for impossível levar a caixa até sua posição final, imprima ""Impossivel"" (sem aspas).

                    Caso contrário, você deve imprimir dois inteiros x e y; x indica o número de movimentos (passos + empurrões) e y o número de empurrões de uma sequência que faz com que você leve a caixa até a posição final. O número de empurrões deve ser minimizado. Caso exista mais de uma sequência possível que utiliza um número mínimo de empurrões, o número total de movimentos deve ser minimizado. Imprima uma linha em branco após cada instância.";False;9 / 10;95;26;27.37%
2057;Fuso Horário;Iniciante;1;"Paulo e Pedro fizeram uma longa jornada desde que partiram do Brasil para competir na Final Mundial da Maratona, em Phuket, Tailândia. Notaram que a cada escala que faziam, tinham que ajustar seus relógios por causa do fuso horário.

Assim, para melhor se organizarem para as próximas viagens, eles pediram que você faça um aplicativo para celular que, dada a hora de saída, tempo de viagem e o fuso do destino com relação à origem, você informe a hora de chegada de cada vôo no destino.

Por exemplo, se eles partiram às 10 horas da manhã para uma viagem de 4 horas rumo a um destino que fica à leste, em um fuso horário com uma hora a mais com relação ao fuso horário do ponto de partida, a hora de chegada terá que ser: 10 horas + 4 horas de viagem + 1 hora de deslocamento pelo fuso, ou seja, chegarão às 15 horas. Note que se a hora calculada for igual a 24, seu programa deverá imprimir 0 (zero).";A entrada contém 3 inteiros: S (0 ≤ S ≤ 23), T (1 ≤ T ≤ 12) e F (-5 ≤ F ≤ 5), separados por um espaço, indicando respectivamente a hora da saída, o tempo de viagem e o fuso horário do destino com relação à origem.;Imprima um inteiro que indica a hora local prevista no destino, conforme os exemplos abaixo.;False;1 / 10;12082;7253;60.03%
2058;Triângulos e Polígonos Regulares;Ad-Hoc;1;"O professor Rafael adora computação gráfica. Ele gosta muito de renderizar objetos, especialmente bonecas. Mas ele não gosta de desenhar polígonos regulares usando triângulos. Fazer isso consiste em compor um polígono regular usando apenas triângulos, de forma que os triângulos não se interceptem e se utilize o menor número possível de triângulos na composição. Veja um quadrado e um pentágono com os triângulos na figura.



O professor Rafael pediu para você calcular qual o número mínimo de triângulos necessários para compor um polígono regular de N lados.";A entrada é composta por um número N (3 ≤ N ≤ 109), que indica o número de lados de um polígono regular.;A saída é o número mínimo de triângulos necessários para compor um polígono regular de N lados.;True;1 / 10;2409;1962;81.44%
2059;Ímpar, Par ou Roubo;Iniciante;2;"Um novo jogo chamado Ímpar, Par ou Roubo (IPR) está se tornando muito popular. Esse jogo surgiu quando alguns amigos estavam sem conexão com a internet, sem celular, sem computador e bastante desocupados. O jogo está tão popular que irá acontecer um campeonato mundial de IPR e cada país do mundo irá escolher um representante para competir.
					
O jogo funciona da seguinte forma: dois jogadores participam, o jogador 1 escolhe entre par ou ímpar, então cada jogador escolhe um inteiro positivo, se a soma desses números for par e o jogador 1 tiver escolhido par então o jogador 1 ganha, se a soma for ímpar o jogador 2 ganha. Caso o jogador 1 tivesse escolhido ímpar ele ganharia se a soma fosse ímpar, caso a soma fosse par o jogador 2 ganharia. Nada de diferente de um jogo de par ou ímpar convencional, correto?

A diferença do jogo é que o jogador 1 pode roubar e assim assegurar sua vitória independentemente do resultado do jogo de ímpar ou par convencional, já o jogador 2 pode ou não acusar o jogador 1 de roubo. Com essas adições no jogo se o jogador 1 roubar e o jogador 2 acusar o roubo então o jogador 2 ganha, caso o jogador 2 não acuse o roubo e o jogador 1 roubar então o jogador 1 ganha, caso o jogador 2 acuse o roubo, mas o jogador 1 não tiver roubado então o jogador 1 ganha, se o jogador 1 não roubar e o jogador 2 não acusar o roubo o jogo segue como descrito anteriormente.

Você foi contratado pela OIIPR (Organização Internacional de Ímpar, Par ou Roubo) para desenvolver um programa que dada a escolha do jogador 1 entre par ou ímpar, os números escolhidos como jogada e as ações dos jogadores (roubo/acusação) mostre quem foi o vencedor.";"A entrada consite de uma única linha contendo 5 inteiros: p, j1, j2, r, a. ( 0 ≤  p, r, a ≤  1 e 1 ≤  j1, j2 ≤  100).

p representa a escolha do jogador 1 (se p = 1 então o jogador 1 escolheu par, se p = 0 então o jogador 1 escolheu ímpar). Os valores j1, j2, representam respectivamente o número escolhido pelo jogador 1 e pelo jogador 2. r representa se o jogador 1 roubou (se r = 1 então o jogador 1 roubou, se r = 0 então o jogador 1 não roubou), a representa se o jogador 2 acusou o roubo (se a = 1 então o jogador 2 acusou o jogador 1 de roubo, se a = 0 então ele não acusou o jogador 1 de roubo).";"Imprima ""Jogador 1 ganha!"" se o jogador 1 ganhou ou ""Jogador 2 ganha!"" se o jogador 2 ganhou (sem as aspas).";False;2 / 10;12698;5751;45.29%
2060;Desafio de Bino;Iniciante;1;"Bino e Cino são colegas inseparáveis. Bino gosta de criar desafios matemáticos para Cino resolver. Desta vez, Bino gerou uma lista de números e perguntou ao Cino quantos números da lista são múltiplos de 2, 3, 4 e 5.

Esse desafio pode parecer simples, porém, quando a lista contém muitos números, Cino se confunde e acaba errando alguns cálculos. Para ajudar Cino, faça um programa para resolver o desafio de Bino.";"A primeira linha da entrada consiste em um inteiro N (1 ≤ N ≤1000), representando a quantidade de números na lista de Bino.

A segunda linha contém N inteiros Li (1 ≤ Li ≤ 100), representando os números da lista de Bino.";Imprima a quantidade de números múltiplos de 2, 3, 4 e 5 presentes na lista. Observe a formatação da saída nos exemplos, pois ela deve ser seguida rigorosamente.;False;1 / 10;11983;7913;66.04%
2061;As Abas de Péricles;Iniciante;1;"Péricles é um rapaz que tem um interesse único por história. Utilizando seu atualizadíssimo navegador de internet rapoza cromada, conheceu até os sitios mais remotos e obscuros atrás de informações sobre a mitologia grega.

Por ironia do destino, o navegador de Péricles acabou sendo infectado por um malware com uma caracterísica peculiar: cada vez que Péricles fechava uma aba no seu navegador, outras duas abas apareciam! No entanto, quando Péricles clicou sem querer em uma das propagandas de uma aba, percebeu que, por um erro do navegador, a aba foi encerrada (sem abrir outras abas). Por causa do malware, todas as abas possuem irritantes propagandas.

Sua tarefa é descobrir com quantas abas que o navegador de Péricles ficou, sabendo o número inicial de abas e a sequência de ações de Péricles. As ações podem ser fechou (quando Péricles fechou uma aba) ou clicou (quando Péricles clicou em uma propaganda).";A entrada é iniciada por uma linha contendo dois números inteiros positivos, N e M (0 < N, M < 500), representando o número inicial de abas e o número de ações de Péricles. Cada linha subsequente contém uma ação (fechou ou clicou). Naturalmente, o número de abas é sempre maior ou igual a zero.;A saída deve ser uma linha contendo o número final de abas.;False;1 / 10;5646;4227;74.87%
2062;OBI URI;Strings;3;"Mariazinha criou um exercício para as suas irmãs Paula e Marta: ela distribui um texto e pede que ambas corrijam este texto, sabendo que apenas as palavras OBI e URI podem estar escritas de forma errada, e o erro pode estar apenas na última letra.

Sua tarefa aqui é automatizar este processo, ou seja, criar um programa que faça a correção dos textos distribuídos pela Mariazinha para que ela possa conferir as correções de suas irmãs sem muito trabalho.

Note que se ""OB"" ou ""UR"" forem o início ou parte de uma palavra maior, como por exemplo ""OBOS"" ou ""URAT""), estas palavras não devem ser alteradas.";A entrada contém duas linhas. A primeira linha contém um valor inteiro  N (1 < N < 10000) que indica a  quantidade de palavras do texto. A segunda linha contém as palavras do texto, cada uma com o máximo de 20 caracteres ('A'-'Z'), e com no mínimo, uma letra ('A'-'Z').;Seu programa deverá apresentar o texto que foi distribuído por Mariazinha corrigido, segundo os critérios acima estabelecidos.;False;3 / 10;7147;2868;40.13%
2063;Caçando Digletts;Matemática;6;"Diglett é um Pokémom do tipo terra que fica no subsolo cavando túneis e quase nunca é visto. Ele aparece na superfície através de um buraco no solo de tempo em tempo, onde é possível visualizar apenas a sua cabeça.
					 
					Os túneis construídos por eles são unidirecionais e sempre conectam um buraco de origem a um buraco de destino, por exemplo: se existe um túnel conectando o buraco A ao buraco B, então é possível ir de A para B e não o contrário. Cada Diglett possuí o seu próprio buraco, o que indica que se existir N buracos vão existir N Digletts. Cada buraco possuí exatamente dois túneis: o primeiro túnel, que sai a partir dele para outro buraco e o segundo túnel, que chega até ele a partir de outro buraco.  
					Os Digletts ficam andando de buraco em buraco a cada instante de tempo, por exemplo: considere um buraco A que tenha um túnel que o conecta a um buraco B, se um Diglett está no buraco A no tempo T, então no próximo instante de tempo T+1 ele vai estar no buraco B. Quando um Diglett chega no seu buraco, ele aparece imediatamente na superfície. Quando não está no seu buraco, ele simplesmente permanece no subsolo e espera o próximo instante de tempo para andar no túnel e ir a outro buraco. É garantido que cada Diglett sempre voltará ao seu buraco em alguns instantes de tempo.
					Xisto é um Mestre Pokémom e está em busca de capturar a maior quantidade de Digletts com apenas uma pokebola, esta por sua vez é capaz de capturar todos os Digletts visíveis em uma determinada área. Ele precisa da sua ajuda para saber qual é o menor tempo em que todos os Digletts vão aparecer na superfície ao mesmo tempo, para assim poder lançar a pokebola e pegar todos eles.
					Obs: No instante zero todos os Digletts estão no seu respectivo buraco e não aparecem na superfície.";A primeira linha da entrada contém um inteiro N (2 ≤ N ≤ 100) que representa a quantidade de buracos. A linha seguinte contém N inteiros Bi (1 ≤ Bi ≤ N), onde o i-ésimo inteiro representa o i-ésimo buraco, e indica que existe um túnel unidirecional do i-ésimo buraco para o buraco Bi.;Imprima o menor tempo em que todos os Digletts vão aparecer juntos na superfície.;True;6 / 10;879;349;39.70%
2064;Prant e a Indecisão;Estruturas e Bibliotecas;9;"Prant é garoto muito indeciso, qualquer tipo de escolha é uma tarefa muito difícil e estressante para o menino. Porém recentemente Prant ganhou um cachorro e tem que escolher um nome para seu novo mascote. Ele tem um nome em mente, mas por ser muito indeciso de tempos em tempos Prant realiza uma operação de troca de letras, em que ele escolhe duas letras, A e B, e todas as letras A viram B e todas letras B viram A, assim trocando o nome de seu cachorro. É possível que alguma letra (A ou B) não esteja na palavra e ainda que A e B sejam a mesma letra, porque Prant fica muito nervoso ao fazer as operações.

Para tomar uma decisão Prant sorteou algumas letras e as definiu como sendo suas letras favoritas (afinal Prant é muito indeciso, como ele iria escolher tais letras se não de maneira aleatória?) de modo que a melhor escolha de nome é a palavra que possui o maior número de letras favoritas. O problema é que Prant, devido ao nevorsimo, não consegue raciocinar na hora de definir as trocas de letras para formar o melhor nome possível, então ele continua fazendo trocas possivelmente ilógicas e assim alterando o nome do cão.

Por exemplo se as letras fatoritas de Prant são {a, e, i, o, u}, o nome inicial do cão é ""abccdab"" com 2 letras favoritas e Prant realiza as seguintes operações de troca:
	
		troca(c, e), assim ""abccdab"" -> ""abeedab"", e agora o nome do cão é ""abeedab"" com 4 letras favoritas
		troca(b, i), assim ""abeedab"" -> ""aieedai"", e agora o nome do cão é ""aieedai"" com 6 letras favoritas
		troca(a, f), assim ""aieedai"" -> ""fieedfi"", e agora o nome do cão é ""fieedfi"" com 4 letras favoritas
		troca(d, h), assim ""fieedfi"" -> ""fieehfi"", e agora o nome do cão é ""fieehfi"" com 4 letras favoritas
	

	O melhor nome gerado durante as operações foi o nome ""aieedai"", pois foi o nome gerado com maior número de letras favoritas.


Sua tarefa é, sabendo o nome inicial do cachorro de Prant, as letras favoritas de Prant e as operações por ele realizadas em ordem, definir qual foi o melhor nome gerado para o cãozinho. Perceba que manter o nome inicial é uma opção e que Prant sempre realiza as operações independetemente de serem lógicas ou não.";"A primeira linha da entrada é composta por 3 inteiros: k, m, n (1  ≤  k  ≤  26, 1  ≤  m, n  ≤  100 000). Nas próximas duas linhas haverá duas strings, compostas apenas de letras minúsculas, de tamanho k e m respectivamente. A primeira string é composta por letras não repetidas e representa as letras favoritas de Prant. Já a segunda string é o nome inicial do cão de Prant (o primeiro nome que Prant havia pensado).

As próximas n linhas são compostas de dois caracteres a e b que representam as letras envolvidas em cada operação de troca de letras.";"A saída deve ser composta de duas linhas.
A primeira linha deve conter um inteiro V que representa o maior número de letras favoritas presente no nome que deve ser escolhido por Prant. A segunda linha deve conter o nome que dever ser escolhido (se houver mais de uma resposta imprima o primeiro nome gerado por Prant que contém V letras favoritas).";False;9 / 10;764;140;18.32%
2065;Fila do Supermercado;Estruturas e Bibliotecas;3;"Hoje é a inauguração de um grande supermercado em sua cidade, e todos estão muito excitados com os baixos preços prometidos.

Este supermercado tem N funcionários que trabalham no caixa, identificados por números de 1 a N, onde cada funcionário leva um determinado tempo vi para processar um item de um cliente. Ou seja, se um cliente tem cj itens em sua cesta, um determinado funcionário levará vi*cj segundos para processar todos os itens deste cliente.

Quando um cliente entra na fila para ser atendido ele espera até que um funcionário esteja livre para o atendê-lo. Se mais de um funcionário estiverem livres ao mesmo tempo, o cliente será atendido pelo funcionário de menor número de identificação. Tal funcionário só estará livre novamente após processar todos os itens deste cliente.

Há M clientes na fila para serem atendidos, cada um com um determinado número de itens na sua cesta. Dadas as informações sobre os funcionários nos caixas e os clientes, o gerente pediu sua ajuda para descobrir quanto tempo levará para que todos os clientes sejam atendidos.";"A primeira linha conterá dois inteiros N e M, indicando o número de funcionários no caixa e o número de clientes, respectivamente (1 ≤ N ≤ M ≤ 104).

Em seguida haverá N inteiros vi, indicando quanto tempo leva para o i-ésimo funcionário processar um item (1 ≤ vi ≤ 100, para todo 1 ≤ i ≤ N).

Em seguida haverá M inteiros cj, indicando quantos itens o j-ésimo cliente tem em sua cesta (1 ≤ cj ≤ 100, para todo 1 ≤ j ≤ M).";Imprima uma linha contendo um inteiro, indicando quanto tempo levará para que todos os clientes sejam atendidos.;False;3 / 10;2092;786;37.57%
2066;amelborP mU;Matemática;3;O número reverso de um número natural N é o número que obtemos quando lemos os dígitos de N da direita para a esquerda. Por exemplo, o número reverso de 1234 é 4321 e o número reverso de 150 (um número com 3 dígitos) é 51 (um número com 2 dígitos). Neste problema, dizemos que um número é bem-revertível se é estritamente menor que seu número reverso. Exemplos de números bem-revertíveis são 1234, 15 e 819.;A única linha da entrada consiste de um único inteiro positivo K (K ≤ 18).;A única linha da saída deve consistir unicamente do número de números com exatos K dígitos que são bem-revertíveis.;False;3 / 10;248;167;67.34%
2067;Jogo do Quadrado;Estruturas e Bibliotecas;6;"O ""jogo do quadrado"" é um jogo muito popular hoje em dia! O jogo é muito simples: é dada um retângulo de N linhas e M colunas contendo números inteiros não negativos. A imagem a seguir mostra um retângulo com 3 linhas e 4 colunas.



Também é dado um inteiro S. Você deve escolher algum quadrado com S linhas e S colunas contido inteiramente dentro do retângulo. Sua pontuação é dada pelo produto de todos os inteiros dentro do quadrado que você escolheu. Por exemplo, se S=2 e você escolheu o quadrado mostrado em azul na imagem acima, sua pontuação será igual a 2×3×2×1 = 12.

Você percebeu que, dependendo do quadrado que você escolher, sua pontuação pode ser igual a zero. São dados um retângulo e uma lista de consultas. Para cada consulta, é dado um inteiro S e você deve determinar se é possível escolher algum quadrado SxS de tal forma que sua pontuação não será igual a zero.";"A primeira linha contém dois inteiros N e M (1 ≤ N, M ≤ 200) indicando o número de linhas e de colunas do retângulo. As próximas N linhas contém M inteiros cada, descrevendo o retângulo. Cada inteiro no retângulo não é maior que 109.

A próxima linha contém um inteiro Q (1 ≤ Q ≤ 200) indicando o número de consultas. Cada uma das próximas Q linhas descreve uma consulta. Cada linha contém um inteiro S (1 ≤ S ≤ min(N,M)) indicando o comprimento do lado do quadrado que você deve escolher.";Para cada consulta, imprima uma linha contendo yes se é possível escolher um quadrado tal que sua pontuação não será igual a zero, ou no caso contrário.;True;6 / 10;530;219;41.32%
2068;Marcando um Encontro;Matemática;5;"Um aplicativo bastante popular hoje em dia é o Taynder. A proposta do aplicativo é conhecer pessoas, se relacionar e marcar encontros. Foi no Taynder que Mel e Tob se conheceram.

Como Mel e Tob já conversaram por 40 minutos, eles acham que é hora de se conhecerem pessoalmente então marcaram de se encontrar na principal praça da cidade. O único problema é que a hora do encontro não ficou muito bem definida, tudo que eles sabem é o intervalo de tempo marcado para o encontro, mas não sabem de que horas o outro vai chegar. Para não passar o dia esperando a pessoa que chegar primeiro espera um pouco e se a outra pessoa não chegar ela vai para casa achar outra pessoa no Taynder.

 Por exemplo: se Mel e Tob marcam de se encontrar no intervalo real [16h, 17h] com espera máxima de 15 minutos significa que Mel e Tob podem chegar em qualquer momento do intervalo (incluindo 16h e 17h) e quem chegar primeiro, digamos no tempo x, ficará esperando o outro no intervalo de tempo definido por [x, x+15].


Você deve escrever um programa que, dado o intervalo de tempo do encontro e dado o tempo de espera máximo, determine a probabilidade de haver o encontro.";"Cada caso de teste consiste de uma única linha contendo: t1, t2, N.
					t1 e t2 são inteiros representando o tempo em horas tal que t2 > t1 e 1 ≤ t1, t2 ≤ 10⁶, N também é um inteiro e representa o tempo máximo que Mel ou Tob irão esperar em minutos tal que 1 ≤ N ≤ (t2-t1) * 60.";A saída deve ser a probabilidade de haver o encontro no formato a/b, tal que a/b é uma fração irredutível.;False;5 / 10;188;98;52.13%
2069;A Mesa Quadrada de Inês Venezuela;Matemática;8;"Inês Venezuela resolveu gravar os vídeos que enviou ao programa GranHermano em CDs, um vídeo por CD. Após colocar cada CD numa caixinha quadrada, ela percebeu que era possível organizar os CDs de modo a cobrirem perfeitamente uma mesa quadrada sua sem que CDs fossem colocados uns sobre os outros.

Ana e Beto são dois amigos que são grandes fãs de Inês Venezuela. Eles também enviaram muitos vídeos ao GranHermano e também gravaram seus vídeos em CDs, um vídeo por CD. Porém, diferentemente da Panterona, eles querem organizar seus vídeos em mochilas de modo que:


	em cada mochila haja apenas ou CDs de Ana ou CDs de Beto;
	o número N de CDs em todas as mochilas seja sempre o mesmo.


Eles perceberam que não há necessariamente só uma possibilidade para o valor de N, mas que, para todas as possibilidades de valores para N, seria possível também organizar todos os CDs de Inês Venezuela em mochilas de modo que em cada mochila houvesse exatamente N CDs de Inês Venezuela.

Sabendo quantos vídeos Ana e Beto enviaram ao GranHermano cada, e sabendo que o lado de cada caixinha quadrada utilizada por Inês Venezuela mede 1 centímetro, calcule quanto mede o lado da mesa quadrada de Inês Brasil.";A entrada consiste apenas de dois inteiros positivos A e B (A, B ≤ 109), os quais representam respectivamente o número de CDs de Ana e o número de CDs de Beto.;Imprima quantos centímetros tem o lado da mesa quadrada da Rainha da Internet. Se houver mais de uma resposta possível, imprima a menor.;False;8 / 10;319;99;31.03%
2070;Contando Sequências Boladas;Ad-Hoc;9;"Dado um inteiro K e 3 sequências S1, S2 e S3, chamamos de sequência Bolada, uma sequência constituída de inteiros positivos menores ou iguais a K e que não é subsequência de S1, S2 ou S3. Lembrando que uma subsequência é uma sequência que pode ser derivada de outra sequência por exclusão de alguns elementos, sem alterar a ordem dos elementos restantes.

Por exemplo, para K = 3, S1 = <1, 2, 3, 1, 2>, S2 = <2, 3, 1, 2> e S3 = <3, 1, 2, 3, 1, 2>, todas as sequências possíveis de tamanho 1 (<1>, <2> e <3>) não são sequências Boladas, pois todas são subsequências de S1, S2 e S3.

Analisando todas as sequências possíveis de tamanho 2 para K = 3, temos 9 sequências:


	<1, 1> não é subsequência de S2, logo <1, 1> é uma sequência Bolada;
	<1, 2> é subsequência das 3 sequências;
	<1, 3> não é subsequência de S2, logo <1, 3> é uma sequência Bolada;
	<2, 1> é subsequência das 3 sequências;
	<2, 2> é subsequência das 3 sequências;
	<2, 3> é subsequência das 3 sequências;
	<3, 1> é subsequência das 3 sequências;
	<3, 2> é subsequência das 3 sequências;
	<3, 3> não é subsequência de S1 e S2, logo <3, 3> é uma sequência Bolada;


Assim, o tamanho da menor sequência Bolada, para esse exemplo, é igual a 2. Também concluímos que existem 3 sequências Boladas de tamanho 2.";A primeira linha da entrada é constituída de 4 inteiros K, L1, L2 e L3, representando, respectivamente, o inteiro K e os tamanhos das sequências S1, S2 e S3 (1 ≤ K ≤ 20 e 1 ≤ L1, L2 e L3 ≤ 200). A segunda linha é constituída de L1 inteiros, representando os elementos da sequência S1. A terceira linha é constituída de L2 inteiros, representando os elementos da sequência S2. A quarta linha é constituída de L3 inteiros, representando os elementos da sequência S3. Considere que todos os elementos das sequências S1, S2 e S3 são inteiros positivos menores ou iguais a K.;Sendo M o menor tamanho de uma sequência Bolada para os dados de entrada. Imprima uma única linha contendo M e a quantidade de sequências Boladas de tamanho M.;False;9 / 10;153;62;40.52%
2071;Banco do Faraó;Estruturas e Bibliotecas;8;"Pouca gente sabe, mas foi no Antigo Egito que surgiram os primeiros bancos, de uma forma muito semelhante ao que conhecemos hoje. O principal banco era do faraó, que decidia, de tempos em tempos, tomar para o Estado o conteúdo de algumas contas. Isso ocorria da seguinte forma. Dado N, o número de correntistas do Banco do Faraó (era esse o nome do banco), cada conta podia ter uma quantia em menés (moeda do Antigo Egito) que podia ser, inclusive, negativa (indicando que a pessoa devia aquela quantia ao banco), ou seja, o estado de cada conta era um inteiro ai. O objetivo do faraó era fazer diversas consultas nas contas de seus súditos. Dado um intervalo [A;B] (correspondente as contas aA; aA+1; ... ; aB-1; aB) o faraó desejava encontrar um subintervalo de soma máxima, ou seja, cujo sequestro pelo Estado renderia ao Faraó a maior quantia de dinheiro. Isso era explicado aos correntistas como sendo uma oferenda a Amon-Ahcid, o Deus egípcio do dinheiro. Fazendo regularmente tais oferendas o deus ficava satisfeito e permitia que o sistema econômico funcionasse perfeitamente. Isso durou surpreendentemente mais de 500 anos, até que num desses sequestros os correntistas se rebelaram, tomaram o palácio e mataram o faraó. O banco foi saqueado e o sistema ruiu. Só se ouviu falar de bancos novamente centenas de anos depois.

                    Sua tarefa é dado um registro de contas e uma série de consultas, determinar para cada consulta um intervalo de soma máxima.";A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância contém um inteiro N, indicando o número de contas no Banco do Faraó, onde 1 ≤ N ≤ 100 000. A segunda linha de cada instância contém N inteiros, entre -10 000 até 10 000, indicando os saldos nas contas dos correntistas. A terceira linha contém um inteiro Q, onde 1 ≤ Q ≤ 100 000, indicando o número de consultas que serão feitas. Cada uma das Q linhas seguintes contém dois inteiros A e B, onde 1 ≤ A, B ≤ N, indicando o intervalo que deve ser consultado.;Para cada instância seu programa deve produzir Q linhas na saída, sendo uma para cada consulta. Cada uma dessas linhas deve conter dois inteiros: o primeiro representa a soma do intervalo com maior soma, e o segundo, o número de elementos desse intervalo. Caso haja mais de um intervalo com maior soma, imprima o número de elementos naquele com maior número de elementos.;False;8 / 10;264;77;29.17%
2072;Canhões de Anúbis;Paradigmas;9;"Anúbis está preocupado, soldados franceses estão praticando tiro ao alvo com balas de canhão na esﬁnge novamente! Dessa vez ele vai tentar impedir que outras partes da esﬁnge tenham o mesmo destino do seu nariz favorito.

                    Para parar os canhões, ele pode invocar raios, que destroem tudo em que tocam, inclusive as balas de canhões. Mas os deuses egípcios já não tem tantos seguidores, o que limita os seus poderes.

                    Anúbis só pode invocar os raios em determinados instantes de tempo. Por sorte um desses condiz com um momento em que as balas estão no ar. Anúbis quer aproveitar essa chance para derrubar o maior número possível de balas.

                    Acontece que para fazer a invocação, Anúbis precisa temporariamente passar para o nosso plano de existência. Assim ele só pode acertar alvos que estejam todos num mesmo plano.

                    Ajude Anúbis a derrubar o maior número possível de balas de canhão.";"A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias.

                    A primeira linha de cada instância contém um inteiro N, onde 1 ≤ N ≤ 50, indicando o número de balas de canhão. Cada uma das próximas N linhas contém três inteiros cada, xi, yi e zi, onde −1000 ≤ xi, yi, zi ≤ 1000, indicando as coordenadas da i-ésima bala de canhão no momento em que Anúbis pode invocar seus raios.

                    Os franceses tem uma mira muito boa, assim eles as vezes atiram balas que vão grudar uma na outra para aumentar o dano. Logo, não se assuste se houverem pontos repetidos na entrada. Eles representam balas diferentes que estão juntas. Nesses casos cada bala é contada separadamente caso Anúbis decida acertá-las.";Para cada instância imprima uma linha contendo um único inteiro, o maior número de balas de canhão que Anúbis pode derrubar.;False;9 / 10;197;74;37.56%
2073;Mercado do Cairo;Grafos;6;"A sua equipe já está fazendo planos para a visita ao Egito. Um dos locais que querem conhecer é o famoso mercado do Cairo. Para economizar tempo, vocês decidiram que vão entrar pela porta no canto sudoeste do mercado e sair pela porta no canto nordeste. Além disso, vocês vão caminhar sempre em direção à saída, ou seja, só vão se deslocar para o norte ou para o leste.

                    Os vendedores egípcios tem uma regra peculiar. Se você comprar algo de um deles, só poderá comprar novamente de um outro vendedor que seja mais velho. A punição por desrespeitar essa regra é perder uma mão. É claro que isso pode prejudicar sua equipe na final do ICPC. Por este motivo, você acha melhor seguir as tradições locais. Como não é nada elegante dar o mesmo tipo de lembrança para todos seus amigos, você decidiu que, além de seguir as regras do mercado, vai comprar no máximo uma lembrança de cada vendedor. Isto lhe ajudará a ter uma boa variedade de presentes.

                    O mercado é bem organizado. Os vãos onde as barracas podem ser colocadas possuem a mesma altura e largura. Cada vão é identificado por uma coordenada (x,y) que indica a coluna e linha do mercado que ele se encontra. De uma vista aérea é possível perceber que todos os vãos estão organizados como um quadriculado. As barracas do mercado foram montadas apenas em vãos válidos (e respeitam rigorosamente as medidas do vão). Estando em uma barraca é possível ir para as barracas que ficam estritamente ao norte, ao leste e a nordeste.

                    Sabendo a idade dos vendedores e a posição da barraca onde cada um trabalha, determine o número máximo de itens que você pode comprar.";"A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias.

                    A primeira linha de cada instância contém um inteiro N (1 ≤ N ≤ 100000), indicando o número de vendedores no mercado. Cada uma das próximas N linhas contém dois inteiros cada, xi e yi (1 ≤ xi, yi ≤ 1 000), indicando as coordenadas da barraca em que o i-ésimo vendedor trabalha.

                    Os vendedores estão listados em ordem de idade, do mais novo para o mais velho. Dois ou mais vendedores podem dividir uma mesma barraca. Nesse caso você pode negociar (ou deixar de negociar) com eles em qualquer ordem.

                    Ir para o norte significa aumentar o valor de y e ir para o leste significa aumentar o valor de x. Todas as barracas se encontram dentro do mercado.";Para cada instância imprima uma linha contendo um único inteiro, o número máximo de itens que você pode comprar.;False;6 / 10;151;91;60.26%
2074;Variados Pratos da Linda Nefertiti;Estruturas e Bibliotecas;7;"Nefertiti foi rainha do Egito, esposa de Akhenaton, e é tida como uma das mais belas mulheres da história do mundo. A vida familiar da rainha do Egito obrigava-a a cuidar de diversas coisas, inclusive do cardápio da corte. Akhenaton era conhecido por detestar que a comida se repetisse com frequência, e mesmo em intervalos regulares. Ele desejava que os cardápios não apenas fossem diferentes, como fosse praticamente impossível descobrir quando um prato se repetiria. Isso criou um enorme problema para os cozinheiros do rei, Nefertiti teve, então, uma ideia. Elaborou uma lista de N pratos, que seriam repetidos. Uma exigência dela era que a diferença entre o prato preparado no i-ésimo dia e i fosse, em módulo, menor que um certo K dado. Tal exigência, além de ser por motivos religiosos, em virtude de obrigações dos egípcios a Ra, se devia também ao fato de que os ingredientes do prato eram conseguidos neste intervalo, e também estavam sujeitos a perder a validade para o consumo. Sua tarefa neste programa é determinar, dado um inteiro N (número de diferentes pratos) e um inteiro K, quantos diferentes planejamentos podemos fazer (que são, na verdade, permutações π de {1, 2,...,n}) que satisfazem a restrição abaixo:

                    |π(i) - i| ≤ K, para i = 1,...,N.";A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira (e única) linha de cada instância contém dois inteiros N e K, onde 1 ≤ N ≤ 100 e 1 ≤ K ≤ 6.;Para cada instância imprima uma linha contendo o número de planejamentos diferentes.;False;7 / 10;38;17;44.74%
2075;Zé Coquinho;Estruturas e Bibliotecas;7;"Zé Coquinho é um artesão que produz esculturas feitas com cocos. Os cocos secos são cortados ao meio e as cuias formadas pelas cascas são pintadas e utilizadas para construir as esculturas. As esculturas são muito famosas, sendo procuradas por colecionadores de todo o mundo.

                    

                    Figura 1: A mais famosa escultura de coco feita por Zé Coquinho.

                    As esculturas de Zé Coquinho são sequências de cuias coladas umas nas outras. Uma escultura bem-formada é definida pelo seguinte conjunto de regras:

                    
                        Uma sequência vazia de cuias é uma escultura bem-formada.
                        Se T é um escultura bem-formada, então uma escultura formada por (T) (ou seja, uma cuia aberta para a direita, seguida de T , seguida de uma cuia aberta para a esquerda) é uma escultura bem-formada;
                        Se T e S são esculturas bem-formadas, então ST (ou seja, a escultura S seguida de T) é uma escultura bem-formada.
                    

                    Note que todas as esculturas bem-formadas são construídas usando apenas as regras descritas acima. Seja T uma escultura formada por cuias de coco. Se T não é uma escultura bem-formada, dizemos que T é uma escultura mal-formada.

                    Uma característica marcante das esculturas de Zé Coquinho é que elas nunca são bem-formadas; todas as esculturas que ele fez na sua longa vida são mal-formadas.

                    O Museu de Arte Moderna de Graviúna quer fazer uma exposição de esculturas de Zé Coquinho. Para organizar a exposição, o museu resolveu ordenar as esculturas em ordem lexicográfica. Na ordem lexicográfica definida pelo museu o símbolo ( vem antes do símbolo ). Por exemplo, ((( < (() e )( < )).

                    O comprimento de uma escultura mal-formada é o número de cuias que a mesma possui.

                    Dados dois inteiros N e K, você deve determinar a K-ésima escultura mal-formada de comprimento N considerando a ordem definida pelo museu. Considere que Zé Coquinho fez todas as esculturas mal-formadas de comprimento N.";"A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias.

                    A primeira (e única) linha de cada instância contém dois inteiros N e K, onde 1 ≤ N ≤ 50 e 1 ≤ K ≤ 2n − 1, indicando respectivamente o comprimento da escultura e o índice da escultura (na ordem lexicográfica) que você deve determinar.";Para cada instância imprima uma linha contendo a K-ésima escultura mal-formada de comprimento N . Caso não exista uma tal escultura imprima uma linha contendo −1.;True;7 / 10;71;21;29.58%
2076;Alocação Ótima de Commodities;Matemática;8;"Tjalling C. Koopmans ganhou em 1975 o prêmio Nobel de Economia juntamente com o matemático russo Kantorovich pelas suas contribuições em importantes áreas como a alocação ótima de recursos. Koopmans formou-se em Matemática pela Universidade de Utrecht, na Holanda, e se especializou em economia matemática. Durante a segunda guerra mundial esteve envolvido no estudo de alocação ótima de recursos, que 30 anos mais tarde lhe rendeu o prêmio Nobel. É considerado um dos precursores da teoria de programação linear. Suas contribuições têm importantes aplicações em Economia, Matemática, Física e mesmo em Química.

                    Um dos problemas prediletos de Koopmans era o de alocação ótima de commodities. Neste problema, é dado um valor inicial e um valor ﬁnal da aplicação a ser feita. Entretanto, nem todos os valores podem ser aplicados nos vários investimentos. Cada investimento é deﬁnido através de um número inteiro, e, por convenção, apenas quando o valor a ser aplicado for um múltiplo de pelo menos um número que deﬁne um investimento ele pode ser aplicado.

                    Sua tarefa neste problema é calcular o valor máximo que pode ser aplicado. Ou seja, dado o valor inicial e valor ﬁnal a serem aplicados e uma lista de inteiros que deﬁnem as várias aplicações,você deverá calcular a soma dos valores que podem ser aplicados no intervalo.";"A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias.

                    A primeira linha de cada instância possui três inteiros I, F e N (1 < I < F < 1000000000 e 1 < N < 20) que representam o valor inicial, o valor ﬁnal e o número de elementos da lista de aplicações. A próxima linha contém N inteiros 1 < ai < 1000000000 indicando a lista de aplicações.";Para cada instância imprima uma linha contendo a soma dos valores que podem ser aplicados no intervalo. Como este valor pode ser muito grande então imprima o resultado módulo 1300031.;False;8 / 10;122;34;27.87%
2077;Los buses de Cartagena;Estruturas e Bibliotecas;7;"Gabriel Garcia Marques é um escritor colombiano autor de histórias fantásticas como ""Cién años de soledade"", ""El amor en los tiempos del cólera"" e ""Memoria de mis putas tristes"". Suas histórias se caracterizam pelo uso do que ficou conhecido como ""realismo mágico"", em que situações reais são explicadas com elementos mágicos. Apesar de seus trabalhos serem considerados muito ricos e até cenográficos, filmes baseados em suas obras não têm merecido sucesso de público ou de crítica. O mais recente exemplo foi a filmagem em 2007 de ""Love in the Time of Cholera"".

                    Uma de suas obras menos conhecidas é ""Los buses de Cartagena"", que descreve a história de uma pequena companhia de ônibus da cidade colombiana que, principalmente devido aos problemas de quebra dos ônibus por excesso de carga, pretendia reduzir o número de passageiros transportados em cada viagem de Cartagena a Medellin para um mesmo número fixo. Ao mesmo tempo, a companhia queria continuar atendendo a todos os pedidos de forma satisfatória.

                    Cada ônibus possui um horário de partida, e cada passageiro dispõe de uma lista de horários nos quais gostaria de viajar. Os passageiros desejam apenas ir para Medellin, ou seja, nenhum passageiro pretende viajar duas vezes no mesmo dia.

                    Sua tarefa é determinar o número mínimo de passageiros que devem ser transportados em cada viagem respeitando a restrição de que todos os passageiros devem ser atendidos.";"A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias.

                    A primeira linha de cada instância contém dois inteiros N e M (1 ≤ N,M ≤ 100). Cada uma das M linhas seguintes possui o horário de partida de um dos ônibus. O horário está no formato hh:mm (00 ≤ hh ≤ 23, 00 ≤ mm ≤ 59 e hh e mm possuem dois dígitos). Cada uma das N linhas seguintes contém a lista de horários em que cada passageiro pode viajar. A lista dos horários está no seguinte formato: um inteiro K (1 ≤ K ≤ M) seguido de K horários, também no formato hh:mm, separados por um espaço em branco.";Para cada instância imprima uma linha contendo o número mínimo de passageiros que devem ser transportados.;False;7 / 10;55;19;34.55%
2078;Paz Verde! Hipocrisia Mundial!;Ad-Hoc;5;"Albert Arnold Gore Jr é o nome completo do ex-vice-presidente dos Estados Unidos, Al Gore, ganhador do prêmio Nobel da Paz de 2007 pelo seu trabalho incessante de conscientizar a população mundial para as mudanças climáticas causadas pelo homem. O documentário “An Inconvenient Truth” vencedor do Oscar, mostra os efeitos causados pelo aquecimento global na paisagem do planeta e prevê um futuro catastrófico para a humanidade se a tendência de usurpar os recursos do planeta não for mudada.

                    Al Gore cresceu em Washington DC uma vez que seu pai foi deputado e depois senador pelo Tenessee. Graduou-se em Harvard em 1969 e foi um ativista contra a guerra do Vietnam e chegou a apoiar o líder Martin Luther King na sua luta contra a segregação racial. Sua atuação como vice-presidente dos Estados Unidos na administração de Bill Clinton também foi excepcional. Apesar de ter tido mais votos que o concorrente do partido republicano, perdeu as eleições presidenciais e afastou-se da disputa da presidência.

                    Um dos seus trabalhos mais importantes diz respeito ao posicionamento ótimo de fornos em produção de tijolos. O processo de fabricação de tijolos é bastante poluente, e exige a queima em alta temperatura do barro a fim de que o tijolo atinja a consistência desejada. A queima consome grandes quantidades de madeira, produzida em fazendas para este fim. Estudos da Universidade de Harvard mostram que há uma distância máxima para o posicionamento nesses fornos: se estiverem muito distantes, a dispersão do calor não permite que a queima seja feita por igual, trazendo prejuízos à produção de tijolos e também ao meio ambiente. Uma vez que os fornos são posicionados no meio da floresta (que é cortada para a queima), as distâncias são medidas usando a métrica de Manhattan, ou seja, a distância entre dois pontos é dada pela soma dos valores absolutos das diferenças das coordenadas. Sua tarefa é, dada a localização de vários fornos numa fazenda, e uma distância D, determinar, para cada um dos fornos, quantos fornos estão à distância no máximo D. Com estes dados será possível determinar quais fornos precisam ser acesos simultaneamente sem prejuízos econômico ou ambiental.";"A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias.

                    A primeira linha de cada instância possui dois inteiros N e D (1 ≤ N, D ≤ 100000) representando o número de fornos e uma distância, respectivamente. Cada uma das próximas N linhas possui dois inteiros x e y (0 ≤ x, y ≤ 100000) que indicam a posição de um forno.";Para cada instância imprima uma linha contendo N inteiros que indicam quantos fornos estão à distância no máximo D dos fornos 1, 2, ..., N.;False;5 / 10;43;16;37.21%
2079;Produto de Guerra;Grafos;7;"O Comitê Internacional da Cruz Vermelha, organização sem fins lucrativos cujo objetivo é defender e amparar as vítimas de guerras (ou melhor, vítimas do capital) ou catástrofes naturais, ganhou os prêmios Nobel de 1917, 1945 e 1963 pelo seu importantíssimo trabalho. Como é de se imaginar, a Cruz Vermelha sempre teve problemas de locomoção no meio da guerra. Muitas ligações (estradas, ferrovias, etc.) entre cidades de países em guerra podem ser destruídas por bombardeios ou dominadas por tiranos.

                    O departamento de inteligência da Cruz Vermelha está empenhado em criar um programa de computador que auxilie as operações da Cruz Vermelha no futuro. A ideia é, dado um mapa da região que será ajudada, determinar em quais cidades devem ser feitas as bases da Cruz Vermelha. Inicialmente, o Departamento está interessado em testar a primeira versão do programa em cidades com as seguintes características: (a) sempre existe um caminho entre duas cidades que passa por uma ou mais ligações; (b) não existem dois caminhos diferentes entre duas cidades quaisquer. Apesar dos recursos da Cruz Vermelha geralmente serem limitados, eles querem escolher o maior número possível de bases, e garantir que ou existe uma base na cidade ou existe uma base em uma cidade vizinha, com a restrição adicional de que não é permitido criar bases em duas cidades vizinhas. Esta última restrição é dada pelo fato de que se estivesse em período de guerra, a Cruz Vermelha, como sabemos deve ter livre acesso nas cidades, e com isso pode surgir a suspeita de espionagem, o que pode comprometer o objetivo principal da organização.

                    Sua tarefa é escrever a primeira versão do programa que o Departamento quer testar.";"A primeira linha de um caso de teste possui um inteiro T que indica o número de instâncias seguintes.

                    A primeira linha de cada instância possui um inteiro N (1 ≤ N ≤ 6000) indicando o número de cidades do mapa. As cidades são identificadas por 1, 2, ..., N. As próximas N-1 linhas possuem dois inteiros u e v (1 ≤ u, v ≤ N, u ≠ v) que indicam uma ligação entre as cidades u e v (considere que tais ligações permitem acesso de u até v e de v até u).";Para cada instância imprima uma inteiro indicando o número máximo de bases que a Cruz Vermelha consegue construir levando-se em consideração as restrições descritas anteriormente.;False;7 / 10;75;36;48.00%
2080;Seqüências de Röntgen;Paradigmas;10;"Wilhelm Conrad Röntgen foi um físico alemão que viveu no final do século XIX e início do século XX. Suas experiências em radiação eletromagnéticas renderam a ele o primeiro prêmio Nobel em Física, outorgado em 1901. Sua principal descoberta foi a existência do “raio X” e seu uso em aplicações médicas. Em 22 de dezembro de 1895, Röntgen fez um raio X da mão de sua esposa (com um anel em um dos dedos). A descoberta do raio X causou grande alvoroço na época e já em 1896 jornais europeus noticiavam a invenção e as grandes possibilidades de enxergar por dentro dos corpos sem a necessidade de cortá-los. A morte de Röntgen, causada por um certo tipo de câncer, é atribuída às radiações constantes a que esteve exposto durante suas pesquisas científicas.

                    Röntgen começou a desconfiar da existência de radiações invisíveis quando, nas suas pesquisas, era capaz de medir alterações consideráveis na fluorescência dos objetos quando colocados num tubo de Lenard que era submetido a uma corrente elétrica. Os estudos de Röntgen foram tão precisos que ele pôde inclusive gerar a seqüência que era observada no tubo de Lenard em cada instante de tempo. A fluorescência observada dependia da intensidade da corrente (X) e do tempo em que o tubo era submetido à corrente (Y). Röntgen percebeu que dada a primeira seqüência, a próxima podia ser obtida descrevendo os números da seqüência anterior. Por exemplo: se a primeira seqüência for 2 então a próxima é 12 (ou seja, a seqüência anterior é formada por “um 2”), a seguinte 1112 (ou seja, a seqüência anterior é formada por um 1 e um 2), 3112 (ou seja, a seqüência anterior é formada por três 1 e um 2), e assim por diante.

                    Além de um cientista brilhante, Röntgen era extremamente organizado. Ele guardava todos os registros de seus experimentos. Infelizmente, com o tempo algumas seqüências foram danificadas e outras perdidas. Sua tarefa é dada uma seqüência, determinar as próximas K seqüências do experimento.";"A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias.

                    Cada instância é composta por uma linha contendo a primeira seqüência do experimento, formada por não mais de 1000 caracteres de 0 a 9, e o número K de seqüências que desejamos gerar (1 ≤ K ≤ 50), respectivamente.";"Para cada instância, imprima a seqüência dada na entrada seguida de K linhas contendo as seqüências na ordem que foram geradas. As seqüências geradas não terão mais do que 2000000 caracteres.

                    Após cada instância imprima uma linha em branco.";False;10 / 10;229;60;26.20%
2081;Sonhos, Acredite Neles!;Grafos;10;"Um dos mais importantes ativistas políticos do mundo foi o Dr. Martin Luther King Jr, cujo discurso mais conhecido foi “I have a dream”. Em 1964, ele recebeu o Nobel da Paz por seu empenho na luta pelo fim do preconceito racial nos Estados Unidos, e pela sua liderança nos movimentos não violentos. Pouco tempo depois de ter recebido o prêmio, Luther King foi assassinado momentos antes de uma marcha no Memphis.

                    Além do empenho na luta política, Luther King gostava de jogar quebra-cabeça. Um dos jogos que ele adorava jogar é o seguinte: são dados dois mapas N-por-M, cada um com um robô. Cada mapa contém um ponto inicial e um final. Algumas “casas” do mapa são cercadas por paredes. Uma casa do mapa pode ser ou não um buraco. Um comando dado (Cima, Baixo, Esquerda, Direita) é executado ao mesmo tempo para ambos os mapas. Os robôs não atravessam as paredes e nem flutuam sobre os buracos. O objetivo é chegar com os dois robôs no ponto final ao mesmo tempo, em até 50 movimentos, se isso for possível.

                    Neste problema, sua tarefa é dados dois mapas N-por-M, determinar o número mínimo de movimentos que resolve o problema.";"A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias.

                    A primeira linha da instância possui dois inteiros N e M (1 ≤ N, M ≤ 50), indicando o número de linhas dos mapas e o número de colunas dos mapas, respectivamente. Nas linhas seguintes são dados os dois mapas. Para cada mapa teremos N linhas com M caracteres. O caractere “.” indica uma posição livre; “#” indica uma posição cercada por paredes; “B” indica um buraco; “R” indica a posição inicial do robô e “F” indica a posição final do robô.";"Para cada instância imprima uma linha contendo o número mínimo de movimentos que resolve o problema, ou ""impossivel"" se não for possível resolver o problema com no máximo 50 movimentos.";False;10 / 10;289;95;32.87%
2082;Viagens no Tempo;Grafos;9;"Albert Einstein nasceu na Alemanha, mas foi na Suíça, trabalhando como funcionário público, que escreveu em 1905 os trabalhos que revolucionaram a Física moderna e o tornaram famoso. Em 1921 ganhou o prêmio Nobel de Física pela descoberta da lei do efeito fotoelétrico. Muitos acham seus trabalhos sobre a Teoria da Relatividade os mais importantes de sua carreira, entretanto não foram os que renderam o valioso prêmio.

                    Einstein gostava muito de fazer “experimentos mentais” para avaliar suas teorias. Um desses experimentos é muito famoso e descreve um elevador caindo com um relógio dentro. A ideia de viagens no tempo acabaram surgindo como possíveis, desde que se descobrisse como construir máquinas que pudessem viajar em velocidades maiores do que a velocidade da luz. Certamente, num futuro não muito distante, isso será possível e poderemos viajar livremente entre as eras e ver eventos como o descobrimento do Brasil em 1500, a chegada da Família Real em 1808 ou o Corinthians campeão da Libertadores em 2962 ao vivo.

                    Com as constantes viagens no tempo, será importante regular o serviço. As máquinas do tempo estarão espalhadas por toda a História e os viajantes terão de pegá-las para viajar para o presente ou para o futuro. Devido a restrições técnicas destas máquinas, não será possível viajar para qualquer instante do tempo diretamente, mas apenas para outros momentos históricos, de onde uma nova máquina poderá ser usada para seguir viagem. No entanto, estando em um momento histórico, você consegue ir para qualquer outro momento viajando por uma ou mais máquinas.

                    Juntamente com os viajantes do tempo, também surgirão os piratas da História, que tentarão roubar tesouros, inverter acontecimentos e mudar a história com os objetivos mais maldosos. Isso acarretará na criação da Polícia do Tempo. No ano de 2850 (antes do Corinthians ganhar sua primeira Libertadores) a Polícia do Tempo resolve isolar acontecimentos históricos, desabilitando ligações entre algumas máquinas. Cada ligação tem um custo associado para ser desabilitado, e sua tarefa é encontrar, dado um conjunto de momentos históricos, um conjunto de ligações – de custo mínimo – que ao serem desconectadas isolam os acontecimentos, ou seja, estando em uma máquina não será possível viajar para algumas das outras máquinas.";"A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias.

                    A primeira linha de cada instância contém dois inteiros N e M (1 ≤ N ≤ 100 e 1 ≤ M ≤ N*(N-1)/2) indicando o número de máquinas e o número de ligações, respectivamente. Cada uma das M linhas seguinte possui três inteiros u, v e c (1 ≤ u, v ≤ N, 1 ≤ c ≤ 100) que representam a existência de uma ligação entre a máquina u e v com custo c. Tal ligação pode ser usada para viajar da máquina u para máquina v e também da máquina v para máquina u.";Para cada instância imprima uma linha contendo a soma dos custos das ligações que devem ser removidas.;False;9 / 10;249;53;21.29%
2083;Beira da Estrada;Geometria Computacional;10;"No lado da estrada, há palmeiras, há um bar, há sombra, há algo mais. Neste problema, estamos particularmente interessados ​​nas palmeiras.

                    Ana, Adam, Alan e Amanda organizou uma viagem: enquanto Ana e Adam vão lidar com coisas insignificantes como verificar o carro, preparar a bagagem e encontrar um lugar para ficar, Alan e Amanda se dedicaram para a parte mais importante: estudar as vistas das palmeiras que eles teriam acesso na estrada.

                    A estrada onde eles estão dirigindo agora é completamente em linha reta, e neste problema vai ser representada pela reta Y = 0 do plano XY. No lado da estrada com coordenadas Y> 0 há palmeiras, que serão representadas por diferentes pontos do plano XY com Y positivo. Alan e Amanda notaram que a partir de cada ponto na estrada certas palmeiras são visíveis, e, em geral, estes variam ao longo da estrada. Uma palmeira é dito ser visível a partir de um ponto na estrada, se e somente se o segmento que une esses dois pontos não passa por qualquer outra palmeira.

                    Na figura a seguir no primeiro exemplo os círculos vazios representam palmeiras , enquanto os cheios representam alguns pontos possíveis na estrada.

                    

                    Do ponto P as palmeiras que são visíveis são A, B e D, pois a palmeira C está escondida atrás da palmeira A. Do ponto Q as palmeiras visíveis são A, C e D, pois a palmeira B agora está escondida atrás da palmeira A. Do ponto R todas as palmeiras são visíveis, e do ponto S apenas as palmeiras A e D são visíveis, pois as palmeiras B e C estão escondidas atrás da palmeira D.

                    Enquanto Ana e Adam se revezam para dirigir o carro, Alan e Amanda discutem os benefícios de saber quantas palmeiras visíveis existem. Dado um conjunto de palmeiras, um número inteiro M é o número visível de palmeiras se, e somente se, existir pelo menos um ponto na estrada (isto é, um ponto de coordenada Y = 0) a partir do qual exatamente M palmeiras são visíveis.

                    No exemplo ilustrado acima, 2, 3 e 4 são quantidades visíveis de palmeiras que podem ser vistas dos pontos S, P e R na estrada, respectivamente. Por outro lado, 0 e 1 não são quantidades visíveis, porque a partir de qualquer ponto da estrada, pelo menos, 2 palmeiras são visíveis. Finalmente, nenhuma quantidade M > 4 é visível, uma vez que existem apenas 4 palmeiras no total. Portanto, neste exemplo, existem 3 quantidades visíveis de palmeiras. (Note que se M é uma quantidade visível de palmeiras, pode haver mais do que um ponto sobre a estrada que apresenta esta situação; no exemplo anterior, este é o caso dos pontos P e Q para a quantidade visível 3, bem como um número infinito de outros pontos juntamente com R para a quantidade visível 4.)

                    Ana e Adam estão ficando cansados. Eles querem que Alan e Amanda deixem de lado as palmeiras e pelo menos preparem alguns sanduíches. Por essa razão, você precisa fazer um programa para calcular quantas diferentes quantidades visíveis de palmeiras existem ao longo da estrada.";A primeira linha contém um número inteiro N que indica o número de palmeiras que existem no lado da estrada (1 ≤ N ≤ 1000). Cada uma das N linhas seguintes descreve uma palmeira diferente usando dois números inteiros X e Y, que representam as coordenadas da referida palmeira no plano XY (1 ≤ X, Y ≤ 105). Não há duas palmeiras que compartilham a mesma posição.;Imprimir uma única linha contendo um número inteiro que representa o número de quantidades visíveis de palmeiras que existem ao longo da estrada.;True;10 / 10;297;44;14.81%
2084;Eleições;Matemática;4;"Agora eleições presidenciais estão sendo realizadas em Noglônia. Para um candidato ganhar no primeiro turno, ele deve obter mais votos do que cada um dos outros candidatos. Mas isso não é suficiente: ele também deve obter pelo menos 45% de todos os votos, ou, pelo menos, 40% de todos os votos e pelo menos 10% a mais de votos do que cada um dos outros candidatos. Estes 10% são calculados em relação ao total de votos da eleição. Se nenhum candidato vence no primeiro turno, uma nova eleição é realizada como um segundo turno.

                    Benício é um jornalista político em Noglônia, e ele sempre quer ser o primeiro a ter as notícias. É por isso que ele coletou informações a partir de pesquisas, e quer saber se de acordo com estes um dos candidatos vai ganhar no primeiro turno, ou, pelo contrário, haverá um segundo turno. Benício precisa decidir isso com pressa, antes que alguém solte a noticia antes dele. Você pode ajudá-lo?";A primeira linha contém um número inteiro N, que representa o número de candidatos (2 ≤ N ≤ 10). A segunda linha contém N números inteiros Vi que representam a quantidade de votos obtidos por cada um dos candidatos (0 ≤ Vi ≤ 1000 para i = 1, ..., N). Pelo menos um candidato obteve um voto, e não existem dois candidatos com o mesmo número de votos.;"Imprima uma linha contendo um único dígito, indicando se há um vencedor no primeiro turno ou não. Se houver um vencedor no primeiro turno, o digito deve ser '1'; caso contrário (isto é, no caso de haver um segundo turno) o dígito deve ser '2'.";False;4 / 10;1731;544;31.43%
2085;Chapeuzinho Vermelho;Grafos;8;"Era uma vez uma menina muito alegre, que foi chamada de Chapeuzinho Vermelho, porque ela sempre usava um capuz vermelho. Chapeuzinho Vermelho gostava muito de passeios na floresta, em que colhia frutos em sua pequena cesta para oferecê-los a sua avó, que era conhecida por preparar as mais deliciosas tortas de toda a região. No entanto, Chapeuzinho Vermelho definitivamente não gostava dos perigos da floresta, em particular o Lobo Mal, que estava sempre com fome e esperando.

                    Um dia, Chapeuzinho Vermelho decide ir de sua casa até a de sua avó, coletando frutos no caminho e tentando fazer com que sua viagem da forma mais segura possível. A casa de Chapeuzinho Vermelho está em uma clareira no ponto mais ocidental do bosque, a casa de sua avó está em outra clareira no ponto mais oriental, e no interior da floresta entre elas há algumas outras clareiras com árvores de fruta. As madeiras são muito densas, por isso a única maneira de passar por eles será usando os caminhos entre as clareiras, que felizmente Chapeuzinho Vermelho conhece muito bem. Para não se perder, Chapeuzinho Vermelho sempre se move através de caminhos que ira levá-la para um ponto estritamente para o leste do ponto onde ela está. Para não ser pega pelo lobo, Chapeuzinho Vermelho considera essencial evitar uma emboscada, e por isso ela sempre tem em mente o número de diferentes caminhos que a levam de sua posição atual para a casa de sua avó.

                    Um caminho na floresta é uma sequência de clareiras ordenadas de oeste para leste, de tal forma que cada clareira está conectada com a próxima por uma via. Um caminho para a casa da avó de Chapeuzinho Vermelho é simplesmente um caminho cujo ultima clareira contem a casa da avó. Para cada clareira, seu nível de alternativas é o número de caminhos que vão dele para a casa da avó de Chapeuzinho Vermelho. Por sua vez, o nível de alternativas de um caminho é a soma dos níveis de alternativas de todas as clareiras que compõem esse caminho. Para não ser capturada pelo lobo, Chapeuzinho Vermelho quer encontrar o caminho com um nível máximo de alternativas, a partir de sua casa e terminar na casa de sua avó. Você pode ajudá-la?";"A primeira linha contém dois números inteiros N e S, que indicam, respectivamente, o número de clareiras e o número de caminhos na floresta (3 ≤ n ≤ 3 × 104 e 2 ≤ S ≤ 105). As clareiras são identificadas por diferentes números inteiros entre 1 e N, e são ordenadas de oeste para leste, de modo que se 1 ≤ i < j ≤ N, então a clareira i está a oeste da clareira j. A casa da Chapeuzinho Vermelho é na clareira 1, enquanto a casa de sua avó está na clareira N.

                    Cada uma das S seguintes linhas descrevem um caminho utilizando dois números inteiros I e J, que indicam que existe um caminho entre a clareira I e J (1 ≤ I < J ≤ N). Há pelo menos um caminho da casa de Chapeuzinho Vermelho para a casa de sua avó, e o nível máximo de alternativas entre o conjunto de todos esses caminhos não é maior do que 1018.";Imprima uma única linha contendo um número inteiro, que representa o nível máximo de alternativas para um caminho da casa de Chapeuzinho Vermelho para a casa de sua avó.;False;8 / 10;202;54;26.73%
2086;Ciclofaixa;Grafos;5;"Como todos já sabem, as eleições para prefeito estão chegando. Neste ano nossa cidade possui excelentes candidatos, todos com propostas incríveis de governo.

Um dos candidatos pretende implementar um sistema de transporte revolucionário, onde as ruas serão removidas e trocadas por ciclofaixas. Esta ideia parece ser a solução de todos os problemas que nossa cidade vem enfrentando. Porém, há um falha: a desidratação quando andamos por muito tempo de bicicleta.

Para solucionar esse problema, o candidato pretende fornecer água gelada para toda a população. Sua ideia é colocar pontos de distribuição em todas interseções das ciclofaixas. Porém como água é um recurso que está se esgotando, a quantidade que ele fornecerá será fixa, independente da distância percorrida pelo indivíduo.

Na intenção de validar sua ideia, o candidato contratou você para o ajudar. Sua tarefa é simples: será fornecido o mapa da cidade com todas as interseções e as distâncias entre elas. Em seguida, você deverá responder várias consultas do candidato, onde ele irá informar duas interseções, A e B, e seu programa deverá mostrar qual a maior distância que será percorrida por uma pessoa sem água entre A e B. Com essas informações o candidato conseguirá ver se a quantidade que ele pretende fornecer será suficiente. Não esqueça que o candidato pretende diminuir essa distância, então o seu programa deve informar a maior distância no melhor trajeto.

Como as ruas de nossa cidade são bem largas, todas as ciclofaixas serão de mão dupla.";A entrada possui diversos casos de teste. Cada caso de teste começa com dois inteiros N (1 ≤ N ≤ 100) e M (1 ≤ M ≤ 4950), indicando respectivamente o número de interseções no mapa da cidade e quantas ciclofaixas serão criadas. Nas próximas M linhas serão fornecidos três inteiros U , V (1 ≤ U, V ≤ N ) e W (0 ≤ W ≤ 2000), que indicam que existe uma ciclofaixa entre a interseção U e V com uma distância W . Na próxima linha terá um inteiro Q (1 ≤ Q ≤ 50), que representa a quantidade de consultas que o candidato deseja fazer. Segue Q linhas com dois inteiros A, B (1 ≤ A, B ≤ N), indicando o par de interseções para o qual deve ser feita a consulta. A entrada termina quando N = M = 0 e não deve ser processada.;"Para cada consulta seu programa deverá imprimir uma linha com a maior distância, conforme explicado acima.
 ";False;5 / 10;205;109;53.17%
2087;Conjuntos Bons e Ruins;Strings;7;"Nesse problema você deverá descobrir se um conjunto de diversas palavras é bom ou ruim. Por definição, um conjunto é bom quando nenhuma palavra desse conjunto é um prefixo de uma outra palavra. Caso contrário, este é considerado um conjunto ruim.

Por exemplo, {abc, dae, abcde} é um conjunto ruim, pois abc é um prefixo de abcde. Quando duas palavras são iguais, definimos como uma sendo prefixo da outra.";A entrada contém vários casos de teste. A primeira linha de cada caso de teste terá um inteiro N (1 ≤ N ≤ 10⁵), representando a quantidade de palavras no conjunto. Segue então N linhas, cada uma tendo uma palavra de no máximo 100 letras minúsculas. A entrada termina quando N = 0 e não deve ser processada.;Para cada caso de teste, você deverá imprimir Conjunto Bom, ou Conjunto Ruim, conforme explicado acima.;False;7 / 10;2535;546;21.54%
2088;Combate à Dengue;Grafos;5;"Depois que João descobriu que estava com dengue, ele ficou muito irritado. Como nos últimos dias ele não saiu de casa, o mosquito que o picou só podia ser de algum foco de dengue perto de sua casa. Foi então quando ele teve uma ideia.

Assim que estiver um pouco melhor, João irá acabar com todos os focos de mosquitos que existem por perto de sua casa. Para realizar essa tarefa ele conseguiu um mapa, que pode ser visto como um plano cartesiano, onde sua casa e cada foco possuem uma coordenada distinta. Como a dengue é uma doença que deixa o corpo bem debilitado, João necessita de sua ajuda nessa tarefa.

João gostaria de saber qual a distância total mínima que ele gastará para sair de sua casa, visitar todos os focos de dengue exatamente uma vez e voltar para casa. Você consegue ajudar João em sua missão?";A entrada contém vários casos de teste. A primeira linha de cada caso de teste terá um inteiro N (1 ≤ N ≤ 15),representando a quantidade de focos de mosquito no mapa. Segue uma linha contendo dois inteiros X e Y (−100 ≤ X, Y ≤ 100), representando a coordenada da casa de João. Em seguida terão N linhas, cada uma contendo dois inteiros X e Y (−100 ≤ X, Y ≤ 100), representando a coordenada de um foco de dengue. A entrada termina quando N = 0 e não deve ser processada.;Para cada caso de teste imprima a distância mínima que João percorrerá, com duas casas decimais.;False;5 / 10;464;262;56.47%
2089;Lanchonete;Paradigmas;8;"Todos os dias nos intervalos da faculdade você e seu amigo vão para a lanchonete da faculdade o mais rápido possível para poder comprar um lanche. Apesar de vocês serem bem rápidos no trajeto entre o prédio do curso e a lanchonete, sempre vocês acabam enfrentando uma fila enorme.

Seu amigo é muito metódico, então todos os dias ao chegar na fila ele retira do bolso todas as suas moedas e verifica se ele consegue pagar o lanche inteiramente com o dinheiro que ele tem, sem necessitar que a funcionária da cantina dê algum troco, afinal o troco dado sempre é em moedas e seu amigo não gosta nem um pouco de ter moedas, então caso ele não consiga pagar dessa forma, ele realiza o pagamento no cartão. Como a fila é sempre muito grande e na maioria das vezes vocês estão entre os últimos, seu amigo realiza a contagem com muita calma para que não ocorra nenhum erro.

Hoje foi um dia diferente, ao chegar na lanchonete, você e seu amigo se depararam com algo muito estranho: a fila estava pequena. Seu amigo ficou muito preocupado e nervoso de não conseguir a tempo verificar suas moedas e ter que fazer as pessoas que estão atrás de vocês esperarem. Tentando o acalmar, você explica para ele que o problema de verificar as moedas é muito simples e que você é capaz de escrever um programa no celular rapidamente que, dado todas as moedas com seus valores e o preço do lanche, informe se é possível pagar usando apenas as moedas o valor total do lanche.

Como vocês são uns dos primeiros da fila, escreva esse programa o mais rápido possível, para que seu amigo tome a decisão antes de chegar no caixa.";A entrada possui diversos casos de teste. Cada caso inicia com dois inteiros V (1 ≤ V ≤ 10^5) e N (1 ≤ N ≤ 10^3), representando respectivamente, o valor do lanche que seu amigo deseja comprar e a quantidade de moedas que seu amigo possui. Na próxima linha terá N inteiros, onde Xi (1 ≤ Xi ≤ 10^5) representa o valor da i-ésima moeda. A entrada termina com V = N = 0 e não deve ser processada.;Para cada entrada seu programa deverá imprimir uma linha, contendo sim, caso seja possível realizar o pagamento da forma que seu amigo deseja ou nao, caso contrário.;False;8 / 10;924;252;27.27%
2090;Fui ao Mercado e Comprei...;Ad-Hoc;6;"Uma brincadeira muito comum entre crianças é ""Fui ao mercado e comprei..."", nela várias crianças formam uma fila e cada uma deve falar um item que compraria no mercado, porém para aumentar a dificuldade é necessário que cada criança repita todos os produtos que já foram ditos desde o inicio da brincadeira. O jogo termina quando alguém erra a ordem dos produtos ou quando a última criança da fila acerta a sequência.

Vamos imaginar que Maria, Pedro e Amanda começaram a brincar e já decidiram quem irá dizer qual produto, Maria irá dizer Pão, Pedro gosta de Queijo e Amanda irá falar Maçã.
Supondo que a fila esteja organizada em ordem alfabética o jogo deveria seguir da seguinte forma:
    1º Amanda diz: ""Fui ao mercado e comprei Pão""
    2º Maria  diz: ""Fui ao mercado e comprei Pão e Maçã""
    3º Pedro  diz: ""Fui ao mercado e comprei Pão, Maçã e Queijo""
Portanto a ordem dos produtos foi: Pão, Pão, Maçã, Pão, Maçã e Queijo.

Seus amigos de colégio decidiram realizar essa brincadeira para passar o tempo. Depois de algum tempo de jogo a lista de produtos que cada um deveria dizer estava ficando muito grande, dessa forma, verificar se alguém errou não é uma tarefa simples. Foi quando seus amigos lembraram que você é programador e poderia resolver facilmente esse problema.

Dado a quantidade de pessoas na fila e qual produto cada um irá dizer, eles necessitam de um programa que informe qual é o K-ésimo produto que será dito. Assim ficará mais fácil de determinar se alguém errou ou não.
Você conseguirá ajudar seus amigos ?";A entrada contém vários casos de teste. A primeira linha de cada caso de teste terá dois inteiro N e K (1 ≤ N ≤ 10⁵, 1 ≤ K ≤ min(2 * 10⁹, N * (N + 1) / 2)), representando a quantidade de crianças na brincadeira e qual o produto que seus amigos desejam saber, veja o exemplo para mais detalhes. Na próxima linha terá a sequência s1, s2, s3, ..., sn, onde si representa qual o produto a i-ésima criança irá dizer, cada palavra conterá no máximo 20 letras minúsculas. A entrada termina quando N = 0 e não deve ser processada.;Para cada caso de teste você deverá imprimir qual será o K-ésimo produto que será dito.;False;6 / 10;377;152;40.32%
2091;Número Solitário;Estruturas e Bibliotecas;6;"Será dado a você um vetor com N números, onde todos estarão em pares. Porém um desses números acabou
ficando sem par, você consegue identificar qual é esse número ?

Por exemplo, A = {1, 1, 3, 3, 5, 5, 5}, o número que ficou sozinho foi o 5.";A entrada é composta por vários casos de teste. Cada caso de teste é composto por uma linha contendo um inteiro N (1 ≤ N < 10^5), seguida por N números A (0 ≤ A ≤ 10^12). A entrada termina quando N = 0 e não deve ser processada.;Para cada caso de teste imprima apenas o número que ficou sozinho. É garantido que apenas um número está sozinho.;False;6 / 10;2169;745;34.35%
2092;Assistindo o Jogo;Estruturas e Bibliotecas;9;"No reino de Noglônia há um lago conhecido como o ""Grande O"" por causa de sua forma perfeitamente redonda. No lado do lago há n casas, cada um deles a uma distância de uma unidade noglônica de seus vizinhos. As casas são numeradas de 1 a N em sentido horário, como pode ser visto na figura a seguir para N = 8.

                    

                    Desta forma, se i <j a distância em sentido horário a partir de casa i para a casa j é j-i, ao passo que a distância correspondente no sentido anti-horário é N - j + i. Note que a distância a partir de uma casa até ela mesma é N, em ambas as direções. Todos sabem que o povo de Noglônia são ávidos fãs de futebol, por isso, quando uma família se muda para uma casa do lado do lago é muito importante para eles saberem quem são os vizinhos mais próximos que torcem para a mesma equipe que eles. Isso nem sempre é fácil, uma vez que pode haver muitas casas ao redor do lago, muitos times de futebol diferentes em Noglônia e várias mudanças. Dada uma sequência de M mudanças, as pessoas que vivem na margem do lago querem saudar cada nova família que chega, dizendo-lhes a distância do seu novo lar para as casas mais próximas que torcem para a mesma equipe que eles, tanto no sentido horário e anti-horário. Observe que, se não houver outra casa na margem do lago cuja família torce para a mesma equipe como o recém-chegado, essa distância será N em ambas as direções, pois a casa mais próxima seria de fato a sua própria casa. Você quer participar do comitê de boas-vindas? Em Noglônia existem F times de futebol, identificados por diferentes números inteiros de 0 a F-1. Não quero que você perca tempo indo de porta em porta perguntando qual equipe é seguida em cada casa, vamos supor que, inicialmente, a família que vive na casa de número i é fã da equipe de número ei, sendo este número gerado, de forma pseudoaleatória, pela fórmula recursiva:

                    e1 = A e ei = (B x ei-1 + C) mod F para i = 2, 3, ..., N

                    onde A, B e C são constantes e a expressão x mod y representa o resto da divisão inteira de x por y.";"A primeira linha contém dois números inteiros N e F, indicando, respectivamente, o número de casas ao redor do lago e do número de equipes de futebol em Noglônia (3 ≤ N ≤ 105 e 1 ≤ F ≤ 106). A segunda linha contém três números inteiros A, B e C, que determinam qual equipe é as famílias vivendo inicialmente ao redor do lago torcem, como é descrito na descrição do problema (0 ≤ A, B, C < F).

                    A terceira linha contém um único número inteiro M, que representa o número de mudanças que irão acontecer (1 ≤ M ≤ 105). Cada uma das M seguintes linhas descrevem um movimento usando dois números inteiros I e E, o que significa que a família que torce para o time E está mudando para a casa de número I (1≤ I ≤ N e 0 ≤ E < F). As mudanças aparecem na ordem que elas acontecem, e devem ser levadas em consideração pelo comitê para futuras boas-vindas.";Imprimir M linhas, a i-ésimo delas indicando o resultado da i-ésima mudança descrita na entrada. Cada linha deve conter dois inteiros números dccw e dcw, representando as distâncias em unidades noglônicas da casa que está mudando para a primeira casa cuja família torce para a mesma equipe, no sentido anti-horário e no sentido horário, respectivamente.;True;9 / 10;450;38;8.44%
2093;Fuja para Escapar;Strings;9;"Um protocolo de comunicação é um conjunto de regras para a transmissão de informações de um sistema de comunicações. O trabalho de Elisa é escrever programas para implementar partes de tais protocolos. Muitas vezes é necessário, para transmitir sequências de campos, saber onde um campo termina e outro começa, onde um separador é inserido entre cada par de campos consecutivos. Usar um separador simples, como um espaço, vírgula, ou ponto e vírgula, tem a desvantagem de que, algumas vezes, os campos a serem transferidos podem conter esses mesmos caracteres. A solução padrão para esses casos é inserir um caractere ""escaping"" logo antes de cada separador dentro de um campo, para distingui-lo de um separador real. Elisa acredita que esta solução irá aumentar muito o comprimento dos dados a serem transmitidos, então ela decidiu usar um separador complexo o suficiente para nunca aparecer nos dados. Dessa forma ela espera fugir da alternativa ineficiente de pular os separadores.
                    
                    Para escolher o separador ideal, Elisa compilou um registo, que nada mais é que uma longa sequência de caracteres que representam os dados que o seu protocolo precisa controlar. Após pensar sobre o problema por um tempo, Elisa concluiu que qualquer sequencia não vazia de caracteres que não aparece dentro do registo poderia ser um separador aceitável para usar dentro de seu protocolo. Mas, uma vez que ela está interessada em minimizar o comprimento dos dados a transmitir, queria saber o tamanho mínimo que um separador aceitável pode ter.
                    
                    Ela começou imediatamente a escrever um programa para calcular tal comprimento, e agora está testando-o para um caso especial, em que o registo e os separadores aceitáveis contém apenas dígitos binários (‘0’ ou ‘1’). Você pode antecipar os resultados?";Uma única linha contendo um registo, que é uma string não-vazia de no máximo 105 dígitos binários.;Imprima uma linha contendo um inteiro representando o comprimento mínimo de um separador aceitável para um dado registo.;False;9 / 10;325;106;32.62%
2094;Flores;Geometria Computacional;10;"Na Babilônia crescem algumas plantas com flores que são valorizados entre os habitantes. Florêncio é um habitante da Babilônia que tem um jardim com N plantas destas espécies e quer coletar algumas de suas flores. Como Florêncio é muito preguiçoso, não quer trabalhar duro para recolher as flores. Portando, ele decidiu andar ate algum ponto do seu jardim, e então, com um movimento circular de sua foice, ele deve cortar uma boa quantidade de plantas para depois coletar suas flores. Florêncio é muito habilidoso usando a foice, então ele irá alcançar com ela um círculo perfeito centrado onde ele está, o que irá permitir a ele cortar todas as plantas dentro do círculo, incluindo sua borda. Quanto mais alto Florêncio levantar sua foice, maior será o raio do círculo que ele irá alcançar. Ele quer cortar pelo menos P plantas, mas a sua preguiça é tanta que ele quer fazer isso levantando sua foice o mínimo possível.

                Florêncio conseguiu uma imagem de satélite do seu jardim, onde todas as suas plantas aparecem, e além disso conseguiu alguém para converter essa imagem em uma lista onde cada planta é representada por suas coordenadas em um plano XY. Agora ele está sentado do lado de fora, com sua foice na mão, esperando o seu time dizer a ele o raio mínimo de um círculo que cobre pelo menos P plantas.";A primeira linha contém dois inteiros N e P, indicando, respectivamente, a quantidade de plantas no jardim e a quantidade mínima de plantas que Florêncio quer cortar (1 ≤ P ≤ N ≤ 500). Cada uma das N linhas seguintes descreve uma planta diferente usando dois inteiros X e Y, que representam as coordenadas da planta no plano XY (1 ≤ X, Y ≤ 105). Não há duas plantas na mesma posição (que têm as mesmas coordenadas).;Imprimir na saída uma linha contendo o número que representa o raio mínimo de um círculo que abrange pelo menos P plantas. Imprima o resultado usando exatamente 4 dígitos após o ponto decimal, arredondando, se necessário.;False;10 / 10;318;29;9.12%
2095;Guerra;Paradigmas;5;Guerra, um evento digno apenas de aparecer na literatura, filmes ou talvez programação de concursos, veio a atingir o império Nogloniano, que está enfrentando o império vizinho de Quadradônia. Protocolos de guerra combinados por ambas as partes indicam que a guerra será travada em sucessivas batalhas, em cada uma das quais um soldado diferente de cada império vai enfrentar outro, de modo que cada soldado irá participar em exatamente uma batalha. O império que ganhar mais batalhas ganha a guerra. Cada império tem um exército formado por S soldados, e cada soldado tem uma certa habilidade de combate. Em cada batalha entre dois soldados, aquele com maior habilidade de combate ganha a batalha. Se ambos os soldados têm as mesmas habilidades de combate, a batalha é declarada como empate e tecnicamente nenhum lado é vitorioso. Os espiões de Noglônia tiveram que interceptar informações secretas relativas às habilidades de combate de cada soldado do exército de Quadradônia, por isso a rainha de Noglônia requer a sua assistência, a fim de calcular o número máximo de batalhas que podem ganhar durante a guerra se os seus soldados forem enviados na ordem apropriada.;A primeira linha contém um número inteiro S que representa o número de soldados em cada exército (1 ≤ S ≤ 105). A segunda linha contém S números inteiros, onde Qi representa as habilidades de combate dos diferentes soldados do exército de Quadradônia, na ordem em que as batalhas irão acontecer (1 ≤ Qi ≤ 109 para i = 1, ..., S). A terceira linha contém S números inteiros, onde Ni representando as habilidades de combate dos diferentes soldados do exército de Noglônia, em uma ordem arbitrária (1 ≤ Ni ≤ 109 para i = 1, ..., S).;Imprima uma linha contendo um único número inteiro que representa o número máximo de batalhas que Noglônia pode ganhar durante a guerra.;False;5 / 10;1484;608;40.97%
2096;Horácio e Seus Primos;Matemática;7;"Horácio gosta de brincar de escrever números naturais no quadro-negro em seu quarto. Um dos seus jogos favoritos consiste em primeiro escrever um número n, então a soma de todos os diferentes números primos que dividem a n, e assim por diante até que o número escrito na placa se torne um número primo. Por exemplo, se Horácio começa a escrevendo o número n = 90, porque 90 = 2 × 32 × 5 o próximo número a ser escrito, será de 2 + 3 + 5 = 10; então, como 10 = 2 × 5 Horácio vai escrever o número 2 + 5 = 7; finalmente, porque 7 é um número primo o jogo terminará aqui.
                    Formalmente, este jogo em cada número natural n> = 2 define uma sequência cujo primeiro elemento é n, e cada novo elemento é a soma de todos os números primos que dividem o elemento anterior na sequência. O fim do jogo é a posição do primeiro número primo na sequência, e coincide com o número total de números escritos . No exemplo do parágrafo anterior, com n = 90 o fim do jogo é K = 3, porque os números que estão escritos será de 90, 10 e 7.
                    Agora, nem todos os jogos são igualmente divertido para Horácio, e neste caso ele prefere começar por escrever um número n tal que a ordem do jogo correspondente é um valor especial K. Horácio gostaria de saber quantos diferentes valores de n inclusive entre A e B satisfaçam  esta condição, mas porque ele não sabe como codificar ele precisa de alguém para fazer este cálculo para ele. Você pode ajudá-lo?";A primeira linha contém um inteiro P que indica o número de questões que  Horácio quer pedir (1 <= P <= 105). Cada uma das próximas P linhas descreve uma pergunta usando três números inteiros A, B e K, o que significa que Horácio gostaria de saber quantos valores diferentes  de n satisfaz  A <= n <= B  e a ordem do jogo começando com  n é K (2 <= A <= B <= 106 e 1 <= K <= 106) .;Você deve imprimir P linhas, cada uma contendo um número inteiro com a resposta a uma das perguntas feitas por Horácio, na ordem em que aparecem na entrada.;False;7 / 10;189;74;39.15%
2097;Nome para Número;Strings;8;Dada uma lista de nomes de números, converta-os para inteiros. Talvez o problema  número 1846 do URI ajude você.;Em cada linha (cerca de 100000 linhas), há o nome de um número inteiro n, 0 ≤ n ≤ 1015-1.;Escreva o número inteiro correspondente ao nome.;False;8 / 10;418;111;26.56%
2098;Ilha do Tesouro;Grafos;5;"Encontrar os tesouros escondidos há séculos pelos piratas das ilhas do Caribe não é tarefa fácil, mais difícil ainda é viver para contar a história. Isto porque, como todo mundo sabe, os piratas tinham poderes sobrenaturais que eles usavam para amaldiçoar a pessoa que levou o seu tesouro sem autorização.

                    Uma maldição muito comum entre os mais poderosos dos piratas, e para a qual é sempre uma boa ideia estar preparado, é hoje conhecida como a névoa mortal. Sempre que o tesouro de um pirata for encontrado, esta maldição vai fazer com que a névoa venenosa suba do chão até que toda a ilha fique coberta por ela. Qualquer criatura viva que é tocado pela névoa vai morrer instantaneamente, algo especialmente indesejável para quem acabou de encontrar um tesouro. A única maneira de se salvar é, em seguida, retornar para o seu barco, sempre passando por áreas que ainda não foram cobertas pela névoa, e, assim, fugir com a parte do tesouro que pode ter sido resgatada. Neste problema estamos interessados em saber qual é a quantidade máxima de tempo que uma pessoa pode recolher o tesouro e ser capaz de voltar para o barco vivo.
                    
                    Para simplificar o problema, vamos considerar que uma ilha pode ser representada por uma grade com R linhas e C colunas, em que a célula na linha i-th e coluna j-th  tem altura Hij acima do nível do mar. Além disso, vamos supor que o tesouro está sempre escondido na célula de linha 1 e coluna 1, porque esta é a mais distante do único lugar onde o barco pode ancorar, que é a célula da linha R e coluna C. A névoa mortal aparece no nível do mar no mesmo instante que o tesouro é encontrado, em seguida, levanta-se em toda a ilha, a uma taxa de uma unidade de altura por segundo, para que depois de t segundos não se pode estar em qualquer célula de altura menor ou igual a t. A fim de voltar para o barco, você pode ir de uma célula para outra somente se elas compartilham um lado, de modo que, se você estiver em uma determinada célula você só pode mover horizontalmente para a célula antes ou depois da mesma linha, ou verticalmente para a célula antes ou depois, na mesma coluna, mas você não pode se mover na diagonal ou cruzar as fronteiras da ilha. Cada um desses movimentos de uma célula para outra leva exatamente um segundo.";A primeira linha contém dois números inteiros R e C, representado, respectivamente, o número de linhas e colunas da grade que representa a ilha, constituído por pelo menos duas células (1 ≤ R, C e R ≤ 500 × C ≥ 2). Cada uma das seguintes R linhas contém C valores. No i-ésimo destas R linhas, o valor j-ésimo é um número inteiro Hij que representa a altura da célula da linha i e coluna j (1 ≤ Hij ≤ 106 para i = 1, ..., R e j  = 1, ..., C).;Imprimir uma única linha contendo um número inteiro que representa a quantidade máxima de tempo, em segundos, que se pode recolher o tesouro, de modo a ser capaz de retornar para o barco sem ser atingido pela névoa mortal. Imprimir o número -1 se for impossível voltar para o barco, mesmo quando se inicia o caminho de volta assim que o tesouro é descoberto.;False;5 / 10;45;17;37.78%
2099;Jogando Com Pedras;Paradigmas;5;"O Jaimito adora brincar com N pedras idênticas que lhe deram para empilhar em seu aniversário para formar montanhas de vários tamanhos. Sua felicidade seria completa se não fosse por sua mãe, Jimenez, que sempre lembra que no final de cada dia vem a Hora de Organizar as Pilhas (HOP). É neste ponto que Jaimito deve destruir as montanhas de pedras, construídas com tanto esforço. Como Jimenez sabe o quanto a HOP incomoda o seu filho, propõe um jogo para a tarefa se torna mais divertida. Jaimito e sua mãe têm turnos para jogar, com Jaimito começando o jogo por ser o mais novo.
                    Inicialmente, há várias montanhas, cada uma composta por um determinado número de pedras. Por sua vez, cada jogador escolhe uma montanha que tem mais do que uma pedra e a divide para formar duas montanhas, não necessariamente do mesmo tamanho. O jogo continua até que um dos dois jogadores não pode fazer um movimento válido, no qual o jogador é declarado o perdedor, e o outro como vencedor. 
                    Jaimito é muito inteligente, e se deu conta de que ele pode distribuir N pedras para formar montanhas estrategicamente, de modo que quando você começar a jogar com esta distribuição, você irá garantir a vitória na HOP. Por causa da forma como o jogo funciona, Jaimito não considera que duas distribuições iniciais são diferentes se diferem apenas na ordem em que se encontram as montanhas. Isto significa que para considerar duas distribuições iniciais diferentes, elas devem ter diferentes números de montanhas, ou, se o número de montanhas é o mesmo, devem ser as pedras distribuídas de forma diferente dentro das montanhas. Por exemplo, se Jaimito tem N = 4 pedras, existem cinco distribuições iniciais diferentes: quatro montanhas de uma pedra; duas montanhas de uma pedra e mais uma com duas pedras; uma montanha de uma pedra e uma com três pedras; duas montanhas de duas pedras; e, por último, uma montanha com quatro pedras. Como Jaimito não gostaria que sua mãe percebesse que está sendo enganada, ele pretende alterar a distribuição inicial de N pedras todos os dias. Ele está convencido de que existem muitas distribuições iniciais diferentes que garantem ganhar o jogo, mas ainda não sabe com certeza quantos. Por exemplo, se n = 4 pedras, Lourie tem apenas duas escolhas possíveis: uma única montanha com quatro pedras ou duas montanhas com duas pedras. A tarefa de sua equipe neste problema é ajudar Jaimito na contagem de quantas maneiras diferentes pode distribuir suas N pedras nas montanhas de modo ter garantido a vitória no jogo contra Jimenez. Então Jaimito pode ficar tranquilo sabendo quantos dias pode ganhar o jogo sem a mãe suspeitar de suas boas intenções.";Uma única linha contendo um número inteiro N indicando o número de pedras que possui Jaimito (2 ≤ N ≤ 1000).;Imprima uma linha contendo um inteiro representando o número de diferentes formas de distribuir N pedras nas montanhas para que Jaimito garanta a vitória no jogo contra Jimenez. Como a resposta pode ser um número muito grande, você deve imprimir apenas o resto de sua divisão por 109 + 7.;False;5 / 10;121;60;49.59%
2100;Cinema de Xing Tzen Zu;Matemática;5;"Harbin tem um dos maiores cinemas do mundo. O Cinema ""Xing Tzen Zu"" é muito largo, tendo poucas ﬁlas com muitas cadeiras. O governo chinês tem regras especíﬁcas para as pessoas irem ao cinema: cada casal deve se sentar sempre na mesma ﬁleira (a primeira ﬁleira é ocupada por fazendeiros, motoristas, mecânicos, a segunda por professores, comerciantes, bombeiros, e assim por diante). Mas, ao mesmo tempo, é proibido que as pessoas sentem exatamente na mesma posição em duas noites. Isso preocupou o prefeito da cidade, que procurou então descobrir quantas noites o cinema poderia abrir sem que fosse necessário repetir uma conﬁguração que já tinha acontecido anteriormente. Uma restrição importante é que os casais devem sempre ocupar poltronas vizinhas na ﬁleira.

                    Sua tarefa neste problema é determinar, dado o número de poltronas N e o número de casais M, quantos jeitos diferentes os casais poderiam ocupar as poltronas de forma que não ﬁquem separados.";A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância é composta por uma linha que contém dois inteiros N (2 ≤ N ≤ 4000) e M (1 ≤ M ≤ N/2).;"Para cada instância imprima uma linha contendo o número de jeitos diferentes que os casais poderiam ocupar as poltronas de forma que não ﬁquem separados.

                    A resposta dada deve ser módulo 1300031.";False;5 / 10;248;144;58.06%
2101;Combinações de Dias;Matemática;4;"Estamos no ano de 2433, e a nave Pythanic acabou de ser lançada com a primeira leva de humanos a habitar outro planeta. Tal viagem tem sido muito esperada desde que as condições de vida na Terra se tornaram extremamente difíceis após uma tentativa frustrada de um terrorista de acabar com os humanos usando bactérias mutantes, há pouco mais de 400 anos atrás. Como as bactérias foram muito mal-feitas, com muitas gambiarras de última hora, tudo o que ele conseguiu fazer foi deixar um incrível mal cheiro no ambiente.

                    Antes que a viagem fosse feita, ealgumas decisões tiveram que ser tomadas com relação ao modo de vida que tais pessoas levariam no outro planeta. Uma dessas decisões foi de que a duração do dia seria a mesma em todos os planetas habitados pelos humanos. Ou seja, a palavra ""dia"" passa a ser simplesmente um termo que significa ""24 horas"", e não mais um termo que especifica uma rotação completa do planeta em torno de si mesmo. No entanto, ficou decidido que a duração do mês poderá variar de planeta para planeta. Preocupados com a confusão que isso poderia causar, os analistas da comissão de colonização interplanetária pediram a você para criar um programa que, dadas as durações dos meses (em dias) em dois diferentes planetas, diga quantas combinações diferentes existirão de pares (D1, D2), onde D1 é um dia do mês no planeta 1, e D2 é um dia do mês no planeta 2 (não precisam ser dias do mesmo mês). Você deve assumir que o primeiro dia 1/1 (ou seja, primeiro dia do ano) ocorre ao mesmo tempo nos dois planetas.

                    Por exemplo, se um planeta possui 2 dias num mês e outro possui 3, teremos 6 combinações diferentes de dias: (1,1), (2,2), (1,3), (2,1), (1,2) e (2,3). Se um planeta tiver 4 dias num mês e outro possuir 2, existirão apenas 4 combinações: (1,1), (2,2), (3,1), (4,2).

                    Dados D1 e D2, seu programa deve determinar quantas combinações de dias existem.";"A entrada contém várias instâncias.

                    Cada instância é composta por apenas uma linha contendo dois inteiros D1 e D2 (1 ≤ D1, D2 ≤ 1.000.000.000), que correspondem ao número de dias no mês nos dois diferentes planetas. A entrada termina quando D1 = D2 = 0.";"Para cada instância na entrada, imprima uma linha contendo a quantidade de combinações de dias diferentes entre os dois planetas.

                    A resposta deve ser dada em módulo 1713371337.";False;4 / 10;146;74;50.68%
2102;Contando em Chinês;Ad-Hoc;3;"A China é um dos maiores países do mundo e o mais populoso. Realizar um censo no país é quase uma operação de guerra. O governo envia para cada um dos pequenos distritos imensas matrizes, que devem ser preenchidas com as características de todos os cidadãos. Cada uma dessas matrizes tem o mesmo tamanho: nas linhas estão as várias etnias (são milhares) e nas colunas as características que se deseja medir (pode chegar a milhões). Sabemos que poucos elementos de cada uma dessas matrizes são de fato preenchidos com valores diferentes de zero.

                    O trabalho da empresa governamental que faz o censo é, então, receber as P matrizes M × N (1 ≤ N ≤ 100), cada uma dada através de seus elementos não nulos e calcular a matriz soma das várias matrizes.";"A primeira linha da entrada contém um inteiro T indicando o número de instâncias.

                    A primeira linha de cada instância contém dois inteiros, N e L representando respectivamente a dimensão das matrizes e o número total de entradas não nulas. As L linhas seguintes contêm quatro inteiros Pk, lk, ck e vk indicando que a matriz Pk tem valor vk na posição de linha lk e coluna ck.";"Para cada instância imprima as entradas não nulas da matriz soma. Para cada entrada não nula da matriz, imprima a linha, coluna e valor correspondente, separados por espaço. A saída não precisa estar ordenada.

                    Entre duas instâncias imprima uma linha em branco.";False;3 / 10;494;202;40.89%
2103;Harbin é Muita Grana!;Grafos;7;"Harbin é uma cidade organizada, mas construída de forma bastante econômica. Todas as ruas são de mão dupla, e é possível ir de qualquer ponto da cidade a qualquer outro, sempre passando apenas por ruas asfaltadas, mas não existem dois caminhos asfaltados diferentes ligando quaisquer dois pontos da cidade. O prefeito responsável pelo asfaltamento das ruas diz ter aplicado inclusive um algoritmo de um certo holandês, mas nunca ninguém entendeu o nome do algoritmo para poder verificar se ele de fato dizia a verdade.

                    Na época do festival das estátuas de gelo de Harbin são espalhadas em vários pontos da cidade, e, os turistas são convidados a percorrer as ruas asfaltadas da cidade de forma a visitar todas elas. Sempre pensando na economia, o prefeito deseja saber qual é o comprimento total, em quilômetros, dos caminhos que ligam todos os pares de esculturas (cada par deve ser contado uma só vez, ou seja, se você já contou o caminho de A até B, não deve contar o caminho de B até A ). Sua tarefa neste problema é, dadas as posições das estátuas e os comprimentos das ruas asfaltadas que ligam as estátuas, determinar este comprimento total.";A entrada é composta por diversas instâncias. A primeira linha de cada instância contém um inteiro N (1 ≤ N ≤ 10000) representando o número de estátuas. As estátuas são enumeradas de 1 a N. Cada uma das N−1 linha seguintes contém três inteiros A, B e C (1 ≤ A, B ≤ N, 1 ≤ C ≤ 50), indicando que a rua asfaltada que liga as estátuas A e B tem comprimento C.;"Para cada instância imprima a soma dos comprimentos dos caminhos que ligam todos os pares (não-ordenados) de esculturas.

                    A resposta dada deve ser módulo 1300031.";False;7 / 10;347;130;37.46%
2104;Lasers;Geometria Computacional;8;"Estamos no ano de 2048. Na órbita do planeta Terra existem várias plataformas flutuantes que defendem nosso planeta contra asteróides e outras coisas que possam vir a colidir aqui. Essas plataformas possuem canhões que atiram projéteis em qualquer coisa que chegue perto.

                    Um civilização alienígena, no entanto, pretende invadir nosso planeta, mas para isso precisa passar pela barreira de plataformas flutuantes. Para tal, vai se utilizar de um super multi-canhão a laser, que consegue disparar, ao mesmo tempo, milhares de feixes de raio laser, a partir de um único ponto. Assim, eles podem mirar em todas as plataformas do nosso planeta e destrui-los todos ao mesmo tempo, sem nos dar tempo de reação.

                    O problema maior é que os raios são tão poderosos que não se limitam a destruir as plataformas flutuantes, eles acabam atingindo a Terra depois disso. Ao atingir o solo, cada feixe de laser se transforma em uma esfera de energia, e cada esfera de energia se liga à todas as outras através de fios, também de energia, formando assim uma malha energética que não pode ser tocada. É um ataque altamente perigoso e destrutivo. Dá muita raiva.

                    Nosso espião intergalático Austero Poderes conseguiu adentrar no canhão e descobriu a partir de onde os alienígenas pretendem soltar os raios. Como ele não consegue simplesmente desativar os canhões, a base de controle de espionagem decidiu que, já que não será possível salvar as plataformas, temos que estimar qual será o estrago feito em solo terrestre pelos lasers.

                    Assim, sabendo onde estão as plataformas e de onde sairão os lasers, você deverá definir qual será a área comprometida pela ""malha de energia"" que se formará na Terra.
                    
                    Vale lembrar que no ano de 2033 descobriu-se que a Terra é, na verdade, plana.";"A entrada contém várias instâncias.

                    Cada instância começa com um inteiro N (3 ≤ N ≤ 1000), que representa o número de plataformas flutuantes. A linha seguinte contém coordenadas (Xp, Yp, Zp), representando o local a partir de onde os lasers serão disparados. As N linhas seguintes contêm, cada uma, coordenadas (Xi, Yi, Zi), representando os locais das plataformas flutuantes. O solo terrestre é representado pelo plano XY. O ponto de disparo dos lasers sempre estará acima das plataformas. As plataformas estão em pontos distintos, e nenhum laser atinge o solo em uma coordenada (x ou y) menor que -100000 ou maior que 100000 (-100000 ≤ Xp,Yp,Zp,Xi,Yi,Zi ≤ 100000). A entrada termina quando N = 0.";"Para cada instância na entrada, imprima uma linha contendo o valor da área comprometida pela malha energética formada pelos lasers no solo terrestre, com duas casas decimais.

                    A saída deve ser escrita na saída padrão.";False;8 / 10;101;28;27.72%
2106;Montagem;Paradigmas;7;"Estamos no ano de 2931. Cientistas detectaram um meteoro que, em 15 meses, irá colidir com a Terra e extinguir a vida no planeta. Não há mais tempo para preparar ofensivas contra o meteoro, então só nos resta realizar nossos últimos desejos e esperar a colisão.

                    Um grupo de pessoas resolve se unir e realizar o último sonho de centenas de milhares de pessoas: ver a Portuguesa campeã da Copa Libertadores da América. Para tal, será necessário a contratação de jogadores de grande habilidade, que também são muito caros.

                    Para conseguir fazer isso, eles estudaram a personalidade dos melhores jogadores do mundo, e chegaram à conclusão que alguns aceitariam jogar na Portuguesa mais facilmente (isto é, seria contratado por um preço menor) se percebessem que seriam as únicas ""estrelas""do time. Já outros, viriam mais facilmente caso percebessem que na Portuguesa já existem outras estrelas.

                    Assim, através de um estudo mais detalhado das personalidades, conseguiram definir, para cada jogador, qual seria o preço para contratá-los em vários cenários.

                    Por exemplo, o jogador X poderia ser contratado por $3 se fosse a única estrela do time ou por $5 se já houvesse 1 estrela no time antes dele entrar. Já o jogador Y seria contratado por $4 se fosse a única estrela do time, ou $2 se já houvesse uma estrela no time.

                    Nesse cenário, a melhor maneira de contratar X e Y seria contratar primeiro o jogador X por $3 e depois Y por $2, gastando $5 no total.

                    Você receberá os dados dos custos de contratação dos jogadores em cada cenário, e deverá dizer quanto os torcedores da Lusa deverão economizar para montar o time dos sonhos e conquistar a tão sonhada Libertadores.";"A entrada contém várias instâncias.

                    A primeira linha contém um número inteiro N (2 ≤ N ≤ 18), representando a quantidade de jogadores a serem contratados. Cada uma das próximas N linhas representa um jogador. Cada uma possui N inteiros c0 , c1 , c2 , ... cN−1 (1 ≤ ci ≤ 1000, para todo 0 ≤ i < N) separados por espaços, onde c k representa o custo para se contratar o jogador c se já tiverem sido contratados k jogadores.

                    A entrada termina quando N = 0.";Para cada instância na entrada, imprima uma linha com um inteiro representando a quantidade mínima de dinheiro que deverá ser gasto para a contratação dos N jogadores.;False;7 / 10;379;186;49.08%
2107;As Pirâmides de Ecaterinburgo;Matemática;3;"As pirâmides são estruturas muito frequentes em civilizações antigas de todo o mundo. As mais famosas, as do Egito, foram construídas mais de 2000 anos antes da passagem de  Cristo pela Terra. Outras pirâmides famosas são as encontradas no México e América Central, ligadas às civilizações astecas e maias.

                Poucos conhecidas, porém, são as pirâmides construídas nos montes Urais, perto da cidade de Ecaterimburgo. Tais pirâmides remontam ao início da era cristã, e acredita-se que foram construídas por povos mongois, que invadiram a Europa através dos montes Urais vindos da Asia. Diferentemente das outras pirâmides conhecidas, estas tinham base triangular. Dessa forma tais pirâmides tinham 4 faces triangulares. Muitas dessas pirâmides eram construídas sobre colunas, o que permitia construções não paralelas ao solo e até mesmo que a base “de baixo” ficasse exposta.

                Isso era muito importante, pois as faces da pirâmide eram pintadas com figuras que representavam deuses antigos, figuras mitológicas, planetas e outros corpos celestes, e assim por diante. Dessa forma, em algum ponto da cidade, um cidadão poderia visualizar uma ou mais das faces da pirâmide. Isso era importante na religião local, e encontrar uma casa de cuja janela se vislumbrasse as melhores faces das pirâmides era muito valorizado naquela época.

                Sua tarefa é, dadas as posições no espaço dos vértices de uma pirâmide, e a posição no espaço de um observador, determinar quais das faces da pirâmide são visíveis a ele, considerando que não existe nenhum obstáculo entre o observador e a pirâmide.";"A entrada é composta por diversas instâncias e termina com final de arquivo (EOF).

                    Cada instância consiste de 5 linhas. Cada linha contém três inteiros, separados por espaços e representam as coordenadas dos pontos A, B, C, D e X respectivamente, onde X é a posição do observador e os demais pontos são vértices da pirâmide.

                    Todos os pontos fornecidos têm coordenadas inteiras entre -100 e 100.

                    Os pontos A, B, C e D não são coplanares.

                    Todos os pontos fornecidos são distintos.

                    O ponto X não pertence nem ao interior nem a nenhuma face da pirâmide.";Para cada instância, imprima uma linha contendo 4 caracteres. O primeiro caractere deve ser S se o observador enxerga a face da pirâmide oposta ao vértice A e N caso contrário. Analogamente para o segundo, terceiro e quarto caracteres, mas levando em conta as faces opostas aos vértices B, C e D respectivamente.;False;3 / 10;30;21;70.00%
2108;Contando Caracters;Strings;4;"Matheus estava conversando com a sua noiva via mensagem de texto, quando ela lhe enviou a seguinte mensagem:

1-4-3

Ele não entendeu a mensagem, então ele perguntou o que isso significava, e ela respondeu que era 'I Love You"" e logo ele percebeu que cada número separado por um ' - ' é a quantidade de caracteres de cada uma das palavras que compõem a frase. Com isso, ele teve a ideia de criar um programa que inserindo determinada frase, ele calcula a quantidade de caracteres de cada uma das palavras e separa os valores por ' - '. Mas ele ainda teve a ideia de que o programa deveria receber várias frases linha por linha e ainda no final da execução do programa, a palavra com a maior quantidade de letras deveria ser exibida.";A entrada consiste de vários casos de teste. A primeira linha de um caso de teste contém uma 1 ≤ String ≤ 100 com uma única palavra ou um conjunto de palavras que formam uma frase. Os casos de teste serão processados quando o número 0 for recebido. Não pode haver mais que um espaço separando cada palavra.;"Para cada caso de teste, exiba o número de caracteres de cada palavra que compõe a frase recebida. Separe a quantidade de caracteres de cada palavra por um ' - '. Exiba também a palavra com a maior quantidade de caracteres de todas as frases recebidas.

Obs: Se possuir palavras com números identicos de caracteres, cosiderar a última recebida.";False;4 / 10;2502;1081;43.21%
2109;Duelo de Espiões;Paradigmas;10;"Alexey e Boris eram dois agentes da KGB que moravam em Ecaterimburgo nos anos 70. A cidade era um tanto parada, e como nada acontecia,  os dois decidiram inventar um jogo de dados para não morrerem de tédio. Nesse jogo cada um deles começa com A e B pontos de vida respectivamente. Cada um têm à sua disposição um número de ataques possíveis, e eles se alternam atacando um ao outro. Cada ataque é descrito por uma quantidade de dados. Para saber o dano do ataque rodamos essa quantidade de dados e a soma dos valores é igual ao dano causado.

                    Para jogar, eles têm disponível dados honestos com um número de faces entre 1 e 12. Dessa forma, se um dado com L faces for jogado ele vai mostrar um valor inteiro entre 1 e L, com igual probabilidade e de maneira independente de qualquer outro lançamento no jogo.

                    Ambos os jogadores conhecem todos os seus ataques e os do seu oponente e escolhem como atacar em cada turno de forma a maximizar a sua própria probabilidade de vitória.

                    Sua tarefa nesse problema é determinar qual a probabilidade de vitória de cada jogador.";"A entrada é composta por diversas instâncias e termina com final de arquivo (EOF).

                    A primeira linha de cada instância contém quatro inteiros, VA, VB (1 ≤ VA , VB ≤ 300), NA and NB (1 ≤ NA, NB ≤ 10). Cada uma das próximas NA linhas descrevem um ataque do Alexey, elas começam com um inteiro D (1 ≤ D ≤ 3) e são seguidas por outros D inteiros L1 , . . . , LD (1 ≤ Li ≤ 12), indicando que nesse ataque Alexey lança D dados, com L1 , L2 , . . . , LD faces. As próximas NB linhas descrevem os ataques do Boris de maneira análoga.";Para cada instância, imprima uma linha com um único ponto flutuante arredondado para 3 casas decimais, indicando a probabilidade que o Alexey vença o duelo, sendo que ele que começa atacando.;False;10 / 10;39;4;10.26%
2110;Banho de Sol no Jardim;Estruturas e Bibliotecas;10;"Uma empresa quer demolir um prédio para construir um jardim em uma das principais avenidas de Ecaterimburgo, mas antes quer fazer um estudo: descobrir o tempo de luz de sol que esse jardim receberia por dia, considerando que ela irá demolir o prédio escolhido e construir o jardim no lugar. Isso é importante, pois banho de sol é uma atividade muito popular entre os habitantes da cidade durante o verão. O jardim recebe luz do sol se pelo menos um pedaço dele estiver recebendo raios solares.

                    Para facilitar as coisas, a construtora escolheu um dia do ano para fazer as medições. Nesse dia o sol nasce às 5:30 e se põe às 21:30 (no verão russo os dias são longos). Considere que o sol tem velocidade angular constante no céu e que ele nasce no leste e se põe no oeste.

                    Todos os prédios são alinhados na direção leste-oeste, têm a mesma largura e o espaçamento entre eles é constante, o jardim terá largura igual à dos prédios.";"A entrada é composta por diversas instâncias e termina com final de arquivo (EOF).

                    Cada instância consiste de 2 linhas. A primeira linha contém 3 inteiros N (2 ≤ N ≤ 100), L, D (1 ≤ L, D ≤ 100), o número de prédios, a largura de cada um deles, e o espaçamentos entre eles, respectivamente. A segunda linha contém N inteiros hi (0 ≤ hi ≤ 50), as alturas dos prédios. Uma altura de 0 indica que o jardim será construído nessa posição e aparecerá exatamente uma vez. Todas as medidas são em metros.";Para cada caso de teste imprima uma linha contendo o tempo, em minutos, de luz solar que o jardim receberá no dia escolhido, arredondado para 2 casas decimais.;False;10 / 10;103;23;22.33%
2111;Entendendo o Sorobov;Estruturas e Bibliotecas;4;"Instrumentos de ajuda a calcular existem há séculos. Muito antes do surgimento das máquinas de calcular no século XVII, chineses e japoneses faziam uso de ábacos com os quais podem fazer operações matemáticas sofisticadas em velocidade estonteante. Um instrumento semelhante foi recentemente descoberto em escavações nas imediações da cidade de Ecaterimburgo. Acredita-se ser um ábaco similar ao japonês, chamado, em russo, sorobov (copoбob).

                    O sorobov tem nove colunas, onde cada coluna corresponde a um dígito. A coluna mais à direita representa a unidade, a segunda mais à direita representa as dezenas e assim por diante. Existem 7 linhas, sendo as duas primeiras separadas, por uma barra, das 5 últimas. Na parte de cima (duas primeiras linhas) cada coluna possui uma única pedra, que se encostada na barra separadora soma 5 ao valor do dígito correspondente. Na parte de baixo cada coluna possui 4 pedras e um espaço vazio e a quantidade de pedras entre a barra separadora e o espaço vazio é somado ao valor do dígito correspondente. Dessa forma, dizemos que as pedras de cima valem 5 e as de baixo valem 1.

                    

                    Figura 1: Ilustração de como representar os números de 0 a 9.

                    Sua tarefa neste problema será, dado um número N imprimir uma representação da configuração do sorobov correspondente ao número.";A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância corresponde a uma única linha contendo o número N a ser inserido no sorobov. A entrada deve ser lida da entrada padrão.;"Para cada instância imprima a representação do número N (0 ≤ N < 109) no sorobov com o seguinte formato.

                    As duas primeiras linhas correspondem às pedras que valem 5, na linha seguinte imprima --------- (nove hífens) e as próximas cinco linhas correpondem às pedras que valem 1. Cada linha de pedras deve conter nove caracteres, onde '0' corresponde a um espaço vazio e '1' a uma pedra. Imprima uma linha em branco ao final de cada instância (inclusive a última).";True;4 / 10;240;113;47.08%
2112;Escalonamento de Salas de Aula;Grafos;7;Os professores da Universidade de Ecaterimburgo não gostam de deslocar-se por longas distâncias. Cada docente deseja que as salas em que ele vai dar aula estejam em posições adjacentes. No início de cada semestre cabe ao responsável pela Comissão de Graduação determinar as salas de aula em que os docentes deverão dar aula. Cada docente sabe que turma de alunos deverá assistir às suas aulas como, por exemplo, alunos do terceiro período de Engenharia Mecânica, ou alunos do primeiro período de Computação, etc. Os alunos de cada turma permanecem na mesma sala em todas as aulas. O importante é que todas as salas em que um docente dá aulas fiquem em posições adjacentes. Nem sempre é possível satisfazer os requisitos dos docentes. Se, por exemplo, um docente dá aulas para o terceiro semestre de Matemática e primeiro semestre de Computação, um segundo dá aulas para o primeiro semestre de Computação e segundo período de Engenharia Elétrica e um terceiro professor dá aulas para os alunos do segundo período de Engenharia Elétrica e terceiro semestre de Matemática, claramente não é possível satisfazer os três professores. Sua tarefa é ajudar o responsável pela alocação das salas, e determinar se é possível satisfazer todos os requisitos dos docentes.;A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Na primeira linha de cada instância é dado o número de turmas T (1 < T < 103), numeradas de 1 a T, e o número de docentes D (1 < D < 103). Nas D linhas seguintes são dados o número K (0 < K < T) de turmas em que o docente correspondente dá aulas seguido pelas identificações destas turmas em ordem crescente.;"Para cada instância o seu programa deverá imprimir uma permutação das turmas que atenda os requisitos de todos os docentes, ou seja, todas as turmas em que um docente dá aula estejam adjacentes. Caso não exista uma tal permutação seu programa deverá imprimir ""impossivel"". Se existir mais de uma permutação possível, qualquer uma será aceita.";False;7 / 10;15;7;46.67%
2114;Poker;Matemática;9;"Poker é jogado com um baralho tradicional de 52 cartas (13 valores com 4 naipes). Os valores das cartas, em ordem crescente, são: 2, 3,..., 10, Valete, Dama, Rei, Ás. Dada uma mesa de poker, com dois jogadores, sua tarefa é determinar quem ganhou.

                    Cada jogador possui duas cartas próprias e há cinco cartas comuns aos dois jogadores na mesa. Ganha quem conseguir uma mão de cinco cartas mais valiosa, entre as suas duas cartas próprias e as cinco cartas da mesa. Uma carta da mesa pode ser usada pelos dois jogadores ao mesmo tempo e a mão mais valiosa de um ou dos dois jogadores pode ser obtida ignorando as suas duas cartas próprias e usando as cinco comuns.

                    Para comparar duas mãos de cinco cartas, verifica-se em quais tipos da lista abaixo elas se encaixam. Se uma mão se encaixar em mais de um tipo, escolhe-se o mais valioso. Se as duas mãos se encaixarem num mesmo tipo, se aplica uma regra de desempate específica para este tipo.

                    A lista de tipos de mãos, ordenados do menos valioso para o mais valioso, e seus respectivos critérios de desempate é:

                    
                        Carta mais alta: qualquer mão que não se enquadre em nenhum dos demais tipos. No desempate, as cinco cartas são comparadas uma a uma, da mais valiosa para a menos, até uma mão apresentar uma carta com valor maior que o da outra.
                        Um par: duas cartas de mesmo valor. O desempate é análogo ao da carta mais alta comparando primeiro o valor do par e depois as demais cartas;
                        Dois pares: dois pares. O desempate é análogo ao da carta mais alta comparando primeiro o valor do par mais valioso, depois o valor do par menos valioso e por fim a carta restante;
                        Trinca: três cartas de mesmo valor. O desempate é análogo ao do par;
                        Straight: sequência de cinco cartas de valores consecutivos. Neste caso o Ás pode tomar o valor tanto de carta mais baixa (antes do 2) ou de mais alta (depois do Rei). O desempate é feito pela carta de maior valor, sendo que excepcionalmente o Ás tem o menor valor se aparecer antes do 2;
                        Flush: cinco cartas do mesmo naipe. O desempate é feito pelo critério da carta mais alta;
                        Full House: uma trinca e um par. No desempate é comparado primeiro o valor da trinca. Persistindo o empate, é comparado o valor do par;
                        Quadra: quatro cartas com um mesmo valor. No desempate compara-se o valor da quadra e depois a carta restante;
                        Straight Flush: straight e ﬂush simultaneamente. O desempate é feito como no straight.
                    

                    Note que é possível persistir o empate mesmo depois de aplicadas as regras de desempate. Os naipes das cartas só são considerados para definir um ﬂush, não sendo considerados em nenhuma regra de desempate.";"A entrada é composta por diversas instâncias e termina com final de arquivo (EOF).

                    Cada instância é composta por três linhas. As duas primeiras linhas contêm a descrição de duas cartas cada uma, separadas por espaço. A primeira linha corresponde às cartas do primeiro jogador enquanto a segunda corresponde às cartas do segundo jogador. A terceira linha contém a descrição das cinco cartas na mesa, também separadas por espaço.

                    
                        
                            
                                Caracter
                                Carta
                            
                                 '2'- '9' 
                                 2 - 9 
                            
                            
                                 'T' 
                                 10 
                            
                            
                                 'J' 
                                 Valete 
                            
                            
                                 'Q' 
                                 Dama 
                            
                            
                                 'K' 
                                 Rei 
                            
                            
                                 'A' 
                                 Ás 
                            
                            
                                 'e' 
                                 Espadas 
                            
                            
                                 'c' 
                                 Copas 
                            
                                 'o' 
                                 Ouros 
                            
                            
                                 'p' 
                                 Paus 
                            
                        

                    
                    A descrição de uma carta é dada por 2 caracteres, o primeiro indica o valor da carta e o segundo o seu naipe, conforme a tabela acima.";Para cada instância, imprima uma linha contendo um número inteiro. Imprima 1 se o primeiro jogador ganha essa instância, imprima 2 caso o segundo ganhe e imprima 0 se houver um empate, mesmo depois de aplicadas as regras de desempate.;False;9 / 10;33;5;15.15%
2115;Produção em Ecaterimburgo;Paradigmas;6;"Ecaterimburgo é uma cidade russa localizada na fronteira entre a Europa e a Ásia, nos montes Urais. É a quarta maior cidade da Rússia com mais de 1,4 milhões de habitantes. A principal atividade econômica da cidade está relacionada com a produção de máquinas industriais. As fábricas da cidade produzem boa parte de todas as máquinas usadas na Rússia e exportada para diversos países de todo o mundo. Em especial a produção de ferramentas industriais é famosa no país. As ferramentas são produzidas por máquinas altamente especializadas, e, para cada ferramenta a ser produzida as máquinas gastam um tempo pré-estabelecido para sua produção.

                    Uma das fábricas possui apenas uma dessas máquinas e seu gerente precisa da sua ajuda para melhorar sua produtividade. Os pedidos de ferramentas chegam na fábrica de forma contínua, isto é, no início do dia nem todos os pedidos podem ser processados, pois estes estarão disponíveis ao longo do dia. O gerente acha que os funcionários não estão escolhendo bem a ordem na qual os pedidos são atendidos e quer analisar as sequências de pedidos de dias anteriores. Dessa forma, ele pede que você determine, para um dado dia, o menor instante possível em que todos os pedidos estariam finalizados.";"A entrada é composta por diversas instâncias e termina com final de arquivo (EOF).

                    Cada instância começa com o número N (1 ≤ N ≤ 105) de tarefas que serão processadas no dia. As N linhas seguintes têm o tempo di em que a tarefa estará disponível e o tempo pi de processamento da tarefa na máquina (1 ≤ di, pi ≤ 104). O início do processamento se dá no instante 1.";Para cada instância seu programa deverá imprimir o menor instante em que a tarefa que for processada por último terminará seu processamento.;False;6 / 10;1510;556;36.82%
2116;Diversão dos Alunos;Ad-Hoc;2;"Juilherme e Jogério, gostam muito de jogos matemáticos. Juilherme acabou de criar mais um jogo matemático para eles se divertirem enquanto assistem essa competição online.

O jogo consiste nos seguintes passos:

1) Juilherme escolhe um número N e Jogério escolhe um número M.
2) Juilherme e Jogério devem então achar dois números primos P1 e P2, de tal forma que eles sejam o mais próximo possível do que numero N e M, respectivamente. Além disso P1 deve ser menor ou igual a N e P2 deve ser menor ou igual a M.
3) A resposta final do desafio é encontrar a multiplicacão de P1 e P2. Quem achar a resposta primeiro é o vencedor.

Como eles irão tentar achar a resposta o mais rápido possível, algumas vezes chegando a resultados incorretos, eles precisam de um programa que entregue a resposta final do jogo, para que possa ser comparada com a resposta encontrada por eles.

Usando as informacoes do jogo, faça um programa que dado os números N e M imprima o resultado final.";A entrada do programa consiste de apenas uma linha com N e M (2 <= N, M <= 1000).;A saída do seu programa deve conter apenas uma linha informando a resposta final do jogo.;False;2 / 10;1000;584;58.40%
2117;Mestre Me Ajude;Grafos;10;"Mestre Pátio Zero é um coordenador do Farias Brito que usa de sua extensa rede de amigos no FB (FariasBook) para auxiliar jovens alunos que desejam estudar na organização. Recentemente, ele decidiu ampliar ainda mais seu número de amigos, e fará isso comentando fotos avulsas de pessoas que são amigas de seus amigos.

Baseado em um recente estudo do renomado instituto de pesquisa FBideias, Mestre sabe que uma determinada pessoa i aceitará sua solicitação de amizade após ele deixar um comentário S em uma de suas fotos se a letra favorita da pessoa i aparecer pelo menos Ki vezes em S, não importando se a letra aparece em sua forma maiúscula ou minúscula.

Por carregar consigo o nome da Organização, Mestre enviou para o FBideias todos os seus possíveis comentários, e recebeu uma lista com os N que foram aprovadas como politicamente corretos, mas como o FariasBook tem uma política contra SPAM muito rígida, ele não pode repetir o mesmo comentário em duas fotos distintas.

Jogério Rúnior estuda para olimpíadas de informática no colégio, e por isso Mestre decidiu pedir a ajuda dele em duas tarefas: consertar sua impressora e escolher o que comentar em cada foto de modo que seu número de amigos aumente o máximo possível. Ele percebeu que a impressora apenas estava com um cabo solto, resolveu esse problema e passou para você, a novata Fia Breire, a missão de comentar as fotos. Ajude o Mestre!";A primeira linha da entrada contêm dois inteiros: N e M (3 ≤ N, M ≤ 1000), o número de comentários na lista que mestre recebeu e o número de pessoas que são amigos de amigos do Mestre, respectivamente. As próximas N linhas irão conter cada um dos comentários da lista que Mestre recebeu. Cada linha representa um comentário. Por restrição do FariasBook, cada comentário só pode conter no máximo 140 caracteres, que devem ser letras (minúsculas ou maiúsculas) ou espaços. As próxima M linhas contêm cada uma, uma letra maiúscula Ci e um inteiro Ki, que representam, respectivamente, a letra favorita da pessoa i e quantas vezese ela deve aparecer em um comentário para que a pessoa aceite a solicitação de amizade do Mestre.;Seu programa deve gerar uma única linha que contêm um único inteiro: o maior número de amigos que o Mestre pode conseguir.;False;10 / 10;261;62;23.75%
2118;Qual a Sede?;Grafos;10;"Em Fortaleza, todos os estudantes pretendem estudar em alguma sede do Colégio Farias Brito, porém como existem muitas sedes na cidade, alguns estudantes ficam em dúvida em qual sede se matricular.

Um estudante opta por estudar na sede mais próxima de onde ele mora. Caso existam sedes com mesma distância de onde ele mora, o estudante opta por estudar na sede que obteve mais medalhas em olimpíadas. Caso ainda permaneça o empate, o estudante opta pela sede mais antiga.

O mapa de Fortaleza pode ser desenhado como um grafo, em que os vértices representam os locais, e as arestas representam as ruas (Conectando dois locais). A distância entre dois locais X e Y é determinada pelo número mínimo de ruas que se deve utilizar para chegar em Y a partir de X.

O grande chefe Parcelo Mena ordenou que o estagiário Nhalyson Tepomuceno fizesse um programa que indique qual a melhor sede para os alunos.";"A entrada é composta por múltiplas linhas. A primeira linha da entrada contém quatro inteiros L, S, Q (1 ≤ L, S, Q ≤ 105) e A (1 ≤ A ≤ 106), representando o número de locais, o número de sedes, o números de estudantes e o número de ruas. Cada uma das próximas S linhas contém três inteiros Pi, Mi e Ti (1 ≤ Mi, Ti ≤ 109), representando o local onde a sede está localizada, o número de medalhas da sede e o número de dias que a sede foi construída. Cada uma das próximas A linhas contém dois inteiros X e Y cada, representando que existe uma rua que conecta os locais X e Y. Cada uma das próximas Q linhas contém a localização de cada aluno que deseja se matricular no Farias Brito.

É garantido que para quaisquer duas sedes distintas, elas não foram construídas no mesmo dia.";Para cada localização de um aluno que deseja se matricular no Farias Brito, imprima o identificador da melhor sede que o aluno deve se matricular. Caso não exista sede que seja acessível pelo aluno utilizando as ruas de Fortaleza, imprima “Noic”.;False;10 / 10;344;53;15.41%
2119;Goão e Escadas;Paradigmas;10;"Goão Juilherme é um estudante na Organização Educacional Farias Brito. Uma vez que ele falta muitas aulas, seu supervisor Parcelo Mena pede-lhe constantemente para ir ao seu escritório para repreendê-lo. Farias Brito é uma escola bastante estranha, tendo muito mais escadas do que pisos, e algumas escadas vão diretamente de um andar para outro muitos níveis acima. Goão não gosta de mudanças, então ele decide que quer usar apenas a mesma rota para chegar ao escritório de Parcelo, no entanto, ele não quer fazer a mesma coisa todos os dias. Goão então resolve ele vai subir as escadas de diferentes maneiras, às vezes ele vai saltar dois degrau e em seguida, subir apenas um ou ele pode subir um e saltar dois ou ainda subi um e depois um e assim por diante. Juilherme agora precisa de sua ajuda para determinar a rota que ele pode usar a maior quantidade de vezes antes que ele tenha de repetir a maneira como ele sobe uma escada dela. Uma vez que ele tem uma memória finita, ele só se preocupa com o quantidade modulo 109 + 9.

Nota: Para subir uma escada, a soma dos tamanhos de saltos que Goão usa deve ser igual a quantidade de passos na escada.";A entrada começa com três inteiros N (N ≤ 10000), M (N ≤ 100000) e K (K ≤ 1000), respectivamente, o número de andares, o número de escadas e o número de diferentes tamanhos de salto de Goão. A linha a seguir contêm K numeros, as alturas dos saltos de Juilherme. Os últimos M linhas contêm três inteiros, A, B e C (0 ≤ A ≠ B ≤ N - 1, 1 ≤ C ≤ 1000), descrevendo que uma escada conecta andares A e B e tem etapas C, Juilherme começa sempre piso 0 e o escritório de Mena é no piso N - 1.;A saída do número de vezes Goão pode utilizar a via desejada módulo 109 + 9.;False;10 / 10;191;30;15.71%
2120;Tutores;Estruturas e Bibliotecas;10;"Cada vez que um novo aluno entra da Organização Educacional Farias Brito, ele recebe um tutor para ajudá-lo a conhecer a todos e tudo na escola.

O sistema da escola para determinar o tutor de cada novo aluno foi criado por um louco chamado Succa Liaudzionis. Succa decidiu usar o número de matrícula de cada aluno para seguir o padrão de uma árvore binaria de busca (porque sim), desta maneira:


	O primeiro aluno, com matrícula X1 vira a raíz da árvore e então não possui tutor.
	Os números X2, X3, …, Xn são adicionados um a um a árvore. Para adicionar um número Xi, você deve percorrer a árvore partindo da raíz e usando as seguintes regras:



	O ponteiro está inicialmente apontando para a raíz da árvore.
	Se Xi é menor que o número do nó atual, o filho da esquerda passar a ser o nó atual. Senão, o filho da direita vira.
	Se, em algum momento, o filho desejado não existir, cria-se um novo nó contendo o valor de Xi. A matrícula do tutor do estudante atual é o pai de Xi na árvore.


Por exemplo, se a ordem na qual os números forem adicionados for (3, 1, 4, 2, 5), a árvore fica desta maneira:





Succa precisava de espaço extra em seu computador e decidiu apagar toda informação envolvendo os tutores dos alunos. Agora, seu chefe, Jeixeira Túnior, pediu a mesma informação sobre Q alunos que ele acabou de deletar! Succa considerou perguntar a cada estudante quem é seu tutor, mas isso demoraria tempo demais.

Por outro lado, Succa ainda sabe a ordem na qual os estudantes foram adicionados a árvore. Como Succa não é tão brilhante quanto louco, ele precisa da sua ajuda para usar essa informação e determinar o tutor de cada aluno.";A entrada consiste de quatro linhas. A primeira contém um inteiro N (2 ≤ N ≤ 100 000), o número de estudantes do Farias Brito. A segunda linha contém n inteiros distintos Xi (1 ≤ Xi ≤ 109), representando a matrícula de cada um dos n alunos na ordem em que eles foram adicionados ao sistema. A terceira linha contém Q (1 ≤ Q ≤ 99 999). A quarta linha contém os Q alunos representados por números de 1 a N que se quer informação (não será pedida informação sobre o primeiro aluno).;A saída consiste em Q inteiros. Os inteiros representam, em ordem, a matrícula dos tutores de cada aluno na ordem que foi pedida.;True;10 / 10;248;55;22.18%
2121;Turismo em Ecaterimburgo;Grafos;9;"Muitos podem pensar: “O que vou fazer em Ecaterimburgo? Essa cidade é no fim do mundo!!!”. Entretanto, muitas coisas interessantes ocorreram na cidade, possuindo vários monumentos e locais históricos. Para citar alguns, Ecaterimburgo tem um monumento que é um grande teclado de computador localizado na beira do rio Izet; um monumento a Michael Jackson (!!); na mansão Ipatiev foram assassinados os Romanovs (o czar Nicolau, sua esposa, quatro filhas e filho); lá houve um vazamento de antraz em 1979; um piloto de U2 americano foi capturado e condenado por espionagem; entre outros. Ou seja, existe muito há fazer nos dias em que a cidade for visitada.

                    A central de turismo de Ecaterimburgo construiu um mapa com as principais atrações turísticas da cidade, assim como os belos passeios ligando esses caminhos. Esse mapa também mostra um nível de dificuldade de cada passeio (relacionado à duração, pavimentação da via, relevo etc.) e o sentido no qual ele deve ser feito. Eles desejavam construir uma rota que passasse por todas as atrações turísticas e os passeios. Foi idealizado, então, um concurso que visava fazer esta rota e, ao mesmo tempo, homenageava uma das cidades irmãs de Ecaterimburgo: Caliningrado, cujo nome até o final da segunda guerra mundial era Königsberg. A ideia era construir uma rota em que se partisse de uma das atrações, e passando por todos os passeios se retornasse ao ponto de partida. Sabemos que, como no caso das pontes de Königsberg, nem sempre é possível construir uma rota assim. Por isso a central permitiu que, se necessário, os passeios poderiam ser feitos mais de uma vez. No entanto, ela exigiu que a dificuldade total da rota (soma das dificuldades de cada passeio multiplicado pelo número de vezes que ele é feito) fosse mínima. Dessa forma, o concurso consistia de propor, a partir de uma rota inicial, quais passeios deveriam ser percorridos mais de uma vez e quantas vezes, para se obter uma rota como a desejada pela central.";"A entrada é composta por diversas instâncias e termina com final de arquivo (EOF).

                    A primeira linha de cada instância contém dois inteiros N (2 ≤ N ≤ 50) e M (0 ≤ M ≤ N2+103), o número de atrações da cidade e o número de passeios respectivamente. As próximas M linhas contém três inteiros, ai, bi, di (1 ≤ ai, bi ≤ N) indicando que o passeio i começa em ai, termina em bi e tem dificuldade di (1 ≤ di ≤ 3x104).";Para cada instância imprima a dificuldade total mínima da rota desejada. Se for impossível obter uma rota da forma desejada, imprima “impossivel”.;False;9 / 10;15;1;6.67%
2122;Votação em Ecaterimburgo;Estruturas e Bibliotecas;9;Ecaterimburgo, Rússia, é uma cidade com um curioso sistema de votação. Em uma eleição em que haja V vagas para um cargo, cada eleitor tem direito a fazer V votos, ordenados em sua ordem de preferência. Assim, se, por exemplo, há 3 vagas de senador, cada eleitor vota em até 3 nomes. Serão eleitos os candidatos que tiverem o maior número de votos, sem importar em que posição da preferência do eleitor está o candidato. Apenas quando há empate no número de votos se torna relevante a ordem dada pelos eleitores. Ganha aquele candidato que tiver mais indicações em primeiro lugar. Se persistir o empate, em segundo lugar, e assim por diante. Caso dois ou mais candidatos que estejam em posição de serem eleitos tenham exatamente o mesmo número de indicações em todas as posições, todos são eleitos (podendo inclusive exceder o número de vagas). Candidatos com zero votos podem ser eleitos se ainda existir vagas disponíveis.;"A entrada é composta por diversas instâncias e termina com final de arquivo (EOF).

                    Cada instância começa com o número N (1 ≤ N ≤ 105) de eleitores, o número K de candidatos e V (1 ≤ V ≤ K ≤ 100) de vagas. A seguir vêm N linhas com os votos de cada um dos eleitores. Em seu voto, o eleitor i indicará o número Li (1 ≤ Li ≤ 100) de candidatos em quem votará, e os índices destes candidatos na sua ordem de preferência. Índices de candidatos fora do intervalo [1, K] significam votos em branco apenas para a opção de preferência correspondente. Se indicar mais que V votos, os últimos serão desconsiderados. Um eleitor nunca indica o mesmo candidato mais de uma vez.

                    A entrada deve ser lida da entrada padrão.";"Para cada instância da entrada seu programa deverá imprimir, em uma única linha, a lista de candidatos eleitos ordenada pela classificação dos candidatos na eleição. No caso de dois candidatos possuírem a mesma classificação, o de menor índice vem antes.

                    A saída deve ser escrita na saída padrão.";False;9 / 10;144;32;22.22%
2123;A Lei Vai a Cavalo!;Ad-Hoc;7;"A Polícia Montada Real Canadense (Royal Canadian Mounted Police) é uma instituição muito famosa, cujas origens remontam ao século XIX. Sua tarefa é levar a lei aos locais mais longínquos do país continental. Hoje a polícia montada tem um efetivo de 25000 homens e cerca de 5000 cavalos.

                    Cada sede da RCMP tem uma fazenda de cavalos em que os animais são muito bem cuidados, e designados aos policiais com quem têm mais afinidade. Esta afinidade é inferida em observações dos oficiais com vários anos de experiência, observando os policiais montando os animais disponíveis. No Fairmont Banff Springs Stables, onde ficam os cavalos montados pelos policiais da região de Banff Springs, é necessário resolver o problema de decidir quais soldados montarão quais cavalos. Note que um cavalo pode ser montado por vários policiais, mas um policial só monta um determinado cavalo. Cada cavalo tem um limite de policiais que podem montá-lo. Ou seja, de posse da afinidade dos vários policiais com os animais que montou nos últimos tempos, deseja-se encontrar uma atribuição dos cavalos aos vários policiais, de tal forma que o maior número possível de policiais tenham um cavalo para montar.";"A entrada é composta de diversas instâncias. A primeira linha de cada instância consiste em três inteiros n (1 ≤ n ≤ 100), m (1 ≤ m ≤ 100) e k (1 ≤ k ≤ 1000) indicando o número de cavalos, o número de soldados e o número de afinidades. A linha seguinte contêm n inteiros c1, c2, .., cn indicando que no i-ésimo cavalo pode montar ci (1 ≤ ci ≤ 100) soldados. Nas k linhas seguintes temos dois inteiros u (1 ≤ u ≤ n) e v (1 ≤ v ≤ m) indicando que existe afinidade entre o cavalo u e o soldado v.

                    A entrada termina com final de arquivo.";"Para cada instância, você deverá imprimir um identificador Instancia k, onde k é o número da instância atual. Na linha seguinte imprima o número máximo de policiais que podem ter um cavalo para montar em uma atribuição.

                    Após cada instância imprima uma linha em branco.";False;7 / 10;486;156;32.10%
2124;Cardápio da Sra. Montagny!;Paradigmas;6;"Sra. Montagny é uma socialite de Quebec, que passa as férias em Banff, na sua mansão à beira do Lake Louise. Seus jantares são famosos porque ela com antecedência passa um questionário aos convidados onde os mesmos participam da escolha do cardápio. No questionário, a famosa magnata lista todos os pratos que poderá fazer no jantar, oferecendo uma coluna para o convidado selecionar o prato e outra para vetá-lo.

                    É permitido fazer apenas duas escolhas no questionário, ou seja, cada convidado pode selecionar um prato e vetar outro, vetar dois pratos ou selecionar dois pratos. A Sra. Montagny garante que todos os convidados terão pelo menos um de seus desejos atendidos.

                    Antigamente ela mesma dava conta de montar o cardápio e atender o que prometia, mas com o crescimento de suas festas isso tem se tornado impossível. Assim, ela resolveu contratar vocês para fazer um programa que recebe os pedidos dos convidados e responde se é possível montar o cardápio para a festa.";A entrada é composta de diversas casos. Cada caso começa com um inteiro N (1 ≤ N ≤ 1000), indicando a quantidade de questionários recebidos pela Sra. Montagny. Cada uma das próximas N linhas contém dois nomes de comida indicando a preferência de cada convidado. Um nome de comida é uma sequencia de letras [a-z] com no máximo 20 letras. Quando o nome de uma comida é iniciado por ‘‘!’’ significa que o convidado deseja vetar a comida, caso contrário ele deseja selecionar.;"Para cada caso, você deverá imprimir um identificador ""Instancia K"", onde K é o número da caso atual. Na linha seguinte você deve imprimir ""sim"" se for possível atender pelo menos um desejo de cada convidado e ""nao"" caso contrário. Após cada caso, seu programa deve imprimir uma linha em branco.";False;6 / 10;132;68;51.52%
2125;Construtores de Totens;Ad-Hoc;10;"Várias civilizações pré-colombianas habitaram a região de Alberta, Canadá. Pouco restou destas culturas, dizimadas pelo frio intenso, pelos ursos e, finalmente, pelos invasores ingleses e franceses que chegaram depois do descobrimento. Hoje, pesquisadores da Universidade de Alberta tentam desvendar os mistérios destes povos, estudando os totens produzidos na região.

                    Estudos do departamento de artes da universidade mostraram que os construtores de totens gostavam de marcá-los com várias cópias de suas assinaturas. A assinatura do artista era feita com sulcos verticais “|” e horizontais “_”. Estudiosos imaginam que o símbolo era uma representação do mal na cultura primitiva e, portanto, tabu, construindo um padrão quadrado. Já foram identificadas várias assinaturas de artistas daquela época.

                    Sua tarefa neste problema é fazer um programa que recebe o desenho de um totem, através de um padrão quadrado de tamanho n × n de sulcos verticais e horizontais, e uma assinatura quadrada de tamanho m × m com um padrão do mesmo tipo, e encontrar todas as ocorrências da assinatura no totem.";"A entrada é composta de diversas instâncias. A primeira linha de cada instância consiste em dois inteiros n (1 ≤ n ≤1000) e m (1 ≤ m ≤ 60 e m < n), indicando os tamanhos dos quadrados. Nas n linhas seguintes temos n caracteres ""|"" ou ""_"" que representam os caracteres do quadrado n × n. Nas m linhas seguintes temos m caracteres ""|"" ou ""_"" que representam os caracteres do quadrado m × m.";Para cada instância, você deverá imprimir um identificador Instancia k, em que k é o número da instância atual. Imprima a lista de todas ocorrências linha coluna (o canto superior esquerdo é a posição 0 0) do quadrado m × m no quadrado n × n. A saída deve estar ordenada primeiro pelas colunas e em seguida pelas linhas. Caso não tenha nenhuma ocorrência, imprima uma linha com nenhuma ocorrência.;False;10 / 10;147;25;17.01%
2126;Procurando Subsequências;Iniciante;3;Dados dois números naturais N1 e N2, diz-se que N1 é subsequência contígua de N2 se todos os dígitos de N1 aparecem, na mesma ordem e de forma contígua, em N2. Crie uma aplicação que leia dois números naturais e diga se o primeiro é uma subsequência contígua do segundo.;A entrada é composta por vários casos de teste e termina com final de arquivo (EOF). A primeira linha de cada entrada é composta por um valor natural  N1(1 < N1 < 1010), a segunda linha é composta por um valor N2( N1 < N2 < 1032).;"Para cada caso de teste imprima a quantidade de subsequências contíguas e a posição onde a subsequência é iniciada, caso exista mais de uma subsequência, imprima onde é iniciada a última subsequência. Caso não exista subsequência, imprima ""Nao existe subsequencia"". Mostre o resultado conforme o exemplo de saída.";False;3 / 10;3739;1772;47.39%
2127;Sistema Cipoviário;Grafos;7;"Os pesquisadores do departamento de pesquisa operacional da Universidade da Columbia Britânica foram contratados para uma estranha tarefa. Vários países da África resolveram se unir e utilizar oﬁcialmente o meio de transporte que ﬁcou mundialmente conhecido nos ﬁlmes do Tarzan: o cipó. Há milhões de cipós na África e é surpreendente com que velocidade e eﬁciência uma pessoa pode se deslocar na selva utilizando esse meio de transporte. Só surgiu um pequeno problema. Os cipós são dominados por três grandes tribos: os makelelês, os malouhdás e os abedis. As tribos exigem ser pagas por cipó usado no sistema de transporte. Como eles ainda não sabem o signiﬁcado de palavras como cartel, cada uma fez o seu preço, e divergiram bastante. Enquanto os makelelês exigem 1235 bongôs por cipó usado, os malouhdás exigem 8977 e os abedis 10923 (a Jane ainda está viva, e ajudou a intermediar a negociação para esta tribo).

                    Os pesquisadores foram contratados para escolher os cipós que comporão o primeiro sistema cipoviário do mundo. Os contratantes construíram milhões de “pontos de cipó” pela selva africana e desejam que os cipós sejam escolhidos de tal forma que seja possível ir de qualquer ponto a qualquer outro usando os cipós contratados (você pode ter de trocar de cipó algumas vezes, como fazia o Tarzan). Você deve dizer qual o custo de um sistema que atenda estes requisitos e seja o mais barato possível.

                    Você pode supor que existam cipós suﬁcientes na selva para que sempre exista um sistema cipoviário que atenda os requisitos.";"A entrada é composta de diversas instâncias. A primeira linha de cada instância contém dois inteiros N (1 ≤ N ≤ 1000) e M (1 ≤ M ≤ 2000000), onde N é o número de ""pontos de cipó"" e M é o número de cipós. Cada uma das M linhas seguintes contém três inteiros U, V e C indicando que existe um cipó que vai do ponto U e até o ponto V com custo C, onde 1 ≤ U, V ≤ N e C ∈ {1235,8977,10923}. A entrada termina com ﬁnal de arquivo.";"Para cada instância, você deverá imprimir um identiﬁcador ""Instancia K"", onde K é o número da instância atual. Na linha seguinte imprima o custo de um sistema que atenda os requisitos descritos acima.

                    Após cada instância imprima uma linha em branco.";False;7 / 10;563;201;35.70%
2128;Demonstração de Honestidade!;Grafos;10;"Com o grande número de imigrantes argentinos no Canadá, o governo canadense está criando novas rodovias para as regiões mais distantes e isoladas habitadas por argentinos. Foram feitas diversas licitações para descobrir quais empresas poderiam conduzir as obras de cada rodovia. Cada empresa divulgou os orçamentos para as rodovias que ela poderia construir.
                    
                    Os canadenses são conhecidos pela intolerância à corrupção e querem a qualquer custo evitar que alguma empresa seja beneficiada acima das outras. Então decidiram que cada empresa pode ser contratada para fazer no máximo uma das rodovias. Dá para perceber que no Brasil as coisas funcionam da mesma forma. (Mas não vamos entrar neste mérito!)

                    Entre duas cidades apenas uma empresa pode ter sido escolhida para construir uma rodovia.
                    
                    Sua tarefa é: Dado um conjunto de orçamentos para construção das rodovias que ligam as cidades decida se existe uma maneira de atribuir as construções para as empresas, atendendo a exigência do governo canadense, e que seja possível viajar de qualquer cidade para qualquer outra usando as rodovias construídas.";"A entrada é composta de diversas instâncias. A primeira linha de cada instância consiste em três inteiros n (1 ≤ n ≤ 100), m (1 ≤ 10000) e k (1 ≤ k ≤ 2n) que indicam o número de cidades, número de orçamentos e o número de empresas. As próximas m linhas contém três inteiros u (1 ≤ u ≤ n), v (1 ≤ v ≤ n) e c (1 ≤ c ≤ k) indicando que a empresa c pode construir uma rodovia que liga a cidade u à cidade v.
                    
                    As instâncias são separadas por uma linha em branco.
                    
                    A entrada termina com final de arquivo.";"Para cada instância, você deverá imprimir um identificador Instancia k, onde k é o número da instância atual. Na linha seguinte imprima sim se existe uma atribuição de construções de rodovias que atenda as exigências descritas acima, caso contrário imprima nao.

                    Após cada instância imprima uma linha em branco.";False;10 / 10;84;32;38.10%
2129;Fatorial;Matemática;8;"Joãozinho é um garoto esperto da sexta série. Ele gosta muito de matemática, e descobriu que sua professora é muito preguiçosa. Nas provas da matéria a professora pede que as crianças circulem a resposta com um quadrado colorido, e que façam o primeiro dígito diferente de zero (da direita para esquerda) do número especialmente grande com caneta. Joãozinho desconfiou que a professora olhava apenas para aquele dígito para corrigir a questão.

                    A turma aprendeu a calcular o fatorial de um número, e isso será cobrado na próxima prova. Joãozinho está convencido de que não precisa escrever de fato o número correto, desde que o primeiro dígito (olhando da direita para esquerda) seja o correto. Sua tarefa neste problema é ajudar Joãozinho a calcular para um número inteiro n da entrada, o primeiro dígito (da direita para esquerda) de n! que seja diferente de zero.";"A entrada é composta de diversas instâncias. A primeira linha de cada instância consiste um inteiro n (1 ≤ n ≤ 1000000).

                    A entrada termina com final de arquivo.";"Para cada instância, você deverá imprimir um identificador Instancia k, onde k é o número da instância atual. Na linha seguinte imprima o primeiro dígito (da direita para esquerda) diferente de zero.

                    Após cada instância imprima uma linha em branco.";False;8 / 10;1483;342;23.06%
2130;Final Mundial de 2008;Grafos;8;"Preocupado com a atual situação de crise no transporte aéreo, o diretor regional do concurso do ICPC no Brasil já iniciou seus preparativos para fazer as reservas das passagens aéreas para as ﬁnais mundiais de Banff em 2008. O primeiro passo foi estudar a malha aérea disponível, em que cada voo tem um certo preço e liga duas cidades (estamos, na verdade, chamando de voo apenas um trecho non stop de um voo comercial). O objetivo do diretor é fazer várias consultas nesta malha de voos.

                    Em geral desejamos fazer voos sem escalas, mas estes podem ser muito caros. Para contornar este fato o diretor deseja permitir algumas escalas possíveis. Assim, ele ordenou as várias cidades da malha em sua ordem de preferência para fazer escala. Ou seja, a cidade de índice 1 é a que ele prefere fazer escala, seguida pela cidade 2, e assim por diante.

                    As consultas que o diretor fará são do seguinte tipo. É dada a cidade de partida e de chegada e um número t de cidades em que o diretor permite que sejam feitas escalas. Seu programa deverá encontrar o custo de um voo de custo mínimo entre as cidades que faça, no máximo, escalas nestas cidades. Por exemplo, se t = 1 você deverá encontrar o custo de um voo de custo mínimo entre as duas cidades que seja, ou non stop ou que faça uma escala na primeira cidade.";"A entrada é composta de diversas instâncias. A primeira linha de cada instância consiste em dois inteiros n (1 ≤ n  ≤ 100) e m (1 ≤ m ≤ 100000), indicando o número de cidades e o número de escalas. Nas m linhas seguintes temos três inteiros u, v e w (1 ≤ u, v ≤ n e 0 ≤ w ≤ 100) indicando que existe uma escala que vai de u para v com custo w. Em seguida um inteiro c (1 ≤ c ≤ 10000) indicando o número de consultas e nas c linhas seguintes temos três inteiros o, d e t (1 ≤ o, d ≤ n e 1 ≤ t ≤ n) onde o é a cidade de origem, d é a cidade de destino e t indica que as cidades 1,2,..,t podem ser usadas para escalas.

                    A entrada termina com ﬁnal de arquivo.";"Para cada instância, você deverá imprimir um identificador Instância k, onde k é o número da instância atual. Para cada consulta, na ordem da entrada, você deve imprimir o custo mínimo ou -1 caso não exista caminho entre as duas cidades.

                    Após cada instância imprima uma linha em branco.";False;8 / 10;369;106;28.73%
2131;Mesa da Sra. Montagny!;Grafos;7;"Já comentamos as festas da Sra. Montagny à beira do Lake Louise em Banff. Nas suas festas ela se compromete a resolver um outro problema que faz tremer organizadores de jantares em todo o mundo: onde sentar os convidados. A magnata simplifica bastante o problema pedindo aos convidados, no mesmo questionário já comentado, que anote na lista dos convidados aqueles que desejariam ter à sua frente na mesa do jantar. A ideia é ter seus amigos sempre à sua frente, para que a conversa possa fluir melhor. A habilidade da socialite é tamanha que ela foi contratada pelo Fairmont Banff Springs hotel (hotel em que vão ocorrer as finais mundiais do ICPC em 2008: http://en.wikipedia.org/wiki/Banff Springs Hotel) para trabalhar no arranjo de mesas de banquete. 

                    Sua tarefa neste problema é auxiliar novamente a magnata. Dados os desejos dos convidados, seu programa deve decidir se é possível dispô-los numa mesa de forma que cada convidado tenha todos os seus amigos no lado oposto da mesa.";"A entrada é composta de diversas instâncias. A primeira linha de cada instância contém dois inteiros n (1 ≤ n ≤ 100) e m (0 ≤ m ≤ n(n-1)/2), onde n é o número de convidados e m é o número de relações de amizade. Cada uma das m linhas seguintes contém dois inteiros u e v indicando que u é amigo de v e v é amigo de u, onde 1 ≤ u, v ≤ n.

                    A entrada termina com final de arquivo.";Para cada instância, você deverá imprimir um identificador Instancia k, onde k é o número da instância atual. Na linha seguinte imprima sim se é possível e não, caso contrário.;False;7 / 10;885;329;37.18%
2132;Não é Mais Um Joguinho Canadense!;Strings;6;"O Canadá é um país muito frio. Em 8 meses por ano as temperaturas praticamente impedem que as ruas sejam ocupadas por vida inteligente, restando apenas criaturas resistentes ao frio como alces, ursos e canadenses (brincadeirinha). Nestes longos meses de inverno famílias buscam diversão em frente de suas lareiras (ou, para as mais corajosas, ao redor de suas fogueiras). A família Smith, de Banff, inventou o jogo que descrevemos a seguir.

                    A brincadeira começa com uma das crianças desenhando um diagrama com estados (representados por bolinhas) ligados por transições (flechas ligando os estados). Cada transição tem uma letra e um número associados. Podemos fazer diversos passeios neste diagrama, partindo de um estado inicio caminhando por suas transições e terminando em um estado final. Um passeio forma uma palavra (obtida da concatenação das letras das transições percorridas) e tem um custo (que é dado pelo produto dos números destas transições).

                    Exemplo, considere o diagrama abaixo.

                    

                    Figura 1: Diagrama

                    Todos os passeios iniciam no estado P e terminam em Q. O passeio que segue pelas transições (P,1A), (P,1A), (P,1B) e termina no estado Q forma a palavra AAB concatenando as letras de cada transição tem custo 1 (produto dos números destas transições).

                    O passeio que segue pelas transições (P,1A), (P,1A), (P,1B), (Q,2B) e termina no estado Q forma a palavra AABB e tem custo 2.

                    O jogo inventado pelo papai Smith era o seguinte. Depois de desenhar um diagrama como esse, um dos membros da família falava uma palavra, e os outros deveriam descobrir a soma dos custos de todos os passeios no diagrama que formam a palavra dada tais que iniciam no estado P e terminam no estado Q. No caso do exemplo do diagrama acima, se o Sr. Smith pedisse a palavra ABA a resposta deveria ser 2.";A entrada é composta de diversas palavras (o diagrama é sempre o da figura). Cada caso é dada por uma linha contendo uma palavra. Uma palavra é uma sequência de letras [A, B] com no máximo 60 letras. A entrada termina com final de arquivo (EOF).;Para cada caso, você deverá imprimir um identificador K, onde K é o número da caso atual. Na linha seguinte imprima a soma dos custos. Após cada caso imprima uma linha em branco.;True;6 / 10;850;188;22.12%
2133;Números de Dinostratus;Matemática;9;"Descobertas arqueológicas recentes de pesquisadores da Universidade de Alberta, no Canadá, mostraram que uma estranha sequência de números eram encontrados nas paredes das pirâmides do Egito, nas ruínas de Macchu Picchu e nas pedras de Stonehenge. Intrigados com a aparente coincidência os pesquisadores acionaram o Departamento de Matemática para decifrar o que aquela sequência ou aqueles números tinham de especial. 

                    A descoberta foi estarrecedora. Todos os números eram gerados por matrizes de Dinostratus. Dinostratus foi um famoso matemático grego que viveu de 390 à 320 a.C. e trabalhou em importantes problemas de geometria como a quadratura do círculo. Dinostratus estudava matrizes M de dimensão 3 × 3 formada por 9 inteiros distintos com a propriedade que para toda posição (i, j), i = 1, . . . , 3, j = 1, . . . , 3 da matriz o elemento Mi,j é múltiplo dos seus vizinhos Mi-1,j, Mi-1,j-1 e Mi,j-1 (quando existirem). Em sua homenagem, dizemos que N é um número de Dinostratus se existir uma matriz M com a propriedade acima em que M3,3 = N. Veja um exemplo com N = 36.

                    Veja um exemplo com N = 36.

                    

                    A relação entre os números de Dinostratus, as pirâmides do Egito, as pedras do Stonehenge e as ruínas de Macchu Picchu ainda permanece um grande mistério. Mas, os pesquisadores de Alberta estão dispostos a estudar estes números mágicos. Sua tarefa é fazer um programa que recebe um inteiro N e verifica se este é um número de Dinostratus.";A entrada é composta de diversas instâncias. Cada instância é dada por uma linha contendo um inteiro N (1 ≤ N ≤ 1048576). A entrada termina com final de arquivo.;Para cada instância, você deverá imprimir um identificador Instancia K, onde K é o número da instância atual. Na linha seguinte imprima sim se N é um número de Dinostratus, caso contrário imprima nao.;True;9 / 10;217;57;26.27%
2134;Quem Vai Ser Reprovado?;Ad-Hoc;6;"Prof. Wallywow da Universidade da Columbia Britânica está muito preocupado com a queda do nível de atenção de seus estudantes. Ele já tentou várias técnicas mundialmente conhecidas para incentivar os alunos a prestar atenção nas suas aulas e fazer as tarefas que ele passa para a turma: deu nota para os alunos mais participativos, ofereceu chocolates aos alunos, levou seu karaokê e cantava nas aulas etc. Como tais medidas não levaram a uma melhora no comparecimento às aulas (a ideia do karaokê, inclusive, mostrou-se bastante infeliz. . . na segunda aula com karaokê a turma reduziu-se a um aluno – que tinha problemas auditivos) ele teve uma brilhante ideia: faria uma competição entre os alunos.

                    Prof. Wallywow passou um conjunto de problemas aos alunos, e deu um mês para que eles os resolvessem. No final do mês os alunos mandaram o número de problemas resolvidos corretamente. A promessa do brilhante didata era reprovar sumariamente o último colocado da competição. Os alunos seriam ordenados conforme o número de problemas resolvidos, com empates resolvidos de acordo com a ordem alfabética dos nomes (não há homônimos na turma). Isso fez com que alunos com nomes iniciados nas últimas letras do alfabeto se esforçassem muito nas tarefas, e não compartilhassem suas soluções com colegas (especialmente aqueles cujos nomes começassem com letras anteriores). Sua tarefa neste problema é escrever um programa que lê os resultados dos alunos do Prof. Wallywow e imprime o nome do infeliz reprovado.

                    Qualquer semelhança entre o Prof. Wallywow e o Prof. Carlinhos é mera coincidência.";"A entrada é composta de diversas instâncias. A primeira linha de cada instância consiste em um inteiro N (1 ≤ N ≤ 100) indicando o número de alunos na competição. Cada uma das N linhas seguintes contém o nome do aluno e o número de problemas resolvidos por ele. O nome consiste em uma sequência de letras [a-z] com no máximo 20 letras e cada aluno resolve entre 0 à 10 problemas.

                    A entrada termina com final de arquivo.";"Para cada instância, você deverá imprimir um identificador ""Instancia K"", onde K é o número da instância atual. Na linha seguinte imprima o nome do infeliz reprovado.

                    Após cada instância imprima uma linha em branco.";False;6 / 10;1473;451;30.62%
2135;Recuperação;Matemática;4;"A nossa grandiosa Professora Cris no último aquecimento ficou conhecida como a grande maquiavélica do IME. Para quem não está a par do assunto, a digníssima professora exigiu que os alunos formassem uma fila em ordem lexicográfica (pelo nome) com no máximo k permutações. Isto fez com que muitos alunos nem sequer entrassem na sala para fazer a prova. No entanto, nesta seletiva ela resolveu se redimir perante seus alunos, e resolveu aplicar um probleminha para recuperação.

                    Sua tarefa, mesmo não tendo sido reprovado, é dada uma sequência de n inteiros a1,a2,...,an.Onde -30 ≤ aj ≤ 30 para j = 1,,...,n, imprima, se existir, um inteiro ak tal que  .Se houver mais de um inteiro que satisfaça esta condição, imprima o que aparece primeiro na sequência.

                    Observação da professora: ""Meninos, lembrem-se que a soma de nenhum número diferente de zero é zero! Tá?""";A entrada é composta de diversas instâncias. A primeira linha de cada instância consiste em um inteiro n (1 ≤ n ≤ 100) indicando o número de inteiros na linha seguinte que devem ser processados. A entrada termina com final de arquivo (EOF).;"Para cada instâncias, você deverá imprimir um identificador ""Instancia k"", onde k é o número da instância atual iniciando por 1. Na linha seguinte imprima o inteiro que satisfaça a restrição descrita acima. Caso não exista tal inteiro imprima ""nao achei"".
                    
                    Após cada instância imprima uma linha em branco.";True;4 / 10;299;153;51.17%
2136;Amigos do Habay;Estruturas e Bibliotecas;2;"Todo final de ano ocorre uma festa na Instituição de Educação Fantástica (IEF). Logo no início de julho, são abertas as inscrições para participar dela. No momento da inscrição, o usuário pode escolher se quer ser ""O Amigo do Habay"" na festa ou não. O mais lógico seria escolher a opção Sim, afinal, é um privilégio ser O Amigo do Habay, já que ele é a pessoa mais descolada do IEF. Porém, há indivíduos que definitivamente não pretendem ser O Amigo do Habay, e por motivos desconhecidos.

Somente um será o escolhido. Em vista disso, muitos alunos que escolheram a opção Sim realizaram a inscrição diversas vezes para aumentar a própria probabilidade de ser O Amigo do Habay. O organizador geral da festa contratou você para organizar as inscrições do site, pois está havendo um spam de inscrições. O critério para ser o escolhido é a quantidade de letras do primeiro nome, e em caso de empate, vence aquele que realizou primeiro a inscrição. A organização final dos inscritos deverá seguir a ordem de escolha (Sim ou Não), mas respeitando a ordem alfabética.


OBS.: Ninguém que escolheu a opção Não realizou a inscrição mais de uma vez.";"A entrada contém somente um caso de teste. Cada linha é composta pelo primeiro nome do participante (sem espaços), seguido da opção YES (caso o usuário queira ser O Amigo do Habay) ou NO (caso não queira). A entrada termina assim que o usuário digita ""FIM"" (sem as aspas).";Seu programa deverá imprimir os inscritos pela ordem de escolha e por ordem alfabética, seguido do nome do vencedor. Imprima uma linha em branco entre a lista de inscritos e o nome do vencedor.;False;2 / 10;2982;1180;39.57%
2137;A Biblioteca do Senhor Severino;Strings;1;"Em uma pacata cidade do interior, o senhor Severino decidiu montar a própria biblioteca, já que coleciona vários livros desde sua juventude. Como ele não sabe programar, pediu ajuda ao neto para criar um programa que cadastre e ordene seus livros pelo código. Porém, seu neto ainda está no ensino fundamental, e como sabe muito pouco de programação, acabou criando um programa que somente cadastra os livros, mas não os ordena.

Desse modo, o senhor Severino recorreu a você, pois sabe de suas habilidades com programação. Sua tarefa é simples: ordenar os cadastros dos códigos dos livros.";"A entrada contém vários casos de teste. Cada teste começa com um valor N (1 ≤ N ≤ 1000). Em seguida, N linhas terão os códigos dos livros, que estão sempre no formato ""xxxx"", isto é, não haverá o cadastro '1', por exemplo, mas ""0001"". A entrada termina com fim de arquivo.";Seu programa deverá imprimir o cadastro dos códigos ordenado. Não haverá linha em branco entre os casos de teste.;False;1 / 10;6254;3083;49.30%
2138;Dígito Mais Frequente;Ad-Hoc;2;"Na Nlogônia, diversos programadores participam de uma competição de criptografia denominada ""Decrypt it!"", em que aquele que decifrar o maior número de mensagens vence.

No meio da competição, você percebe que, para prosseguir e decifrar uma mensagem, deverá vencer o seguinte desafio: encontrar o dígito mais frequente de um número de até 1001 dígitos.";A entrada é composta por várias linhas, contendo um inteiro N (1 ≤ N ≤ 101000). A entrada termina com fim de arquivo.;Mostre o dígito mais frequente do número informado. Em caso de empate, mostre o maior dígito.;False;2 / 10;1288;634;49.22%
2139;Natal de Pedrinho;Iniciante;3;"Pedrinho é um garoto que adora festas em família, principalmente o Natal, quando ganha presente dos pais e dos avós. Esse ano, seu pai lhe prometeu um PS4, mas somente se Pedrinho conseguir resolver alguns desafios ao longo do ano, sendo um deles, escrever um programa que calcule quantos dias faltam para o Natal.

Entretanto, Pedrinho tem somente 9 anos e não tem noção alguma de programação, mas sabe que você, primo dele, mexe com ""coisas de computador"", e dessa forma, pediu para você escrever o programa para ele. Não somente isso, mas prometeu que deixaria você jogar todo final de semana e por quanto tempo quiser!";A entrada é composta por vários casos de teste. Cada linha contém o mês e o dia do ano de 2016 (ano bissexto). A entrada termina com fim de arquivo.;"Se for Natal, imprima ""E natal!""; se faltar somente um dia, imprima ""E vespera de natal!""; se já passou, imprima ""Ja passou!"". Caso contrário, imprima ""Faltam X dias para o natal!"", sendo X o número de dias que faltam para o Natal.";False;3 / 10;4455;2463;55.29%
2140;Duas Notas;Iniciante;1;"Gilberto é um famoso vendedor de esfirras na região. Porém, apesar de todos gostarem de suas esfirras, ele só sabe dar o troco com duas notas, ou seja, nem sempre é possível receber o troco certo. Para facilitar a vida de Gil, escreva um programa para ele que determine se é possível ou não devolver o troco exato utilizando duas notas.

As notas disponíveis são: 2, 5, 10, 20, 50 e 100.";A entrada deve conter o valor inteiro N da compra realizada pelo cliente e, em seguida, o valor inteiro M pago pelo cliente (N < M ≤ 104). A entrada termina com N = M = 0.;"Seu programa deverá imprimir ""possible"" se for possível devolver o troco exato ou ""impossible"" se não for possível.";False;1 / 10;5891;3346;56.80%
2141;P4 Simplificado;Ad-Hoc;7;"Você, fã da franquia de jogos eletrônicos ""A Verdadeira Reencarnação da Deusa"", foi contratado pela empresa desenvolvedora ATULS para ajudar na criação de uma versão simplificada do jogo Personalidade 4, um spin-off dessa franquia. Você será responsável pela implementação do sistema de batalha. A tabela a seguir contém as habilidades possíveis e suas respectivas características:



	
	
		Habilidade
		Tipo
		Poder
		Custo HP
		Custo MP
		Efeito
	
	
	
	
		MightySwing
		Físico
		270
		14%
		-
		-
	
	
		GiganticFist
		Físico
		560
		16%
		-
		-
	
	
		RainyDeath
		Físico
		350
		20%
		-
		-
	
	
		Agilao
		Mágico - Fogo
		200
		-
		8
		-
	
	
		Agidyne
		Mágico - Fogo
		320
		-
		12
		-
	
	
		Bufula
		Mágico - Gelo
		200
		-
		8
		-
	
	
		Bufudyne
		Mágico - Gelo
		320
		-
		12
		-
	
	
		Megidola
		Mágico
		360
		-
		32
		-
	
	
		Megidolaon
		Mágico
		420
		-
		60
		-
	
	
		BlackViper
		Mágico
		440
		-
		64
		-
	
	
		Tarukaja
		Suporte
		-
		-
		12
		Ataque Físico atual do atacante aumenta em 25% e fica ativo até que ele use um atk físico
	
	
		Rakukaja
		Suporte
		-
		-
		12
		Defesa atual do atacante aumenta em 25% e fica ativo até que ele sofra um atk qualquer
	
	
		Tarunda
		Suporte
		-
		-
		12
		Ataque Físico atual do defensor diminui em 25% e fica ativo até que ele use um atk físico
	
	
		Rakunda
		Suporte
		-
		-
		12
		Defesa atual do defensor diminui em 25% e fica ativo até que ele sofra um atk qualquer
	
	


OBS.: As habilidades do tipo Suporte não acumulam e sempre consomem MP, mesmo não tendo mais efeito. Por exemplo, se o jogador usa a habilidade Rakunda 5 vezes seguida, a DEF do defensor ainda será 25% menor e o consumo de MP terá sido 60. Para testar a funcionalidade desse sistema, você deverá considerar uma batalha 1 vs. 1. Cada combatente terá nível, HP (pontos de vida), MP (pontos de magia) e os atributos ATK (ataque físico), MAG (ataque mágico) e DEF (defesa geral). A fórmula de dano é a seguinte:



AT = Ataque do atacante atual. Se ataque físico, substitua por ATK, se ataque mágico, substitua por MAG.
DF = Defesa geral do defensor atual, isto é, o atributo DEF.
P = Poder do ataque.
DIFF = Diferença entre o nível do atacante atual e o nível do defensor atual. Este valor não será menor do que -10 e nem maior do que 10.";Haverá somente um caso de teste. A primeira linha deve conter o nome do combatente 1 e a segunda linha, seu respectivo nível (inteiro: 1 ≤ N ≤ 99), HP, MP (ponto flutuante: 1 ≤ HP, MP ≤ 999), ATK, MAG e DEF (ponto flutuante: 1 ≤ ATK, MAG, DEF ≤ 40). A terceira e a quarta linha deverá conter o mesmo que a primeira e a segunda, mas para o combatente 2. O primeiro a atacar é o combatente 1, ou seja, no primeiro turno, o combatente 1 é o atacante atual e o combatente 2 é o defensor atual. No segundo turno, o atacante é o combatente 2 e o defensor é o combatente 1. A mesma lógica se aplica nos turnos seguintes.;"Assim que o HP do combatente X chegar a 0 ou ficar abaixo de 0, imprima ""X is dead."" e na linha seguinte, o HP, MP, ATK, MAG e DEF do sobrevivente.";True;7 / 10;49;16;32.65%
2142;Pegue o Pombo!;Ad-Hoc;9;"A Esquadrilha Abutre está cansada de tentar caçar o pombo Doodle. Em vista disso, Dick Vigarista elaborou um plano de caça infalível, pelo menos em sua concepção.



Toda vez que eles acionam o turbo de velocidade em suas máquinas voadoras, eles alcançam o pombo viajando uma quantidade a mais do que já viajaram, e conseguem finalmente pegá-lo quando viajam mais metade de onde já estão.

Porém, se o pombo sair da área de ação da esquadrilha e, dessa forma, não for capturado, Dick Vigarista se irrita e resmunga, dizendo: ""Raios! Raios Duplos! Raios Triplos!"".";"A entrada tem vários casos de teste. Em cada, você deverá informar a área de ação da esquadrilha (25 ≤ A < 106), isto é, sempre um quadrado perfeito, e o momento em que o turbo é ativado. A entrada termina com fim de arquivo.

O voo do pombo e da esquadrilha são espirais e iniciam sempre a partir do elemento central, que é o número 1.";"Seu programa deve imprimir o percurso do pombo. O símbolo '*' indica o momento em que o pombo é alcançado e o símbolo '!', o momento em que ele é capturado. Caso ele saia da área de ação da esquadrilha, imprima: ""Raios! Raios Duplos! Raios Triplos!"". Não deve haver espaço em branco somente após o último caractere da última linha da matriz, que deve ser justificada.";True;9 / 10;205;59;28.78%
2143;A Volta do Radar;Iniciante;2;"Todo ano após a competição que ocorre na cidade de Taxilândia, os participantes e os coaches vão para o célebre restaurante Radar. Porém, os garçons (sempre muito gentis e educados) ficam sobrecarregados devido à quantidade de pessoas, e consequentemente, acabam demorando um pouco para atender a um pedido.

Os participantes ou coaches que sentam nas pontas são os privilegiados, pois são atendidos com somente um pedido, mas os demais precisam sempre pedir duas vezes, pois os garçons (apesar de gentis e educados) são desatentos e se esquecem facilmente dos pedidos. Além disso, há uma superstição entre os participantes e coaches de que se não houver um número par de pessoas que não sentam nas pontas, na próxima competição nenhuma equipe da universidade conseguirá vencer.

Portanto, sua tarefa é determinar a soma da quantidade de pedidos de cada um para saber se vale a pena ir ao Radar. Mas apesar do resultado, lembre-se: sempre vale a pena ir ao Radar!";A entrada é composta por T (1 ≤ T ≤ 100) indicando a quantidade de casos de teste e então, T inteiros N (3 ≤ N ≤ 104), indicando a quantidade de pessoas. A mesa é retangular e haverá pelo menos e no máximo uma pessoa em uma das pontas, isto é, se uma ponta estiver vazia, a outra deve ser ocupada, ou senão, as duas pontas estarão ocupadas, mas o número de pessoas que não estão nas pontas sempre será par. O final da entrada é indicado por T = 0.;Seu programa deverá imprimir a soma da quantidade de pedidos de cada pessoa. Não haverá linha em branco entre os casos de teste.;False;2 / 10;3551;2043;57.53%
2144;Bodybuilder;Ad-Hoc;2;"BemBem é um famoso fisiculturista da região. Ele está sempre buscando o desempenho perfeito em seus treinos na academia para competir com seus rivais. Seu amigo Frenco o auxilia da melhor maneira possível, ajudando-o a buscar o trapézio descendente e controlando-o para que ele não derrube todas as árvores do Parque Ibirapuera. Apesar disso, BemBem chamou você para o ajudar em uma tarefa específica: determinar a média de sua 1RM (uma repetição máxima). Para tal, você poderá usar a fórmula abaixo:



W = Peso a ser levantado.
R = Número de repetições.

Porém, BemBem possui menos força em um braço do que no outro, o que o faz levantar menos peso em um deles, motivo pelo qual ele lhe pediu ajuda, alegando que ""o maluco está doente"". Ajude-o e torne-se um codebuilder!";A entrada é composta pelos inteiros W1 (peso levantado pelo braço esquerdo: 1 ≤ W1 ≤ 60), W2 (peso levantado pelo braço direito: 1 ≤ W2 ≤ 100) e R (número de repetições: 1 ≤ R ≤ 12). A entrada termina com W1 = W2 = R = 0.;"Seu programa deverá imprimir um bordão correspondente à média M (ponto flutuante) da 1RM de BemBem, de acordo com a tabela abaixo:



No final, se a média de todos os casos for maior do que 40, imprima uma linha em branco e então, ""Aqui nois constroi fibra rapaz! Nao e agua com musculo!"".";True;2 / 10;2036;785;38.56%
2145;A Vida Amorosa dos Números;Matemática;8;"Um número natural ama outro número se a soma de seus divisores for um divisor do outro número. Por exemplo, 9 ama 12, pois a soma dos divisores de 9 é igual a 4, um divisor de 12. Porém, 12 não ama 9, pois 16 (soma dos divisores de 12) não é um divisor de 9. Nesse caso, 9 ama 12 e não é correspondido, o que o torna um número na 'friendzone'.

No entanto, há casos em que o amor será correspondido: quando a soma dos divisores de um número for igual ou divisor do outro número e vice-versa. Por outro lado, um amor quase correspondido é quando a soma dos divisores de um número for exatamente igual à soma dos divisores do outro número.";A entrada contém vários casos de teste. Cada caso de teste é composto por N e M (2 ≤ N, M ≤ 109), sendo N e M números diferentes. A entrada termina com N = M = 0.;"Seu programa deverá imprimir a relação entre os dois números, de acordo com as condições abaixo:

1 - Se o amor for correspondido, imprima ""Friends and lovers <3"";
2 - Se o amor for quase correspondido, imprima ""Almost lovers!"";
3 - Se o amor não for correspondido, imprima ""X friendzoned Y!"", em que a soma dos divisores de X é diferente da soma dos divisores de Y, e X é múltiplo da soma dos divisores de Y (Y ama X) mas Y não é múltiplo da soma dos divisores de X (X não ama Y);
4 - Se não houver relação, isto é, a soma dos divisores de X for diferente da soma dos divisores de Y, e X não for múltiplo da soma dos divisores de Y e Y não for múltiplo da soma dos divisores de X, imprima ""No connection."".

OBS.: Neste problema, a soma dos divisores não considera o próprio número, e nos casos em que o amor é correspondido e também quase correspondido, prevalece o amor correspondido.";False;8 / 10;417;84;20.14%
2146;Senha;Iniciante;1;"Sr. Amnésio tinha uma grande dificuldade em guardar senhas. Para lembrá-las, ele sempre usava números, e as escrevia em pedaços de papel, que também perdia com facilidade, fazendo com que ele precisasse modificar a senha cada vez que isto acontecia. Cansado, ele pensou em uma forma mais prática: colocava no papel um número próximo da senha, depois ele usava sempre uma mesma conta para lembrar a senha, baseada no número escrito no papel. Mas ele também esquecia a fórmula, por isto, pediu para você escrever um programa que, dado o número do papel, informe a senha correspondente.

Escreva um programa que, dado um número, informe a respectiva senha.";A entrada terá diversos casos de teste. A cada caso de teste, terá um número N, que representa o número escrito no papel (1001 ≤ N ≤ 9999). A entrada termina com o fim do arquivo.;Para cada caso de teste, imprima a senha correspondente. Em todos os casos, a fórmula será a mesma, igual aos exemplos abaixo.;False;1 / 10;8276;5243;63.35%
2147;Galopeira;Iniciante;2;"Certo dia, os irmãos Little Chitão e Xor Or Oh, exímios digitadores, fizeram um desafio, para ver quem era o melhor na digitação. Para isto, conseguiram um computador que não processa teclas pressionadas, ou seja, se for para digitar a mesma letra duas vezes seguidas, precisa pressionar a tecla duas vezes, visto que, pressionar a tecla por mais tempo, não adianta. Também mediram o tempo de uma tecla pressionada, que foi de, exatamente, um centésimo de segundo. O desafio seria quem digitasse a palavra “galopeira”, formada por mais letras e, mas ambos eram muito bons, e chegava num ponto que não era possível contar quantas letras haviam sido digitadas. Então, pediram a sua ajuda para escrever um programa que verifique a palavra digitada e veja quanto tempo foi gasto para a digitação.

Escreva um programa que, dada uma palavra digitada, informe quanto tempo foi gasto para ser digitada.";Um número inteiro C será informado, que será a quantidade de casos de teste. Cada caso tem uma palavra, de, no mínimo, 9 e, no máximo 10000 letras.;Para cada caso de teste, imprima um número T, que é o tempo gasto, em segundos, para digitar a palavra do respectivo caso de teste, com aproximação de duas casas decimais.;False;2 / 10;7368;4171;56.61%
2148;Banco de Dados;Matemática;6;"Todo domingo, um grupo de amigos se reunia em um banco da praça para conversar. Além disso, jogavam algo chamado “dadinho”, que em outras regiões, é chamado de “zezinho”. Cada jogador começava com um dado e um palpite, arremessava o mesmo sobre o banco, e se acertasse o resultado, pegaria mais um dado. A cada rodada, o processo se repetia, com o palpite do resultado da soma dos dados jogados sobre o banco. Quem acertasse, pegaria outro dado. O jogo termina quando um jogador acerta um palpite após ter 13 dados na mão. Considere que todos os dados usados no jogo são honestos e possuem seis faces, numeradas de 1 a 6. Mas a medida que aumentava a quantidade de dados, ficava mais difícil acertar o palpite. Desse modo, pediram a você que faça um programa o qual, dado um palpite de soma, e uma quantidade de dados, calcule a probabilidade de acertar tal palpite.



Escreva um programa que, - dado um número inteiro, representando o palpite de soma, e outro número inteiro, sendo a quantidade de dados a serem jogados -, calcule a probabilidade de acerto do palpite.";O primeiro valor a ser lido é um inteiro C, indicando o número de casos de teste. Cada caso de teste inicia com dois inteiros S e D (1 ≤ S ≤ 80, 1 ≤ D ≤ 13), indicando a soma do palpite e a quantidade de dados.;Para cada caso de teste, imprima uma linha, contendo um valor, de dupla precisão, com 15 casas decimais, informando a probabilidade de acertar o palpite da rodada correspondente.;True;6 / 10;208;119;57.21%
2149;Sequência do Tio Phill Bonati;Matemática;3;"Will Bonati mora na cidade de Belo Ar, juntamente com o a família de seu tio, Phill Bonati. Will costuma fazer algumas coisas que seu tio não gosta, como, por exemplo, ouvir música com volume alto. Certo dia, Phill propõe um desafio ao seu sobrinho. Ele passaria os primeiros números de uma sequência que ele criou. Se Will pudesse descobrir os próximos números desta sequência, seu tio teria que aturar as músicas dele, com volume alto, e ainda faria uma sopa para eles. Se não descobrisse, Will teria que parar de ouvir tais músicas, deixando o tio mais sossegado. Os primeiros números desta sequência estão logo abaixo. Will pediu a sua ajuda para escrever um programa que possa identificar os próximos números nesta sequência.

0     1     1     1     2     2     4     8     12

Escreva um programa que, dado um número inteiro, informe qual é o valor correspondente a esta posição na sequência proposta.";Haverá diversos casos de teste. Cada caso de teste inicia com um inteiro N (1 ≤ N ≤ 17), indicando a posição solicitada na sequência. A entrada termina com fim de arquivo.;Para cada caso de teste, imprima o valor correspondente a posição solicitada na sequência.;False;3 / 10;2348;990;42.16%
2150;Vogais Alienígenas;Strings;4;"Desde o Gerador de Improbabilidade Infinita, muitos nem questionam sobre a vida em outros planetas, e se aprofundam em questionamentos mais improváveis, como, por exemplo, será que seres de outros planetas usam os mesmos caracteres que a gente para escrever? E se isto for verdade, será que usam as mesmas vogais que a gente? Pensando nisto, muitos cientistas projetaram vários tipos de alfabetos alienígenas, usando as letras do nosso alfabeto, além dos dígitos, de 0 a 9, com as suas respectivas vogais. Baseados nisto, estes pedem a sua ajuda para identificar vogais em alfabetos alienígenas e fazer contagens a respeito.

Escreva um programa que, dado uma sequência de vogais, em um determinado alfabeto alienígena, contabilize, em um texto escrito com o mesmo alfabeto, quantas vogais o mesmo possui.";Haverá diversos casos de teste. Cada caso de teste é formado por duas linhas. A primeira linha informa uma palavra, formada por todas as vogais alienígenas de um determinado planeta. A segunda linha contém uma frase formada por letras do mesmo alfabeto. A entrada termina com fim de arquivo.;Para cada caso de teste, imprima a quantidade de vogais alienígenas correspondente.;False;4 / 10;1668;799;47.90%
2151;Soco do Rulk;Ad-Hoc;4;"Certo dia, um grupo de cientistas resolveu calcular o poder de destruição do soco do super-herói Rulk, dos Programadores. Constataram que o soco em si afetaria qualquer parede, desde as menores até as gigantes. Assim, conseguiram sintetizar este efeito da seguinte forma: Converteram as paredes em uma matriz MxN, no seu estado de destruição atual, definindo valores inteiros a cada coordenada da parede, sendo 0 para menos destruída, indo até para 100, mais destruída. Além disso, determinaram qual seria a coordenada exata do soco. Constataram que o valor da coordenada do soco aumentaria em 10 pontos em seu estado de destruição, ficando mais frágil; e as coordenadas adjacentes a este ponto aumentariam em 9 pontos; as coordenadas adjacentes a estes aumentariam em 8 pontos; e assim sucessivamente. E quando chegasse a 1 ponto, todo o restante da parede também aumentaria em um ponto, afetando toda a parede.";A primeira linha da entrada contém um inteiro C (1 ≤ C ≤ 100), indicando o número de casos de teste. Esta linha é seguida pelos casos de teste. Cada caso é descrito por quatro números inteiros M, N, X e Y (1 ≤ X ≤ M ≤ 100 e 1 ≤ Y ≤ N ≤ 100), representando a quantidade de linhas e colunas da parede, e as coordenadas onde o soco foi dado. Em seguida, seguem M linhas, com N números inteiros Z (1 ≤ Z ≤ 90), separados por um espaço, representando os valores originais de cada bloco da parede.;Para cada caso de teste, a saída deve aparecer a palavra Parede, seguida por um espaço, pelo número do caso e por dois pontos. A partir da linha seguinte deve mostrar a parede, formada por M linhas e N colunas, separadas por um espaço, descrevendo como ficou a parede após o soco.;False;4 / 10;693;344;49.64%
2152;Pepe, Já Tirei a Vela!;Iniciante;2;"Um dia, o grande herói Chapolout foi ajudar um cientista, que criou muitas invenções. Uma destas invenções é um sistema que abre a porta secreta do laboratório. O sistema consiste em retirar uma vela do candelabro do lado da porta, que a mesma se abre, e, ao colocar a vela de volta ao candelabro, a porta se fecha. Porém, Chapolout descobriu que a vela era só uma desculpa. Na verdade, o assistente do cientista, chamado Pepe, é que abria a porta do laboratório, por dentro. Um tempo depois, o sistema foi modificado, para funcionar igualmente ao projeto inicial. Colocaram um sensor de pressão embaixo da vela do candelabro, de modo que a retirada da vela ativa o sistema. Este sistema emite um relatório de log por cada vez que a porta abriu ou fechou, mas o log está bem confuso. A cada registro, três números inteiros são cadastrados, sendo a hora e o minuto que o evento ocorreu e um valor que representa se a porta abriu ou fechou naquele momento. Pepe pede a sua ajuda para converter os dados do log em dados mais legíveis para ele.

Escreva um programa que, dado um registro de log, este seja convertido em textos mais legíveis.";A primeira linha contém a quantidade de casos de teste. Cada linha de um caso de teste possui três inteiros H, M e O, sendo a hora, o minuto da ocorrência, e a própria ocorrência (zero se a porta fechou ou um se a porta abriu).;Para cada caso de teste, imprima o horário da ocorrência, no devido formato, seguido de um espaço, um hífen e um espaço, e da frase “A porta abriu!” ou “A porta fechou!”, conforme a ocorrência registrada.;False;2 / 10;6181;3807;61.59%
2153;Sanduicheiche;Strings;4;"A nutricionista Root Escrevemos é uma excelente profissional de sua área. Certo dia, ela foi entrevistada ao vivo para um jornal local. No entanto, ela ficou um pouco nervosa na hora, e numa situação destas, a fala dela se distorce um pouco, repetindo o final de cada palavra após dizer a mesma. Para se prevenir de um desconforto futuro, ela pede sua ajuda para escrever um programa que omita a parte repetida, de modo que as palavras sejam emitidas como deveriam ser.

Escreva um programa que, dada uma palavra errada, a mesma seja corrigida.";Haverá diversos casos de teste. Cada caso de teste é formado por uma palavra, de, no máximo, 30 caracteres, dita da forma errada. A entrada termina com fim de arquivo.;Para cada caso de teste, imprima a palavra devidamente corrigida. Observe os exemplos para verificar o padrão, de modo a corrigir devidamente todos os casos.;False;4 / 10;820;372;45.37%
2154;Derivada de Polinômios;Matemática;3;"A fórmula de cálculo de uma derivada de uma função na forma xn é definida por:

f(x) = xn    →     f(x)’ = n.xn-1

Veja um exemplo:

f(x) = 4x3 + 3x2    →     f(x)’ = 12x2 + 6x

Escreva um programa que, dado um polinômio simples, calcule a sua derivada.";Haverá diversos casos de teste. Cada caso de teste é formado por um número inteiro T, que representa a quantidade de termos que o polinômio possui. Na linha seguinte, há o polinômio propriamente dito, formado por T (1 ≤ T ≤ 100) termos, todos separados por um espaço, um sinal de soma e outro espaço, e cada um contendo um inteiro C (2 ≤ C ≤ 100), a letra x e um inteiro E (2 ≤ E ≤ 100), sendo C o coeficiente e E o expoente do termo. A entrada termina com fim de arquivo.;Para cada caso de teste, imprima o polinômio com a derivada aplicada.;False;3 / 10;455;294;64.62%
2155;Os Icosaedros do Lagarto;Grafos;9;"Reza a lenda que os Icosaedros do Lagarto são cristalinos e podem invocar o Lagarto Shen Long Int, que tem a habilidade de conceder desejos para quem conseguir juntar os sete icosaedros. Os icosaedros vêm em conjuntos de sete com cada mostrando o número de estrelas. Estes são difíceis de encontrar porque eles se dispersam ao redor do planeta, e se desativam por um ano a cada desejo, se transformando em pedras. Para ter a oportunidade de invocar o Lagarto, um tem que viajar ao redor do globo para encontrá-las. Certo dia, Kogu ganha o icosaedro de quatro estrelas de seu avô, Hogan. Ao saber da lenda, Kogu resolve ir atrás dos outros icosaedros, para que possa perder o medo de injeção. Como a tecnologia progrediu, isso ficou mais fácil, e bem simples com a invenção de sua amiga Mulba, o Radar do Lagarto. Só que, para ganharem tempo, precisam saber qual ordem de busca dos icosaedros eles devem seguir, de modo que percorram a menor distância possível, com a sua nuvem voadora.




Escreva um programa que, dadas as coordenadas dos icosaedros, informe o caminho de menor distância, saindo de sua casa, capture todos os icosaedros e volte para casa, além de informar a distância de tal caminho.";A primeira linha terá um valor inteiro C indicando o número de casos de teste. Para cada caso de teste, haverá uma linha com dois inteiros, X e Y, indicando as coordenadas da casa de Kogu, de posse do icosaedro de quatro estrelas. Depois haverá mais seis linhas, cada uma com três inteiros, N, XN e YN, representando o icosaedro de N estrelas, e as coordenadas onde tal icosaedro se encontra.;Para cada caso de teste imprima a palavra Caso, seguida por um espaço, o número do caso e dois pontos. Na linha seguinte, imprima o percurso feito, saindo de casa e voltando para lá, de modo que tenha obtido o menor caminho, separando cada local visitado por um hífen e um sinal de maior, dando uma ideia de seta, seguido de dois pontos, um espaço, e a distância do percurso total, com cinco casas decimais. Caso o menor caminho tenha mais de uma possibilidade, imprima o caminho lexicograficamente menor. Ou seja, se tem um percurso saindo de casa e indo para o icosaedro de uma estrela, e outro indo para o de duas estrelas, opte por ir na de uma estrela primeiro, desde que ambos os caminhos tenham a mesma distância.;True;9 / 10;143;41;28.67%
2156;As Aventuras de Pak-man;Ad-Hoc;5;"Uma vez, um jogo novo precisava ser desenvolvido. Nele, os jogadores controlariam Pak-man, com o objetivo de comer todas as pastilhas que se encontram espalhadas num labirinto, enquanto evitam quatro fantasmas que escapam de uma prisão. Em cada canto da área de jogo, estão pastilhas maiores que permitem Pak-man caçar os fantasmas, em vez de ser caçado, durante um curto período de tempo. Num primeiro estágio do jogo, sem os fantasmas e sem as pastilhas maiores, você foi designado para desenvolver um programa que, dado um determinado cenário, e uma série de movimentos, informe quantas pastilhas foram comidas.

Escreva um programa que, dado um cenário e instruções de movimentos, informe quantas pastilhas foram comidas no jogo.";Haverá diversos casos de teste. Cada caso de teste começa com três valores inteiros, L (3 ≤ L ≤ 100), C (3 ≤ C ≤ 100) e I (3 ≤ I ≤ 10000), indicando a quantidade de linhas e colunas do cenário e a quantidade de instruções. Em seguida, terão L linhas e C colunas, informando o cenário, o qual só terá # onde representa parede, * onde representa uma pastilha, < onde representa o Pak-man e espaço, locais que o Pak-man pode movimentar. A linha seguinte tem I caracteres, com as instruções de movimento do Pak-man, os quais L, R, U e D indica a direção a qual o Pak-man está direcionado (L-Esquerda, R-Direita, U-Cima, D-Baixo) e W significa que o Pak-man irá movimentar uma posição na direção a qual está. Se ele for caminhar e o local pretendido for uma parede, ele não sai do lugar. Se for uma pastilha, ele come a pastilha e onde era pastilha se torna um espaço livre e ele fica no lugar da pastilha. Se for um espaço livre ele vai ao local pretendido. O final da entrada será com três zeros. Detalhe: Pak-man sempre começará um cenário novo virado para a direita.;"Para cada caso de teste, imprima um valor inteiro com a quantidade de pastilhas comidas.

##########

#<*******#

##########

UWWRWW

Neste exemplo, o Pak-man vira para cima, tenta andar duas casas, mas como existe parede, fica no mesmo lugar. Depois vira para a direita e anda duas casas, comendo, com isto, duas pastilhas.";False;5 / 10;331;159;48.04%
2157;Sequência Espelho;Strings;3;"Imprimir números em sequência é uma tarefa relativamente simples. Mas, e quando se trata de uma sequência espelho? Trata-se de uma sequência que possui um número de início e um número de fim, e todos os números entre estes, inclusive estes, são dispostos em uma sequência crescente, sem espaços e, em seguida, esta sequência é projetada de forma invertida, como um reflexo no espelho. Por exemplo, se a sequência for de 7 a 12, o resultado ficaria 789101112211101987

Escreva um programa que, dados dois números inteiros, imprima a respectiva sequência espelho.";A entrada possui um valor inteiro C indicando a quantidade de casos de teste. Em seguida, cada caso apresenta dois valores inteiros, B e E (1 ≤ B ≤ E ≤ 12221), indicando o início e o fim da sequência.;Para cada caso de teste, imprima a sequência espelho correspondente.;False;3 / 10;4685;2202;47.00%
2158;Ajudando o Tio Cláudio;Geometria Computacional;5;"O ano é 1986, em uma publicação científica foi divulgada a descoberta de uma molécula 3D de carbono, onde os átomos ocupam os vértices de um poliedro convexo com faces pentagonais e hexagonais, como em uma bola de futebol.




Em homenagem ao professor Cláudio Carvalho, a molécula foi denominada Claudeno. Cláudio gosta muito de verificar a quantidade de átomos e de ligações em uma determinada molécula. Hoje com a idade avançada do professor ele não consegue mais fazer os calculos ""de cabeça"", e solicita que você, o estagiário cuidador de velhinhos, crie um programa que o possa ajudar.";A entrada é composta por diversos casos de teste, cada entrada é composta por dois inteiros, FP e FH (1 < FP, FH < 1015), que correspondem a quantidade de faces pentagonais e hexagonais.;Para molécula imprima a quantidade de átomos e suas ligações conforme mostra o exemplo de saída.;True;5 / 10;1102;379;34.39%
2159;Número Aproximado de Primos;Iniciante;2;"Schoenfeld e Rosser publicaram em 1962 um artigo descrevendo um valor mínimo e máximo para a quantidade de números primos até n, para n ≥ 17. Esta quantidade é representada pela função (n) e a fórmula é mostrada abaixo.

					

					Sua tarefa é, dado um natural n, calcular o mínimo e máximo do intervalo para o número aproximado de primos até n.";A entrada é um número natural n (17 ≤ n ≤ 109).;A saída são dois valores P e M com 1 casa decimal cada, tal que P < (n) < M, de acordo com a fórmula dada acima. Os valores devem ser separados por um espaço em branco.;True;2 / 10;3594;2461;68.48%
2160;Nome no Formulário;Iniciante;3;"Preencher formulários é uma tarefa simples. Mas é preciso conferir se o espaço reservado para os dados é suficiente.

Sua tarefa é, dada uma linha de texto, indicar se ele cabe ou não cabe em um formulário com 80 caracteres.";A entrada é uma linha de texto L (1 ≤ |L| ≤ 500).;"A saída é dada em uma única linha. Ela deve ser ""YES"" (sem as aspas) se a linha de texto L tem até 80 caracteres. Se L tem mais de 80 caracteres, a saída deve ser ""NO"".";False;3 / 10;9398;4700;50.01%
2161;Raiz Quadrada de 10;Iniciante;1;"Uma das formas de calcular a raiz quadrada de um número natural é pelo método das frações periódicas continuadas. Esse método usa como denominador uma repetição de frações. Essa repetição pode ser feita uma quantidade específica de vezes.

					Por exemplo, ao repetir 2 vezes a fração continuada para calcular a raiz quadrada de 10, temos a fórmula abaixo.

					

					Sua tarefa é, dado o número N de repetições, calcular o valor aproximado da raiz quadrada de 10.";A entrada é um número natural N (0 ≤ N ≤ 100), que indica o número de repetições do denominador na fração continuada.;A saída é o valor aproximado da raiz quadrada com 10 casas decimais.;True;1 / 10;3582;2584;72.14%
2162;Picos e Vales;Iniciante;4;"Ao observar a paisagem da Nlogônia, o professor MC percebeu que a cada intervalo de 100 metros existe um pico. E que exatamente na metade de dois picos há um vale. Logo, a cada 50 metros há um vale ou um pico e, ao longo da paisagem, não há um pico seguido por outro pico, nem um vale seguido por outro vale.

O professor MC ficou curioso com esse padrão e quer saber se, ao medir outras paisagens, isso se repete. Sua tarefa é, dada uma paisagem, indicar se ela possui esse padrão ou não.";A entrada é dada em duas linhas. A primeira tem o número N de medidas da paisagem (1 < N ≤ 100). A segunda linha tem N inteiros: a altura Hi de cada medida (-10000 ≤ Hi ≤ 10000, para todo Hi, tal que 1 ≤ i ≤ N). Uma medida é considerada um pico se é maior que a medida anterior. Uma medida é considerada um vale se é menor que a medida anterior.;A saída é dada em uma única linha. Caso a paisagem tenha o mesmo padrão da Nlogônia, deve ser mostrado o número 1. Caso contrário, mostra-se o número 0.;False;4 / 10;8892;3230;36.32%
2163;O Despertar da Força;Iniciante;4;"Há muito tempo atrás, em uma galáxia muito, muito distante...

Após o declínio do Império, sucateiros estão espalhados por todo o universo procurando por um sabre de luz perdido. Todos sabem que um sabre de luz emite um padrão de ondas específico: 42 cercado por 7 em toda a volta. Você tem um sensor de ondas que varre um terreno com N x M células. Veja o exemplo abaixo para um terreno 4 x 7 com um sabre de luz nele (na posição (2, 4)).



Você deve escrever um programa que, dado um terreno N x M, procura pelo padrão do sabre de luz nele. Nenhuma varredura tem mais do que um padrão de sabre de luz.";A primeira linha da entrada tem dois números positivos N e M, representando, respectivamente, o número de linhas e de colunas varridos no terreno (3 ≤ N, M ≤ 1000). Cada uma das próximas N linhas tem M inteiros, que descrevem os valores lidos em cada célula do terreno (-100 ≤ Tij ≤ 100, para 1 ≤ i ≤ N e 1 ≤ j ≤ M).;A saída é uma única linha com 2 inteiros X e Y separados por um espaço. Eles representam a coordenada (X,Y) do sabre de luz, caso encontrado. Se o terreno não tem um padrão de sabre de luz, X e Y são ambos zero.;True;4 / 10;7827;2976;38.02%
2164;Fibonacci Rápido;Iniciante;2;"A fórmula de Binet é uma forma de calcular números de Fibonacci.



Sua tarefa é, dado um natural n, calcular o valor de Fibonacci(n) usando a fórmula acima.";A entrada é um número natural n (0 < n ≤ 50).;A saída é o valor de Fibonacci(n) com 1 casa decimal utilizando a fórmula de Binet dada.;True;2 / 10;6722;3908;58.14%
2165;Tuitando;Iniciante;2;O microblog Twitter é conhecido por limitar as postagens em 140 caracteres. Conferir se um texto vai caber em um tuíte é sua tarefa.;A entrada é uma linha de texto T (1 ≤ |T| ≤ 500).;"A saída é dada em uma única linha. Ela deve ser ""TWEET"" (sem as aspas) se a linha de texto T tem até 140 caracteres. Se T tem mais de 140 caracteres, a saída deve ser ""MUTE"".";False;2 / 10;11009;5793;52.62%
2166;Raiz Quadrada de 2;Iniciante;1;"Uma das formas de calcular a raiz quadrada de um número natural é pelo método das frações periódicas continuadas. Esse método usa como denominador uma repetição de frações. Essa repetição pode ser feita uma quantidade específica de vezes.

					Por exemplo, ao repetir 2 vezes a fração continuada para calcular a raiz quadrada de 2, temos a fórmula abaixo.

					

					Sua tarefa é, dado o número N de repetições, calcular o valor aproximado da raiz quadrada de 2.";A entrada é um número natural N (0 ≤ N ≤ 100), que indica o número de repetições do denominador na fração continuada.;A saída é o valor aproximado da raiz quadrada com 10 casas decimais.;True;1 / 10;3581;2598;72.55%
2167;Falha do Motor;Iniciante;1;"Ao observar a curva de velocidade de um motor, o engenheiro Zé percebeu que sempre ocorria uma queda quando as medidas eram feitas em intervalos de 10 ms. Mas esta queda acontecia em medidas diferentes a cada novo teste do motor.

Zé ficou curioso com essa falta de padrão e quer saber, para cada teste do motor, qual a primeira medida em que ocorre uma queda de velocidade.";A entrada é um teste do motor e é dada em duas linhas. A primeira tem o número N de medidas de velocidade do motor (1 < N ≤ 100). A segunda linha tem N inteiros: o número de RPM (rotações por minuto) Ri de cada medida (0 ≤ Ri ≤ 10000, para todo Ri, tal que 1 ≤ i ≤ N). Uma medida é considerada uma queda se é menor que a medida anterior.;A saída é o índice da medida em que houve a primeira queda de velocidade no teste. Caso não aconteça uma queda de velocidade a saída deve ser o número zero.;False;1 / 10;6545;3909;59.72%
2168;Crepúsculo em Portland;Iniciante;1;"No crepúsculo, a cidade de Portland fica cheia de vampiros e lobisomens. Entretanto, nenhum deles quer ser visto enquanto passeiam pelo centro.

Vão ser instaladas câmeras de vigilância em cada esquina do centro de Portland. A cada mês, um mapa atualizado com as câmeras já em funcionamento é disponibilizado no site da prefeitura.

Uma quadra é considerada segura se existem câmeras em, pelo menos, duas de suas quatro esquinas. No centro de Portland todas as quadras são quadrados de mesmo tamanho.

Sua tarefa é, dado o mapa das câmeras em funcionamento nas esquinas, indicar o status de todas as quadras do centro.";A primeira linha da entrada tem um inteiro positivo N (1 ≤ N ≤ 100). Nas próximas N+1 linhas, existem N+1 números, que indicam, para cada esquina, a presença ou ausência de uma câmera de vigilância em funcionamento. O número 1 indica que existe uma câmera funcionando na esquina, enquanto o número zero indica que não há câmera funcionando.;"A saída é dada em N linhas. Cada linha tem N caracteres, indicando se a quadra correspondente é segura ou insegura. Se uma quadra é segura, mostre o caractere S; se não é segura, mostre o caractere U.";False;1 / 10;2618;1920;73.34%
2169;Ajude o Leonardo!;Paradigmas;8;"""Leonardo Silva Kennedy era apenas um policial novato quando presenciou o tenebroso evento que aconteceu em 1998, na cidade de Raccoon City. Muito tempo se passou e Leonardo finalmente conseguiu deixar para trás as imagens daquele dia. Seis anos depois, ele é um agente do serviço secreto norte-americano, responsável pela proteção da família presidencial.

A filha do presidente é sequestrada na saída de sua universidade por uma organização desconhecida. A única pista é que ela teria sido vista em uma remota ilha do continente europeu. Agora, cabe a Leonardo resgatá-la. Mal sabia ele que isso significava uma nova imersão em um pesadelo que ele acreditava ter acabado.""



Em um determinado momento, Leonardo descobre um mapa de um galpão onde ele deverá entrar para buscar uma relíquia. Através do mapa ele pode ver quantos e que tipo de monstros existem no local. Ele dispõe de N armas e um valor Y de munição. Para a sorte dele, ali próximo existe um mercador de armas. Então Leonardo solicita a sua ajuda(o mercador) para que diga se ele conseguirá, com a quantidade de balas e as armas que ele dispõe, matar os monstros ou se será morto.



Seguem as armas que Leonardo dispõe no momento e a potência de cada uma:



E os monstros que pode haver no galpão:



Obs: Ao escolher uma arma, Leonardo utiliza todas as balas que ela possui.";A entrada é composta por diversos casos de teste, cada caso inicia com um valor QA, (1 <= QA <= 7), indicando a quantidade de armas. Em seguida são lidos QA valores e suas respectivas quantidades de munição. É lido então um valor QM (1 <= QM <= 10), indicando a quantidade de monstros, e seguem QM linhas indicando o monstro e a quantidade de cada um. E por ultimo, é recebido um valor QB (1 < QB < 104), indicando a quantidade máxima de balas que ele poderá utilizar, pois dessa forma ele não sairá sem balas do galpão... se sair.;Para cada caso de teste imprima se Leon conseguirá ou não completar a missão. Mostre conforme o exemplo de saída.;True;8 / 10;364;82;22.53%
2170;Juros do Projeto;Matemática;6;Em um projeto de investimento, cujo o valor inicial do capital é de X,renderá, após um período um valor Y. Deseja-se saber qual a Taxa Interna de Retorno do investimento, pois dessa forma poderá ser verificado o percentual dos juros.;Existem vários projetos a serem analisados, e para cada projeto é dado o aporte de capital inicial (1 < X < 1020), e o seu retorno (X < Y < 1020).;Para cada projeto mostre o valor dos juros para cada aplicação. Mostre conforme o exemplo de saída.;False;6 / 10;2873;835;29.06%
2171;Dividindo com Fink;Ad-Hoc;2;"A raposa Fink, muito esperta, precisa dividir meio a meio algumas comidas entre ele e Pica-Pau, mas ele está com muita fome e pensou em algo muito sagaz para sair ganhando nessa, a divisão vai ser da seguinte forma:

Primeiro ele coloca tudo sobre a mesa e começa a dividir: Um pra você. Um pra mim. Dois pra você. Um, dois pra mim. Três pra você. Um, dois, três pra mim... Dessa forma, se a quantidade inicial de comida fosse 12, ele terminaria com 10 e Pica-Pau com 2. Obs: Caso Fink não consiga terminar a última divisão, ele pode roubar do Pica-Pau.";A entrada consistirá de uma série de linhas, cada uma contendo o número de comidas N (1 ≤ N ≤ 100000). O fim da entrada é indicado pelo número zero (0).;Para cada linha de entrada, você deverá imprimir quanta comida ficou com Fink e Pica-Pau ao final da divisão, separadas por um espaço.;True;2 / 10;231;163;70.56%
2172;Evento;Iniciante;1;"Prog e Cackto começaram recentemente a jogar um jogo de RPG chamado Fortaleza. Neste, para o jogador evoluir de nível o mesmo precisa derrotar monstros, nos quais dá um valor de experiência (XP) para o jogador.

A produtora do jogo, Jogos Extremos, anunciou que na próxima semana irá realizar o primeiro evento XP no qual aumentará a experiência dos monstros em X vezes. Como Prog e Cackto estão em um nível muito alto no qual os monstros tem um valor muito alto de pontos de experiência, eles estão tendo dificuldades de calcular a quantidade de pontos de experiência que os monstros terão durante o evento. Você pode ajudá-los?";Haverá diversos casos de teste. Cada caso de teste contém dois valores X (0 < X ≤ 3) indicando o valor de aumento da EXP dos monstros e M (10 ≤ M ≤ 232-1) indicando o valor de EXP do monstro. A entrada termina com os valores X == 0 e M == 0, nos quais não devem ser processados.;Para cada caso, seu programa deverá mostrar um valor E, referente ao novo EXP do monstro.;False;1 / 10;4472;3332;74.51%
2173;Caixa Dois;Grafos;5;"O prefeito de Nlogônia está sendo acusado de usar o asfaltamento como caixa dois. Os investigadores suspeitam que ele fez um orçamento maior do que o usado nas obras.

Em um pronunciamento oficial, o prefeito disse: “Eu asfaltei o menor número de ruas que permitissem aos cidadãos passearem sem precisarem passar por uma rua de barro”.

O Folha de Nlogônia conseguiu alguns documentos sobre as ruas que poderiam ser pavimentadas e quanto isso custaria. Aqui é onde você entra, o jornal te contratou e te forneceu os documentos que eles possuem. Então você pode calcular o maior valor que o político pode ter ganho nesse esquema. Lembre-se você deve considerar que o discurso é verdadeiro, caso contrário você pode ser processado.";"A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros N (1 ≤N ≤104) e M(1 ≤M ≤105), o número de esquinas e de ruas respectivamente. Cada uma das próximas M linhas possui três inteiros X (1 ≤X ≤ N), Y(1 ≤ Y ≤ N) e C(1 ≤ C ≤ 103), indicando que para asfaltar a rua que liga a esquina X com a esquina Y o custo é C.

Sempre é possível escolher as ruas de maneira que o discurso do prefeito seja verdadeiro.

Depois do último caso de teste, tem uma linha com dois zeros.";Para cada caso de teste deve ser impressa uma única linha com um inteiro que representa a maior quantia possível do prefeito roubar e não mentir em seu discurso.;False;5 / 10;560;249;44.46%
2174;Coleção de Pomekon;Strings;3;"Desde que foi lançado oficialmente o Pomekon no Brasil, Dabriel está tentando realizar seu maior sonho: Ser um Mestre Pomekon. Sua meta é conquistar os 151 Pomekons disponíveis. Ele já conseguiu capturar muitos monstrinhos, porém em sua cidade aparecem muitos Pomekons repetidos, fazendo com que ele capture diversas vezes o mesmo Pomekon.

Vendo que sua mochila está bem cheia, Dabriel pediu para que você fizesse um programa de computador que informasse a ele quantos Pomekons faltam para completar a coleção.";"A primeira linha do caso de teste consiste de um inteiro N (1 ≤ N ≤ 10³), representando a quantidade de Pomekons que Dabriel já capturou.
As próximas N linhas consistem de uma string S (1 ≤ |S| ≤ 10³), representando o nome de cada Pomekons. O nome de cada Pomekons consiste apenas de letras maiúsculas e minúsculas.";"Você deverá imprimir: ""Falta(m) X pomekon(s)."", onde X representa a quantidade Pomekons não capturados.";False;3 / 10;5720;2464;43.08%
2175;Qual o Mais Rápido?;Ad-Hoc;2;Otavio, Bruno e Ian são amigos de infância, apaixonados por desafios e esportes aquáticos. Em época de olimpíadas eles desafiam uns aos outros, simulando algumas competições, como a natação. O problema é que na natação, por exemplo, eles treinam bastante juntos e algumas vezes a diferença de tempo entre eles é muito curta, devido a isso, na maioria dos casos eles ficam horas e horas discutindo quem venceu. Agora eles resolveram investir no desenvolvimento de um equipamento eletrônico a ser utilizado especificamente na natação, que identifica o tempo que cada um nadou e exibe quem foi o mais rápido. Você faz parte da equipe que desenvolverá o equipamento e sua tarefa no projeto é criar um programa para receber o tempo dos 3 amigos e informar quem foi o vencedor.;Cada caso de teste consiste em uma única linha contendo três números, separados por um espaço em branco, O (0 ≤ O ≤ 100), B (0 ≤ B ≤ 100) e I (0 ≤ I ≤ 100), representando respectivamente os tempos em segundos de Otavio, Bruno e Ian. Os tempos terão no máximo 3 casas decimais.;Para cada caso de teste, seu programa deverá imprimir uma única linha, contendo o nome do competidor vencedor, ou seja, o mais rápido. Caso haja empate e não for possível determinar um único vencedor, deverá imprimir a palavra “Empate”, sem aspas.;False;2 / 10;2366;1371;57.95%
2176;Paridade;Iniciante;1;"A popularização das redes WiFi aumentou a taxa de perda de informações sendo transferidas, uma vez que diversos fatores do meio ambiente podem facilmente comprometer os dados durante o tráfego. A URI, Unidade de Recuperação de Informações, tem como principal objetivo identificar e corrigir erros em mensagens enviadas via redes WiFi.

A técnica utilizada pela URI para identificação de erros é o teste de paridade, o qual pode ser descrito da seguinte forma: Seja S uma mensagem que será enviada de um dispositivo para outro. Antes de S ser enviada, um bit extra B é adicionado no final da representação binária de S. Se a mensagem S tiver um número par de bits de valor 1, o bit extra B terá valor 0. Caso contrário, se S tiver um número ímpar de bits de valor 1, B terá valor 1. Desta forma, após a inserção do bit B, a mensagem S terá um número par de bits de valor 1.

Quando o destinatário recebe a mensagem S ele faz a contagem de bits de valor 1. Se a quantidade for par, significa que a mensagem chegou com sucesso. Caso contrário, significa que a mensagem sofreu uma alteração e não está correta.

Sua tarefa é escrever um algoritmo que faça a inserção do bit B na mensagem S, de forma que após a inserção a mensagem S tenha um número par de bits de valor 1.";Cada caso de teste consiste em uma linha contendo a mensagem S, a qual consiste em no mínimo 1 e no máximo 100 bits.;Imprima uma linha contendo a mensagem S adicionada do bit extra B.;False;1 / 10;5278;3385;64.13%
2177;Rio 2016;Matemática;9;"Maria adora esportes e está muito animada com o ínicio das Olímpiadas 2016. No auge de sua animação Maria acabou comprando vários ingressos para os jogos e competições, mas infelizmente devido à distância da sua casa para os locais em que os jogo irão acontecer, que pode ser muito grande, ela provavelmente não conseguirá chegar em todas partidas a tempo.
					Maria sabe que você adora desafios de programação tanto quanto ela adora esportes, então ela te pediu para escrever um programa que dados os locais (posição (x, y) no plano) em que as partidas vão ocorrer e quanto tempo resta até cada partida começar indique quais jogos ela conseguirá chegar a tempo, ou seja antes do jogo começar, se ela sair agora do ponto em que ela está e for diretamente para o local do jogo.

Maria se encontra numa certa posição (x, y) e se move com velocidade 1 metro por minuto (apesar da animação Maria anda lentamente para não perder nenhum pokestop no caminho), a distância entre os pontos, também em metros, é definida pela Distância Euclidiana, e o tempo restante para ínicio das partidas se encontra em minutos.";"A primeira linha da entrada consiste da posição de Maria dada por x e y (0 ≤ x, y ≤ 1000) e de um número n (1 ≤ n ≤ 10⁶) que indica o número de ingressos que Maria comprou.

As próximas n linhas são formadas por 3 números, xi, yi, ti, respectivamente a posição x do local do jogo i, a posição y do local do jogo i, e o tempo restante para o jogo i iniciar (0 ≤ xi, yi ≤ 1000 e 1 ≤ ti ≤ 1000000).";"A saída deve ser composta de uma única linha contendo os identificadores (índices) ordenados do menor para o maior de quais jogos Maria conseguirá assistir. Se Maria não conseguir assistir nenhum jogo imprima ""-1"" (sem as aspas)";False;9 / 10;1044;282;27.01%
2178;Lagoa Azul;Ad-Hoc;7;"A Lagoa Azul é uma lagoa redonda, onde várias aves vivem tranquilamente (ou nem tanto). Bino, um garoto malino, quer capturar todas as aves que vivem na Lagoa Azul. Existem P locais na lagoa onde alguma ave pode ficar, como ilustrado na figura abaixo para P = 8.



Bino sabe que as aves se cansam, e não querem sair da lagoa em nenhum momento. Cada ave pode realizar um determinado número de voos, após isso ficara cansada demais para voar novamente. Bino vai iniciar na posição 0, e seguir sempre na direção horária, até conseguir capturar todas as aves.

Cada ave tem uma lista ordenada de locais para onde ela prefere fugir caso Bino chegue ao local onde ela está. Por exemplo, para o primeiro caso de teste, existe apenas uma ave que começa no local 1, quando Bino chega em 1, ela foge para 2, quando Bino chega em 2, ela foge para 3, e quando Bino chega em 3, ela já está cansada e é capturada.

Sua tarefa é descobrir qual a quantidade mínima de voltas completas na lagoa que Bino deve realizar para capturar todas as aves. Em uma volta completa, Bino visita todos os locais, e retorna para a posição 0 (revisitando a posição 0).

É garantido que nenhuma ave comece na posição 0, e também que nenhuma ave tente fugir para o mesmo local onde ela está.";A primeira linha contém dois inteiros A (1 < A ≤ 103) e P (1 < P ≤ 109), representando respectivamente o número de aves e o número de locais. Em seguida serão apresentadas A linhas. Cada linha iniciará com um inteiro Ni (1 ≤ Ni ≤ 103), representando a quantidade de locais que a ave i vai tentar fugir, em seguida, serão apresentados Ni inteiros, representando a lista de locais par onde a ave vai fugir.;Imprima uma única linha contendo a quantidade mínima de voltas completas na lagoa que Bino deve realizar para capturar todas as aves.;True;7 / 10;741;228;30.77%
2179;Batuke;Ad-Hoc;3;"Batuke é um cachorro com comportamento repetitivo que tem uma rotina particular quando sai para caminhar na sua vizinhança. A vizinhança também é de certa forma particular: uma matriz N x N que batuke percorre rotineiramente em espiral. Batuke inicia percorrendo: 1 célula à direita, uma abaixo, seguida por duas à esquerda, duas acima, então 3 à direita, 3 para baixo, então 4, e assim por diante.
					Lucas (o dono de Batuke), leva Batuke de carro para a célula inicial e o cão sempre segue sua rotina de corrida pelas células de sua vizinhança.
					Por exemplo, se a vizinhança tem tamanho N = 4, as células são enumeradas como segue:

					
                    
						
							 
							 
							
							e o percurso feito por Batuke, iniciando na célula 1,1 (célula superior esquerda é 0,0) é:
							6,7,11,10,9,5,1,2,3,4,8,12,16,15,14,13
							
							Neste caso, a rotina de Batuke o faz caminhar por 16 células no total.
							
						
                    
					
					Mas Batuke não compreende nada sobre fronteiras e ele sempre faz sua rotina (mesmo se ele tem que caminhar por diversas células a mais), para atravessar todas as células da vizinhança. Se a célula inicial for 2,2 por exemplo, a travessia em espiral (apenas as células da vizinhança são mostradas) é: 11,12,16,15,14,10,6,7,8,13,9,5,1,2,3,4.
					Neste caso, Batuke caminha por 24 células no total. Lucas sabe que você está estudando Computação e ele pediu a você um programa para resolver este problema: dado a vizinhança de N linhas por N colunas e uma célula inicial, você deverá mostrar o percurso em espiral e o total células percorridas.";A entrada consiste em três números inteiros: N (2 < N ≤ 10 ), F e C. N é o número de linhas na vizinhança (células enumeradas em 1..NxN, por linhas, da esquerda para a direita). F e C indica linha e coluna aonde Batuke inicia o seu percurso.;A saída consiste em 2 linhas. A primeira linha contém uma lista contendo as células da vizinhança, ordenadas pelo percurso que Batuke e separadas por um espaço em branco. A segunda linha mostra o número total de células percorridas por Batuke.;True;3 / 10;400;190;47.50%
2180;Viagem à Marte na Velocidade de Primo;Matemática;2;"Um grupo de cientistas está fazendo novas experiências para criar uma nave que possibilite a viagem muito mais rápida até Marte do que é possível atualmente. Esta nave utilizará dois foguetes e um novo combustível recém criado, muito mais eficiente que os utilizados até hoje. Só que a velocidade que os novos foguetes podem proporcionar à nave está relacionada diretamente com o peso do combustível armazenado nestes foguetes (em kg) e, por incrível que pareça, uma relação deste peso com números primos. Por exemplo, se o peso total do combustível dos foguetes for 1010 kg, a velocidade atingida (em km/h) é a soma dos 10 números primos à partir de 1010 (incluindo ele se for primo): 1013 -> 1019 -> 1021 -> 1031 -> 1033 -> 1039 -> 1049 -> 1051 -> 1061 -> 1063, ou seja, 10380 km/h.

Os cientistas estão muito intrigados com esta relação matemática existente e querem que você construa um programa que calcule quanto tempo aproximado (em horas e em dias) uma nave levaria para ir da terra até marte com este novo combustível, dado um determinado peso de foguetes (claro, eles estão tentando criar os maiores foguetes possíveis) assumindo que a distância da terra até marte no dia do lançamento, será 60 milhões de kms.";A entrada contém um único valor inteiro Peso (1000 < Peso ≤ 60000) indicando o peso máximo de combustível (em kg) que os foguetes podem armazenar.;"A saída esperada consiste em duas linhas. A primeira linha contém a velocidade que pode ser atingida pela nave, seguida pelo texto ""km/h"". A segunda linha contém o tempo estimado de viagem até Marte em horas e em dias (truncados), com mensagem de texto correspondente, conforme o exemplo abaixo.";False;2 / 10;1161;725;62.45%
2181;URI - Uireb Rhom uin Iavas;Paradigmas;9;"A Uireb Rhom uin Iavas (traduzindo: Eterna Trombeta do Outono), uma importante empresa de Valinor, está fazendo uma pesquisa sobre os diversos públicos do reino abençoado. Para a URI, um público é um conjunto não-vazio maximal de elfos S tal que quaisquer dois elfos tomados de S são da mesma faixa etária. A propósito, a URI considera que dois elfos são da mesma faixa etária se e só se a diferença entre suas idades não excede um determinado parâmetro D. Por exemplo, sob D = 500, se Aegnor, Beleg e Celeborn têm respectivamente 1300, 500 e 1000 anos de idade, Aegnor e Celeborn são considerados da mesma faixa etária, assim como Beleg e Celeborn, mas não Aegnor e Beleg. Ainda, se os únicos elfos em Valinor fossem Aegnor, Beleg, Celeborn e Daeron, este de 700 anos de idade, os dois públicos seriam {Aegnor, Celeborn} e {Beleg, Celeborn, Daeron}. Note que o conjunto {Beleg, Celeborn}, apesar de conter dois elfos de mesma faixa etária, não é considerado um público por não ser maximal.

A URI quer saber o que é melhor para o lançamento de um produto: focar num público com o maior número de elfos possível, ou focar num público talvez mais restrito, mas com maior poder aquisitivo? Portanto, as informações que a URI precisa levantar são cruciais para que a empresa faça a escolha certa!";A entrada consiste de três linhas. A primeira linha consiste de dois inteiros positivos N e D (N ≤ 105, D ≤ 107), os quais representam respectivamente o número de elfos em Valinor e o parâmetro que define o conceito de faixa etária adotado. A segunda linha consiste de N inteiros ai (1 ≤ i ≤ N, 0 ≤ ai ≤ 107), os quais representam as idades de cada um dos elfos. Por fim, a terceira linha consiste de N valores ci (1 ≤ i ≤ N, 0.00 ≤ ci ≤ 10000.00), fornecidos com exatamente dois dígitos após o ponto separador decimal, os quais representam as rendas correspondentes dos elfos, segundo a ordem em que os elfos foram fornecidos na linha anterior.;Imprima uma única linha contendo três valores, os quais representem, nesta ordem, o número de públicos em Valinor, o número máximo de elfos num público em Valinor e a soma máxima das rendas dos elfos de um mesmo público em Valinor. Imprima o último valor com exatamente dois dígitos após o ponto separador decimal.;False;9 / 10;490;70;14.29%
2182;Luciano e a Bicicletinha;Grafos;9;"Luciano é um fã de esportes, ainda mais quando se trata do ciclismo. Luciano possui uma bicicleta e a cuida como se fosse seu filho, evitando ao máximo andar em ruas ruins, ou seja, ruas com muitos buracos. Luciano irá mudar de cidade e precisa de sua ajuda para encontrar o melhor bairro para se morar.

Para Luciano, o melhor bairro é aquele onde a média da quantidade de buracos entre todos os caminhos é a menor possível. Duas casas estão no mesmo bairro se for possível sair de uma e chegar até a outra usando os caminhos existentes. Após decidir o bairro, Luciano escolhe a casa baseado no seu identificador, ele prefere a casa com o maior identificador possível.

Você receberá uma lista com N casas disponíveis para Luciano morar e M caminhos entre essas casas. Em cada um desses caminhos existe uma quantidade de buracos. Nunca haverá mais de um caminho direto entre duas casas. Cada casa possui um identificador [1, N].

Se existir um bairro com apenas uma casa, a quantidade de buracos nesse bairro será 0, já que não existe caminhos.

Ajude Luciano e diga qual o identificador da casa onde deverá morar.";"A primeira linha contêm dois inteiros, N, M, representando a quantidade de casas disponíveis e a quantidade de caminhos entre elas. (1 ≤ N ≤ 104, 0 ≤ M ≤ 105).

Após isso, M linhas seguem, cada uma com três inteiros, X, Y, B, representando um caminho bidirecional entre as casas X e Y com uma quantidade B de buracos. (1 ≤ X, Y ≤ N, X != Y, 0 ≤ B ≤ 100). ";Imprima um único inteiro, o índice da casa onde Luciano deverá morar.;False;9 / 10;583;138;23.67%
2183;Batalha Final;Paradigmas;10;"Bia está jogando um jogo de Zumbi e está prestes a começar o último desafio. Modelaremos esse desafio como uma matriz NxN, onde o objetivo de Bia é sair da sala situada na posição [1, 1] e chegar na sala da posição [N, N]. Porém, como nada nessa vida é tão simples, existem salas que contêm zumbis, salas que são bloqueadas e salas que contêm itens mágicos para serem pegos que, quando fundidos, dão a Bia um grande poder.


	A sala [1, 1] contém sempre uma letra ‘I’ e a sala [N, N] a letra ‘F’ significando, respectivamente, o início e fim do desafio.
	As salas bloqueadas conterão o símbolo ‘#’, sendo assim impossível passar por elas.
	Salas com um número inteiro D significam que existem zumbis e, ao passar por elas, Bia perderá D pontos de vida.
	As outras salas conterão uma das seguintes letras: ‘P’, ‘O’, ‘W’, ‘E’ ou ‘R’, significando a inicial de cada um dos cinco itens mágicos. Quando Bia passa por uma sala com algum desses itens, ela pega e guarda em sua mochila, e no exato momento que junta todos eles, Bia se torna imune aos zumbis nas próximas K salas que entrar. É possível ter apenas um item de cada ao mesmo tempo na mochila e, quando usado, todos serão perdidos e poderão ser coletados novamente ao decorrer da batalha. Se Bia juntar todos os itens em um momento que ainda estiver sob o efeito de uma junção anterior, a quantidade de sala imune não será acumulada, e sim voltará ao valor máximo de K.


Sua tarefa é descobrir qual a menor quantidade inicial de pontos de vida para que Bia consiga vencer o desafio, dado que ela sempre escolhe o melhor caminho possível. Bia vence o desafio se chegar a sala [N, N] com pelo menos 1 ponto de vida.

Se Bia está no momento na sala [X, Y], ela pode andar apenas para as salas [X+1, Y] ou [X, Y+1].";"A primeira linha contêm dois inteiros N, K, indicando, respectivamente, a dimensão da matriz e a quantidade de salas imunes que Bia fica quando junta todos os itens mágicos. (2 ≤ N ≤ 100, 1 ≤ K ≤ 10).

A seguir temos N linhas que descrevem a matriz, cada uma dessas linhas conterá a informação de N salas, sendo os caracteres: ‘I’, ‘F’, ‘#’, ‘P’, ‘O’, ‘W’, ‘E’, ‘R’ ou um número inteiro D, todos descritos acima. (1 ≤ D ≤ 9).";Imprima uma única linha, a menor quantidade inicial de pontos de vida para que Bia consiga vencer o desafio. Caso seja impossível chegar a sala final, imprima ‘-1’.;False;10 / 10;273;66;24.18%
2184;Pomekons;Grafos;9;"Pomekon GO foi lançado e já é uma febre entre as pessoas. Após vários dias andando em sua cidade procurando por um padrão de onde os pomekons aparecem, Geraldinho tirou algumas conclusões e deseja usar suas habilidades em programação para sair na frente na captura dos pomekons. Geraldinho mapeou sua cidade em vários pontos. Entre cada par de pontos que se conectam diretamente, ele sabe a força do pomekon que aparece por lá.

Agora, Geraldinho quer expandir sua jornada pomekon por todo o mundo e, para isso, ele necessita de sua ajuda.

Existem Q possíveis rotas no formato [A, B]. Isso significa que você deve andar do ponto A até o ponto B. (Observe que existe apenas um caminho entre quaisquer pares de pontos). Cada rota pode ser usada uma única vez e é possível capturar apenas um pomekon por rota, já que as pobekolas estão caras. Outro fato importante é que Geraldinho pode visitar no máximo K pontos em sua jornada.


	Se existir duas rotas que passam por um ponto P, ele será contado duas vezes.
	Se existir duas rotas que passam pela mesma ligação, é possível capturar o pomekon nas duas passadas.


Geraldinho quer maximizar a soma das forças dos pomekons que poderá capturar, ajude-o nessa jornada!";"A primeira linha contêm dois inteiros N, K, indicando, respectivamente, o número de pontos mapeados na cidade e a quantidade máxima de pontos em que Geraldinho pode passar. (2 ≤ N ≤ 105,  2 ≤ K ≤ 103). 

Segue então N-1 linhas, contendo três inteiros X, Y, F, indicando que existe uma ligação bidirecional entre o ponto X e Y contendo um pomekon de força F. (1 ≤ X, Y ≤ N, X != Y, 1 ≤ F ≤ 1000). 

Após isso, há uma linha com um inteiro Q, indicando o número de rotas. Q linhas seguem com dois inteiros A, B, indicando que existe uma rota partindo do ponto A até o ponto B. (1 ≤ Q ≤ 5*103,  1 ≤ A, B ≤ N, A ≠ B).";Imprima uma única linha, a maior soma das forças dos pomekons capturados que Geraldinho pode conseguir, respeitando as condições dadas. Caso não consiga capturar nenhum pomekon, imprima -1.;False;9 / 10;318;107;33.65%
2185;Brincando com Pomekons;Estruturas e Bibliotecas;7;"Depois de capturar muitos Pomekons, Dabriel e Guarte resolveram criar um jogo com os monstrinhos e quem vencesse ficaria com todos eles.

O jogo criado funciona da seguinte maneira: Todos os Pomekons são separados em N pilhas, elas não terão necessariamente a mesma quantidade de monstrinhos, o jogador da rodada escolhe uma pilha e remove um ou mais Pomekons dela. O jogo termina quando não existe nenhum monstrinho para ser selecionado, e o jogador desta rodada é considerado o perdedor.

Como Dabriel é sempre o primeiro a jogar e nas últimas rodadas ele está ganhando, Guarte está desconfiado que Dabriel descobriu um macete do jogo, portanto ele propôs uma nova regra. Na nova versão do jogo Guarte irá escolher três inteiros X, Y e V, e a quantidade de monstrinhos em cada pilha entre X e Y, inclusive, irão ter a quantidade V de Pomekons. Dabriel aceitou a proposta, mas ele solicitou sua ajuda para dizer se ele terá chance de ganhar sempre que houver uma modificação nas pilhas. Como Dabriel e Guarte estão muito bons neste jogo, você pode assumir que ambos sempre jogam da melhor maneira possível.";"A primeira linha do caso de teste consiste de dois inteiros N (1 ≤ N ≤ 10⁵) e M (1 ≤ M ≤ 10⁵), representando a quantidade de pilhas e a quantidade de alterações que serão feitas respectivamente.
A segunda linha consiste de N inteiros vi (1 ≤ i ≤ N, 0 ≤ vi ≤ 10⁴), representando a quantidade de Pomekons que a pilha i contém.
As próximas M linhas consistem de três inteiros X, Y, V (1 ≤ X ≤ Y ≤ N, 1 ≤ V ≤ 10⁴), descrevendo as alterações que Guarte irá realizar.";"Para cada alteração nas pilhas do jogo, você deverá imprimir ""Possivel"", se Dabriel tem chance de ganhar, ou ""Impossivel"", caso contrário.";False;7 / 10;534;126;23.60%
2186;Bino, Prant e a Indecisao;Estruturas e Bibliotecas;10;"Como você já deve saber, Prant é um garoto muito indeciso, de tal modo que foi muito difícil escolher o nome do seu cachorro. Depois de Prant escolher o nome S para seu cachorro, Bino propôs um desafio.  O desafio de Bino consiste em N rodadas, e em cada rodada pode ser realizada uma das seguintes operações sobre o nome S:

1 A B C: Retornar a quantidade de ocorrências de um caractere C no intervalo entre as posições A e B. Por exemplo, para S = “abcda”, A = 1, B = 5 e C = ‘a’, a resposta é 2.

2 A B C: Encontrar a primeira e a última ocorrência de um caractere C no intervalo entre as posições A e B. Por exemplo, para S = “abcda”, A = 1, B = 5 e C = ‘a’, a primeira ocorrência de C é na posição 1, e a última é na posição 5.

3 A B: Inverter todas as letras no intervalo entre as posições A e B. Por exemplo, para S = “abcd”, A = 2 e B = 4, após a operação, S = “adcb”.

4 A C: Adicionar um caractere C antes o caractere da posição A. Por exemplo, para S = “abcd”, A = 2 e C = ‘z’, após a operação, S = “azbcd”.";"A primeira linha da entrada consiste de dois inteiros L ( 1 ≤ L ≤  106) e N ( 1 ≤ N ≤  105), representando a quantidade de letras que formam inicialmente o nome S, e a quantidade de rodas, respectivamente. A segunda linha contém uma string S, representando o nome inicial do cachorro de Prant. Então, seguiram N linhas, representando as N operações realizadas.

É garantido que a string S contém apenas letras minúsculas do alfabeto.";"Para cada operação 1, imprima uma única linha contendo a quantidade de ocorrências do caractere C no intervalo entre as posições A e B.

Para cada operação 2, imprima a primeira e a última ocorrência do caractere C no intervalo entre as posições A e B. Caso não exista o caractere C no intervalo, imprima -1.

Ao final das N operações, imprima a string resultante das operações.";False;10 / 10;339;42;12.39%
2187;Bits Trocados;Ad-Hoc;3;"As Ilhas Weblands formam um reino independente nos mares do Pacífico. Como é um reino recente, a sociedade é muito influenciada pela informática. A moeda oficial é o Bit; existem notas de B$ 50,00, B$10,00, B$5,00 e B$1,00. Você foi contratado(a) para ajudar na programação dos caixas automáticos de um grande banco das Ilhas Weblands.

Os caixas eletrônicos das Ilhas Weblands operam com todos os tipos de notas disponíveis, mantendo um estoque de cédulas para cada valor (B$ 50,00, B$10,00, B$5,00 e B$1,00). Os clientes do banco utilizam os caixas eletrônicos para efetuar retiradas de um certo número inteiro de Bits. 

Sua tarefa é escrever um programa que, dado o valor de Bits desejado pelo cliente, determine o número de cada uma das notas necessário para totalizar esse valor, de modo a minimizar a quantidade de cédulas entregues. Por exemplo, se o cliente deseja retirar B$50,00, basta entregar uma única nota de cinquenta Bits. Se o cliente deseja retirar B$72,00, é necessário entregar uma nota de B$50,00, duas de B$10,00 e duas de B$1,00.";A entrada é composta de vários conjuntos de teste. Cada conjunto de teste é composto por uma única linha, que contém um número inteiro positivo V (0 ≤ V ≤ 10000), que indica o valor solicitado pelo cliente. O final da entrada é indicado por V = 0.;Para cada conjunto de teste da entrada seu programa deve produzir três linhas na saída. A primeira linha deve conter um identificador do conjunto de teste, no formato “Teste n”, onde n é numerado a partir de 1. Na segunda linha devem aparecer quatro inteiros I, J, K e L que representam o resultado encontrado pelo seu programa: I indica o número de cédulas de B$50,00, J indica o número de cédulas de B$10,00, K indica o número de cédulas de B$5,00 e L indica o número de cédulas de B$1,00. A terceira linha deve ser deixada em branco. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.;False;3 / 10;1696;783;46.17%
2188;Macaco-prego;Ad-Hoc;6;"O macaco-prego é um animal irrequieto e barulhento, merecedor também dos adjetivos desordeiro e despudorado. A sua cabeça, encimada por uma densa pelagem negra ou marrom-escura, semelhante a um gorro, torna seu aspecto inconfundível. Apesar de ser o macaco mais comum nas matas do país, uma de suas sub-espécies encontra-se seriamente ameaçada de extinção: o macacoprego-do-peito-amarelo, que se distingue das demais pela coloração amarelada do peito e da parte anterior dos braços.

Um grande esforço foi feito pelos primatologistas para aumentar a população dos macacos-pregodo-peito-amarelo. Sabe-se que eles se alimentam de plantas, das quais consomem preferencialmente frutos e brotos. Alimentam-se também de muitos animais, preferencialmente lesmas, lagartas e rãs, e preferem as florestas mais densas. Para determinar o melhor local do país para criar uma nova reserva ambiental para os macacos-prego-do-peito-amarelo, o governo fez um levantamento das regiões no país onde as condições preferidas desses animais ocorrem: regiões de floresta densa, regiões com frutos, regiões com muitos brotos, etc. Ajude a salvar os macacos-pregodo-peito-amarelo.

As regiões propícias para o macaco-prego-do-peito-amarelo foram determinadas como retângulos cujos lados são todos verticais ou horizontais. Sua tarefa é encontrar o local ideal para a reserva ambiental, definida como a interseção de todas as regiões dadas.



As regiões foram divididas de tal forma que uma região não tangencia qualquer outra região. Assim, a interseção entre quaisquer duas regiões ou é um retângulo ou é vazia.";Seu programa deve ler vários conjuntos de teste. A primeira linha de um conjunto de teste contém um inteiro não negativo, N (0 ≤ N ≤ 10000), que indica o número de regiões (o valor N = 0 indica o final da entrada). Seguem-se N linhas, cada uma contendo quatro números inteiros X, Y, U e V (-10000 ≤ X,Y,U,V ≤ 10000)que descrevem uma região: o par X, Y representa a coordenada do canto superior esquerdo e o par U, V representa a coordenada do canto inferior direito de um retângulo.;Para cada conjunto de teste da entrada seu programa deve produzir três linhas na saída. A primeira linha deve conter um identificador do conjunto de teste, no formato “Teste n”, onde n é numerado a partir de 1. A segunda linha deve conter as coordenadas do retângulo de interseção encontrado pelo seu programa, no mesmo formato utilizado na entrada. Caso a interseção seja vazia, a segunda linha deve conter a expressão “nenhum”. A terceira linha deve ser deixada em branco. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente. ;True;6 / 10;757;227;29.99%
2189;Quermesse;Ad-Hoc;2;"Os alunos do último ano resolveram organizar uma quermesse para arrecadar fundos para a festa de formatura. A festa prometia ser um sucesso, pois o pai de um dos formandos, Teófilo, dono de uma loja de informática, decidiu doar um computador para ser sorteado entre os que comparecessem. Os alunos prepararam barracas de quentão, pipoca, doces, ensaiaram a quadrilha e colocaram à venda ingressos numerados sequencialmente a partir de 1. O número do ingresso serviria para o sorteio do computador. Ficou acertado que Teófilo decidiria o método de sorteio; em princípio o sorteio seria, claro, computadorizado.

O local escolhido para a festa foi o ginásio da escola. A entrada dos participantes foi pela porta principal, que possui uma roleta, onde passa uma pessoa por vez. Na entrada, um funcionário inseriu, em uma lista no computador da escola, o número do ingresso, na ordem de chegada dos participantes. Depois da entrada de todos os participantes, Teófilo começou a trabalhar no computador para preparar o sorteio. Verificando a lista de presentes, notou uma característica notável: havia apenas um caso, em toda a lista, em que o participante que possuia o ingresso numerado com i, havia sido a i-ésima pessoa a entrar no ginásio. Teófilo ficou tão encantado com a coincidência que decidiu que o sorteio não seria necessário: esta pessoa seria o ganhador do computador.

Conhecendo a lista de participantes, por ordem de chegada, sua tarefa é determinar o número do ingresso premiado, sabendo que o ganhador é o único participante que tem o número do ingresso igual à sua posição de entrada na festa. ";A entrada é composta de vários conjuntos de teste. A primeira linha de um conjunto de teste contém um número inteiro positivo N (0 ≤ N ≤ 10000) que indica o número de participantes da festa. A linha seguinte contém a sequência, em ordem de entrada, dos N ingressos das pessoas que participaram da festa. O final da entrada é indicado quando N = 0. Para cada conjunto de teste da entrada haverá um único ganhador.;"Para cada conjunto de teste da entrada seu programa deve produzir três linhas. A primeira linha identifica o conjunto de teste, no formato ""Teste n"", onde n é numerado a partir de 1. A segunda 5 linha deve conter o número do ingresso do ganhador, conforme determinado pelo seu programa. A terceira linha deve ser deixada em branco. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.";False;2 / 10;1685;927;55.01%
2190;Rede Ótica;Grafos;10;"Os caciques da região de Tutuaçu pretendem integrar suas tribos à chamada “aldeia global”. A primeira providência foi a distribuição de telefones celulares a todos os pajés. Agora, planejam montar uma rede de fibra ótica interligando todas as tabas. Esta empreitada requer que sejam abertas novas picadas na mata, passando por reservas de flora e fauna. Conscientes da necessidade de preservar o máximo possível o meio ambiente, os caciques encomendaram um estudo do impacto ambiental do projeto. Será que você consegue ajudá-los a projetar a rede de fibra ótica?

Vamos denominar uma ligação de fibra ótica entre duas tabas de um ramo de rede. Para possibilitar a comunicação entre todas as tabas é necessário que todas elas estejam interligadas, direta (utilizando um ramo de rede) ou indiretamente (utilizando mais de um ramo). Os caciques conseguiram a informação do impacto ambiental que causará a construção dos ramos. Alguns ramos, no entanto, nem foram considerados no estudo ambiental, pois sua construção é impossível.



Sua tarefa é escrever um programa para determinar quais ramos devem ser construídos, de forma a possibilitar a comunicação entre todas as tabas, causando o menor impacto ambiental possível.";A entrada é composta de vários conjuntos de teste. A primeira linha de um conjunto de teste contém dois números inteiros positivos N (0 ≤ N ≤ 100) e M (1 ≤ M ≤ N(N-1)/2) que indicam, respectivamente, o número de tabas e o número de ramos de redes possíveis. As tabas são numeradas de 1 a N. As M linhas seguintes contêm três inteiros positivos X, Y e Z (1 ≤ X,Y,Z ≤ 100), que indicam que o ramo de rede que liga a taba X à taba Y tem impacto ambiental Z. Com os conjuntos de teste dados sempre é possível interligar todas as tabas. O final da entrada é indicado quando N = 0.;"Para cada conjunto de teste da entrada seu programa deve produzir uma lista dos ramos de redes que devem ser construídos. A lista deve ser precedida de uma linha que identifica o conjunto de teste, no formato ""Teste n"", onde n é numerado a partir de 1. A lista é composta por uma sequência de ramos a serem construídos, um ramo por linha. Um ramo é descrito por um par de tabas X e Y , com X < Y. Os ramos de rede podem ser listados em qualquer ordem, mas não deve haver repeti- ção. Se houver mais de uma solução possível, imprima apenas uma delas. O final de uma lista de ramos deve ser marcado com uma linha em branco. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.";True;10 / 10;1072;154;14.37%
2191;Saldo de Gols;Ad-Hoc;6;"Hipólito é um torcedor fanático. Coleciona flâmulas, bandeiras, recortes de jornal, figurinhas de jogadores, camisetas e tudo o mais que se refira a seu time preferido. Quando ganhou um computador de presente em uma festa, resolveu montar um banco de dados com os resultados de todos os jogos de seu time ocorridos desde a sua fundação, em 1911. Depois de inseridos os dados, Hipólito começou a ficar curioso sobre estatísticas de desempenho do time. Por exemplo, ele deseja saber qual foi o período em que o seu time acumulou o maior saldo de gols. Como Hipólito tem o computador há muito pouco tempo, não sabe programar muito bem, e precisa de sua ajuda.

É dada uma lista, numerada seqüencialmente a partir de 1, com os resultados de todos os jogos do time (primeira partida: 3 x 0, segunda partida: 1 x 2, terceira partida: 0 x 5 ...). Sua tarefa é escrever um programa que determine em qual período o time conseguiu acumular o maior saldo de gols. Um período é definido pelos números de seqüência de duas partidas, A e B (A ≤ B ≤ N). O saldo de gols acumulado entre A e B é dado pela soma dos gols marcados pelo time em todas as partidas realizadas entre A e B (incluindo as mesmas) menos a soma dos gols marcados pelos times adversários no período. Se houver mais de um período com o mesmo saldo de gols, escolha o maior período (ou seja, o período em que B - A é maior). Se ainda assim houver mais de uma solução possível, escolha qualquer uma delas como resposta.";Seu programa deve ler vários conjuntos de teste. A primeira linha de um conjunto de teste contém um inteiro não negativo, N (0 ≤ N ≤ 10000), que indica o número de partidas realizadas pelo time (o valor N = 0 indica o final da entrada). Seguem-se N linhas, cada uma contendo um par de números inteiros não negativos X e Y (0 ≤ X,Y ≤ 50) que representam o resultado da partida: X são os gols a favor e Y os gols contra o time de Hipólito. As partidas são numeradas sequencialmente a partir de 1, na ordem em que aparecem na entrada. ;"Para cada conjunto de teste da entrada seu programa deve produzir três linhas na saída. A primeira linha deve conter um identificador do conjunto de teste, no formato “Teste n”, onde n é numerado a partir de 1. A segunda linha deve conter um par de inteiros I e J que indicam respectivamente a primeira e última partidas do melhor período, conforme determinado pelo seu programa, exceto quando o saldo de gols do melhor período for menor ou igual a zero; neste caso a segunda linha deve conter a expressão “nenhum”. A terceira linha deve ser deixada em branco. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.";False;6 / 10;1264;258;20.41%
2192;To Add or to Multiply;Ad-Hoc;5;"The Industrial Computer Processor Company offers very fast, special purpose processing units tailored to customer needs. Processors of the a-C-m family (such as the 1-C-2 and the 5-C-3) have an instruction set with only two different operations:

					
						A add a
						M multiply by m
					

					The processor receives an integer, executes a sequence of A and M operations (the program) that modifies the input, and outputs the result. For example, the 1-C-2 processor executing the program AAAM with the input 2 yields the output 10 (the computation is 2 → 3 → 4 → 5 → 10), while the 5-C-3 processor yields 51 with the same program and input (2 → 7 → 12 → 17 → 51).

					You are an a-C-m programmer assigned to a top secret project. This means that you have not been told the precise computation your program should perform. But you are given particular values p, q, r, and s and the following conditions:

					
						The input is guaranteed to be a number between p and q.
						The output must be some number between r and s.
					

					Given an a-C-m processor and the numbers p, q, r, and s, your job is to construct the shortest a-C-m program which, for every input x such that p ≤ x ≤ q, yields some output y such that r ≤ y ≤ s. If there is more than one program of minimum length, choose the one that come first lexicographically, treating each program as a string of As and Ms.";"The input contains several test cases. Each test case is given by a line with the six integers a, m, p, q, r, and s as described above (1 ≤ a, m, p, q, r, s ≤ 109 , p ≤ q and r ≤ s).

					The last test case is followed by a line with six zeros.";"For each test case, display its case number followed by the best program as described above. Display the word “empty” if the best program uses no operations. Display the word “impossible” if there is no program meeting the specifications.

					Display the program as a sequence of space-separated strings, alternating between strings of the form “nA” and strings of the form “nM”, where n > 0. Strings of the former type indicate n consecutive A operations, and strings of the latter type indicate n consecutive M operations.

					Follow the format of the sample output.";False;5 / 10;6;2;33.33%
2193;Affine Mess;Ad-Hoc;1;"Tess L. Ation ran into a little problem last week when she demonstrated the beta version of her new drawing software. On the screen she had an elegant demonstration design that illustrated every feature of her program; it had taken her hours to produce it. She was just putting the finishing touches on it as a group of potential investors entered the room to see the demonstration.

					The presentation went well. Near the end, Tess clicked on a control panel button and told her audience, “This is the ‘snap to grid’ control. It forces control points, such as vertices, to jump to the nearest grid point. Here, let me show you,” and she placed three bright red dots on the screen. Each one appeared at the grid point nearest to where she clicked. (“Luckily all control points in my demo design were already at integer coordinates. But I will have to remember to delete these three red dots before I save my diagram,” she thought to herself.) “Now I’ll step into the next room and get out of your way so you can discuss the system among yourselves and get a closer look at the screen, but please don’t touch anything, since I haven’t saved that file yet.”

					A few minutes later, the group joined Tess. One of the visitors stepped up to Tess and said, “I hope you don’t mind, but I wanted to try it myself. Don’t worry, I just played with the x-scale and y-scale controls a little bit.” The next person said, “Sorry if this is a problem, but I really wanted to get a feel for the speed of display, so I just played around with the translation tool.” And a third person said, “I couldn’t resist just one tiny test: I rotated the image just so I could see all of the vertices snap to the nearest grid points after the rotation.”

					The person who played with the rotation tool remembered going first, but the other two could not recall their order. The three remembered only a few details of the changes. The x- and y-scaling factors had been (possibly negative) nonzero integers; the center of scaling was the origin (0, 0). The x- and y-translation amounts had been integers. Rotation had been specified by a point with integer coordinates (x, y) on the perimeter of a square of width 20 centered at the origin (hence, −10 ≤ x, y ≤ 10 and the absolute value of x or y or both was 10). The tool rotated the drawing around the origin such that the positive x-axis would pass through (x, y) afterwards. Snapping took place after this rotation (coordinates with a fractional part of 0.5 were rounded away from zero).

					After they left, Tess looked at her design – it was completely changed! She had not yet implemented the “undo” feature, and she had not saved the diagram prior to giving the demonstration. However, the three identical red dots were still there (transformed to other integer grid locations, of course), and Tess could remember the integer coordinates where she had originally placed them. Obviously, someone else might have altered the drawing without saying anything to her, but she could write a program to see if it was possible to reconstruct the sequence of alterations. Can you too?";"The input contains several test cases. Each test case consists of six pairs of integers xi and yi (−500 ≤ xi , yi ≤ 500 for 1 ≤ i ≤ 6), three pairs per input line. The first three pairs represent the distinct initial locations of the three red dots. The last three pairs represent the distinct final locations of the three dots. The indexing of the pairs in each group of three is not significant: for example, (x1, y1) could have been mapped to any of (x4, y4), (x5, y5) or (x6, y6).

					The last test case is followed by a line with six zeros.";"For each test case, display its case number followed by one of the following three messages:

					
						“equivalent solutions” to indicate that there are one or more valid transformations, and all of them have the same effect on the whole drawing (no matter what the whole drawing looks like).
						“inconsistent solutions” to indicate that there are several valid transformations, but in general not all of them map the entire drawing in the same way (some drawing is mapped differently by two valid transformations).
						“no solution” to indicate that neither of the first two cases occurs.
					

					A valid transformation is a combination of rotation, translation and scaling (or rotation, scaling and translation) which satisfies the restrictions described above and maps the initial set of red dots to the final set (occupying all three final locations).

					Follow the format of the sample output.";False;1 / 10;4;1;25.00%
2194;Ancient Messages;Ad-Hoc;3;"In order to understand early civilizations, archaeologists often study texts written in ancient languages. One such language, used in Egypt more than 3000 years ago, is based on characters called hieroglyphs. Figure C.1 shows six hieroglyphs and their names. In this problem, you will write a program to recognize these six characters.

					

					Figure C.1: Six hieroglyphs";"The input consists of several test cases, each of which describes an image containing one or more hieroglyphs chosen from among those shown in Figure C.1. The image is given in the form of a series of horizontal scan lines consisting of black pixels (represented by 1) and white pixels (represented by 0). In the input data, each scan line is encoded in hexadecimal notation. For example, the sequence of eight pixels 10011100 (one black pixel, followed by two white pixels, and so on) would be represented in hexadecimal notation as 9c. Only digits and lowercase letters a through f are used in the hexadecimal encoding. The first line of each test case contains two integers, H and W. H (0 < H ≤ 200) is the number of scan lines in the image. W (0 < W ≤ 50) is the number of hexadecimal characters in each line. The next H lines contain the hexadecimal characters of the image, working from top to bottom. Input images conform to the following rules:

					
						The image contains only hieroglyphs shown in Figure C.1.
						Each image contains at least one valid hieroglyph.
					

					Each black pixel in the image is part of a valid hieroglyph.

					
						Each hieroglyph consists of a connected set of black pixels and each black pixel has at least one other black pixel on its top, bottom, left, or right side.
						The hieroglyphs do not touch and no hieroglyph is inside another hieroglyph. • Two black pixels that touch diagonally will always have a common touching black pixel.
						The hieroglyphs may be distorted but each has a shape that is topologically equivalent to one of the symbols in Figure C.11.
					

					The last test case is followed by a line containing two zeros.";"For each test case, display its case number followed by a string containing one character for each hieroglyph recognized in the image, using the following code:

					
						Ankh: A
						Wedjat: J
						Djed: D
						Scarab: S
						Was: W
						Akhet: K
					

					In each output string, print the codes in alphabetic order. Follow the format of the sample output.

					The sample input contains descriptions of test cases shown in Figures C.2 and C.3. Due to space constraints not all of the sample input can be shown on this page.";True;3 / 10;31;19;61.29%
2195;Chips Challenge;Ad-Hoc;2;"A prominent microprocessor company has enlisted your help to lay out some interchangeable components (widgets) on some of their computer chips. Each chip’s design is an N ×N square of slots. One slot can hold a single component, and you are to try to fit in as many widgets as possible.

					Modern processor designs are complex, of course. You unfortunately have several restrictions:

					
						Some of the slots are disabled.
						Some of the slots are already occupied by other components and cannot be used for widgets.
						There are sibling memory buses connected to the horizontal and vertical edges of the chip and their bandwidth loads need to match. As such, there must be exactly as many components in the first row as in the first column, exactly as many in the second row as in the second column, and so on. Component counts include both the components already specified on the chip and the added widgets.
						Similarly, the power supply is connected at the end of each row and column. To avoid hot spots, any given row or column must have no more than A/B of the total components on the chip for a given A and B.
					

					A specification for a chip is N lines of N characters, where ‘.’ indicates an open slot, ‘/’ indicates a disabled slot, and ‘C’ indicates a slot already occupied by a component. For example:

					CC/..

					././/

					..C.C

					/.C..

					/./C/

					If no more than 3/10 of the components may be in any one row or column, the maximum number of widgets that can be added to this 5 × 5 chip is 7. A possible arrangement is below, where ‘W’ indicates a widget added in an open slot.

					CC/W.

					W/W//

					W.C.C

					/.CWW

					/W/C/";"The input consists of several test cases. Each case starts with a line containing three integers: The size of the chip N (1 ≤ N ≤ 40), and A and B (1 ≤ B ≤ 1000, 0 ≤ A ≤ B) as described above. Each of the following N lines contains N characters describing the slots, one of ‘.’, ‘/’ or ‘C’, as described above.

					The last test case is followed by a line containing three zeros.";"For each test case, display a single line beginning with the case number. If there is a solution, display the maximum number of widgets that can be added to the chip. Display “impossible” if there is no solution.

					Follow the format of the sample output.";False;2 / 10;6;3;50.00%
2196;Coffee Central;Ad-Hoc;1;"Is it just a fad or is it here to stay? You’re not sure, but the steadily increasing number of coffee shops that are opening in your hometown has certainly become quite a draw. Apparently, people have become so addicted to coffee that apartments that are close to many coffee shops will actually fetch higher rents.

					This has come to the attention of a local real-estate company. They are interested in identifying the most valuable locations in the city in terms of their proximity to large numbers of coffee shops. They have given you a map of the city, marked with the locations of coffee shops. Assuming that the average person is willing to walk only a fixed number of blocks for their morning coffee, you have to find the location from which one can reach the largest number of coffee shops. As you are probably aware, your hometown is built on a square grid layout, with blocks aligned on north-south and east-west axes. Since you have to walk along streets, the distance between intersections (a, b) and (c, d) is |a − c| + |b − d|.";"The input contains several test cases. Each test case describes a city. The first line of each test case contains four integers dx, dy, n, and q. These are the dimensions of the city grid dx × dy (1 ≤ dx, dy ≤ 1000), the number of coffee shops n (0 ≤ n ≤ 5 · 105 ), and the number of queries q (1 ≤ q ≤ 20). Each of the next n lines contains two integers xi and yi (1 ≤ xi ≤ dx, 1 ≤ yi ≤ dy); these specify the location of the ith coffee shop. There will be at most one coffee shop per intersection. Each of the next q lines contains a single integer m (0 ≤ m ≤ 106 ), the maximal distance that a person is willing to walk for a cup of coffee.

					The last test case is followed by a line containing four zeros.";"For each test case in the input, display its case number. Then display one line per query in the test case. Each line displays the maximum number of coffee shops reachable for the given query distance m followed by the optimal location. For example, the sample output shows that 3 coffee shops are within query distance 1 of the optimal location (3, 4), 4 shops are within query distance 2 of optimal location (2, 2), and 5 shops are within query distance 4 of optimal location (3, 1). If there are multiple optimal locations, pick the location that is furthest south (minimal positive integer y-coordinate). If there is still a tie, pick the location furthest west (minimal positive integer x-coordinate).

					Follow the format of the sample output.";False;1 / 10;166;81;48.80%
2197;Machine Works;Ad-Hoc;1;"You are the director of Arbitrarily Complex Machines (ACM for short), a company producing advanced machinery using even more advanced machinery. The old production machinery has broken down, so you need to buy new production machines for the company. Your goal is to make as much money as possible during the restructuring period. During this period you will be able to buy and sell machines and operate them for profit while ACM owns them. Due to space restrictions, ACM can own at most one machine at a time.

					During the restructuring period, there will be several machines for sale. Being an expert in the advanced machines market, you already know the price Pi and the availability day Di for each machines Mi. Note that if you do not buy machine Mi on day Di, then somebody else will buy it and it will not be available later. Needless to say, you cannot buy a machine if ACM has less money than the price of the machine.

					If you buy a machine Mi on day Di , then ACM can operate it starting on day Di + 1. Each day that the machine operates, it produces a profit of Gi dollars for the company.

					You may decide to sell a machine to reclaim a part of its purchase price any day after you’ve bought it. Each machine has a resale price Ri for which it may be resold to the market. You cannot operate a machine on the day that you sell it, but you may sell a machine and use the proceeds to buy a new machine on the same day.

					Once the restructuring period ends, ACM will sell any machine that it still owns. Your task is to maximize the amount of money that ACM makes during the restructuring.";"The input consists of several test cases. Each test case starts with a line containing three positive integers N, C, and D. N is the number of machines for sale (N ≤ 105 ), C is the number of dollars with which the company begins the restructuring (C ≤ 109 ), and D is the number of days that the restructuring lasts (D ≤ 109 ).

					Each of the next N lines describes a single machine for sale. Each line contains four integers Di , Pi , Ri and Gi , denoting (respectively) the day on which the machine is for sale, the dollar price for which it may be bought, the dollar price for which it may be resold and the daily profit generated by operating the machine. These numbers satisfy 1 ≤ Di ≤ D, 1 ≤ Ri < Pi ≤ 109 and 1 ≤ Gi ≤ 109.

					The last test case is followed by a line containing three zeros.";"For each test case, display its case number followed by the largest number of dollars that ACM can have at the end of day D + 1.

					Follow the format of the sample output.";False;1 / 10;4;4;100.00%
2199;Mining Your Own Business;Ad-Hoc;7;"John Digger is the owner of a large illudium phosdex mine. The mine is made up of a series of tunnels that meet at various large junctions. Unlike some owners, Digger actually cares about the welfare of his workers and has a concern about the layout of the mine. Specifically, he worries that there may a junction which, in case of collapse, will cut off workers in one section of the mine from other workers (illudium phosdex, as you know, is highly unstable). To counter this, he wants to install special escape shafts from the junctions to the surface. He could install one escape shaft at each junction, but Digger doesn’t care about his workers that much. Instead, he wants to install the minimum number of escape shafts so that if any of the junctions collapses, all the workers who survive the junction collapse will have a path to the surface.

					Write a program to calculate the minimum number of escape shafts and the total number of ways in which this minimum number of escape shafts can be installed.";"The input consists of several test cases. The first line of each case contains a positive integer N (N ≤ 5·104 ) indicating the number of mine tunnels. Following this are N lines each containing two distinct integers s and t, where s and t are junction numbers. Junctions are numbered consecutively starting at 1. Each pair of junctions is joined by at most a single tunnel. Each set of mine tunnels forms one connected unit (that is, you can get from any one junction to any other).

					The last test case is followed by a line containing a single zero.";"For each test case, display its case number followed by the minimum number of escape shafts needed for the system of mine tunnels and the total number of ways these escape shafts can be installed. You may assume that the result fits in a signed 64-bit integer.

					Follow the format of the sample output.";False;7 / 10;87;18;20.69%
2200;Mummy Madness;Ad-Hoc;9;"During an excursion to the desert at the 2011 ACM-ICPC World Finals, you come across an old Egyptian tomb. Unfortunately, opening the tomb turns out to be a bad idea: all of a sudden, what was just a few moments ago an empty desert has now become a desert crawling with grumpy mummies (you would be grumpy too if you were suddenly awakened after a few thousand years of peaceful sleep).2

					Faced with this murderous mass of mad mummies, your only chance is to run for it and try to escape before they catch you. The question is: how long will it take before a mummy catches you, assuming neither you nor the mummies ever get tired?

					We model the desert as a grid of squares. You and the mummies take turns making moves on the grid. You make the first move. In your turns, you can move to any of the eight squares adjacent to your current location, or you can choose to stand still. In the mummies’ turns, each mummy simply moves to the adjacent square that brings it closest to you (measured by Euclidean distance, assuming that you and all the mummies stand in the centers of their respective squares). It is possible for two mummies to occupy the same square.

					A time step consists of your move followed by the mummies’ moves. A mummy catches you if it moves to the square where you are located, or if you move to the square occupied by the mummy. Of course, you try to avoid being caught for as long as possible. After how many time steps will you be caught?

					 

					Figure I.1: A mummy chase

					The figure illustrates what might happen if you are being chased by four mummies. The square labeled H is your initial position, and the squares labeled M are the initial positions of mummies. After four time steps, you are caught by the mummy whose initial position was (3, 4) with respect to your initial position.

					2Fortunately, after solving this problem, you woke up safe and sound in a hotel room in Florida. The enraged mummies had just been a dream. Or had they?";"The input consists of several test cases. Each test case begins with an integer n (0 ≤ n ≤ 105 ) giving the number of mummies in the desert. The following n lines each contain two integers x and y, indicating that there is initially a mummy at coordinates (x, y) of the desert, where x and y are both bounded by 106 in absolute value. Your starting position is (0, 0), and no mummy starts at this position.

					The last test case is followed by a line containing the number −1.";"For each test case, display its test case number followed by the maximum number of time steps until you are caught (measured as the total number of turns that you get), or the word “never” if you can avoid capture indefinitely.

					Follow the format of the sample output.";True;9 / 10;36;7;19.44%
2201;Pyramids;Ad-Hoc;8;"It is not too hard to build a pyramid if you have a lot of identical cubes. On a flat foundation you lay, say, 10 × 10 cubes in a square. Centered on top of that square you lay a 9 × 9 square of cubes. Continuing this way you end up with a single cube, which is the top of the pyramid. The height of such a pyramid equals the length of its base, which in this case is 10. We call this a high pyramid.

					If you think that a high pyramid is too steep, you can proceed as follows. On the 10 × 10 base square, lay an 8 × 8 square, then a 6 × 6 square, and so on, ending with a 2 × 2 top square (if you start with a base of odd length, you end up with a single cube on top, of course). The height of this pyramid is about half the length of its base. We call this a low pyramid.

					Once upon a time (quite a long time ago, actually) there was a pharaoh who inherited a large number of stone cubes from his father. He ordered his architect to use all of these cubes to build a pyramid, not leaving a single one unused. The architect kindly explained that not every number of cubes can form a pyramid. With 10 cubes you can build a low pyramid with base 3. With 5 cubes you can build a high pyramid of base 2. But no pyramid can be built using exactly 7 cubes.

					The pharaoh was not amused, but after some thinking he came up with new restrictions.

					
						All cubes must be used.
						You may build more than one pyramid, but you must build as few pyramids as possible.
						All pyramids must be different.
						Each pyramid must have a height of at least 2.
						Satisfying the above, the largest of the pyramids must be as large as possible (i.e., containing the most cubes).
						Satisfying the above, the next-to-largest pyramid must be as large as possible.
						And so on...
					

					Drawing figures and pictures in the sand, it took the architect quite some time to come up with the best solution.

					Write a program that determines how to meet the restrictions of the pharaoh, given the number of cubes.";"The input consists of several test cases, each one on a single line. A test case is an integer c, where 1 ≤ c ≤ 106 , giving the number of cubes available.

					The last test case is followed by a line containing a single zero.";For each test case, display its case number followed by the pyramids to be built. The pyramids should be ordered with the largest first. Pyramids are specified by the length of their base followed by an L for low pyramids or an H for high pyramids. If two differenct pyramids have the same number of cubes, list the high pyramid first. Print “impossible” if it is not possible to meet the requirements of the pharaoh.;False;8 / 10;12;4;33.33%
2202;Trash Removal;Ad-Hoc;8;"Allied Chute Manufacturers is a company that builds trash chutes. A trash chute is a hollow tube installed in buildings so that trash dropped in at the top will fall down and be collected in the basement. Designing trash chutes is actually highly nontrivial. Depending on what kind of trash people are expected to drop into them, the trash chute needs to have an appropriate size. And since the cost of manufacturing a trash chute is proportional to its size, the company always would like to build a chute that is as small as possible. Choosing the right size can be tough though.

					We will consider a 2-dimensional simplification of the chute design problem. A trash chute points straight down and has a constant width. Objects that will be dropped into the trash chute are modeled as polygons. Before an object is dropped into the chute it can be rotated so as to provide an optimal fit. Once dropped, it will travel on a straight path downwards and will not rotate in flight. The following figure shows how an object is first rotated so it fits into the trash chute.

					 

					Your task is to compute the smallest chute width that will allow a given polygon to pass through.";"The input contains several test cases. Each test case starts with a line containing an integer n (3 ≤ n ≤ 100), the number of points in the polygon that models the trash item.

					The next n lines then contain pairs of integers xi and yi (0 ≤ xi , yi ≤ 104 ), giving the coordinates of the polygon vertices in order. All points in one test case are guaranteed to be mutually distinct and the polygon sides will never intersect. (Technically, there is one inevitable exception of two neighboring sides sharing their common vertex. Of course, this is not considered an intersection.)

					The last test case is followed by a line containing a single zero.";"For each test case, display its case number followed by the width of the smallest trash chute through which it can be dropped. Display the minimum width with exactly two digits to the right of the decimal point, rounding up to the nearest multiple of 1/100. Answers within 1/100 of the correct rounded answer will be accepted.

					Follow the format of the sample output.";True;8 / 10;79;27;34.18%
2203;Tempestade de Corvos;Iniciante;4;"Fiddlesticks é um campeão do jogo League of Legends e tem como sua habilidade ultimate a ""Tempestade de Corvos"", ela funciona da seguinte maneira:

Primeiro Fiddlesticks escolhe um local estratégico e prontamente ele se prepara para ressurgir em uma direção até uma certa distância, então ele se enraiza e canaliza a ultimate por exatamente 1.5 segundos, após esse tempo ele ressurge imediatamente no local alvo com uma revoada de corvos voando ao seu redor e causando muito dano.

Fiddlesticks quer sua ajuda para saber se de uma certa posição é possível atingir um invasor com sua habilidade ultimate.

Obs: Considere que Fiddlesticks sempre luta exatamente na direção do invasor e o invasor sempre tenta fugir na direção contrária a  Fiddlesticks, em velocidade constante.";A entrada é composta de várias linhas, cada linha contém os seguintes valores inteiros: Xf, Yf, Xi, Yi, Vi, R1 e R2(0 ≤ Xf, Yf, Xi, Yi, Vi, R1 e R2 ≤ 100), representando respectivamente as coordenadas de Fiddlesticks, as coordenadas iniciais do invasor, a velocidade do invasor, o raio de conjuração da ultimate e o raio de voo dos corvos. Considere a unidade de medida como sendo o metro.;Na saída você deve imprimir para cada linha o caractere 'Y' caso seja possível atingir o invasor ou 'N' caso contrário, ambos seguidos de uma quebra de linha.;True;4 / 10;2888;1312;45.43%
2204;Pare A Bomba!;Matemática;5;"Com a chegada dos jogos, assim como em todo grande evento, as forças de segurança pública realizam uma série de treinos e simulações com o objetivo de estarem prontos para o pior. Seu amigo David, que não se sente muito realizado no curso de Ciência da Computação - devido ao fato de não ser muito hábil com programação, sonha em se juntar á uma dessas entidades de segurança publica.

Enquanto estudava sobre tais exames e simulações, David encontrou o seguinte problema:

""Numa dada simulação, o time de defesa tática deve encontrar e desarmar um alarme - que simula uma bomba - que contém dois inteiros A e B. Para desarmar a bomba, o time deve escrever o maior divisor comum de todos os inteiros de A até B"".

Ninguém sabe o por que simulariam uma bomba com tais condições, mas David está curioso para saber qual seria a resposta certa, dependendo dos números que constassem no visor. Como ele não é tão bom como programação ( ou matemática ), ele pediu sua ajuda para encontrar a resposta do seguinte problema :


""Dado dois inteiros A e B, imprima o maior divisor comum de todos os inteiros [A, A+1, A+2, ...., B]"".";A entrada começa com um inteiro T que represta o número de casos de testes. Seguem T linhas, cada uma contendo dois inteiros A e B ( 1 <= A <= B <= 10¹°°), já descritos no problema.;Seu programa deve imprimir, para cada caso de teste, um único número, que representa a resposta para o problema descrito.;False;5 / 10;549;183;33.33%
2205;Asteroid Rangers;Ad-Hoc;1;"The year is 2112 and humankind has conquered the solar system. The Space Ranger Corps have set up bases on any hunk of rock that is even remotely inhabitable. Your job as a member of the Asteroid Communications Ministry is to make sure that all of the Space Ranger asteroid bases can communicate with one another as cheaply as possible. You could set up direct communication links from each base to every other base, but that would be prohibitively expensive. Instead, you want to set up the minimum number of links so that everyone can send messages to everyone else, potentially relayed by one or more bases. The cost of any link is directly proportional to the distance between the two bases it connects, so this doesn’t seem that hard of a problem.

					There is one small difficulty, however. Asteroids have a tendency to move about, so two bases that are currently very close may not be so in the future. Therefore as time goes on, you must be willing to switch your communication links so that you always have the cheapest relay system in place. Switching these links takes time and money, so you are interested in knowing how many times you will have to perform such a switch.

					A few assumptions make your task easier. Each asteroid is considered a single point. Asteroids always move linearly with a fixed velocity. No asteroids ever collide with other asteroids. Also, any relay system that becomes optimal at a time t ≥ 0 will be uniquely optimal for any time s satisfying t < s < t+10−6 . The initial optimal relay system will be unique.";Each test case starts with a line containing an integer n (2 ≤ n ≤ 50) indicating the number of asteroid bases. Following this are n lines, each containing six integers x, y, z, vx, vy, vz. The first three specify the initial location of an asteroid (−150 ≤ x, y, z ≤ 150), and the last three specify the x, y, and z components of that asteroid’s velocity in space units per time unit (−100 ≤ vx, vy, vz ≤ 100).;For each test case, display a single line containing the case number and the number of times that the relay system needs to be set up or modified.;False;1 / 10;5;4;80.00%
2207;Bus Tour;Ad-Hoc;6;"Imagine you are a tourist in Warsaw and have booked a bus tour to see some amazing attraction just outside of town. The bus first drives around town for a while (a long while, since Warsaw is a big city) picking up people at their respective hotels. It then proceeds to the amazing attraction, and after a few hours goes back into the city, again driving to each hotel, this time to drop people off.

					For some reason, whenever you do this, your hotel is always the first to be visited for pickup, and the last to be visited for dropoff, meaning that you have to suffer through two not-so-amazing sightseeing tours of all the local hotels. This is clearly not what you want to do (unless for some reason you are really into hotels), so let’s fix it. We will develop some software to enable the sightseeing company to route its bus tours more fairly—though it may sometimes mean longer total distance for everyone, but fair is fair, right?

					For this problem, there is a starting location (the sightseeing company headquarters), h hotels that need to be visited for pickups and dropoffs, and a destination location (the amazing attraction). We need to find a route that goes from the headquarters, through all the hotels, to the attraction, then back through all the hotels again (possibly in a different order), and finally back to the headquarters. In order to guarantee that none of the tourists (and, in particular, you) are forced to suffer through two full tours of the hotels, we require that every hotel that is visited among the first [h/2] hotels on the way to the attraction is also visited among the first [h/2] hotels on the way back. Subject to these restrictions, we would like to make the complete bus tour as short as possible. Note that these restrictions may force the bus to drive past a hotel without stopping there (this is not considered visiting) and then visit it later, as illustrated in the first sample input.";"The first line of each test case consists of two integers n and m satisfying 3 ≤ n ≤ 20 and 2 ≤ m, where n is the number of locations (hotels, headquarters, attraction) and m is the number of pairs of locations between which the bus can travel.

					The n different locations are numbered from 0 to n−1, where 0 is the headquarters, 1 through n−2 are the hotels, and n − 1 is the attraction. Assume that there is at most one direct connection between any pair of locations and it is possible to travel from any location to any other location (but not necessarily directly).

					Following the first line are m lines, each containing three integers u, v, and t such that 0 ≤ u, v ≤ n−1, u != v, 1 ≤ t ≤ 3600, indicating that the bus can go directly between locations u and v in t seconds (in either direction).";For each test case, display the case number and the time in seconds of the shortest possible tour.;False;6 / 10;12;6;50.00%
2208;Fibonacci Words;Ad-Hoc;5;"The Fibonacci word sequence of bit strings is defined as:

					$$F(n) =\begin{cases}
					& \text 0 \\ 
					& \text 1 \\ 
					& \text F(n-1)+F(n-2)\\
					\end{cases} \begin{matrix}
					\mathbf{if} n = 0 \\ 
					\mathbf{if} n = 1\\ 
					\mathbf{if} n \geqslant 2
					\end{matrix}$$

					Here + denotes concatenation of strings. The first few elements are:

					  

					Given a bit pattern p and a number n, how often does p occur in F(n)?";The first line of each test case contains the integer n (0 ≤ n ≤ 100). The second line contains the bit pattern p. The pattern p is nonempty and has a length of at most 100 000 characters.;For each test case, display its case number followed by the number of occurrences of the bit pattern p in F(n). Occurrences may overlap. The number of occurrences will be less than 263 .;True;5 / 10;41;25;60.98%
2210;Keys;Ad-Hoc;4;"Adam carries a bunch of keys attached to key rings, some of which may be connected to each other. The rings are common key rings, so a key can be attached to or detached from a ring by sliding along the spiral. In the same way, two rings can be connected or disconnected. Adam wants to give some of the keys to Brenda. Since manipulating the keys and rings is often an annoying task (and also dangerous to one’s fingernails), Adam is looking for a way to minimize the number of key and ring operations.

					Every key attachment, key detachment, ring connection, or ring disconnection is considered one operation. Since manipulating two rings is significantly easier than sliding a key, we first want to minimize the number of keys being detached and attached. Among solutions with the same minimal number of key operations, you need to find the one with the minimal number of ring connections and disconnections.

					When all the operations are complete, Adam and Brenda must each carry one connected group of rings and keys. The only exception is when either of them would have no keys at all—in such a case, no ring is needed. Each key must be attached to exactly one ring. Some rings (but not keys) may be considered leftovers and may remain disconnected from the two groups.

					The left side of the following figure shows an initial configuration consisting of four keys on three rings. Adam wishes to give Brenda the two keys labeled N and R. This can be accomplished by two key operations and one ring operation, resulting in the configuration shown on the right side of the figure.";"Each test case contains one or more lines, each containing a two letter string. Lowercase letters (a - z) represent key rings and uppercase letters (A - Z) represent keys. The two letters on a line specify either a key attached to a ring or two rings connected together. The end of each test case is denoted by a line containing the digit zero.

					Keys denoted by letters A through M remain with Adam, and keys denoted by letters N through Z are given to Brenda.

					No line contains two uppercase letters. No pair of letters are specified more than once in the same test case. Each key is connected to exactly one ring. There are no “circles” in the ring configurations (disconnecting any two rings will increase the number of connected groups). All existing keys and rings are mentioned at least once.";"For each test case, display the case number followed by the minimal number of key attach/detach operations and the minimal number of ring connect/disconnect operations.

					If there is no way to split the keys as requested, display the case number and the word 'impossible' instead of the two integers.";True;4 / 10;3;1;33.33%
2211;Minimum Cost Flow;Ad-Hoc;1;"You have been hired to construct a system to transport water between two points in an old factory building using some existing components of the old plumbing. The old components consist of pipes and junctions. Junctions are points where pipes may have previously been joined. We say previously joined, because some of the old pipes were damaged and have been removed, effectively leaving open holes in the junctions to which they were connected. If water should enter one of these junctions, it would pour out of an open hole and eventually flood the building—clearly an undesirable event.

					You can remedy this situation by installing new pipes between some of the open holes and installing plugs to close other open holes as necessary. When you install a new pipe connecting two holes (which must be in two different junctions), the two holes are no longer open and water will be able to flow through the new pipe. The cost of installing a new pipe is equal to the distance between the centers of the two junctions the pipe connects. The cost of installing a plug in an open hole is 0.5. You are not concerned about open holes in junctions that will never be reached by water.

					Two of the junctions are special. One, called the source, is the point where water will be pumped into the new system. The other, called the destination, is where the water is needed. After any plugs and new pipes have been added to the system, water will be pumped into it at the source with a pressure sufficient to reach a specified height (in the absence of leaks, of course). You are allowed to select the pressure arbitrarily, and are guaranteed that the pressure will not change during the operation of the system. Naturally the pressure must be sufficient to force water up to the heights of both the source and the destination. Your task is simply to find the most inexpensive way of getting water from the source junction to the destination junction without flooding the building.

					The figure below corresponds to the first sample input case, where black dots represent open holes, junction 1 is the source, and junction 7 is the destination. (The position of a black dot on its circle has no significance and is used for illustration purposes only.)

					  

					Water flows through the system according to the laws of physics. If the pressure is sufficient to fill a junction with water, then that junction will remain filled with water. If there are pipes extending horizontally or downward from a junction, then water will also flow through those pipes. Water will also flow upward through pipes connected to a junction up to the height determined by the water pressure. Of course, if the water reaches an open hole in a junction, it will flow through the hole and flood the building.

					In the first sample input case, you can connect junctions 1 and 5 at a cost of 3, plug the open holes in junction 2, and set the pressure so that the water flows up to junction 7 only. The water will fill junctions 1, 2, 5, 6 and 7, and will flow no higher. A different (more expensive) solution would be to simply plug all the holes at a total cost of 5, and let the water flow through all the junctions. You cannot solve this case by connecting junctions 1 and 6 and plugging holes in junctions 2 and 5, since junction 6 has no open holes to which a new pipe can be connected.

					Assume existing pipes and any new pipes do not interfere with each other or with any junctions, except those to which they are connected. That is, even if a straight line from junction A to junction B passes through junction C, any pipe from A to B will not touch C.";"The first line of each test case contains two integers N and M, where N (2 ≤ N ≤ 400) is the number of junctions in the building (numbered 1 through N) and M (0 ≤ M ≤ 50 000) is the number of existing usable pipes. Each of the next N lines contains four integers xi , yi , zi , and ki satisfying −10 000 ≤ xi , yi , zi ≤ 10 000 and 0 ≤ ki ≤ 400, i = 1, 2, ..., N. The ith line describes junction i: (xi , yi , zi) is the location of the ith junction where the z-axis is the vertical axis; ki indicates the number of open holes in the junction. Each of the next M lines contains two integers aj and bj satisfying 1 ≤ aj < bj ≤ N. The jth line indicates that pipe j connects junctions aj and bj . At most one pipe connects any pair of junctions, and no two junctions share the same coordinates. The source is junction 1, and the destination is junction N.";For each case, display the case number. Then if suitable new pipes and plugs can be used to construct the desired system, display the minimum cost of connecting the source junction to the destination junction, accurate to four decimal places. If it is impossible to connect the source to the destination, display the word 'impossible'.;True;1 / 10;6;4;66.67%
2212;Room Service;Ad-Hoc;1;"You are working for a company designing cute, funny robot vacuum cleaners. At a high level, the robots’ behavior is divided into three modes:

					
						Exploration
						Vacuuming
						Rampant Killing
					

					Unfortunately, while consumer testing shows that the last two modes are working perfectly, the exploration mode still has bugs. You’ve been put in charge of debugging.

					At the beginning of the exploration mode, the robot is placed into a convex polygonal room. It has sensors that should tell it where all the walls are. Your job is to write a program that verifies that these readings are correct. To do this, the robot needs to physically touch every wall in the room.

					Your problem is this: given the shape of a convex polygonal room with N walls and a starting point P inside it, determine the shortest route that touches each wall and then returns to P. Touching a corner counts as touching both incident walls.";Each test case starts with a line containing the number of vertices N of the polygon (3 ≤ N ≤ 100) and the integer coordinates Px and Py of the robot’s starting point (−10 000 ≤ Px, Py ≤ 10 000). This is followed by N lines, each containing two integers x, y (−10 000 ≤ x, y ≤ 10 000) defining a vertex of the polygon. Vertices are given in counterclockwise order, all interior angles are less than 180 degrees, the polygon does not self-intersect, and the robot’s starting point is strictly inside the polygon;For each test case, display the case number and the length of the desired route, accurate to two decimal places.;False;1 / 10;1;1;100.00%
2213;A Safe Bet;Ad-Hoc;7;"Safe Ltd. is a company that manufactures high-quality safes. Its latest invention is an optical closure mechanism that uses a laser beam passing through a rectangular grid with several mirrors.

					 
					When the laser is activated, a beam enters the top row of the grid horizontally from the left. The beam is reflected by every mirror that it hits. Each mirror has a 45 degree diagonal orientation, either / or \ . If the beam exits the bottom row of the grid horizontally to the right, it is detected and the safe opens (see the left side of the figure above). Otherwise the safe remains closed and an alarm is raised.

					Each safe has a missing mirror, which prevents the laser beam from traveling successfully through the grid (see the right side of the figure above). The safe has a mechanism that enables the user to drop a single mirror into any empty grid cell. A legitimate user knows the correct position and orientation of the missing mirror ( / in row 4 column 3 above) and can thus open the safe. Without this knowledge the user has to guess correctly, which can be difficult for safes with large grids.

					Your job is to determine if particular safes are actually secure. A secure safe does not open right away without inserting a mirror, and there is at least one valid location and orientation for the missing mirror. There may indeed be multiple such locations and orientations.";Each test case describes a single safe and starts with a line containing four integer numbers r, c, m, and n (1 ≤ r, c ≤ 1 000 000 and 0 ≤ m, n ≤ 200 000). The mechanism’s grid has r rows and c columns. Each of the next m lines contains two integer numbers ri and ci (1 ≤ ri ≤ r and 1 ≤ ci ≤ c) specifying that there is a / mirror in row ri column ci . The following n lines specify the positions of the \ mirrors in the same way. The m + n positions of the mirrors are pairwise distinct.;"For each test case, display its case number followed by:

					
						0 if the safe opens without inserting a mirror.
						k r c if the safe does not open without inserting a mirror, there are exactly k positions where inserting a mirror opens the safe, and (r, c) is the lexicographically smallest such row, column position. A position where both a / and a \ mirror open the safe counts just once.
						'impossible' if the safe cannot be opened with or without inserting a mirror.";True;7 / 10;18;6;33.33%
2214;Shortest Flight Path;Ad-Hoc;1;"Commercial flights are statistically quite safe (in terms of number of deaths per passenger-kilometer, only going to the moon is safer). But there are still reasons for precautions and safety regulations. An early such rule was the so-called “60-minute rule,” which required that a two-engine plane must always be within 60 minutes of the nearest adequate airport along its entire flight path. A variety of similar rules have existed, but at their core, they remain the same: the flight path can not take the airplane more than a certain maximum allowed distance from the nearest airport. With these restrictions, planes cannot always use a direct route for flying from one airport to another.

					In this problem we will compute the shortest flight path between two airports while adhering to a maximum allowed distance rule. In the figure below, which illustrates the first sample test case, any flight route has to stay within the three circles. Thus a plane going from airport 2 to airport 3 has to detour from the direct route via the region around airport 1. Note that the plane would not necessarily have to go to airport 1 itself.
 
					 

					Things are further complicated by the fact that planes have limited fuel supply, and to go longer distances they may need to make a stopover at intermediate airports. Thus, depending on the fuel capacity, a plane going from airport 2 to airport 3 in the figure might have to stop over at airport 1 (or the fuel capacity might be too low even to go to airport 1, in which case the trip would be impossible to make).

					We make the following simplifying assumptions:

					
						The surface of the earth is a sphere of radius 6370 km.
						Both time and fuel consumption are directly proportional to distance traveled. In other words we are interested only in total distance traveled.
						The difference in distance caused by planes flying at different altitudes is negligible. Thus, effectively, we assume them to be flying along the earth’s surface.
						A plane may stop for refueling at as many intermediate airports as needed, each time getting a full tank.";"The first line of each test case contains two integers N and R, where 2 ≤ N ≤ 25 is the number of airports and 1 ≤ R ≤ 10 000 is the maximum allowed flight distance (in km) from the nearest airport. Each of the next N lines contains two integers φ, θ satisfying 0 ≤ φ < 360 and −90 ≤ θ ≤ 90, the longitude and latitude (respectively) of an airport, in degrees. The airports are numbered according to their order in the input starting from one. No two airports are at the same position.

					Following this is a line containing an integer Q, satisfying 1 ≤ Q ≤ 100. Each of the next Q lines contains three integers s, t, c satisfying 1 ≤ s, t ≤ N, s != t, and 1 ≤ c ≤ 50 000, indicating a plane going from airport s to airport t with a fuel capacity yielding a range of c km.";"For each test case, display the case number followed by one line for each query containing the length in km of the shortest flight path between airport s and t, subject to the fuel constraint c. Display the length accurate to three decimal places. If there is no permissible path between the two airports, then display the word impossible instead.

					You may assume the answer is numerically stable for perturbations of up to 0.1 km of R or c.";True;1 / 10;5;3;60.00%
2215;Stacking Plates;Ad-Hoc;1;"The Plate Shipping Company is an Internet retailer that, as their name suggests, exclusively sells plates. They pride themselves in offering the widest selection of dinner plates in the universe from a large number of manufacturers.

					In a recent cost analysis the company has discovered that they spend a large amount of money on packing the plates for shipment. Part of the reason is that plates have to be stacked before being put into shipping containers. And apparently, this is taking more time than expected. Maybe you can help.

					A shipment of plates consists of plates from several manufacturers. The plates from each manufacturer come stacked, that is, each arranged in a single stack with plates ordered by size (the smallest at the top, the largest at the bottom). We will call such a stack properly ordered. To ship all these plates, you must combine them into a single stack, again properly ordered. To join the manufacturers’ stacks into a single stack, two kinds of operations are allowed:

					
						Split: a single stack can be split into two stacks by lifting any top portion of the stack and putting it aside to form a new stack.
						Join: two stacks can be joined by putting one on top of the other. This is allowed only if the bottom plate of the top stack is no larger than the top plate of the bottom stack, that is, the joined stack has to be properly ordered.
					

					Note that a portion of any stack may never be put directly on top of another stack. It must first be split and then the split portion must be joined with the other stack. Given a collection of stacks, you have to find the minimum number of operations that transforms them into a single stack. The following example corresponds to the sample input, and shows how two stacks can be transformed to a single stack in five operations:";Each test case starts with a line containing a single integer n (1 ≤ n ≤ 50), the number of stacks that have to be combined for a shipment. This is followed by n lines, each describing a stack. These lines start with an integer h (1 ≤ h ≤ 50), the height of the stack. This number is followed by h positive integers that give the diameters of the plates, from top to bottom. All diameters are at most 10 000. These numbers will be in non-decreasing order.;For each test case, display the case number and the minimum number of operations (splits and joins) that have to be performed to combine the given stacks into a single stack.;True;1 / 10;35;5;14.29%
2216;Takeover Wars;Ad-Hoc;10;"You are studying a takeover war between two large corporations, Takeover Incorporated and Buyout Limited. Each of these corporations controls a number of subsidiaries. The aim in this war is simply to drive the competition out of the market. There are N subsidiaries of Takeover Incorporated and M subsidiaries of Buyout Limited, and you know the market value of each subsidiary.

					Each company can designate one of its subsidiaries to perform a takeover. The takeover can either be friendly or hostile. A friendly takeover means a subsidiary of a corporation merges with a different subsidiary of the same corporation. The market value of the merged subsidiary is the sum of the market values of the constituent subsidiaries. There is no constraint on the relative sizes of the subsidiaries participating in a friendly takeover.

					A hostile takeover means a subsidiary A of a corporation attempts to take over a subsidiary B of the other corporation. For this to succeed, the market value of A has to be greater than the market value of B. After this move, B disappears from the market. The market value of A does not change (the gain of incorporating B’s assets is offset by the monetary cost of the takeover). For simplicity we assume that no sequence of moves leads to two subsidiaries of different corporations having the same market value.

					The companies take turns making moves in this takeover war, with Takeover Incorporated going first. A company will do nothing on its turn only if it cannot make a takeover. A company loses the takeover war if all its subsidiaries are taken over.

					Your aim is to learn which company can guarantee a victory from this war. In the first case of the sample data, Takeover Incorporated can simply take over one of the companies of Buyout Limited in its first move with the 7-value subsidiary. Then it will lose one of its small (1-value) subsidiaries to a hostile takeover, and then it will take over the second subsidiary of Buyout Limited. In the second case, Takeover has to make a friendly takeover in its first move. Buyout Limited will join its two subsidiaries into a single company with market value 10. Takeover will have to make a friendly takeover again (as again it will not have a large enough subsidiary to take over Buyout’s giant). Now Takeover will have two subsidiaries, valued either 9 and 3 or 6 and 6. In either case, Buyout takes over one of these subsidiaries, Takeover has to pass, and Buyout takes over the other one.";Each test case is described by three lines of input. The first line contains two numbers 1 ≤ N ≤ 105 and 1 ≤ M ≤ 105 denoting respectively the number of subsidiaries of Takeover Incorporated and Buyout Limited. The next line lists the N sizes ai of the subsidiaries of Takeover Incorporated (1 ≤ ai ≤ 1012), and the third line lists the M sizes bj of the subsidiaries of Buyout Limited (1 ≤ bj ≤ 1012).;For each test case, display the case number and either the phrase 'Takeover Incorporated' or the phrase 'Buyout Limited' depending on who wins the takeover war if both corporations act optimally.;False;10 / 10;68;16;23.53%
2217;Nove;Ad-Hoc;2;"Paulo Bruno é um menino que adora Pokemons, porém odeia matemática, ele detesta exponenciação e por algum motivo
          não calcula corretamente operações que envolvam o número 9. Sabendo disso, seu amigo Werlesson
          decidiu fazer um desafio, ele quer que Paulo Bruno calcule
          a N-ésima potência de 9 e diga o último dígito dessa potência. Por exemplo,
          sendo N=2,
          o resultado seria 1, pois 92=81. O problema é
          que, dependendo do valor de N, o resultado da exponenciação pode
          ser um número muito grande. Sem ideias, Paulo Bruno decidiu pedir sua ajuda.";"A entrada é composta por
          diversas instâncias. A primeira linha da entrada contém um inteiro T
          indicando o número de instâncias.
          Cada instância é composta por apenas uma linha, que contêm o número
          inteiro N(0 ≤ N ≤ 109).";Para cada instância na entrada, imprima uma linha contendo um inteiro, o último dígito de 9N.;False;2 / 10;1413;810;57.32%
2218;O Temível Evil-Son;Matemática;1;"Em um lugar muito distante existe um reino pacífico chamado Lá-Ara.
          Seu governante, o rei Naldo, mestre pokemon experiente,
          está em apuros. Um raro pokemon matemático chamado
          Evil-Son invadiu o seu território e ameaçou destruir todo
          o reino caso ninguém resolvesse o desafio descrito a seguir.

          Um conjunto de retas no plano está em posição geral
            se não existe duas retas paralelas e também
            não existe três retas que se interceptam em um mesmo ponto.
            A seguir, temos na figura (A) um conjunto de retas em posição
            geral, já o conjunto de retas na figura (B) não está em posição geral.

          
            
          

          O desafio consiste em computar o número de regiões no plano
            formadas por um conjunto de N retas em posição geral.
            O rei Naldo conta com a sua habilidade, em matemática e programação,
            para salvar o reino de Lá-Ara do temível Evil-Son.";"A entrada é composta por
            diversas instâncias. A primeira linha da entrada contém um inteiro T
            indicando o número de instâncias.
            Cada instância é composta de uma única linha que contém o número N
            representando o número de retas no conjunto.";"Para cada instância na entrada, imprima uma única linha contendo o 
            número de regiões formadas no plano pelas retas do conjunto.";True;1 / 10;615;470;76.42%
2219;Passando Pelos PokeStops;Ad-Hoc;7;"Rhayane adora cálculo, e claro, também adora pokémons. Ela
          acredita que seus conhecimentos matemáticos ajudarão na sua
          jornada de treinadora pokémon. Num momento ela se encontra num
          longo caminho em linha reta com vários PokeStops no caminho,
          Rhayane deseja saber qual a maior distância que ela irá andar sem
          achar nenhum PokeStop e pediu sua ajuda para essa tarefa.

        Dado o comprimento do caminho em metros e dadas as distâncias, também em
          metros, dos PokeStops até a posição inicial que Rhayane está (onde ela está
          não tem nenhum PokeStop) faça um programa que determine tal distância. Por
          exemplo, se as distâncias são: {2, 4, 5, 1} e o caminho tem 7 metros, então a
          maior distância que ela andará sem encontrar nenhum PokeStop é 2 metros
          (entre 2 e 4, ou 5 e 7).";"A entrada é composta por diversas instâncias. A primeira linha da
          entrada contém um inteiro T (1 ≤
          T ≤ 20) indicando o número de instâncias.
        Para cada instância do problema será dada uma linha composta de dois
          inteiros n e m (1 ≤
          n, m ≤ 105) que representam
          respectivamente o comprimento do caminho e o número de PokeStops no
          caminho.
        
        Depois haverá uma linha onde serão dados m inteiros
          representando distâncias de vários PokeStops à posição inicial de
          Rhayane. A distância de um PokeStop à posição inicial de Rhayane é
          sempre menor ou igual que 106.";"Para cada instância um único inteiro que é a máxima distância que
          Rhayane irá percorrer sem encontrar um PokeStop. Deve haver apenas
          uma quebra de linha entre a saída de cada instância.";False;7 / 10;433;130;30.02%
2220;Ajudando Gust-Avô;Paradigmas;8;"K-rina é uma jovem mestre pokemon que gosta de ajudar pokemons
          anciãos. Em uma de suas últimas caçadas, ela capiturou um velho,
          dislexo e gago pokemon escritor, chamado Gust-Avô. Por causa de
          sua gagueira e dislexia, Gust-Avô quando escreve uma palavra, as
          vezes repete letras e/ou adiciona caracteres não pertencentes a 
          palavra que deseja escrever. K-rina quer ajudá-lo interpretando
          seus textos. Para isso precisa resolver o problema descrito abaixo.

        Dados, A e B duas sequências de letras, nós dizemos
          que B é uma
          subsequência de A se nós podemos encontrar todas as
          letras de B em A, na mesma ordem em que elas aparecem em B, não
          necessariamente adjacentes. Por exemplo, abc é subsequência de
            xaywbzc, enquanto xyz não é subsequência de xabzcy.

          Dado uma sequência B, nós definimos Bi como sendo
            uma sequência onde cada caractere de B aparece i
            vezes. Por exemplo, se B=xyzzx, então
            B3=xxxyyyzzzzzzxxx.

          Para ajudar K-rina e Gust-Avô, sua tarefa é, dado duas sequências
            A e B, encontrar o maior valor i, tal que
            Bi é uma subsequência de A.";"A entrada é composta por
            diversas instâncias. A primeira linha da entrada contém um inteiro T
            indicando o número de instâncias.

          Cada instância é composta de duas linhas. A primeira linha
            de cada instância contêm uma sequência de letras que
            representa A (|A| ≤ 105) e a segunda linha
            ontêm uma sequência de letras que representa B (|B| ≤ 104).";"Para cada instância na entrada, imprima uma única linha contendo o
            maior valor inteiro i, tal que Bi é subsequência
            de A. Caso B não seja subsequencia de A, imprima 0 (zero).";False;8 / 10;649;172;26.50%
2221;Batalha de Pomekons;Iniciante;2;"Depois de capturar muitos Pomekons, Dabriel e Guarte resolveram batalhar. A forma de duelo é simples, cada treinador coloca um Pomekon na batalha e vence quem tem o Pomekon com maior valor de golpe, que é definido da seguinte maneira:

        

        O Bônus será dado ao Pomekon do treinador que estiver em um level de valor par.

        Neste problema será dado a você o valor do bônus aplicado, os valores de ataque e defesa do Pomekon de Dabriel e Guarte e seus respectivos níveis, cabe a você informar o ganhador da batalha.";"A entrada é composta por
          diversas instâncias. A primeira linha da entrada contém um inteiro T
          indicando o número de instâncias.

          Cada instância começa com um inteiro B (0 ≤
          B ≤ 100), que indica o valor do bônus aplicado. Nas
          duas linhas seguintes terão três inteiros Ai,
          Di e Li (1 ≤ Ai,
          Di ≤ 100, 1 ≤ Li ≤ 50),
          representado o valor de ataque do Pomekon, o valor de defesa e o
          level do treinador. A primeira linha representa o Pomekon de Dabriel
          e a segunda o de Guarte.";"Para instância na entrada você deverá imprimir o nome do treinador que irá vencer a batalha, em caso de empate imprima: ""Empate"", sem aspas.";True;2 / 10;5953;3186;53.52%
2222;Brincando com Conjuntos;Iniciante;8;"Dabriel é um menino fissurado por matemática, ele acaba de aprender em sua escola operações sobre conjuntos.
          Após passar a tarde toda brincando com alguns conjuntos que ele possui, chega a hora de resolver as lições de casa, porém ele já está muito cansado e com medo de que possa cometer alguns erros, solicitou sua ajuda.

        Dabriel deseja um programa de computador que dado N conjuntos e os elementos de cada conjunto, ele possa realizar algumas operações, são elas:

        1 X Y: Retorna a quantidade de elementos distintos da intersecção entre o conjunto X com o Y.

        2 X Y: Retorna a quantidade de elementos distintos da união entre o conjunto X com o Y.";"A entrada é composta por
          diversas instâncias. A primeira linha da entrada contém um inteiro T
          indicando o número de instâncias.

          Cada instância inicia com um inteiro N (1 ≤
          N ≤ 10⁴), representando a quantidade de conjuntos
          que Dabriel possui. As próximas N linhas começam com
          um inteiro Mi (1 ≤ Mi ≤ 60), que
          indica o total de elementos que o conjunto i possui,
          segue então Mi inteiros Xij (1 ≤
          Xij ≤ 60), que representam o valor de cada elemento.
          Na próxima linha contém um inteiro Q (1 ≤
          Q ≤ 10⁶), representando quantas operações Dabriel
          deseja realizar. Nas próximas Q linhas terá a
          descrição de uma operação.";Para cada operação seu programa deverá imprimir a quantidade de elementos, conforme explicado na descrição.;False;8 / 10;6336;1186;18.72%
2223;Inventário de Pomekon;Estruturas e Bibliotecas;9;"Depois de capturar diversos Pomekons, Dabriel resolveu separá-los em diversas pilhas e aplicar algumas operações sobre elas. Como todos já sabem, Dabriel é um Mestre Pomekon, então seus conhecimentos com programação são bem limitados, com isso ele solicitou sua ajuda para resolver o problema dele.

        Dabriel deseja realizar Q operações nas pilhas, cada operação poderá ser de 2 tipos, como descrito abaixo:

        1 X Y K: Retorna a quantidade de Pomekons que existiam no intervalo entre as posições X e Y, após a K-ésima operação do tipo 2. É garantido que a K-ésima operação já terá sido feita.

        2 X W: Atualiza o total de Pomekons da pilha X com o valor W.";"A entrada é composta por
          diversas instâncias. A primeira linha da entrada contém um inteiro T
          indicando o número de instâncias.
          Cada instância inicia com um inteiro N (1 ≤
          N ≤ 10⁵), representando a quantidade de pilhas
          existentes. A segunda linha terá N inteiros
            pi (1 ≤ pi ≤ 10⁵), representando quantos
          Pomekons existem na pilha i.
          Na próxima linha haverá um inteiro Q (1 ≤
          Q ≤ 10⁵), que representa a quantidade de operações
          que serão realizadas. Seguirão Q linhas,
          representando as Q operações realizadas.";Para cada operação do tipo 1, imprima uma única linha contendo a quantidade de Pomekons que existem entre as pilhas X e Y após a K-ésima operação.;False;9 / 10;351;110;31.34%
2224;Torneio de Pomekon;Paradigmas;4;"Será realizado em sua cidade um grande torneio de Pomekon, onde todos os grandes Mestres irão disputar batalhas. A equipe organizadora do evento não contava com a grande quantidade de inscrições, portanto a equipe modificou um pouco as regras do torneio.

As invés de cada Mestre Pomekon participar sozinho das batalhas, serão formadas duplas, a seleção dos pares será feita pela equipe organizadora, pois como todos já sabem os Mestres Pomekons são solitários em suas jornadas, assim nenhum participante conhece o outro.

Os participantes do torneiro gostaram da nova regra no torneiro, mas ficaram preocupados de não conhecer seu parceiro e acabar não conseguindo um bom desempenho na competição, portanto foi decidido que as duplas seriam formadas por pessoas que morem o mais perto possível, assim ficaria fácil os Mestres Pomekons treinarem antes do grande dia.

Sua tarefa nesse problema é formar duplas de forma que a soma das distâncias entre as casas de cada dupla seja a menor possível. Em outras palavras, seja X1 a distância entre os membros da equipe 1 e X2 a distância entre os membros da equipe 2, você deverá minimizar o valor de X1 + X2.";"A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias.
Cada instância inicia com um inteiro par N (1 < N ≤ 16), que corresponde a quantidade de Mestre Pomekons inscritos. Nas próximas N linhas terão dois inteiros Xi, Yi (0 ≤ Xi, Yi ≤ 1000), descrevendo a coordenada da casa do participante i.";Para cada instância imprima a soma das distâncias das casas de todas as duplas, com duas casas decimais.;False;4 / 10;170;113;66.47%
2225;Penalização;Grafos;10;"No jogo Pomekon, um dos objetivos é visitar lugares reais para conseguir novos itens e experiência. Como Fulyane não gosta muito de sair de casa, ela fez um programa que simula sua localização, fornecendo falsas coordenadas de sua localização para o jogo. Ela também fez um controle, que faz com que ela possa se movimentar nas coordenadas falsas, simulando como se estivesse realmente caminhando, porém sem sair de casa.

Pesquisando em fóruns, viu que para não ser banida do jogo, teria que se mover utilizando apenas as rotas reais, porém, também viu que podia se mover instantaneamente de um lugar para outro, sem utilizar as rotas reais, no máximo K vezes por dia, pois caso ela se teletransportar além de K vezes, poderia ser banida do jogo para sempre.

Fulyane começa sempre no lugar identificado pelo índice 1, e quer visitar todos os demais o mais rápido possível, se teletransportando no máximo K vezes.";A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância contém três inteiros N (1 ≤ N ≤ 15), M (1 ≤ M ≤ N2) e (0 ≤ K ≤ 5), representando, respectivamente, a quantidade de lugares, quantidade de  rotas e a quantidade máximo permitida de teletransportes. Então seguiram M linhas, cada uma contendo três inteiros A, B e C (1 ≤ C ≤ 30000), representando que uma rua conecta os lugares A e B, e Fulyane demora C minutos para ir de A até B utilizando esta rua.;Para cada instância, imprima a quantidade mínima de minutos para Fulyane visitar todos os N lugares utilizando, no máximo, K teletransportes. Caso não seja possível visitar os N lugares, imprima -1.;False;10 / 10;641;89;13.88%
2226;Fabrica de Balões;Paradigmas;10;Dâmião acabou de ser contratado como gerente da linha de produção de uma fabrica que produz os balões comercializados em Nlogonia. Dâmião quer mostrar serviço, e para isso aumentou e muito a produção da fabrica. Os balões produzidos por tal fabrica são empacotados e cada pacote recebe um código de identificação de até 18 dígitos, no processo de otimização da produção Dâmião fez com que o código do primeiro pacote fosse o numero 0, e para cada pacote produzido a partir de então, seu código seria o valor do ultimo pacote somado de uma unidade. Porém um imprevisto aconteceu, Dâmião não é natural da Nlogonia, por tanto não conhecia as superstições locais, e somente depois que vários pacotes foram produzidos foi alertado de que existem alguns números que são tidos com mal agouro para os habitantes de Nlogonia, e por este motivo nenhum pacote em que o numero aparece em seu código pode ser comercializado, independente do numero ser todo o código do produto ou apenas uma sub string do mesmo. Por exemplo, supondo que o numero 13 é tido como mal agouro, e ultimo pacote produzido foi o de código 130, somente os pacotes 13 e 130 não podem ser comercializados. Agora Dâmião quer saber o prejuízo que ele causou a empresa, e para isso ele precisa de sua ajuda;A entrada é composta de diversos casos de teste. Cada caso de teste começa com uma linha com os inteiros N (0 ≤ N ≤ 1018 ) que representa o código do ultimo pacote produzido. A linha seguinte contem um inteiro M ( 0 ≤ M ≤ 5000 ) que representa a quantidade de números tidos como mal agouro, segue então M inteiros Ci ( 0 ≤ Ci ≤ 1018 ) representando o i-ésimo numero que não pode aparecer em qualquer código. O final da entrada é representado pelo caso onde N = 0 e não deve ser processado.;Para cada caso de teste seu programa deve imprimir uma linha contendo o numero de pacotes que não poderão ser comercializados;False;10 / 10;283;46;16.25%
2227;Aeroporto;Ad-Hoc;6;"A crescente utilização do transporte aéreo preocupa os especialistas, que prevêem que o congestionamento em aeroportos poderá se tornar um grande problema no futuro. Os números atuais já são alarmantes: relatórios oficiais demonstram que na Europa, em junho de 2001, houve uma média de 7.000 atrasos de vôos por dia. Preocupada com a previsão dos seus especialistas em trá- fego aéreo, a Associação de Transporte Aéreo Internacional (ATAI) está começando um estudo para descobrir quais são os aeroportos onde o tráfego aéreo pode vir a ser mais problemático no futuro.

Como programador recém contratado pela ATAI você foi encarregado de escrever um programa para determinar, a partir de uma listagem de aeroportos e vôos, qual aeroporto possui maior probabilidade de congestionamento no futuro. Como medida da probabilidade de congestionamento será utilizado neste estudo o número total de vôos que chegam ou que partem de cada aeroporto.";A entrada é composta de vários conjuntos de teste. A primeira linha de um conjunto de teste contém dois números inteiros A (0 ≤ A ≤ 100) e V (0 ≤ V ≤ 10000), que indicam respectivamente o número de aeroportos e o número de vôos. Os aeroportos são identificados por inteiros de 1 a A. As V linhas seguintes contêm cada uma a informação de um vôo, representada por um par de números inteiros positivos X e Y (1 ≤ X ≠ Y ≤ A), indicando que há um vôo do aeroporto X para o aeroporto Y. O final da entrada é indicado quando A = V = 0.;Para cada conjunto de teste da entrada seu programa deve produzir três linhas. A primeira linha identifica o conjunto de teste, no formato “Teste n”, onde n é numerado a partir de 1. A segunda linha deve conter o identificador do aeroporto que possui maior tráfego aéreo. Caso mais de um aeroporto possua este valor máximo, você deve listar todos estes aeroportos, em ordem crescente de identificação, e separados por pelo menos um espaço em branco. A terceira linha deve ser deixada em branco. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.;False;6 / 10;2668;595;22.30%
2228;Caça ao Tesouro;Ad-Hoc;8;"Quando limpavam o porão da casa recentemente herdada, os primos João e José descobriram um antigo mapa guardado no baú que havia sido de seu bisavô. O mapa parecia descrever uma ilha, era muito antigo, e em meio a indicações de caminhos pela ilha, continha apenas um nome: Huyn Chong Chong. Curiosos, João e José pesquisaram o nome na bilbioteca do colégio e na Internet. Para sua surpresa e excitação, o nome era relacionado a uma antiga lenda de um tesouro escondido por piratas no século XVIII.

Encantados com a lenda, os primos acreditaram ter encontrado o mapa que os levaria ao tesouro, escondido na ilha de Huyn Chong Chong, próximo à Coréia do Sul. O tesouro, dizia a lenda, continha uma arca cheia de pedras preciosas muito raras e valiosas. Certos de que encontrariam o tesouro, os primos embarcaram rumo à ilha. Cada um dos primos se imaginava mais esperto do que o outro, e acreditava que encontraria o tesouro primeiro. Assim, eles combinaram que cada um ficaria com a parte do tesouro que encontrasse. Os primos então se separaram, e começaram a procurar o tesouro, especialmente a arca. Cada um dos primos tomou o caminho que imaginava que o levaria até a arca, e seguindo a indicação do mapa, ambos foram encontrando várias jóias pelo caminho. Coincidentemente, os dois primos cheragam ao mesmo tempo no local onde a arca estava escondida. Como os dois encontraram a arca ao mesmo tempo, eles tinham agora que decidir como dividir o tesouro. Depois de analisar algumas alternativas, os primos concordaram em fazer a divisão da seguinte forma. Cada um ficaria com a parte do tesouro que encontrou antes de chegar à arca, e o conteúdo da arca seria dividido de forma que os dois ficassem com partes do tesouro total de mesmo valor. Para fazer a divisão desta forma, ao chegar de volta ao Brasil, os primos mandaram avaliar cada jóia do tesouro. Contudo, eles estão agora em dúvida se é possível fazer a divisão conforme eles haviam combinado. Você, como amigo dos dois primos (agora milionários), e esperando receber alguma recompensa, dispôs-se a ajudá-los a descobrir se é possível fazer tal divisão.

São dados:

• o valor dos objetos coletados por João e por José antes de encontrarem a arca;

• uma lista de valores, correspondentes aos objetos encontrados dentro da arca.

Como as jóias são muito valiosas, estes valores são dados em unidades de R$ 1.000,00, ou seja, o valor 10 significa R$ 10.000,00. Você deve escrever um programa que determina se é possível dividir os objetos da arca de forma que, considerados também os valores dos objetos encontrados anteriormente (que ficarão com quem os encontrou), os primos recebam partes do tesouro com o mesmo valor.";Seu programa deve ler vários conjuntos de testes. A primeira linha de um conjunto de testes contém três números inteiros X (0 ≤ X ≤ 50), Y (0 ≤ Y ≤ 50) e N (0 ≤ N ≤ 100). Os valores X e Y representam respectivamente a soma dos valores encontrados por João e por José antes de chegarem à arca. O valor N indica o número de objetos encontrados na arca. Seguem-se N linhas, cada uma contendo um número inteiro V (1 ≤ V ≤ 100), correspondendo ao valor de um dos objetos da arca. O final da entrada é indicado por X = Y = N = 0.;Para cada conjunto de teste da entrada seu programa deve produzir três linhas na saída. A primeira linha deve conter um identificador do conjunto de teste, no formato “Teste n”, onde n é numerado a partir de 1. A segunda linha deve conter o caractere ‘S’ caso seja possível dividir o tesouro como combinado pelos dois primos, ou o caractere ‘N’ caso contrário. A terceira linha deve ser deixada em branco. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.;False;8 / 10;711;203;28.55%
2229;Dobradura;Ad-Hoc;3;"Zezinho tem aulas de Iniciação Artística em sua escola, e recentemente aprendeu a fazer dobraduras em papel. Ele ficou fascinado com as inúmeras possibilidades de se dobrar uma simples folha de papel. Como Zezinho gosta muito de matemática, resolveu inventar um quebra-cabeça envolvendo dobraduras. Zezinho definiu uma operação de dobradura D que consiste em dobrar duas vezes uma folha de papel quadrada de forma a conseguir um quadrado com 1/4 do tamanho original, conforme ilustrado na figura.

					

					Depois de repetir N vezes esta operação de dobradura D sobre o papel, Zezinho cortou o quadrado resultante com um corte vertical e um corte horizontal, conforme a figura abaixo.

					

					Zezinho lançou então um desafio aos seus colegas: quem adivinha quantos pedaços de papel foram produzidos?";A entrada é composta de vários conjuntos de teste. Cada conjunto de teste é composto de uma única linha, contendo um número inteiro N (-1 ≤ N ≤ 15) que indica o número de vezes que a operação de dobradura D foi aplicada. O final da entrada é indicado por  N = -1.;Para cada conjunto de teste da entrada seu programa deve produzir três linhas na saída. A primeira linha deve conter um identificador do conjunto de teste, no formato “Teste n”, onde n é numerado a partir de 1. A segunda linha deve conter o número de pedaços de papel obtidos depois de cortar a dobradura, calculado pelo seu programa. A terceira linha deve ser deixada em branco. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.;True;3 / 10;569;250;43.94%
2230;Pedágio;Ad-Hoc;7;"Como prêmio pela primeira colocação na Olimpíada Brasileira de Informática, Juquinha e sua família ganharam uma viagem de uma semana à Coréia do Sul. Como o país é deslumbrante, com tradições, cultura, arquitetura e culinária muito diferentes das do Brasil, o pai de Juquinha, o Sr. Juca, decidiu alugar um carro para conhecer melhor o país. As estradas são muito bem cuidadas; todas são de sentido duplo, e duas cidades podem ser ligadas diretamente por mais de uma estrada. No entanto, em todas as estradas paga-se um pedágio de valor fixo (há um pedágio em cada direção, entre duas cidades). Como o Sr. Juca não tem muito dinheiro para gastar, as viagens com o carro devem ser muito bem planejadas.

Escreva um programa que, conhecidas as cidades e estradas existentes no país, e a cidade onde Juquinha e sua família estão, encontre cada cidade (que não a cidade onde eles estão) que possa ser visitada por eles, dada a restrição de que o Sr. Juca deseja pagar no máximo P pedágios (considerando apenas a viagem de ida).";A entrada é composta de vários conjuntos de teste. A primeira linha de um conjunto de teste contém quatro números inteiros C (0 ≤ C ≤ 50), E (0 ≤ E ≤ 2500), L (0 ≤ L ≤ C) e P (0 ≤ P ≤ C). Os valores C e E indicam respectivamente o número de cidades e o número de estradas existentes. As cidades são identificadas por inteiros de 1 a C. os valores L e P indicam, respectivamente, a cidade onde a família de Juquinha está no momento e o número máximo de pedágios que o Sr. Juca está disposto a pagar. As E linhas seguintes contêm cada uma a informação de uma estrada, representada por um par de números inteiros positivos X e Y (1 ≤ X,Y ≤ C), indicando que há uma estrada (de sentido duplo) da cidade X para a cidade Y. O final da entrada é indicado por C = E = L = P = 0.;Para cada conjunto de teste da entrada seu programa deve produzir três linhas na saída. A primeira linha deve conter um identificador do conjunto de teste, no formato “Teste n”, onde n é numerado a partir de 1. Na segunda linha devem aparecer os identificadores das cidades que podem ser alcançadas, em ordem crescente, separados por pelo menos um espaço em branco. A terceira linha deve ser deixada em branco. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.;False;7 / 10;743;229;30.82%
2231;Temperatura Lunar;Ad-Hoc;6;"Sem as proteções da atmosfera e do cinturão magnético que existem na Terra, a Lua fica exposta ao ataque do Sol, que é um astro em constante explosão atômica. As explosões do Sol emitem ondas letais de partículas. Uma pessoa que ficasse desprotegida na superfície da Lua, num lugar onde o Sol incidisse diretamente, sofreria um bombardeio radioativo tão intenso quanto se estivesse nas imediações da usina russa de Chernobyl no momento do acidente que matou 31 pessoas, em 1986. Além da radiação solar, outro efeito desta falta de proteção contra o Sol que existe na Lua é a enorme variação de temperatura. Nas regiões próximas do equador lunar, a variação de temperatura é brutal, passando de cerca de 130 graus positivos durante o dia a 129 graus negativos à noite.

Para estudar com mais precisão as variações de temperatura na superfície da Lua, a NASA enviou à Lua uma sonda com um sensor que mede a temperatura de 1 em 1 minuto. Um dado importante que os pesquisadores desejam descobrir é como se comporta a média da temperatura, considerada em intervalos de uma dada duração (uma hora, meia hora, oito horas, etc.). Por exemplo, para a seqüência de medições 8, 20, 30, 50, 40, 20, -10, e intervalos de quatro minutos, as médias são respectivamente 108/4=27, 140/4=35, 140/4=35 e 100/4=25.

Você foi recentemente contratado pela NASA, e sua primeira tarefa é escrever um programa que, conhecidos a seqüência de temperaturas medidas pelo sensor, e o tamanho do intervalo desejado, informe qual a maior e qual a menor temperatura média observadas, considerando o tamanho do intervalo dado. ";A entrada é composta de vários conjuntos de teste. A primeira linha de um conjunto de teste contém dois números inteiros positivos N (0 ≤ N ≤ 10000) e M (1 ≤ M ≤ N), que indicam respectivamente o número total de medições de temperatura (-200 ≤ temperatura ≤ 200) de uma seqüência obtida pelo sensor, e o tamanho dos intervalos, em minutos, em que as médias devem ser calculadas. As N linhas seguintes contêm um número inteiro cada, representando a seqüência de medidas do sensor. O final da entrada é indicado quando N = M = 0.;Para cada conjunto de teste da entrada seu programa deve produzir três linhas. A primeira linha identifica o conjunto de teste, no formato “Teste n”, onde n é numerado a partir de 1. A segunda linha deve conter dois números inteiros X e Y, separados por ao menos um espaço em branco, representando respectivamente os valores da menor e da maior média de temperatura, conforme determinado pelo seu programa. O valor da média deve ser truncado, se a média não for um número inteiro (ou seja, deve ser impressa apenas a parte inteira). A terceira linha deve ser deixada em branco. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.;False;6 / 10;1369;323;23.59%
2232;Triângulo de Pascal;Matemática;1;"O triângulo de Pascal (alguns países, nomeadamente em França, é conhecido como Triângulo de Tartaglia) é um triângulo numérico infinito formado por números binomiais , onde n representa o número da linha e k representa o número da coluna, iniciando a contagem a partir do zero. O triângulo foi descoberto pelo matemático chinês Yang Hui, e 500 anos depois várias de suas propriedades foram estudadas pelo francês Blaise Pascal. Cada número do triângulo de Pascal é igual à soma do número imediatamente acima e do antecessor do número de cima.

					

					David, o fera do seu time de programação competitiva, descobriu que a soma da i-ésima linha de um triângulo de pascal é 2i. Ele quer agora descobrir a soma do triângulo inteiro, de N linhas. Mas como ele achou que este problema era muito trivial para merecer a atenção dele, ele decidiu tentar resolver um problema sobre grafos bipartidos (um tópico muito mais difícil) e assim, sobrou para você encontrar a solução deste problema.";A primeira linha da entrada contém um inteiro T, o número de casos de teste. As próximas T linhas contêm um inteiro N (1 ≤ N ≤ 31), o número de linhas do Triângulo de Pascal.;Para cada caso de teste, a saída deve conter uma linha com um inteiro S, a soma do triângulo de pascal de N linhas.;True;1 / 10;1978;1547;78.21%
2233;Etiquetas Coloridas;Ad-Hoc;3;Temos uma etiqueta quadrada vermelha de lado inteiro R, uma quantidade ilimitada de etiquetas quadradas verdes de lado inteiro G e uma quantidade ilimitada de etiquetas quadradas azuis de lado inteiro B. Sempre podemos colar a etiqueta vermelha na parede. Uma etiqueta verde só pode ser colada na parede sobre a etiqueta vermelha e tem que estar inteiramente sobre ela. Uma etiqueta azul só pode ser colada na parede sobre uma única etiqueta verde e tem que estar inteiramente sobre ela. Não pode haver qualquer sobreposição de etiquetas da mesma cor e as bases de todas as etiquetas têm que estar na horizontal. Na figura ao lado, conseguimos colar 14 etiquetas na parede. Neste problema, seu programa deve computar a quantidade máxima de etiquetas que podemos colar na parede. Só um detalhe: os inteiros R, G, e B serão dados em hexadecimal e a resposta também deve ser em hexadecimal.;A entrada consiste de três linhas contendo, respectivamente, os inteiros R, G e B, 1 ≤ R, G, B ≤ ffffff. Todos os três inteiros na entrada estão em hexadecimal, com letras minúsculas.;Imprima uma linha na saída contendo um inteiro positivo, em hexadecimal com letras minúsculas, representando a quantidade máxima de etiquetas que podemos colar na parede.;True;3 / 10;662;393;59.37%
2234;Cachorros-Quentes;Iniciante;1;"Em 2012 foi alcançado um novo recorde mundial na famosa Competição de Cachorros-Quentes do Nathan: o campeão, Joey Chestnut, devorou 68 cachorros-quentes em dez minutos, um aumento
					incrível em relação aos 62 sanduíches devorados pelo mesmo Chestnut em 2011.
					 O restaurante Nathan’s Famous Corporation, localizado no Brooklyn, NY, é o responsável pela
					competição. Eles produzem deliciosos cachorros-quentes, mundialmente famosos, mas quando o assunto
					é matemática eles não são tão bons. Eles desejam ser listados no Livro de Recordes do Guinness,
					mas para isso devem preencher um formulário descrevendo os fatos básicos da competição. Em particular,
					eles devem informar o número médio de cachorros-quentes consumidos pelos participantes
					durante a competição.
					
					Você pode ajudá-los? Eles prometeram pagá-lo com um dos seus saborosos cachorros-quentes. Dados
					o número total de cachorros-quentes consumidos e o número total de participantes na competição,
					você deve escrever um programa para determinar o número médio de cachorros-quentes consumidos
					pelos participantes.";"A entrada consiste de uma única linha que contém dois inteiros H e P (1 ≤ H, P ≤ 1000) indicando
respectivamente o número total de cachorros-quentes consumidos e o número total de participantes
na competição.";"Seu programa deve produzir uma única linha com um número racional representando o número
médio de cachorros-quentes consumidos pelos participantes. O resultado deve ser escrito como um
número racional com exatamente dois dígitos após o ponto decimal, arredondado se necessário.";False;1 / 10;9563;6710;70.17%
2235;Andando no Tempo;Iniciante;1;"Imagine que você tenha uma máquina do tempo que pode ser usada no máximo três vezes, e a cada
uso da máquina você pode escolher voltar para o passado ou ir para o futuro. A máquina possui três créditos fixos; cada crédito representa uma certa quantidade de anos, e pode ser usado para ir essa quantidade de anos para o passado ou para o futuro. Você pode fazer uma, duas ou três viagens, e cada um desses três créditos pode ser usado uma vez apenas. Por exemplo, se os créditos forem 5, 12 e 9, você poderia decidir fazer duas viagens: ir 5 anos para o futuro e, depois, voltar 9 anos para o passado. Dessa forma, você terminaria quatro anos no passado, em 2012. Também poderia fazer três viagens, todas indo para o futuro, usando os créditos em qualquer ordem, terminando em 2042.
					 Neste problema, dados os valores dos três créditos da máquina, seu programa deve dizer se é ou não possível viajar no tempo e voltar para o presente, fazendo pelo menos uma viagem e, no máximo,
três viagens; sempre usando cada um dos três créditos no máximo uma vez.";A entrada consiste de uma linha contendo os valores dos três créditos A, B e C (1 ≤ A, B, C ≤ 1000).;Seu programa deve imprimir uma linha contendo o caracter “S” se  é poss ível viajar e voltar para o presente, ou “N” caso contrário.;False;1 / 10;9019;5406;59.94%
2236;Batata Quente;Paradigmas;10;"Batata quente é uma brincadeira bastante popular entre crianças na escola.  A brincadeira é simples:  a  criança  que  está  com  a  batata  a  joga  para  uma  outra  criança.   Em  algum  momento,  o  professor,  que  não  está  olhando  para  o  que  está  acontecendo,  irá  dizer  que  a  brincadeira  acabou.  Quando  isso acontece, a criança que está com a batata perde.
					Uma variação da brincadeira, jogada na fila da cantina, é proposta por um professor.  As crianças estão  numeradas  de  1  a  N  de  acordo  com  sua  posição  na  fila,  onde  a  criança  com  o  número  1  é  a primeira da fila.  Cada uma receberá um papel com um número, e sempre que receber a batata, deverá passá-la para a criança na posição anotada em seu papel.  O jogo termina com o professor vitorioso se       a batata chegar em uma posição menor ou igual a X na fila, com X definido no início da brincadeira.    Se  isso  nunca  acontecer,  o  jogo  nunca  termina,  porém  as  crianças  saem  vitoriosas:   no  dia  seguinte todas ganham um desconto na cantina.
					
					O  professor  começa  o  jogo  jogando  a  batata  para  alguma  criança  na  fila.   Como  sua  mira  não  é muito boa, ele só consegue garantir que vai jogar a batata para alguma criança em um invervalo L . . . R da fila com a mesma probabilidade.  Ele está considerando vários possíveis intervalos da fila para iniciar       a brincadeira. Para isso, o professor gostaria de descobrir, para cada um desses intervalos, qual o valor de  X  que  ele  deve  escolher  para  que  o  jogo  seja  o  mais  justo  possível,  ou  seja,  a  probabilidade  de  o jogo terminar seja a mais próxima possível da probabilidade de o jogo não terminar.
					
					
					Você  deve  auxiliar  o  professor  a  avaliar  as  propostas.   Dados  os  papéis  de  cada  criança  da  fila  e vários  intervalos  possíveis,  responda,  para  cada  intervalo,  o  valor  de  X  que  torne  o  jogo  mais  justo possível.  Se houver empate, responda o X  mais próximo do início da fila.";A  primeira  linha  da  entrada  contém  dois  inteiros,  N  e  Q  (2  ≤  N  ≤  50000,  1  ≤  Q  ≤  105).   A linha  seguinte  contém  N  inteiros  p1, p2 . . . pN  (1 ≤ pi ≤ N ),  os  valores  dos  papéis  recebidos  por  cada uma  das  crianças.   Seguem  então  Q  linhas,  cada  uma  com  dois  inteiros  L  e  R  (1  ≤  L  ≤  R  ≤  N ), representando um intervalo  considerado pelo  professor.;Imprima  Q linhas,  cada  uma  contendo,  para  cada  intervalo  considerado  pelo  professor,  o  número inteiro X  que o professor deverá escolher para que a brincadeira seja a mais justa possível.;False;10 / 10;692;176;25.43%
2237;Containers;Ad-Hoc;6;"O SBC–Sistema de Balanceamento de Containers precisa ser atualizado para funcionar com uma nova classe de navios, a “dois por quatro”, que são navios que podem carregar oito grandes containers numa disposição de duas linhas e quatro colunas, como mostrado na figura ao lado. Esses navios possuem um guindaste fixo que é capaz de realizar um único tipo de movimentação: levantar dois containers adjacentes, na linha ou na coluna, e trocá-los de posição. Para acelerar o carregamento nos portos, os oito containers são embarcados em qualquer uma das oito posições, definindo uma configuração inicial. Depois que o navio deixa o porto, o guindaste precisa mover os containers para deixá-los numa configuração final pré-definida para a viagem.

					O problema é que o custo de combustível para o guindaste realizar uma movimentação é igual à soma dos pesos dos dois containers adjacentes cujas posições foram trocadas. Dados os pesos dos containers em cada posição nas configurações inicial e final, o SBC precisa computar o custo total mínimo possível de uma sequência de movimentações que leve os containers da configuração inicial à configuração final.";A entrada consiste de quatro linhas contendo, cada uma, quatro inteiros entre 1 e 1000, inclusive. As duas primeiras linhas definem os pesos na configuração inicial e as duas últimas linhas, os pesos na configuração final. Sempre existe uma solução, pois os containers nas configurações inicial e final são os mesmos, com as posições possivelmente trocadas.;Seu programa deve produzir uma única linha contendo um inteiro, representando o custo total mínimo de uma sequência de movimentos que leve da configuração inicial à configuração final.;True;6 / 10;833;419;50.30%
2238;Divisores;Matemática;8;"Pense um número positivo n. Agora me diga um divisor A de n. Agora me dê um outro número B que não seja divisor de n. Agora um múltiplo C. E um não múltiplo D. O número que você pensou é...

Parece um truque de mágica, mas é matemática! Será que, conhecendo os números A, B, C e D, você consegue descobrir qual era o número original n? Note que pode existir mais de uma solução!

Neste problema, dados os valores de A, B, C e D, você deve escrever um programa que determine qual o menor número n que pode ter sido pensado ou concluir que não existe um valor possível.";A entrada consiste de uma única linha que contém quatro números inteiros A, B, C, e D, como descrito acima (1 ≤ A, B, C, D ≤ 109).;Seu programa deve produzir uma única linha. Caso exista pelo menos um número n para os quais A, B, C e D façam sentido, a linha deve conter o menor n possível. Caso contrário, a linha deve conter -1.;False;8 / 10;7228;1084;15.00%
2239;Estatística Hexa;Estruturas e Bibliotecas;8;"Dada uma sequência de inteiros positivos em hexadecimal, por exemplo, S = [9af47c0b, 2545557, ff6447979], definimos soma(S) como sendo a soma de todos os elementos de S. Considere agora uma certa permutação dos 16 dígitos hexadecimais, por exemplo, p = [4, 9, 5, a, 0, c, f, 3, d, 7, 8, b, 1, 2, 6, e]. A partir da sequência base S, podemos definir uma sequência transformada S[4] , que é obtida pela remoção de todas as ocorrêcias do dígito hexadecimal 4 de todos os inteiros em S, S[4] = [9af7c0b, 255557, ff67979]. Em seguida, podemos remover o dígito 9 e obter S[4,9] = [af7c0b, 255557, ff677]. Seguindo a ordem dos dígitos na permutação p, podemos definir dessa forma 16 sequências: S[4] , S[4,9] , S[4,9,5] ,...,S[4,9,5,a,0,c,f,3,d,7,8,b,1,2,6,e] . Estamos interessados em somar todos os elementos dessas 16 sequências:

total(S, p) = soma(S[4]) + soma(S[4,9]) + soma(S[4,9,5]) + ··· + soma(S[4,9,5,a,0,c,f,3,d,7,8,b,1,2,6,e])

Claramente, esse total depende da permutação p usada na remoção sucessiva. Dada uma sequência de N inteiros positivos em hexadecimal, seu programa deve computar, considerando todas as possíveis permutações dos 16 dígitos hexadecimais: o total mínimo, o total máximo e o somatório dos totais de todas as permutações. Para o somatório dos totais de todas as permutações, imprima o resultado módulo 3b9aca07 (109 + 7 na base 10).";A primeira linha da entrada contém um inteiro N, 1 ≤ N ≤ 3f, representando o tamanho da sequência. As N linhas seguintes contêm, cada uma, um inteiro positivo P, 0 ≤ P ≤ fffffffff, definindo a sequência inicial S de inteiros. Todos os números na entrada estão em hexadecimal, com letras minúsculas.;Seu programa deve produzir uma única linha na saída contendo três inteiros positivos, em hexadecimal com letras minúsculas, representando o total mínimo, o total máximo e o somatório dos totais considerando todas as permutações possíveis dos 16 dígitos hexadecimais.;False;8 / 10;324;107;33.02%
2240;Fundindo Árvores;Estruturas e Bibliotecas;7;"Em Computação árvores são objetos estranhos: a raiz está no topo e as folhas estão embaixo! Uma árvore é uma estrutura de dados composta de N vértices conectados por N-1 arestas de forma que é possível chegar de um vértice a qualquer outro vértice seguindo as arestas. Em uma árvore enraizada, cada aresta conecta um vértice pai a um vértice filho. Um único vértice não tem pai, e é chamado de raiz. Assim, partir da raiz é possivel chegar a qualquer outro vértice da árvore seguindo as arestas na direção de pai para filho.

					Em uma árvore ternária cada vértice pode ter até três vértices filhos, chamados esquerdo, central e direito. Uma árvore ternária canhota é uma árvore ternária enraizada em que nenhum vértice tem filho direito. Uma árvore ternária destra é uma árvore ternária enraizada em que nenhum vértice tem filho esquerdo. A raiz de uma árvore ternária é sempre um vértice central. A figura abaixo mostra exemplos de uma árvore canhota e de uma árvore destra.

					  

					A superposição S de uma árvore canhota C com uma árvore destra D é uma árvore ternária enraizada em que a raiz é ou a raiz de C ou a raiz de D ou ambas as raízes, de C e de D, superpostas, e que contém a estrutura de ambas as árvores superpostas. A figura abaixo mostra algumas árvores formadas pela superposição da árvore canhota e da árvore destra da figura acima.

					  

					Note que na Figura (a) a raiz é o vértice x (da árvore destra) e os pares de vértices (a, y)e(c, u) são superpostos. Na Figura (b) a raiz é o vértice a (da árvore canhota) e os pares de vértices (d, x),(e, y)e(f, u) são superpostos. Na Figura (c) a raiz também é o vértice a (da árvore canhota) e o par de vértices (f, x) é superposto.

					Dadas uma árvore canhota e uma árvore destra, sua tarefa é determinar o número mínimo de vértices necessários para construir uma árvore ternária que é uma superposição das árvores dadas.";A primeira linha de um caso de teste contém um inteiro N indicando o número de vértices da árvore canhota (1 ≤ N ≤ 104). Vértices nesta árvore são identificados por números de 1 a N, e a raiz é o vértice de número 1. Cada uma das N linhas seguintes contém três inteiros I, L e K, indicando respectivamente o identificador de um vértice I, o identificador do filho esquerdo L de I e o identificador do filho central K de I (0 ≤ I, L, K ≤ N). A linha seguinte contém um inteiro M indicando o número de vértices da árvore destra (1 ≤ M ≤ 104). Vértices nesta árvore são identificados por números de 1 a M, e a raiz é o vértice de número 1. Cada uma das M linhas seguintes contém três inteiros P, Q e R, indicando respectivamente o identificador de um vértice P, o identificador do filho central Q de P e o identificador do filho direito R de P (0 ≤ P, Q, R ≤ N). O valor zero indica um vértice não existente (usado quando um vértice não tem um ou ambos os seus filhos).;Imprima o número mínimo de vértices de uma árvore que é a superposição das duas árvores dadas na entrada.;True;7 / 10;585;204;34.87%
2241;Go--;Estruturas e Bibliotecas;5;"Go-- é até parecido com o tradicional jogo de Go, mas é bem mais fácil! Ele é jogado em um tabuleiro quadrado de dimensão N, inicialmente vazio, no qual dois jogadores, um jogando com as pedras pretas e o outro com as brancas, se alternam colocando uma pedra por vez dentro de qualquer célula que ainda não esteja ocupada. A partida termina depois que cada jogador colocou P pedras no tabuleiro. Considere todas as possíveis sub-áreas quadradas de dimensão de 1 a N. Uma sub-área pertence ao jogador que joga com as pedras pretas se ela contém pelo menos uma pedra preta e nenhuma pedra branca. Da mesma forma, uma sub-área quadrada pertence ao jogador que joga com as pedras brancas se contém ao menos uma pedra branca e nenhuma pedra preta. Note que as áreas que não contenham nenhuma pedra, ou que contenham tanto pedras pretas quanto brancas, não pertencem a nenhum jogador.

Neste problema, dada a posição final do tabuleiro, seu programa deve computar quantas sub-áreas quadradas pertencem a cada jogador, para descobrir quem ganhou a partida. Na figura, as pretas possuem 12 sub-áreas (cinco de dimensão 1, seis de dimensão 2 e uma de dimensão 3). As brancas, que perderam a partida, possuem apenas 10.";A primeira linha da entrada contém dois inteiros N e P, 2 ≤ N ≤ 500, 1 ≤ P ≤ 500 e P ≤ N2/2, representando, respectivamente, a dimensão do tabuleiro e o número de pedras que cada jogador coloca. Cada uma das P linhas seguintes contém dois inteiros L e C (1 ≤ L, C ≤ N) definindo as coordenadas (linha, coluna) das pedras pretas. Depois, cada uma das próximas P linhas contém dois inteiros L e C (1 ≤ L, C ≤ N) definindo as coordenadas (linha, coluna) das pedras brancas. Todas as pedras são colocadas em células distintas.;Imprima uma linha contendo dois inteiros separados por um espaço: quantas áreas distintas pertencentes às pretas e às brancas.;True;5 / 10;901;505;56.05%
2242;Huaauhahhuahau;Strings;2;"Em chats, é muito comum entre jovens e adolescentes utilizar sequências de letras, que parecem muitas vezes aleatórias, para representar risadas. Alguns exemplos comuns são:

huaauhahhuahau
hehehehe
ahahahaha
jaisjjkasjksjjskjakijs
huehuehue

Cláudia é uma jovem programadora que ficou intrigada pela sonoridade das “risadas digitais”. Algumas delas ela nem mesmo consegue pronunciar! Mas ela percebeu que algumas delas parecem transmitir melhor o sentimento da risada que outras. A primeira coisa que ela percebeu é que as consoantes não interferem no quanto as risadas digitais influenciam na transmissão do sentimento. A segunda coisa que ela percebeu é que as risadas digitais mais engra¸cadas são aquelas em que as sequências de vogais são iguais quando lidas na ordem natural (da esquerda para a direita) ou na ordem inversa (da direita para a esquerda), ignorando as consoantes. Por exemplo, “hahaha” e “huaauhahhuahau” estão entre as risadas mais engraçadas, enquanto “riajkjdhhihhjak” e “huehuehue” não estão entre as mais engraçadas.

Cláudia está muito atarefada com a análise estatística das risadas digitais e pediu sua ajuda para escrever um programa que determine, para uma risada digital, se ela é das mais engraçadas ou não.";A entrada é composta por uma linha, contendo uma sequência de no máximo 50 caracteres, formada apenas por letras minúsculas sem acentuação. As vogais são as letras ‘a’,‘e’,‘i’,‘o’,‘u’. A sequência contém pelo menos uma vogal.;Seu programa deve produzir uma linha contendo um caractere, “S” caso a risada seja das mais engra¸cadas, ou “N” caso contrário.;False;2 / 10;8127;3902;48.01%
2243;Isósceles;Paradigmas;5;"Os irmãos Sérgio e Luiz estavam brincando com cubinhos de madeira e queriam construir um muro, que acabou ficando incompleto, com as colunas tendo diferentes alturas, como nessa figura.



Eles decidiram agora que a brincadeira seria retirar cubinhos, sempre de cima para baixo nas colunas, de maneira que no final restasse apenas um triângulo isósceles de cubinhos. Eles podem apenas retirar cubinhos do muro, sem recolocar em outra coluna, e os triângulos têm que ser completos. A figura abaixo ilustra os cinco primeiros triângulos isósceles de cubinhos, do tipo que eles querem, com alturas 1, 2, 3, 4 e 5 respectivamente.



Dada a sequência de alturas das colunas do muro, seu programa deve ajudar Sérgio e Luiz a descobrir qual é a altura máxima que o triângulo poderia ter ao final. No muro da primeira figura, com 30 colunas de cubinhos, o triângulo mais alto possível teria altura igual a sete.";A primeira linha da entrada contém um inteiro N, 1 ≤  N ≤  50000, representando o número de colunas do muro. A segunda linha contém N inteiros Ai, 1 ≤  Ai ≤  N, para 1 ≤  i ≤  N, indicando as alturas de cada coluna.;Seu programa deve produzir uma única linha com um inteiro H, representando a altura máxima que um triângulo poderia ter ao final.;True;5 / 10;1935;803;41.50%
2244;Jogos Olímpicos;Ad-Hoc;10;"Um grupo de investidores está pensando em investir pesado em atletas da delegação brasileira após as olimpíadas do Rio. Para isso, eles vêm observando N atletas e perceberam que alguns estão em decadência e outros em ascensão. Em especial, o grupo está de olho em dois fatores sobre cada atleta: seu cansaço e sua habilidade. Eles anotaram os valores de habilidade e cansaço de cada atleta logo ao final das olimpíadas de 2016. Em seguida, o grupo estimou a taxa com a qual cada atleta perde ou ganha habilidade e a taxa com a qual cada atleta se cansa ao longo do tempo, e percebeu que essas taxas são constantes para os dois atributos.

Os investidores perceberam que esses dados lhes permitem definir o que resolveram chamar de atleta de ouro: um atleta que, em um determinado período de tempo, é o atleta menos cansado e o mais habilidoso. Ficou decidido que investimentos serão feitos apenas em atletas de ouro. Descubra quantos jogadores, entre os observados inicialmente, receberão algum investimento. Considere que o tempo t = 0 é o tempo das olimpíadas do Rio: nenhum atleta que foi de ouro antes desse tempo pode receber investimento. Considere também que qualquer tempo após as olimpíadas do Rio deve ser considerado, por maior que seja. Um atleta que é de ouro exatamente no tempo t = 0 deve ser contado.";A primeira linha da entrada contém um inteiro, N (1 ≤ N ≤ 105), o número de atletas. Seguem N linhas, cada uma com quatro números inteiros: Hi, Hti , Ci, Cti (-106 < Hi, Hti , Ci, Cti ≤ 106, Hti, Cti ≠ 0), representando, respectivamente, a habilidade ao final das olimpíadas, a taxa de variação da habilidade, o cansaço ao final das olimpíadas e a taxa de variação do cansaço do i-ésimo atleta.;Seu programa deve produzir uma única linha com um inteiro O, representando o número de atletas que receberão algum investimento do grupo.;False;10 / 10;452;80;17.70%
2245;Kit de Encolhimento de Polígonos;Geometria Computacional;10;"Um Kit de Encolhimento de Polígonos é um material muito utilizado nas aulas de magia geométrica na Nlogônia. O kit consiste de dois pontos, A e B no plano cartesiano. Considere um polígono convexo dado pelos vértices 1, 2...N, nessa ordem. Para encolher esse polígono usando o kit, algumas regras devem ser respeitadas. Cada vértice x do polígono deve ser movido uma vez só: para o ponto médio do segmento Ax ou para o ponto médio do segmento Bx. A operação de encolhimento deve produzir um novo polígono convexo que preserve a ordem relativa dos vértices do polígono original. Em outras palavras, considerando todas as possíveis maneiras de aplicar o kit, apenas aquelas cuja sequência final dos vêrtices 1, 2...N representa um polígono convexo são válidas. Veja que o polígono convexo original pode estar em sentido horário e uma operação de encolhimento válida produzir um polígono convexo em sentido anti-horário, na mesma ordem dos vértices. Apenas a ordem relativa dos pontos é importante, não o sentido.

E sabido que magia geométrica não é o forte da maioria dos alunos. A professora pediu que eles usassem o kit de encolhimento para encolher um polígono convexo fornecido por ela de forma a obter a menor área possível e um amigo seu implorou para que você resolva a questão por ele. Responda a menor área possível do polígono para ele.



A Figura acima ilustra um uso válido do kit, onde o polígono sombreado é o de menor área possível que preserva a sequência dos vértices. Os pontos A e B correspondem aos pontos do kit. Note que, apesar do nome encolhimento, às vezes é possível utilizar o kit para aumentar a área dos polígonos! Como geometria é difícil!

Observe que um único ponto ou uma reta não são considerados polígonos. Sendo assim, se um uso do kit produzir como resultado algo diferente de um polígono convexo, esse não é um uso válido.";A primeira linha da entrada contém um inteiro N (3 ≤ N ≤ 105), o némero de vértices do polígono. Seguem N linhas, cada uma com dois inteiros x, y (-106 ≤ x, y ≤ 106), os vértices do poligono. A última linha da entrada contém quatro inteiros, Ax, Ay, Bx e By (-106 ≤ Ax, Ay, Bx, By ≤ 106), as coordenadas x e y de A e as coordenadas x e y de B, respectivamente. Os pontos da entrada serão dados na ordem correta em que aparecem no polígono, no sentido horário ou anti-horário. Não haverão pontos repetidos e o polígono será convexo.;Seu programa deve produzir uma linha, contendo um número real, com 3 casas decimais de precisão, representando a menor área possível para um polígono obtido com o uso do kit.;True;10 / 10;236;51;21.61%
2246;Ladrilhos;Ad-Hoc;3;"Avelino tem um mosaico em uma das paredes de sua casa. É uma mosaico muito antigo, composto por pequenos ladrilhos coloridos. Como é um mosaico antigo, alguns ladrilhos se soltaram ao longo dos anos formando buracos.

Agora, Avelino quer restaurar o mosaico cobrindo os buracos com novos ladrilhos. Entretanto, para economizar, Avelino quer comprar ladrilhos de uma única cor para tapar os buracos. Em particular, quer comprar ladrilhos de uma das cores originais ou de uma cor ainda não contida no mosaico.

Por ser um mosaico, não se deseja que hajam áreas muito grandes com a mesma cor. Avelino resolveu que vai escolher a cor dos ladrilhos tentando fazer com que o tamanho da menor área monocromática seja o menor possível, para que haja mais detalhes. Veja que pode existir mais de uma cor possível. Uma área é monocromática se todos os ladrilhos nela são da mesma cor. Dois ladrilhos adjacentes fazem parte da mesma área se possuem a mesma cor, e dois ladrilhos são adjacentes se compartilham um lado.

Veja o primeiro caso de exemplo, temos três áreas da cor 1 (uma de tamanho 3 e duas de tamanho 2), uma área da cor 2 (de tamanho 3) e uma área da cor 3 de tamanho 7. Uma resposta possível seria escolher a cor 2, fazendo com que a menor área monocromática seja de tamanho 2. Se escolhermos a cor 1 a menor área seria de tamanho 3.

Crie um programa que imprima o tamanho da menor área possível.";A primeira linha contém dois inteiros H e L, a altura e largura do mosaico, respectivamente, satisfazendo 1 ≤ H ≤ 200 e 1 ≤ L ≤ 200 . Em seguida, H linhas conterão cada uma L inteiros, separados por espaço, correspondendo às cores dos ladrilhos. Um inteiro 0 corresponde a um buraco e um inteiro i ≠ 0 corresponde a um ladrilho com a i-ésima cor, podendo ir de 1 até 40000 no máximo.;Seu programa deve produzir uma linha, contendo um inteiro, o tamanho da menor área possível.;False;3 / 10;928;583;62.82%
2247;Cofrinhos da Vó Vitória;Ad-Hoc;3;"Vó Vitória mantém, desde o nascimento dos netos Joãozinho e Zezinho, um ritual que faz a alegria dos meninos. Ela guarda todas as moedas recebidas como troco em dois pequenos cofrinhos, um para cada neto. Quando um dos cofrinhos fica cheio, ela chama os dois netos para um alegre almoço, ao final do qual entrega aos garotos as moedas guardadas nos cofrinhos de cada um.

Ela sempre foi muito zelosa quanto à distribuição igualitária do troco arrecadado. Quando, por força do valor das moedas, ela não consegue depositar a mesma quantia nos dois cofrinhos, ela memoriza a diferença de forma a compensá-la no próximo depósito.

Vó Vitória está ficando velha e tem medo que deslizes de memória a façam cometer injustiças com os netos, deixando de compensar as diferenças entre os cofrinhos. Sua tarefa é ajudar Vó Vitória, escrevendo um programa de computador que indique as diferenças entre os depósitos, de forma que ela não tenha que preocupar-se em memorizá-las.";"A entrada é composta de vários conjuntos de teste. A primeira linha de um conjunto de teste contém um número inteiro N (0 ≤ N ≤ 100), que indica o número de depósitos nos cofrinhos. As N linhas seguintes descrevem cada uma um depósito nos cofrinhos; o depósito é indicado por dois valores inteiros J e Z (0 ≤ J,Z ≤ 100), separados por um espaço em branco, representando respectivamente os valores, em centavos, depositados nos cofres de Joãozinho e Zezinho. O final da entrada é indicado por N = 0.";Para cada conjunto de teste da entrada seu programa deve produzir um conjunto de linhas na saída. A primeira linha deve conter um identificador do conjunto de teste, no formato “Teste n”, onde n é numerado seqüencialmente a partir de 1. A seguir seu programa deve escrever uma linha para cada depósito do conjunto de testes. Cada linha deve conter um inteiro que representa a diferença (em centavos) entre o valor depositado nos cofrinhos do Joãozinho e do Zezinho. Deixe uma linha em branco ao final de cada conjunto de teste. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.;False;3 / 10;1336;597;44.69%
2248;Estágio;Ad-Hoc;6;"Você conseguiu um estágio para trabalhar como programador na secretaria da sua escola. Como primeira tarefa, Dona Vilma, a coordenadora, solicitou que você aprimore um programa que foi desenvolvido pelo estagiário anterior. Esse programa tem como entrada uma lista de nomes e de médias finais dos alunos de uma turma, e determina o aluno com a maior média na turma. Dona Vilma pretende utilizar o programa para premiar o melhor aluno de cada turma da escola. O programa desenvolvido pelo estagiário anterior encontra-se nas páginas a seguir (programa Pascal na página 5, programa C na página 6, programa C++ na página 7).

Como você pode verificar, o programa na forma atual tem uma imperfeição: no caso de haver alunos empatados com a melhor média na turma, ele imprime apenas o primeiro aluno que aparece na lista.

Dona Vilma deseja que você altere o programa para que ele produza uma lista com todos os alunos da turma que obtiveram a maior média, e não apenas um deles. Você consegue ajudá-la nesta tarefa?";A entrada é constituída de vários conjuntos de teste, representando várias turmas. A primeira linha de um conjunto de testes contém um número inteiro N (1 ≤ N ≤ 1000) que indica o total de alunos na turma. As N linhas seguintes contêm, cada uma, um par de números inteiros C (1 ≤ C ≤ 20000) e M (0 ≤ M ≤ 100), indicando respectivamente o código e a média de um aluno. O final da entrada é indicado por uma turma com N = 0.;Para cada turma da entrada seu programa deve produzir três linhas na saída. A primeira linha deve conter um identificador do conjunto de teste, no formato “Turma n”, onde n é numerado a partir de 1. A segunda linha deve conter os códigos dos alunos que obtiveram a maior média da turma. Os códigos dos alunos devem aparecer na mesma ordem da entrada, e cada um deve ser seguido de um espaço em branco. A terceira linha deve ser deixada em branco. O formato mostrado no exemplo de saída abaixo deve ser seguido rigorosamente.;False;6 / 10;2256;576;25.53%
2249;Número de Erdos;Ad-Hoc;6;"O matemático húngaro Paul Erdos (1913-1996), um dos mais brilhantes do século XX, é considerado o mais prolífico matemático da história. Erdos publicou mais de 1500 artigos, em colabora- ção com cerca de outros 450 matemáticos. Em homenagem a este gênio húngaro, os matemáticos criaram um número, denominado ""número de Erdos"". Toda pessoa que escreveu um artigo com Erdos tem o número 1. Todos que não possuem número 1, mas escreveram algum artigo juntamente com alguém que possui número 1, possuem número 2. E assim por diante. Quando nenhuma ligação pode ser estabelecida entre Erdos e uma pessoa, diz-se que esta possui número de Erdos infinito. Por exemplo, o número de Erdos de Albert Einstein é 2. E, talvez surpreendentemente, o número de Erdos de Bill Gates é 4.

Sua tarefa é escrever um programa que, a partir de uma lista de autores de artigos, determine o número de Erdos dos autores.";A entrada é constituída por vários conjuntos de teste. A primeira linha de um conjunto de teste contém um número inteiro A (1 ≤ A ≤ 100), que indica o número de artigos. Cada uma das A linhas seguintes contém a lista de autores de um artigo. Cada autor é identificado pela inicial de seu nome (em maiúscula), seguida de um ponto e de um espaço em branco (indicando que o nome está abreviado), seguida de seu último sobrenome (‘P. Erdos’, por exemplo). O sobrenome de um autor possui, no máximo, 15 letras, e apenas a letra inicial aparece em maiúscula. Os autores são separados por vírgulas, e a lista de autores de um artigo termina com um ponto (veja os exem- plos abaixo). Um único espaço em branco separa a abreviatura do nome do sobrenome, bem como o nome de um autor do anterior. Espaços em branco não são usados em outros locais. Um artigo possui, no máximo, 10 autores, e o total de autores não excede 100. O final da entrada é indicado por A = 0.;Para cada conjunto de teste da entrada seu programa deve produzir um conjunto de linhas na saída. A primeira linha deve conter um identificador do conjunto de teste, no formato “Teste n”, onde n é numerado seqüencialmente a partir de 1. A seguir devem aparecer uma linha para cada autor do conjunto de testes (exceto o próprio P. Erdos). Cada linha deve conter o nome do autor seguido pelo caractere ‘:’, um espaço em branco e o seu número de Erdos. Caso o número de Erdos de um determinado autor seja infinito, escreva ‘infinito’. A saída deve ser ordenada alfabeticamente pelo sobrenome do autor, e, em caso de mesmo sobrenome, o desempate deve ser feito pela inicial do primeiro nome. Imprima uma linha em branco ao final de cada conjunto de teste. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.;False;6 / 10;201;97;48.26%
2250;Tetris;Ad-Hoc;6;"A sua turma do colégio resolveu organizar um campeonato de tetris. Após discussão sobre as regras, ficou definido que cada aluno jogaria um total de 12 partidas. Das 12 pontuações obtidas por um aluno, a maior e a menor são descartadas, e as demais são somadas, resultando na pontuação final do aluno.

Como você possui conhecimentos de programação, acabou sendo designado pela turma para escrever um programa para imprimir a classificação final do campeonato, a partir das pontuações de cada jogador.";A entrada é composta de vários conjuntos de teste. A primeira linha de um conjunto de testes contém um número inteiro J (0 ≤ J ≤ 1000), que indica o número de jogadores que participaram do campeonato. A seguir, para cada jogador há duas linhas na entrada: a primeira possui o nome do jogador (formado apenas por letras, sendo apenas a inicial em maiúscula, e com no máximo 15 letras), e a segunda possui as 12 pontuações que o jogador obteve, separadas por espaço. As pontuações são inteiros entre 0 e 1000. O final da entrada é indicado por um conjunto de teste com J = 0.;Para cada conjunto de teste, o seu programa deve escrever uma linha contendo o identificador do conjunto de teste, no formato “Teste n”, onde n é numerado seqüencialmente a partir de 1. A seguir, o seu programa deve escrever a classificação final no campeonato, utilizando uma linha para cada participante. Cada linha deve conter três informações, separadas por um espaço em branco: a classificação do jogador, a sua pontuação final, e o seu nome. A classificação de um jogador é igual a 1 mais o número de jogadores que obtiveram pontuação maior do que a sua. Em caso de empate, os jogadores devem ser ordenados em ordem alfabética. Depois de toda a classificação, deve ser deixada uma linha em branco. O formato do exemplo de saída abaixo deve ser seguido rigorosamente.;False;6 / 10;1110;299;26.94%
2251;Torres de Hanói;Ad-Hoc;4;"O quebra-cabeças Torres de Hanoi é muito antigo e conhecido, sendo constituído de um conjunto de N discos de tamanhos diferentes e três pinos verticais, nos quais os discos podem ser encaixados.

					

					Cada pino pode conter uma pilha com qualquer número de discos, desde que cada disco não seja colocado acima de outro disco de menor tamanho. A configuração inicial consiste de todos os discos no pino 1. O objetivo do quebra-cabeças é mover todos os discos para um dos outros pinos, sempre obedecendo à restrição de não colocar um disco sobre outro menor.

					Um algoritmo para resolver este problema é o seguinte.

					procedimento Hanoi(N, Orig, Dest, Temp)

					   se N = 1 então

					      mover o menor disco do pino Orig para o pino Dest;

					   senão

					      Hanoi(N-1, Orig, Temp, Dest);

					      mover o N-ésimo menor disco do pino Orig para o pino Dest;

					      Hanoi(N-1, Temp, Dest, Orig);

					   fim-se

					fim

					Sua tarefa é escrever um programa que determine quantos movimentos de trocar um disco de um pino para outro serão executados pelo algoritmo acima para resolver o quebra-cabeça.";A entrada possui vários conjuntos de teste. Cada conjunto de teste é composto por uma única linha, que contém um único número inteiro N (0 ≤ N ≤ 30), indicando o número de discos. O final da entrada é indicado por N = 0.;Para cada conjunto de teste, o seu programa deve escrever três linhas na saída. A primeira linha deve conter um identificador do conjunto de teste, no formato “Teste n”, onde n é numerado seqüencialmente a partir de 1. A segunda linha deve conter o número de movimentos que são executados pelo algoritmo dado para resolver o problema das Torres de Hanói com N discos. A terceira linha deve ser deixada em branco. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.;True;4 / 10;1245;605;48.59%
2252;Descobrindo Senha;Ad-Hoc;6;"Sherlock é um garoto muito inteligente, que nasceu em Londres na Inglaterra. Desde os dois anos ele sempre gostou de solucionar desafios. Com três anos foi campeão escolar de Sudoku. Seu tio Paul Harrison sempre gostou de desafiar o garoto trazendo problemas de lógica. Dessa vez Paul lançou um desafio, mas não é só um desafio, ele quer descobrir a senha da sala de seu chefe, para conseguir pegar alguns documentos importantes da empresa. Sua tarefa é construir um programa que ajude o seu tio com esse problema, dado a informação da quantidade de óleo sobre cada tecla.

					Por exemplo, 0 = 0.80, 1 = 0.12, 2 = 0.01, 3 = 0.22, 4 = 0.35, 5 = 0.25, 6 = 0.77, 7 = 0.50, 8 = 0.63, 9 = 0.45 e n = 5, a senha será 06879.";A entrada é composta por diversos casos de teste, e é concluida com final de arquivo. A primeira linha de cada caso é composta por um valor inteiro N (0 < N < 11), que corresponde a quantidade de dígitos da senha. Em seguida lê-se 10 valores Vi, onde (0 <= Vi < 1), o i-ésimo valor corresponde ao nível de oleosidade da tecla i da fechadura. Quanto maior o nível de oleosidade de uma tecla mais vezes ela foi utilizada. A senha formada não contém dígitos repetidos e é formada pelos N dígitos mais ultilizados.;"Para cada caso de teste imprima um linha com a mensagem ""Caso k: "", onde k indica o número do caso de teste seguido pela senha de acesso a sala do chefe. Mostre o resultado conforme o exemplo de saída. Em caso de duas teclas terem o mesmo nível de oleosidade, a tecla com o menor valor deve preceder as outras. Imprimir a senha de forma que comece mostrando a tecla de maior oleosidade para a menor.";False;6 / 10;1326;424;31.98%
2253;Validador de Senhas;Strings;4;"Rolien e Naej são os desenvolvedores de um grande portal de programação. Para ajudar no novo sistema de cadastro do site, eles requisitaram a sua ajuda. Seu trabalho é fazer um código que valide as senhas que são cadastradas no portal, para isso você deve atentar aos requisitos a seguir:


	A senha deve conter, no mínimo, uma letra maiúscula, uma letra minúscula e um número;
	A mesma não pode ter nenhum caractere de pontuação, acentuação ou espaço;
	Além disso, a senha pode ter de 6 a 32 caracteres.";A entrada contém vários casos de teste e termina com final de arquivo. Cada linha tem uma string S, correspondente a senha que é inserida pelo usuário no momento do cadastro.;A saída contém uma linha, que pode ser “Senha valida.”, caso a senha tenha cada item dos requisitos solicitados anteriormente, ou “Senha invalida.”, se um ou mais requisitos não forem atendidos.;False;4 / 10;10411;2639;25.35%
2254;Bem-me-quer, Malmequer Japonês;Ad-Hoc;6;"No Japão, a primavera sempre dar o ar de sua graça e todos ficam ansiosos pelo Hanami, um ritual para contemplar a florada das flores de cerejeira, mais conhecidas como sakuras.  



Kikuka Bakana, um rapaz inteligente e apaixonado, mora no Japão e decidiu inventar uma brincadeira chamada de bem-me-quer/malmequer de chomsky. Ele pretende contar a quantidade de pétalas da sakura que estão espalhadas pelo seu quintal para servir de índice para a sequência gerada pela sua brincadeira. Obviamente, ele não é louco para varrer todo o quintal e contar quantas pétalas estão no chão. Então, ele pretende estimar a quantidade de pétalas usando suas habilidades matemáticas e usar um programa feito pelo seu melhor amigo brasileiro para saber se “she loves me” ou “she loves not"".

O bem-me-quer/malmequer de chomsky possui um símbolo inicial e um conjunto de regras geradoras. A partir de cada símbolo de uma sequência, podemos aplicar as regras geradoras sucessivamente (ad infinitum) para gerar uma nova sequência. 

 

Kikuka Bakana utilizou a seguinte definição para sua brincadeira:

Símbolo Inicial: she loves not

Regras: (she loves not ==> she loves not, she loves me), (she loves me ==> she loves me, she loves not)

 

Exemplo de 3 etapas da geração:

{she loves not} ==> {she loves not, she loves me}  ==> {she loves not, she loves me, she loves me, she loves not}";A entrada possui vários casos de teste.  Cada caso de teste contem uma linha com o número N (0 <= N <= 10^9) de pétalas estimadas. A entrada termina com EOF.;Para cada caso mostre, em uma linha, a frase correspondente na sequência gerada pelo bem-me-quer/malmequer de chomsky. (A primeira frase da sequência tem índice 0);True;6 / 10;193;89;46.11%
2255;Self-Assembly;Ad-Hoc;1;"Automatic Chemical Manufacturing is experimenting with a process called self-assembly. In this process, molecules with natural affinity for each other are mixed together in a solution and allowed to spontaneously assemble themselves into larger structures. But there is one problem: sometimes molecules assemble themselves into a structure of unbounded size, which gums up the machinery.

					You must write a program to decide whether a given collection of molecules can be assembled into a structure of unbounded size. You should make two simplifying assumptions: 1) the problem is restricted to two dimensions, and 2) each molecule in the collection is represented as a square. The four edges of the square represent the surfaces on which the molecule can connect to other compatible molecules.

					In each test case, you will be given a set of molecule descriptions. Each type of molecule is described by four two-character connector labels that indicate how its edges can connect to the edges of other molecules. There are two types of connector labels:

					
						An uppercase letter (A, . . . , Z) followed by + or −. Two edges are compatible if their labels have the same letter but different signs. For example, A+ is compatible with A− but is not compatible with A+ or B−.
						Two zero digits 00. An edge with this label is not compatible with any edge (not even with another edge labeled 00).
					

					Assume there is an unlimited supply of molecules of each type, which may be rotated and reflected. As the molecules assemble themselves into larger structures, the edges of two molecules may be adjacent to each other only if they are compatible. It is permitted for an edge, regardless of its connector label, to be connected to nothing (no adjacent molecule on that edge).

					Figure A.1 shows an example of three molecule types and a structure of bounded size that can be assembled from them (other bounded structures are also possible with this set of molecules).

					  

					Figure A.1: Illustration of Sample Input 1.";The input consists of a single test case. A test case consists of two lines. The first contains an integer n (1 ≤ n ≤ 40 000) indicating the number of molecule types. The second line contains n eight-character strings, each describing a single type of molecule, separated by single spaces. Each string consists of four two-character connector labels representing the four edges of the molecule in clockwise order.;Display the word 'unbounded' if the set of molecule types can generate a structure of unbounded size. Otherwise, display the word 'bounded'.;True;1 / 10;15;6;40.00%
2257;Surely You Congest;Ad-Hoc;8;"You are in charge of designing an advanced centralized traffic management system for smart cars. The goal is to use global information to instruct morning commuters, who must drive downtown from the suburbs, how best to get to the city center while avoiding traffic jams.

					Unfortunately, since commuters know the city and are selfish, you cannot simply tell them to travel routes that take longer than normal (otherwise they will just ignore your directions). You can only convince them to change to different routes that are equally fast.

					The city’s network of roads consists of intersections that are connected by bidirectional roads of various travel times. Each commuter starts at some intersection, which may vary from commuter to commuter. All commuters end their journeys at the same place, which is downtown at intersection 1. If two commuters attempt to start travelling along the same road in the same direction at the same time, there will be congestion; you must avoid this. However, it is fine if two commuters pass through the same intersection simultaneously or if they take the same road starting at different times.

					Determine the maximum number of commuters who can drive downtown without congestion, subject to all commuters starting their journeys at exactly the same time and without any of them taking a suboptimal route.

					  

					Figure C.1: Illustration of Sample Input 2.

					In Figure C.1, cars are shown in their original locations. One car is already downtown. Of the cars at intersection 4, one can go along the dotted route through intersection 3, and another along the dashed route through intersection 2. But the remaining two cars cannot reach downtown while avoiding congestion. So a maximum of 3 cars can reach downtown with no congestion.";The input consists of a single test case. The first line contains three integers n, m, and c, where n (1 ≤ n ≤ 25 000) is the number of intersections, m (0 ≤ m ≤ 50 000) is the number of roads, and c (0 ≤ c ≤ 1 000) is the number of commuters. Each of the next m lines contains three integers xi , yi , and ti describing one road, where xi and yi (1 ≤ xi , yi ≤ n) are the distinct intersections the road connects, and ti (1 ≤ ti ≤ 10 000) is the time it takes to travel along that road in either direction. You may assume that downtown is reachable from every intersection. The last line contains c integers listing the starting intersections of the commuters.;Display the maximum number of commuters who can reach downtown without congestion.;True;8 / 10;31;10;32.26%
2258;Factors;Ad-Hoc;10;"The fundamental theorem of arithmetic states that every integer greater than 1 can be uniquely represented as a product of one or more primes. While unique, several arrangements of the prime factors may be possible. For example:

                    10 = 2 · 5

                    10 = 5 · 2

                    

                    20 = 2 · 2 · 5

                    20 = 2 · 5 · 2

                    20 = 5 · 2 · 2

                    Let f(k) be the number of different arrangements of the prime factors of k. So f(10) = 2 and f(20) = 3. Given a positive number n, there always exists at least one number k such that f(k) = n. We want to know the smallest such k.";The input consists of at most 1 000 test cases, each on a separate line. Each test case is a positive integer n < 263 .;For each test case, display its number n and the smallest number k > 1 such that f(k) = n. The numbers in the input are chosen such that k < 263. Remember to let a blank space at the end of the line.;False;10 / 10;53;6;11.32%
2260;Low Power;Ad-Hoc;8;"You are building advanced chips for machines. Making the chips is easy, but the power supply turns out to be an issue since the available batteries have varied power outputs.

					Consider the problem of n machines, each with two chips, where each chip is powered by k batteries. Surprisingly, it does not matter how much power each chip gets, but a machine works best when its two chips have power outputs as close as possible. The power output of a chip is simply the smallest power output of its k batteries.

					You have a stockpile of 2nk batteries that you want to assign to the chips. It might not be possible to allocate the batteries so that in every machine both chips have equal power outputs, but you want to allocate them so that the differences are as small as possible. To be precise, you want to tell your customers that in all machines the difference of power outputs of the two chips is at most d, and you want to make d as small as possible. To do this you must determine an optimal allocation of the batteries to the machines.

					Consider Sample Input 1. There are 2 machines, each requiring 3 batteries per chip, and a supply of batteries with power outputs 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12. You can, for instance, assign the batteries with power outputs 1, 3, 5 to one chip, those with power 2, 4, 12 to the other chip of the same machine, those with power 6, 8, 9 to the third chip, and those with power 7, 10, 11 to the fourth. The power outputs of the chips are 1, 2, 6, and 7, respectively, and the difference between power outputs is 1 in both machines. Note that there are many other ways to achieve this result.";The input consists of a single test case. A test case consists of two lines. The first line contains two positive integers: the number of machines n and the number of batteries per chip k (2nk ≤ 106 ). The second line contains 2nk integers pi specifying the power outputs of the batteries (1 ≤ pi ≤ 109 );Display the smallest number d such that you can allocate the batteries so that the difference of power outputs of the two chips in each machine is at most d.;False;8 / 10;53;15;28.30%
2261;Map Tiles;Ad-Hoc;1;"Publishing maps is not an easy task. First you need some appropriate transformation to display the earth’s spherical shape in a two-dimensional plane. Then another issue arises – most high-quality maps are too large to be printed on a single page of paper. To cope with that, map publishers often split maps into several rectangular tiles, and print each tile on one page. In this problem, you will examine this “tiling” process.

					The International Cartographic Publishing Company (ICPC) needs to cut their printing costs by minimizing the number of tiles used for their maps. Even with a fixed tile size (determined by the page size) and map scale, you can still optimize the situation by adjusting the tile grid.

					The left side of Figure G.1 shows 14 map tiles covering a region. The right side shows how you can cover the same region with only 10 tiles, without changing the tile sizes or orientation.

					  

					Figure G.1: Two possible ways of tiling Texas.

					Your task is to help the ICPC find the minimum number of tiles needed to cover a given region. For simplicity, the region will be given as a closed polygon that does not intersect itself.

					Note that the tiles must be part of a rectangular grid aligned with the x-axis and y-axis. That is, they touch each other only with their whole sides and cannot be rotated. Also note that although all input coordinates are integers, tiles may be located at non-integer coordinates.

					The polygon may touch the edges of marginal lines (as in Sample Input 2). However, to avoid floatingpoint issues, you may assume the optimal answer will not change even if the polygon is allowed to go outside the map tiles by a distance of 10−6 .";The input consists of a single test case. The first line of a test case contains three integers: n, xs, and ys. The number of polygon vertices is n (3 ≤ n ≤ 50), and xs and ys (1 ≤ xs, ys ≤ 100) are the dimensions of each tile. Each of the next n lines contains two integers x and y (0 ≤ x ≤ 10xs, 0 ≤ y ≤ 10ys), specifying the vertices of the polygon representing the region (in either clockwise or counter-clockwise order).;Display the minimal number of tiles necessary to cover the whole interior of the polygon.;True;1 / 10;4;3;75.00%
2262;Matryoshka;Ad-Hoc;10;"Matryoshkas are sets of traditional Russian wooden dolls of decreasing size placed one inside the other. A matryoshka doll can be opened to reveal a smaller figure of the same sort inside, which has, in turn, another figure inside, and so on.

					

					The Russian Matryoshka Museum recently exhibited a collection of similarly designed matryoshka sets, differing only in the number of nested dolls in each set. Unfortunately, some over-zealous (and obviously unsupervised) children separated these sets, placing all the individual dolls in a row. There are n dolls in the row, each with an integer size. You need to reassemble the matryoshka sets, knowing neither the number of sets nor the number of dolls in each set. You know only that every complete set consists of dolls with consecutive sizes from 1 to some number m, which may vary between the different sets.

					When reassembling the sets, you must follow these rules:

					
						You can put a doll or a nested group of dolls only inside a larger doll.
						You can combine two groups of dolls only if they are adjacent in the row.
						Once a doll becomes a member of a group, it cannot be transferred to another group or permanently separated from the group. It can be temporarily separated only when combining two groups.
					

					Your time is valuable, and you want to do this reassembly process as quickly as possible. The only time-consuming part of this task is opening and subsequently closing a doll, so you want to minimize how often you do this. For example, the minimum number of openings (and subsequent closings) when combining group [1, 2, 6] with the group [4] is two, since you have to open the dolls with sizes 6 and 4. When combining group [1, 2, 5] with the group [3, 4], you need to perform three openings.

					Write a program to calculate the minimum number of openings required to combine all disassembled matryoshka sets.";The input consists of a single test case. A test case consists of two lines. The first line contains one integer n (1 ≤ n ≤ 500) representing the number of individual dolls in the row. The second line contains n positive integers specifying the sizes of the dolls in the order they appear in the row. Each size is between 1 and 500 inclusive.;Display the minimum number of openings required when reassembling the matryoshka sets. If reassembling cannot be done (some of the kids might have been excessively zealous and taken some dolls), display the word 'Impossible'.;True;10 / 10;20;3;15.00%
2263;Pirate Chest;Ad-Hoc;7;"Pirate Dick finally had enough of fighting, marauding, theft, and making life miserable for many on the open seas. So he decided to retire, and he found the perfect island to spend the rest of his days on, provided he does not run out of money. He has plenty of gold coins now, and he wants to store them in a chest (he is a pirate after all). Dick can construct a rectangular chest with integer dimensions of any size up to a specified maximum size for the top but with an arbitrary integer height. Now he needs a place to hide the chest. While exploring the island, he found the perfect solution.

					Dick will hide his chest by submerging it in a murky pond. The pond has a rectangular surface, and it completely fills the bottom of a valley that has high vertical rocky walls. Dick surveyed the pond and knows its depth for each of the squares of a Cartesian coordinate grid system placed on the pond surface. When Dick submerges the chest, it will sink as far as possible until it touches the bottom. The top of the chest will remain parallel to the pond’s surface and the chest will be aligned with the grid squares. The water displaced by the submerged chest will raise the level of the pond’s surface (this will occur even if there is no space around the chest for the displaced water to rise). The walls of the valley are high enough that the water can never splash out of the valley. Of course, since the chest must be invisible, its top must be strictly below the surface of the pond. Your job is to find the volume of the largest chest that Pirate Dick can hide this way.

					In Figure I.1, the leftmost image shows a pond, the middle image shows a possible placement of a chest of volume 3, and the rightmost image shows a placement of a chest of volume 4, which is the maximum possible volume. Note that if the second chest were made one unit taller, its top would be visible because it would be at exactly the same height as the surface of the water.

					  

					Figure I.1: Illustration of Sample Input 1.";The input consists of a single test case. A test case starts with a line containing four integers a, b, m, and n (1 ≤ a, b, m, n ≤ 500). The pond’s surface dimensions are m × n and the maximum size of the top (and bottom) of the chest is a × b. In addition, a and b are small enough that it is not possible to cover the entire pond with a chest with top size a × b. Each of the remaining m lines in a test case contains n integers di,j specifying the pond’s depth at grid square (i, j), where 0 ≤ di,j ≤ 109 for each 1 ≤ i ≤ m and 1 ≤ j ≤ n.;Display the maximum volume of a rectangular chest with integer dimensions (where one of the dimensions of the top is bounded by a and the other is bounded by b) that can be completely submerged below the surface of the pond. If no chest can be hidden in the pond, display 0.;True;7 / 10;17;5;29.41%
2265;Up a Tree;Ad-Hoc;1;"Anatoly Cheng McDougal is a typical student in many ways. Whenever possible he tries to cut and paste code instead of writing it from scratch. Unavoidably this approach causes him problems. For example, when he first learned about preorder, inorder and postorder traversals of trees, and was given code for a preorder print of a tree (shown on the left below), he simply cut and pasted the code, then moved the print statement to the correct location and renamed the procedure. However, he forgot to rename the procedure calls inside the code, resulting in the defective inorder print and postorder print code shown below.

					  

					At this point, Anatoly did not behave like a typical student. He actually tested his code! Unfortunately, when the results were not correct, he reverted back to typical student behavior. He panicked and started randomly changing calls in all three procedures, hoping to get things right. Needless to say, the situation became even worse now than when he started.

					Anatoly’s professor tested the code on a random tree of characters. When she looked at the output of his three print routines, she correctly guessed what had happened. However, instead of going directly to his code, she decided to try to reconstruct Anatoly’s code just by observing the output. In order to do this, she correctly made the following assumptions:

					
						The output statement in each print routine is in the correct location (for example, between the two recursive calls in the inPrint routine).
						Among the six recursive calls made by the three routines, exactly two calls are to prePrint, exactly two are to inPrint, and exactly two are to postPrint, though potentially in the wrong routines.
					

					Soon the professor realized that reconstructing Anatoly’s code and the test tree from his output was not a simple task and that the result might be ambiguous. You will have to help her find all possible reconstructions of Anatoly’s code. In addition, for each such reconstruction, you are to find the alphabetically first tree (as described in the output section) giving the observed output.";The input consists of a single test case. A test case consists of three strings on three separate lines: the observed output of Anatoly’s prePrint, inPrint and postPrint routines (in that order) on some test tree. Each of these strings consists of n uppercase letters (4 ≤ n ≤ 26), with no repeated letters in any string. The test case is guaranteed to have at least one solution.;"Display all possible reconstructions for the test case, ordered as described in the last paragraph below. The output for each reconstruction consists of two parts. The first part is a single line and describes the six calls in Anatoly’s routines: first the two (recursive) calls in Anatoly’s prePrint routine, followed by the calls in his inPrint routine, and finally the calls in his postPrint routine. The calls are described by the words Pre, In, and Post, separated by spaces. For example, if Anatoly’s routines were correct, the resulting output of the first part of the reconstruction would be Pre Pre In In Post Post.

					The second part consists of three lines and describes the first test tree that could have generated the observed outputs. The first line is the correct preorder print of the tree, and the second and third lines contain the correct inorder and postorder prints, respectively. The first tree is the one with the alphabetically first preorder print. If there are multiple such trees, the first of these is the one with the alphabetically first inorder print.

					Every reconstruction is a sequence of 6 tokens chosen from Pre, In, and Post. The ordering of reconstructions is lexicographic with respect to the following ordering of tokens: Pre < In < Post.";True;1 / 10;7;3;42.86%
2268;Crane Balancing;Ad-Hoc;1;"Wherever there is large-scale construction, you will find cranes that do the lifting. One hardly ever thinks about what marvelous examples of engineering cranes are: a structure of (relatively) little weight that can lift much heavier loads. But even the best-built cranes may have a limit on how much weight they can lift.

					The Association of Crane Manufacturers (ACM) needs a program to compute the range of weights that a crane can lift. Since cranes are symmetric, ACM engineers have decided to consider only a cross section of each crane, which can be viewed as a polygon resting on the x-axis.

					  

					Figure C.1: Crane cross section

					Figure C.1 shows a cross section of the crane in the first sample input. Assume that every 1 × 1 unit of crane cross section weighs 1 kilogram and that the weight to be lifted will be attached at one of the polygon vertices (indicated by the arrow in Figure C.1). Write a program that determines the weight range for which the crane will not topple to the left or to the right.";The input consists of a single test case. The test case starts with a single integer n (3 ≤ n ≤ 100), the number of points of the polygon used to describe the crane’s shape. The following n pairs of integers xi , yi (−2 000 ≤ xi ≤ 2 000, 0 ≤ yi ≤ 2 000) are the coordinates of the polygon points in order. The weight is attached at the first polygon point and at least two polygon points are lying on the x-axis.;Display the weight range (in kilograms) that can be attached to the crane without the crane toppling over. If the range is [a, b], display [a] .. [b]. For example, if the range is [1.5, 13.3], display 1 .. 14. If the range is [a, ∞), display [a] .. inf. If the crane cannot carry any weight, display unstable instead.;True;1 / 10;12;5;41.67%
2270;Maze Reduction;Ad-Hoc;1;"Jay runs a small carnival that has various rides and attractions. Unfortunately, times are tough. A recent roller coaster accident, flooding in the restrooms, and an unfortunate clown incident have given Jay’s carnival a bad reputation with the public. With fewer paying customers and reduced revenue, he will need to cut some costs to stay in business.

					One of the biggest carnival attractions is a large, confusing maze. It consists of a variety of circular rooms connected by narrow, twisting corridors. Visitors love getting lost in it and trying to map it out. It has come to Jay’s attention that some of the rooms might be effectively identical to each other. If that’s the case, he will be able to reduce its size without anyone noticing.

					Two rooms A and B are effectively identical if, when you are dropped into either room A or B (and you know the map of the maze), you cannot tell whether you began in A or B just by exploring the maze. The corridor exits are evenly spaced around each room, and you cannot mark or leave anything in a room (in particular, you cannot tell whether you have previously visited it). The only identifying feature that rooms have is their number of exits. Corridors are also twisty enough to be indistinguishable from each other, but when you enter a room you know which corridor you came from, so you can navigate a little by using the order they appear around the room.

					Jay has appealed to the Association for Carnival Mazery for help. That’s you! Write a program to determine all the sets of effectively identical rooms in the maze.";The input consists of a single test case. The first line contains an integer n, the number of rooms in the maze (1 ≤ n ≤ 100). Rooms are numbered from 1 to n. Following this are n lines, describing each room in order. Each line consists of an integer k, indicating that this room has k corridors (0 ≤ k < 100), and then k distinct integers listing the rooms each corridor connects to (in clockwise order, from an arbitrary starting point). Rooms do not connect to themselves.;Display one line for each maximal set of effectively identical rooms (ignoring sets of size 1) containing the room numbers in the set in increasing order. Order the sets by their smallest room numbers. If there are no such sets, display 'none' instead.;False;1 / 10;6;3;50.00%
2272;Metal Processing Plant;Ad-Hoc;4;"Yulia works for a metal processing plant in Ekaterinburg. This plant processes ores mined in the Ural mountains, extracting precious metals such as chalcopyrite, platinum and gold from the ores. Every month the plant receives n shipments of unprocessed ore. Yulia needs to partition these shipments into two groups based on their similarity. Then, each group is sent to one of two ore processing buildings of the plant.

					To perform this partitioning, Yulia first calculates a numeric distance d(i, j) for each pair of shipments 1 ≤ i ≤ n and 1 ≤ j ≤ n, where the smaller the distance, the more similar the shipments i and j are. For a subset S ⊆ {1, . . . , n} of shipments, she then defines the disparity D of S as the maximum distance between a pair of shipments in the subset, that is,

					$$D(S) = \ _{i,j\in S}^{max}d(i,j)$$

					Yulia then partitions the shipments into two subsets A and B in such a way that the sum of their disparities D(A) + D(B) is minimized. Your task is to help her find this partitioning.";The input consists of a single test case. The first line contains an integer n (1 ≤ n ≤ 200) indicating the number of shipments. The following n − 1 lines contain the distances d(i, j). The ith of these lines contains n − i integers and the jth integer of that line gives the value of d(i, i + j). The distances are symmetric, so d(j, i) = d(i, j), and the distance of a shipment to itself is 0. All distances are integers between 0 and 109 (inclusive).;Display the minimum possible sum of disparities for partitioning the shipments into two groups.;True;4 / 10;26;8;30.77%
2275;Skiing;Ad-Hoc;1;"As you know, the ACM ICPC is not the only major sporting event taking place in Russia this year. Several months ago, the 2014 Winter Olympics were held in Sochi, which is about 3 000 km from Ekaterinburg.

					In an increasing number of sports, it is not only the ability of the athletes that determines who wins a competition but also their equipment. For example in downhill skiing, having the latest ski technology enables athletes to increase their speeds and improve their turning ability.

					You have been hired to determine the effect of the latest ski technology on the ability of skiers to navigate a downhill course. The course contains several target locations, and the skier wants to pass over as many of them as possible. Naturally, the better the ski technology, the easier it will be to do this.

					For simplicity, use a two-dimensional coordinate system where the skier starts at position (0,0) and where “downhill” corresponds to the direction of the positive y-axis.

					Assume the y-component of the athlete’s velocity is a constant vy. The athlete can change speed laterally (in the x-direction), but the skiing equipment limits this to a maximal lateral acceleration amax. The skier starts with a lateral velocity of 0.

					  

					Figure J.1: Downhill ski path passing over three targets

					In Figure J.1 (which corresponds to the first sample input), the optimal path passes over three out of four possible targets. If amax were smaller, then the skier might be able to pass over only two or fewer of the targets.";"The input contains a single test case. The first line contains three integers n, vy, and amax (0 ≤ n ≤ 250, 0 ≤ vy ≤ 105 and 0 ≤ amax ≤ 107 ), where n is the number of targets, vy is the y-component of the skier’s velocity, and amax is the maximum lateral acceleration. Here vy is given in meters per hour and amax in meters per hour squared.

					Following this are n lines, each containing two integers xi and yi (−105 ≤ xi , yi ≤ 105 ). These give the coordinates of each target to be visited on the course. All coordinates are given in meters. Targets are numbered 1, 2, ..., n in the order they are given.";"Display the maximal-length sequence of targets that the athlete could pass over on the course in a single run. Display the targets in the order they are visited. If there are multiple maximal-length sequences, display only the lexicographically first one. (So the sequence 2 15 would come before the sequence 10 15.) If the athlete cannot pass over any targets, print 'Cannot visit any targets' instead.

					To ensure floating-point stability, you may assume the answer will not change if amax is perturbed by up to 0.1.";True;1 / 10;8;5;62.50%
2276;Surveillance;Ad-Hoc;3;The International Corporation for Protection and Control (ICPC) develops efficient technology for, well, protection and control. Naturally, they are keen to have their own headquarters protected and controlled. Viewed from above, the headquarters building has the shape of a convex polygon. There are several suitable places around it where cameras can be installed to monitor the building. Each camera covers a certain range of the polygon sides (building walls), depending on its position. ICPC wants to minimize the number of cameras needed to cover the whole building.;The input consists of a single test case. Its first line contains two integers n and k (3 ≤ n ≤ 106 and 1 ≤ k ≤ 106 ), where n is the number of walls and k is the number of possible places for installing cameras. Each of the remaining k lines contains two integers ai and bi (1 ≤ ai , bi ≤ n). These integers specify which walls a camera at the ith place would cover. If ai ≤ bi then the camera covers each wall j such that ai ≤ j ≤ bi . If ai > bi then the camera covers each wall j such that ai ≤ j ≤ n or 1 ≤ j ≤ bi .;Display the minimal number of cameras that suffice to cover each wall of the building. The ranges covered by two cameras may overlap. If the building cannot be covered, display 'impossible' instead.;False;3 / 10;9;5;55.56%
2278;Amalgamated Artichokes;Ad-Hoc;10;"Fatima Cynara is an analyst at Amalgamated Artichokes (AA). As with any company, AA has had some very good times as well as some bad ones. Fatima does trending analysis of the stock prices for AA, and she wants to determine the largest decline in stock prices over various time spans. For example, if over a span of time the stock prices were 19, 12, 13, 11, 20 and 14, then the largest decline would be 8 between the first and fourth price. If the last price had been 10 instead of 14, then the largest decline would have been 10 between the last two prices.

					Fatima has done some previous analyses and has found that the stock price over any period of time can be modelled reasonably accurately with the following equation:

					price(k) = p · (sin(a · k + b) + cos(c · k + d) + 2)

					where p, a, b, c and d are constants. Fatima would like you to write a program to determine the largest price decline over a given sequence of prices. Figure A.1 illustrates the price function for Sample Input 1. You have to consider the prices only for integer values of k.

					  

					Figure A.1: Sample Input 1. The largest decline occurs from the fourth to the seventh price.";The input consists of a single line containing 6 integers p (1 ≤ p ≤ 1 000), a, b, c, d (0 ≤ a, b, c, d ≤ 1 000) and n (1 ≤ n ≤ 106 ). The first 5 integers are described above. The sequence of stock prices to consider is price(1), price(2), . . . , price(n).;Display the maximum decline in the stock prices. If there is no decline, display the number 0. Your output should have an absolute or relative error of at most 10−6.;True;10 / 10;136;4;2.94%
2280;Catering;Ad-Hoc;2;"Paul owns a catering company and business is booming. The company has k catering teams, each in charge of one set of catering equipment. Every week, the company accepts n catering requests for various events. For every request, they send a catering team with their equipment to the event location. The team delivers the food, sets up the equipment, and instructs the host on how to use the equipment and serve the food. After the event, the host is responsible for returning the equipment back to Paul’s company.

					Unfortunately, in some weeks the number of catering teams is less than the number of requests, so some teams may have to be used for more than one event. In these cases, the company cannot wait for the host to return the equipment and must keep the team on-site to move the equipment to another location. The company has an accurate estimate of the cost to move a set of equipment from any location to any other location. Given these costs, Paul wants to prepare an Advance Catering Map to service the requests while minimizing the total moving cost of equipment (including the cost of the first move), even if that means not using all the available teams. Paul needs your help to write a program to accomplish this task. The requests are sorted in ascending order of their event times and they are chosen in such a way that for any i < j, there is enough time to transport the equipment used in the ith request to the location of the jth request.";The first line of input contains two integers n (1 ≤ n ≤ 100) and k (1 ≤ k ≤ 100) which are the number of requests and the number of catering teams, respectively. Following that are n lines, where the ith line contains n − i + 1 integers between 0 and 1 000 000 inclusive. The jth number in the ith line is the cost of moving a set of equipment from location i to location i + j. The company is at location 1 and the n requests are at locations 2 to n + 1.;Display the minimum moving cost to service all requests. (This amount does not include the cost of moving the equipment back to the catering company.);True;2 / 10;9;5;55.56%
2281;Cutting Cheese;Ad-Hoc;8;"Of course you have all heard of the International Cheese Processing Company. Their machine for cutting a piece of cheese into slices of exactly the same thickness is a classic. Recently they produced a machine able to cut a spherical cheese (such as Edam) into slices – no, not all of the same thickness, but all of the same weight! But new challenges lie ahead: cutting Swiss cheese.

					Swiss cheese such as Emmentaler has holes in it, and the holes may have different sizes. A slice with holes contains less cheese and has a lower weight than a slice without holes. So here is the challenge: cut a cheese with holes in it into slices of equal weight.

					By smart sonar techniques (the same techniques used to scan unborn babies and oil fields), it is possible to locate the holes in the cheese up to micrometer precision. For the present problem you may assume that the holes are perfect spheres.

					Each uncut block has size 100×100×100 where each dimension is measured in millimeters. Your task is to cut it into s slices of equal weight. The slices will be 100 mm wide and 100 mm high, and your job is to determine the thickness of each slice.";"The first line of the input contains two integers n and s, where 0 ≤ n ≤ 10 000 is the number of holes in the cheese, and 1 ≤ s ≤ 100 is the number of slices to cut. The next n lines each contain four positive integers r, x, y, and z that describe a hole, where r is the radius and x, y, and z are the coordinates of the center, all in micrometers.

					The cheese block occupies the points (x, y, z) where 0 ≤ x, y, z ≤ 100 000, except for the points that are part of some hole. The cuts are made perpendicular to the z axis.

					You may assume that holes do not overlap but may touch, and that the holes are fully contained in the cheese but may touch its boundary.";Display the s slice thicknesses in millimeters, starting from the end of the cheese with z = 0. Your output should have an absolute or relative error of at most 10−6.;True;8 / 10;30;8;26.67%
2284;Pipe Stream;Ad-Hoc;1;"Your hometown has hired some contractors – including you! – to manage its municipal pipe network. They built the network, at great expense, to supply Flubber to every home in town. Unfortunately, nobody has found a use for Flubber yet, but never mind. It was a Flubber network or a fire department, and honestly, houses burn down so rarely, a fire department hardly seems necessary.

					In the possible event that somebody somewhere decides they want some Flubber, they would like to know how quickly it will flow through the pipes. Measuring its rate of flow is your job.

					You have access to one of the pipes connected to the network. The pipe is l meters long, and you can start the flow of Flubber through this pipe at a time of your choosing. You know that it flows with a constant real-valued speed, which is at least v1 meters/second and at most v2 meters/second. You want to estimate this speed with an absolute error of at most t/2 meters/second.

					Unfortunately, the pipe is opaque, so the only thing you can do is to knock on the pipe at any point along its length, that is, in the closed real-valued range [0, l]. Listening to the sound of the knock will tell you whether or not the Flubber has reached that point. You are not infinitely fast. Your first knock must be at least s seconds after starting the flow, and there must be at least s seconds between knocks.

					Determine a strategy that will require the fewest knocks, in the worst case, to estimate how fast the Flubber is flowing. Note that in some cases the desired estimation might be impossible (for example, if the Flubber reaches the end of the pipe too quickly).";The input consists of multiple test cases. The first line of input contains an integer c (1 ≤ c ≤ 100), the number of test cases. Each of the next c lines describes one test case. Each test case contains the five integers l, v1, v2, t and s (1 ≤ l, v1, v2, t, s ≤ 109 and v1 < v2), which are described above.;For each test case, display the minimal number of knocks required to estimate the flow speed in the worst case. If it might be impossible to measure the flow speed accurately enough, display impossible instead.;True;1 / 10;6;3;50.00%
2285;Palíndrome;Ad-Hoc;6;"Uma cadeia de caracteres é chamada de palíndrome se seqüência de caracteres da esquerda para a direita é igual à seqüência de caracteres da direita para a esquerda (uma outra definição é que o primeiro caractere da cadeia deve ser igual ao último caractere, o segundo caractere seja igual ao penúltimo caractere, o terceiro caractere seja igual ao antepenúltimo caractere, e assim por diante). Por exemplo, as cadeias de caracteres ‘mim’, ‘axxa’ e ‘ananaganana’ são exemplos de palíndromes.

Se uma cadeia não é palíndrome, ela pode ser dividida em cadeias menores que são palíndromes. Por exemplo, a cadeia ‘aaxyx’ pode ser dividida de quatro maneiras distintas, todas elas contendo apenas cadeias palíndromes: {‘aa’, ‘xyx’}, {‘aa’, ‘x’, ‘y’, ‘x’}, {‘a’, ‘a’, ‘xyx’} e {‘a’, ‘a’, ‘x’, ‘y’, ‘x’}.

Escreva um programa que determine qual o menor número de partes em que uma cadeia deve ser dividida de forma que todas as partes sejam palíndromes.";A entrada é constituída de vários conjuntos de teste. A primeira linha de um conjunto de testes contém um inteiro N (1 ≤ N ≤ 2000) que indica o número de caracteres da cadeia . A segunda linha contém a cadeia de caracteres, composta por letras minúsculas (de ‘a’ a ‘z’), sem espaços em branco. O final da entrada é indicado por N = 0.;Para cada conjunto de teste da entrada seu programa deve produzir três linhas na saída. A primeira linha deve conter um identificador do conjunto de teste, no formato “Teste n”, onde n é numerado a partir de 1. A segunda linha deve conter um inteiro indicando o menor número de partes que a cadeia de entrada deve ser dividida de forma que todas as partes sejam palíndromes. A terceira linha deve ser deixada em branco. O formato mostrado no exemplo de saída abaixo deve ser seguido rigorosamente.;False;6 / 10;332;196;59.04%
2286;Par ou Ímpar;Ad-Hoc;3;"Muitas crianças gostam de decidir todas as disputas através do famoso jogo de Par ou Ímpar. Nesse jogo, um dos participantes escolhe Par e o outro Ímpar. Após a escolha, os dois jogadores mostram, simultaneamente, uma certa quantidade de dedos de uma das mãos. Se a soma dos dedos das mãos dos dois jogadores for par, vence o jogador que escolheu Par inicialmente, caso contrário vence o que escolheu Ímpar.

Dada uma seqüência de informações sobre partidas de Par ou Ímpar (nomes dos jogadores e números que os jogadores escolheram), você deve escrever um programa para indicar o vencedor de cada uma das partidas.";A entrada é composta de vários conjuntos de testes. A primeira linha de um conjunto de testes contém um inteiro N (0 ≤ N ≤ 1000), que indica o número de partidas de Par ou Ímpar que aconteceram. As duas linhas seguintes contêm cada uma um nome de jogador. Um nome de jogador é uma cadeia de no mínimo um e no máximo dez letras (maiúsculas e minúsculas), sem espaços em branco. As N linhas seguintes contêm cada uma dois inteiros A e B que representam o número de dedos que cada jogador mostrou em cada partida (0 ≤ A ≤ 5 e 0 ≤ B ≤ 5). Em todas as partidas, o primeiro jogador sempre escolhe Par. O final da entrada é indicado por N = 0.;Para cada conjunto de teste da entrada, seu programa deve produzir a saída da seguinte forma. A primeira linha deve conter um identificador do conjunto de teste, no formato “Teste n”, onde n é numerado seqüencialmente a partir de 1. As próximas N linhas devem indicar o nome do vencedor de cada partida. A próxima linha deve ser deixada em branco. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.;False;3 / 10;3073;950;30.91%
2287;Proteja sua Senha;Ad-Hoc;6;"Por questões de segurança, muitos bancos hoje em dia estão alterando a forma como seus clientes digitam as senhas nos caixas eletrônicos, pois alguém pode postar-se atrás do cliente e ver as teclas à medida em que ele as digita.

Uma alternativa bastante utilizada tem sido associar os dez dígitos a cinco letras, de forma que cada letra esteja associada a dois dígitos, conforme o exemplo abaixo:



As associações entre números e letras são mostradas como botões numa tela sensível ao toque, permitindo que o cliente selecione os botões correspondentes à senha. Considerando a disposição dos botões da figura acima, a senha 384729 seria digitada como BCEAEB (note que a mesma seqüência de letras seria digitada para outras senhas, como por exemplo 982123).

Cada vez que o cliente usa o caixa eletrônico, as letras utilizadas são as mesmas (de ‘A’ a ‘E’), com os botões nas mesmas posições, mas os dígitos são trocados de lugar. Assim, caso um intruso veja (mesmo que mais de uma vez) a seqüência de letras digitada, não é possível notar facilmente qual a senha do cliente do banco.

Dada uma seqüência de associações entre letras e números, e as letras digitadas pelo cliente do banco para cada uma dessas associações, você deve escrever um programa para determinar qual é a senha do cliente.";A entrada é composta de vários conjuntos de testes. A primeira linha de um conjunto de testes contém um inteiro N, que indica o número de associações entre letras e números e as senhas digitadas (2 ≤ N ≤ 10). As N linhas seguintes contêm as entradas da seguinte forma: 10 dígitos, em ordem de associação, para as letras de ‘A’ a ‘E’ (2 dígitos para a letra A, 2 para a B e assim sucessivamente) e 6 letras que representam a senha codificada conforme os dígitos anteriores. As N associações fornecidas em um conjunto de testes serão sempre suficientes para definir univocamente a senha do cliente. O final da entrada é indicado por N = 0.;Para cada conjunto de teste da entrada, seu programa deve produzir três linhas na saída. A primeira linha deve conter um identificador do conjunto de teste, no formato “Teste n”, onde n é numerado seqüencialmente a partir de 1. A segunda linha deve conter a senha do cliente, com um espaço após cada dígito. A terceira linha deve ser deixada em branco. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.;True;6 / 10;805;232;28.82%
2288;TV da Vovó;Ad-Hoc;7;"A vovó tem um televisor muito antigo, que ultimamente está exibindo um defeito incômodo: a imagem aparece ‘deslocada’ (para cima ou para baixo, para o lado direito ou para o lado esquerdo). Quando a imagem está deslocada para cima, a parte da imagem que deixa de ser vista na parte superior reaparece na parte de baixo da tela. Da mesma forma, quando a imagem está deslocada a direita, a parte da imagem que deixa de ser vista à direita reaparece na tela do lado esquerdo.

					

					A imagem do televisor pode ser vista como uma matriz de pontos organizados em linhas e colunas. Para consertar o televisor da vovó, você pode ajustar a imagem introduzindo uma série de ‘comandos de correção’ em um painel de ajuste. Cada comando de correção desloca a imagem de um certo número de linhas (para cima ou para baixo) e um certo número de colunas (para a direita ou para a esquerda).";A entrada possui vários conjuntos de teste. Cada conjunto de teste inicia com a descrição da matriz que representa a imagem do televisor. A primeira linha contém dois inteiros M e N representando o número de linhas e o número de colunas da matriz (1 ≤ N,M ≤ 1000). As M linhas seguintes da entrada contém cada uma N inteiros, descrevendo o valor de cada ponto da imagem. Após a descrição da imagem, segue-se a descrição dos comandos de correção. Cada comando de correção é descrito em uma linha contendo dois inteiros X e Y(0 ≤ X,Y ≤ 1000). O valor de X representa o deslocamento na direção horizontal (valor positivo representa deslocamento para a direita, valor negativo para a esquerda), e o valor de Y representa o deslocamento da direção vertical (valor positivo para cima, valor negativo para baixo). O final da lista de comandos é indicado por X = Y = 0, e o final da entrada é indicado por M = N = 0.;Para cada conjunto de teste, o seu programa deve produzir uma imagem na saída. A primeira linha da saída deve conter um identificador do conjunto de teste, no formato “Teste n”, onde n é numerado seqüencialmente a partir de 1. A seguir deve aparecer a matriz que representa a imagem resultante, no mesmo formato da imagem de entrada. Ou seja, as M linhas seguintes devem conter cada uma N inteiros que representam os pixels da imagem. Após a imagem deixe uma linha em branco. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.;True;7 / 10;520;170;32.69%
2289;Distância Hamming;Ad-Hoc;7;"Na teoria da informação, a distância de Hamming entre duas strings de mesmo comprimento é o número de posições nas quais elas diferem entre si. Vista de outra forma, ela corresponde ao menor número de substituições necessárias para transformar uma string na outra, ou o número de erros que transformaram uma na outra.

A distância de Hamming é assim chamada em homenagem a Richard Hamming, que introduziu o conceito em um artigo fundamental sobre códigos de Hamming Error detecting and error correcting codes em 1950.

Nas telecomunicações, ela é utilizada para sinalizar erros na transmissão de palavras binárias de comprimento fixo entre um emissor e um receptor, e por isso é algumas vezes chamada de ""distância do sinal"". Esta forma de análise de bits é usada em várias disciplinas incluindo a teoria da informação, a teoria de códigos e a criptografia.

Por exemplo, a representação binária de 910 é 10012 e do 1010 é 10102 logo a distância Hamming entre eles é 2 porque só é preciso alternar os dois últimos bits de 10012 para transformar em 10102.

Sua tarefa consiste em, dados dois números inteiros positivos, calcular a distância Hamming entre eles.";A entrada consiste de vários casos de teste. Cada caso de teste é composto por dois números inteiros positivos na base decimal X e Y (0 ≤ X, Y < 264) fornecidos em uma única linha. A entrada termina quando X=Y=0.;A saída possui uma linha por caso de teste contendo a Distância Hamming das representações binárias de X e Y.;False;7 / 10;853;285;33.41%
2290;Números Apaixornados;Estruturas e Bibliotecas;9;"Será dado a você um vetor com N números, onde todos estarão em pares. Porém somente dois desses números acabaram ficando sem par, esses números são ditos números apaixornados, você consegue identificar quais são esses números?

Por exemplo, A = {1, 1, 3, 3, 5, 5, 5, 7}, os números apaixornados são 5 e 7.";A entrada é composta por vários casos de teste. Cada caso de teste é composto por uma linha contendo um inteiro N (1 ≤ N ≤ 105), seguida por N números ( -1012 < A < 1012). A entrada termina quando N = 0 e não deve ser processada.;Para cada caso de teste imprima apenas os números apaixornados em ordem crescente. É garantido que apenas dois números estão sozinhos.;False;9 / 10;1709;302;17.67%
2291;Números Divinos;Matemática;8;"Números perfeitos são números que são iguais à soma dos seus divisores, desconsiderando-se eles mesmos. Baseando-se nesse conceito, números divinos são números que são iguais ao somatório da soma de cada divisor de 1 a N.

Por exemplo, 15 é o quarto número divino porque
1 é soma dos divisores de 1,
3 é a soma dos divisores do 2,
4 é a soma dos divisores do 3,
7 é a soma dos divisores do 4,
e 15=1+3+4+7.

Dado um número N encontre o N-ésimo número Divino.";A entrada é composta por vários casos de teste. Cada caso de teste contém um único número inteiro (1 ≤ N ≤ 106) que corresponde a ordem do número Divino como especificado. A entrada termina quando N=0.;A saída consiste em uma única linha por caso de teste contendo o N-ésimo número Divino.;False;8 / 10;549;138;25.14%
2292;Painel LED;Strings;5;"Na Nlogonia são fabricados painéis de lâmpadas LED para o natal que funcionam como pisca-piscas. Esses painéis são compostos de N lâmpadas dispostas horizontalmente lado a lado. Além disso, esses panéis tem um comportamento bem definido: logo ao ser conectado a uma tomada, algumas lâmpadas acendem instantaneamente. Depois disso a lâmpada mais à esquerda alterna seu estado de ligado para desligado a cada piscada do painel, exceto por ela, todas as outras lâmpadas só alternam seu estado se a lâmpada a sua esquerda apagar.
Curioso como é, Vitor, um garoto feliz habitante de Nlogonia, quer saber, dado o número de alternâncias da primeira lâmpada (mais à esquerda), qual é a configuração final do Painel.";A primeira linha da entrada contém um número inteiro N que especifica a quantidade de casos de teste. Depois haverá N linhas cada uma contendo uma string P (1 ≤  |P|  ≤ 60) que representa a configuração inicial do painel de lâmpadas. As lâmpadas inicialmente acesas são representadas pelo caracter 'O' e as apagadas por 'X'. Na mesma linha haverá também um número inteiro C (1 ≤ C ≤ 1018) que representa a quantidade de alternâncias da primeira lâmpada.;A saída consiste em uma linha por caso de teste contendo a configuração final do painel após as alternâncias da primeira lâmpada.;False;5 / 10;2286;753;32.94%
2293;Campo de Minhocas;Ad-Hoc;2;"Minhocas são muito importantes para a agricultura e como insumo para produção de ração animal. A Organização para Bioengenharia de Minhocas (OBM) é uma entidade não governamental que promove o aumento da produção, utilização e exportação de minhocas.

					Uma das atividades promovidas pela OBM é a manutenção de uma fazenda experimental para pesquisa de novas tecnologias de criação de minhocas. Na fazenda, a área destinada às pesquisas é de formato retangular, dividida em células quadradas de mesmo tamanho. Em cada célula é criada apenas uma espécie de minhoca. As células são utilizadas para testar os efeitos, sobre a produção de minhocas, de variações de espécies de minhoca, de tipos de terra, de adubo, de umidade, etc. Os pesquisadores da OBM mantêm um acompanhamento constante do desenvolvimento das minhocas em cada célula, e têm uma estimativa extremamente precisa da produtividade de cada uma das células.

					

					Um pesquisador da OBM inventou e construiu uma máquina colhedeira de minhocas, e quer testá- la na fazenda. A máquina tem a largura de uma célula, e em uma passada pelo terreno de uma célula colhe todas as minhocas dessa célula, separando-as, limpando-as e empacotando-as. Ou seja, a máquina eliminara uma das etapas mais intensivas de mão de obra no processo de produção de minhocas. A máquina, porém, ainda está em desenvolvimento e tem uma restrição: não faz curvas, podendo movimentar-se somente em linha reta.

					Decidiu-se então que seria efetuado um teste com a máquina, de forma a colher o maior número possível de minhocas em uma unica passada, em linha reta, de lado a lado do campo de minhocas. Ou seja, a máquina deve colher todas as minhocas de uma ‘coluna’ ou de uma ‘linha’ de células do campo de minhocas (a linha ou coluna cuja soma das produtividades esperadas das células é a maior possível).

					Escreva um programa que, fornecido o mapa do campo de minhocas, descrevendo a produtividade estimada em cada célula, calcule o número esperado total de minhocas a serem colhidas pela máquina durante o teste, conforme descrito acima.";"A primeira linha da entrada contém dois números inteiros N e M, representando respectivamente o número de linhas (1 ≤ N ≤ 100) e o número de colunas (1 ≤ M ≤ 100) de células existentes no campo experimental de minhocas. Cada uma das N linhas seguintes contém M inteiros, representando as produtividades estimadas das células correspondentes a uma linha do campo de minhocas.

A entrada deve ser lida do dispositivo de entrada padrão (normalmente o teclado).";"A saída deve ser composta por uma unica linha contendo um inteiro, indicando o número esperado total de minhocas a serem colhidas pela máquina durante o teste.

A saída deve ser escrita no dispositivo de saída padrão (normalmente a tela).";True;2 / 10;2032;1151;56.64%
2294;Duende Perdido;Ad-Hoc;4;"Gugo, o duende, ficou preso em uma caverna e precisa sair o mais rapidamente possível. A caverna é formada por salões interligados por túneis, na forma de uma grade retangular, com N linhas e M colunas. Alguns dos salões da caverna têm paredes de cristal. Duendes, como todos sabem, nâo gostam de ficar em ambientes com qualquer tipo de cristal, pois seus organismos entram em ressonância com a estrutura de cristais, e em casos extremos os duendes podem até mesmo explodir. Compreensivelmente, Gugo não quer entrar em nenhum salão com parede de cristal.

					A figura abaixo mostra uma caverna com quatro linhas e cinco colunas de salões; os salões cinza têm paredes de cristal. posição inicial de Gugo é indicada com um caractere ‘*’.

					

					Você deve escrever um programa que, dadas a configuração da caverna e a posição inicial de Gugo dentro da caverna, calcule qual o número mínimo de salões pelos quais o duende deve passar antes de sair da caverna (não contando o salão em que o duende está inicialmente), mas contando o salão que tem saída para o exterior).";"A caverna será modelada como uma matriz de duas dimensões, cujos elementos representam os salões. Um salão que não tem parede de cristal e que tem saída para o exterior da caverna é representado pelo valor 0; um salão que não tem parede de cristal e não tem saída para o exterior é representado pelo valor 1; um salão que tem parede de cristal é representado pelo valor 2; e o salão em que o duende está inicialmente (que não tem saída para o exterior e nem paredes de cristal) é representado pelo valor 3. A figura abaixo mostra a representação da caverna apresentada acima.

					

					A primeira linha da entrada contém dois números inteiros N e M que indicam respectivamente o número de linhas (1 ≤ N ≤ 10) e o número de colunas (1 ≤ M ≤ 10) da representação da caverna. Cada uma das N linhas seguintes contém M números inteiros Ci , descrevendo os salões da caverna e a posição inicial do duende (0 ≤ Ci ≤ 3). Você pode supor que sempre há um trajeto que leva Gugo à saída da caverna.

					A entrada deve ser lida do dispositivo de entrada padrão (normalmente o teclado).";"Seu programa deve produzir uma única linha na saída, contendo um número inteiro representando a quantidade mínima de salões pelos quais Gugo deve passar antes de conseguir sair da caverna (não contando o salão em que ele está inicialmente, mas contando o salão que tem saída para o exterior).

A saída deve ser escrita no dispositivo de saída padrão (normalmente a tela).";True;4 / 10;323;178;55.11%
2295;Frota de Táxi;Ad-Hoc;1;"A Companhia de Táxi Tabajara (CTT) é uma das maiores empresas de transporte do país. Possui uma vasta frota de carros e opera em todas as grandes cidades. Recentemente a CTT modernizou a sua frota, adquirindo um lote de 500 carros bi-combustíveis (carros que podem utilizar como combustível tanto álcool quanto gasolina). Além do maior conforto para os passageiros e o menor gasto com manutenção, com os novos carros é possível uma redução adicional de custo: como o preço da gasolina está sujeito a variações muito bruscas e pode ser vantagem, em certos momentos, utilizar álcool como combustível. Entretanto, os carros possuem um melhor desempenho utilizando gasolina, ou seja, em geral, um carro percorre mais quilômetros por litro de gasolina do que por litro de álcool.

Você deve escrever um programa que, dados o preço do litro de álcool, o preço do litro de gasolina e os quilômetros por litro que um carro bi-combustível realiza com cada um desses combustíveis, determine se é mais econômico abastecer os carros da CTT com álcool ou com gasolina. No caso de não haver diferença de custo entre abastecer com álcool ou gasolina a CTT prefere utilizar gasolina.";"A entrada é composta por uma linha contendo quatro números reais com precisão de duas casas decimais A e G (0.01 ≤ A, G  ≤ 10.00) Ra e Rg (0.01 ≤ Ra , Rg ≤ 20.00) representando respectivamente o preço por litro do álcool, o preço por litro da gasolina, o rendimento (km/l) do carro utilizando álcool e o rendimento (km/l) do carro utilizando gasolina.

A entrada deve ser lida do dispositivo de entrada padrão (normalmente o teclado).";"A saída deve ser composta por uma única linha contendo o caractere ‘A’ se é mais econômico abastecer a frota com álcool ou o caractere ‘G’ se é mais econômico ou indiferente abastecer a frota com gasolina.

A saída deve ser escrita no dispositivo de saída padrão (normalmente a tela).";False;1 / 10;1639;963;58.76%
2296;Trilhas;Ad-Hoc;4;"Nos finais de semana Paulo faz longas caminhadas pelas bonitas trilhas que atravessam as matas vizinhas à sua cidade. Recentemente Paulo adquiriu um aparelho de GPS (siglas do inglês Sistema de Posicionamento Global) e com ele mapeou as mais belas trilhas da região. Paulo programou o GPS para armazenar, a intervalos regulares, a altitude do ponto corrente durante o trajeto. Assim, após percorrer as trilhas com o seu GPS, Paulo tem informações que permitem por exemplo produzir gráficos como os abaixo:

					

					Paulo tem uma nova namorada, e quer convencê-la a passear junto com ele pelas trilhas. Para o primeiro passeio juntos, Paulo quer escolher uma trilha “fácil”. Segundo o seu critério, a trilha mais fácil é a que, em um dos sentidos do percurso, exige o menor esforço de subida. O esforço exigido em um trecho de subida é proporcional ao desnível do trecho.

					Dadas as informações colhidas por Paulo sobre distâncias e altitudes de um conjunto de trilhas, você deve escrever um programa que determine qual é a trilha que exige o menor esforço de subida.";"A primeira linha da entrada contém um número inteiro N que indica o número de trilhas. Cada uma das N linhas seguintes contém a descrição de uma trilha (1 ≤ N ≤ 100). As trilhas são identificadas por números de 1 a N. A ordem em que as trilhas aparecem na entrada determina os seus identificadores (a primeira trilha é a de número 1, a segunda a de número 2, a última a de número N). A descrição de uma trilha inicia com um número inteiro M que indica a quantidade de pontos de medição da trilha (2 ≤ M ≤ 1000), seguido de M números inteiros Hi (0 ≤ Hi ≤ 1000) representando a altura dos pontos da trilha (medidos a intervalos regulares e iguais para todas as linhas). Paulo pode percorrer a trilha em qualquer sentido (ou seja, partindo do ponto de altitude H1 em direção ao ponto de altitude HM, ou partindo do ponto de altitude HM em direção ao ponto de altitude H1).

A entrada deve ser lida do dispositivo de entrada padrão (normalmente o teclado).";"Seu programa deve produzir uma única linha na saída, contendo um número inteiro representando o identificador da melhor trilha, conforme determinado pelo seu programa. Em caso de empate entre duas ou mais trilhas, imprima a de menor identificador.

A saída deve ser escrita no dispositivo de saída padrão (normalmente a tela).";True;4 / 10;744;325;43.68%
2297;Bafo;Ad-Hoc;4;"Álbuns de figurinhas – sejam de times de futebol, princesas ou super-heróis – têm marcado gerações de crianças e adolescentes. Conseguir completar um álbum é uma tarefa muitas vezes árdua, envolvendo negociações com colegas para a troca de figurinhas. Mas a existência das figurinhas propicia uma outra brincadeira, que foi muito popular entre crianças no século passado: o jogo de bater figurinhas (o famoso “Bafo”). O jogo é muito simples, mas divertido (e muito competitivo). No início de uma partida, cada criança coloca em uma pilha um certo número de figurinhas. Uma partida é composta de rodadas; a cada rodada as crianças batem com a mão sobre a pilha de figurinhas, tentando virá-las com o vácuo formado pelo movimento da mão. As crianças jogam em turnos, até que a pilha de figurinhas esteja vazia. Ganha a partida a criança que conseguir virar mais figurinhas.

Aldo e Beto estão jogando bafo com todas as suas figurinhas e pediram sua ajuda para calcular quem é o vencedor.

Você deve escrever um programa que, dada a quantidade de figurinhas que Aldo e Beto viraram em cada rodada, determine qual dos dois é o vencedor.";A entrada é composta de vários casos de teste, cada um correspondendo a uma partida entre Aldo e Beto. A primeira linha de um caso de teste contém um número inteiro R (1 ≤ R ≤ 1000) que indica quantas rodadas ocorreram na partida. Cada uma das R linhas seguintes contém dois inteiros, A e B (0 ≤ A, B ≤ 100), que correspondem, respectivamente, ao número de figurinhas que Aldo e Beto conseguiram virar naquela rodada. Em todos os casos de teste há um único vencedor (ou seja, não ocorre empate). O final da entrada é indicado por R = 0.;Para cada caso de teste da entrada, seu programa deve produzir três linhas na saída. A primeira linha deve conter um identificador do caso de teste, no formato “Teste n”, onde n é numerado seqüencialmente a partir de 1. A segunda linha deve conter o nome do vencedor (Aldo ou Beto). A terceira linha deve ser deixada em branco. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.;False;4 / 10;2233;869;38.92%
2298;Mini-Poker;Ad-Hoc;6;"Mini-Poker é o nome de um jogo de cartas que é uma simplificação de Poker, um dos mais famosos jogos de cartas do mundo. Mini-Poker é jogado com um baralho normal de 52 cartas, com quatro naipes (copas, paus, espadas e ouro), cada naipe compreendendo treze cartas (Ás, 2, 3, 4, 5, 6, 7, 8, 9, 10, Valete, Dama, Rei).

No início do jogo, cada jogador recebe cinco cartas. O conjunto de cinco cartas vale um certo número de pontos, de acordo com as regras descritas abaixo. Diferentemente do jogo de Poker normal, em Mini-Poker o naipe das cartas é desconsiderado. Assim, para simplificar a descrição do jogo, vamos utilizar os números de 1 a 13 para identificar as cartas do baralho, na ordem dada acima. Uma outra diferença é que pode ocorrer empate entre mais de um vencedor; nesse caso os vencedores dividem o prêmio.

As regras para pontuação em Mini-Poker são as seguintes:


	Se as cinco cartas estão em seqüência a partir da carta x (ou seja, os valores das cartas são x, x+1, x+2, x+3 e x+4), a pontuação é x+200 pontos. Por exemplo, se as cartas recebidas são 10, 9, 8, 11 e 12, a pontuação é 208 pontos.
	Se há quatro cartas iguais x (uma quadra, ou seja, os valores das cartas são x, x, x, x e y), a pontuação é x+180 pontos. Por exemplo, se as cartas recebidas são 1, 1, 1, 10 e 1, a pontuação é 181 pontos.
	Se há três cartas iguais x e duas outras cartas iguais y (uma trinca e um par, ou seja, os valores das cartas são x, x, x, y e y), a pontuação é x + 160 pontos. Por exemplo, se as cartas recebidas são 10, 4, 4, 10 e 4, a pontuação é 164 pontos.
	Se há três cartas iguais x e duas outras cartas diferentes y e z (uma trinca, ou seja, os valores das cartas são x, x, x, y e z), a pontuação é x + 140 pontos. Por exemplo, se as cartas recebidas são 2, 3, 2, 2 e 13, a pontuação é 142 pontos.
	Se há duas cartas iguais x, duas outras cartas iguais y (x != y) e uma outra carta distinta z (dois pares, ou seja, os valores das cartas são x, x, y, y e z), a pontuação é 3 × x + 2 × y + 20 pontos, em que x > y. Por exemplo, se as cartas recebidas são 12, 7, 12, 8 e 7, a pontuação é 70 pontos.
	Se há apenas duas cartas iguais x e as outras são todas distintas (um par, ou seja, os valores das cartas são x, x, y, z e t), a pontuação é x pontos. Por exemplo, se as cartas recebidas são 12, 13, 5, 8 e 13, a pontuação é 13 pontos.
	Se todas as cartas são distintas, não há pontuação.


Escreva um programa que, fornecidas as cartas dadas a um jogador, calcule pontuação do jogador naquela jogada.";"A entrada é composta por vários casos de teste, cada um correspondendo a uma jogada. A primeira linha da entrada contém um inteiro N que indica o número de casos de teste (1 ≤ N ≤ 100). Cada uma das N linhas seguintes contém cinco números inteiros C1,C2,C3,C4 e C5, representando as cinco cartas recebidas por um jogador (1 ≤ C1,C2,C3,C4,C5 ≤ 13).

A entrada deve ser lida do dispositivo de entrada padrão (normalmente o teclado)";"Para cada caso de teste da entrada, seu programa deve produzir três linhas na saída. A primeira linha deve conter um identificador do caso de teste, no formato “Teste n”, onde n é numerado seqüencialmente a partir de 1. A segunda linha deve conter a pontuação do jogador considerando as cinco cartas recebidas. A terceira linha deve ser deixada em branco. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.

A saída deve ser escrita no dispositivo de saída padrão (normalmente a tela).";False;6 / 10;408;114;27.94%
2299;Pedido de Desculpas;Ad-Hoc;6;"Cuca saiu para jogar futebol com os amigos e esqueceu do encontro que tinha com a namorada. Ciente da mancada, Cuca deseja elaborar um pedido especial de desculpas. Resolveu então enviar flores e usar o cartão da floricultura para escrever um pedido especial de desculpas.

Cuca buscou na internet um conjunto de frases bonitas contendo a palavra ‘desculpe’ (que pode ocorrer mais de uma vez na mesma frase). No entanto, o cartão da floricultura é pequeno, e nem todas as frases que Cuca colecionou poderão ser aproveitadas.

Cuca quer aproveitar o espaço do cartão, onde cabe um número limitado de caracteres, para escrever um sub-conjunto das frases coletadas de modo que apareça o máximo de vezes possível a palavra ‘desculpe’.

Escreva um programa que, dados o número de caracteres que cabem no cartão e a quantidade de frases coletadas (com os respectivos comprimentos e os números de ocorrências da palavra ‘desculpe’), determine o número máximo de vezes que a palavra aparece, utilizando apenas as frases colecionadas, sem repetí-las.";"A entrada é constituída de vários casos de teste. A primeira linha de um caso de teste contém dois números inteiros C e F indicando respectivamente o comprimento do cartão em caracteres (8 ≤ C ≤ 1000) e o número de frases coletadas (1 ≤  F ≤50). Cada uma das F linhas seguintes descreve uma frase coletada. A descrição é composta por dois inteiros N e D que indicam respectivamente o número de caracteres na frase (8 <= N <= 200) e quantas vezes a palavra ‘desculpe’ ocorre na frase (1 ≤ D ≤ 25). O final da entrada é indicado por C = F = 0.

A entrada deve ser lida do dispositivo de entrada padrão (normalmente o teclado).";"Para cada caso de teste seu programa deve produzir três linhas na saída. A primeira identifica o conjunto de teste no formato “Teste n”, onde n é numerado a partir de 1. A segunda linha deve conter o máximo número de vezes que a palavra ‘desculpe’ pode aparecer no cartão, considerando que apenas frases coletadas podem ser utilizadas, e cada frase não é utilizada mais de uma vez. A terceira linha deve ser deixada em branco. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.

A saída deve ser escrita no dispositivo de saída padrão (normalmente a tela).";False;6 / 10;585;245;41.88%
2300;Transmissão de Energia;Grafos;5;"A distribuição de energia para as diversas regiões do país exige um investimento muito grande em linhas de transmissão e estações transformadoras. Uma linha de transmissão interliga duas estações transformadoras. Uma estação transformadora pode estar interligada a uma ou mais outras estações transformadoras, mas devido ao alto custo não pode haver mais de uma linha de transmissão interligando duas estações.

					As estações transformadoras são interconectadas de forma a garantir que a energia possa ser distribuída entre qualquer par de estações. Uma rota de energia entre duas estações e1 e ek é deﬁnida como uma sequência (e1 , l1 , e2 , l2 , ...ek−1 , lk−1 , ek ) onde cada ei é uma estação transformadora e cada li é uma linha de transmissão que conecta ei ei+1.

					Os engenheiros de manutenção do sistema de transmissão de energia consideram que o sistema está em estado normal se há pelo menos uma rota entre qualquer par de estações, e em estado de falha caso contrário.

					

					Figura 1: Dois exemplos de sistemas de transmissão: (a) sistema em estado normal; (b) sistema em estado de falha.

					Um grande tornado passou pelo país daniﬁcando algumas das linhas de transmissão, e os engenheiros de manutenção do sistema de transmissão de energia necessitam de sua ajuda.

					Dada a conﬁguração atual do sistema de transmissão de energia, descrevendo as interconexões existentes entre as estações, escreva um programa que determine o estado do sistema.";"A entrada é composta de vários casos de teste. A primeira linha de um caso de teste contém dois números inteiros E e L indicando respectivamente o número de estações (3 ≤ E ≤ 100) e o número de linhas de transmissão do sistema (E − 1 ≤ L ≤ E × (E − 1)/2)que continuam em funcionamento após o tornado. As estações são identiﬁcadas por números de 1 a E. Cada uma das L linhas seguintes contém dois inteiros X e Y que indicam que existe uma linha de transmissão interligando a estação X à estação Y. O ﬁnal da entrada é indicado por E = L = 0.

A entrada deve ser lida do dispositivo de entrada padrão (normalmente o teclado).";"Para cada caso de teste seu programa deve produzir três linhas na saída. A primeira identiﬁca o conjunto de teste no formato “Teste n”, onde n é numerado a partir de 1. A segunda linha deve conter a palavra “normal”, se, para cada par de estações, houver uma rota que as conecte, e a palavra “falha” caso não haja uma rota entre algum par de estações. A terceira linha deve ser deixada em branco. A graﬁa mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.

A saída deve ser escrita no dispositivo de saída padrão (normalmente a tela).";True;5 / 10;1307;465;35.58%
2301;Vivo ou Morto;Ad-Hoc;4;"Toda criança certamente já brincou de “vivo ou morto”. A brincadeira é dirigida por um “chefe” (um adulto), que comanda dois ou mais participantes (crianças). A brincadeira é composta de rodadas. No início, os participantes são organizados pelo chefe em fila única. A cada rodada o chefe grita “vivo” ou “morto” e todos os participantes tentam seguir sua ordem, levantando-se ao ouvir a palavra “vivo” ou abaixando-se ao ouvir a palavra “morto”. Um participante que não segue a ordem do chefe é eliminado, deixando o seu lugar na fila. Os participantes remanescentes agrupam-se novamente em fila única, preenchendo as posições dos participantes eliminados, mas mantendo suas posições relativas. O jogo continua até que uma rodada seja composta por exatamente um participante. Tal participante é dito o vencedor do jogo.

Por exemplo, considere que a brincadeira inicie com cinco participantes, identificados por números inteiros de 1 a 5, e que o chefe organize a fila na ordem m 3 → 2 → 1 → 4 → 5. Se na primeira rodada forem eliminados os participantes 2 e 4, a fila da segunda rodada será formada por 3 → 1 → 5; se na segunda rodada for eliminado o participante 1, a fila da terceira rodada será formada por 3 → 5. Se na terceira rodada o participante 3 for eliminado, o vencedor da brincadeira será o participante 5.

Sua tarefa é escrever um programa que determine o vencedor de uma partida de “vivo ou morto”, a partir da informação das ordens dadas pelo chefe e das ações executadas pelos participantes em cada rodada.";"A entrada é constituída de vários casos de teste, cada um representando uma partida. A primeira linha de um caso de teste contém dois números inteiros P e R indicando respectivamente a quantidade inicial de participantes (2 ≤ P ≤ 100) e quantidade de rodadas da partida (1 ≤ R ≤ 100). Os participantes são identificados por números de 1 a P. A segunda linha de um caso de teste descreve a fila organizada pelo chefe, contendo P números inteiros distintos x1, x2, . . . xP , onde x1 representa o identificador do participante no primeiro lugar na fila, x2 representa o identificador do participante no segundo lugar na fila, e assim por diante (1 ≤ xi ≤ P). Cada uma das R linhas seguintes representa uma rodada, contendo um número inteiro inteiro N indicando o número de participantes da rodada (2 ≤ N ≤ P), um número inteiro inteiro J representando a ordem dada pelo chefe (0 ≤ J ≤ 1) e N números inteiros Ai representando a ação do participante colocado na i-ésima posição na fila (0 ≤ Ai ≤ 1). Ordens e ações “vivo” são representadas pelo valor 1, ordens e ações “morto” pelo valor zero. Cada partida tem exatamente um vencedor, determinado somente na última rodada fornecida no caso de teste correspondente. O final da entrada é indicado por P = R = 0.

A entrada deve ser lida do dispositivo de entrada padrão (normalmente o teclado).";"Para cada caso de teste seu programa deve produzir três linhas. A primeira identifica o conjunto de teste no formato “Teste n”, onde n é numerado a partir de 1. A segunda linha deve conter o identificador do vencedor. A terceira linha deve ser deixada em branco. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.

A saída deve ser escrita no dispositivo de saída padrão (normalmente a tela).";False;4 / 10;1088;333;30.61%
2302;Conversa não tão Secreta;Ad-Hoc;10;"A polícia desconfia que dois homens que passeiam todos os dias pelo parque são na verdade criminosos. O parque é plano, de formato retangular, e estreitas faixas de grama o dividem em quadrados de mesmo tamanho, formando uma grade de N por M quadrados.

Os dois homens têm um comportamento curioso e suspeito em seu passeio: após encontrarem-se, conversam durante um minuto, andam mudando rapidamente de lugar, passando a ocupar um novo quadrado do parque, conversam mais um minuto, andam novamente (mudando de quadrado), conversam mais um minuto, e assim sucessivamente. A cada minuto escolhem uma direção (Norte, Sul, Leste ou Oeste) e andam até o quadrado imediatamente vizinho na direção escolhida.

Tentando escutar trechos das conversas dos homens, a polícia instalou um pequeno microfone multi-direcional em um dos quadrados do parque. O microfone é capaz de captar conversas realizadas no quadrado onde está instalado e em todos os quadrados imediatamente vizinhos.

Os dois homens sempre iniciam o passeio no quadrado de coordenadas (0,0).

Dadas as coordenadas do microfone e a sequência de movimentos que os dois homens realizaram durante seu passeio no parque, seu programa deve determinar quantos minutos de conversa foram captados pelo microfone.";"A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado). A primeira linha contém dois inteiros N e M que indicam respectivamente o número de linhas e o número de colunas do parque (0 ≤ N ≤ 1000000 e 0 ≤ M ≤ 1000000). A segunda linha contém dois inteiros X e Y que indicam a coordenada do microfone em termos de linhas e colunas (0 ≤ X ≤ N e 0 ≤ Y ≤ M). A terceira linha contém um inteiro K, indicando o número de quadrados pelos quais os dois homens passearam. A quarta linha contém K inteiros, entre 1, 2, 34, que indicam a rota tomada pelos dois homens durante o passeio; cada inteiro indica a direção tomada ao final de um minuto de conversa, com 1 representando o Leste, 2 representando o Oeste, 3 representando o Norte e 4 representando o Sul.";Seu programa deve imprimir, na saída padrão, uma única linha contendo um inteiro: o número de minutos de conversação captados pelo microfone.;False;10 / 10;310;100;32.26%
2303;Margaridas;Ad-Hoc;3;"Leopoldo é gerente de uma plantação de flores da Associação de Cultivo de Margaridas (ACM), um grupo que cultiva margaridas em grandes propriedades para abastecer floriculturas em grandes cidades.

As margaridas são plantadas em vasos dispostos em linhas e colunas, formando uma espécie de grade. Na plantação administrada por Leopoldo existem L linhas de vasos de margaridas, cada uma formada por C vasos. Para facilitar o gerenciamento, os vasos são organizados em lotes de M linhas e N colunas de vasos, sendo que não existem sobreposições entre os lotes (não existe nenhuma linha ou coluna comum a mais de um lote) e todos os lotes têm exatamente M linhas e N colunas.

A colheita é sempre feita em um único lote, coletando-se todas as margaridas daquele lote que estejam prontas para a venda. Uma semana antes de fazer a colheita, os funcionários da plantação analisaram cada vaso e anotaram quantas margaridas estarão prontas para venda na semana seguinte. Leopoldo agora precisa da sua ajuda para determinar qual o número máximo de margaridas que poderá ser colhido em um único lote de M × N vasos.

Sua tarefa é escrever um programa que, dado um mapa da plantação contendo o número de margaridas prontas para venda em cada vaso, encontre qual o número máximo de margaridas que podem ser colhidos por Leopoldo.";A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado). A primeira linha da entrada contém quatro números inteiros, L, C, M e N. L e C representam respectivamente o número de linhas (1 ≤ L ≤ 1000) e de colunas (1 ≤ C ≤ 1000) de vasos existentes na plantação. M e N representam respectivamente o número de linhas (1 ≤ M ≤ L) e de colunas (1 ≤ N ≤ C) dos lotes. As L linhas seguintes contêm C inteiros cada, representando número de margaridas prontas para colheita no vaso localizado naquela linha e coluna. Note que L M e C N são sempre inteiros, pois não há linha ou coluna de vasos que pertença a mais de um lote.;Seu programa deve imprimir, na saída padrão, uma única linha que contém o número máximo de margaridas que podem ser colhidos em um lote de M × N. Esse número não pode ser superior a 1000000.;False;3 / 10;458;224;48.91%
2304;Banco Imobiliário;Ad-Hoc;2;"Monopólio (conhecido no Brasil como Banco Imobiliário) é um dos jogos mais famosos do mundo, com 750 milhões de cópias vendidas. Durante o jogo, os jogadores podem comprar propriedades que estejam disponíveis, vendê-las para que elas voltem a ficar disponíveis, e cobrar aluguel pelo uso de uma determinada propriedade por outro jogador. O objetivo do jogo é acumular a maior quantidade de dinheiro possível.

O jogo é composto por um tabuleiro e um conjunto de cédulas de dinheiro. Três amigos, Dália, Elói e Félix, querem jogar uma partida de Monopólio, mas o irmãozinho menor de Dália escondeu as cédulas de dinheiro. Os três amigos decidiram jogar a partida assim mesmo, anotando em um papel todas as operações que ocorreram durante o jogo (compras, vendas e pagamentos de aluguéis). Assim que eles pararam de jogar, perceberam que levaria muito tempo para descobrir quanto dinheiro cada um acumulou. Eles então pediram sua ajuda para determinar esses valores.

Sua tarefa é escrever um programa que, a partir dos registros de jogadas realizados pelos três jogadores, determine a quantidade de dinheiro acumulada por cada um dos jogadores.";"A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado). A primeira linha da entrada contém dois inteiros, I e N que indicam respectivamente as quantias de dinheiro que Dália, Elói e Félix possuem no início do jogo (1 ≤ I ≤ 1000000) e o número de operações realizadas durante o jogo (1 ≤ N ≤ 10000). Note que os três jogadores iniciam a partida com a mesma quantidade de dinheiro. Os jogadores são representados na entrada sempre pela letra inicial de seu nome (‘D’, ‘E’ ou ‘F’). As N linhas contém as operações ocorridas durante o jogo. Cada linha pode ter um dos formatos abaixo:


	Compra — a letra C, seguida da letra inicial de um jogador J e de um inteiro X que representa o valor gasto por J na compra (0 < X ≤ 1000000). Exemplo: ‘C D 1000’.
	Venda — a letra V, seguida da letra inicial de um jogador J e de um inteiro X que representa o valor recebido por J na venda (0 < X ≤ 1000000). Exemplo: ‘V E 200’.
	Aluguel — a letra A, seguida da letra inicial de um jogador J que recebe o aluguel, da letra inicial do jogador K que paga o aluguel e de um inteiro X que representa o valor do aluguel (J != K e 0 ≤ X ≤ 1000000). Exemplo: ‘A F D 500’.


Os valores intermediários e totais acumulados por cada jogador estão entre 0 e 1000000.";Seu programa deve imprimir, na saída padrão, uma única linha composta de três inteiros que correspondem à quantidade de dinheiro acumulada por Dália, Elói e Félix, nesta ordem.;False;2 / 10;604;354;58.61%
2305;Colheita de Caju;Ad-Hoc;8;"Conrado é gerente em uma das fazendas de plantação de caju da Sociedade de Beneficiamento de Caju (SBC), um grupo que cultiva caju em grandes propriedades para o mercado externo.

Os cajueiros são plantados dispostos em linhas e colunas, formando uma espécie de grade. Na fazenda administrada por Conrado existem L linhas de cajueiros, cada uma formada por C colunas. Nesta semana Conrado deve executar a colheita da produção de um subconjunto contínuo de cajueiros. Esse subconjunto é formado por M linhas e N colunas de cajueiros. Há uma semana, seus funcionários analisaram cada cajueiro da fazenda e estimaram a sua produtividade em número de cajus prontos para a colheita. Conrado agora precisa da sua ajuda para determinar qual a produtividade máxima estimada (em número de cajus) de uma área de M × N cajueiros.

Sua tarefa é escrever um programa que, dado um mapa da fazenda contendo o número de cajus prontos para colheita em cada cajueiro, encontre qual o número máximo de cajus que podem ser colhidos na fazenda em uma área de M × N cajueiros.";A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado). A primeira linha da entrada contém quatro números inteiros, L, C, M e N. L e C representam, respectivamente, o número de linhas (1 ≤ L ≤ 1000) e de colunas (1 ≤ C ≤ 1000) de cajueiros existentes na fazenda. M e N representam, respectivamente, o número de linhas (1 ≤ M ≤ L) e de colunas (1 ≤ N ≤ C) de cajueiros a serem colhidos. As L linhas seguintes contêm C inteiros cada, representando número de cajus prontos para colheita no cajueiro localizado naquela linha e coluna.;Seu programa deve imprimir, na saída padrão, uma única linha que contém o número máximo estimado de cajus que podem ser colhidos em uma área contínua de M × N. Esse número não será superior a 1000000.;False;8 / 10;544;163;29.96%
2306;Escada Perfeita;Ad-Hoc;4;"Uma construtora, durante a criação de um parque temático, encontrou no terreno um conjunto de vários pilhas de cubos de pedra. Ao invés de pagar pela remoção dos cubos de pedras, um dos arquitetos da empresa achou interessante utilizar as pedras para decoração do parque, determinando que as pedras fossem rearranjadas no formato de “escada”. Para isso, os funcionários deveriam mover alguns cubos para formar os degraus das escadas. Só que o arquiteto decidiu que, entre uma pilha e outra de pedras deveria haver exatamente uma pedra de diferença, formando o que ele chamou de escada perfeita. O exemplo abaixo mostra um conjunto de cinco pilhas de pedras encontradas e as cinco pilhas como ficaram ap´os a arrumação em escada perfeita.

					

					Dada uma sequência de pilhas de cubos de pedras com suas respectivas alturas, você deve determinar o número mínimo de pedras que precisam ser movidas para formar uma escada perfeita com exatamente o mesmo número de pilhas de pedras encontrado inicialmente (ou seja, não devem ser criadas ou eliminadas pilhas de pedras). O degrau mais baixo da escada deve sempre estar do lado esquerdo.";A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado). A primeira linha contém um inteiro N que indica o número de pilhas de pedras. A segunda linha contém N números inteiros que indicam a quantidade de cubos de pedras em cada uma das pilhas, da esquerda para a direita.;Seu programa deve imprimir, na saída padrão, uma única linha, contendo um inteiro: o número mínimo de cubos de pedras que devem ser movidos para transformar o conjunto de pilhas em uma escada perfeita, conforme calculado pelo seu programa. Caso não seja possível efetuar a transformação em escada perfeita, imprima como resultado o valor -1.;True;4 / 10;394;156;39.59%
2307;Jogo de Cartas;Ad-Hoc;10;"Marlene está jogando um passatempo de sua autoria. Ela possui um baralho com N cartas, numeradas de 1 a N, tal que não existem duas cartas com o mesmo número. O jogo consiste de várias rodadas, e são utilizadas três pilhas denominadas Compra, Descarte e Morto. Inicialmente, as cartas são embaralhadas e colocadas com a face para cima, constituindo a pilha Compra (as pilhas Descarte e Morto est˜ao inicialmente vazias). Marlene então tira as cartas da pilha Compra, uma a uma, e as coloca na pilha Descarte, com as faces para baixo, na mesma ordem, até encontrar a carta com o número 1. Quando a encontra, Marlene a coloca na pilha Morto e recomeça o processo de retirar cartas da pilha Compra, agora procurando a próxima carta na sequência (2), e o processo é repetido para as outras cartas na sequência (3, 4, ...).

					Quando as cartas da pilha Compra terminam, encerra-se uma rodada. Nesse momento, Marlene vira a pilha Descarte de modo que as cartas fiquem com a face para cima (sem reembaralhar) e a coloca no lugar da pilha Compra. Inicia-se uma nova rodada, e processo recomeça, com Marlene procurando a próxima carta na sequência.

					Repete-se esse processo até que a carta removida do baralho seja a de número N, quando o jogo acaba. O resultado do jogo é o número de rodadas.

					

					Escreva um programa que, dada a ordem em que as cartas estÃo na pilha Compra no inÍcio do jogo, determine o resultado do jogo (ou seja, o número de rodadas).";A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado). A primeira linha da entrada contém um inteiro N que indica quantas cartas existem no baralho (1 ≤ N ≤ 100000). A segunda linha contém N inteiros, representando as cartas do baralho, na sequência em que serão tiradas por Marlene da pilha Compras.;Seu programa deve imprimir, na saída padrão, uma única linha, contendo o número de vezes que Marlene terá que descartar as cartas durante o jogo.;True;10 / 10;547;70;12.80%
2308;Museu;Ad-Hoc;10;"Desde que o arquiteto Frank Gehry projetou o Museu Guggenheim de Bilbao, os museus têm sido construídos com formas cada vez mais complexas, fugindo de padrões pré-estabelecidos e de simetrias. Um típico museu moderno é composto por um conjuto de salas ligadas por corredores e escadas, sem preocupação com a prédefinição de caminhos a serem seguidos pelas pessoas.

Henriqueta é uma professora do ensino fundamental que deseja visitar o museu da Ordem Brasileira de Medicina (OBM) para mostrar aos seus alunos de ciências como o corpo humano funciona e como as cirurgias eram feitas nos séculos XIX e XX. Henriqueta quer planejar uma visita pelas salas do museu, obedecento as seguintes restrições:


	a visita deve começar e terminar em uma mesma sala;
	exceto a sala de partida, nenhuma sala do museu pode ser visitada mais de uma vez;
	a visita deve incluir pelo menos duas salas;
	os corredores são unidirecionais, ou seja, as pessoas podem caminhar, em um corredor, apenas em uma direção.
	a visita deve tomar o menor tempo possível.


Um estudo preliminar, realizado pelo próprio museu, indica o tempo médio que cada visitante fica em uma sala e quanto tempo leva-se para atravessar um corredor ou uma escada. Henriqueta quer a sua ajuda para calcular o tempo total da menor visita que ela pode efetuar, obedecendo as restrições dadas.

Escreva um programa que, dados um conjunto de salas, um conjunto de corredores e escadas que ligam essas salas e o tempo necessário para percorrer cada sala e cada corredor, determine qual é o menor tempo possível para uma visita. Note que o tempo de visita da sala onde a visita se inicia deve ser contado apenas uma vez.";A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado). A primeira linha da entrada contém dois inteiros S e C, que indicam, respectivamente, o número de salas (1 ≤ S ≤ 1000) e o número de corredores e escadas (1 ≤ C ≤ 1000). As salas são numeradas de 1 a S. A segunda linha contém S inteiros representando o tempo gasto para percorrer cada sala. Cada uma das C linhas seguintes descreve um corredor ou escada. A descrição ´e composta por três inteiros, I, F e T , indicando que o corredor somente pode ser percorrido da sala I (1 ≤ I ≤ N) para a sala F (1 ≤ F ≤ N) no tempo T (1 ≤ T ≤ 1000). O tempo total máximo é sempre menor ou igual a 1000000.;Seu programa deve imprimir, na saída padrão, uma única linha contendo o tempo gasto na visita de menor duração que Henriqueta pode realizar no museu. Existe pelo menos uma visita que atende as restrições impostas.;False;10 / 10;237;41;17.30%
2309;Truco;Ad-Hoc;5;"Truco é um jogo de cartas que pode ser jogado por duas ou mais pessoas. Existem diversas variações: o Truco Cego ou Truco Espanhol (popular no sul do Brasil, Argentina, Uruguai e outros países), o Truco Paulista, Capixaba ou Mineiro (variações populares no Brasil), o Truco Índio e o Truco Eteviano. Em geral, é uma disputa de três rodadas (“melhor de três”) para ver quem tem as cartas mais “fortes” (de valor simbólico mais alto).

					Adalberto e Bernardete estão jogando uma variação de truco com 40 cartas (foram retirados do baralho todas as cartas de valor 8, 9 e 10, além dos coringas), e o valor simbólico independente do naipe da carta. A ordem de valor simbólico das cartas nessa variação de truco é mostrada abaixo, ordenada da mais “fraca” (mais à esquerda) para a mais “forte” (mais à direita)

					4 5 6 7 Q J K A 2 3

					Cada partida é disputada em três rodadas. A cada rodada, os jogadores escolhem uma das cartas para mostrar, e vence aquele que tiver a carta com o maior valor simbólico. Em caso de empate (ou seja, os dois apresentarem cartas com os mesmos valores simbólicos), Adalberto vence, pois é mais velho que Bernardete. Vence a partida aquele que vencer o maior número de rodadas.

					Depois de algumas partidas, Adalberto e Bernardete estão com dificuldades para saber quem venceu mais partidas, e pediram a sua ajuda.

					Sua tarefa é escrever um programa que calcule o número de partidas que cada um dos competidores (Adalberto e Bernardete) venceram.";A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado). A primeira linha da saída possui um inteiro N que indica o número de partidas disputadas entre Adalberto e Bernardete (1 ≤ N ≤ 1000000). As N linhas seguintes contêm cada uma seis inteiros, A1, A2, A3, B1, B2 e B3 , que correspondem às três cartas apresentadas por Adalberto nas rodadas 1, 2 e 3 daquela partida (A1, A2, A3 ∈ {1, 2, 3, 4, 5, 6, 7, 11, 12, 13}), seguidas pelas três cartas apresentadas por Bernardete nas rodadas 1, 2 e 3 da mesma partida (B1, B2, B3 ∈ {1, 2, 3, 4, 5, 6, 7, 11, 12, 13}). Na entrada, o número 1 representa o Ás  (A), 11 representa o Valete (J), 12 representa a Dama (Q) e 13 representa o Rei (K).;Seu programa deve imprimir, na saída padrão, uma única linha, que contém os números de partidas vencidas por Adalberto e por Bernadete, nessa ordem, separados por espaços.;False;5 / 10;942;319;33.86%
2310;Voleibol;Iniciante;3;Um treinador de voleibol gostaria de manter estatísticas sobre sua equipe. A cada jogo, seu auxiliar anota quantas tentativas de saques, bloqueios e ataques cada um de seus jogadores fez, bem como quantos desses saques, bloqueios e ataques tiveram sucesso (resultaram em pontos). Seu programa deve mostrar qual o percentual de saques, bloqueios e ataques do time todo tiveram sucesso.;"A entrada é dada pelo número de jogadores N (1 ≤ N ≤ 100), seguido pelo nome de cada um dos jogadores. Abaixo do nome de cada jogador, seguem duas linhas com três inteiros cada. Na primeira linha S, B e A (0 ≤ S,B,A ≤ 10000) representam a quantidade de tentativas de saques, bloqueios e ataques e na segunda linha, S1, B1 e A1 (0 ≤ S1 ≤ S; 0 ≤ B1 ≤ B; 0 ≤ A1 ≤ A) com o número de saques, bloqueios e ataques deste jogador que tiveram sucesso.";A saída deve conter o percentual total de saques, bloqueios e ataques do time todo que resultaram em pontos, conforme mostrado no exemplo.;False;3 / 10;8015;4184;52.20%
2311;Saltos Ornamentais;Iniciante;2;Em uma determinada competição de saltos ornamentais, cada salto recebe um grau de dificuldade e é avaliado por sete juízes. Após cada salto, os juízes, que não se comunicam uns com os outros, mostram suas notas. Um salto é cotado entre zero e dez pontos. Depois de apresentadas as notas, a mais alta e a mais baixa são descartadas. O restante é somado e multiplicado pelo grau de dificuldade do salto, que gira entre 1,2 e 3,8, definido sempre antes do início da apresentação do atleta. O julgamento então é feito da seguinte forma: supondo que um saltador tenha sua nota de partida (seu grau de dificuldade de movimento) avaliada em 2,0 e tire notas 6,0, 5,0, 5,0, 5,0, 5,0, 5,0, 4,0 em sua execução. Disso, retira-se a nota mais baixa e a mais alta, o que gera um resultado parcial de 25,0. Então, pega-se a nota de execução e multiplica-a pela nota de partida para se chegar ao resultado final, que neste exemplo é de 50,0. Seu programa deve apresentar o resultado de uma competição de acordo com estas regras.;A primeira linha de entrada contém o número de competidoresN (0 ≤ N ≤ 100). A seguir são mostrados os nomes de cada um dos competidores seguidos pelo grau de dificuldade dos seus saltos GD (1.2 ≤ GD ≤ 3.8) e, a seguir, na linha seguinte, as 7 notas recebidas N1 a N7 (0 ≤ N1 a N7 ≤ 10).;A saída deve apresentar o resultado da competição, com o nome dos competidores seguido de seu resultado, na ordem em que os dados foram lidos.;False;2 / 10;4443;2745;61.78%
2312;Quadro De Medalhas;Ad-Hoc;2;Alguém deixou o quadro de medalhas das olimpíadas fora de ordem. Seu programa deve colocá-lo na ordem correta. A ordem dos países no quadro de medalhas é dada pelo número de medalhas de ouro. Se há empate em medalhas de ouro, a nação que tiver mais medalhas de prata fica a frente. Havendo empate em medalhas de ouro e prata, fica mais bem colocado o país com mais medalhas de bronze. Se dois ou mais países empatarem nos três tipos de medalhas, seu programa deve mostrá-los em ordem alfabética.;A entrada é dada pelo número de países participantes N (0 ≤ N ≤ 500) seguido pela lista dos países, com suas medalhas de ouro O (0 ≤ O ≤ 10000), prata P (0 ≤ P ≤ 10000) e bronze B (0 ≤ B ≤ 10000).;A saída deve ser a lista de países, com suas medalhas de ouro, prata e bronze, na ordem correta do quadro de medalhas, com as nações mais premiadas aparecendo primeiro.;False;2 / 10;2761;1345;48.71%
2313;Qual Triângulo;Iniciante;3;Dados três valores, verifique se os três podem formar um triângulo. Em caso afirmativo, verifique se ele é escaleno, isóceles ou equilátero e se trata-se de um triângulo retângulo ou não.;A entrada consiste em três números inteiros A,B e C (0 < A,B,C < 105).;"A saída deve conter a string ""Invalido"" se os valores lidos não formarem um triângulo. Se os valores formarem um triângulo a saída deve ser ""Valido-Equilatero"", ""Valido-Escaleno"" ou ""Valido-Isoceles"" de acordo com a característica do triângulo seguido de ""Retangulo: S"" se o triângulo for retângulo ou ""Retangulo: N"" se não for, conforme os exemplos.";False;3 / 10;9558;3590;37.56%
2314;Indentador;Strings;8;"Nishi é um aluno do 1º semestre de uma faculdade na área de computação, um amante da linguagem C e possui a certa mania de programar tudo em uma só linha de código. Lúcius, seu professor, manda quinzenalmente um EP (Exercício projeto) e desconta 10% da nota a cada indentação errada. Com medo da reprovação na matéria de LP(Linguagem de Programação), Nishi pediu a sua ajuda com um programa que indente o código automaticamente, já que ele tem que montar seu EP e não terá tempo de fazer um programa para indentar o seu próprio código.



Nishi possui certos padrões na hora de programar: 

- A sintaxe utilizada será baseada na linguagem C;

- As “bibliotecas” e “defines” são postas normalmente, com uma quebra de linha;

Exemplo:

#include<stdio.h>

#define MAX 1000001

- Fora as bibliotecas e defines, o restante do código se encontra em apenas uma linha;

Exemplo:

#include<stdio.h>

int main(void){printf(“Hello World\n”);return 0;}

- Ele utiliza somente os comandos de operações aprendidos até o momento (if,else,for,while,switch), funções, defines, printf, scanf, ;

- Não é usada nenhuma variável com nomes semelhantes a comandos;

- É garantida a presença de ‘;’ somente no comando “for” e nos finais de comandos, conforme a sintaxe da linguagem C;

Exemplo de comando que não será utilizado:

printf(“;”);

Exemplo de comando válido:

 for(i=0;i<10;i++){printf(“Hello World”);}

- Não será utilizado operadores ternários, considere somente os comandos citados anteriormente;

Os padrões de indentação:

- Todo comando (if,else,for,while,switch) é iniciado com ‘{‘ na linha seguinte, e finalizado com ‘}’ na linha seguinte, mesmo se tiver uma única instrução; (Note que existe uma quebra de linha após o ‘}’)

Exemplo:

if(1)

{

....printf(“Hello World\n”);

}

- Todo conteúdo dentro das chaves de abertura e de fechamento deverá ter uma tabulação a direita, a regra vale para as sub-chaves também;";A entrada contém várias linhas e termina com EOF. Cada linha poderá ter até 2000 caracteres (0 < C < 2000). As entradas obedecem aos padrões exigidos por Nishi, como citados anteriormente;"A saída deverá seguir a indentação (feita com quatro pontos ""...."",representando uma tabulação a direita) segundo os padrões de Nishi, o último ‘}’ de todo bloco é finalizado com uma quebra de linha, conforme o modelo abaixo.";True;8 / 10;396;71;17.93%
2315;Diferença Fácil Entre Datas;Ad-Hoc;2;Seu programa deve ler duas datas (dia e mês) e calcular a diferença entre elas, em dias. Considere se tratar de um ano não bissexto (fevereiro com 28 dias).;A entrada contem duas linhas contendo dois inteiros cada, representando o dia e o mês da primeira e da segunda data. A primeira data será sempre menor (anterior no ano) ou igual à segunda.;A saída deverá conter o número de dias entre a primeira e a segunda data.;False;2 / 10;613;419;68.35%
2316;Autorama;Ad-Hoc;7;"Seu Diniz possui uma pista de autorama profissional. Nessa pista a marcação de tempo é feita com sensores que fazem leitura da passagem de cada cada carrinho pelo ponto onde o sensor está instalado. K sensores são distribuídos ao longo da pista nos chamados postos de checagem.

Durante uma corrida, os carrinhos devem passar pelos postos de checagem na ordem pré-estabelecida, ou seja, primeiro no posto de checagem 1, depois no 2, até o posto de checagem K, quando ele deve retornar ao posto de checagem 1 para completar uma volta. Entretanto, às vezes, quando os carrinhos saem da pista os competidores os recolocam mais à frente na pista, pulando alguns postos de checagem. Nesse caso, todas as passagens daquele carrinho por postos de checagem devem ser ignoradas até que ele passe pelo posto de checagem correto.

A posição de um carrinho na corrida é determinada pelo número de postos de checagem que ele passou na ordem correta. Caso dois carrinhos tenham passado pelo mesmo número de postos de checagem, a ordem utilizada é a ordem cronológica, ou seja, está mais à frente o carrinho que passou pelo último posto de checagem primeiro.

A pista de autorama do Seu Diniz possui um computador central que recebe os sinais lidos pelos sensores, mas ainda não possui um programa que permita determinar a posição dos carrinhos ao final da corrida.

Escreva um programa que, dado uma lista de leituras feitas pelos sensores, determine a classificação dos carrinhos na corrida.";A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado). A primeira linha da entrada contêm três inteiros, K, N e M. K representa o número de postos de checagem (1 ≤ K ≤ 100), N o número de carrinhos (1 ≤ N ≤ 100) e M o número de leituras feitas pelos sensores (1 ≤ M ≤ 10000). Os carrinhos são identificados por inteiros de 1 a N e os postos de checagem por inteiros de 1 a K. As M linhas seguintes contêm cada uma dois inteiros X e Y, separados por espaço. Eles indicam que o carrinho número X (1 ≤ X ≤ N) passou pelo posto de checagem Y (1 ≤ Y ≤ K). Os eventos são apresentados na ordem cronológica. Sempre é possível determinar a classificação de todos os pilotos com os dados fornecidos.;"Seu programa deve imprimir, na saída padrão, uma linha contendo N inteiros, sendo que o i-ésimo inteiro representa o carrinho que ocupa a posição i na corrida. Ou seja, o primeiro inteiro é o que ocupa o primeiro lugar, o segundo inteiro é o carrinho que ocupa o segundo lugar, e assim por diante.

Cada inteiro I contendo o número do carrinho que ocupa a posição de número I na corrida: o primeiro colocado ocupa a posição de número 1, o segundo colocado a posição de número 2, etc.";False;7 / 10;367;104;28.34%
2317;Lobo Mau;Ad-Hoc;6;"Na fazenda do Sr. Amarante existe um certo número de ovelhas. Enquanto elas estão dormindo profundamente, alguns lobos famintos tentam invadir a fazenda e atacar as ovelhas. Ovelhas normais ficariam indefesas diante de tal ameaça, mas felizmente as ovelhas do Sr. Amarante são praticantes de artes marciais e conseguem defender-se adequadamente.

A fazenda possui um formato retangular e consiste de campos arranjados em linhas e colunas. Cada campo pode conter uma ovelha (representada pela letra ‘k’), um lobo (letra ‘v’), uma cerca (símbolo ‘#’) ou simplesmente estar vazio (símbolo ‘.’). Consideramos que dois campos pertencem a um mesmo pasto se podemos ir de um campo ao outro através de um caminho formado somente com movimentos horizontais ou verticais, sem passar por uma cerca. Na fazenda podem existir campos vazios que não pertencem a nenhum pasto. Um campo vazio não pertence a nenhum pasto se é possível “escapar” da fazenda a partir desse campo (ou seja, caso exista um caminho desse campo até a borda da fazenda).

Durante a noite, as ovelhas conseguem combater os lobos que estão no mesmo pasto, da seguinte forma: se em um determinado pasto houver mais ovelhas do que lobos, as ovelhas sobrevivem e matam todos os lobos naquele pasto. Caso contrário, as ovelhas daquele pasto são comidas pelos lobos, que sobrevivem. Note que caso um pasto possua o mesmo número de lobos e ovelhas, somente os lobos sobreviverão, já que lobos são predadores naturais, ao contrário de ovelhas.

Escreva um programa que, dado um mapa da fazenda do Sr. Amarante indicando a posição das cercas, ovelhas e lobos, determine quantas ovelhas e quantos lobos estarão vivos na manhã seguinte.";A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado). A primeira linha da entrada contém dois inteiros R e C que indicam o número de linhas (3 ≤ R ≤ 250) e de colunas (3 ≤ C ≤ 250) de campos da fazenda. Cada uma das R linhas seguintes contém C caracteres, representando o contéudo do campo localizado naquela linha e coluna (espaço vazio, cerca, ovelha ou lobo).;Seu programa deve imprimir, na saída padrão, uma única linha, contendo dois inteiros, sendo que o primeiro representa o número de ovelhas e o segundo representa o número de lobos que ainda estão vivos na manhã seguinte.;False;6 / 10;271;120;44.28%
2318;Quadrado Mágico;Ad-Hoc;8;"Senhor Coelho é conhecido mundialmente pela fabricação de quadrados mágicos de dimensôes 3 × 3. Um quadrado é chamado mágico quando a soma dos elementos de uma determinada linha, coluna ou diagonal é sempre igual.

Infelizmente, assaltantes invadiram recentemente a oficina do Sr. Coelho e roubaram alguns dos números de seus quadrados mágicos. Felizmente os meliantes não conseguiram roubar mais do que 3 números de cada quadrado. Desesperado, pois devia entregar os quadrados naquele dia, o Sr. Coelho veio procurar a sua ajuda para tentar completar os quadrados com os números faltantes.

Escreva um programa que, dado um quadrado mágico com alguns números faltando, determine qual era o quadrado mágico original.";A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado). A entrada contém três linhas, cada uma contendo três inteiros N (0 ≤ N ≤ 20000). O número zero representa os digitos que foram roubados. Existem no máximo três números zero na entrada.;Seu programa deve imprimir, na saída padrão, três linhas, cada uma contendo três inteiros, descrevendo a configuração original do quadrado mágico.;False;8 / 10;622;171;27.49%
2319;Penalidade Mínima;Ad-Hoc;9;"A Sra. Bastos é uma elaboradora de passatempos matemáticos e pediu para que você criasse um programa que conseguisse jogar de forma eficiente a sua mais nova criação.

O jogo consiste em um tabuleiro formado por casas dispostas em N linhas por N colunas. Cada casa contém um inteiro não-negativo. No começo do jogo, uma peça é colocada na casa localizada no canto superior esquerdo, ou seja, na posição (1,1). O objetivo do jogo é mover a peça até a casa localizada no canto inferior direito (posição (N,N)) somente movendo um único quadrado para baixo ou para a direita em cada passo. Além disso, a peça não pode ser colocada em nenhum quadrado que contenha o número zero.

O custo do caminho utilizado para percorrer o tabuleiro corresponde ao produto de todos os números das casas percorridos no caminho. A penalidade é definida utilizando a representação decimal do custo, sendo representada pelo número de dígitos zeros, contados da direita para a esquerda, antes do primeiro dígito diferente de zero. Por exemplo, um custo igual a 501000 tem penalidade 3, e um custo igual a 501 tem penalidade zero.

O objetivo do jogo é conseguir chegar à casa (N,N) através de um caminho “otimizado”. Dizemos que o caminho foi otimizado se a penalidade for mínima.

Escreva um programa que, dado um tabuleiro, determine a penalidade do custo otimizado.";A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado). A primeira linha da entrada contém um inteiro N que indica o número de linhas e colunas do tabuleiro (1 ≤ N ≤ 1000). As N linhas seguintes contêm N inteiros I cada (1 ≤ I ≤ 1000000), que representam o valor da casa do tabuleiro naquela posição. Existe pelo menos uma solução possível para todos os casos de teste.;Seu programa deve imprimir, na saída padrão, uma única linha, contendo a penalidade do custo “otimizado”.;False;9 / 10;175;48;27.43%
2320;Subsequência;Ad-Hoc;6;"Uma subsequência de uma sequência de caracteres S é definida como uma sequência de caracteres de S, não necessariamente consecutivos, na mesma ordem em que eles ocorrem na sequência original.

Dadas duas sequências de caracteres, S1 e S2, dizemos que S1 possui grau N de independência em relação a S2 se, dada qualquer subsequência de tamanho N de S1, não ´e possível formar tal subsequência a partir de S2.

Por exemplo, o grau de independência da sequência S1=‘ababaa’ em relação à sequência S2=‘abbaa’ é igual a 3, pois todas as subsequências de S1 de tamanho 1 (‘a’, ‘b’) e todas as subsequências de tamanho 2 (‘aa’, ‘ab’, ‘ba’, ‘bb’) podem ser formadas a partir de S2, mas a subsequência ‘bab’, de tamanho 3, não pode ser formada a partir de S2.

Escreva um programa que, dadas duas sequências S1 e S2, determine o grau N de independência de S1 em relação a S2.";A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado). A entrada contém três linhas. A primeira linha contém dois inteiros N e M que indicam respectivamente o comprimento da sequência S1 (1 ≤ N ≤ 2000) e o comprimento da sequência S2 (1 ≤ M ≤ 2000). A segunda linha contém a sequência S1 e a terceira linha contém a sequência S2. As sequências são formadas somente pelas letras minúsculas sem acento (’a’ - ’z’). As sequências possuem no máximo 2000 caracteres. Sempre existe uma solução para os casos de teste fornecidos.;Seu programa deve imprimir, na saída padrão, uma única linha, contendo o grau N de indepedência de S1 em relação a S2.;False;6 / 10;32;16;50.00%
2321;Detectando Colisões;Ad-Hoc;6;"Detecção de colisão é uma das operações mais comuns (e importantes) em jogos eletrônicos. O objetivo, basicamente, é verificar se dois objetos quaisquer colidiram, ou seja, se a interseção entre eles é diferente de vazio. Isso pode ser usado para saber se duas naves colidiram, se um monstro bateu numa parede, se um personagem pegou um item, etc.

Para facilitar as coisas, muitas vezes os objetos são aproximados por figuras geométricas simples (esferas, paralelepípedos, triângulos etc). Neste problema, os objetos são aproximados por retângulos num plano 2D.

Escreva um programa que, dados dois retângulos, determine se eles se interceptam ou não.";A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado). Cada caso de teste contém duas linhas. Cada linha contém quatro inteiros (x0, y0, x1, y1, sendo 0 ≤ x0 < x1 ≤ 1.000.000 e 0 ≤ y0 < y1 ≤ 1.000.000) separados por um espaço em branco representando um retângulo. Os lados do retângulo são sempre paralelos aos eixos x e y.;Seu programa deve imprimir, na saída padrão, uma única linha para cada caso de teste, contendo o número 0 (zero) caso não haja interseção ou o número 1 (um) caso haja.;False;6 / 10;1727;412;23.86%
2322;Peça Perdida;Ad-Hoc;3;"Joãozinho adora quebra-cabeças, essa é sua brincadeira favorita. O grande problema, porém, é que às vezes o jogo vem com uma peça faltando. Isso irrita bastante o pobre menino, que tem de descobrir qual peça está faltando e solicitar uma peça de reposição ao fabricante do jogo. Sabendo que o quebra-cabeças tem N peças, numeradas de 1 a N e que exatamente uma está faltando, ajude Joãozinho a saber qual peça ele tem de pedir.

Escreva um programa que, dado um inteiro N e N - 1 inteiros numerados de 1 a N, descubra qual inteiro está faltando.";A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado). A entrada contém 2 linhas. A primeira linha contém um inteiro N (2 ≤ N ≤ 1.000). A segunda linha contém N - 1 inteiros numerados de 1 a N (sem repetições).;Seu programa deve imprimir, na saída padrão, uma única linha, contendo o número que está faltando na sequência dada.;False;3 / 10;1539;818;53.15%
2323;Móbile;Ad-Hoc;5;"Móbiles são objetos muito populares hoje em dia, sendo encontrados até em berços, para diversão de bebês, mas foram concebidos há muito tempo (em 1931) pelo então jovem artista americano Alexander Calder como esculturas em movimento. Um móbile é uma estrutura composta de peças unidas por fios. O móbile é preso por um fio a uma argola pela qual ele é suspenso, permitindo que a estrutura movimente-se livremente. A argola é presa a uma única peça, chamada de peça-raiz do móbile. A peça-raiz pode ter zero ou mais sub-móbiles pendurados nela, cada sub-móbile sendo composto por uma peça-raiz na qual por sua vez podem estar pendurados zero ou mais sub-móbiles, e assim sucessivamente. Abaixo podemos ver dois exemplos de móbiles:

					 

					Victor é dono de uma fabrica de móbiles que emprega centenas de artesãos. Cada móbile produzido na fábrica é confeccionado por um artesão, que cria móbiles de acordo com o seu gosto pessoal, utilizando peças de formatos distintos. Entretanto, Victor tem notado que nem todos os seus artesãos possuem a mesma habilidade artística, de forma que às vezes o móbile produzido nem sempre é bem balanceado, segundo a sua concepção. Para Victor, um móbile é bem balanceado se, para cada peça, todos os sub-móbiles pendurados nela são compostos pelo mesmo número de peças. O número de peças de um sub-móbile é determinado contando-se o número de peças que o compõe, incluindo a sua peça-raiz. Note que cada peça do móbile, exceto a peça-raiz, é pendurada em exatamente uma outra peça.

					Por exemplo, o móbile da figura (a) acima é um móbile bem balanceado: a peça-raiz possui um único sub-móbile, que por sua vez possui três sub-móbiles, todos com o mesmo número de peças (uma única). Já o móbile da figura (b) é um móbile mal balanceado: a peça-raiz possui dois sub-móbiles, um com o total de duas peças e outro com o total de uma peça.

					Dada a descrição de um móbile, você deve escrever um programa para determinar se o móbile está bem balanceado ou não.";A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado). A primeira linha da entrada contém um inteiro N que indica o número de peças utilizadas no móbile (1 ≤ N ≤ 10.000). As peças são identificadas por inteiros de 1 a N . Cada uma das N linhas seguintes contém dois números inteiros I e J , indicando que a peça de número I está pendurada na peça de número J (a peça raiz está pendurada na argola, que é identificada pelo o número 0).;Seu programa deve imprimir, na saída padrão, uma única linha, contendo a palavra bem se o móbile estiver bem balanceado ou mal caso esteja mal balanceado. A palavra deve ser escrita com todas as letras em minúsculas.;True;5 / 10;212;102;48.11%
2324;Pastas;Ad-Hoc;5;"Estela é uma secretária dedicada da OBI (Organização Burocrática Internacional), um megaconglomerado empresarial voltado a criação de documentos e preenchimento de formulários. Todo dia ela recebe milhares de pastas suspensas e seu objetivo é organizá-las de uma forma que seja simples recuperar uma pasta do arquivo.

Cada pasta possui uma pequena aba, que fica anexada à pasta e é visível quando a pasta está suspensa em seu arquivo. Todo funcionário fixa a aba em uma das posições especificadas pelo manual de fixação de abas, embora ele possa escolher, ao acaso, qualquer uma das posições descritas no manual. Tais posições são numeradas de 1 até P .

Estela notou que fica consideravelmente mais fácil encontrar as pastas se elas forem arquivadas da seguinte forma: primeiro uma pasta com aba na posição 1, depois uma com aba na posição 2, e assim sucessivamente, até que uma pasta com aba na posição P seja arquivada. Logo após, repete-se o processo, arquivando uma pasta com aba na posição 1. Para Estela, um conjunto de pastas é arquivado de forma perfeita se todas as pastas desse conjunto forem arquivadas da forma descrita anteriormente, ou seja:


	Imediatamente após toda pasta com aba na posição I , I < P , existe uma pasta com aba na posição I + 1 ou não há nenhuma pasta.
	Imediatamente após toda pasta com aba na posição P , existe uma pasta com aba na posição 1 ou não há nenhuma pasta.
	Todas as pastas do conjunto são armazenadas.


Dado um conjunto de pastas e a posição de suas abas, determinar se é possível arquivar esse conjunto de pastas de forma perfeita.";A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado). A primeira linha da entrada contém dois inteiros P e N que indicam, respectivamente, o número de posições possíveis para se colar as abas (1 ≤ P ≤ 1.000) o número pastas a serem armazenadas (1 ≤ N ≤ 1.000.000). As N linhas seguintes contém um inteiro I (1 ≤ I ≤ P ) cada representando a posição onde a aba da I -ésima pasta foi colada.;Seu programa deve imprimir, na saída padrão, uma única linha, contendo a letra S se for possível fazer um arquivamento perfeito ou N caso contrário.;False;5 / 10;237;97;40.93%
2325;Repositórios;Ad-Hoc;6;"Uma das boas práticas ao administrar um conjunto de computadores é manter os aplicativos sempre atualizados. Entretanto, em uma grande corporação com milhares de aplicativos instalados, a simples verificação do que precisa ser atualizado pode tornar-se uma tarefa bem complicada. Para facilitar isso, alguns fabricantes armazenam todos os aplicativos existentes em grandes bases de dados chamadas repositórios e um programa é responsável por verificar esse repositório e atualizar as versões dos aplicativos.

					M.V.Lzr, um administrador de sistemas e rapper nas horas vagas, trabalha em uma empresa que, infelizmente, não utiliza um sistema com repositórios. Para facilitar sua vida, ele decidiu que era a hora de ter o seu próprio sistema e pediu a sua ajuda.

					Periodicamente ele varre a Internet em busca das páginas que possam conter os aplicativos e constrói uma lista com as versões dos aplicativos que deseja instalar disponíveis em cada página. Um programa deve verificar então qual a versão de cada programa instalado nos computadores (todos eles possuem os mesmos aplicativos instalados e nas mesmas versões) e instalar todos aqueles que ainda não foram instalados ou cuja versão instalada seja anterior à versão mais recente. Como ele não sabe programar direito, ele pediu sua ajuda.

					Dada uma lista de aplicativos instaladas nos computadores da empresa, com suas respectivas versões e uma lista de aplicativos disponíveis na internet que devem ser instalados, determinar quais devem ser instalados e em quais versões.";A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado). A primeira linha da entrada contém dois inteiros C (1 ≤ C ≤ 10.000) e N (1 ≤ N ≤ 1.000) que representam o número total de programas instalados na empresa, e o número total de aplicativos e versões disponíveis na internet, respectivamente. As C linhas seguintes possuem dois inteiros cada, Pc (1 ≤ Pc ≤ 1.000.000.000) e Vc (1 ≤ Vc ≤ 1.000.000.000), representando o número do programa e o número da versão instalada nos computadores. Todo aplicativo está instalado uma única vez em cada máquina e em uma única versão. Em seguida, as As N linhas seguintes possuem dois inteiros cada, Pn (1 ≤ Pn ≤ 1.000.000.000) e Vn (1 ≤ Vn ≤ 1.000.000.000), representando o número do programa e o número da versão disponível na internet. Um dado programa pode estar disponível em mais de uma versão na internet.;Seu programa deve imprimir, na saída padrão, diversas linhas, cada uma contendo dois inteiros, Ps e Vs com o número do programa e a versão que deve ser instalada. Em todo caso de teste existe pelo menos um programa que deve ser instalado;False;6 / 10;435;151;34.71%
2326;Sacoleiro;Ad-Hoc;7;"Seu amigo sacoleiro pediu sua ajuda num problema que ele está enfrentando. Ele tem um mapa de cidades que ele já conhece e que são interessantes para ele, além das rotas entre as mesmas. Ele pretende fazer uma viagem para comprar presentes para seu filho e para sua filha. O problema é que nem todos os presentes têm o mesmo preço, alguns são obviamente mais caros que os outros, e ele não quer ser injusto dando presentes mais caros para um ou para outro. O objetivo é fazer com que diferença entre a soma dos valores dos presentes seja a menor possível (de preferência que sejam iguais, naturalmente). Há, também, um limite de quanto ele pode gastar na viagem.

O sacoleiro tem um mapa com N cidades e as rotas que as ligam. Além disso, cada cidade pertence ao grupo A ou ao grupo B. No grupo A estão as cidades em que há presentes para o filho, enquanto que no grupo B estão as cidades com presentes para a filha. Sempre que ele para numa cidade ele pode comprar ou não o presente, mesmo que ele já tenha estado lá antes, inclusive pode comprar mais de uma unidade do mesmo presente (enquanto tiver dinheiro disponível, naturalmente). As cidades são numeradas de 0 a N - 1. O trajeto deve sempre começa na cidade 0. O tamanho do percurso não importa para o sacoleiro. O total disponível de dinheiro para os presentes é T. O sacoleiro não pode terminar a viagem sem ter comprado pelo menos um presente para algum dos filhos.

Escreva um programa que, dadas N cidades, as rotas entre elas e os valores de presentes de cada cidade, retorne qual a diferença mínima possível entre a soma dos presentes do grupo A e a soma dos presentes do grupo B.";"A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado). A primeira linha da entrada contém um inteiro N (2 ≤ N ≤ 30) que indica a quantidade de cidades. A segunda linha contém um inteiro T (10 ≤ T ≤ 100) que indica a quantidade de dinheiro que o sacoleiro tem para gastar. As N linhas seguintes contêm a descrição cada cidade. Cada uma dessas linhas tem o formato XPCKV0V1...VK-1, onde X é um inteiro que representa a cidade (numeradas de 0 a N - 1); P é um inteiro (1 ≤ P ≤ 10) que indica o valor do presente da cidade X; C é um caractere A ou B, indicando a que grupo a cidade X pertence; K é um inteiro (0 ≤ K < N ) que indica quantas rotas saem da cidade X; e cada Vi é um inteiro indicando um dos possíveis destinos a partir da cidade X. Note que as rotas não são bidirecionais. Uma cidade nunca terá rota para ela mesma e pode-se assumir que i ≠ j => Vi ≠ Vj.";Seu programa deve imprimir, na saída padrão, uma única linha com um inteiro representando a menor diferença possível de valores entre os presentes comprados para o grupo A e para o grupo B.;False;7 / 10;88;37;42.05%
2327;Quadrados;Ad-Hoc;5;"Chama-se de quadrado mágico um arranjo, na forma de um quadrado, de N × N números inteiros tal que todas as linhas, colunas e diagonais têm a mesma soma.

Por exemplo, o quadrado abaixo

2 7 6
9 5 1
4 3 8

é um quadrado mágico de soma 15, pois todas as linhas (2 + 7 + 6 = 15, 9 + 5 + 1 = 15 e 4 + 3 + 8 = 15), colunas (2 + 9 + 4 = 15, 7 + 5 + 3 = 15 e 6 + 1 + 8 = 15) e diagonais (2 + 5 + 8 = 15 e 6 + 5 + 4 = 15) têm a mesma soma (15).

Escreva um programa que, dado um quadrado, determine se ele é magico ou não e qual a soma dele (caso seja mágico).";A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado). A primeira linha da entrada de cada caso de teste contém um inteiro N (2 < N < 10). As N linhas seguintes contêm N inteiros cada, separados por exatamente um espaço em branco. Os inteiros dentro do quadrado são todos maiores que 0 (zero) e menores que 1.000.;Seu programa deve imprimir, na saída padrão, uma única linha com um inteiro representando a soma do quadrado mágico ou −1 caso o quadrado não seja mágico.;False;5 / 10;1370;480;35.04%
2328;Chocolate;Ad-Hoc;1;"Juliana é uma famosa doceira reconhecida internacionalmente pelos seus bombons, exportados para todo o mundo. Embora não revele a ninguém as suas receitas, ela já deu entrevistas contando alguns de seus segredos. Sua fábrica de bombons utiliza somente chocolates comprados de um único produtor suíço, que envia barras gigantescas que são cortadas por grandes máquinas.

Dada uma barra grande de chocolate, Juliana realiza divisões sucessivas da barra até obter uma barra que contém a quantidade exata de chocolate para aquela receita. Após cada divisão, ela seleciona um dos pedaços resultantes e armazena os demais para uso futuro. As divisões são determinadas por critérios técnicos relacionados ao tamanho das barras e aos equipamentos disponiveis em um dado momento.

Por exemplo, se ela deseja obter uma barra de 100g de chocolate a partir de uma barra de 3Kg, primeiro ela divide a barra ao meio. Em seguida, um dos pedaços é dividido em cinco partes iguais e por fim, um desses pedaços de 300g é dividido em 3 pedaços, resultando no pedaço de 100g necessário para a receita. Nesse processo, 1 pedaço é utilizado para a receita e 7 pedaços de diferentes tamanhos serão guardados para uso futuro. A figura abaixo ilustra esse cenário.



Dada uma sequência de divisões realizadas por Juliana em uma barra de chocolate, determinar quantos pedaços serão armazenados em estoque para uso futuro.";A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado). A primeira linha da entrada contém um inteiro N que indica o número de divisões feitas na barra de chocolate original (1 ≤ N ≤ 1.000). A linha seguinte contém N inteiros I (2 ≤ I ≤ 10) representando o número de pedaços em que o pedaço atual foi dividido. Sempre que é feita uma divisão, um pedaço é utilizado para a próxima divisão e os demais são separados para serem armazenados em estoque.;Seu programa deve imprimir, na saída padrão, uma única linha, contendo o número de pedaços de chocolate que serão armazenados em estoque.;True;1 / 10;581;443;76.25%
2329;Pão a Metro;Ad-Hoc;6;"Pão a metro é um tipo de sanduíche gigante que é uma excelente opção de lanche para torneios de programação, embora a experiência já tenha mostrado que o oferecimento de sanduiches pode gerar reclamação dos competidores. Outro grande problema é que algumas pessoas são mais gulosas que outras e, dessa maneira, acabam pegando pedaços maiores que os pedaços dos outros. Para a ﬁnal da OBI, a coordenação estava pensando em providenciar pão a metro para os competidores, porém tais problemas os ﬁzeram recuar na idéia.

					Embora a idéia tenha sido momentaneamente abandonada, uma idéia simples surgiu: cortar previamente o pão em fatias de tamanho iguais e distribuí-las entre as pessoas. O único problema com tal idéia é que se o número de pessoas for muito grande, ﬁca impraticável ter apenas um pão. Por exemplo, se quiséssemos que 1.000 pessoas recebam 20 centímetros de sanduíche, seria necessário um sanduíche de 20.000 centímetros, ou 200 metros!

					Alguém levantou a seguinte hipótese: se houvesse N pessoas e fossem encomendados K sanduíches de empresas diferentes, cada qual com uma determinada metragem (tamanho) Mi (1 ≤ i ≤ K), seria possível retirar desses pães N fatias de mesmo tamanho, possivelmente sobrando partes não utilizadas. A questão seria: qual o tamanho inteiro máximo que essas fatias poderão ter?

					Por exemplo, se tivermos K = 4, com os tamanhos (em centímetros) M1 = 120, M2 = 89, M3 = 230 e M4 = 177 e N = 10, podemos retirar N fatias iguais de tamanho máximo 57, pois assim conseguimos 2 fatias no primeiro pão, 1 no segundo, 4 no terceiro e 3 no quarto, totalizando as 10 fatias necessárias. Se tentarmos cortar fatias de tamanho 58, só será possível obter 3 fatias do terceiro pão, totalizando 9 e, portanto, 57 é realmente o melhor que podemos obter. Note que não podemos usar duas ou mais fatias menores de diferentes pães para formarmos uma fatia do tamanho selecionado. (ﬁcaria muito deselegante dar um lanche recortado às pessoas).

					Escreva um programa que, dados os tamanhos de pão disponíveis (em centímetros) e a quantidade de pessoas a serem atendidas, retorne o tamanho inteiro máximo (em centímetros) da fatia que pode ser cortada de maneira a atender todas as pessoas.";A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado). A primeira linha da entrada contém um inteiro N que indica a quantidade pessoas (1 ≤ N ≤ 10.000). A segunda linha contém um inteiro K (1 ≤ K ≤ 10.000) que é a quantidade de sanduíches disponível. Na terceira linha há K inteiros M (1 ≤ M ≤ 10.000) separados por um espaço em branco representando o tamanho de cada pão.;Seu programa deve imprimir, na saída padrão, uma única linha, contendo o tamanho inteiro máximo da fatia que pode ser cortada.;False;6 / 10;1116;304;27.24%
2330;Telemarketing;Ad-Hoc;3;"O telemarketing foi patenteado em 1982 pelo empresário Nadji Tehrani e consiste em vender produtos através do telefone. Uma das formas de venda utilizadas hoje em dia é obter-se uma lista de possíveis compradores para os produtos vendidos e seus respectivos telefones e utilizar um time de vendedores para ligar para esse conjunto de pessoas.

					Bo Ber Man é um empresário estrangeiro dono da Mar Ato Na, cujos ideogramas em seu idioma significam ""Empresa Nacional de Telemarketing"". Sua empresa realiza vendas dos produtos mais variados para diversas companhias.

					Ele possui um time de N vendedores e uma lista de ligações a serem feitas. Para cada ligação sabe-se o tempo T em minutos que ela vai durar. Os vendedores são identificados por números de 1 a N e fazem as ligações da seguinte forma:

					
						Inicialmente, todos os vendedores estão inativos.
						Sempre que um vendedor realizar uma ligação, ele ficará ocupado pelos T minutos descritos na lista para aquela ligação. O tempo entre duas ligações consecutivas as do mesmo vendedor é desprezível.
						Um vendedor não pode fazer mais de uma ligação ao mesmo tempo.
						Um vendedor que esteja inativo deverá fazer a ligação que estiver no topo da lista. Caso mais de um vendedor esteja inativo no mesmo instante, o vendedor com o menor identificador dentre os vendedores inativos deverá fazer a ligação que estiver no topo da lista.
						Assim que uma ligação é atribuída a um vendedor, ela é removida da lista.
						Um vendedor fica inativo sempre que termina uma ligação.
					

					Por exemplo, suponha que um time de 4 vendedores deve fazer 6 ligações, cujos tempos sejam 5, 2, 3, 3, 4, 9. Como inicialmente nenhum vendedor está ocupado, o primeiro vendedor fará a ligação de 5 minutos, o segundo vendedor a ligação de 2 minutos e os vendedores de número 3 e 4 farão ligações de 3 minutos. Como o segundo vendedor terminará a sua ligação antes dos demais, ele fará a quinta ligação, de 4 minutos e, por fim, o terceiro vendedor (cujo tempo é igual ao do quarto vendedor, mas o número é menor) fará a sexta ligaçao, de 9 minutos.

					Escreva um programa que, dados o número de vendedores, o número de ligações e a duração de cada ligação, determine o número de ligações feitas por cada vendedor.";A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado). A primeira linha da entrada contém dois inteiros, N e L indicando o número de vendedores e o número de ligações a serem realizadas (1 ≤ N ≤ 1.000, 1 ≤ L ≤ 1.000.000). As L linhas seguintes contêm um inteiro T cada (1 ≤ T ≤ 30), em que T representa a duração de cada ligação.;Seu programa deve imprimir, na saída padrão, N linhas, uma para cada vendedor, contendo dois inteiros I e P representando o número do vendedor e o número de ligações realizadas por este vendedor. Os vendedores devem ser apresentados em ordem crescente de identificador, começando a partir de 1.;False;3 / 10;136;99;72.79%
2331;Uiquipédia;Ad-Hoc;6;"A Uiquipédia (Wikipedia em inglês), fundada em 2001 por Jimmy Wales e Larry Sanger, é um site onde qualquer pessoa pode editar os artigos, fazendo correções ou ampliando seu conteúdo.

					Uma das grandes vantagens da Uiquipédia sobre enciclopédias de papel é a facilidade de seguir referências; com um simples clique, é possível ir de um artigo para outro relacionado. Essas referências são chamadas de referências diretas. Também é possível navegar a Uiquipédia sequencialmente: cada artigo possui referência para o artigo anterior e para o posterior, na ordem alfabética. Essas referências são chamadas de referências sequenciais.

					Por exemplo, um artigo para o termo ""Elefante"" pode ter uma referencia direta para ""Mamiferos"" em seu texto, desta forma pode-se chegar de ""Elefante"" a ""Mamiferos"" em um clique. Observe que pode não existir a referência direta contrária, ou seja, de ""Mamiferos"" para ""Elefante"". Adicionalmente se ""Elevador"" é o próximo artigo depois de ""Elefante"", na ordem alfabética, pode-se ir com um clique de ""Elefante"" para ""Elevador"" e de ""Elevador"" para ""Elefante"", pois há uma referência sequencial entre eles.

					Paulo e André são dois amigos que contribuem para a Uiquipédia. Muitas vezes, André edita um artigo e quer que Paulo o ajude a revisar a modificação. A conexão de Paulo à Internet é discada, e por isso ele quer chegar na página que André editou usando o menor número de cliques possível, começando do artigo em que está, e navegando apenas por referências, diretas ou sequenciais.

					Escreva um programa que, dados todas as referências diretas existentes na Uiquipédia, a página onde Paulo está, e a página editada por André, determina de quantos cliques Paulo precisa, no mínimo, para ver a página que foi modificada por André, utilizando as referências diretas e sequenciais.";"A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado). A primeira linha contém um único inteiro, N , que é o número de referências da Uiquipédia (1 ≤ N ≤ 1.000). As N linhas contém cada uma duas strings X e Y , separadas por um espaço, que são os nomes de duas páginas da Uiquipédia conectadas por uma referência direta (de X para Y ). Todo artigo existente na Uiquipédia aparece pelo menos uma vez na descrição das referencias diretas, permitindo que as referencias sequenciais sejam extraídas das informações dadas. Note que uma referência direta pode ligar duas páginas que estariam ligadas também por uma referência sequencial.

					Depois da descrição das referências, há uma linha em branco, e a linha seguinte contém duas cadeias de caracteres, P e A, que são a página atual de Paulo e a página editada por André. O nome de cada página é limitado a 100 caracteres e contém somente letras maiúsculas, letras minusculas e o símbolo '_'. Observe que na ordem alfabética o simbolo '_' é anterior às letras maiúsculas, que por sua vez são anteriores às letras minusculas";Seu programa deve imprimir, na saída padrão, uma única linha, contendo um único inteiro, que diz o número mínimo de cliques que são necessários para ir da página atual de Paulo até a página editada por André. Sempre é possível navegar de um artigo a outro.;False;6 / 10;131;59;45.04%
2332;Jogo do Labirinto;Ad-Hoc;7;"Um amigo seu está muito empolgado com um novo joguinho que baixou em seu celular. O jogo consiste em uma espécie de labirinto que pode ser representado por um quadriculado de células quadradas com N linhas e M colunas. Cada célula do labirinto contém uma plataforma que está a uma determinada altura do chão, que pode ser representada por um inteiro a que varia de 0 (a mais baixa) a 9 (a mais alta). Você inicia na célula (1, 1) (canto superior esquerdo) e o objetivo é chegar na saída do labirinto que ﬁca na célula (N, M) (canto inferior direito).

					Para sair do labirinto, você deve fazer movimentos entre células adjacentes. O problema é que seu bonequinho não consegue pular muito alto, então se a célula destino estiver duas ou mais unidades acima da sua altura atual, você não consegue movê-lo. Mais especiﬁcamente, a cada turno você pode mover para uma das 4 células adjacentes (cima, baixo, direita, esquerda) caso a altura da célula destino seja menor ou igual à altura da sua célula atual mais uma unidade. Ou seja, se a altura da sua célula for A, você só pode mover a uma célula adjacente caso a altura dela seja menor ou igual a A + 1.

					Para complicar um pouco mais o jogo, a cada turno, após o jogador realizar sua ação, cada célula aumenta em uma unidade sua altura, até o valor máximo de 9. Caso a altura de uma determinada célula seja 9, ela passa a ser 0. Note que, em um dado turno, o jogador não é obrigado a se mover, ele pode simplesmente esperar as plataformas subirem ou descerem. Além disso, repare que nem todas as células têm 4 vizinhos, uma vez que não é permitido ao jogador se mover para fora dos limites do labirinto.

					Você, como bom programador que é, resolve escrever um programa que calcule a menor quantidade de turnos possível para chegar à saída de um dado labirinto.

					Escreva um programa que, dado um labirinto, retorne a menor quantidade de turnos necessária para chegar à saída, de acordo com as restrições dadas.";A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado). A primeira linha da entrada contém dois inteiros N e M (2 ≤ N, M ≤ 50) separados por um espaço em branco, que representam, respectivamente, a quantidade de linhas e colunas do labirinto. As N linhas seguintes contêm, cada uma, M inteiros que representam a altura inicial (no turno 0) da respectiva plataforma. As alturas estão sempre entre 0 e 9 (inclusive).;Seu programa deve imprimir, na saída padrão, uma única linha, contendo a menor quantidade de turnos possível para sair do labirinto.;False;7 / 10;142;58;40.85%
2333;Pizza;Ad-Hoc;6;"Rodrigo pediu uma pizza de mussarela de N fatias, uma parte somente com cebola e o resto somente com azeitonas. Entretanto, ao receber a pizza em casa, notou que o motoqueiro que a entregou não foi cuidadoso o suﬁciente, pois tanto as tiras de cebola quanto as azeitonas estavam espalhadas por toda a pizza. Para piorar, como a pizza era de mussarela, as tiras de cebola e as azeitonas estavam grudadas na pizza.

					Como gosta mais de cebola do que de azeitona, Rodrigo deseja pegar fatias consecutivas da pizza de tal forma que estas contenham a maior diferença possível entre tiras de cebola e azeitonas. Para isso, ele contou quantas tiras e quantas azeitonas tinham em cada fatia e subtraiu os dois valores, nessa ordem. Assim, sempre que uma fatia contiver mais cebolas que azeitonas, ela recebe um número positivo, e caso contrário, um número negativo. Uma fatia cujo número seja zero contém o mesmo número de tiras de cebolas e azeitonas.

					  

					Por exemplo, supondo que as fatias contenham as seguintes diferenças: 5, −3, −3, 2, −1, 3, pode-se pegar uma fatia consecutiva com 9 cebolas a mais que azeitonas, utilizando as fatias com as diferenças 2, −1, 3, 5 (lembre-se de que estamos tratando de um círculo e, portanto, a fatia com diferença 5 é vizinha da fatia com diferença 3 e vice-versa).

					Como Rodrigo não entende de programação, ele resolveu contar com seus serviços.

					OBS: repare que é melhor não escolher nenhuma fatia caso somente seja possível escolher fatias consecutivas com mais azeitonas que cebolas.

					Escreva um programa que, dados as diferenças entre as quantidades de cebolas e azeitonas em cada fatia de pizza, retorne a maior quantidade possível de cebolas que Rodrigo pode comer a mais do que a quantidade de azeitonas utilizando somente fatias consecutivas de pizza. (lembrando que a primeira fatia é adjacente à última e vice-versa).";A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado). A primeira linha da entrada contém um inteiro N que indica o número de fatias de pizza (1 ≤ N ≤ 100.000). A segunda linha contém N inteiros K (−100 ≤ K ≤ 100) separados por um espaço em branco com as diferenças entre as quantidades de cebolas e de azeitonas.;Seu programa deve imprimir, na saída padrão, uma única linha, contendo a maior quantidade de cebolas que Rodrigo pode comer a mais do que azeitonas.;True;6 / 10;523;151;28.87%
2334;Patinhos;Iniciante;2;"Cinco patinhos foram passear. Além das montanhas. Para brincar. A mamãe gritou: quá, quá, quá, quá. Mas só quatro patinhos voltaram de lá. Quatro patinhos foram passear. Além das montanhas. Para brincar. A mamãe gritou: quá, quá, quá, quá. Mas só três patinhos voltaram de lá. Três patinhos foram passear. Além das montanhas. Para brincar. A mamãe gritou: quá, quá, quá, quá. Mas só dois patinhos voltaram de lá. Dois patinhos foram passear. Além das montanhas. Para brincar. A mamãe gritou: quá, quá, quá, quá. Mas só um patinho voltou de lá. Um patinho foi passear. Além das montanhas. Para brincar. A mamãe gritou: quá, quá, quá, quá. Mas nenhum patinho voltou de lá.

A mamãe patinha ficou tão triste naquele dia que resolveu pedir sua ajuda para procurar além das montanhas, na beira do mar, quantos patinhos não voltaram de lá.";Haverá vários casos de testes, a primeira linha de cada caso de teste contém um inteiro (0 ≤ P ≤ 1019) representando a quantidade total de patos, a entrada termina com P = -1.;O arquivo de saída deve conter a quantidade de patinhos que retornaram.;False;2 / 10;8110;3323;40.97%
2335;O Desafio de Arquibaldo;Matemática;9;"Arquibaldo é um menino muito inteligente conhecido por ser o “bam-bam-bam” das questões matemáticas relacionadas a figuras geométricas. Cálculo de áreas, perímetros, medidas de lados, Arquibaldo já estava cansado de pequenos desafios. Para ele, era tudo muito fácil. Sua tia Helena, no entanto, sendo professora de matemática, resolveu passar um desafio ao seu sobrinho, um pouco acima dos com que ele estava acostumado a lidar. Helena lhe mostrou quatro triângulos retângulos idênticos e formou com eles um quadrado tal que seus lados eram as medidas das hipotenusas dos triângulos escolhidos. Então ela disse ao sobrinho que dependendo das medidas dos triângulos retângulos, pode ou não haver um segundo quadrado menor no centro do maior. As ilustrações abaixo mostram com clareza estes casos:

                                      

Ela então o desafiou: “Se eu te der os lados dos quadrados interno e externo, l1 e l2, por exemplo, você consegue me dizer qual a medida, em graus, do menor ângulo interno do triângulo retângulo que formaria com outros três triângulos idênticos um quadrado de lado l1 e outro de lado l2?”. Arquibaldo, começou a tentar resolver o desafio. Como ele não poderia usar calculadora, sua tia foi boazinha e permitiu que apenas a resposta inteira fosse apresentada, ou seja, sem casas decimais. Assim, Arquibaldo teria agora que encontrar a maior medida inteira do menor ângulo do triângulo retângulo tal que o lado do
quadrado interno formado por esse novo triângulo (com medidas de ângulos internos inteiras) seja maior ou igual ao lado do quadrado interno dado, ou seja, este deveria “caber” no novo quadrado interno. Por exemplo: se os lados dos quadrados interno e externo tiverem medidas 1 e 5, respectivamente, então, o menor ângulo terá medida aproximada de 36,87º, porém, a maior medida inteira é 36º, pois um conjunto de quatro triângulos retângulos de angulação 36º e 54º(complemento) formam quadrados de lado 5 e 1,10 unidades de medida, ou seja, o quadrado fornecido de lado 1 “caberia” em um quadrado de lado 1,10, com esta angulação.
“Atente também para a existência do triângulo! Lembre-se: agora as medidas dos ângulos só podem ser inteiras!”, alertou Helena a Arquibaldo para possíveis erros porque ela é brother. No exemplo acima, o triângulo existe, pois tem ângulos de 36º, 54º e 90º. Sabendo, que você é um programador (não foi informado à Helena se você era bom ou não), Helena pediu a você que faça um programa que informe o gabarito dos valores fornecidos por ela ao seu sobrinho, para saber se ele realmente soube resolver o desafio.";A entrada é composta de vários casos de teste. Cada caso corresponde a uma linha que contém os valores dos lados dos quadrados interno e externo, L1 e L2 (1 <= L1, L2 <= 105), não necessariamente nesta ordem.;Para cada caso de teste, imprima a maior medida inteira do menor ângulo interno do triângulo retângulo, respeitando as condições acima. Se o triângulo do ângulo em questão não existir, imprima a mensagem “Nao existe tal triangulo.”.;True;9 / 10;371;76;20.49%
2336;ABC;Strings;5;"No ramo da matemática e computação existem inúmeras formas de se representar um número, a estas formas denotamos o nome base, as quais podemos representar de várias maneiras, cada uma com sua devida utilidade e peculiaridades como, por exemplo, a base decimal comumente utilizada na matemática ou a base binária representada apenas por 0’ s e 1’ s e até mesmo a base hexadecimal composta por números de 0 a 9 juntamente com os caracteres A, B, C, D, E e F.

Algumas pessoas são apaixonadas por binário, outras preferem a mesmice e continuam na base decimal e há quem prefira o ABC. O ABC consiste em uma base formada pelos caracteres do alfabeto em caixa alta, ou seja, A, B, C, ..., X, Y, Z atrinuindo-se o valor 0 para o caractere A, 1 para o caractere B até Z valendo 25. Tendo isso em mente sua tarefa é, dada uma string S, 0 < |S| ≤10³, pertencente à base ABC, convertê-la para a base decimal, mas lembre-se, o valor representado por S pode ser muito grande então seu resultado deve ser módulo 109+7.";A entrada é composta por uma linha contendo a string nos padrões informados e termina com EOF.;A saída será composta de uma linha por caso de teste contendo o valor da string dada em decimal módulo 109 + 7.;False;5 / 10;531;307;57.82%
2337;Pro Habilidade;Matemática;4;Francisco é um grande fã do jogo “Cara ou Coroa” e adora brincar disso com sua moeda da sorte, mas Francisco tem algumas condições de jogo. Ele sempre escolhe “Cara” e em cada partida do jogo pode haver vários arremessos de moeda. Outra coisa é que Francisco odeia quando a moeda cai com a face “Coroa” em dois arremessos consecutivos. Curioso, Francisco quer saber qual a probabilidade de, em uma partida de “Cara ou Coroa”, não ocorra “Coroa” em dois arremessos consecutivos, contudo, como ele só gosta de jogar, pediu a você que fizesse um programa que calculasse isso pra ele.;A entrada contém vários casos de testes, cada linha da entrada deverá conter um número inteiro N (0<N≤40) que representará a quantidade de arremessos de uma única partida.;Para cada linha de entrada deverá haver apenas uma linha de saída. A saída deverá conter a probabilidade de não ocorrer “Coroa” em dois arremessos consecutivos. A resposta deve estar na forma de fração irredutível.;False;4 / 10;300;164;54.67%
2338;Morse;Iniciante;6;"Todos os seus amigos estão loucos pelo filme ""Interstellar"". Agora eles estão postando textos no Facebook em Código Morse. Você precisa escrever um código para decodificar Morse!

					Este Código Morse contém somente letras minúsculas (a-z) e espaços em branco.

					Nota - Código Morse é uma forma de codificar caracteres em uma sequências de pontos e traços. Cada caracter tem uma codificação fixa. Um exemplo bem famoso é o Morse de SOS ""...---..."" . S é codificado como ""..."" (ponto ponto ponto) e O é codificado como ""---"" (traço traço traço).
					Neste problema, um ponto é denotado por ""="" e um traço por ""==="". Símbolos são separados por ""."" , letras são separadas por ""..."" e palavras são separadas por ""......."" . 
					Sendo assim, SOS é codificado como =.=.=...===.===.===...=.=.=
					Codificações para todos os caracteres podem ser encontradas no link abaixo.
					http://morsecode.scphillips.com/morse2.html";"A entrada consiste em múltiplos casos de teste.

A primeira linha de cada entrada contém o número de casos de teste (t)(1 <= t <= 10).

As próximas t linhas contém os Códigos Morse. O tamanho de cada código é menor que 1000 caracteres.";A saída é divida em linhas, que representam a mensagem decodificada de cada caso de teste.;False;6 / 10;2334;956;40.96%
2339;Aviões de Papel;Ad-Hoc;1;"Para descontrair os alunos após as provas da OBI, a Diretora da escola organizou um campeonato de aviões de papel. Cada aluno participante receberá uma certa quantidade de folhas de um papel especial para fazer os seus modelos de aviões. A quantidade de folhas que cada aluno deverá receber ainda não foi determinada: ela será decidida pelos juízes do campeonato.

A diretora convidou, para atuarem como juízes, engenheiros da Embraer, uma das mais bem sucedidas empresas brasileiras, que vende aviões com tecnologia brasileira no mundo todo. O campeonato está programado para começar logo após a prova da OBI, mas os juízes ainda não chegaram à escola. A diretora está aflita, pois comprou uma boa quantidade de folhas de papel especial, mas não sabe se a quantidade comprada vai ser suficiente.

Considere, por exemplo, que a Diretora comprou 100 folhas de papel especial, e que há 33 competidores. Se os juízes decidirem que cada competidor tem direito a três folhas de papel, a quantidade comprada pela diretora é suficiente. Mas se os juízes decidirem que cada competidor tem direito a quatro folhas, a quantidade comprada pela diretora não seria suficiente.

Você deve escrever um programa que, dados o número de competidores, o número de folhas de papel especial compradas pela Diretora e o número de folhas que cada competidor deve receber, determine se o número de folhas comprado pela Diretora é suficiente.";A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado). O arquivo de entrada contém três números inteiros C (1 ≤ C ≤ 1000), P (1 ≤ P ≤ 1000) e F (1 ≤ F ≤ 1000) representando respectivamente o número de competidores, a quantidade de folhas de papel especial compradas pela Diretora e a quantidade de folhas de papel especial que cada competidor deve receber.;Seu programa deve imprimir, na saída padrão, o caractere ‘S’ se a quantidade de folhas compradas pela Diretora é suficiente, ou o caractere ‘N’ caso contrário. Note que os caracteres devem ser letras maiúsculas.;False;1 / 10;1937;1402;72.38%
2340;Feira de Bactérias;Ad-Hoc;4;"Bruno é um biólogo apaixonado por sua profissão. Sua especialidade é estudar o comportamento de bactérias. Por isso, ele possui em seu laboratório centenas de colônias de diferentes tipos desses microorganismos.

Nesta semana ele viu o anúncio de um evento inusitado: uma feira de bactérias. Nessa feira, vários fornecedores estarão vendendo diferentes tipos de bactérias. Cada tipo de bactéria é vendido em uma placa de vidro, já preparada para a formação de uma colônia de bactérias. Cada placa de vidro é vendida com apenas uma bactéria inicialmente.

Bruno deu uma olhada no catálogo com os tipos de bactérias que estarão à venda na feira, e notou algumas coisas interessantes:


	Todos os tipos de bactérias à venda terão o mesmo preço.
	Todas as bactérias (de todos os tipos) se subdividem todas as noites para gerar outras bactérias. Por exemplo, a bactéria da colônia de tipo X se subdivide em 2 outras bactérias todas as noites. Assim, no primeiro dia teremos só uma bactéria na colônia. No dia seguinte, teremos 2, e no próximo, 4. A quantidade de divisões de uma bactéria depende do seu tipo.
	O crescimento da colônia cessa após um determinado número de dias, por causa da escassez de alimento. A quantidade de dias em que uma colônia cresce depende do tipo de bactéria.


É final de mês e Bruno já gastou quase todo o seu dinheiro. Assim, resolveu que irá comprar apenas uma colônia de bactérias. No entanto, ele pretende comprar a colônia que forneça a maior quantidade de bactérias ao final do período de crescimento da mesma.

Ele tem um catálogo mostrando os tipos de bactérias à venda. Para cada tipo de bactéria, o catálogo informa a quantidade de bactérias geradas por uma bactéria desse tipo a cada divisão e por quantos dias a população da colônia crescerá. Porém, a calculadora que ele tem em casa não é suficiente para que ele faça os cálculos necessários para decidir qual é a melhor colônia a comprar.

Bruno pediu sua ajuda para decidir qual é o melhor tipo de bactéria para a compra. Lembre que para Bruno o melhor tipo de bactéria é aquele cuja colônia, ao final do período de crescimento, terá a maior quantidade de bactérias.

Você deve supor que não haverá duas colônias com a mesma população final de bactérias.";"A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado).

A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 50.000) representando a quantidade tipos de bactérias no catálogo. Cada uma das N linhas seguintes contém informações sobre um tipo de bactéria: a primeira dessas linhas contém a informação da bactéria de tipo 0, a segunda dessas linhas contém a informação sobre a bactéria de tipo 1, e assim por diante. A última dessas linhas contém a informação da bactéria de tipo N − 1.

A informação para cada tipo de bactéria é composta por dois números inteiros D e C (1 ≤ D ≤ 2.000 e 1 ≤ C ≤ 5.000), onde D é quantidade de bactérias que cada bactéria deste tipo gera ao se dividir numa noite, e C é a quantidade de dias que a população de bactérias crescerá.";Seu programa deve imprimir, na saída padrão, um número inteiro entre 0 e N − 1 representando o tipo da bactéria que Bruno deverá comprar.;False;4 / 10;383;188;49.09%
2341;Número de Envelopes;Ad-Hoc;5;"Aldo é um garoto muito esperto que adora promoções e sorteios. Como já participou de muitas promoções da forma “para participar, envie n rótulos de produtos ...”, Aldo tem o costume de guardar o rótulo de todos os produtos que compra. Dessa forma, sempre que uma empresa faz uma promoção ele já tem um monte de rótulos para mandar.

A SBC (Super Balas e Caramelos) está fazendo uma nova promoção, e, como era de se esperar, Aldo quer participar. Para participar da promoção é preciso enviar um envelope contendo um rótulo de cada tipo de bala que a SBC produz. Por exemplo, se a SBC produz 3 tipos de balas, A, B, C, e uma pessoa tem 3 rótulos de A, 3 de B e 2 de C, ela pode enviar no máximo 2 envelopes, já que falta um rótulo de C para compor o terceiro envelope. Não há limite para o número de envelopes que uma pessoa pode enviar.

Balas são a segunda coisa de que Aldo mais gosta (a primeira como você sabe são promoções). Por causa disso a quantidade de rótulos de balas que ele tem é muito grande, e ele não está conseguindo determinar a quantidade máxima de envelopes que ele pode enviar.

Como você é o melhor amigo de Aldo ele pediu sua ajuda para fazer o cálculo, de modo que ele compre o número exato de envelopes.

Você deve escrever um programa que, a partir da lista de rótulos de Aldo, calcula o número máximo de envelopes válidos que ele pode enviar.";"A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado).

A primeira linha contém dois números inteiros N (1 ≤ N ≤ 1000000) e K (1 ≤ K ≤ 1000) representando respectivamente a quantidade de rótulos de balas que Aldo possui e o número de tipos diferentes de bala que a SBC produz. Os tipos de balas são identificados por inteiros de 1 a K. A segunda linha contém N números inteiros Xi, cada um representando um rótulo de bala que Aldo possui (1 ≤ Xi ≤ K, para 1 ≤ i ≤ N).";Seu programa deve imprimir, na saída padrão, o número máximo de envelopes válidos que Aldo pode enviar.;False;5 / 10;1457;572;39.26%
2342;Overflow;Ad-Hoc;1;"Os computadores foram inventados para realizar cálculos muito rapidamente, e atendem a esse requisito de maneira extraordinária. Porém, nem toda conta pode ser feita num computador, pois ele não consegue representar todos os números dentro de sua memória. Em um computador pessoal atual, por exemplo, o maior inteiro que é possível representar em sua memória é 4.294.967.295. Caso alguma conta executada pelo computador dê um resultado acima desse número, ocorrerá o que chamamos de overflow, que é quando o computador faz uma conta e o resultado não pode ser representado, por ser maior do que o valor máximo permitido (em inglês overflow significa trasbordar).

Por exemplo, se um computador só pode representar números menores do que 1023 e mandamos ele executar a conta 1022 + 5, vai ocorrer overflow.

Dados o maior número que um computador consegue representar e uma expressão de soma ou multiplicação entre dois inteiros, determine se ocorrerá overflow.";"A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado).

A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 500.000) representando o maior número que o computador consegue representar. A segunda linha contém um inteiro P (0 ≤ P ≤ 1000), seguido de um espaço em branco, seguido de um caractere C (que pode ser ‘+’ ou ‘*’, representando os operadores de adição e multiplicação, respectivamente), seguido de um espaço em branco, seguido de um outro inteiro Q (0 ≤ Q ≤ 1000). Essa linha representa a expressão P + Q, se o caractere C for ‘+’, ou P × Q, se o caractere C for ‘*’.";Seu programa deve imprimir, na saída padrão, a palavra ‘OVERFLOW’ se o resultado da expressão causar um overflow, ou a palavra ‘OK’ caso contrário. Ambas as palavras devem ser escritas com letras maiúsculas.;False;1 / 10;1027;723;70.40%
2343;Caçadores de Mitos;Ad-Hoc;5;"Jorge é um apresentador de televisão que comanda a versão brasileira do grande sucesso Caçadores de Mitos, onde se estuda um mito para descobrir se é fato ou apenas um boato.

No próximo episódio, Jorge deverá apresentar o mito que diz que ”os raios não caem duas vezes no mesmo lugar”, referindo-se aos raios das tempestades de chuva.

Para isso, foi até a cidade de Eletrolândia, que é a cidade com maior ocorrência de raios no mundo. O prefeito tem tanto orgulho desse título que mandou criar um sistema para registrar os raios. Jorge conseguiu um relatório com as ocorrências de cada raio que caiu na cidade nos últimos anos.

O mapa de Eletrolândia é um retângulo. Para o sistema de registro a cidade é subdividida em quadrados de um metro de lado, denominados quadrantes. Assim, se a cidade tem 300 metros de largura e 1000 de comprimento, ela será subdividida em 300.000 quadrantes. O sistema de registro armazena o quadrante em que o raio caiu. Cada quadrante é identificado pelas suas coordenadas X e Y, conforme ilustra a figura abaixo, que exemplifica um mapa de uma cidade com oito metros de comprimento por cinco metros de largura (quarenta quadrantes).



Como os quadrantes são relativamente pequenos, Jorge decidiu que se dois raios caíram no mesmo quadrante, pode-se considerar que caíram no mesmo lugar.

Sua missão é escrever um programa que receba as coordenadas dos raios que caíram em Eletrolândia nos últimos anos e determine se o mito estudado é realmente apenas um mito ou pode ser considerado verdade.";"A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado).

A primeira linha da entrada contém um número inteiro N (2 ≤ N ≤ 500.000) representando o número de registros de raios no relatório. Cada uma das N linhas seguintes contém 2 números inteiros X, Y (0 ≤ X, Y ≤ 500), representando o registro de um raio que caiu no quadrante cujas coordenadas são (X, Y).";Seu programa deve imprimir, na saída padrão, o número 0 se nenhum raio caiu no mesmo lugar, ou o número 1 caso contrário. Note que você deve imprimir o número 1 mesmo que haja mais do que 1 par de raios que caíram no mesmo lugar.;True;5 / 10;1965;678;34.50%
2344;Notas da Prova;Ad-Hoc;1;"Rosy é uma talentosa professora do Ensino Médio que já ganhou muitos prêmios pela qualidade de sua aula. Seu reconhecimento foi tamanho que foi convidada a dar aulas em uma escola da Inglaterra. Mesmo falando bem inglês, Rosy ficou um pouco apreensiva com a responsabilidade, mas resolveu aceitar a proposta e encará-la como um bom desafio.

Tudo ocorreu bem para Rosy até o dia da prova. Acostumada a dar notas de 0 (zero) a 100 (cem), ela fez o mesmo na primeira prova dos alunos da Inglaterra. No entanto, os alunos acharam estranho, pois na Inglaterra o sistema de notas é diferente: as notas devem ser dadas como conceitos de A a E. O conceito A é o mais alto, enquanto o conceito E é o mais baixo.

Conversando com outros professores, ela recebeu a sugestão de utilizar a seguinte tabela, relacionando as notas numéricas com as notas de conceitos:



O problema é que Rosy já deu as notas no sistema numérico, e terá que converter as notas para o sistema de letras. Porém, Rosy precisa preparar as próximas aulas (para manter a qualidade que a tornou reconhecida), e não tem tempo suficiente para fazer a conversão das notas manualmente.

Você deve escrever um programa que recebe uma nota no sistema numérico e determina o conceito correspondente.";A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado). A entrada contém uma única linha com um número inteiro N (0 ≤ N ≤ 100), representando uma nota de prova no sistema numérico.;Seu programa deve imprimir, na saída padrão, uma letra (A, B, C, D, ou E em maiúsculas) representando o conceito correspondente à nota dada na entrada.;True;1 / 10;2539;1934;76.17%
2345;Assigning Teams;Ad-Hoc;3;"Four friends are playing table tennis. Each of them has a skill level which is represented by an integer number: the higher the number, the better the player is.

The four friends want to form two teams of two players each. For the game to be more exciting, they want the skill level of the teams to be as close as possible. The skill level of a team is the sum of the skill levels of the players in that team.

Although they are very good table tennis players, these friends are not so good at other things, like Math or Computing. Can you help them find the smallest possible difference between the teams’ skill levels?";The input consists of a single line that contains four integers A, B, C and D, representing the skill levels of the four players (0 ≤ A ≤ B ≤ C  D ≤ 104).;Output a line with an integer representing the smallest difference between the skill levels for both teams.;False;3 / 10;1264;751;59.41%
2346;Back to the Future;Ad-Hoc;8;"Doctor Emmet is working on a safer device to travel in time. He gathered N different and rare pieces of metal. Each piece may be compatible with some other different pieces. He has a complete list with M distinct pairs of compatible metals. Any pair of metals that is not on the list is incompatible.

In order for the device to work, he must choose a set of metals such that each of them is compatible with at least A others in that set. However, in order to preserve some balance, they must also be incompatible with at least B others in that set.

More metals mean more energy and a safer device. This is why Doctor Emmet needs your help, he wants to know the size of the largest set he can choose that meets these criteria.";The first line contains four integers N, M, A and B, representing respectively how many different pieces of metal exist (1 ≤ N ≤ 105), how many compatibilities there are (1 ≤ M ≤ 105) and the variables A and B described in the problem statement (0 ≤ A,B < N). The different metals are conveniently numbered from 1 to N. Each of the following M lines contains two integers X and Y corresponding to a pair of compatible metals (1 ≤ X, Y ≤ N with X ≠Y). There are no repeated pairs in the input.;Output a line with one integer representing the size of the largest set of metals satisfying the requirements specified in the problem statement.;False;8 / 10;534;137;25.66%
2347;Counting Self-Rotating Subsets;Ad-Hoc;7;"A set of points in the plane is self-rotating if there is a point P, the center, and an angle α, expressed in degrees, where 0 < α < 360, such that the rotation of the plane, with center P and angle, maps every point in the set to some point also in the set.

You are given a set of N distinct points, all having integer coordinates. Find the number of distinct subsets of size 1, 2, . . . ,N that are self-rotating. Two subsets are considered distinct if one contains a point that the other does not contain.";The first line of the input contains one integer N representing the number of points in the input set (1 ≤ N ≤ 1000). Each of the following N lines describes a different point of the set, and contains two integers X and Y giving its coordinates in a Cartesian coordinate system (−109 ≤ X, Y ≤ 109). All points in the input set are distinct.;Output a single line containing N integers S1, S2, . . . , SN. For i = 1, 2, . . . ,N the integer Si must be the number of subsets of i points of the input set that are self-rotating. Since these numbers can be very big, output them modulo 109 + 7.;False;7 / 10;197;94;47.72%
2348;Dating On-Line;Ad-Hoc;3;"Alex registered in an online dating system to search for the perfect partner. The system requires each of its members to fill a form specifying how much they enjoy N different activities, grading them on a scale from 0 to 100. To present this information to potential dates, the system creates a profile featuring a special kind of polygon called “radial diagram”.

A radial diagram for N activities is drawn by marking N points on the plane. Starting from the vertical direction, the i-th point in clockwise order represents the i-th activity specified by the member, and is a distance Si away from the center of the diagram, where Si is the score given by the member for the corresponding activity. The angle sustained at the center of the diagram from each pair of consecutive points is always the same, and the polygon is formed by drawing the segments whose endpoints are consecutive points. Note that for the purposes of the radial diagram, the first and last points are considered to be consecutive.

For example, if N = 6 Alex might specify the following activities: singing with score S1 = 10, running with score S2 = 60, listening to music with score S3 = 70, traveling with score S4 = 70, eating out with score S5 = 80, and visiting museums with score S6 = 80. Then the corresponding radial diagram would be as shown in the figure below.



The area of a radial diagram depends on the order in which the different activities are specified, and Alex suspects that a profile depicting a radial diagram with greater area might be more successful. For example, the radial diagram in the following figure features the same activities and scores as the example above, but has a greater area.



Alex has asked you to write a program to find the maximum possible area of a radial diagram given a list of activities graded with scores between 0 and 100.";The first line contains an integer N representing the number of activities (3 ≤ N ≤ 105). The second line contains N integers S1, S2, . . . , SN representing the scores given by Alex to each activity (0 ≤ Si ≤ 100 for i = 1, 2, . . . , N).;Output a line with a rational number representing the maximum possible area of a radial diagram featuring the scores given in the input. The result must be output as a rational number with exactly 3 digits after the decimal point, rounded if necessary.;True;3 / 10;415;257;61.93%
2349;Farm Robot;Ad-Hoc;2;"To discourage birds such as crows and sparrows from feeding on his crops a farmer needed to put some scarecrows in his corn field. His nephew really likes robots, and suggested that he should use a robot scarecrow instead: “A single robot scarecrow can better protect the whole corn field and will last way more than ten traditional ones!”, he said.

Since the farmer thinks his nephew is a smart boy, he took his advice and bought a robot scarecrow. The robot moves along a pathway that surrounds the corn field. In the pathway there are N unmanned charging stations, numbered sequentially in clockwise order starting from 1. The figure below shows an example with eight charging stations.
					
						
					

The robot begins every day at station number 1, and is issued a sequence of commands that are to be performed in order during the day. These commands are generated based on advanced machine learning algorithms that work on data collected by sensors spread through the corn field, ensuring an optimal coverage of the crop. Each command results in the robot moving to another charging station next to the one it is currently at, either in clockwise or counter-clockwise direction.

Despite the promises of optimal coverage by the robot, at the end of a certain day the farmer found part of his crop devastated. To figure out what might have happened the farmer wants to know how many times the robot was at the charging station closest to the devastated area. Given the number of the station closest to the devastated area and the sequence of commands for a single day, can you help the farmer find this number?";The first line contains three integers N , C and S representing respectively the number of posts (2 ≤ N ≤ 100), the number of commands (1 ≤ C ≤ 1000) and the charging station closest to the devastated area (1 ≤ S ≤ N ). The second line contains C integers X1, X2, . . . , XC, representing the sequence of commands received by the robot scarecrow. For i = 1, 2, . . . , C, if Xi is 1 then the i-th command means “move to the next charging station in clockwise order”, whereas if Xi is -1 then the i-th command means “move to the next charging station in counter-clockwise order”. The robot always starts at station number 1.;Output a line with an integer representing the number of times the robot was at station number S during the day.;True;2 / 10;616;400;64.94%
2350;Game of Matchings;Ad-Hoc;10;"Adam and Carol are having a great time playing the Game of Matchings. The game is played on a string S composed of |S| lowercase English letters, s1s2 . . . s|S|. The goal is to find all matchings of a special kind of pattern P in S. The pattern has length N and is defined by a sequence of integers between 1 and 26.

We consider a contiguous substring sisi+1 . . . si+N−1 starting at position i of S a matching of pattern P if there is a mapping from the numbers in P to lowercase English letters such that the pattern is mapped to sisi+1...si+N−1 but no two distinct numbers are mapped to the same letter.

For instance, if S is ”awawww” and P is [10, 21, 10], the matchings of P are the substrings of S of length three starting at positions 1 and 2: ”awa” and ”waw”. Note that ”www” is not an occurence because pattern numbers 10 and 21 would both map to ’w’.

Adam and Carol lost the answer sheet and are not sure if they are finding all occurrences for some of the strings in the game. Given S and P can you find the number of matchings for them?";The first line contains a non-empty string S of at most 5 × 105 characters. Each character of S is a lowercase English letter from ’a’ to ’z’. The second line contains an integer N representing the size of the pattern (1 ≤ N ≤ |S|). The third line contains N integers P1, P2, . . . , PN denoting the pattern (1 ≤ Pi ≤ 26 for i = 1, 2, . . . ,N).;Output a line with one integer representing the number of matchings of P found in S.;False;10 / 10;926;201;21.71%
2351;Hotel Rewards;Ad-Hoc;8;"You are planning to spend your holidays touring Europe, staying each night in a different city for N consecutive nights. You have already chosen the hotel you want to stay in for each city, so you know the price Pi of the room you’ll be staying at during the i-th night of your holidays, for i = 1, . . . ,N.

You will book your accommodation through a website that has a very convenient rewards program, which works as follows. After staying for a night in a hotel you booked through this website you are awarded one point, and at any time you can exchange K of these points in your account for a free night in any hotel (which will however not give you another point).

For example, consider the case with N = 6 and K = 2 where the prices for the rooms are P1 = 10, P2 = 3, P3 = 12, P4 = 15, P5 = 12 and P6 = 18. After paying for the first four nights you would have four points in your account, which you could exchange to stay for free the remaining two nights, paying a total of P1 + P2 + P3 + P4 = 40 for your accommodation. However, if after the first three nights you use two of the three points you earned to stay the fourth night for free, then you can pay for the fifth night and use the final two points to get the sixth one for free. In this case, the total cost of your accommodation is P1 + P2 + P3 + P5 = 37, so this option is actually more convenient.

You want to make a program to find out what the minimum possible cost for your holidays’ accommodation is. You can safely assume that all hotels you want to stay always will have a room available for you, and that the order of the cities you are going to visit cannot be altered.";The first line of input contains two integers N and K, representing the total number of nights your holidays will last, and the number of points you need in order to get a free night (1 ≤ N,K ≤ 105). The second line contains N integers P1, P2, . . . , PN, representing the price of the rooms you will be staying at during your holidays (1 ≤ Pi ≤ 104 for i = 1, 2, . . . ,N).;Output a line with one integer representing the minimum cost of your accommodation for all of your holidays.;False;8 / 10;595;188;31.60%
2353;Just in Time;Ad-Hoc;5;"Hello contestant, I want to play a game. Your coach is in the contest room with a bomb about to explode in his hands. This bomb will be set to detonate in T seconds, and if it detonates in the contest room it is going to explode only your team’s balloons.

I can tell you that the contest room is inside a building that contains N rooms in total. From each room there is exactly one direct tunnel to another room, which can only be used in one direction. For example if room A connects to room B, then you can walk from room A to room B, but not from room B to room A, unless of course room B has a direct tunnel to room A.

The bomb has a special mechanism that detects if your coach stops moving, and if so it immediately triggers the detonation taking all your team’s balloons down. For that reason your coach will constantly walk between the rooms, taking exactly one second to move through each tunnel. The only way for your team to save its balloons is for your coach not to be in the contest room when the bomb detonates.

You don’t have the building map in hand, all I can tell you is that the tunnels are chosen uniformly at random. However, I will give you the possibility to set T , which must be an integer between 2 and N inclusive. Your job is to choose T in such a way that it maximizes your balloons’ chance to survive this riddle.

Let the game begin.";The input consists of a single line that contains one integer N , representing how many rooms there are in the building (2 ≤ N ≤ 109 ).;Output a line with one integer representing the value of T that maximizes your balloons’ chance to survive the riddle.;False;5 / 10;628;289;46.02%
2354;Kill the Werewolf;Ad-Hoc;8;"In the popular board game One Night Werewolf, players are distributed randomly in the roles of villagers and Werewolves. The goal of the villagers is to decide together on one person to kill during the night – hopefully they will kill a Werewolf. Werewolves pose as villagers in the hope that the person killed is a villager, not a Werewolf.

In the variation Uncertain Werewolf, only one Werewolf exists and the game consists of two phases. During the first phase the players are still uncertain about who they should vote to kill, so each of them chooses two other players as possible victims. After the first phase the Werewolf reveals himself, and then in the second phase each player has to decide which one of their two initial choices they will vote to kill. The Werewolf is the last one to decide between his two initial choices, doing so after all the other players have decided already.

The Werewolf then loses the game if he has more votes than anyone else. If there is a draw, the Werewolf wins.

You are given the votes of N players after the first phase of the game. You should answer how many players could reveal themselves at this point as the Werewolf and still win the game if the other players chose their votes optimally to kill the Werewolf.";The first line contains an integer N (3 ≤ N ≤ 50), the number of players in the game. Each of the following N lines contains two integers, ai and bi (1 ≤ ai , bi ≤ N , ai  ≠  bi), the index of the players the i-th player decided to kill in the first voting phase. No player will try to kill himself.;Output a line with one integer representing the number of players that could win the game if they were the Werewolf and everyone played optimally.;False;8 / 10;681;200;29.37%
2355;Brasil e Alemanha;Ad-Hoc;4;"Brasil e Alemanha foi um jogo inesquecível. Neste jogo a Alemanha marcou 7 gols em 90 minutos, e o Brasil apenas 1. Por ser uma importante marca na história do futebol brasileiro, Leonardo resolveu fazer uma página web para que todos os brasileiros nunca se esquecessem desse dia magnífico.

A página mostrará qual o placar do jogo caso a partida ainda estivesse acontecendo desde aquele fatídico 8 de julho de 2014, considerando que a taxa de gols fosse mantida (Como mostra a figura abaixo). Para facilitar seu trabalho, Leonardo pede sua ajuda para calcular o placar que deverá ser mostrado na página web.







Observações

Como o objetivo do site é chocar o torcedor. Os gols sofridos pelo Brasil devem ser arredondado para cima enquanto os gols sofridos pela Alemanha devem ser arredondados para baixo.";A entrada é composta por um número N (90 ≤ N ≤ 109) que indica quantos minutos se passaram desde o apito inicial da partida. A entrada termina quando N = 0.;A saida deve ser escrita em apenas uma linha: “Brasil B x Alemanha A” onde B e A são inteiros que indicam a quantidade de gols sofridos por Brasil e Alemanha respectivamente.;True;4 / 10;1843;606;32.88%
2356;Bactéria I;Strings;4;Dr. Henrique realmente adora suas pesquisas com bactérias. Na tentativa de criar bactérias mais resistentes a antibióticos, avaliou o DNA de algumas delas e percebeu uma semelhança nas bactérias que eram mais resistentes do que as demais. Todas elas possuiam uma parte do código genético igual (composto pelas proteínas A, C, G, T). Logo constatou que aquele trecho de código genético é o que define se uma bactéria é resistente ou não. Assim, Dr. Henrique pediu para que você fizesse um programa que avalie se uma bactéria é resistente dado seu DNA e o código genético que leva a resistência.;Cada caso teste contém duas strings, D e S, cada qual em uma linha, e representam o DNA da bactéria e a sequência de código genético que leva a resistência. 1 ≤ |D|, |S| ≤ 100. As strings são compostas apenas pelos caracteres: A, C, G, T.;"Imprima uma linha por cada caso teste, contendo a string ""Resistente"" (sem aspas) caso a bactéria possua o código genético requerido em seu DNA, ou a string ""Nao resistente"" (sem aspas) caso contrário.";False;4 / 10;5650;1842;32.60%
2357;Violência em Sildávia;Grafos;8;"Rei Leonardo II está muito preocupado com a violência em Sildávia. Todos estão apavorados, dizendo que a situação está para acabar com a vida de todos. Por isso, Leonardo II pediu para seus assessores (de maior nível) refazerem o mapa das estradas do Reino de Sildávia, de maneira que não seja mais possível ir de uma cidade a outra por mais do que um caminho (pode até não haver maneira de ir de uma cidade a outra, o que não pode é haver mais de uma).

Assim, Rei Leonardo II de Sildávia pediu que você fizesse um programa que verifique se o mapa criado por seus assessores é seguro ou não. E sim, ele pediu para você fazer, pois você está aí mesmo 5 horas programando, não lhe custa nada fazer esse pequeno programa. E Leonardo II mandou dizer que caso prefira, o Reino também está precisando de gente para formatar os computadores dos assessores....

Observações

Todas as vias que conectam as cidades são de mão-dupla. Não é garantido que o grafo de entrada seja conexo. Pode haver mais de uma via ligando o mesmo par de cidades.";A entrada é composta por diversos casos teste separados por uma linha em branco. Cada caso teste inicia com dois inteiros, N e M, que representam o número de cidades e as estradas respectivamente (1 ≤ N ≤ 10000, 1 ≤ M ≤ (N * (N-1)) ÷ 2). As próximas M linhas contém dois inteiros, A e B, que significam que há uma estrada que liga as cidades A e B (1 ≤ A, B ≤ N).;"Para cada caso teste imprima uma linha contendo a string ""Seguro"" se o mapa de Sildávia é seguro segundo Leonardo II ou ""Inseguro"" caso contrário.
					No último caso, existe dois caminhos possíveis, para sair da cidade 1 e chegar nela mesma. O primeiro é permanecer nela, o segundo é caminhar pela estrada que liga a ela própria. Por isso esse mapa é inseguro.";False;8 / 10;775;201;25.94%
2358;Bactéria II;Strings;10;"Recentemente contratado pelo ICPC (Instituto Computacional de Pesquisas Científicas), Doutor Henrique está precisando de sua ajuda novamente! Chefiando um projeto super secreto para o Reino de Sildávia, Dr. Henrique enfrenta um grande problema. As bactérias envolvidas no projeto estão sendo destruídas após serem contaminadas por um tipo de vírus muito raro. Este vírus é capaz de destruir qualquer trecho de código genético das bactérias que seja igual ao seu RNA (código genético do vírus). Sabendo disso, Dr. Henrique quer criar um tipo de bactéria que seja resistente a este tipo de vírus, porém, quer preservar a maior quantidade de código genético das bactérias originais.

O seu objetivo é encontrar a maior substring genética (contém apenas as proteínas A, C, G, T) entre um grupo de bactérias contaminadas. Acompanhemos um exemplo:

Suponhamos que o RNA do vírus é a sequência TCGA. E supomos também que Dr. Henrique possua 3 bactérias de DNA's:

	Bactéria 1: GCTTTCGACGAT
	Bactéria 2: GATCGAGCTTCGAA
	Bactéria 3: GGTCTAGCTAAT


Após a infecção, o vírus irá procurar o primeiro trecho de código a partir do início do DNA da bactéria que seja igual ao seu RNA e irá destruí-lo. E irá repetir o processo até que não haja mais código para ser destruído.


	Bactéria 1: GCTTTCGACGAT ⇒ GCTTCGAT ⇒ GCTT
	Bactéria 2: GATCGAGCTTCGAA ⇒ GAGCTTCGAA ⇒ GAGCTA
	Bactéria 3: GGTCTAGCTAAT


Agora que todas as bactérias estão infectadas, iremos encontrar a maior substring comum a todas, que será o DNA da bactéria que Dr. Henrique tanto procura:


	Bactéria 1: GCTT
	Bactéria 3: GAGCTA
	Bactéria 3: GGTCTAGCTAAT


DNA resultante: GCT

Observações

É importante ressaltar que o vírus sempre avalia o DNA da bactéria infectada a partir do início. Sempre haverá pelo menos uma resposta.";A entrada é composta por diversos casos teste. Cada caso contém uma linha com o número N que representa a quantidade de bactérias (1 ≤ N ≤ 20). Em seguida N linhas contendo uma string Si (1 ≤ |Si| ≤ 10000) que representa o código genético de cada bactéria. A N+2 linha contém uma string R (1 ≤ |R| ≤ 1000) que é o RNA do vírus infeccioso. Todas as strings são compostas apenas pelos caracteres: A, C, G, T.;Uma string por linha para cada caso teste que representa o DNA da bactéria final. Caso haja mais de uma solução, imprima a menor lexicograficamente.;False;10 / 10;534;42;7.87%
2359;Alocando Ambulâncias;Grafos;9;"Existem muitas cidades no reino de Sildávia, mas nem todas possuem hospitais (muitas são bem pequenas, como vilarejos). Assim, quando uma pessoa necessita de atendimento urgente, o hospital mais próximo envia uma ambulância para socorro (e esta percorre o caminho mínimo para a cidade em que está localizado o paciente). O governador de Sildávia está muito preocupado com esta situação, e deseja saber qual é o tempo máximo que uma pessoa em Sildávia leva para ser socorrida, e pediu para que você respondesse isso para ele.

Observações

O tempo de atendimento tal como o tempo que a ambulância demora para percorrer dentro de uma cidade é desprezado.";A entrada consiste de diversos casos teste. Cada caso teste contém três inteiros: N, M e Q (1 ≤ N ≤ 1000, N-1 ≤ M ≤ (N * (N-1)) ÷ 2, 1 ≤ Q ≤ N), que representam o número de cidades em Sildávia, as rodovias que ligam as cidades (duplo-sentido) e o número de cidades que contém um hospital respectivamente. As próximas M linhas contém três inteiros: A, B e W (1 ≤ A, B ≤ N, 1 ≤ W ≤ 50) representando que uma ambulância demora W horas para percorrer uma rodovia que liga as cidades A e B. As outras Q linhas contém um inteiro X (1 ≤ X ≤ N), indicando que na cidade X há um hospital. Não há mais de uma rodovia ligando o mesmo par de cidades. É garantido que uma ambulância pode sair de qualquer cidade e chegar a todas as demais.;Para cada caso teste, imprima uma única linha com um inteiro que representa o tempo máximo que um habitante de Sildávia demora para ser socorrido por uma ambulância.;False;9 / 10;583;162;27.79%
2360;Centrais de Controle;Paradigmas;10;"Sildávia é um reino muito grande, como todos vocês já devem conhecer. Para controlar todo o sistema de transporte, energia, água, e etc. Sildávia possui centrais de controle para cada uma de suas regiões. Tudo ocorria muito bem, até a chegada da crise economica.

Com a crise, o governador de Sildávia decidiu cortar custos. Para isto, instalou fibra ótica entre as regiões, conectando diversos pares de centrais, de maneira em que cada central conectou-se com as demais direta ou indiretamente. Como o governador não possuia muito dinheiro, ele decidiu utilizar para as N regiões, apenas N-1 cabos. É válido lembrar que nenhuma central ficou desconectada. Com a ligação de fibra ótica, cada central é capaz de controlar uma ou mais centrais que ela está diretamente ligada. Em outras palavras, agora centrais eram capazes de controlar não apenas só sua região, como suas vizinhas ligadas diretamente.

Assim, é possível que algumas centrais de controle em Sildávia possam ser desligadas (pois seriam controladas por centrais em outras regiões), então o governador contratou você para saber de quantas maneiras possíveis podemos desligar centrais de tal forma que todo o reino de Sildávia ainda esteja sobre controle.

Observações

Manter todo o reino de Sildávia sobre controle significa que cada região de Sildávia será controlada por sua central, ou alguma outra central que esteja ligada a sua.";A entrada consiste de diversos casos teste. Cada caso possui um inteiro N que é a quantidade de regiões em Sildávia (1 ≤ N ≤ 1000). As próximas N-1 linhas contém as ligações entre as centrais, dois inteiros A e B (1 ≤ A, B ≤ N).;Para cada caso teste imprima um inteiro que é a quantidade de formas de controlar Sildávia módulo 109+7.;False;10 / 10;81;25;30.86%
2361;Entradas e Saídas;Paradigmas;7;"Alexandre, Dilson, Filipe e Lucas precisavam elaborar questões para a Seletiva da UFMG para a Maratona de 2014 e pensaram no seguinte problema.

Luiz é o mais novo estagiário de uma empresa que desenvolve equipamentos eletrônicos. Uma de suas primeiras tarefas é ligar os pinos de dois componentes, usando ligações em linha reta. Cada um dos dois compoentes possui N pinos, numerados de 1 a N. Os pinos de mesmo número devem ser ligados por uma linha reta. A figura abaixo mostra um exemplo.







Os pinos do componente a esquerda sempre são numerados de cima para baixo. Infelizmente, o mesmo não acontece com os pinos do componente da direita e é necessário que ligações se cruzem. Luiz precisa computar qual é a maior quantidade de ligações que podem ser feitas, de forma que duas ligações não se cruzem, que é 3 no exemplo. Luiz não sabe programar e pediu a sua ajuda para realizar essa tarefa. A entrada consiste no número de pinos, N, e na sequência de numeração dos pinos do segundo componente.

Os ilustríssimos criadores desse problema andam muito ocupados ultimamente e não tiveram tempo de gerar casos de teste. Por isso, sua tarefa é gerar casos de teste com N pinos em que a resposta do problema seja K. Assim, na próxima seletiva, seu gerador de casos de teste pode ser usado e o problema poderá ser utilizado.";A entrada contém dois inteiros, N e K (1 ≤ K ≤ N ≤ 106), indicando o número de pinos e a resposta desejada. O final da entrada é indicado por N=K=0.;Para cada caso de teste, imprima uma linha contendo uma sequência de N inteiros separados por espaço. Essa sequência deve representar a numeração do componente mais a direita que faz com que a resposta do problema criado seja K. Caso existam várias soluções possíveis, imprima a menor lexicograficamente.;True;7 / 10;679;226;33.28%
2362;Invasão Alienígena;Geometria Computacional;10;"Os alienígenas invadiram a terra e vão aniquilar a raça humana, a não ser que você consiga detê-los. Recentemente, o S.B.C. (Sistema Brasileiro de Combate) foi equipado com uma arma laser muito poderosa, que será usada para destruir os inimigos alienígenas. Essa arma é poderosa a ponto de poder destruir tudo dentro de qualquer região circular. Felizmente, é possível controlar milimétricamente os disparos dessa arma, de forma que é possível escolher o centro e o raio da região circular que será destruída.

Isso mesmo, é possível realizar um disparo com raio de destruição grande o suficiente para destruir todos os alienígenas. Infelizmente, não é tão simples assim. Ao fazer isso, é possível que toda a humanidade também seja destruída. Decidiu-se, então, que nenhuma vida humana deveria ser tirada por essa arma laser. É claro que ainda queremos destruir os inimigos alienígenas, oras. Por isso, você foi contratado pela S.B.C.. Seu trabalho é determinar qual é o maior número de alienígenas que podem ser destruídos por um único disparo da arma laser, de forma que nenhum ser humano seja destruído.

Observações

Indivíduos na borda da região de destruição da arma laser também são destruídos. É improvável que meio ser humano consiga sobreviver. Esperamos que seja assim com alienígenas também.";A entrada contém vários casos de teste. Cada caso de teste começa com uma linha contendo dois inteiros, N e M (1 ≤ N, M ≤ 100), descrevendo o número de alienígenas e de humanos, respectivamente. Cada uma das N linhas seguintes contém dois inteiros, Xi e Yi (-106 ≤ Xi, Yi ≤ 106), representado as coordenadas de um dos alienígenas. Da mesma forma, cada uma das M linhas seguintes contém dois inteiros, Xi e Yi (-106 ≤ Xi, Yi ≤ 106), representado as coodenadas de um dos seres humanos. Mesmo se tratando de alienígenas, é claro que dois indivíduos não podem ocupar o mesmo lugar. O final da entada é indicado por N=M=0.;Para cada caso de teste, imprima um inteiro indicando o maior número de alienígenas que podem ser destruídos por um único disparo, sem que nenhum ser humano seja destruído.;False;10 / 10;95;1;1.05%
2363;Brincando com Transformações;Paradigmas;7;"Luiz é um menino bem diferente dos demais em Sildávia. Ele gosta mesmo é de brincar com sequências de números inteiros. Cansado de brincar sempre com a mesma sequência (de 1 a N), Luiz propos algumas transformações:




	PAR(S) e IMPAR(S) são duas transformações que filtram as posições pares ou ímpares de uma sequência S, retornando a nova sequência.
	REC(S) = REC(PAR(S)) + REC(IMPAR(S)). Essa transformação recursiva concatena duas sequências de acordo com o operador ( + ), filtrando ambas pelas transformações anteriores.




Como as sequências são muito grandes, Luiz deseja saber apenas o somatório de um intervalo [A, B] módulo 109+7.

Observações

REC(S) = S para |S| = 1. Ou seja, se a sequência possui apenas um elemento, REC dessa sequência é ela própria.";A entrada consiste por diversos casos teste. Cada caso possui três inteiros N, A e B que representam o tamanho da sequência original (de 1 a N), e o intervalo [A, B] da transformação REC na sequência original em que se deseja saber sua soma. (1 ≤ A ≤ B ≤ N ≤ 1018).;Para cada caso teste imprima o somatório em uma única linha módulo 109+7.;False;7 / 10;28;9;32.14%
2364;Henrique;Paradigmas;3;"Nos primórdios da computação, os professores exigiam que trabalhos práticos de Algoritmos e Estruturas de Dados II (AEDs II) fossem feitos em uma linguagem chamada DCCembly. Infelizmente, apenas um aluno era insano o bastante para fazer trabalhos a partir do zero utilizando essa linguagem. Esse aluno se chamava Henrique. Os demais alunos copiavam trabalhos de semestres anteriores, o que sempre acabava introduzindo pequenos erros.

Nesse problema, você deve escrever um programa que ajude a detectar essas cópias. Seu programa deve receber como entrada dois programas válidos escritos em DCCembly e retornar como saída a quantidade de entradas (módulo 109 + 7) para as quais ambos os programas retornem a mesma resposta.


	Valores de Retorno: [Ii R v]

	Para o programa e retorna o valor booleano v ∈{0,1} como saída.
	
	Desvios condicionais: [Ii D j Ik Il]
	Lê o valor de entrada xj e desvia a execução para a instrução de rótulo Ik se xj = 1 e Il se xj = 0.

	Denotaremos por var(Ii) a variável considerada por uma instrução. Assim, se [Ii D j Ik Il] é uma instrução, var(Ii) = j. Para instruções com valores de retorno como [Ii R v], assumiremos que var(Ii) = M + 1.
	


Todo programa válido em DCCembly deve satisfazer as seguinte propriedades:


	Para toda instrução de rótulo Ii, existe uma entrada X = (x1, …, xM) tal que Ii seja executada quando o programa recebe X.
	Para toda instrução de desvio [Ii D j Ik Il], temos var(Ii) < var(Ik) e var(Ii) < var(Il).
	Uma instrução de desvio só pode ter como destinos instruções que apareceram previamente no código.
	A execução se inicia pela última instrução.
	Os identificadores de instruções são únicos dentro de um único programa.


Escreva um programa que receba dois códigos válidos em DCCembly como entrada e retorne o número de entradas distintas para as quais os dois programas tem como saída o mesmo valor. Como a resposta pode ser muito grande, basta computa-la módulo 109 + 7.";"A entrada é composta por multiplos casos de teste e deve ser lida da entrada padrão. Cada caso de teste começa com uma linha contendo 3 inteiros: M, L0 e L1. O inteiro M (1 ≤ M ≤ 106 ) denota a quantidade de variáveis de entrada. Já L0 corresponde ao número de instruções no primeiro programa (1 ≤ L0 ≤ 1000) e L1 corresponde ao número de instruções no segundo (1 ≤ L1 ≤ 1000).

Em seguida, há L0 linhas contendo o primeiro programa. Instruções de desvio do tipo [Ii D j Ik Il] são denotadas por um identificador Ii (1 ≤ Ii ≤ L0) seguido do caractere “D” e de três inteiros j, Ik, e Il. O inteiro j indica que a variável xj é considerada pelo desvio (1 ≤ j ≤ M). Já os inteiros Ik e Il (1 ≤ Ik, Il ≤ L0) indicam as instruções de destino do desvio caso xj=1 e caso xj = 0, respectivamente. Finalmente, instruções de retorno [Ii R v] são denotadas por um identificador numérico Ii (1 ≤ Ii ≤ L0) seguido do caractere “R” e de um inteiro v ∈{0, 1}.

Finalmente, outras L1 linhas descrevem o segundo programa. Como antes, instruções de desvio do tipo [Ii D j Ik Il] são denotadas por um identificador Ii (1 ≤ Ii ≤ L1) seguido do caractere “D” e de três inteiros j, Ik, e Il. O inteiro j indica que a variável xj é considerada pelo desvio (1 ≤ j ≤ M). Já os inteiros Ik e Il (1 ≤ Ik, Il ≤ L1) indicam as instruções de destino do desvio caso xj=1 e caso xj = 0, respectivamente. Finalmente, instruções de retorno [Ii R v] são denotadas por um identificador numérico Ii (1 ≤ Ii ≤ L1) seguido do caractere “R” e de um inteiro v ∈{0, 1}.

Note que embora os identificadores de instruções são únicos apenas dentro de um único programa.

A entrada termina com uma linha contendo três zeros, que não deve ser processada.";Para cada caso de teste, imprima uma única linha na saída padrão contendo o número de entradas distintas (x1, …, xM) para as quais ambos os programas retornem a mesma resposta módulo 109 + 7.;False;3 / 10;7;2;28.57%
2365;Bolão do Brasileirão;Ad-Hoc;5;"Muitos irão dizer que é sorte, mas Dilson possui uma incrível habilidade em bolões de campeonatos de futebol. Sua última façanha foi ganhar o bolão da computação da Copa do Mundo acertando, inclusive, os surpreendentes placares de Brasil X Alemanha e Espanha X Holanda. Pensando em se tornar um profissional do bolão, ele pede a você para criar um programa que irá computar o ranking final de um bolão. 

Em um bolão, competidores palpitam em placares de partidas de futebol antes do início de um torneio. Após a realização de cada partida, são atribuídos pontos ao participantes de acordo com as seguintes regras:


	10 pontos - Se o participante acertou o resultado\footnote{Por resultado compreende-se o time vencedor ou empate} e os gols marcados por cada time.
	7 pontos - Se o participante acertou o resultado e os gols marcados por um time.
	5 pontos - Se o participante acertou apenas resultado.
	2 pontos - Se o participante acertou os gols marcados por um time.
	0 pontos - Se o participante não acertou nada.


Ao final do torneio, o participante que tiver mais pontos é o campeão. Neste problema, você deve retornar o ranking final do bolão. A ordem lexicográfica do nome do participante é o único critério de desempate (mais uma vantagem para Dilson).";"Existem múltiplos casos de teste. A primeira linha de cada caso de teste  é composta por 2 inteiros P (1 ≤ P ≤ 10) e N (1 ≤ N ≤ 10) indicando, respectivamente, o número de participantes do bolão e o número de partidas disputadas. As linhas seguintes descreverão os palpites dos participantes.

Os palpites do i-ésimo participante serão descritos em N+1 linhas. A primeira linha possui apenas uma string Si, que é o nome do participante i. As N linhas seguintes descrevem os palpites de cada partida j. Esses palpites são descritos por Aj GAi,j Bj GBi,j, onde Aj e Bj são strings indicando os times que irão se enfrentar na j-ésima partida, GAi,j e GBi,j ( 0 ≤ GAi,j , GBi,j ≤ 100 ) são inteiros  que representam, respectivamente, a quantidade de gols que o participante i espera que os times Aj e Bj marquem na partida j. Os participantes sempre palpitam seguindo a mesma ordem. Logo, Aj e Bj será o mesmo para todos os participantes.

Por fim, existem N linhas que descrevem o resultado real das partidas. Cada linha possui Aj RAj Bj RBj, onde RAj e RBj ( 0 ≤ RAj , RBj ≤ 100 ) são inteiros  que representam a quantidade de gols marcados pelos times Aj e Bj nesta partida.

A entrada termina quando P = N = 0.";A saida é descrita em P linhas. Cada linha deve conter uma string Si indicando o nome do jogador e um inteiro Ki, indicando quantos pontos o jogador i marcou, separados por um espaço. Essas linhas devem estar ordenadas de acordo com os valores Ki e o critério de desempate.;False;5 / 10;155;79;50.97%
2366;Maratona;Ad-Hoc;5;"A maratona é talvez a prova mais desgastante entre as modalidades olímpicas: são quarenta e dois mil, cento e noventa e cinco metros de percurso. Por isso, os organizadores sempre posicionam vários postos de água ao longo do trajeto da prova, onde copos de água são distribuídos aos competidores.

					João Saci é um jovem atleta que tem boas chances de se tornar um maratonista de primeira linha. No entanto, João Saci descobriu que somente consegue terminar uma maratona se ingerir alguns copos de água durante o percurso. O Laboratório de Biomecânica da universidade local, através de experimentos, determinou que João Saci consegue percorrer exatamente mais dois mil metros após o instante em que ingere um copo de água. A distância que João Saci consegue percorrer após ingerir um copo de água é denominada de distância intermediária máxima. Assim, se a distância entre dois postos de água consecutivos no percurso da maratona for sempre menor ou igual do que a distância intermediária máxima de João Saci, ele consegue terminar a prova. Caso contrário ele não consegue terminar a prova.

					O Laboratório de Biomecânica quer agora realizar estudos similares com outros maratonistas, que têm valor de distâncias intermediárias máximas distintas, e precisa de sua ajuda.

					Sua tarefa é escrever um programa que, dada a posição dos postos de água ao longo do percurso, e a distância intermediária máxima de um atleta, determine se o atleta consegue ou não completar a prova.";"A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado).

					A primeira linha da entrada contém dois números inteiros N e M, separados por um espaço em branco, indicando respectivamente o número de postos de água (2 ≤ N ≤ 10000) e a distância intermediária máxima de um atleta, em metros (1 ≤ M ≤ 42195). A segunda linha contém N números inteiros Pi, separados por um espaço em branco, representando a posição dos postos de água ao longo do trajeto da maratona. A posição de um posto de água é dada pela distância, em metros, do início do percurso até o posto de água (0 ≤ Pi ≤ 42195 para 1 ≤ i ≤ N). O primeiro posto de água está sempre localizado no ponto de partida (ou seja, P1 = 0) e todos os postos estão em posições distintas. Além disso, os postos de água são dados na ordem crescente de sua distância ao início do percurso.

					Note que a distância total da prova é a oficial para a maratona, ou seja, 42195 metros.";Seu programa deve imprimir, na saída padrão, uma única linha contendo o caractere ‘S’ se o atleta consegue terminar a prova, ou o caractere ‘N’ caso contrário.;False;5 / 10;965;297;30.78%
2367;Competição de Chocolate;Ad-Hoc;7;"Carlos e Paula acabaram de ganhar um saco com bolinhas de chocolate. Como sabem que vão comer tudo muito rápido inventaram uma brincadeira:

					
						Eles vão comer de forma alternada, um depois o outro, sendo que sempre a Paula começa.
						A cada vez, só se pode comer de 1 a M bolinhas, sendo o M decidido pela mãe de Paula, de forma que não engasguem com o chocolate.
						Se um comeu K bolinhas em sua vez, o próximo não pode comer o mesmo tanto, tendo que comer um número de bolinhas distinto.
						Quem não puder mais jogar de maneira válida perde.
					

					Um exemplo de partida para M = 5 e 20 bolinhas, onde Carlos ganhou:

					  

					Observe que no final Carlos não poderia comer 2 bolinhas para ganhar, pois seria o mesmo que Paula comeu na vez anterior. Mas Paula também não pôde comer a última bolinha, pois Carlos havia comido apenas uma na rodada anterior, assim Paula ficou sem opção de jogada e perdeu.

					Ambos são muito espertos e jogam de maneira ótima, de forma que se existe para um deles uma sequência de jogadas que garante a vitória independente da jogada do outro, essa pessoa jogará dessa forma.

					Sua tarefa é determinar quem vai ganhar a brincadeira, se ambos jogam de forma ótima.";"A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado).

					A entrada consiste de uma linha contendo dois inteiros N (2 ≤ N ≤ 106) e M (2 ≤ M ≤ 103), sendo N o número de bolinhas de chocolate e M o número de bolinhas permitidas por vez.";Seu programa deve imprimir, na saída padrão, uma linha, contendo o nome do vencedor, como exemplificado abaixo.;True;7 / 10;129;46;35.66%
2368;Simulador;Ad-Hoc;10;"Um novo processador, denominado Faíska, está sendo desenvolvido para a empresa SBC. Este novo processador tem apenas duas instruções: inversão e soma, descritas a seguir.

					
						Inversão: dados dois endereços de memória X e Y , a operação inverte(X,Y) inverte a posição de palavras da memória de forma que
					

					
						a palavra no endereço X troca de posição com a palavra de memória da posição Y;
						a palavra no endereço X + 1 troca de posição com a palavra de memória da posição Y − 1;
						a palavra no endereço X + 2 troca de posição com a palavra de memória da posição Y − 2;
						e assim por diante, até que X ≥ Y.
					

					
						Soma: dados dois endereços de memória X e Y, a operação soma(X,Y) imprime a soma das palavras de memória entre os endereços X e Y (inclusive).
					

					Por exemplo, se a memória contém inicialmente, a partir da primeira posição de memória (endereço igual a 1) os valores [1,2,3,4,5,6,7,8], a operação inverte(3,7) deixa a memória igual a [1,2,7,6,5,4,3,8]. Então, nesse estado, a execução de soma(1,3) produz a saída 10.

					Sua tarefa é escever um programa que, dada uma sequência de instruções do Faíska, simule a execução e produza o mesmo resultado que o Faíska produziria.";"A entrada contém um único conjunto de testes, que deve ser lido do dispositivo de entrada padrão (normalmente o teclado).

					A primeira linha da entrada contém dois números inteiros N e M, representando respectivamente o número palavras na memória (1 ≤ N ≤ 109) e o número de instruções do programa (1 ≤ M ≤ 1000). Cada uma das M linhas seguintes contém uma instrução do Faíska. Cada instrução é composta de um caratere descrevendo a instrução (‘I’ para inversão e ‘S’ para soma), seguido de um espaço, seguido de dois inteiros indicando os argumentos da instrução.

					Inicialmente a configuração da memória é tal que cada palavra tem como conteúdo o seu próprio endereço. Em outras palavras, o conteúdo inicial da memória é [1,2,3,. . .,N]. Há pelo menos uma instrução soma em cada caso de teste.";Seu programa deve imprimir, na saída padrão, uma sequência de números inteiros, um em cada linha, indicando a saída gerada pelo Faíska.;False;10 / 10;188;21;11.17%
2369;Conta de Água;Ad-Hoc;1;"A empresa local de abastecimento de água, a Saneamento Básico da Cidade (SBC), está promovendo uma campanha de conservação de água, distribuindo cartilhas e promovendo ações demonstrando a importância da água para a vida e para o meio ambiente.

Para incentivar mais ainda a economia de água, a SBC alterou os preços de seu fornecimento de forma que, proporcionalmente, aqueles clientes que consumirem menos água paguem menos pelo metro cúbico. Todo cliente paga mensalmente uma assinatura de R$ 7, que inclui uma franquia de 10 m³ de água. Isto é, para qualquer consumo entre 0 e 10 m³ , o consumidor paga a mesma quantia de R$ 7 reais (note que o valor da assinatura deve ser pago mesmo que o consumidor não tenha consumido água). Acima de 10 m³ cada metro cúbico subsequente tem um valor diferente, dependendo da faixa de consumo. A SBC cobra apenas por quantidades inteiras de metros cúbicos consumidos. A tabela abaixo especifica o preço por metro cúbico para cada faixa de consumo:



Assim, por exemplo, se o consumo foi de 120 m³ , o valor da conta é:


	7 reais da assinatura básica;
	20 reais pelo consumo no intervalo 11 - 30 m³;
	140 reais pelo consumo no intervalo 31 - 100 m³;
	100 reais pelo consumo no intervalo 101 - 120 m³.


Logo o valor total da conta de água é R$ 267.

Escreva um programa que, dado o consumo de uma residência em m3, calcula o valor da conta de água daquela residência.";A única linha da entrada contém um único inteiro N, indicando o consumo de água da residência, em m³ (0 ≤ N ≤ 10³).;Seu programa deve imprimir uma única linha, contendo o valor da conta de água daquela residência.;True;1 / 10;2322;1326;57.11%
2370;Times;Ad-Hoc;3;"As aulas de educação física, em muitas escolas, acontecem da seguinte maneira: O professor entrega uma bola ao alunos (geralmente de futebol) e estes se dividem em times, onde jogam partidas alternadamente.

A maneira como os times são escolhidos também é semelhante em todas as escolas: decide-se quantos times serão formados, e uma pessoa para montar cada um dos times. Cada pessoa vai escolher, alternadamente, um dos alunos restantes para fazer parte de sua equipe. Como todos querem ter uma boa equipe, a pessoa que vai escolher o próximo membro do time escolhe aquele, dentre os ainda disponíveis, que possui o melhor nível de habilidade. Assim, os times acabam ficando relativamente equilibrados na soma do nível de habilidade dos jogadores.

Dada uma lista de alunos que serão escolhidos e seus respectivos níveis de habilidade para os times e a quantidade de times que serão formados, mostre como ficarão os times ao final do processo de montagem dos mesmos.";"A primeira linha da entrada contém dois inteiros N (2 ≤ N ≤ 10.000) e T (2 ≤ T ≤ 1000), representando respectivamente a quantidade de alunos e o número de times a serem formados, sendo T ≤ N. As N linhas seguintes descrevem, cada uma, um aluno disponível para escolha de times. Cada uma dessas linhas possui o nome do aluno (composto apenas por letras minúsculas) e um inteiro H (0 ≤ H ≤ 1.000.000) descrevendo seu nível de habilidade).

Não existem dois alunos com o mesmo nível de habilidade, e todos eles possuem nomes diferentes. é possível que alguns times acabem ficando com menos jogadores do que os outros.";"Seu programa deve imprimir a lista de times que será formada ao final do processo de seleção. Para cada time, você deverá mostrar o termo ""Time N"", onde N é o número do time (1 para o primero, 2 para o segundo, e assim por diante) seguido de K linhas, onde K é a quantidade de jogadores do time, mostrando o nome de cada um dos jogadores do time, em ordem alfabética. Imprima uma linha em branco após cada descrição de time (inclusive do último).

Os times serão escolhidos pelo computador, então não é necessário considerar o aluno que irá fazer a escolha dos times.";False;3 / 10;341;209;61.29%
2371;Batalha Naval;Ad-Hoc;8;"Pedro e Paulo gostam muito de jogar batalha naval; apesar de serem grandes amigos, Pedro desconfia que Paulo não esteja jogando honestamente. Para tirar essa dúvida, Pedro decidiu usar um programa de computador para verificar o resultado do jogo, mas Pedro não sabe programar e por isso pediu a sua ajuda. O jogo de batalha naval é jogado em um tabuleiro retangular com N linhas e M colunas. Cada posição deste tabuleiro é um quadrado que pode conter água ou uma parte de um navio. Dizemos que dois quadrados são vizinhos se estes possuem um lado em comum. Se duas partes de navio estão em posições vizinhas, então essas duas partes pertencem ao mesmo navio. A regra do jogo proíbe que os quadrados de duas partes de navios distintos tenham um canto em comum (em outras palavras, que quadrados de duas partes de navios distintos compartilhem um vértice). Cada disparo que um jogador faz deve ser feito em um dos quadrados do tabuleiro do outro jogador. Um jogador informa ao outro a coluna e a linha do quadrado alvo do disparo. Para que um navio seja destruído, o jogador deve acertar todas as partes deste navio. 

Escreva um programa que, dadas a configuração do tabuleiro e uma sequência de disparos feitos por um jogador, determina o número de navios do outro jogador que foram destruídos.";"A primeira linha da entrada contém dois inteiros N e M (1 ≤ N ≤ 100 e M ≤ 100) representando respectivamente o número de linhas e de colunas do tabuleiro. As N seguintes linhas correspondem ao tabuleiro do jogo. Cada uma dessas linhas contém M caracteres. Cada caractere indica o conteúdo da posição correspondente no tabuleiro. Se esse caractere for ‘.’, essa posição contém água; se for ‘#’, essa posição contém uma parte de um navio. A próxima linha contém um número K que é o número de disparos feitos pelo jogador (1 ≤ K ≤ N × M ). As próximas K linhas indicam os disparos feitos pelo jogador. Cada linha contém dois inteiros L e C, indicando a linha e a coluna do disparo feito pelo outro jogador (1 ≤ L ≤ N e 1 ≤ C ≤ M).";Seu programa deve imprimir uma única linha contendo um único número inteiro, o número de navios destruídos. Tenha cuidado ainda que em um conjunto de casos de teste que totaliza 30 pontos, os navios são todos compostos por exatamente uma parte (ou seja, um quadrado) e um conjunto de casos de teste que totaliza 50 pontos, cada navio está contido em exatamente uma linha.;False;8 / 10;516;153;29.65%
2372;Reunião;Ad-Hoc;2;"Todos os anos, a SBC (Sociedade Brasileira de Caminhoneiros) reúne seus membros em alguma cidade para discutir sobre a profissão. Nessas reuniões são discutidos os problemas da categoria e são apresentadas sugestões sobre como melhorar as condições de trabalho.

					O grande problema desse tipo de encontro é que os membros estão espalhados pelo país, uma vez que a profissão exige que eles viajem para diversos lugares todos os dias. Por isso, a escolha da cidade onde será feita a reunião sempre é feita de modo que não prejudique demais nenhum dos caminhoneiros. O critério para tal é que a maior das distâncias percorridas pelos caminhoneiros para chegar ao local da reunião deve ser a menor possível. Ou seja, a distância percorrida pelo caminhoneiro que vai percorrer a maior distância entre todos os caminhoneiros para chegar à reunião deve ser a menor possível.

					Dadas as cidades onde se encontram os caminhoneiros e a descrição das estradas que interligam essas cidades,escreva um programa que determina qual será a menor distância máxima percorrida por um caminhoneiro parachegar até o local da reunião. Os caminhoneiros conhecem bem as estradas, e portando sempre fazem o menor caminho possível até a cidade da reunião. Sempre existe um caminho ligando quaisquer duas cidades.";A primeira linha da entrada possui dois números inteiros N (2 ≤ N ≤ 100) e M (N − 1 ≤ M ≤ 10000), que representam, respectivamente, o número de cidades e o número de estradas que as interligam. As cidades são identificadas por números inteiros entre 0 e N − 1. As próximas M linhas da entrada possuem, cada uma, a descrição de uma estrada. Cada descrição de entrada é composta por três números inteiros: U, V e W, onde Ue V representam cidades (0 ≤ U ≤ N − 1 e 0 ≤ V ≤ N − 1) e W representa o comprimento da estrada que une essas duas cidades (todas as estradas são mão dupla, 1 ≤ W ≤ 100). É sempre possível viajar entre qualquer duas cidades com as estradas existentes, mas pode haver mais de uma estrada ligando o mesmo par de cidades.;Seu programa deve imprimir uma única linha contendo um número inteiro, a distância máxima percorrida porum caminhoneiro para ir até a reunião, obedecidas as restrições estabelecidas (ou seja, essa distância máximadeve ser a menor possível).;False;2 / 10;214;155;72.43%
2373;Garçom;Ad-Hoc;1;"Parte do treinamento de um novo garçom é carregar uma grande bandeja com várias latas de bebidas e copos e entregá-las todas numa mesa do restaurante. Durante o treinamento é comum que os garçons deixem cair as bandejas, quebrando todos os copos.

A SBC - Sociedade Brasileira de Copos - analisou estatísticas do treinamento de diversos garçons e descobriu que os garçons em treinamento deixam cair apenas bandejas que têm mais latas de bebidas que copos.

Por exemplo, se uma bandeja tiver 10 latas e 4 copos, certamente o garçom em treinamento a deixará cair, quebrando os 4 copos. Já se a bandeja tiver 5 latas e 6 copos, ele conseguirá entregá-la sem deixar cair.

Escreva um programa que, dado o número de latas e copos em cada bandeja que o garçom tentou entregar, imprime o total de copos que ele quebrou.";A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 100) representando o número de bandejas que o garçom tentou entregar. As N linhas seguintes representam as N bandejas. Cada linha contém dois inteiros L e C, indicando o número de latas e o número de copos naquela bandeja, respectivamente (0 ≤ L, C ≤ 100).;Seu programa deve imprimir uma única linha, contendo um único inteiro, indicando o número total de copos que o garçom quebrou.;False;1 / 10;1665;1298;77.96%
2374;Pneu;Ad-Hoc;1;"Calibrar os pneus do carro deve ser uma tarefa cotidiana de todos os motoristas. Para isto, os postos de gasolina possuem uma bomba de ar. A maioria das bombas atuais são eletrônicas, permitindo que o motorista indique a pressão desejada num teclado. Ao ser ligada ao pneu, a bomba primeiro lê a pressão atual e calcula a diferença de pressão entre a desejada e a lida. Com esta diferença ela esvazia ou enche o pneu para chegar na pressão correta.

Sua ajuda foi requisitada para desenvolver o programa da próxima bomba da SBC - Sistemas de Bombas Computadorizadas.

Escreva um programa que, dada a pressão desejada digitada pelo motorista e a pressão do pneu lida pela bomba, indica a diferença entre a pressão desejada e a pressão lida.";A primeira linha da entrada contém um inteiro N que indica a pressão desejada pelo motorista (1 ≤ N ≤ 40). A segunda linha contém um inteiro M que indica a pressão lida pela bomba (1 ≤ M ≤ 40).;Seu programa deve imprimir uma única linha, contendo a diferença entre a pressão desejada e a pressão lida.;False;1 / 10;3223;2564;79.55%
2375;Sedex;Ad-Hoc;1;"A Copa do Mundo de 2010 será realizada na áfrica do Sul. Bolas de futebol são muito fáceis de transportar, já que elas saem das fábricas vazias e só são enchidas somente pelas lojas ou pelos consumidores finais.

Infelizmente o mesmo não pode ser dito das bolas de boliche. Como elas são completamente sólidas, elas só podem ser transportadas embaladas uma a uma, em caixas separadas.

A SBC - Só Boliche Cascavel - é uma fábrica de bolas de boliche que trabalha somente através de encomendas e envia todas as bolas por SEDEX. Como as bolas têm tamanhos diferentes, a SBC tem vários tamanhos de caixas diferentes para transportá-las.

Escreva um programa que, dado o diâmetro de uma bola e as 3 dimensões de uma caixa (altura, largura e profundidade), diz se a bola de boliche cabe dentro da caixa ou não.";A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 10.000) que indica o diâmetro da bola de boliche. A segunda linha da entrada contém 3 números inteiros separados por um espaço cada: a altura A (1 ≤ A ≤ 10.000), seguida da largura L (1 ≤ L ≤ 10.000) e da profundidade P (1 ≤ P ≤ 10.000).;Seu programa deve imprimir uma única linha, contendo a letra 'S' caso a bola de boliche caiba dentro da caixa ou 'N' caso contrário.;False;1 / 10;2624;1780;67.84%
2376;Copa do Mundo;Ad-Hoc;2;"Este ano tem Copa do Mundo! O país inteiro se prepara para torcer para a equipe canarinho conquistar mais um título, tornando-se hexacampeã.

Na Copa do Mundo, depois de uma fase de grupos, dezesseis equipes disputam a Fase final, composta de quinze jogos eliminatórios. A figura abaixo mostra a tabela de jogos da Fase final:



Na tabela de jogos, as dezesseis equipes finalistas são representadas por letras maiúsculas (de A a P), e os jogos são numerados de 1 a 15. Por exemplo, o jogo 3 é entre as equipes identificadas por E e F; o vencedor desse jogo enfrentará o vencedor do jogo 4, e o perdedor será eliminado. A equipe que vencer os quatro jogos da Fase final será a campeã (por exemplo, para a equipe K ser campeã ela deve vencer os jogos 6, 11, 14 e 15.

Dados os resultados dos quinze jogos da Fase final, escreva um programa que determine a equipe campeã.";A entrada é composta de quinze linhas, cada uma contendo o resultado de um jogo. A primeira linha contém o resultado do jogo de número 1, a segunda linha o resultado do jogo de número 2, e assim por diante. O resultado de um jogo é representado por dois números inteiros M e N separados por um espaço em branco, indicando respectivamente o número de gols da equipe representada à esquerda e à direita na tabela de jogos (0 ≤ M ≤ 20, 0 ≤ N ≤ 20 e M ≠ N).;Seu programa deve imprimir uma única linha, contendo a letra identificadora da equipe campeã.;True;2 / 10;579;388;67.01%
2377;Pedágio;Ad-Hoc;1;"A invenção do carro tornou muito mais rápido e mais barato realizar viagens de longa distância. Realizar uma viagem rodoviária tem dois tipos de custos: cada quilômetro percorrido na rodovia tem um custo associado (não só devido ao consumo de combustível mas também devido ao desgaste das peças do carro, pneus, etc.), mas também é necessário passar por vários pedágios localizados ao longo da rodovia.

Os pedágios são igualmente espaçados ao logo da rodovia; o começo da estrada não possui um pedágio, mas o seu final pode estar logo após um pedágio (por exemplo, se a distância entre dois pedágios consecutivos for de 37 km e a estrada tiver 111 km, o motorista deve pagar um pedágio aos 37 km, aos 74 km e aos 111 km, logo antes de terminar a sua viagem).

Dadas as características da rodovia e os custos com gasolina e com pedágios, calcule o custo total da viagem.";A entrada consiste de duas linhas. A primeira linha da entrada contém dois inteiros L e D (1 ≤ L, D ≤ 104), indicando o comprimento da estrada e a distância entre pedágios, respectivamente. A segunda linha contém dois inteiros K e P (1 ≤ K, P ≤ 104 ), indicando o custo por quilômetro percorrido e o valor de cada pedágio. O primeiro pedágio está localizado no quilômetro D da estrada (ou seja, a distância do início da estrada para o primeiro pedágio é D quilômetros).;Seu programa deve imprimir uma única linha contendo um único inteiro, indicando o custo total da viagem.;False;1 / 10;2932;2150;73.33%
2378;Elevador;Ad-Hoc;1;"A Subindo Bem Confortavelmente (SBC) é uma empresa tradicional, com mais de 50 anos de experiência na fabricação de elevadores. Todos os projetos da SBC seguem as mais estritas normas de segurança, mas infelizmente uma série de acidentes com seus elevadores manchou a reputação da empresa.

Ao estudar os acidentes, os engenheiros da companhia concluíram que, em vários casos, o acidente foi causado pelo excesso de passageiros no elevador. Por isso, a SBC decidiu fiscalizar com mais rigor o uso de seus elevadores: foi instalado um sensor em cada porta que detecta a quantidade de pessoas que saem e entram em cada andar do elevador. A SBC tem os registros do sensor de todo um dia de funcionamento do elevador (que sempre começa vazio). Eles sabem que as pessoas são educadas e sempre deixam todos os passageiros que irão sair em um andar saírem antes de outros passageiros entrarem no elevador, mas ainda assim eles têm tido dificuldade em decidir se a capacidade máxima do elevador foi excedida ou não.

Sua tarefa é escrever um programa que, dada uma sequência de leituras do sensor e a capacidade máxima do elevador, determinar se a capacidade máxima do elevador foi excedida em algum momento.";A primeira linha da entrada contém dois inteiros N e C, indicando o número de leituras realizadas pelo sensor e a capacidade máxima do elevador, respectivamente (1 ≤ N ≤ 1000 e 1 ≤ C ≤ 1000). As N linhas seguintes contém, cada uma, uma leitura do sensor. Cada uma dessas linhas contém dois inteiros S e E, indicando quantas pessoas saíram e quantas pessoas entraram naquele andar, respectivamente (0 ≤ S ≤ 1000 e 0 ≤ E ≤ 1000).;Seu programa deve imprimir uma uníca linha contendo o caractere ‘S’, caso a capacidade do elevador tenha sido excedida em algum momento, ou o caractere ‘N’ caso contrário.;False;1 / 10;1400;842;60.14%
2379;Dança Indígena;Ad-Hoc;4;"A OBI (Organização Brasileira dos Índios) promoverá um festival indígena, onde várias tribos irão se reunir e fazer demonstrações de cultura, como artesanato, danças, pinturas, comidas e etc.

					Uma das tribos é a dos Tunak Tunak, que possuem uma apresentação de dança muito peculiar. Nessa dança, existem N toras de madeira encrustadas no chão, dispostas de maneira circular e igualmente espaçadas. Em algumas dessas toras fica um índio, olhando em sentido horário ou anti-horário.

					A cada batida do tambor, os índios pulam para a próxima tora (que depende da direção para onde ele está olhando no momento). Durante a dança, porém, algumas coisas podem acontecer:

					
						Dois índios que pulam em sentidos opostos caem na mesma tora ao mesmo tempo. Nesse caso, ambos permanecem nas toras, mas passam a pular na direção contrária a partir da próxima batida de tambor (isso é, quem estava pulando em sentido horário passa a pular em sentido anti-horário, e vice-versa).
						Dois índios em toras consecutivas vão pular um em direção ao outro. Nesse caso, os índios simplesmente não pulam (para não causar nenhum acidente), e, assim como no caso anterior, passam a pular no sentido contrário a partir da próxima batida de tambor.
					

					Note que se o índio não pula e inverte seu sentido, mas ao mesmo tempo um outro índio cair na mesma tora no sentido contrário, caimos no primeiro caso, e ambos os índios na tora invertem seus sentidos (assim, o índio que estava na tora anteriormente inverte seu sentido novamente).

					A dança termina quando as toras ocupadas por um índio são exatamente as mesmas toras ocupadas no início da dança, não importando qual índio está em cada tora e nem os sentidos para onde eles estão pulando.

					A figura abaixo ilustra (a) uma configuração inicial com oito toras e seis índios; (b) a posição dos índios após uma batida de tambor; e (c) a posição dos índios após duas batidas de tambor.

					  

					Os índios querem se preparar para a dança e precisam saber quanto tempo ela vai durar.

					Para isso, você deverá escrever um programa que, dados a quantidade de toras que serão utilizadas, a quantidade de índios e a posição inicial de cada um, calcule quantas batidas de tambor levará para que a dança termine.";A primeira linha da entrada possui 2 inteiros: N (3 ≤ N ≤ 1.000.000) e E (1 ≤ E ≤ 1000), que são, respectivamente, a quantidade de toras e a quantidade de índios que irão dançar (E ≤ N). As próximas E linhas contém, cada uma, a descrição da posição inicial de cada índio. Cada linha possui dois inteiros: V (1 ≤ V ≤ N) e D (D = 1 ou D = -1) que representam, respectivamente, o número da tora onde o índio inicia e seu sentido inicial (1 se horário, -1 se anti-horário). A numeração das toras obedece o sentido horário. No início da dança uma tora terá, no máximo, um índio.;Seu programa deverá exibir um número inteiro representando a quantidade de batidas de tambor necessárias para que a dança acabe.;True;4 / 10;52;24;46.15%
2380;Fusões;Ad-Hoc;5;"A informatização dos sistemas bancários permitiu grandes economias de tempo e dinheiro, permitindo que vários tipos de transações financeiras pudessem ser realizadas pela Internet. Para possibilitar isso, cada banco recebeu um código bancário, que é um número utilizado pelos sistemas de computador para identificar cada banco.

Quando um banco decide comprar outro, ocorre o que se chama uma fusão: os dois bancos tornam-se um só banco. Para manter compatibilidade com os sistemas eletrônicos dos bancos, qualquer um dos códigos dos antigos bancos pode ser usado para se referir ao novo banco.

Com a crise econômica internacional, as fusões entre bancos têm sido cada vez mais comuns; por isso, muitas vezes é difícil decidir se dois códigos bancários na realidade se referem ao mesmo banco (devido aos dois bancos terem se fundido, diretamente ou não).

Escreva um programa que, dada uma série de fusões entre bancos, responde a várias consultas perguntando se dois códigos bancários se referem ao mesmo banco.";"A primeira linha da entrada contém dois inteiros N e b, indicando o número de bancos e o número de operações efetuadas (1 ≤ N ≤ 100.000, 1 ≤ K ≤ 100.000). Os códigos de cada um dos N bancos, inicialmente, são os inteiros de 1 até N.

Cada uma das K linhas seguintes descreve ou uma fusão entre bancos ou uma consulta.


	Uma fusão é descrita na entrada como uma linha que começa com o caractere 'F', um espaço, e dois códigos bancários, que se referem aos dois bancos que estão sofrendo a fusão, separados por um espaço em branco;
	Uma consulta é descrita na entrada como uma linha que começa com o caractere 'C', um espaço, e os dois códigos a serem consultados, separados por um espaço em branco. Os códigos bancários consultados são sempre distintos.


As fusões são sempre realizadas entre bancos diferentes, e todos os códigos bancários fornecidos na entrada são válidos.";"Seu programa deve imprimir uma linha para cada consulta na entrada. Caso os dois códigos bancários consultados se refiram ao mesmo banco, imprima uma linha contendo o caractere 'S'; caso contrário, imprima uma linha contendo apenas o caractere 'N'.";False;5 / 10;558;259;46.42%
2381;Lista de Chamada;Ad-Hoc;1;"Tia Joana é uma respeitada professora e tem vários alunos. Em sua última aula, ela prometeu que iria sortear um aluno para ganhar um bônus especial na nota final: ela colocou N pedaços de papel numerados de 1 a N em um saquinho e sorteou um determinado número K; o aluno premiado foi o K-ésimo aluno na lista de chamada.

					O problema é que a Tia Joana esqueceu o diário de classe, então ela não tem como saber qual número corresponde a qual aluno. Ela sabe os nomes de todos os alunos, e que os números deles, de 1 até N, são atribuídos de acordo com a ordem alfabética, mas os alunos dela estão muito ansiosos e querem logo saber quem foi o vencedor.

					Dado os nomes dos alunos da Tia Joana e o número sorteado, determine o nome do aluno que deve receber o bônus.";A primeira linha contém dois inteiros N e K separados por um espaço em branco (1 ≤ K ≤ N ≤ 100). Cada uma das N linhas seguintes contém uma cadeia de caracteres de tamanho mínimo 1 e máximo 20 representando os nomes dos alunos. Os nomes são compostos apenas por letras minúsculas de 'a' a 'z'.;Seu programa deve imprimir uma única linha, contendo o nome do aluno que deve receber o bônus.;False;1 / 10;1888;1052;55.72%
2382;Sedex Marciano;Ad-Hoc;3;"Estamos no ano 2048 e um dos sonhos da humanidade torna-se finalmente realidade: a colonização do planeta Marte. Nossos primeiros colonizadores acabam de chegar, e já começam a fazer as preparações (como a instalação de cúpulas de oxigênio e tratamento do solo para agricultura) para que mais pessoas possam tentar uma nova vida no planeta vizinho.

					Apesar dos avanços tecnológicos e desafios vencidos, ainda resta um grande problema: os foguetes usados para ir a Marte ainda são complicados e caros. Com isso, fica difícil enviar suprimentos para os nossos colonos (enquanto a agricultura ainda não é possível) por muito tempo. Assim, a agência espacial contratou o SBC (Serviço Balístico Cósmico), que desenvolveu um canhão super-potente que consegue disparar esferas até Marte, sem precisar gastar milhões de dólares em equipamento e combustível.

					Agora, tudo o que é necessário fazer para enviar suprimentos a Marte é colocar uma caixa com as encomendas dentro de uma esfera e disparar a mesma até seu destino.

					Dadas as dimensões de uma caixa com suprimentos e o raio interno da esfera que é disparada pelo canhão, seu programa deverá dizer se é possível enviar tal caixa para Marte usando tal esfera.";Cada entrada contém apenas uma linha com quatro inteiros L, A, P e R, (0 ≤ L, A, P, R ≤ 1000) que representam, respectivamente, a largura, altura e profundidade da caixa, e o raio da esfera.;Seu programa deve imprimir um único caractere: 'S' (sem aspas) se é possível colocar a caixa dentro da esfera, ou 'N' (sem aspas) caso contrário.;False;3 / 10;1117;465;41.63%
2383;Altas Aventuras;Ad-Hoc;6;"Incentivado por um filme de animação recente, vovô resolveu realizar seu sonho de criança, fazendo sua pequena casa voar amarrada a balões de hélio. Comprou alguns balões coloridos de boa qualidade, para fazer alguns testes, e começou a planejar a grande aventura. A primeira tarefa é determinar qual a quantidade de hélio máxima que pode ser injetada em cada balão de maneira que ele nao estoure.

					Suponha que os valores possíveis de quantidade de hélio em cada balão variem entre os valores 1 e N. Claro que vovô poderia testar todas as possibilidades, mas esse tipo de solução ineficiente não é apropriada, ainda mais considerando que vovô comprou apenas K balões para os testes.

					Por exemplo, suponha que N = 5 e K = 2. Nesse caso, a melhor solução seria testar primeiro em 3. Caso o balão estoure, vovô só teria mais um balão, então teria de testar 1 e 2 no pior caso, somando ao todo 3 testes. Caso o balão não estoure, vovô poderia testar 4 e depois 5 (ou 5 e depois 4), também somando 3 ao todo.

					Dados a capacidade máxima da bomba e o número de balões, indique o número mínimo de testes que devem ser feitos, no pior caso, para determinar o ponto em que um balão estoura.";A única linha da entrada contém dois inteiros, N e K, separados por espaço em branco (1 ≤ K ≤ N ≤ 109).;Seu programa deve imprimir uma única linha, contendo um inteiro que representa o número mínimo de testes que devem ser feitos no pior caso para determinar o ponto em que o balão estoura.;False;6 / 10;44;18;40.91%
2384;Tradutor Alienígena;Ad-Hoc;5;"É de conhecimento público e notório que já fomos visitados por alienígenas diversas vezes. A grande dificuldade que temos, porém, é a comunicação com eles, por causa de grandes diferenças entre as línguas. Além disso, assim como nós, eles também têm várias línguas diferentes.

					Com o intuito de auxiliar no processo de tradução, foi criado um método de mapeamento dos símbolos do alfabeto de cada língua alienígena, atribuindo um número inteiro para cada símbolo. Sendo assim, para um alfabeto alienígena com N elementos, atribui-se números de 1 a N a cada um.

					O problema é que o encarregado de transcrever os textos alienígenas para números não foi muito cuidadoso e usou o mesmo espaçamento entre dígitos e números. Assim, por exemplo, digamos que para um alfabeto com 32 símbolos, uma sequência que deveria ser “31 20 4 19” virou “3120419”. Como se pode notar, há diferentes maneiras válidas de interpretar essa sequência além da original, como por exemplo “3 1 20 4 19” e “31 20 4 19”. Repare que a transcrição nunca usa zeros à esquerda de um número e, portanto, a sequência “3 12 04 19” é inválida, assim como “31 20 41 9” por conter um número (49) que não corresponde a um símbolo.

					Dados a quantidade de símbolos do alfabeto e uma sequência transcrita, determine quantas sequências válidas podem ser formadas.";A entrada é composta por duas linhas. A primeira contém um número inteiro N (1 < N < 10100) que indica a quantidade de símbolos do alfabeto. A segunda linha contém uma cadeia de dígitos de tamanho mínimo 1 e tamanho máximo 100.000 que corresponde a sequência transcrita.;Seu programa deve imprimir uma linha com o resto da divisão da quantidade de sequências válidas por 1.000.000.007.;False;5 / 10;96;51;53.12%
2385;Multiplicação de Matrizes;Ad-Hoc;6;"O conglomerado indiano Tutu é um conjunto de empresas que atua nos mais diversos ramos da indústria, produzindo desde sapatos até aviões e foguetes. Por ser tão diversificada, precisa de grandes e rápidos sistemas para cálculos de contabilidade.

					Um dos módulos mais importantes desse sistema é o de fornecimento de produtos, onde fica a base de dados de produtos e fornecedores. Um mesmo produto pode ser fornecido por vários fornecedores diferentes.

					O sistema possui duas grandes matrizes: a matriz A, onde cada linha representa um produto e cada coluna representa um fornecedor. O valor da matriz na linha m e coluna n representa o preço do produto m se for comprado do fornecedor n.

					A outra grande matriz é a B, onde cada linha representa um dia do mês e cada coluna é um produto. O valor da matriz na linha m e coluna n representa a quantidade do produto n a ser adquirido no dia m. Tal empresa tem uma política de fidelidade com seus fornecedores, e uma das práticas efetuadas pela empresa é, em um determinado dia, comprar todos os produtos necessários de um único fornecedor. Isto é, em um dia todos os produtos adquiridos serão comprados do fornecedor x, no outro dia do fornecedor y, e assim por diante.

					Para auxiliar a escolha de qual fornecedor será o escolhido no dia, foi gerada outra matriz C, que é o resultado da multiplicação das matrizes A × B. Essa matriz diz o quanto será gasto pela empresa se adquirir todos os produtos de um determinado fornecedor em um determinado dia.

					As matrizes A e B são quadradas (o número de linhas é igual ao número de colunas) e têm valores definidos pelas fórmulas:

					Aij = (P × i + Q × j) (mod X)
					Bij = (R × i + S × j) (mod Y)

					onde i é o índice da linha da matriz e j é o índice da coluna da matriz (todos os índices vão de 1 até N). Os inteiros P, Q, R, S, X e Y são parâmetros constantes, que definem as duas matrizes A e B.

					Escreva um programa que, dados os parâmetros das matrizes A e B, e a posição de uma das entradas as matriz C, calcula o valor daquela entrada.";"A primeira linha da entrada contém um inteiro N, indicando as dimensões das matrizes A, B e C (2 ≤ N ≤ 105). A linha seguinte contém seis inteiros P, Q, R, S, X e Y, indicando os parâmetros das matrizes A e B (2 ≤ X, Y ≤ 104; 0 ≤ P, Q < X; 0 ≤ R, S < Y).

					Finalmente, a última linha da entrada contém dois inteiros I e J, indicando a linha e a coluna da matriz C a serem consultados (1 ≤ I, J ≤ N).";Seu programa deve imprimir uma única linha contendo o valor da matriz C na linha e coluna especificadas.;False;6 / 10;386;92;23.83%
2386;Telescópio;Ad-Hoc;1;"Telescópios são instrumentos que auxiliam a observação do céu, melhorando e aumentando o aspecto das estrelas, planetas e outros objetos brilhantes. Existem diversos tipos de telescópios, sendo os tipos mais comuns os de lentes objetivas (refratores) e os de espelhos (refletores).

					A maneira como os telescópios melhoram a nossa percepção dos astros no céu é aumentando a quantidade de luz captada que chega aos nossos olhos. Toda luz que entra pelos nossos olhos entra por um orifício chamado pupila. Tal controla a quantidade de luz que entra nos olhos, aumentando o diâmetro quando o ambiente está escuro (e portanto precisamos obter mais luz para identificar os objetos) e diminuindo quando o ambiente está claro. Num ambiente muito escuro, a pupila pode atingir um diâmetro de 8 mm.

					Cada objeto celeste (estrela, planeta, nebulosa, etc) emite uma quantidade de luz (fótons) que é homogeneamente distribuída quando chega na Terra. Por exemplo, a estrela A emite luz que pode ser captada a um fluxo de 40.000 fótons por segundo por milímetro quadrado. Isso é, a cada segundo, é possível captar 40.000 fótons provenientes da estrela A numa área de 1 mm 2. Ou seja, uma pupila de 10 mm 2 de área captaria 400.000 fótons provenientes da estrela A por segundo.

					Para que nosso cérebro consiga interpretar que existe um objeto ali, porém, ele precisa receber 40.000.000 fótons por segundo. Assim, podemos utilizar um telescópio com lente (ou espelho) de 100 mm 2 de área, que vai captar a quantidade necessária de fótons provenientes da estrela A e encaminhá-los até nossa pupila, fazendo assim com que nosso cérebro perceba a presença da estrela ali.

					Dada uma lista com estrelas no céu, o fluxo de fótons que cada uma delas emite, e área de abertura de um telescópio, dizer quantas estrelas serão perceptíveis usando tal telescópio.";A primeira linha da entrada terá um inteiro A (1 ≤ A ≤ 10.000) representando a área de abertura do telescópio (em milímetros quadrados) a ser considerado. A segunda linha possui um inteiro N (1 ≤ N ≤ 10.000) representando o número de estrelas a serem estudadas. As N linhas seguintes terão, cada uma, um inteiro F (1 ≤ F ≤ 20.000) representando o fluxo de fótons que cada uma das N estrelas emitem (em fótons por segundo por milímetro quadrado).;Imprima um inteiro representando a quantidade de estrelas que serão percebidas ao se utilizar o telescópio em questão.;False;1 / 10;517;395;76.40%
2387;Dentista;Ad-Hoc;5;"Os dentistas são extremamente meticulosos em seu trabalho, tendo que agir com muita precisão em todas as suas atividades. Pedro é um dentista meticuloso como todos os outros. Infelizmente sua secretária não é muito organizada e, com o intuito de ajudar sempre os pacientes, aceita que eles marquem consultas no horário que quiserem, sem se preocupar com os demais horários marcados, ocasionando vários conflitos de horários que muito incomodaram Pedro e os pacientes. Por exemplo, se uma consulta começar às 9 horas e durar 2 horas, nenhuma outra consulta deveria ser marcada para iniciar às 10 horas.

					Ao perceber que sua agenda tinha conflito de horários, Pedro pediu sua ajuda para descobrir a maior quantidade de consultas que podem ser atendidas sem sobreposição.

					Você deve escrever um programa que, dados os horários de início e término das consultas agendadas pela secretária, responda a quantidade máxima de consultas que podem ser atendidas sem sobreposição.";A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 10.000) que indica quantas consultas a secretária marcou. Cada uma das N linhas seguintes contém um par de inteiros X e Y separados por um espaço em branco (0 ≤ X < Y ≤ 1.000.000) que representam, respectivamente, o horário de início e de término da consulta. Considere que se uma consulta inicia no exato instante em que outra termina não há sobreposição. Os horários de início são fornecidos em ordem, podendo haver mais de uma consulta que inicie no mesmo horário.;Seu programa deve imprimir uma única linha, contendo um inteiro que representa a quantidade máxima de consultas que podem ser atendidas sem que haja qualquer sobreposição.;False;5 / 10;552;236;42.75%
2388;Tacógrafo;Ad-Hoc;1;"Tacógrafos são dispositivos instalados em determinados tipos de veículos, que registram a velocidade, tempo e distância percorrida por tal veículo. É utilizada principalmente em veículos de transporte coletivo e de transporte de cargas, assim ajudando a evitar abusos de velocidade por parte dos motoristas.

					A empresa SBC (Sociedade Brasileira dos Caminhoneiros) decidiu encomendar uma versão um pouco mais básica (e barata) para seus associados não precisarem gastar tanto na instalação desses aparelhos. Essas versões modificadas registram apenas os intervalos de tempo e as velocidades médias do caminhão naqueles intervalos.

					Apesar das restrições dos aparelhos novos, a SBC quer poder saber qual foi a distância percorrida pelos caminhões. Você deverá escrever um programa que recebe uma série de intervalos de tempo com suas respectivas velocidades médias e calcula qual foi a distância total percorrida pelo caminhão de acordo com o tacógrafo.";A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 1000) representando a quantidade de intervalos de tempo registrados no tacógrafo. As N linhas seguintes descrevem os intervalos de tempo. Cada uma dessas linhas possui dois inteiros T e V (1 ≤ T ≤ 100, 0 ≤ V ≤ 120), que representam, respectivamente o tempo decorrido (em horas) e a velocidade média (em quilômetros por hora) no intervalo de tempo.;Seu programa deve imprimir uma única linha, contendo um único número inteiro representando a distância total percorrida, em quilômetros.;False;1 / 10;509;421;82.71%
2389;Floresta;Ad-Hoc;6;"O desmatamento é um dos maiores problemas enfrentados pelo Brasil hoje; estima-se que mais de 10 mil km² de vegetação sejam desflorestados todo ano. Além de destruir os habitats de várias espécies em risco de extinção, o desmatamento promove a emissão de gás carbônico, principal responsável pelo efeito estufa e pelo aquecimento global.

					A Fundação de Conservação dos Carvalhos (FCC) tenta combater esta tendência, promovendo o reflorestamento das regiões desmatadas. Para isso, eles pretendem plantar carvalhos formando um quadriculado (um carvalho em cada vértice); no centro de cada quadrado formado por eles, a FCC também plantará um eucalipto. Para preservar a biodiversidade da área plantada, pelo menos uma árvore de cada espécie deve ser plantada durante o reflorestamento.

					Por exemplo, se a FCC quiser plantar 23 árvores, ela poderá fazê-lo de duas maneiras: ou formando um retângulo 3 × 5 com os carvalhos, como na figura (a), ou formando um retângulo 2 × 8, como na figura (b). Considere que, para os propósitos deste problema, um retângulo X×Y é equivalente a um retângulo Y×X.

					

					Sua tarefa é escrever um programa que, dado o número total de árvores que devem ser plantadas, de quantas maneiras diferentes elas podem ser dispostas.";A única linha da entrada contém um único inteiro N, que indica o número total de árvores que devem ser plantadas (1 ≤ N ≤ 109).;Seu programa deve imprimir uma única linha, contendo um único inteiro, indicando o número de arranjos distintos que podem ser feitos para o reflorestamento.;True;6 / 10;273;84;30.77%
2390;Escada Rolante;Ad-Hoc;3;"O Shopping Boas Compras - SBC, através de sua política ambiental, está preocupado com o consumo de energia e, resolveu trocar todas as escadas rolantes por modelos mais modernos, que se desligam caso ninguém esteja utilizando, poupando energia.

					A nova escada rolante possui um sensor no início. Toda vez que ela está vazia e alguém passa pelo sensor, a escada começa a funcionar, parando de funcionar novamente após 10 segundos se ninguém mais passar pelo sensor. Estes 10 segundos representam o tempo suficiente para levar alguém de um nível ao outro.

					Preocupados em saber exatamente quanto de energia o shopping está economizando, o gerente pediu sua ajuda. Como eles sabem qual era o consumo da escada rolante antiga, eles te pediram para calcular o tempo que a nova escada ficou funcionando.

					Dados os instantes, em segundos, em que passaram pessoas pela escada rolante, você deve calcular quantos segundos ela ficou ligada.";A primeira linha da entrada contém um inteiro N que indica o número de pessoas que o sensor detectou (1 ≤ N ≤ 1.000). As N linhas seguintes representam o instante em que a n-ésima pessoa passou pelo sensor e contém um inteiro T (0 ≤ T ≤ 10.000). Os tempos estão em ordem crescente, sem repetições.;Seu programa deve imprimir uma única linha, contendo o tempo que a escada rolante ficou ligada.;False;3 / 10;559;324;57.96%
2391;Progressões Aritméticas;Ad-Hoc;3;"Bob é um aluno do ensino médio que gosta muito de matemática. Na última aula ele aprendeu o que são Progressões Aritméticas (PAs) e ficou fascinado por elas. Pelo que Bob entendeu, Progressões Aritméticas são sequências de números nas quais a diferença entre dois elementos consecutivos é sempre igual a uma constante r, chamada de razão da PA.

Um exemplo de Progressão Aritmética de razão 2 é −1, 1, 3, 5. Além disso, toda sequência com um ou dois elementos é sempre uma Progressão Aritmética. Por outro lado, 5, 6, 8, 9, 10 não é uma PA porque a diferença entre elementos consecutivos não é constante: a diferença entre os dois primeiros elementos é 6−5 = 1, enquanto a diferença entre o terceiro e o segundo elementos é 8−6 = 2.

Bob percebeu que qualquer sequência, mesmo que a mesma não seja uma Progressão Aritmética, pode ser quebrada em sequências menores que são PAs. Por exemplo, vimos que a sequência 5, 6, 8, 9, 10 não é uma PA, mas podemos quebrar ela entre o 6 e o 8 para obtermos as sequências 5, 6 e 8, 9, 10, que são PAs. Note que não existe como quebrar a sequência em menos partes se quisermos ter apenas PAs no fim do procedimento.

Bob é fascinado por programação mas ainda não sabe programar muito bem, e por isso pediu sua ajuda: ele não está conseguindo descobrir como quebrar sequências muito grandes de um jeito eficiente; por isso, pediu que você escrevesse um programa para, dada uma sequência qualquer, imprimir o número mínimo de partes em que precisamos quebrar a sequência para termos apenas Progressões Aritméticas no término do processo. Caso a sequência original já seja uma PA, podemos terminar o processo com uma única parte, e portanto a resposta para esse caso é 1.

É fácil verificar que a sequência −2, 0, 2, 3, 3, 4, 6 (do segundo caso de teste abaixo) não é uma PA, pois 2−0 ≠ 3−2. Verificando manualmente, você pode constatar que não é possível particionar a sequência em duas de tal forma que ambas as partes sejam PAs. Entretanto, existe uma maneira de particionar a sequência em 3 PAs: [−2, 0, 2] [3, 3] [4, 6]. Portanto, temos que a resposta para este exemplo é 3.

No terceiro caso de teste abaixo, a sequência −2, 0, 3, 6 pode ser particionada de várias formas. As únicas maneiras que resultam em PAs são as seguintes:


	Com 4 partes temos 1 possibilidade:
	[−2] [0] [3] [6]
	
	Com 3 partes temos 3 possibilidades:
	[−2, 0] [3] [6]

	[−2] [0, 3] [6]

	[−2] [0] [3, 6]
	
	Com 2 partes temos 2 possibilidades:
	[−2, 0] [3, 6]

	[−2] [0, 3, 6]";A primeira linha da entrada é composta por um inteiro N(1 ≤ N ≤ 105), o número de elementos da sequência. Na segunda linha existem N inteiros ai (-105 ≤ ai ≤ 105​), os elementos da sequência.;A saída deve conter uma única linha, indicando o número mínimo de partes em que Bob precisa quebrar a sequência original para que ele termine apenas com PAs.;False;3 / 10;217;111;51.15%
2392;Pulo do Sapo;Ad-Hoc;3;"Sebastião Bueno Coelho, apelidado de SBC pelos familiares e amigos, passou as férias de janeiro de 2011 no sítio de seus avós. Durante sua estadia, uma das atividades prediletas do SBC era nadar no rio que havia no fundo da casa onde morava.

Uma das características do rio que mais impressionava SBC era um belo caminho, feito inteiramente com pedras brancas. Há muito tempo, o avô de SBC notara que os habitantes do sítio atravessavam o rio com grande frequência e, por isso, construiu um caminho no rio com pedras posicionadas em linha reta; ao fazê-lo, tomou muito cuidado para que o espaçamento das pedras fosse de exatamente um metro.

Hoje em dia, a única utilidade do caminho é servir de diversão para os sapos que vivem no rio, que pulam de uma pedra a outra agitadamente. Um certo dia, enquanto descansava e nadava nas águas, SBC assistiu atentamente às acrobacias dos bichos e notou que cada sapo sempre pulava (zero, uma ou mais vezes) uma quantidade fixa de metros.

SBC sabe que você participa da OBI todos os anos e, chegando na escola, resolveu desafiar-te com o seguinte problema: Dado o número de pedras no rio, o número de sapos, a pedra inicial sobre a qual cada sapo está (cada pedra é identificada por sua posição na sequência de pedras) e a distância que cada sapo pula, determinar as posições onde pode existir um sapo depois que SBC chega no rio.

No primeiro caso de teste abaixo, SBC indicou a existência de 5 pedras no rio e 2 sapos. Os sapos estavam inicialmente nas pedras 3 e 4. SBC também lhe disse que o primeiro sapo da entrada sempre pula 2 metros, e o segundo sempre pula 4 metros. A figura a seguir ilustra as possíveis pedras que podem ser ocupadas pelos sapos quando eles começam a pular.



No segundo caso de teste abaixo, SBC indicou a existência de 8 pedras no rio e 3 sapos. Os sapos estavam inicialmente nas pedras 3, 2 e 6. SBC também lhe disse que o primeiro sapo da entrada sempre pula 3 metros, o segundo e terceiro sempre pulam 2 metros. Dessa forma, o primeiro sapo pode estar nas pedras 3 ou 6; o segundo sapo pode estar nas pedras 2, 4, 6 ou 8; e o terceiro sapo pode estar nas pedras 6, 4, 2 e 8. A figura a seguir ilustra as possíveis pedras que podem ser ocupadas pelos sapos quando eles começam a pular.";A primeira linha da entrada contém dois inteiros N e M (1 ≤ N, M ≤ 100​) representando o número de pedras no rio e o número de sapos, respectivamente. Cada uma das M linhas seguintes possui dois inteiros P e D (1 ≤ P, D ≤ N) representando a posição inicial de um sapo e a distância fixa de pulo, respectivamente.;A saída contém N linhas. A i-ésima linha indica a possibilidade ou não de ter um sapo na i-ésima pedra. Para as pedras que podem ter um sapo você deve imprimir 1, e para as pedras que com certeza não podem ter nenhum sapo você deve imprimir 0.;True;3 / 10;1000;431;43.10%
2393;O Mar não está para Peixe;Ad-Hoc;2;"Em um arquipélago no meio do Oceano Pacífico a economia é regida pela pesca, pois o peixe é o principal alimento disponível. Ultimamente, a população desse arquipélago tem aumentado drasticamente, o que levou a um grande aumento da pesca, e, consequentemente, a problemas.

Neste arquipélago, cada pescador vai diariamente ao alto mar com a intenção de conseguir trazer o maior número de peixes para o seu vilarejo. Com a expansão da pesca, os pescadores estão começando a jogar suas redes de pesca por cima das de outros pescadores. Com isso, os pescadores perdem, pois apenas o primeiro pescador pega os peixes da intersecção entre as redes.

A Associação dos Pescadores da ilha decidiu fazer um levantamento para descobrir quanto do mar está de fato sendo aproveitado, ou seja, qual a área do mar que está coberta por pelo menos uma rede de pesca.

Como há muitas intersecções entre as redes de pesca, é muito difícil para a associação calcular a área total da região coberta pelas redes. Por este motivo, eles pediram para que você escrevesse um programa para resolver este problema.

Como é muito difícil navegar pelo mar, os pescadores sempre jogam as redes de forma que as regiões cobertas por cada rede são sempre retângulos com lados paralelos aos eixos, se imaginarmos o mar como um plano cartesiano.";A primeira linha da entrada possui um inteiro N (1 ≤ N ≤ 100)indicando o número de redes que foram lançadas. As próximas N linhas descrevem as regiões cobertas pelas redes: cada uma contém quatro inteiros Xi e Xf , Yi e Yf  (1 ≤ Xi ≤ Xf ≤100) e (1 ≤ Yi ≤ Yf ≤ 100). A região coberta pela rede em questão contém todo ponto (X,Y) tal que Xi ≤ X ≤ Xf e Yi ≤ Y ≤ Yf.;A saída deve conter apenas uma linha contendo a área da região do mar realmente aproveitada pelos pescadores, ou seja, a área total da região do mar coberta por pelo menos uma rede de pesca.;False;2 / 10;235;165;70.21%
2394;Corrida 1;Ad-Hoc;2;"A escola de Joãozinho tradicionalmente organiza uma corrida ao redor do prédio. Como todos os alunos são convidados a participar e eles estudam em períodos diferentes, é difícil que todos corram ao mesmo tempo.

Para contornar esse problema, os professores cronometram o tempo que cada aluno demora para dar cada volta ao redor da escola, e depois comparam os tempos para descobrir a classificação final.

Sua tarefa é, sabendo o número de competidores, o número de voltas de que consistiu a corrida e os tempos de cada aluno competidor, descobrir quem foi o aluno vencedor, para que ele possa receber uma medalha comemorativa.

No segundo caso de teste abaixo, existem três competidores numa corrida de três voltas. Os tempos de cada competidor em cada volta foram como na tabela a seguir.



Sendo assim, o vencedor foi o competidor 3 (com um tempo total de 3).";"A primeira linha da entrada contém dois inteiros N (2 ≤ N ≤ 100) e M (1 ≤ M ≤ 100) representando o número de competidores e o número de voltas da corrida, respectivamente.

Cada uma das N linhas seguintes representa um competidor: a primeira linha representa o primeiro competidor, a segunda linha representa o segundo competidor, e assim por diante. Cada linha contém M inteiros representando os tempos em cada volta da corrida: o primeiro inteiro é o tempo da primeira volta, o segundo inteiro é o tempo da segunda volta, e assim por diante (1 ≤ qualquer número da entrada que represente o tempo de uma volta ≤ 106).

Garante-se que não houve dois competidores que gastaram o mesmo tempo para completar a corrida inteira.";A saída consiste de um único inteiro, que corresponde ao número do competidor que ganhou a corrida.;True;2 / 10;284;199;70.07%
2395;Transporte de Contêineres;Ad-Hoc;1;"A Betalândia é um país que apenas recentemente se abriu para o comércio exterior e está preparando agora sua primeira grande exportação. A Sociedade Betalandesa de Comércio (SBC) ficou encarregada de conduzir a exportação e determinou que, seguindo os padrões internacionais, a carga será transportada em contêineres, que são, por sua vez, colocados em grandes navios para o transporte internacional.

Todos os contêineres betalandeses são idênticos, medindo A metros de largura, B metros de comprimento e C metros de altura. Um navio porta-contêineres pode ser visto como um retângulo horizontal de X metros de largura e Y metros de comprimento, sobre o qual os contêineres são colocados. Nenhuma parte de contêiner pode ficar para fora do navio. Além disso, para possibilitar a travessia de pontes, a altura máxima da carga no navio não pode ultrapassar Z metros.



Devido a limitações do guindaste utilizado, os contêineres só podem ser carregados alinhados com o navio. Ou seja, os contêineres só podem ser colocados sobre o navio de tal forma que a largura e o comprimento do contêiner estejam paralelos à largura e ao comprimento do navio, respectivamente.

A SBC está com problemas para saber qual a quantidade máxima de contêineres que podem ser colocados no navio e pede sua ajuda. Sua tarefa, neste problema, é determinar quantos contêineres podem ser carregados no navio respeitando as restrições acima.";A entrada consiste de duas linhas. A primeira linha contém três inteiros A, B e C que representam as dimensões dos contêineres, enquanto a segunda linha contém outros três inteiros X, Y e Z (1 ≤ A, B, C, X, Y, Z ≤ 106) que representam as dimensões do navio.;Seu programa deve imprimir apenas uma linha contendo um inteiro que indica a quantidade máxima de contêineres que o navio consegue transportar.;True;1 / 10;1112;721;64.84%
2396;Corrida;Ad-Hoc;1;"Todo ano, os habitantes da Mlogônia, apesar das crises internas, reúnem-se em torno de um esporte que é a paixão nacional: as corridas de carros. A Grande Corrida anual é um enorme evento organizado pela Associação de Corridas da Mlogônia (ACM), sendo amplamente televisionado e reportado em jornais e revistas de todo o país. Os resultados da corrida são tema principal das rodas de conversa por semanas.

Por bastante tempo, os resultados da Grande Corrida eram compilados manualmente. Observadores especializados iam à pista medir o tempo de cada um dos N carros, numerados de 1 a N, em cada uma das M voltas, anotando então os resultados em tabelas para posterior análise por parte das equipes e dos jornalistas. Muitos erros eram introduzidos nesse processo, e a organização decidiu informatizar todo o sistema.

A ACM percebeu que o esforço necessário para a construção do sistema seria grande, e optou por contar com a ajuda de uma equipe de programadores. Percival foi contratado para escrever a parte do software que determina quais foram os carros vencedores, mas está com dificuldades e pede sua ajuda. A sua tarefa, neste problema, é determinar os três carros melhor colocados, fornecidos os tempos que cada carro levou para completar cada volta da corrida.

No segundo caso de teste abaixo, existem 5 carros numa corrida de duas voltas. Os tempos de cada carro em cada volta foram como na tabela a seguir.



Sendo assim, o vencedor foi o carro 3 (com um tempo total de 2), seguido pelo carro 5 (com um tempo total de 4) e pelo carro 2 (com um tempo total de 7).";"A primeira linha da entrada contém dois inteiros N (3 ≤ N ≤ 100) e M (1 ≤ M ≤ 100​) representando o número de carros e o número de voltas da corrida, respectivamente.

Cada uma das N linhas seguintes representa um carro: a primeira linha representa o primeiro carro, a segunda linha representa o segundo carro, e assim por diante. Cada linha contém M inteiros representando os tempos em cada volta da corrida: o primeiro inteiro é o tempo da primeira volta, o segundo inteiro é o tempo da segunda volta, e assim por diante (1 ≤ qualquer número da entrada que represente o tempo de uma volta ≤ 106).

Garante-se que não houve dois carros que gastaram o mesmo tempo para completar a corrida inteira.";A saída consiste de três linhas, contendo um único inteiro cada. A primeira linha contém o número do carro que ganhou a corrida, a segunda contém o número do segundo colocado e a terceira contém o número do terceiro colocado.;True;1 / 10;756;515;68.12%
2397;Triângulos;Ad-Hoc;4;"Caio estava brincando de construir triângulos com palitos de diferentes tamanhos. Ele fazia isso juntando as pontas de três palitos sobre uma mesa. Ele notou que podia agrupar os triângulos formados em três grupos:


	Triângulos acutângulos, que são aqueles em que todos os ângulos internos medem menos de 90°;
	Triângulos retângulos, que são aqueles que possuem um ângulo interno que mede exatamente 90°;
	Triângulos obtusângulos, que são aqueles que possuem um ângulo interno que mede mais de 90°.


Ele também percebeu que nem sempre é possível formar um triângulo com três palitos.



Sua tarefa é, dados os comprimentos A, B e C de três palitos, dizer se é possível formar um triângulo com esses palitos e, em caso afirmativo, dizer a qual grupo o triângulo formado pertence.";A entrada consiste de uma única linha, contendo três inteiros A, B e C (1 ≤ A, B, C ≤ 104) separados por espaço.;"Imprima uma linha contendo apenas uma letra minúscula:


	'n' se não for possível formar um triângulo;
	'a' se o triângulo formado for acutângulo;
	'r' se o triângulo formado for retângulo;
	'o' se o triângulo formado for obtusângulo.";True;4 / 10;1789;717;40.08%
2398;Caça ao Tesouro;Ad-Hoc;2;"Capitão Tornado é um pirata muito cruel que faz qualquer coisa por dinheiro. Há alguns dias, o capitão soube da existência de um tesouro numa ilha deserta, e agora tenta determinar sua posição.

A ilha pode ser vista como um quadriculado N × N de terra cuja posição (0, 0) está a sudoeste, a posição (N−1, 0) está a sudeste, a posição (0, N−1) está a noroeste e a posição (N−1, N−1) está a nordeste. Em alguma posição desse quadriculado está o tesouro.

Uma curiosidade importante é a perna de pau que o capitão possui. Ela impede que o capitão se locomova em direções que não a horizontal ou a vertical: para ir da posição (1, 1) para a posição (3, 2), por exemplo, o capitão é obrigado a gastar três passos. É claro que o capitão sempre escolhe, dentro de suas limitações, um caminho com o menor número de passos possível. Chamamos esse modo de andar de passos de capitão. Um exemplo de caminho por passos de capitão entre (1, 1) e (3, 2) é ilustrado na figura a seguir.



Como em toda boa caça ao tesouro, o capitão não conhece a posição onde o tesouro se encontra: ele possui um mapa que corresponde à geografia da ilha. Em algumas posições desse mapa, existem pistas escritas. Cada pista consiste em um número D, que indica a menor distância em passos de capitão entre a posição em que a pista se encontra e a do tesouro.



Observe que, dependendo da disposição das pistas, a posição do tesouro pode estar determinada de maneira única ou não. Na figura acima e à esquerda, as duas pistas são suficientes para se saber, com certeza, onde está o tesouro; na figura à direita, as quatro pistas dadas ainda possibilitam que tanto a posição (0, 2) quanto a (2, 2) guardem o tesouro. Nesse último caso, não se pode determinar, com certeza, qual é a localização do tesouro.

Dadas as pistas que o capitão possui, sua tarefa é determinar se as pistas fornecem a localização exata do tesouro e, caso positivo, qual ela é.";"A primeira linha contém dois inteiros positivos N (2 ≤ N ≤ 100​) e K (1 ≤ K ≤ 100​), onde N é a dimensão do quadriculado e K é o número de pistas no mapa que o capitão possui.

Cada uma das próximas K linhas contêm três inteiros X, Y e D, informando que existe uma pista na posição (X, Y) contendo o número D. Essa pista indica que o tesouro encontra-se a D passos de capitão da posição da pista.

É garantido que, com essas pistas, existe ao menos uma localização possível para o tesouro. Além disso, o mapa não contém duas pistas na mesma posição.";"Se as pistas forem suficientes para determinar com certeza a localização do tesouro, seu programa deve imprimir uma única linha com dois inteiros, X e Y , indicando que o tesouro encontra-se na posição (X, Y).

Caso contrário, seu programa deve imprimir uma única linha com dois inteiros iguais a −1, como nos exemplos de saída a seguir.";True;2 / 10;113;79;69.91%
2399;Campo Minado;Ad-Hoc;3;"Leonardo Viana é um garoto fascinado por jogos de tabuleiro. Nas férias de janeiro, ele aprendeu um jogo chamado ""Campo minado"", que é jogado em um tabuleiro comN células dispostas na horizontal. O objetivo desse jogo é determinar, para cada célula do tabuleiro, o número de minas explosivas nos arredores da mesma (que são a própria célula e as células imediatamente vizinhas à direita e à esquerda, caso essas existam). Por exemplo, a figura abaixo ilustra uma possível configuração de um tabuleiro com 5 células:



A primeira célula não possui nenhuma mina explosiva, mas é vizinha de uma célula que possui uma mina explosiva. Nos arredores da segunda célula temos duas minas, e o mesmo acontece para a terceira e quarta células; a quinta célula só tem uma mina explosiva em seus arredores. A próxima figura ilustra a resposta para esse caso.



Leonardo sabe que você participa da OBI e resolveu lhe pedir para escrever um programa de computador que, dado um tabuleiro, imprima o número de minas na vizinhança de cada posição. Assim, ele poderá conferir as centenas de tabuleiros que resolveu durante as férias.";A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 50) indicando o número de células no tabuleiro. O tabuleiro é dado nas próximas N linhas. A i-ésima linha seguinte contém 0 se não existe mina na i-ésima célula do tabuleiro e 1 se existe uma mina na i-ésima célula do tabuleiro.;A saída é composta por N linhas. A i-ésima linha da saída contém o número de minas explosivas nos arredores da i-ésima célula do tabuleiro.;True;3 / 10;1675;736;43.94%
2400;Balé;Ad-Hoc;6;"Uma academia de balé irá organizar uma Oficina de Balé Intensivo (OBI) na Semana de Balé Contemporâneo (SBC). Nessa academia, existem N bailarinas que praticam regularmente. O dono da academia, por ser experiente, consegue medir o nível de habilidade de cada uma delas por um número inteiro; nessa medição, números maiores correspondem a dançarinas mais habilidosas, e os números obtidos são todos distintos. Além disso, ele possui uma lista das bailarinas em ordem cronológica de ingresso na academia: As bailarinas que aparecem primeiro na lista estão há mais tempo na academia, e as que estão no final ingressaram mais recentemente.

O dono da academia decidiu escolher duas das bailarinas para ajudá-lo na realização do evento: uma ajudará no trabalho braçal, enquanto a outra irá exemplificar os passos de balé. Por seu perfeccionismo, ele deseja que a bailarina que exemplificará os passos de dança seja, dentre as duas meninas do par, a mais habilidosa e a que frequenta a academia há mais tempo.

Ele sabe que a Oficina será um sucesso desde que os dois critérios mencionados acima sejam satisfeitos pela dupla de dançarinas escolhidas. Com isso, ele ficou curioso para saber quantas duplas de dançarinas podem ajudá-lo na Oficina. A quantidade de dançarinas, contudo, é relativamente grande e ele não possui nem tempo nem paciência para fazer tal cálculo. Como vocês são amigos, ele pediu a sua ajuda para contar quantas duplas são válidas. Você pode ajudá-lo?

Por exemplo, digamos que a academia possua 5 dançarinas com níveis de habilidade 1, 5, 2, 4 e 3, onde a primeira, que possui nível ""1"", está na academia há mais tempo e a última, que possui nível ""3"", está há menos. Temos, então, 4 possíveis duplas que poderemos usar nesta Oficina, que são (5, 2),(5, 4),(5, 3) e (4, 3). Note que a dupla (1, 3), por exemplo, não pode ser escolhida pelo dono da academia, pois a mais habilidosa dentre as duas é também a mais nova da dupla.";A primeira linha contém um número N (1 ≤ N ≤ 100 000), que representa a quantidade de dançarinas que estão registradas na academia. A segunda linha da entrada contém N inteiros, onde o primeiro inteiro é o nível da dançarina que está há mais tempo na academia, o segundo inteiro é o nível da próxima dançarina mais antiga na academia (mas mais nova que a dançarina anterior), e assim sucessivamente.;A saída consistirá num único número X, que representa o total de duplas de dançarinas válidas para essa Oficina, dadas as regras descritas anteriormente.;False;6 / 10;541;234;43.25%
2401;Calculadora;Ad-Hoc;7;"Solicitando Boas Contas (SBC) é uma organização de inspeção de calculadoras. Todos os fabricantes procuram ter o selo de qualidade da SBC, que faz com que os clientes comprem o produto sem preocupação com contas erradas.

Você está encarregado de testar máquinas que fazem apenas operações de multiplicação e divisão. Além disso, o termo a ser digitado em cada operação (que dividirá ou multiplicará o número atualmente exibido no visor) só pode conter um único dígito.

A calculadora exibe o número 1 quando ligada. Depois disso, o usuário pode digitar um número com um único dígito e escolher se esse número deve multiplicar ou dividir o número exibido anteriormente; o resultado da operação escolhida é então exibido na calculadora. Pode-se repetir esse processo indefinidamente.

Apesar de só podermos entrar com números inteiros de um dígito, o visor da calculadora permite exibir números com múltiplos dígitos e até mesmo números fracionários.

Dada uma sequência de operações que foram realizadas nessa calculadora logo depois de ligada, sua tarefa é conferir o resultado exibido.

No primeiro caso de teste abaixo, o usuário deseja calcular o resultado da seguinte expressão: 1 × 2 × 1 × 3. Note que a primeira ocorrência do número 1 vem do fato da calculadora mostrar inicialmente 1 ao invés de 0.

No segundo caso de teste abaixo, o usuário deseja calcular o resultado da seguinte expressão: ((1/2)/3) × 6.";A primeira e única linha da entrada contém um inteiro N (1 ≤ N ≤ 100 000). Cada uma das próximas N linhas contém um dígito e um caractere '*' ou '/', que representam uma operação realizada na calculadora.;Seu programa deve imprimir uma única linha contendo o resultado que deve ser exibido pela calculadora ao final das operações.;False;7 / 10;857;250;29.17%
2402;Selos;Ad-Hoc;6;"Euclides é um garoto que gosta muito de colecionar selos. No seu aniversário, seus pais o presentearam com N selos, todos em formato de quadrados com 1 cm de lado. Euclides gostaria de guardar todos os N selos que ganhou colando-os numa página de papel em branco. Ao decidir por guardá-los assim, no entanto, ele logo percebeu que a única forma que lhe agradava de posicionar os selos na página era a forma de um retângulo completamente coberto pelos mesmos, sem sobreposição.

Ele percebeu também que, independente do número de selos obtido, colocar todos os selos numa única linha ou todos os selos numa única coluna é uma configuração válida. Como essa maneira usa a página do caderno de um jeito muito ineficiente, Euclides gostaria de saber se existe algum modo de dispor os N selos num retângulo que tenha mais de uma linha e mais de uma coluna tal que todas as linhas e colunas sejam completamente ocupadas por selos (isto é, tal que não existam posições sem selos no interior do retângulo).

A figura abaixo exemplifica o primeiro caso de teste, duas maneiras de guardar os selos em forma de retângulo.";A entrada contém uma única linha com um único inteiro N (1 ≤ N ≤ 10 000 000 000.​), o número de selos que Euclides ganhou.;A saída deve conter uma linha com um único caracter, que deve ser 'S' se for possível organizar os selos em um retângulo com mais que uma linha e mais que uma coluna ou 'N' caso não seja possível.;True;6 / 10;1040;322;30.96%
2403;Escalonamento Ótimo;Ad-Hoc;5;"O SBC (System for Batch Computing) é um sistema operacional voltado para a execução sequencial de tarefas. O operador do sistema cria tarefas e o sistema operacional é responsável por agendar a execução destas tarefas.

Cada tarefa pode depender da conclusão de algumas tarefas para poder começar. Se uma tarefa A depende de uma tarefa B, a tarefa B deve terminar antes que a tarefa A inicie sua execução.

Além disto, cada tarefa possui uma prioridade. É sempre mais vantajoso para o sistema começar executando uma tarefa de mais alta prioridade, depois continuar executando uma tarefa de mais alta prioridade dentre as que sobraram e assim por diante.

Neste problema, será dado um inteiro N, que irá representar o número de tarefas no sistema. As tarefas serão numeradas de 0 até N−1. Tarefas com índice menor possuem prioridade maior, de forma que a tarefa 0 é a tarefa de mais alta prioridade, a tarefa 1 é a tarefa com a segunda maior prioridade e assim por diante, até a tarefa N−1, que é a tarefa com a menor prioridade. Além disso, serão dadas M relações de dependência entre as tarefas.

Seu objetivo será decidir se é possível executar as tarefas em alguma ordem. Caso seja possível, você deverá produzir uma ordem de execução ótima para as tarefas, isto é, desempate as ordens possíveis pela prioridade da primeira tarefa. Se o empate ainda persistir, desempate pela prioridade da segunda tarefa, e assim por diante.";A primeira linha da entrada contém inteiros N (0 ≤ N ≤ 50000) e M (0 ≤ M ≤ 200000). As próximas M linhas descrevem, cada uma, uma dependência entre as tarefas da entrada. Cada uma dessas linhas irá conter dois inteiros A e B (0 ≤ A, B < N) que indicam que a tarefa B depende da tarefa A, isto é, que a tarefa A deve terminar antes que a tarefa B inicie.;"Se não for possível ordenar as tarefas de forma que as dependências sejam satisfeitas, imprima uma única linha contendo o caracter ""*"". Caso contrário, imprima N linhas contendo cada uma um número inteiro. O inteiro na i-ésima linha deve ser o índice da i-ésima tarefa a ser executada na ordem ótima de execução das tarefas.";False;5 / 10;220;112;50.91%
2404;Reduzindo Detalhes em um Mapa;Grafos;3;"Leonardo Nascimento é um garoto de 13 anos apaixonado por cartografia. Durante as férias de janeiro de 2011, ele alternava seu tempo entre navegar na internet (pesquisando sobre mapas) e arrumar sua coleção de mapas. Navegando na internet, Leonardo descobriu um site especializado em mapas, o Google Maps. Depois de alguns dias usando o site, Leonardo percebeu que quando diminuía o zoom algumas ruas não eram mais exibidas no mapa, isto é, o zoom determinava também o nível de detalhe do mapa. A figura abaixo ilustra um dos testes feito por Leonardo.



Ele sabe que você participa da OBI e que você adora resolver os problemas que envolvem mapas. Então resolveu formular o seguinte problema: dado um mapa de cidades e rodovias que as ligam, selecione um subconjunto das rodovias tal que entre qualquer par de cidades exista uma rota ligando-as e a soma dos comprimentos das rodovias é mínimo. Na figura abaixo e à esquerda temos um exemplo com cinco cidades e seis rodovias ligando-as. A figura abaixo e à direita ilustra uma solução cuja soma dos comprimentos é 34.



Para facilitar um pouco sua vida, Leonardo determinou que você só precisa dizer a soma dos comprimentos das rodovias do subconjunto selecionado para um dado mapa.";A primeira linha da entrada contém dois números N (1 ≤ N ≤ 500) e M (1 ≤ M ≤ 124750) que representam o número de cidades e o número de rodovias respectivamente. Cada uma das próximas M linhas é composta por três inteiros U, V (1 ≤ U, V ≤ N e U ≠ V) e C (1 ≤ C ≤ 500) que indiciam que existe uma rodovia de comprimento C que liga as cidades U e V.;A saída consiste em apenas uma linha contendo a soma do comprimento das rodovias selecionadas.;True;3 / 10;755;466;61.72%
2405;Colorindo;Ad-Hoc;2;"A Sociedade Brasileira das Cores (SBC) é uma editora de livros de colorir. As crianças adoram os livros da SBC porque suas figuras, depois de pintadas, ficam muito coloridas e bonitas. Isso acontece porque a SBC se preocupa em não deixar grandes regiões contínuas em suas figuras, que devem ser pintadas com uma cor só.

Até agora, o processo de verificar se uma figura tinha uma região contínua grande era completamente visual, mas a SBC resolveu automatizar esse processo e você foi contratado para programar uma parte desse sistema.

Uma figura é representada por uma grade, de dimensão N por M. Cada quadrado dessa grade é representado por uma coordenada (i, j), com 1 ≤ i ≤ N e 1 ≤ j ≤ M. Por exemplo, a coordenada (1, 5) representa o quadrado na primeira linha e quinta coluna, enquanto que a coordenada (3, 7) representa o quadrado na terceira linha e sétima coluna. As linhas são contadas de baixo para cima e as colunas da esquerda para a direita.

Cada quadrado pode estar vazio ou cheio. Assumimos que uma criança só vai pintar sobre quadrados vazios e se ela pintar um quadrado de uma cor, ela irá pintar os oito vizinhos da mesma cor, desde que eles estejam vazios e que ela não saia da área da figura.

No segundo exemplo de caso de teste abaixo, temos uma figura de dimensões 5 × 5. A criança começa a pintar na posição (3, 3). Na figura abaixo ilustramos este caso. A posição que a criança inicia está marcada com a letra ""X"", e os quadrados que a criança consegue pintar estão destacandos em cinza claro. Note que ela consegue pintar o quadrado (4, 4), pois este quadrado é um dos quadrados que ela consegue pintar após ter pintado o quadrado (3, 3).



No terceiro exemplo de caso de teste abaixo, temos uma figura de dimensões 10 × 10. A criança começa a pintar na posição (5, 5). Na figura abaixo ilustramos este caso. A posição que a criança inicia está marcada com a letra ""X"", e os quadrados que a criança consegue pintar estão destacandos em cinza claro.



Dada a figura e a coordenada onde uma criança vai começar a pintar, sua tarefa é descobrir quantos quadrados ela irá pintar.";"A primeira linha da entrada contém 5 números inteiros, N, M, X, Y e K (1 ≤ N, M ≤ 200), (1 ≤ K ≤ 10 000). Os números inteiros N e M são respectivamente o número de linhas e colunas da grade, enquanto que (X, Y) é a coordenada onde a criança vai começar a pintar e K é o número de quadrados cheios na figura.

Seguem-se K linhas, cada uma com dois inteiros A e B (1 ≤ X, A ≤ N), (1 ≤ Y, B ≤ M) que são as coordenadas de um quadrado cheio.

Garantimos que o quadrado na posição (X, Y) está sempre vazio.";Seu programa deve imprimir uma linha contendo o número de quadrados pintados pela criança.;True;2 / 10;251;153;60.96%
2406;Expressões;Ad-Hoc;5;"Pedrinho e Zezinho estão precisando estudar resolução de expressões matemáticas para uma prova que irão fazer. Para isso, eles querem resolver muitos exercícios antes da prova. Como sabem programar, então decidiram fazer um gerador de expressões matemáticas.

O gerador de expressões que eles criaram funciona em duas fases. Na primeira fase é gerada uma cadeia de caracteres que contém apenas os caracteres '{', '[', '(', '}', ']' e ')'. Na segunda fase, o gerador adiciona os números e operadores na estrutura criada na primeira fase. Uma cadeia de caracteres é dita bem definida (ou válida) se atende as seguintes propriedades:


	Ela é uma cadeia de caracteres vazia (não contém nenhum caractere).
	Ela é formada por uma cadeia bem definida envolvida por parênteses, colchetes ou chaves. Portanto, se a cadeia S é bem definida, então as cadeias (S), [S] e {S} também são bem definidas.
	Ela é formada pela concatenação de duas cadeias bem definidas. Logo, se as cadeias X e Y são bem definidas, a cadeia XY é bem definida.


Depois que Pedrinho e Zezinho geraram algumas expressões matemáticas, eles perceberam que havia algum erro na primeira fase do gerador. Algumas cadeias não eram bem definidas. Eles querem começar a resolver as expressões o mais rápido possível, e sabendo que você é um ótimo programador (e participa da OBI) resolveram pedir que escreva um programa que dadas várias cadeias geradas na primeira fase, determine quais delas são bem definidas e quais não são.";A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T (1 ≤ T ≤ 20) indicando o número de instâncias. Em seguida temos T linhas, cada uma com uma cadeia A, (a cadeia de caracteres A tem entre 1 e 100000 caracteres), (a cadeia de caracteres A contém apenas caracteres '{', '[', '(', '}', ']' e ')' ).;Para cada instância imprima uma linha contendo a letra S se a cadeia é bem definida, ou a letra N caso contrário.;False;5 / 10;1070;422;39.44%
2407;Quadrado Mágico;Ad-Hoc;7;"Arnaldo e Bernardo são dois garotos que compartilham um peculiar gosto por curiosidades matemáticas. Nos últimos tempos, sua principal diversão tem sido investigar propriedades matemágicas de tabuleiros quadrados preenchidos com inteiros. Recentemente, durante uma aula de matemática, os dois desafiaram os outros alunos da classe a criar quadrados mágicos, que são quadrados preenchidos com números de 1 a N2, de tal forma que a soma dos N números em uma linha, coluna ou diagonal principal do quadrado tenham sempre o mesmo valor. A ordem de um quadrado mágico é o seu número de linhas, e o valor do quadrado mágico é o resultado da soma de uma linha. Um exemplo de quadrado mágico de ordem 3 e valor 15 é mostrado na figura abaixo:



Para surpresa de Arnaldo e Bernardo, os outros alunos criaram um grande número de quadrados, alguns enormes, e alegaram que todos eram quadrados mágicos. Arnaldo e Bernardo agora precisam de sua ajuda, para verificar se os quadrados criados são realmente mágicos.

Você deve escrever um programa que, dado um quadrado, verifique se ele é realmente mágico.";A primeira linha da entrada contém um único número inteiro N (3 ≤ N ≤ 1000.​), indicando a ordem do quadrado (seu número de linhas). As N linhas seguintes descrevem o quadrado. Cada uma dessas linhas contém N números inteiros separados por um espaço em branco (1 ≤ valor de cada célula ≤ 109).;Seu programa deve imprimir uma única linha. Caso o quadrado seja mágico, a linha deve conter o valor do quadrado (ou seja, a soma de uma de suas linhas). Caso contrário, a linha deve conter o número 0.;True;7 / 10;766;218;28.46%
2408;Vice-Campeão;Ad-Hoc;1;"A OBI (Organização de Bocha Internacional) é responsável por organizar a competição mundial de bocha. Infelizmente esse esporte não é muito popular, e numa tentativa de aumentar a sua popularidade, ficou decidido que seriam chamados, para a Grande Final Mundial, o campeão e o vice-campeão de cada sede nacional, ao invés de apenas o primeiro lugar.

Tumbólia é um país pequeno que já havia realizado a sua competição nacional quando a nova regra foi instituída, e o comitê local não armazenou quem foi o segundo classificado. Felizmente eles armazenaram a pontuação de todos competidores – que foram apenas três, devido ao tamanho diminuto do país. Sabe-se também que as pontuações de todos jogadores foram diferentes, de forma que não ocorreu empate entre nenhum deles.

Resta agora descobrir quem foi o vice-campeão e para isso o comitê precisa de ajuda.";A primeira e única linha da entrada consiste de três inteiros separados por espaços, A, B e C (1 ≤ A, B, C ≤ 100), as pontuações dos 3 competidores.;Imprima uma única linha na saída, contendo apenas um número inteiro, a pontuação do vice-campeão.;False;1 / 10;1930;1244;64.46%
2409;Colchão;Ad-Hoc;5;"João está comprando móveis novos para sua casa. Agora é a vez de comprar um colchão novo, de molas, para substituir o colchão velho. As portas de sua casa têm altura H e largura L e existe um colchão que está em promoção com dimensões A × B × C.

O colchão tem a forma de um paralelepípedo reto retângulo e João só consegue arrastá-lo através de uma porta com uma de suas faces paralelas ao chão, mas consegue virar e rotacionar o colchão antes de passar pela porta.

Entretanto, de nada adianta ele comprar o colchão se ele não passar através das portas de sua casa. Portanto ele quer saber se consegue passar o colchão pelas portas e para isso precisa de sua ajuda.";A primeira linha da entrada contém três números inteiros A, B e C (1 ≤ A, B, C ≤ 300), as três dimensões do colchão, em centímetros. A segunda linha contém dois inteiros H e L (1 ≤ H, L ≤ 250), respectivamente a altura e a largura das portas em centímetros.;Se programa deve escrever uma única linha, contendo apenas a letra ‘S’ se o colchão passa pelas portas e apenas a letra ‘N’ em caso contrário.;False;5 / 10;1309;483;36.90%
2410;Frequencia na Aula;Ad-Hoc;2;"Certa vez, numa aula, a professora passou um filme para os alunos assistirem. Durante este filme, ela passou uma lista de presença em sua sala para verificar a presença dos alunos, onde cada aluno deveria inserir apenas seu número de registro. Alguns alunos contudo, como possuem amigos que fogem da aula, decidiram ser camaradas e inseriram os números de registro de seus amigos fujões. O problema é que muitos alunos são amigos de alunos que fogem da aula e alguns números de registro acabaram sendo repetidamente inseridos na lista de presença. Além de tudo, alguns dos alunos que se esperava que não estivessem na aula de fato estavam!

A professora, ao notar que a lista de presença continha alguns números repetidos, ficou sem entender, mas decidiu dar um voto de confiança e dar presença a todos os alunos cujos números de registro estavam na lista. Como são muitos alunos na sala e muitos números com repetição, ela pediu a sua ajuda para determinar o total de alunos que receberam presença na aula.";A primeira linha da entrada contém um número inteiro N (1 ≤ N ≤ 105), que informa a quantidade de números de registro que apareceram na lista de presença. Cada uma das N linhas seguintes contém um número de registro Vi (0 ≤ Vi ≤ 106)que foi inserido na lista de presença.;Seu programa deve imprimir uma única linha, contendo apenas um número inteiro, o número de alunos que receberam presença.;False;2 / 10;1467;769;52.42%
2411;O Tabuleiro Esburacado;Ad-Hoc;2;"Um tabuleiro normal, 8 x 8, foi danificado, e 4 posições ficaram esburacadas. A Figura 1(a) mostra o tabuleiro. A posição inferior esquerda tem coordenadas (0, 0). Os 4 buracos estão marcados em preto, e têm coordenadas (1, 3), (2, 3), (2, 5) e (5, 4). Um cavalo de xadrez foi colocado na posição (4, 3), marcada como 0 no tabuleiro.

 

Os 8 movimentos de um cavalo estão numerados de 1 a 8 na Figura 1(b), a partir da posição marcada como 0. Por exemplo, se o cavalo estiver na posição inicial (4, 3), o movimento 7 leva o cavalo à posição (2, 4), sem cair no buraco (2, 3), porque o cavalo salta da posição (4, 3) para a posição (2, 4).

Seu problema é simular um passeio do cavalo, dados os movimentos através dos números de 1 a 8 e determinar quantos movimentos o cavalo faz até ou (i) terminar o passeio ou (ii) cair em um buraco. Por exemplo, na trajetória dada pelos 5 movimentos 1, 8, 5, 3, 4, o cavalo passa pelas posições (5, 5), (4, 7), (3, 5) e cai no buraco (5, 4), fazendo portanto apenas 4 movimentos.

Já no passeio dado pelos 3 movimentos 6, 8, 1, o cavalo passa pelas posições (2, 2), (1, 4) e (2, 6) e não cai em nenhum buraco: portanto, perfaz todos os 3 movimentos do passeio.";A primeira linha da entrada contém N (1 ≤ N ≤ 100), o número de movimentos do passeio. A segunda linha contém N inteiros M1, M2, . . . , MN (1 ≤ MI ≤ 8, para I = 1, 2, . . . , N) , separados por um espaço em branco, correspondentes aos N movimentos do cavalo no passeio. Um movimento pode levar o cavalo a cair em um buraco, mas nunca leva o cavalo a sair do tabuleiro.;Seu programa deve imprimir uma única linha, contendo um único número inteiro, o número de movimentos do cavalo até terminar o passeio ou o cavalo cair em um buraco.;True;2 / 10;350;190;54.29%
2412;Tarzan;Ad-Hoc;8;"Tarzan vive na floresta e é o responsável por manter a ordem na região onde vive. Para locomover-se entre as árvores ele só usa cipós pois esse é um meio de transporte muito mais rápido e seguro do que andar no chão da selva, além de, é claro, poder soltar seu grito característico enquanto viaja.

Os cipós das árvores têm todos o mesmo alcance. Dessa forma, é possível viajar de cipó de uma árvore para outra se a distância entre elas é no máximo D, onde D é o alcance dos cipós.

Recentemente uma forte chuva assolou a região e derrubou algumas árvores, restando na floresta apenas N árvores. Agora Tarzan quer saber se ele consegue viajar de cipó entre todas árvores remanescentes para poder continuar mantendo a ordem na região.

Para poder manter a ordem ele precisa ser capaz de, partindo de qualquer uma das árvores, poder chegar a todas as outras árvores remanescentes, possivelmente passando por outras árvores no caminho, sempre utilizando somente cipós.";A primeira linha da entrada contém dois inteiros, N (2 ≤ N ≤ 1000) e D (1 ≤ D ≤ 5000), indicando respectivamente o número de árvores remanescentes e o alcance dos cipós. Cada uma das N linhas seguintes contém dois inteiros Xi e Yi (0 ≤ Xi, Yi ≤ 5000) , as coordenadas da i-ésima árvore. Não existem duas árvores com as mesmas coordenadas.;Seu programa deve escrever uma única linha, contendo um único caractere: ‘S’ se Tarzan consegue viajar de cipó entre todas as árvores remanescentes, e ‘N’ caso contrário.;False;8 / 10;726;203;27.96%
2413;Busca na Internet;Ad-Hoc;1;"João fez uma pesquisa em seu site de busca predileto, e encontrou a resposta que estava procurando no terceiro link listado. Além disso, ele viu, pelo site, que t pessoas já haviam clicado neste link antes. João havia lido anteriormente, também na Internet, que o número de pessoas que clicam no segundo link listado é o dobro de número de pessoas que clicam no terceiro link listado. Nessa leitura, ele também descobriu que o número de pessoas que clicam no segundo link é a metade do número de pessoas que clicam no primeiro link.

João está intrigado para saber quantas pessoas clicaram no primeiro link da busca, e, como você é amigo dele, quer sua ajuda nesta tarefa.";Cada caso de teste possui apenas um número, t (1 ≤ t ≤ 1000), que representa o número de pessoas que clicaram no terceiro link da busca.;Para cada caso de teste imprima apenas uma linha, contendo apenas um inteiro, indicando quantas pessoas clicaram no primeiro link, nessa busca.;False;1 / 10;2824;2277;80.63%
2414;Desafio do Maior Número;Ad-Hoc;1;"Leonardo é um garoto muito criativo. Ele adora criar desafios para seus colegas da escola. Seu último desafio é o seguinte: diversos números são ditos em voz alta, quando o número 0 (zero) é dito então o desafio termina e seus colegas devem dizer imediatamente qual foi o maior número. Leonardo tem muita dificuldade de verificar se a resposta dada pelos colegas é correta ou não, pois a sequência de números costuma ser longa. Por este motivo, ele resolveu pedir sua ajuda.

Sua tarefa é escrever um programa que dada uma sequência de números inteiros positivos terminada por 0 (zero), imprime o maior número da sequência.";A entrada é dada em uma única linha contendo uma sequência de números inteiros positivos. O último número da linha é 0 (zero), (1 ≤ tamanho da sequência ≤ 100 , 1 ≤ número da sequência ≤ 1000).;Seu programa deve imprimir o maior número dentre os números da entrada.;False;1 / 10;1688;1335;79.09%
2415;Consecutivos;Ad-Hoc;2;"Num sorteio que distribui prêmios, um participante inicialmente sorteia um inteiro N e depois N valores. O número de pontos do participante é o tamanho da maior sequência de valores consecutivos iguais. Por exemplo, suponhamos que um participante sorteia N = 11 e, nesta ordem, os valores

30, 30, 30, 30, 40, 40, 40, 40, 40, 30, 30

Então, o participante ganha 5 pontos, correspondentes aos 5 valores 40 consecutivos. Note que o participante sorteou 6 valores iguais a 30, mas nem todos são consecutivos.

Sua tarefa é ajudar a organização do evento, escrevendo um programa que determina o número de pontos de um participante.";A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 104), o número de valores sorteados. A segunda linha contém N valores, V1, V2, . . . , VN , (−231 ≤ VI ≤ 231 − 1, para I = 1, 2, . . . , N) na ordem de sorteio, separados por um espaço em branco.;Seu programa deve imprimir apenas uma linha, contendo apenas um inteiro, indicando o número de pontos do participante.;False;2 / 10;1103;603;54.67%
2416;Corrida;Ad-Hoc;1;"Leonardo é um corredor profissional que participa de diversos campeonatos de atletismo pelo mundo. O tamanho das pistas ao redor do mundo não é padronizado. Por isso, Leonardo, que treina em um clube que possui uma pista circular, resolveu fixar seu treinamento em C metros, ao invés de um número fixo de voltas na pista. Após cada treinamento, Leonardo deve tomar meio litro de água antes de fazer qualquer esforço, e por isso quer deixar sua garrafa de água exatamente no ponto da pista onde ele termina o seu treinamento.

Sabendo o comprimento da pista de corrida que Leonardo pretende treinar, ele resolveu pedir sua ajuda para calcular o local do ponto de término do treinamento. O ponto de término é o local da pista onde ele termina o percurso de C metros considerando que ele parte do ponto de partida e se movimenta sempre na mesma direção. O ponto de término é dado pelo número de metros entre o ponto de partida e o local onde Leonardo termina seu treinamento, contados na direção do percurso. Leonardo quer deixar sua garrafa de água neste ponto.

Por exemplo, se a pista tem 12 metros e Leonardo fixou seu treinamento em 22 metros, o ponto de término é 10.

Sua tarefa é, dado o número C de metros que Leonardo pretende correr e o comprimento N em metros da pista circular, determinar o ponto de término de seu treinamento.";A entrada consiste em apenas uma linha contendo dois inteiros C (1 ≤ C ≤ 108) e N (1 ≤ N ≤ 100) que indicam, respectivamente, o número de metros que Leonardo pretende correr e o comprimento da pista.;Seu programa deve imprimir apenas uma linha, contendo apenas um inteiro, indicando o ponto de término do treinamento de Leonardo.;False;1 / 10;2267;1801;79.44%
2417;Campeonato;Ad-Hoc;1;"Dois times, Cormengo e Flaminthians, participam de um campeonato de futebol, juntamente com outros times. Cada vitória conta três pontos, cada empate um ponto. Fica melhor classificado no campeonato um time que tenha mais pontos. Em caso de empate no número de pontos, fica melhor classificado o time que tiver maior saldo de gols. Se o número de pontos e o saldo de gols forem os mesmos para os dois times então os dois times estão empatados no campeonato.

Dados os números de vitórias e empates, e os saldos de gols dos dois times, sua tarefa é determinar qual dos dois está melhor classificado, ou se eles estão empatados no campeonato.";A entrada é descrita em uma única linha, que contém seis inteiros, separados por um espaço em branco: Cv, Ce, Cs, Fv, Fe e Fs, (0 ≤ Cv, Ce, Fv, Fe ≤ 100), (-1000 ≤ Cs, Fs ≤ 1000) que são, respectivamente, o número de vitórias do Cormengo, o número de empates do Cormengo, o saldo de gols do Cormengo, o número de vitórias do Flaminthians, o número de empates do Flaminthians e o saldo de gols do Flaminthians.;Seu programa deve imprimir uma única linha. Se Cormengo é melhor classificado que Flaminthians, a linha deve conter apenas a letra 'C', se Flaminthians é melhor classificado que Cormengo, a linha deve conter apenas a letra 'F', e se os dois times estão empatados a linha deve conter apenas o caractere '='.;False;1 / 10;671;493;73.47%
2418;Carnaval;Ad-Hoc;2;"O Carnaval é um feriado celebrado normalmente em fevereiro; em muitas cidades brasileiras, a principal atração são os desfiles de escolas de samba. As várias agremiações desfilam ao som de seus sambas-enredos e são julgadas pela liga das escolas de samba para determinar a campeã do Carnaval.

Cada agremiação é avaliada em vários quesitos; em cada quesito, cada escola recebe cinco notas que variam de 5,0 a 10,0. A nota final da escola em um dado quesito é a soma das três notas centrais recebidas pela escola, excluindo a maior e a menor das cinco notas.

Como existem muitas escolas de samba e muitos quesitos, o presidente da liga pediu que você escrevesse um programa que, dadas as notas da agremiação, calcula a sua nota final num dado quesito.";A entrada contém uma única linha, contendo cinco números Ni (1 ≤ i ≤ 5) e (5.0 ≤ Ni ≤ 10.0), todos com uma casa decimal, indicando as notas recebidas pela agremiação em um dos quesitos.;Seu programa deve imprimir uma única linha, contendo um único número com exatamente uma casa decimal, a nota final da escola de samba no quesito considerado.;False;2 / 10;1245;706;56.71%
2419;Costa;Grafos;4;"A Nlogônia é um país tropical, com muitas belezas naturais internacionalmente famosas; dentre elas, encontram-se as belas praias que compõem o arquipélago do país, que todo verão recebem milhões de turistas estrangeiros.

O Ministério do Turismo da Nlogônia está preparando o país para a chegada dos turistas, mas para fazer seu planejamento, precisa saber a extensão da costa nlogônica. Para isso, ele gerou um mapa que divide o território nacional em vários quadrados, que podem ser ocupados por água ou por terra; considera-se que um quadrado é parte da costa nlogônica se ele é um quadrado ocupado por terra que tem um lado em comum com um quadrado ocupado por água.

Na figura abaixo, (a) mostra um trecho do mapa gerado e (b) mostra os quadrados do trecho dado que são costa.

 

Como a Nlogônia é um país muito grande, o ministro do turismo pediu que você escrevesse um programa que, dado o mapa da Nlogônia, determina a extensão da costa nlogônica.";"A primeira linha da entrada contém dois inteiros M e N (1 ≤ M, N ≤ 1000) indicando, respectivamente, o número de linhas e o número de colunas do mapa. Cada uma das M linhas seguintes contém N caracteres: um caractere ‘.’ indica que aquele quadrado do território é ocupada por água; um caractere ‘#’ indica que aquele quadrado do território é ocupada por terra.

Considere que todo o espaço fora da área do mapa é ocupado por água.";Seu programa deve imprimir uma única linha contendo um único inteiro, indicando quantos quadrados do território fazem parte da costa da Nlogônia.;True;4 / 10;1329;591;44.47%
2420;Guerra por Território;Ad-Hoc;1;"Tombólia do Oeste e Tombólia do Leste travaram uma guerra durante 50 anos. O motivo da guerra era o tamanho do território de cada país. Pelo bem da população dos dois países, os governos resolveram fazer um tratado para finalizar a guerra. O tratado consiste em fazer um divisão justa, e certamente contínua, do território. Eles resolveram pedir sua ajuda para calcular o ponto de divisão do território. Depois de tantos anos de guerra, os países não podem lhe pagar uma viagem para ver previamente o território que será dividido. Ao invés disso, eles prepararam uma lista a1,a2,…,aN de inteiros que indicam o tamanho de cada seção do território. A seção a1 é vizinha da seção a2 que por sua vez é vizinha da seção a3; e assim por diante. Os governos querem uma divisão em uma seção k de tal forma que a1 + a2 + … + ak = ak+1 + ak+2 + … + aN.

Sua tarefa é dada uma lista de inteiros positivos a1, a2,..., aN , determinar a seção k tal que soma dos comprimentos das seções a1 até ak é igual a soma dos comprimentos das seções ak+1 até aN.";A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 105) indicando o número de seções do território. A segunda linha da entrada contém N inteiros a1, a2,..., aN (1 ≤ ai ≤ 100, para i = 1, 2, . . . , N.)separados por um único espaço que indicam os comprimentos das seções.;Seu programa deve imprimir uma única linha contendo um inteiro que indica a seção do território onde acontecerá a divisão.(É garantido que sempre existe uma divisão que satisfaz as condições dos países).;False;1 / 10;1062;613;57.72%
2421;Álbum de Fotos;Ad-Hoc;6;"Clara está organizando as fotos da sua última viagem num álbum de fotos. Como ela tem muitas fotos, para economizar páginas do álbum ela quer colar duas fotos por página do álbum.

Como as fotos são retangulares, as fotos podem ser coladas giradas (mas sempre com lados paralelos aos da página do álbum, para preservar o equilíbrio estético do álbum), mas elas devem sempre ficar inteiramente contidas no interior da página, e não devem se sobrepor.

Em geral, das muitas formas de posicionar as fotos do álbum só algumas (ou nenhuma) satisfazem estas restrições, então pode ser difícil decidir se é possível colar as duas fotos em uma mesma página do álbum, e por isso Clara pediu a sua ajuda para escrever um programa que, dadas as dimensões da página e das fotos, decide se é possível colar as fotos na página.

Por exemplo, cada página pode ser 5×7, e duas fotos são 3×4. Nesse caso, é possível colar as duas fotos:";A primeira linha da entrada contém dois inteiros X e Y (1 ≤ X, Y ≤ 1000), indicando a largura e a altura da página do álbum. Cada uma das duas linhas seguintes contém dois inteiros L e H (1 ≤ L, H ≤ 1000​), indicando a largura e a altura das fotos.;Imprima uma única linha, contendo um único caractere: 'S', se é possível colar as duas fotos na página do álbum, e 'N', caso contrário.;True;6 / 10;862;217;25.17%
2422;Soma das Casas;Ad-Hoc;6;"Joãozinho mora em uma rua que tem N casas. Marquinhos é o melhor amigo dele, mas sempre gosta de pregar peças em Joãozinho. Desta vez, ele pegou os dois brinquedos prediletos de Joãozinho e os escondeu em duas casas distintas da rua. Em compensação, Marquinhos deu uma dica importante para Joãozinho:

A soma dos números das casas em que escondi teus brinquedos é igual a K. Além disso, escolhi as casas de tal forma que não existe outro par de casas cuja soma tenha esse mesmo valor.

Sabendo disto, encontre qual é o par de casas em que se encontram os brinquedos de Joãozinho. Para auxiliar seu amigo, Marquinhos entregou a Joãozinho uma lista com o número das casas já em ordem crescente (isto é, do menor para o maior número).";A primeira primeira linha da entrada contém um número inteiro N (2 ≤ N ≤ 105), que representa o número de casas que existem na rua. Cada uma das N linhas seguintes contém um número inteiro, representando o número de uma casa (Para cada casa Ci , 0 ≤ Ci ≤ 109 , i = 1, 2, . . . , N). Note que esses N números estão ordenados, do menor para o maior. A última linha da entrada contém um inteiro K, que é a soma dos números das duas casas onde os brinquedos estão escondidos , (os números das casas estão em ordem crescente, do menor para o maior número, e casas distintas têm números distintos).;Seu programa deve imprimir uma única linha, contendo dois inteiros, A e B, A < B, que representam os números das casas em que estão escondidos os brinquedos. Os dois números devem ser separados por um espaço em branco.;False;6 / 10;933;331;35.48%
2423;Receita de Bolo;Ad-Hoc;1;"João deseja fazer bolos para seus amigos, usando uma receita que indica que devem ser usadas 2 xícaras de farinha de trigo, 3 ovos e 5 colheres de sopa de leite. Em casa ele tem A xícaras de farinha de trigo, B ovos e C colheres de sopa de leite.

João não tem muita prática com a cozinha, e portanto ele só se arriscará a fazer medidas exatas da receita de bolo (por exemplo, se ele tiver material suficiente para fazer mais do que 2 e menos do que 3 bolos, ele fará somente 2 bolos). Sabendo disto, ajude João escrevendo um programa que determine qual a quantidade máxima de bolos que ele consegue fazer.";A entrada é dada em uma única linha, que contém três números inteiros A, B e C, (1 ≤ A, B e C ≤ 100) indicando respectivamente o número de xícaras de farinha de trigo, o número de ovos e o número de colheres de sopa de leite que João tem em casa.;Seu programa deve imprimir uma única linha, contendo um único inteiro, a quantidade máxima de bolos que João consegue fazer.;False;1 / 10;1091;616;56.46%
2424;Tira-teima;Ad-Hoc;2;"Uma quadra de tênis tem o formato de um retângulo, cujos lados medem 36 pés por 78 pés, que correspondem a um retângulo de 432 polegadas por 936 polegadas. No último Grand Slam da Austrália, Rafael Nadal perdeu para Novak Djoković, num dos jogos mais bonitos de tênis dos últimos tempos.

Muitas vezes, uma jogada é tão rápida, e a bola tão próxima da borda da quadra, que o juiz pode tomar uma decisão que pode ser contestada por um dos jogadores. Para isso, existe o tira-teima, que utiliza a imagem gravada do jogo para decidir se a bola estava dentro ou fora da metade da quadra correspondente a um dos jogadores.

Considere que a semi-quadra de Rafael Nadal corresponde a um retângulo em que dois vértices têm coordenadas (0,0) e (432, 468), onde todos os números são em polegadas.

Você deve escrever um programa para, dadas as coordenadas (X, Y ) do ponto de contato da bola com o solo, determinar se uma bola bateu no solo dentro ou fora da semi-quadra. Note que se a bola bate na linha divisória ela é considerada uma bola dentro.";A entrada é dada em uma única linha, que contém dois inteiros X e Y (−500 ≤ X, Y ≤ 500), que correspondem às coordenadas do ponto (X, Y ) de contato da bola com o solo, em polegadas.;Seu programa deve imprimir uma única linha, contendo a palavra dentro se a bola bateu dentro da semi-quadra, e a palavra fora caso contrário.;False;2 / 10;1685;1116;66.23%
2425;Banco;Ad-Hoc;5;"A legislação em vigor obriga os bancos a iniciarem o atendimento a um cliente em no máximo 20 minutos após a entrada do cliente na fila única da agência bancária. A fila é única, assim um caixa livre solicita ao primeiro cliente da fila que venha ao seu guichê para ser atendido. (Vamos ignorar aqui o problema dos clientes prioritários, idosos, gestantes, portadores de necessidades especiais, etc.) Estamos supondo também que nenhum caixa atende dois clientes ao mesmo tempo.

Seu programa receberá o número de caixas ativas na agência, o número de clientes e, para cada cliente, duas informações, a saber, o momento de entrada do cliente na fila, e a duração do atendimento daquele cliente.

Inicialmente todos os caixas estão vazios, já que a agência acabou de abrir.

Seu problema é determinar o número de clientes que esperarão mais de 20 minutos para ter seu atendimento iniciado.";"A primeira linha da entrada contém dois inteiros separados por um espaço em branco. O primeiro, C (1 ≤ C ≤ 10), é o número de caixas ativas na agência bancária. O segundo, N (1 ≤ N ≤ 1000), o número de clientes que procurarão atendimento na agência naquele dia.

As próximas N linhas terão cada uma informações sobre um cliente, consistindo de dois inteiros, T (0 ≤ T ≤ 300) e D (1 ≤ D ≤ 10), separados por um espaço em branco. O inteiro T fornece o momento em que o cliente entra na fila, em minutos, a partir do instante de abertura da agência. O inteiro D fornece, em minutos, o tempo necessário para atender o cliente.

 As linhas estão ordenadas por entrada dos clientes na fila.";A saída deverá conter apenas uma linha, contendo um único inteiro, o número de clientes cujo atendimento será iniciado mais do que 20 minutos após sua entrada na fila.;False;5 / 10;278;129;46.40%
2426;Bomba;Ad-Hoc;2;"Um terrorista internacional telefonou avisando que há uma bomba a bordo de um dos diversos ônibus interestaduais da Nlogônia. Essa bomba explodirá se, por qualquer motivo, o ônibus for obrigado a parar. O esquadrão anti-bombas já se posicionou na estrada para desarmar a bomba em movimento, mas o ônibus está prestes a entrar na capital da Nlogônia, Nlogópolis, e precisa sair de lá para o esquadrão poder desarmar o artefato. Por questões de segurança, o esquadrão anti-bombas somente pode desarmar o artefato fora da capital.

No projeto urbano de Nlogópolis, todas as interseções consistem de rotatórias, de forma que os veículos nunca precisam parar nas interseções. Em compensação, toda rua (que tem mão única e sempre liga duas rotatórias) possui uma faixa de pedestres com um semáforo; enquanto alguns semáforos abrem nos minutos múltiplos de 3 e fecham nos demais, outros fecham nos minutos múltiplos de 3 e abrem nos demais. Todas as ruas de Nlogópolis foram projetadas de tal forma que sempre levam exatamente um minuto para serem percorridas.

O ônibus vai entrar em Nlogópolis exatamente meio-dia em ponto em uma das rotatórias, e deve sair por outra rotatória específica para encontrar o esquadrão anti-bombas na estrada. O comandante da polícia local lhe pediu que escreva um programa que determina o menor tempo necessário para que o ônibus saia da cidade, pela rotatória específica de saída. Note que o ônibus pode ser forçado a parar em um semáforo, por falta de alternativas adequadas, e nesse caso a bomba explodirá. Ele também pode ficar circulando indefinidamente pela cidade, e nesse caso eventualmente terá que parar por falta de combustível (e a bomba explodirá).";"A primeira linha da entrada contém quatro inteiros N (2 ≤ N ≤ 500), E, S (0 ≤ E, S ≤ N − 1), M (1 ≤ M ≤ 2000), indicando, respectivamente, o número de rotatórias (numeradas de 0 a N − 1), o número da rotatória de entrada do ônibus, o número da rotatória de saída do ônibus e o número de ruas da cidade.

Cada uma das M linhas seguintes contém três inteiros A, B e T, indicando respectivamente a rotatória de origem da rua, a rotatória de destino da rua e a temporização do semáforo daquela rua: T = 1 se o semáforo daquela rua abre nos minutos múltiplos de 3, e T = 0 se o semáforo daquela rua fecha nos minutos múltiplos de 3.";Imprima uma única linha contendo um único número inteiro, o menor tempo necessário em minutos para que o ônibus saia da cidade ileso. Se for impossível evitar a explosão do ônibus, imprima uma única linha contendo o caractere ‘*’.;False;2 / 10;77;53;68.83%
2427;Chocolate;Ad-Hoc;2;Por lei, na Nlogônia todas as barras de chocolate são quadradas. Anamaria tem uma barra quadrada de chocolate de lado L, que ela quer compartilhar com alguns colegas da obi. Mas ela é uma boa cidadã e cumpre a lei. Então, ela divide a barra em quatro pedaços quadrados, de lado L/2. Depois, ela repete esse procedimento com cada pedaço gerado, sucessivamente, enquanto o lado for maior do que, ou igual a 2cm. Você deve escrever um programa que, dado o lado L da barra inicial, em centímetros, determina quantos pedaços haverá ao final do processo.;A entrada consiste de uma linha, com um único inteiro, L (2 ≤ L ≤ 104), o número de centímetros do lado do quadrado.;Se programa deve imprimir uma única linha, contendo um único inteiro, igual ao número total de pedaços obtidos pela Anamaria.;False;2 / 10;917;517;56.38%
2428;Capital;Ad-Hoc;3;"O governo do estado de Queensland está com problemas sérios de trânsito na capital Brisbane, onde estão os prédios administrativos. Para desafogar o trânsito, o prefeito de Brisbane e o governador de Queensland decidiram que uma nova capital administrativa deve ser construída em uma área fora de Brisbane. Para projetar a nova capital, o renomado arquiteto minimalista Joe Bloggs foi contratado.

Bloggs foi informado de que o terreno destinado à nova capital ainda não foi demarcado, mas será retangular. Além disso, a cidade deverá ser dividida em quatro zonas, uma delas destinada a uma reserva ambiental e cada uma das outras três receberá os novos prédios de cada um dos três poderes (Executivo, Legislativo e Judiciário). Em um arroubo de criatividade, Bloggs decidiu que duas avenidas, perpendiculares entre si, cada uma paralela a dois dos lados do terreno retangular, dividirão a capital nas quatro zonas.

Bloggs recebeu do governo as áreas de cada uma das zonas e, após muito esforço, encontrou um retângulo que pode ser dividido conforme seus planos e de forma a respeitar as áreas delimitadas. No entanto, a Fundação de Conservação dos Cangurus determinou que a área destinada à reserva ambiental era muito pequena, o que obrigou o governo a alterar as áreas das quatro zonas. Após receber as novas medidas, Bloggs tentou encontrar um novo retângulo que viabilizasse seu projeto, porém sem sucesso. Cansado de fazer testes, ele pensou que talvez tenha que abandonar sua brilhante ideia. Por isso, ele pediu para você escrever um programa que, dadas as áreas das quatro zonas, determine se ele poderá ou não manter seu projeto (ou seja, se existe um retângulo que possa ser dividido por duas retas perpendiculares, cada uma paralela a dois dos lados do retângulo, tal que as quatro áreas formadas obedeçam às exigências do governo).";A entrada consiste de uma única linha contendo quatro inteiros A1, A2, A3, A4  (1 ≤ Ai ≤ 104), indicando a área de cada uma das zonas.;Imprima uma única linha contendo um único caractere: ‘S’ se Bloggs pode preservar seu projeto e ‘N’ caso contrário.;False;3 / 10;244;158;64.75%
2429;Rodovia;Grafos;6;"As estradas da Nlogônia estão severamente danificadas, devido ao intenso fluxo de veículos pesados criado pelo desenvolvimento econômico do reino. Para resolver o problema, o rei da Nlogônia decretou que seriam construídas novas rodovias. O decreto determinou que:


	todas as rodovias construídas terão mão única, e ligarão exatamente duas cidades;
	nenhum par de rodovias se intersectará — serão construídos viadutos, túneis e pontes conforme necessário;
	por razões orçamentárias, o número de rodovias a construir será igual ao número de cidades que existem na Nlogônia;
	deve ser possível, partindo de qualquer cidade, chegar a qualquer outra cidade usando só as novas rodovias, sempre respeitando a mão das rodovias.


O engenheiro-chefe do reino desenhou uma proposta de mapa viário; o rei verificou que o plano satisfaz as três primeiras restrições, mas não conseguiu verificar a última. Por isso, ele pediu que você escrevesse um programa que determina se o plano de rodovias permite viajar de qualquer cidade até qualquer outra cidade da Nlogônia.";A primeira linha de cada caso de teste contém um inteiro N (2 ≤ N ≤ 104), indicando o número de cidades. Cada uma das N linhas seguintes descrevem uma estrada: a linha contém dois inteiros A e B (A ≠ B)que indicam que existe uma estrada de mão única ligando a cidade A a outra cidade, B (as cidades são numeradas de 1 a N).;Imprima uma única linha contendo um único caractere: ‘S’ se for possível ir de qualquer cidade a qualquer outra cidade por rodovias e ‘N’ caso contrário.;False;6 / 10;667;230;34.48%
2430;Catálogo de Músicas;Ad-Hoc;2;"Joyce é uma menina que gosta muito de ouvir música, e possui uma enorme coleção de músicas num dvd. Ela é uma menina organizada e deixa suas músicas em pastas, mas como o número de músicas e de pastas é grandre, Joyce construiu um catálogo para melhor localizá-las.

Para o catálogo Joyce utilizou uma convenção usual em sistemas operacionais, em que a descrição da localiza- ção de cada arquivo é formada pela sequência dos nomes das pastas no caminho da raiz do dvd até o arquivo, separados pelo caractere barra (‘/’). Por exemplo, na figura abaixo, a descrição da música Sampa.mp3 no catálogo é MPB/Caetano/Sampa.mp3.



Utilizando essa convenção, o catálogo do dvd mostrado na figura é:

Rock/AngraCarryOn.mp3

MPB/Caetano/Sampa.mp3

MPB/Cartola/Alvorada.mp3

Como o dvd de Joyce tem muitas músicas e pastas, o catálogo é muito grande. Joyce notou no entanto que o catálogo poderia ser menor (ter um número menor de caracteres) caso ela utilizasse outro conceito usual na nomeação de arquivos em sistemas operacionais: usar uma pasta como referência, ao invés da raiz.

Se uma pasta diferente da raiz for escolhida como referência, então para todos os arquivos que estejam diretamente nessa pasta ou em alguma subpasta não será mais necessário escrever o nome da pasta referência no catálogo. Para as demais pastas, é necessário indicar o caminho utilizando as pastas acima (na direção da raiz) utilizando a convenção ‘../’ para a pasta imediatamente acima da pasta referência. No exemplo da figura acima, no caso de a referência ser a pasta Caetano, a música Sampa.mp3 seria simplesmente descrita como Sampa.mp3. Já a música Alvorada.mp3 seria descrita como ../Cartola/Alvorada.mp3.

Assim, se a pasta Caetano for utilizada como referência, o catálogo será:

../../Rock/AngraCarryOn.mp3

Sampa.mp3

../Cartola/Alvorada.mp3

Nesse caso, a descrição do catálogo tem 59 carateres, menor do que quando a referência utilizada é a raiz do DVD.

Seu objetivo é, dada a informação de todas as músicas do catálogo, determinar o número mínimo de caracteres necessários para descrever o catálogo.";"A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 105), indicando quantos arquivos Joyce possui no dvd. Cada uma das N linhas seguintes contém a descrição de um arquivo, a partir da raiz.


	Número de pastas na entrada ≤ 105
	O nome de cada pasta e de cada arquivo é composto por no máximo 20 caracteres, entre letras minúsculas, maiúsculas e ponto (.)
	Cada pasta possui no máximo 100 pastas como filhas diretas.";Seu programa deve imprimir uma única linha, contendo apenas um inteiro, o número mínimo de caracteres necessários para descrever o catálogo.;True;2 / 10;40;34;85.00%
2431;Lençol;Ad-Hoc;6;"João dispõe de dois pedaços retangulares de tecido, e quer usá-los para fazer um lençol, também retangular, de dimensões A x B. Se necessário, os dois pedaços retangulares podem ser unidos por uma costura, mas João quer que a costura seja paralela aos lados dos retângulos. Os cortes, se necessários, também devem ser paralelos aos lados dos retângulos.

Dadas as dimensões dos pedaços de tecido e do lençol, escreva um programa que determina se é possível João fazer o lençol com as dimensões desejadas.";A entrada contém uma única linha, com seis inteiros A1, B1, A2, B2, A e B (1 ≤ A1, B1, A2, B2, A, B ≤ 106), representando, respectivamente, as dimensões dos dois retângulos disponíveis, e as dimensões do retângulo desejado.;Seu programa deve imprimir uma única linha contendo um caractere S se é possível fazer o lençol, e N caso contrário;False;6 / 10;342;115;33.63%
2432;Tiro ao Alvo;Ad-Hoc;7;"Recentemente Juquinha ganhou de aniversário um joguinho bem clássico: Tiro ao Alvo. Ele arrumou um ótimo lugar em seu quarto para se divertir com o jogo, porém após ler todas as regras do jogo ele percebeu que precisa da sua ajuda para calcular a pontuação obtida.

Segundo as regras, o alvo do jogo é composto por C círculos, todos centrados na origem (0,0). Juquinha atira T vezes e após cada tiro informa suas coordenadas. A pontuação de cada tiro é feita da seguinte forma: para cada círculo em que o tiro estiver contido Juquinha recebe um ponto.

Considere por exemplo a figura abaixo. O tiro marcado com a letra A recebe zero pontos, pois não está contido por nenhum círculo. O tiro marcado com a letra B recebe um ponto, pois está contido por um círculo (o mais externo). O tiro marcado com a letra C recebe dois pontos, pois está contido por dois círculos (note que este caso mostra que tiros exatamente na borda de um círculo são considerados como contidos pelo círculo). Já o tiro marcado com a letra D recebe três pontos, pois está contido pelos três círculos. Considerando todos os pontos, a pontuação total de Juquinha é de 13 pontos.



Dados os raios de C círculos centrados na origem e as coordenadas dos T tiros realizados por Juquinha, escreva um programa que calcula o total de pontos que Juquinha obteve.";"A primeira linha da entrada contém dois inteiros positivos, C (1 ≤ C ≤ 105) e T (1 ≤ T ≤ 105), que representam, respectivamente, o número de círculos do alvo e o número de tiros.

Cada uma das C linhas seguintes contém um inteiro positivo. O i-ésimo inteiro Ri (1 ≤ Ri ≤ 106 para 1 ≤ i ≤ C) ,Ri > Ri-1 para 2 ≤ i ≤ C) representa o raio do i-ésimo círculo. Os raios Ri são fornecidos em ordem crescente.

Cada uma das T linhas seguintes contém um par X, Y (-105 ≤ X, Y ≤ 105) de inteiros, que representam as coordenadas de cada tiro.";Seu programa deve imprimir uma única linha, contendo apenas um inteiro, o total de pontos obtidos por Juquinha.;True;7 / 10;1268;335;26.42%
2433;Vende-se;Ad-Hoc;5;"A Otacílio Busílis Imóveis (OBI) é a maior imobiliária de Nlogópolis, especializada no aluguel de prédios comerciais; todas as suas propriedades se localizam na Avenida Doutor Otacílio Busílis, assim chamada em homenagem ao fundador da OBI.

Devido à crise econômica mundial, a OBI precisa vender K de seus imóveis para levantar capital de giro. Dr. Otacílio quer que os prédios restantes após a venda sejam o mais próximos possível — ou seja, a distância entre o primeiro e o último prédios restantes deve ser a menor possível.

Infelizmente, a OBI é proprietária de tantos prédios que o Dr. Otacílio não sabe quais prédios ele deve vender; ele lhe contratou para que você escreva um programa que determina qual é a mínima distância possível entre o primeiro e o último prédios da OBI na avenida, após a venda de K prédios.";A primeira linha da entrada contém os inteiros N (3 ≤ N ≤ 105) e K (N - K ≥ 2), indicando, respectivamente, quantos prédios a OBI possui, e quantos prédios ela pretende vender. A linha seguinte contém N inteiros Xi (1 ≤ Xi ≤ 106​) onde todos os Xi são distintos, indicando a distância de cada um dos N prédios ao início da avenida, em metros.;A saída deve conter um único inteiro indicando a menor distância possível entre o primeiro e o último prédio possuídos pela OBI após a venda.;False;5 / 10;217;119;54.84%
2434;Saldo do Vovô;Ad-Hoc;1;"Vovô João tem uma banca de jornais; ele tem muitos clientes, e diariamente recebe muito dinheiro, mas também faz muitos pagamentos para manter o seu estoque de jornais e revistas. Todo dia ele vai ao banco realizar um depósito ou uma retirada de dinheiro. Em alguns dias, o saldo de sua conta no banco fica negativo, mas Vovô João tem um acordo com o banco que garante que ele somente é cobrado se o saldo for menor do que um valor pré-estabelecido.

Dada a movimentação diária da conta do banco do Vovô João, você deve escrever um programa que calcule o menor saldo da conta, no período dado.";A primeira linha da entrada contém dois números inteiros N (1 ≤ N ≤ 30) e S (−103 ≤ S ≤ 103) que indicam respectivamente o número de dias do período de interesse e o saldo da conta no início do período. Cada uma das N linhas seguintes contém um número inteiro indicando a movimentação de um dia (−103 ≤ cada movimentação ≤ 103), (valor positivo no caso de depósito, valor negativo no caso de retirada). A movimentação é dada para um período de N dias consecutivos: a primeira das N linhas corresponde ao primeiro dia do período de interesse, a segunda linha corresponde ao segundo dia, e assim por diante.;Seu programa deve imprimir uma única linha, contendo um único número inteiro, o menor valor de saldo da conta no período dado.;False;1 / 10;1196;937;78.34%
2435;Corrida;Ad-Hoc;3;"A Federação de Corridas de Charrete (FCC) organiza todo ano a Subida Brigite Cardoso (SBC), disputada nas ladeiras de paralelepípedo de Ouro Preto. A corrida é uma das mais tradicionais do esporte, completando 100 anos em 2013. Para comemorar o centenário, a FCC pretende integrar dispostivos GPS às charretes, permitindo aos espectadores desfrutarem de dados de telemetria em tempo real.

No mesmo viés de inovação tecnológica, a FCC transmitirá a SBC via satélite para todo o planeta, e quer integrar a telemetria na transmissão, indicando qual seria o vencedor da corrida se as charretes mantivessem suas velocidades até o final da corrida; ela pediu que você escrevesse um programa que, dados as distâncias até a linha de chegada, as velocidades e os números das duas charretes que lideram a corrida, determina quem seria o vencedor da corrida (você pode supor que as charretes não cruzam a linha de chegada simultaneamente).";"A entrada consiste de duas linhas; cada linha descreve uma das charretes que lidera a corrida. A descrição de uma charrete consiste de três inteiros N (1 ≤ N ≤ 99), D (0 < D ≤ 1000) e V (0 < V ≤ 50) indicando, respectivamente, o número da charrete, a sua distância à linha de chegada em metros, e a sua velocidade, em quilômetros por hora. Os números das duas charretes são distintos.";Imprima uma única linha, contendo um único número inteiro, indicando o número da charrete que seria vencedora, conforme descrito acima.;False;3 / 10;1859;845;45.45%
2436;Robô;Ad-Hoc;2;"Um novo robô de limpeza para um grande salão retangular está sendo desenvolvido. O robô vai percorrer o caminho definido por uma linha marcada no chão, que é coberto com ladrilhos quadrados, brancos e pretos: ladrilhos pretos indicam o caminho que o robô deve percorrer. Ao movimentar-se, o robô pode andar apenas em linha reta, para a frente. Parado, o robô pode girar para as quatro direções (Norte, Sul, Leste e Oeste).

Dados um mapa indicando a cor de cada ladrilho no chão e a posição inicial do robô, você deve escrever um programa que determine a posição final do robô.";"A primeira linha contém dois inteiros L e C (1 ≤ L, C ≤ 1000) indicando as dimensões do salão (número de linhas e número de colunas), medidas em ladrilhos. A segunda linha contém dois inteiros A e B (1 ≤ B ≤ L, 1 ≤ B ≤ C) indicando respectivamente a linha e a coluna da posição inicial do robô (as linhas são numeradas de 1 a L, de cima para baixo; as colunas são numeradas de 1 a C, da esquerda para a direita). Cada uma das L linhas seguintes contém C inteiros, zeros ou uns. Nessa representação, o valor ‘1’ indica que o ladrilho corresponte é preto. O ladrilho da linha A e coluna B sempre é preto. O caminho do robô é definido unicamente: em nenhum momento o robô necessita fazer uma escolha sobre em qual direção ir (em outras palavras, todo ladrilho preto tem no máximo dois vizinhos pretos e o ladrilho inicial tem um vizinho preto).";Seu programa deve imprimir apenas uma linha, contendo dois números inteiros, respectivamente a linha e a coluna da posição final do robô.;False;2 / 10;388;224;57.73%
2437;Distância de Manhattan;Ad-Hoc;4;"Maria é uma moradora de Nlogópolis, uma cidade na Nlogônia que tem uma característica muito interessante: todas as ruas da cidade ou são orientadas no sentido norte-sul ou são orientadas no sentido leste-oeste. Isso significa que, dadas duas ruas, ou elas são paralelas ou elas são perpendiculares entre si.

					Todas as ruas da cidade são de mão dupla e é possível seguir em qualquer direção em um cruzamento.

					Agora Maria está atrasada para uma reunião e precisa de sua ajuda. Dadas as coordenadas iniciais de Maria e da reunião, determine o número mínimo de cruzamentos que Maria deve atravessar para chegar ao seu destino. Esse número inclui o cruzamento onde ocorrerá a reunião mas não inclui a posição inicial de Maria.";A única linha da entrada contém quatro inteiros, Xm, Ym, Xr, Yr (0 ≤ Xm, Ym,  Xr, Yr ≤ 1000), indicando as coordenadas de Maria (Xm, Ym) e da reunião (Xr, Yr). O ponto de partida de Maria nunca será igual ao local da reunião, ou seja, pelo menos uma das coordenadas será diferente.;Seu programa deve imprimir uma única linha contendo um único inteiro: o número mínimo de cruzamentos que Maria precisa atravessar para chegar até o local da reunião.;False;4 / 10;3446;1278;37.09%
2438;Quadradinho de 8;Ad-Hoc;5;"Fernando ficou sabendo de um novo jogo chamado quadradinho de 8. Nesse jogo, é apresentado ao jogador uma fileira de quadrados, um do lado do outro. Em cada quadrado há um número escrito. Veja abaixo um exemplo de fileira de quadrados:

					  

					Para ganhar, o jogador deve escolher alguns quadrados de forma que eles juntos formem apenas um retângulo contíguo e que a soma de seus números seja divisível por 8. Na fileira de quadrados acima, o jogador ganha se escolher os quadrados com os números 6, 0 e 2. O jogador perde se escolher os quadrados com 3, 4 e 9, apesar da soma ser divisivel por 8, os quadrados não estão juntos, eles acabam formando dois retângulos separados.

					Você deve estar pensando agora que Fernando quer sua ajuda para que você mostre a ele como ganhar o jogo, mas Fernando é um garoto muito esperto e sabe resolver o jogo rapidamente. Ele quer na verdade que você o ajude a descobrir de quantas formas é possível ganhar esse jogo.";A entrada possui duas linhas. A primeira linha contém apenas um inteiro N (1 ≤ N ≤ 1000000) que indica o número de quadrados na fileira de um jogo. A segunda linha contém N inteiros indicando na ordem os números presentes nos quadrados da fileira de um jogo, (os números nos quadrados são inteiros não negativos menores ou iguais a 1000).;Seu programa deve imprimir uma única linha, contendo apenas um inteiro, o número de maneiras de ganhar o jogo apresentado na entrada. Se não for possível que o jogador ganhe o jogo, imprima 0.;True;5 / 10;1287;334;25.95%
2439;Cachecol da Vovó Vitória;Ad-Hoc;3;"Vovó Vitória possui muitos netinhos; como toda boa avó, ela se preocupa constantemente com a saúde de seus netos, e quer garantir que eles estejam sempre bem agasalhados o tempo todo.

					Vovó Vitória dispõe de um saco com vários retalhos quadrados de mesmo tamanho, em três cores diferentes, e quer usá-los para costurar cachecóis para seus netos. Ela quer que cada cachecol tenha três retalhos de largura por N de comprimento e, além disso, retalhos adjacentes devem ter cores diferentes. Por exemplo, a figura abaixo mostra três cachecóis que Vovó Vitória pode costurar.";A entrada consiste de uma única linha contendo um único inteiro N(1 ≤ N ≤ 1018), indicando o número de retalhos no comprimento do cachecol.;Imprima uma única linha contendo um único número inteiro, indicando o número de cachecóis distintos que a Vovó Vitória pode costurar. Como este número pode ser muito grande, imprima o resto que este número deixa quando dividido por 1.000.000.007 (109 + 7).;True;3 / 10;93;58;62.37%
2440;Famílias de Troia;Grafos;5;A Guerra de Troia pode ter sido um grande conflito bélico entre gregos e troianos, possivelmente ocorrido entre 1300 a.C. e 1200 a.C. (fim da Idade do Bronze no Mediterrâneo). Recentemente foram encontradas inscrições numa caverna a respeito de sobreviventes. Após um trabalho árduo, arqueólogos descobritam que as incrições descreviam relações de parentesco numa certa população. Cada item da inscrição indicavam duas pessoas que pertenciam a uma mesma família. Seu problema é determinar quantas famílias distintas existem.;O arquivo de entrada consiste de M + 1 linhas. A primeira linha do arquivo de entrada contém um inteiro positivo N, que indica o número de elementos da comunidade, numerados de 1 a N. As demais M linhas do arquivo de entrada contêm, cada uma, dois inteiros. Cada inteiro identifica um elemento da comunidade. Cada linha indica que os dois indivíduos pertencem a uma mesma família.;A saída deve conter apenas uma linha contendo um único inteiro, que é o número de famílias.;False;5 / 10;1121;547;48.80%
2441;Janela;Ad-Hoc;5;"A sala de aulas utilizada para os cursos da OBI tem uma grande janela, composta de três folhas de vidro. A janela tem um metro de altura por seis metros de comprimento. Cada folha da janela tem um metro de altura e dois metros de comprimento. As folhas deslizam sobre trilhos, ao longo do comprimento da janela, de forma que é possível controlar a abertura da janela, para circulação de ar.

					Dadas as posições das três folhas da janela, deseja-se determinar qual a área da janela que está aberta, em centímetros quadrados.

					A figura abaixo ilustra duas configurações das folhas da janela. Na figura, os cantos inferiores esquerdos de cada folha são indicados por F1,F2 e F3. Na configuração (a) a janela está totalmente fechada, e portanto o total da área aberta é igual a zero. Na configuração (b) há duas aberturas, e o total de área aberta é igual a (100 × 100) + (50 × 100) = 15.000 cm².

					  

					Dadas as posições das três folhas da janela, escreva um programa que calcule a área da janela que está aberta, em centímetros quadrados.";A primeira e única linha da entrada contém três inteiros F1, F2, F3 (0 ≤ F1, F2, F3 ≤ 400), indicando as posições das três folhas. A posição de cada folha é dada pela distância, em centímetros, da extremidade esquerda da janela até a extremidade esquerda da folha.;Seu programa deve imprimir uma única linha, contendo um único inteiro, a área aberta da janela em centímetros quadrados.;True;5 / 10;281;126;44.84%
2442;Plantação;Ad-Hoc;7;"A N-logônia é uma região com um clima muito intenso e variável, onde em questão de poucos dias é possível observar uma forte seca, seguida de uma intensa estação de chuvas. O Seu João tem uma plantação de obilina, uma fruta típica e muito apreciada na região, o que a torna muito valiosa. A obilina, entretanto, é muito suscetível a mudanças climáticas, de forma que é difícil prever quanto desta fruta será colhido durante a safra.

					Observou-se que as árvores de obilina seguem as seguintes regras:

					
						As árvores produzem frutas todos os dias, exceto quando elas morrem;
						As árvores mortas não produzem frutas, e infelizmente, mesmo que volte a chover, continuam mortas;
						Se choveu na noite anterior, a árvore produz uma fruta a mais que no dia anterior;
						Se estiou na noite anterior, a árvore produz uma fruta a menos que no dia anterior; e
						Uma árvore morre se não produzir nenhuma fruta.
					

					O Seu João deseja vender toda a obilina produzida para uma grande rede de mercados local, mas para isso, precisa saber exatamente quantas frutas de obilina ele colherá durante a safra.

					Para ajudar o Seu João nesta tarefa, você deve escrever um programa que, dada a previsão do tempo para cada noite do período da safra, e quantas frutas cada árvore do Seu João produziu no dia anterior ao início da safra, determine quantas obilinas serão colhidas durante a safra.

					Por exemplo, considerando apenas um pé de obilina, se a safra dura dois dias, choveu durante duas noites, e o pé de obilina produziu 3 frutos antes de começar a safra, a produção total da safra será de 9 frutas: 4 no primeiro dia da safra, e 5 no segundo dia.";"A primeira linha da entrada contém dois inteiros, N(1 ≤ N ≤ 100000) e K (1 ≤ K ≤ 100 000), respectivamente o número de dias que dura a safra, e o número de árvores que o Seu João possui.

					A segunda linha contém K inteiros ai (1 ≤ ai ≤ 100, para todo i) indicando quantas frutas foram produzidas no dia anterior ao início da safra por cada uma das K árvores.

					A linha seguinte contém N letras separadas por um espaço em branco. Cada uma das letras indica se choveu ou se estiou durante a noite respectiva: a primeira letra se refere à primeira noite, a segunda letra se refere à segunda noite, e assim por diante. Se a letra for um ‘C’, indica que choveu aquela noite chuvosa, e se for um ‘E’, indica que estiou (ou seja, não choveu).";Seu programa deve imprimir uma única linha, contendo um único inteiro, indicando o número de frutas que serão produzidas pela plantação do Seu João.;False;7 / 10;151;51;33.77%
2443;Soma de Frações;Ad-Hoc;3;"Joãozinho está aprendendo a somar frações na escola e quer sua ajuda para escrever um programa que dadas duas frações imprima a soma delas em sua forma irredutível. Assim ele vai poder conferir as respostas dos exercícios que está fazendo.

					A forma irredutível de uma fração é quando o divisor (número de baixo) é o menor possível. Por exemplo, 10⁄3 é uma fração irredutível, pois 10 e 3 não têm nenhum divisor em comum. Mas 10⁄6 não é, pois ela pode ser simplificada para 5⁄3, dividindo-se 10 e 6 por 2.

					Dados quatro inteiros a, b, c, d, escreva um programa que calcule a⁄b + c⁄d na sua forma irredutível.";A única linha da entrada contém quatro inteiros a, b, c, d, (1 ≤ a, b, c, d ≤ 100) respectivamente dividendo e divisor da primeira fração e dividendo e divisor da segunda fração.;Seu programa deve imprimir uma única linha contendo dois inteiros, dividendo e divisor da fração irredutível formada pela soma das duas frações dadas.;False;3 / 10;787;483;61.37%
2444;Volume da TV;Ad-Hoc;1;"Bruno é um menino que gosta muito de ver televisão. No entanto ele se depara com um problema muito chato. Sempre que começa um novo programa no canal preferido dele, a TV Nlogônia, acontece de o volume do som deste programa estar diferente do anterior, às vezes com volume menor, outras vezes com volume maior. Quando está com volume menor, ele aumenta o volume pressionando uma quantidade de vezes seguidas o botão de aumentar para o volume ficar ideal; a mesma coisa acontece quando está um volume maior, e ele diminui o volume pressionando alguma quantidade de vezes seguidas o botão de diminuir o volume para ficar com o volume que ele goste no momento.

					O aparelho de TV dele tem umas peculiaridades: ele possui volume mínimo, com valor 0 (também chamado de mudo), e volume máximo, com valor 100. A TV nunca ultrapassa os volumes máximo e mínimo. Por exemplo, se o volume já estiver no máximo e ele pressionar o botão de aumentar o som, o volume não se altera. Da mesma forma, se o volume estiver no valor mínimo e ele pressionar o botão de diminuir o som, o volume não se altera.

					Agora Bruno quer sua ajuda: ele lembra qual era o volume inicial da TV, e quantas vezes ele pressionou cada botão. Mas, como foram várias mudanças de volume, ele não sabe qual é o volume atual da TV. Por isso, pediu que você o ajude a calcular qual é o volume atual, dados o volume inicial e a lista de trocas de volume que ele realizou.";"A primeira linha da entrada contém dois números inteiros V (0 ≤ V ≤ 100) e T (0 ≤ T ≤ 1000), que indicam, respectivamente, o volume inicial e o número de trocas de volume.

					A segunda linha contém T números inteiros Ai (−100 ≤ Ai ≤ 100) que mostram as modificações de volume realizadas, na ordem em que estas modificações foram feitas. O primeiro número indica a primeira modificação de volume, o segundo número indica a segunda modificação, e assim por diante. Para cada modificação, um número maior do que zero significa quantas vezes Bruno pressionou o botão de aumentar o som; um número menor do que zero significa quantas vezes ele pressionou o botão de diminuir o som. Ou seja, se o número é igual a 5, significa que nessa modificação ele pressionou cinco vezes o botão de aumentar o som; se o número é igual a −3, significa que nessa modificação ele pressionou o botão de diminuir o som três vezes.";Seu programa deve imprimir apenas uma linha, contendo apenas um inteiro F, que indica qual o volume atual da TV após as mudanças de volume.;False;1 / 10;1582;918;58.03%
2445;Polígono;Ad-Hoc;3;"Renato gosta muito de geometria e acaba de achar alguns palitos em seu quarto. Ele está tentando utilizar esses palitos de forma a fazer um polígono com o maior número de lados possíveis.

					Para montar o polígono, Renato não quer cruzar os palitos; ou seja, os palitos devem se tocar apenas nas pontas. Ele também não quer quebrar nenhum palito, de forma que todos os palitos que forem usados devem manter sua medida original.

					Se, por exemplo, os palitos têm medidas 3, 4 e 5, é possível utilizar todos os três palitos para formar um triângulo. Mas se as medidas são 1, 1, 1 e 5, é possível formar um triângulo com três lados iguais a 1 mas não é possivel formar um polígono com todos os 4 palitos.

					Você consegue ajudar Renato a descobrir qual é o maior número de palitos que ele consegue usar?";A primeira linha contém apenas um inteiro N (3 ≤ N ≤ 100000) que indica o número de palitos. A segunda linha possui N inteiros indicando as medidas dos palitos, ( as medidas dos palitos são inteiros positivos menores ou iguais a 10000).;Se programa deve imprimir uma única linha, contendo um único inteiro, o maior número de lados que o polígono pode ter seguindo as restrições do enunciado. Se não for possível formar nenhum polígono usando os palitos, imprima 0.;False;3 / 10;193;103;53.37%
2446;Troco;Paradigmas;7;Você está num supermercado e está na fila do caixa para comprar alguns produtos. Assim que você termina de passar as compras pelo caixa, se lembra que tem várias moedas em seu bolso, algumas repetidas, e fica pensando se com elas dá para pagar exatamente o valor das compras (para assim se livrar destas moedas e ficar com os bolsos mais leves). Você consegue pagar o valor exato da conta usando estas moedas?;A primeira linha da entrada contém dois números inteiros V (1 ≤ V ≤ 105) e M (1 ≤ M ≤ 103), indicando, respectivamente, o valor final da compra e o número de moedas que você tem em seu bolso. A segunda linha contém M números inteiros que descrevem o valor Mi (1 ≤ Mi ≤ 105)de cada moeda existente em seu bolso.;Seu programa deve imprimir apenas uma linha, contendo apenas um caractere: S caso seja possível pagar o valor exato da conta usando apenas suas moedas, ou N caso contrário.;False;7 / 10;3008;728;24.20%
2447;Torneio;Ad-Hoc;7;"Juquinha foi convidado para participar do prestigiado torneio de tênis de Rolando Barros, na Nlogônia. O torneio é composto de N rodadas no estilo mata-mata: todo jogador que perde uma partida é eliminado do torneio, e o vencedor desta partida avança para a próxima rodada. Como o número de jogadores ativos cai pela metade a cada rodada, é necessário que o número de jogadores participantes seja uma potência de 2.

					  
					Os jogadores são inicialmente dispostos na chave por sorteio. Em uma disposição é atribuido a cada jogador um valor de 1 a 2N , que corresponde a sua posição na chave do torneio. Jogadores vencedores avançam para a direita da chave, e disputam com o vencedor da sub-chave vizinha. Na imagem acima, caso os jogadores das posições 1 e 3 vençam suas partidas na primeira rodada, estes se enfrentarão na segunda rodada.

					Juquinha não quer perder a chance de tornar-se um jogador mundialmente famoso, e para isso contratou você para ajudá-lo em suas análises estatísticas. Ele atribuiu a cada jogador um coeficiente de habilidade Hi (0 ≤ Hi ≤ 109), e sabe que se dois jogadores disputarem uma partida, aquele com maior coeficiente de habilidade certamente será o vencedor. Seu papel é calcular quantas disposições iniciais dos jogadores forçam Juquinha perder na K-ésima rodada (ou vencer o torneio, caso K = N + 1). Duas disposições são consideradas distintas se para algum jogador foi atribuido um valor diferente nas duas disposições.";A primeira linha contém dois inteiros N (1 ≤ N ≤ 16) e K(1 ≤ K ≤ N + 1). Cada uma das próximas 2N linhas seguintes contêm um único inteiro representando o coeficiente de habilidade de um jogador. O coeficiente de Juquinha é representado pelo primeiro desses inteiros.;Seu programa deve imprimir uma única linha contendo um único inteiro indicando o número de disposições iniciais que forçam Juquinha a perder na K-ésima rodada (ou ganhar o torneio, se K = N + 1). Como este número pode ser muito grande, imprima o resto que este número deixa quando dividido por 1.000.000.007 (109 + 7).;True;7 / 10;48;20;41.67%
2448;Carteiro;Ad-Hoc;4;"Um carteiro é o responsável por entregar as encomendas na rua de Joãozinho. Por política da empresa, as encomendas devem ser entregues na mesma ordem que foram enviadas, mesmo que essa não seja a forma mais rápida. Cansado de subir e descer aquela rua tantas vezes, nosso amigo quer mostrar à empresa quanto tempo ele leva para entregar as encomendas, na tentativa de derrubar essa política.

A rua de Joãozinho tem N casas. Naturalmente, as casas são numeradas de forma ordenada (não necessariamente por números consecutivos). Como as casas possuem aproximadamente o mesmo tamanho, você pode assumir que o carteiro leva uma unidade de tempo para caminhar de uma casa até a casa imediatamente vizinha.

Há M encomendas para essa rua, que devem ser entregues na mesma ordem em que chegaram. Cada encomenda contém o número da casa onde deve ser entregue.

Escreva um programa que determine quanto tempo o carteiro levará para entregar todas as encomendas, assumindo que quando o tempo começa a contar, ele está na primeira casa (a de menor número), e o tempo termina de contar quando todas as encomendas foram entregues (mesmo que o carteiro não esteja de volta na primeira casa). Você pode desprezar o tempo para colocar a encomenda na caixa de correio (ou seja, se ele só tiver uma encomenda, para a primeira casa, a resposta para o problema é zero).";A primeira linha contém dois inteiros, N e M (1 ≤ N, M ≤ 45.000), respectivamente o número de casas e o número de encomendas. A segunda linha contém N (1 ≤ Ni ≤ 109) inteiros em ordem estritamente crescente, indicando os números das casas. A terceira linha contém M (1 ≤ Mi ≤ 109) inteiros indicando os números das casas onde as encomendas devem ser entregues, na ordem dada na entrada.;Seu programa deve produzir uma única linha, contendo um único inteiro, o tempo que o carteiro levará para entregar todas as encomendas na ordem correta, assumindo que ele começa na casa de menor número.;False;4 / 10;1037;501;48.31%
2449;Fechadura;Ad-Hoc;3;"Joãozinho estava um dia chegando em casa quando percebeu que havia perdido a chave da porta. Desesperado, ele resolveu pedir ajuda a seu amigo Roberto, que em poucos segundos conseguiu abrir a porta usando suas ferramentas.

Admirado com a velocidade em que seu amigo conseguiu abrir a porta de sua casa sem a chave, ele decidiu perguntar como ele tinha conseguido aquilo. Roberto explicou que a fechadura da casa de Joãozinho é baseada em um sistema de pinos de tamanhos diferentes que, uma vez alinhados na mesma altura M, possibilitam a abertura da porta.

Uma fechadura é um conjunto de N pinos dispostos horizontalmente que podem ser movimentados para cima ou para baixo com o auxílio de uma chave de metal que, ao ser inserida dentro da fechadura, pode aumentar ou diminuir em 1mm, simultaneamente, a altura de quaisquer dois pinos consecutivos.

Joãozinho como um exemplar perfeccionista decidiu desbloquear sua fechadura na menor quantidade de movimentos, onde cada movimento consiste em escolher dois pinos consecutivos da fechadura e aumentar ou diminuir a altura dos dois pinos em 1mm. Após todos os pinos possuírem altura exatamente igual a M, a fechadura é desbloqueada.";"A primeira linha da entrada contém dois inteiros N (1 ≤ N ≤ 1000) e M (1 ≤ M ≤ 100) representando, respectivamente, a quantidade de pinos da fechadura e a altura em que eles devem ficar para a fechadura ser desbloqueada.

A segunda linha da entrada contém N (1 ≤ Ni ≤ 100) inteiros, representando as alturas dos pinos da fechadura.";Seu programa deve imprimir uma linha contendo um inteiro representando a quantidade mínima de movimentos para desbloquear a fechadura.;False;3 / 10;650;358;55.08%
2450;Matriz Escada;Ad-Hoc;4;"Joãozinho está aprendendo sobre matrizes. Hoje ele aprendeu como deixar matrizes na forma escada, e está exercitando. Para ajudá-lo, você deve escrever um programa que determine se o resultado dele realmente está no formato correto.

					Uma matriz está na forma escada quando, para cada linha, as condições a seguir forem satisfeitas:

					
						Se a linha só possuir zeros, então todas as linhas abaixo desta também só possuem zeros.
						Caso contrário, seja X o elemento diferente de zero mais à esquerda da linha; então, para todas as linhas abaixo da linha de X, todos os elementos nas colunas à esquerda de X e na coluna de X são iguais a zero.";A primeira linha possui dois inteiros N e M (1 ≤ N, M ≤ 500), as dimensões da matriz. Cada uma das N linhas seguintes contém M (0 ≤ Mij ≤ 105) inteiros não negativos, os elementos da matriz.;Seu programa deve produzir uma única linha, contendo o caractere ‘S’ caso a matriz esteja no formato escada, ou ‘N’, caso contrário.;False;4 / 10;937;333;35.54%
2451;PacMan;Ad-Hoc;2;"Pacman é um jogo muito conhecido, onde o personagem tenta comer a maior quantidade possível de bolinhas, tendo ao mesmo tempo que fugir de vários fantasmas. Dessa vez, nosso personagem quer carregar a comida coletada para casa, mas o encontro com um fantasma, ao invés de terminar o jogo, faz com que toda a comida coletada seja roubada.

					Neste problema os fantasmas não se movem, e o jogador sempre faz o Pacman percorrer o seguinte caminho:

					
						O Pacman começa no canto superior esquerdo do tabuleiro.
						O Pacman percorre toda a linha, da esquerda para direita, até chegar ao lado direito do tabuleiro.
						O jogador desce uma posição, e percorre toda a linha, desta vez da direita para a esquerda.
						As etapas 2 e 3 se repetem até que todo o tabuleiro tenha sido percorrido.
					

					Infelizmente, Pacman não pode ignorar os comandos do usuário para fugir dos fantasmas ou pegar mais comida, mas ele pode, a qualquer momento, se aproveitar de um bug de implementação e interromper o jogo, levando consigo toda a comida que estiver carregando.

					Você deve escrever um programa que determine a maior quantidade de comida que o Pacman pode levar, se escolher a melhor hora possível para sair. Note que o jogador também tem a opção de não sair antes do final do jogo.";"A primeira linha contém um inteiro N (2 ≤ N ≤ 100), o tamanho do tabuleiro do jogo, que é quadrado. Cada uma das N linhas seguintes contém N caracteres, que podem ser (aspas para melhor clareza):

					
						‘.’ um espaço vazio;
						‘o’ uma comida;
						‘A’ um fantasma.
					

					Não há um fantasma e uma comida na mesma posição.
					Não há fantasma nem comida na posição inicial do Pacman (ou seja, o primeiro caractere da primeira linha do tabuleiro é ‘.’).";Seu programa deve produzir uma única linha contendo um único inteiro, a quantidade máxima de comida que o Pacman pode levar para casa.;False;2 / 10;880;528;60.00%
2452;Semente;Ad-Hoc;6;"Um experimento biológico utiliza uma fita de papel branco especial, na qual algumas gotas de um reagente são colocadas em posições específicas. Inicialmente a gota de reagente faz com que o papel se torne preto na posição em que foi colocada. A cada dia o reagente se propaga pelo papel, em todas as direções, com velocidade de 1 posição por dia, colorindo a região em que o reagente se propagou. A figura abaixo mostra um experimento com uma fita de 13 posições, com três gotas de reagente inicialmente, colocadas nas posições 2, 6 e 13 (a posição 1 é a primeira mais à esquerda da fita). Ao final do terceiro dia, a fita está completamente tomada pelo reagente.



Você foi contratado para escrever um programa que, dados o comprimento da fita de papel e as posições das gotas de reagente no início do experimento, determine quantos dias serão necessários para a fita de papel ficar completamente tomada pelo reagente.";A primeira linha contém dois inteiros F (1 ≤ F ≤ 100000) e R (1 ≤ R ≤ 1000), indicando respectivamente o comprimento da fita de papel, em números de posições, e o número de gotas no início do experimento. A segunda linha contém R inteiros, indicando as posições das gotas de reagente, que são dadas em ordem crescente.;Seu programa deve produzir uma única linha, contendo um único inteiro, o número de dias necessários para que a fita de papel fique totalmente tomada pelo reagente.;True;6 / 10;858;262;30.54%
2453;Língua do P;Ad-Hoc;4;"Uma brincadeira que crianças adoram é se comunicar na língua do P, acrescentando pê antes de cada sílaba, como uma forma de código para dificultar que outras pessoas entendam a conversa (pê-va pê-mos pê-no pê-ci pê-ne pê-ma?).

Jacy e Kátia adaptaram a língua do P para mensagens eletrônicas, acrescentando a letra P minúscula ‘p’ antes de cada letra das palavras de uma mensagem. Um exemplo de mensagem codificada e a respectiva mensagem decodificada é mostrada na figura abaixo.



Sua tarefa é escrever um programa que decodifique uma mensagem escrita na língua do P eletrônica de Jacy e Kátia.";A entrada consiste de uma única linha, contendo uma mensagem escrita na língua do P eletrônica de Jacy e Kátia, a mensagem contém apenas letras maiúsculas e minúsculas e espaços em branco, a mensagem tem entre 1 e 1000 caracteres, não há dois espaços em branco consecutivos na mensagem.;Seu programa deve produzir uma única linha, contendo a mensagem decodificada.;True;4 / 10;2450;941;38.41%
2454;Flíper;Ad-Hoc;1;"Flíper é um tipo de jogo onde uma bolinha de metal cai por um labirinto de caminhos até chegar na parte de baixo do labirinto. A quantidade de pontos que o jogador ganha depende do caminho que a bolinha seguir. O jogador pode controlar o percurso da bolinha mudando a posição de algumas portinhas do labirinto. Cada portinha pode estar na posição 0, que significa virada para a esquerda, ou na posição 1 que quer dizer virada para a direita. Considere o flíper da figura abaixo, que tem duas portinhas. A portinha P está na posição 1 e a portinha R, na posição 0. Desse jeito, a bolinha vai cair pelo caminho B.

 

Você deve escrever um programa que, dadas as posições das portinhas P e R, neste flíper da figura, diga por qual dos três caminhos, A, B ou C, a bolinha vai cair!";A entrada é composta por apenas uma linha contendo dois números P (0 ou 1) e R (0 ou 1), indicando as posições das duas portinhas do flíper da figura.;A saída do seu programa deve ser também apenas uma linha, contendo uma letra maiúscula que indica o caminho por onde a bolinha vai cair: ‘A’, ‘B’ ou ‘C’.;True;1 / 10;6010;3871;64.41%
2455;Gangorra;Ad-Hoc;1;"Joãozinho acaba de mudar de escola e a primeira coisa que percebeu na nova escola é que a gangorra do parquinho não é simétrica, uma das extremidades é mais longa que a outra. Após brincar algumas vezes com um amigo de mesmo peso, ele percebeu que quando está em uma extremidade, a gangorra se desequilibra para o lado dele (ou seja, ele fica na parte de baixo, e o amigo na parte de cima), mas quando eles trocam de lado, a gangorra se desequilibra para o lado do amigo. Sem entender a situação, Joãozinho pediu ajuda a outro amigo de outra série, que explicou que o comprimento do lado interfere no equilíbrio da gangorra, pois a gangorra estará equilibrada quando

P1 ∗ C1 = P2 ∗ C2

onde P1 e P2 são os pesos da criança no lado esquerdo e direito, respectivamente, e C1 e C2 são os comprimentos da gangorra do lado esquerdo e direito, respectivamente.";A primeira e única linha da entrada contém 4 inteiros, P1, C1, P2 e C2, (10 ≤ P1, C1, P2 e C2 ≤ 100) nesta ordem.;Se a gangorra estiver equilibrada, imprima ‘0’. Se ela estiver desequilibrada de modo que a criança esquerda esteja na parte de baixo, imprima ‘-1’, senão, imprima ‘1’.;False;1 / 10;2829;2071;73.21%
2456;Cartas;Ad-Hoc;1;"Beatriz gosta muito de jogar cartas com as amigas. Para treinar memória e raciocínio lógico, ela inventou um pequeno passatempo com cartas. Ela retira as cinco primeiras cartas do topo de um baralho bem embaralhado, e as coloca em sequência, da esquerda para a direita, na mesa, com as faces voltadas para baixo.

Então ela olha, por um breve instante, cada uma das cartas da sequência (e logo as recoloca na mesa, com a face para baixo). Usando apenas a sua memória, Beatriz deve agora dizer se a sequência de cartas está ordenada crescentemente, decrescentemente, ou não está ordenada.

De tanto jogar, ela está ficando cansada, e não confia em seu próprio julgamento para saber se acertou ou errou. Por isso, ela pediu para você fazer um programa que, dada uma sequência de cinco cartas, determine se a sequência dada está ordenada crescentemente, decrescentemente, ou não está ordenada.";A entrada consiste de uma única linha que contém as cinco cartas da sequência. Os valores das cartas são representados por inteiros entre 1 e 13. As cinco cartas têm valores distintos.;Seu programa deve produzir uma única linha, contendo um único caractere maiúsculo: ‘C’ caso a sequência dada esteja ordenada crescentemente, ‘D’ se estiver ordenada decrescentemente, ou ‘N’ caso contrário.;False;1 / 10;1738;1127;64.84%
2457;Letras;Ad-Hoc;2;"Considere as definições abaixo:


	Uma palavra é uma sequência de letras consecutivas.
	Um texto é um conjunto de palavras separadas pelo caractere espaço em branco.


Você foi contratado pela empresa Booble para escrever um programa que, dados uma letra e um texto, determina a porcentagem de palavras do texto que contém a letra dada.";A primeira linha da entrada contém um único caractere, a letra de interesse na pesquisa. A segunda linha contém um texto, como definido acima. O texto é composto apenas por letras minúsculas e o caractere espaço em branco, o texto é formado por no mínimo um caractere, e no máximo 1000 caracteres, o texto não contém dois espaços em branco consecutivos.;Seu programa deve produzir uma única linha, contendo um único número real, a porcentagem de palavras do texto que contêm a letra dada, com precisão de uma casa decimal.;False;2 / 10;1656;820;49.52%
2458;Setas;Ad-Hoc;4;"Gabriel é um garoto que gosta muito de um jogo onde há várias letras em um tabuleiro e o jogador precisa rapidamente pisar nas letras corretas, de acordo com as instruções na tela, seguindo uma música. Cansado de vencer, Gabriel inventou um novo jogo: agora temos um tabuleiro quadrado, com N células de cada lado, em que cada célula possui uma seta que aponta para uma das quatro posições vizinhas. O jogador primeiro escolhe uma célula inicial para se posicionar e, quando a música começa, ele deve caminhar na direção para onde a seta em que ele está aponta. Ganha o jogo quem pisar em mais setas corretas durante um período de tempo.

O problema é que Gabriel joga tão rápido que quando a seta atual manda ele sair do tabuleiro, ele segue a orientação, muitas vezes quebrando alguns objetos próximos. Quando isso acontece, dizemos que a célula inicial deste jogo não é segura, pois leva a um caminho que termina fora do tabuleiro. A figura abaixo mostra dois tabuleiros.



Ajude Gabriel: dada a configuração do tabuleiro, determine quantas células são seguras para ele iniciar o jogo.";"A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 500), o tamanho do tabuleiro. Cada uma das N linhas seguintes contém N caracteres, com as direções das setas. As direções válidas são:


	‘V’ Aponta para a célula da linha abaixo, na mesma coluna 
	‘<’ (sinal menor-que) aponta para a célula à esquerda, na mesma linha 
	‘>’ (sinal maior-que) aponta para a célula à direita, na mesma linha 
	‘A’ Aponta para a célula da linha acima, na mesma coluna ";Seu programa deve produzir um único inteiro, o número de células seguras.;True;4 / 10;353;187;52.97%
2459;Copa do Mundo;Ad-Hoc;1;"A Nlogônia é atualmente um dos países com maior crescimento econômico no mundo, e seus governantes têm se esforçado para que o país seja mais conhecido e respeitado internacionalmente. Recentemente a Nlogônia foi escolhida para ser a sede da Copa do Mundo de Futebol Amador, e está se preparando para receber os milhares de torcedores que o evento atrai.

Como parte da preparação para a Copa, o governo planeja realizar uma reforma em todo o sistema de transporte intermunicipal, que é hoje composto de uma malha de rodovias e ferrovias, cada rodovia ou ferrovia interligando um par de cidades. Com as rodovias e ferrovias existentes já é possível viajar entre qualquer par de cidades (possivelmente passando por outras cidades no caminho), mas o governo quer oferecer melhores condições de transporte para os visitantes e a população.

Como não há recursos para reformar todas as rodovias e ferrovias, o governo quer escolher um conjunto de rodovias e ferrovias para ser reformado, e já realizou um estudo para estabelecer o custo de reforma de cada rodovia e ferrovia. A escolha deve obedecer aos seguintes critérios:


	ao final da reforma, deve ser possível viajar entre qualquer par de cidades (possivelmente passando por outras cidades) utilizando apenas rodovias ou ferrovias reformadas;
	para priorizar o transporte público, dentre as escolhas que satisfazem a restrição 1, deve-se escolher uma que minimize o número de rodovias reformadas;
	dentre as escolhas que satisfazem as restrições 1 e 2, deve-se escolher uma que minimize o custo total.


Você foi contratado para escrever um programa que, conhecidos os custos de reforma de cada rodovia e ferrovia, determine o menor custo possível para a reforma, obedecidos os critérios estabelecidos.";A primeira linha da entrada contém três inteiros N (2 ≤ N ≤ 100), F (1 ≤ F ≤ N(N − 1)/2) e R (1 ≤ R ≤ N(N − 1)/2), indicando respectivamente o número de cidades, de ferrovias e de rodovias. As cidades são identificadas por inteiros de 1 a N. Cada uma das F linhas seguintes descreve uma ferrovia e contém três inteiros A, B (1 ≤ A < B ≤ N) e C (1 ≤ C ≤ 1000), onde A e B representam cidades e C representa o custo da reforma da ferrovia que interliga A e B. Cada uma das R linhas seguintes descreve uma rodovia e contém três inteiros I, J e K, onde I e J (1 ≤ I < J ≤ N) representam cidades e K (1 ≤ K ≤ 1000) representa o custo da reforma da rodovia que interliga I e J.;Seu programa deve produzir uma única linha, contendo o menor custo possível para o conjunto de reformas de ferrovias e rodovias, obedecendo aos critérios estabelecidos.;False;1 / 10;195;154;78.97%
2460;Fila;Ad-Hoc;6;Com a proximidade da Copa do Mundo, o fluxo de pessoas nas filas para compra de ingressos aumentou consideravelmente. Como as filas estão cada vez maiores, pessoas menos pacientes tendem a desistir da compra de ingressos e acabam deixando as filas, liberando assim vaga para outras pessoas. Quando uma pessoa deixa a fila, todas as pessoas que estavam atrás dela dão um passo a frente, sendo assim nunca existe um espaço vago entre duas pessoas. A fila inicialmente contém N pessoas, cada uma com um identificador diferente. Joãozinho sabe o estado inicial dela e os identificadores em ordem das pessoas que deixaram a fila. Sabendo que após o estado inicial nenhuma pessoa entrou mais na fila, Joãozinho deseja saber o estado final da fila.;A primeira linha contém um inteiro N (1 ≤ N ≤ 50000) representando a quantidade de pessoas inicialmente na fila. A segunda linha contém N inteiros representando os identificadores das pessoas na fila. O primeiro identificador corresponde ao identificador da primeira pessoa na fila. É garantido que duas pessoas diferentes não possuem o mesmo identificador. A terceira linha contém um inteiro M (1 ≤ M ≤ 50000 e M < N) representando a quantidade de pessoas que deixaram a fila. A quarta linha contém M inteiros representando os identificadores das pessoas que deixaram a fila (cada identificador está entre 1 e 100000), na ordem em que elas saíram. É garantido que um mesmo identificador não aparece duas vezes nessa lista.;Seu programa deve imprimir uma linha contedo N − M inteiros com os identificadores das pessoas que permaneceram na fila, em ordem de chegada.;False;6 / 10;2757;659;23.90%
2461;Blefe;Ad-Hoc;8;"Pedro está desenvolvendo um jogo on-line para dois jogadores, em que o objetivo é forçar um erro do adversário, blefando. A questão é que, à medida que o jogo prossegue, mais tempo é necessário para verificar se uma jogada é válida ou não, ou seja, se é um blefe ou não. Daí que Pedro precisa da sua ajuda para implementar um algoritmo rápido para verificar se uma jogada é ou não um blefe.

Considere um conjunto A fixo de N números inteiros, positivos ou negativos, e uma sequência de números inteiros B, inicialmente vazia. Os jogadores se alternam em jogadas que consistem em incluir um número por vez no final da sequência B. Quando chega a sua vez, um jogador deve fazer uma de duas jogadas válidas possíveis: (i) incluir em B qualquer um dos números do conjunto A; (ii) ou incluir em B um número que é a soma de dois números quaisquer que já estejam em B (note: a soma não é de números necessariamente distintos, pode ser a soma de um número com ele mesmo).

Nesta tarefa, você deve escrever um programa que, dado o conjunto A e uma sequência B, diga se todas as jogadas foram válidas, ou mostre qual é a primeira jogada inválida em B.";A entrada consiste de três linhas. A primeira linha contém dois números N (1 ≤ N ≤ 103) e M (1 ≤ M ≤ 104), respectivamente o tamanho do conjunto A e o tamanho da sequência B. A segunda linha contém os N números inteiros do conjunto A. A terceira linha contém os M números inteiros da sequência B.;"Seu programa deve produzir uma única linha. A linha deve conter a palavra “sim” caso todas as jogadas em B sejam válidas; se houver alguma jogada inválida em B, a linha deve conter o primeiro número inválido em B.";False;8 / 10;410;115;28.05%
2462;Voo;Ad-Hoc;9;"João estava navegando na internet, olhando horários de voos de várias companhias aéreas entre diferentes cidades, e notou que em alguns casos voos diretos entre duas cidades tinham tempos diferentes, dependendo se eram voos de ida ou de volta.

A única explicação possível era a de voos ligando cidades localizadas em diferentes fusos horários. João então chegou à conclusão que seria possível determinar a diferença entre os fusos horários, com base apenas nos horários fornecidos pelas companhias aéreas.

Por exemplo, um voo sai da Haquérnia às 10:00 horas e chega na Nerdínia às 22:00 horas, ao passo que outro voo sai da Nerdínia às 10:00 horas e chega na Haquérnia às 18:00 horas. Qual a explicação? Note que ambos os voos utilizam aeronaves idênticas, na mesma rota, um de ida, outro de volta. Na realidade, o voo dura 10 horas e Nerdínia fica em um fuso horário +2 horas à frentedo fuso horário da Haquérnia (portanto o fuso horário de Haquérnia fica −2 horas à frente do fuso horário de Nerdínia).

João anotou então a tabela de horários de várias companhias aéreas, porém cometeu um engano. Esqueceu-se de anotar datas de partida e chegada. Por exemplo, se a partida de um voo é às 18:00 e a chegada é às 14:00, João não sabe dizer se a data de chegada é a seguinte à da partida, em voo que dura 20 horas, entre cidades no mesmo fuso horário, ou se a data de chegada é a mesma da de partida, com uma duração de voo de uma hora, em que a cidade destino está em fuso horário com cinco horas a menos do fuso horário da cidade origem.

Sua tarefa é ajudar João a determinar a duração do voo e a diferença entre os fusos horários de chegada e de partida de cada par de voos da tabela, um de ida outro de volta, mesmo sem saber as datas dos voos.";A entrada é composta de apenas uma linha, com 4 horários, separados por um espaço em branco. Esses horários envolvem voos entre duas cidades, A e B e são, respectivamente, pA, cB, pB e cA. O horário pA indica a hora da partida de um voo de A para B, hora local de A. O horário cB indica a hora de chegada do mesmo voo na cidade B, hora local de B. O horário pB é a hora de partidado voo de volta, de B para A, hora local de B. O horário cA é a hora de chegada do voo de volta, hora local de A.;A saída consiste de uma linha, informando a duração do voo em minutos e quantas horas B está à frente de A, em termos de fusos horários. Os dois valores devem ser separados por um espaço em branco.;False;9 / 10;778;133;17.10%
2463;Corredor;Ad-Hoc;3;"Bruninho está programando um personagem virtual para o próximo desafio de um jogo de aventura em que, numa das fases, o personagem tem que entrar em um corredor, percorrer algumas salas e depois sair do corredor. Ele pode entrar apenas uma vez, e passar por cada sala apenas uma vez. Todas as salas possuem uma porta de entrada e uma de saída, como ilustra a parte (a) da figura abaixo. Ao passar por uma sala o jogador ganha um certo número de vidas (que pode ser negativo!). O objetivo é passar pelo corredor coletando a maior quantidade possível de vidas! Por sorte, sempre existe ao menos uma sala onde se ganha um número positivo de vidas.



No exemplo acima, o personagem de Bruninho pode ganhar, no máximo, 12 vidas, por exemplo, entrando pela sala 2 e saindo pela sala 4, como mostrado na parte (b) da figura. Nesta tarefa, você deve escrever um programa que, dados os números de vidas correspondentes a cada sala do corredor, calcule a quantidade máxima de vidas que será possível ganhar.";A entrada é composta por duas linhas. A primeira linha contém um inteiro N (1 ≤ N ≤ 50000), o número de salas no corredor. A segunda linha contém N números inteiros (entre −100 e 100), positivos ou negativos, indicando a quantidade de vidas que se ganha em cada sala.;Seu programa deve imprimir uma linha, com o número máximo de vidas que é possível ganhar.;True;3 / 10;554;299;53.97%
2464;Decifra;Ad-Hoc;2;"Dimas é um renomado investigador de roubos a antiguidades e obras de arte, que sempre é chamado para casos intrigantes que necessitam de bastante trabalho mental. Desta vez, o quadro que sumiu de um conhecido museu na França foi a Donalisa, do pintor Leonardo da Silva. Este é um caso bastante especial, visto que o ladrão deixou uma frase escrita na parede, aparentemente criptografada. Que desafio para Dimas! É que ele não tem muito conhecimento nessa área de criptografia. Porém, ele usou de suas excelentes observações e conseguiu perceber que a frase foi escrita através de alguma permutação inversível do alfabeto.

Uma permutação inversível do alfabeto é apenas uma troca entre suas letras, duas a duas. Por exemplo, todo “a” será trocado por “m” e, portanto, todo “m” será trocado por “a”. Dessa forma, veja que dado um texto original, se aplicarmos a permutação, teremos uma frase criptografada; e se aplicarmos a mesma permutação novamente, teremos o texto original recuperado!

Apesar de parecer fácil, a tradução se tornou uma tarefa difícil, já que a frase é bastante longa. É por isso que Dimas resolveu pedir sua ajuda, um exímio programador, para traduzir a frase criptografada, recuperando o texto original, e resolver o mistério!";"A primeira linha da entrada contém uma sequência de 26 letras minúsculas distintas, representando a permutação inversível usada na frase criptografada. A permutação é a seguinte: a letra “a” é trocada pela primeira letra dessa sequência; a letra “b” é trocada pela segunda letra dessa sequência; a letra “c” pela terceira; e assim por diante, seguindo a sequência padrão do alfabeto: abcdefghijklmnopqrstuvwxyz. A segunda linha da entrada consiste de uma frase criptografada, contendo apenas letras minúsculas (a frase criptografada não excede 104 caracteres).";Seu programa deve imprimir o texto original, de acordo com a permutação fornecida.;False;2 / 10;867;540;62.28%
2465;Passa Bolinha;Ad-Hoc;1;"O professor Miguel desafiou os alunos do colégio onde ele leciona com uma brincadeira que exige muita atenção! No pátio do colégio, os alunos formam um quadrado com N fileiras e N colunas, de modo que a primeira fileira esteja voltada para o norte. Cada um dos N2 alunos segura uma bandeira e tem um número colado na camiseta. Inicialmente, as bandeiras estão abaixadas e os alunos estão voltados para o norte. Todos os alunos têm que seguir exatamente o mesmo comportamento:


	Ao receber a bolinha, levanta sua bandeira e realiza a seguinte ação quatro vezes, em sequência:


– Vira-se 90 graus no sentido horário. Se o colega que ficou à sua frente tiver um número na camiseta maior ou igual ao seu, e estiver com a bandeira abaixada, passa a bolinha ao colega e aguarda que ele lhe devolva a bolinha;


	Devolve a bolinha a quem lhe passou a bolinha inicialmente.


Nesta tarefa, você deve escrever um programa que, dados os números nas camisetas de cada aluno, e a posição do aluno a quem o professor Miguel vai entregar a bolinha, calcule quantas bandeiras estarão levantadas ao final, quando esse aluno devolver a bolinha ao professor. Por exemplo, a parte direita da figura abaixo mostra que sete alunos vão levantar a bandeira se o professor entregar inicialmente a bolinha ao aluno na fileira 3, coluna 1, como indicado na parte esquerda da figura.";A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 100), o número de fileiras (que é igual ao de colunas). A segunda linha contém dois números, I e J (1 ≤ I, J ≤ N), indicando respectivamente, a fileira e a coluna do aluno a quem o professor Miguel entregará a bolinha. As N linhas seguintes contém N inteiros cada uma, indicando os números que estão nas camisetas dos alunos (os números nas camisetas estão entre 1 e 9, inclusive).;Seu programa deve imprimir apenas uma linha contendo um inteiro, o número de bandeiras que estarão levantadas ao final.;True;1 / 10;316;223;70.57%
2466;Sinuca;Ad-Hoc;2;"Nadine e Celine inventaram um passatempo com bolas de sinuca, pretas e brancas, que são colocadas uma por vez na mesa, de acordo com uma regra fixa. Agora elas estão tentando descobrir, com um computador, a cor da bola que vai ser colocada por último! Você pode ajuda-las?

Funciona assim. No início, são colocadas N bolas formando a primeira fileira. Em seguida, um triângulo equilátero é formado, fileira a fileira, de acordo com a seguinte regra. Ao se colocar uma bola na nova fileira, ela ficará encostada em duas bolas da fileira anterior e sua cor será:


	Preta, se estiver encostada em duas bolas de mesma cor;
	Branca, se estiver encostada em duas bolas de cores diferentes.


A figura abaixo ilustra a formação de um triângulo para N = 5.



Nesta tarefa, você deve escrever um programa que, dadas as cores das bolas da primeira fileira, descubra qual é a cor da bola que será colocada por último. Na figura, foi uma bola branca!";A entrada é composta por duas linhas. A primeira linha contém um inteiro N (2 ≤ N ≤ 64), o número de bolas da primeira fileira. A segunda linha contém N inteiros representando as cores das bolas da primeira fileira. Se a bola é preta, o número será “1”, se for branca, será “-1”.;"Seu programa deve imprimir uma linha contendo a palavra “preta”, se a última bola for preta; ou a palavra “branca”, se for branca.";True;2 / 10;449;303;67.48%
2467;Frequência;Ad-Hoc;10;"Byteland é uma cidade bastante conhecida por propor variados desafios aos seus habitantes. Recentemente, o prefeito de Byteland, Joãozinho, decidiu propor um desafio que ele gosta de chamar de Tabuleiro da Frequência.

A brincadeira ocorre da seguinte forma. Inicialmente, um tabuleiro com dimensões N × N é dado contendo apenas 0’s. Depois disso, Q operações são propostas, podendo ser de 4 tipos:


	1 X R: Atribuir o valor R a todos os números da linha X;
	2 X R: Atribuir o valor R a todos os números da coluna X;
	3 X: Imprimir o valor mais frequente na linha X;
	4 X: Imprimir o valor mais frequente da coluna X.


Joãozinho é muito bom com computadores, mas também é bastante preguiçoso. Sabendo que você é um dos melhores programadores do mundo, ele decidiu pedir sua ajuda para resolver este problema.";A primeira linha da entrada é composta por dois inteiros N e Q (1 ≤ N, Q ≤ 105), representando, respectivamente, o tamanho do tabuleiro e a quantidade de operações. As próximas Q linhas da entrada vão conter as Q operações. O primeiro inteiro de cada linha vai indicar o tipo da operação. Caso seja 1 ou 2, será seguido por mais dois inteiros X (1 ≤ X ≤ N) e R (0 ≤ R ≤ 50). Caso seja 3 ou 4, será seguido por apenas mais um inteiro X.;Para cada operação do tipo 3 ou 4, seu programa deve produzir uma linha, contendo o valor da resposta correspondente. Se uma linha ou coluna tiver dois ou mais valores que se repetem o mesmo número de vezes, você deve imprimir o maior deles. Por exemplo, se uma linha tem os valores [5,7,7,2,5,2,1,3], tanto o 2, 5 e 7 se repetem duas vezes, então a resposta será 7, pois é o maior deles.;False;10 / 10;171;45;26.32%
2468;Mapa;Ad-Hoc;6;"Byteland é uma cidade bastante movimentada, cujo prefeito, Joãozinho, vem lutando recentemente por sua inclusão no grupo das cinco cidades mais importantes de Byteworld. Para uma cidade ser considerada importante em Byteworld, ela precisa seguir alguns critérios. Antes de tudo, vamos definir Byteland, que é uma cidade como qualquer outra, onde esquinas se conectam através de ruas de mão dupla. Sabe-se também que existe um e somente um caminho, sem repetir esquinas, entre qualquer par de esquinas. Além disso, cada rua pode ser considerada importante ou não. Caso ela seja importante, a rua é pintada de branco e caso não seja, é pintada de azul.

Para saber se uma cidade é importante ou não em Byteworld é necessario calcular um valor E: a quantidade de pares de esquinas (A, B) tal que existe ao menos uma rua importante no caminho entre A e B. Note que (A, B) e (B, A) são o mesmo par!

O prefeito de Byteland resolveu pedir sua ajuda para calcular o valor E e saber, assim, se Byteland é ou não uma cidade importante para Byteworld.";A primeira linha da entrada contém um inteiro N (2 ≤ N ≤ 105) indicando a quantidade de esquinas em Byteland. As próximas N − 1 linhas da entrada contêm cada uma três inteiros, A, B (1 ≤ A, B ≤ N) e C (0 ≤ C ≤ 1), indicando que existe uma rua entre as esquinas A e B pintada da cor C. Caso C seja 1, a rua é branca e importante, caso seja 0, a rua é azul e não importante.;Seu programa deve produzir uma única linha, contendo um único inteiro, o valor E definido acima.;False;6 / 10;193;95;49.22%
2469;Notas;Ad-Hoc;4;O professor Arquimedes precisa da sua ajuda para descobrir qual é a nota mais frequente entre as notas que os alunos dele tiraram na última prova. A turma tem N alunos e seu programa deve imprimir a nota que aparece mais vezes na lista de N notas. Se houver mais de uma nota mais frequente, você deve imprimir a maior delas! Por exemplo, se a turma tiver N = 10 alunos e as notas forem [20, 25, 85, 40, 25, 90, 25, 40, 55, 40], as notas mais frequentes são 25 e 40, ocorrendo três vezes cada. Seu programa, então, deve imprimir 40.;A entrada consiste de duas linhas. A primeira linha contém um número inteiro N, o número de alunos na turma. A segunda linha contém N inteiros, que é a lista de notas dos alunos.;Seu programa deve imprimir apenas uma linha contendo apenas um número, a nota mais frequente da lista.;False;4 / 10;1509;714;47.32%
2470;Jogo da Memória;Ad-Hoc;5;"Pedro e Paulo resolveram complicar um pouco o tradicional Jogo da Memória, em que os jogadores precisam virar duas cartas iguais. Eles colocam as cartas no chão, viradas para baixo, e fazem algumas linhas ligando pares de cartas, usando giz, de modo que para qualquer par de cartas (A, B) existe uma e apenas uma sequência de cartas distintas que leva de A até B através das linhas que eles desenharam. Com isso, ao virar duas cartas, o jogador ganha uma quantidade de pontos igual ao tamanho da sequência de linhas entre as duas cartas, se elas forem iguais. Se forem diferentes, o jogador perde aquela quantidade de pontos.

Pedro e Paulo, agora, estão estudando qual é a melhor estratégia para esse jogo e precisam da sua ajuda para resolver uma tarefa específica: dadas as ligações entre as N cartas, calcular a soma dos tamanhos das sequências entre todos os N/2 pares de cartas iguais!

O jogo possui N cartas, de índices 1 até N. Cada carta possui a figura de um número de 1 até N/2 desenhada. Exatamente duas cartas possuem a figura de cada número entre 1 e N/2.";A primeira linha da entrada contém o número de cartas N (2 ≤ N ≤ 50000, N é par). A segunda linha da entrada contém N inteiros Ci (1 ≤ Ci ≤ N/2) , 1 ≤ i ≤ N, indicando qual número está anotado na carta de índice i. Cada uma das N −1 linhas seguintes contém dois números A e B (1 ≤ A, B ≤ N), indicando que existe uma linha desenhada entre as cartas de índices A e B.;Seu programa deve imprimir uma linha contendo um inteiro, a soma dos tamanhos das sequências entre todos os N/2 pares de cartas iguais.;False;5 / 10;184;112;60.87%
2471;Quadrado;Ad-Hoc;2;"Um quadrado quase mágico, de dimensões N × N, é um quadrado que obedece à seguinte condição. Existe um número inteiro positivo M tal que: para qualquer linha, a soma dos números da linha é igual a M; e para qualquer coluna, a soma dos números da coluna é também igual a M. O quadrado seria mágico, e não apenas quase mágico, se a soma das diagonais também fosse M. Por exemplo, a figura abaixo, parte (a), apresenta um quadrado quase mágico onde M = 21.



Laura construiu um quadrado quase mágico e alterou, propositalmente, um dos números! Nesta tarefa, você deve escrever um programa que, dado o quadrado quase mágico alterado por Laura, descubra qual era o número original antes da alteração e qual número foi colocado no lugar. Por exemplo, na parte (b) da figura, o número original era 1, que Laura alterou para 7.";A primeira linha da entrada contém apenas um número N (3 ≤ N ≤ 50), representando a dimensão do quadrado. As N linhas seguintes contêm, cada uma, N números inteiros (entre 1 e 10000), definindo o quadrado. A entrada é garantidamente um quadrado quase mágico onde exatamente um número foi alterado.;Seu programa deve imprimir apenas uma linha contendo dois números: primeiro o número original e depois o número que Laura colocou no seu lugar.;True;2 / 10;352;226;64.20%
2472;Tapetes;Ad-Hoc;1;"Nlogonia é conhecida por sua indústria de tradicionais tapetes quadrados, que são produzidos apenas com dimensões inteiras, para todos os números inteiros positivos. Quer dizer, os tapetes são de dimensão 1 × 1, 2 × 2, 3 × 3, e assim por diante. João Tapetão, grande empresário do setor, está planejando o próximo carregamento para exportação, que deve ser de exatamente N tapetes. Os tapetes são sempre enrolados e colocados em um tubo, um após o outro. Por exemplo, para um carregamento de N = 4 tapetes de dimensões 2 × 2, 4 × 4, 6 × 6 e 3 × 3, será necessário um tubo de comprimento 2 + 4 + 6 + 3 = 15. A questão é que o preço do tapete é proporcional à sua área, de modo que quanto maior a soma das áreas dos tapetes, maior o lucro do Tapetão. No exemplo anterior, a soma das áreas é 22 + 42 + 62 + 32 = 65. Só que daria para lucrar mais, com o mesmo tubo de comprimento 15, se o carregamento fosse com quatro tapetes de dimensões 1 × 1, 4 × 4, 7 × 7 e 3 × 3, cuja soma das áreas dá 75. Será que daria para lucrar ainda mais?

O navio chegou e Tapetão precisa embarcar o carregamento. Há apenas um tubo de comprimento L e o carregamento deve conter exatamente N tapetes. Qual é a maior soma possível das áreas dos N tapetes que poderá ser transportada?";A primeira e única linha da entrada contém dois inteiros, L e N (N ≤ L, 1 ≤ L ≤ 106 e 1 ≤ N ≤ 105), o comprimento do tubo e a quantidade de tapetes que deve transportada, respectivamente.;Seu programa deve produzir uma única linha, contendo apenas um inteiro, a maior soma possível das áreas dos tapetes.;False;1 / 10;700;428;61.14%
2473;Loteria;Ad-Hoc;1;"Flavinho sabe que a chance de ganhar na loteria é bem pequena. Ele gosta muito de estudar probabilidade! Mas, justamente por entender de probabilidades, Flavinho segue o ditado, “quem não arrisca, não petisca!”, e faz um jogo toda semana.

Na loteria preferida dele, o jogador aposta seis números entre 1 e 99. No sorteio, também são escolhidos seis números ganhadores entre 1 e 99. Quem acerta 3, 4, 5 ou 6 números ganha como prêmio, respectivamente, um “terno”, uma “quadra”, uma “quina” ou uma “sena”.

Nesta tarefa, você deve escrever um programa que diga qual foi o prêmio que Flavinho ganhou, dados os seis números que ele apostou e os seis números que foram sorteados.";A entrada consiste de duas linhas apenas. Na primeira linha são dados seis números inteiros distintos entre 1 e 99, representando a aposta do Flavinho. A segunda linha contém os seis números inteiros distintos sorteados.;"Seu programa deve imprimir uma linha contendo uma palavra: “terno”, “quadra”, “quina” ou “sena”; caso Flavinho tenha acertado, respectivamente, 3, 4, 5, ou 6 números. Caso ele tenha acertado menos do que 3 números, imprima a palavra “azar”.";False;1 / 10;2063;1370;66.41%
2474;Burlando o Sistema;Matemática;9;"O Natal está chegando, e com ele o Papai-Noel precisa avaliar o quanto cada criança se comportou durante o ano, de forma a definir quantos presentes cada uma delas irá receber neste ano. O critério de avaliação funciona de uma maneira bem peculiar:

Primeiramente, os assistentes do Papai-Noel, capazes de observar todas as crianças do mundo, atribuem para cada uma um número inteiro N. Em seguida, a quantidade de presentes que uma criança irá receber será igual a N-D, onde D é o maior divisor de N, diferente de N.

Pensando em sabotar a distribuição de presentes em favor de algumas crianças, um grupo de assistentes decidiu modificar o processo. Nesta nova versão, o valor N é subdividido em Q ""partes"", cada uma valendo ni (1 < ni), de forma que N = Σni, (1 ≤ i ≤ Q), e a quantidade de presentes é calculada individualmente para cada uma destas partes. A quantidade total de presentes que uma criança receberá nesta nova abordagem é igual a soma das quantidades de presentes para todos os valores ni.

Sua tarefa é, dada a avaliação ​N de cada criança, ajudar os assistentes a fazer esta divisão de forma que a quantidade de presentes recebida pela criança seja a maior possível. Note que os assistentes são livres para definir a quantidade de partes Q, bem como o valor de cada uma destas partes, desde que a soma de todas seja exatamente N.";A entrada consiste do valor N para várias crianças. (1 < N ≤ 1010);Para cada criança, imprima a maior quantidade possível de presentes que ela pode receber, considerando que a escolha de Q e a subdivisão são feitas de forma ótima.;False;9 / 10;297;87;29.29%
2475;Confecção de Presentes;Paradigmas;10;"O natal está chegando e o Papai Noel precisa de sua ajuda para fabricar os presentes que ele entregará.

Neste ano Papai Noel separou todos os presentes em uma fila e atribuiu para cada um deles um custo para a sua confecção, porém como estamos vivendo um ano de crise Noel só conseguiu contratar A ajudantes e terá que dividir os presentes entre eles para a fabricação.

Cada ajudante ficará responsável pela fabricação de alguns presentes e os mesmos deverão estar adjacentes na fila. Porém como Noel quer diminuir os custos ele definiu o valor que será pago para cada ajudante como sendo a soma dos custos de cada presente que ele irá fabricar vezes a quantidade de presentes fabricados.

Será dado a você a lista de presentes, o total de ajudantes e o custo de cada presente e você deverá ajudar o Noel a descobrir o menor valor que será pago no total para fabricar todos os presentes.

Supondo que Noel tenha 4 presentes com os valores {5, 1, 10, 2} e 2 ajudantes e a divisão seja feita da seguinte forma:
Ajudante 1 irá fabricar os presentes 1, 2 e 3 com o total de: (5 + 1 + 10) * 3 = 48
Ajudante 2 irá fabricar os presentes 4 com o total de: (2) * 1 = 2
Nesta configuração o total a ser pago será 50, porém um configuração melhor seria o ajudante 1 ficar com os presentes 1 e 2 e o ajudante 2 com os presentes 3 e 4, totalizando 36.";"A primeira linha contêm dois inteiros P e A (1 ≤ P ≤ 10⁴, 1 ≤ A ≤ 500), indicando respectivamente o total de presentes e o total de ajudantes disponíveis.

Segue então P linhas, contendo um inteiro Xi (1 ≤ Xi ≤ 10⁹), indicando o custo de fabricação do presente i.";Você deverá imprimir o menor custo para a fabricação de todos os presentes, conforme descrito no texto.;False;10 / 10;315;73;23.17%
2476;Entregas do Noel;Grafos;10;"Por incrível que pareça, Papai Noel ainda não começou a fabricar os presentes que serão entregues no natal. Para ele não se atrasar foi bolado um plano para agilizar as entregas e a fabricação.

O plano de Noel consiste em escolher duas crianças (A e B), para serem as primeiras a receberem os presentes, mas o que ele reparou é que no caminho entre a casa da criança A até a casa da criança B, ele acabará passando por outras crianças que também enviaram suas cartinhas com o que gostariam de ganhar. Portanto Noel decidiu que irá entregar todos os presentes das crianças que estão entre as casas A e B em apenas uma viagem.

A parte da entrega é muito simples para o Noel, mas ele precisa otimizar a compra de matérias-primas para a confecção de todos os presentes, e é aqui que você entra para o auxiliar.

Será dado a você o mapa com todas as casas onde ocorrerá entregas, que consiste em N casas, com N - 1 ligações, tendo exatamente um caminho entre cada uma delas, como Noel sempre viaja de trenó, todas as ligações podem ser usadas nos dois sentidos. Após isto Noel irá fazer diversas perguntas do tipo A B, e você deverá responder quantos presentes distintos ele terá que entregar no caminho entre a casa A e a casa B.";"A primeira linha contêm dois inteiros N e M (2 ≤ N ≤ 10⁵, 1 ≤ M ≤ 10⁵), indicando respectivamente o total de casas e o total de perguntas que Noel irá fazer.

Na próxima linha terá a descrição de cada presente que será entregue nas casas. Cada presente será uma palavra com letras minúsculas contendo no máximo 20 caracteres. O presente na posição i, indica o que a criança na casa i deseja ganhar.

Segue então N - 1 linhas, contendo dois inteiros A e B (1 ≤ A, B ≤ N, A != B), indicando que existe uma ligação entre as casas A e B.

M linhas seguem com dois inteiros A e B, representando a pergunta de Noel.";Para cada pergunta de Noel, você deverá imprimir a quantidade distinta de presentes que serão entregues.;False;10 / 10;404;108;26.73%
2477;Rede de Distribuição;Grafos;10;"O Natal está chegando e como muitas pessoas ainda não enfeitaram suas casas, o chanceler Jack Redd está distribuindo as luzes vermelhas para as cidades-sede. Como são muitas luzes para distribuir, Jack entregou um mapa a você, que contém informações sobre a cidade, a unidade central, seus pontos de decoração e as ruas. observe a imagem.

						

					
					Na imagem, a unidade central recebe as luzes e envia para os pontos de decoração 1, 2, 3 e 4, respectivamente. Cada ponto de decoração precisa de uma certa quantidade de luzes que é medida pelo: tamanho do agrupamento de pontos ( . ) vezes a distância mínima deste agrupamento até a unidade central. É possível andar por um ponto de decoração se ele for maior que 1 e se por acaso os fios não conseguirem chegar em um ponto de decoração, a cidade não fará mais parte do show de Natal.
					
					Um ponto decorativo é formado por um grupo de pontos ( . ). É necessário chegar com os fios em todos os pontos de decoração, para que a festa seja grande e bonita. Um ponto decorativo pode passar fios para seus adjacentes.
					A unidade central é definida pelo maior agrupamento de pontos ( . ) do mapa. Jack revelou apenas para você, por questões de segurança. Como os fios já fazem parte da unidade central, preste atenção em que partes precisam mesmo de fios, mais precisamente onde tem ( + ) ou em seus pontos decorativos. Os fios podem ser encaminhados para as quatro direções (Norte, Sul, Leste e Oeste). Com base nestas informações, será que você pode distribuir as luzes para a festa?";A entrada consiste de várias instâncias. A primeira linha de cada instância contém dois inteiros N e  M (1 ≤ N, M ≤ 103), que correspondem ao número de linhas e colunas do mapa entregue por Jack. As N  linhas seguintes contém M  caracteres, definidos como ( . ), ( + ) ou ( # ), representando respectivamente a unidade central e seus pontos de decoração, um ponto válido a ser explorado e uma barreira que impede a passagem dos fios. A entrada termina com final de arquivo (EOF).;"Para cada instância, seu programa deverá imprimir a mensagem ""Instance #H:"", onde H é o número da instância, sequencial e crescente (de 01 a 99). Em seguida imprimir o tamanho da unidade central, o caminho mínimo para chegar em todos os pontos de decoração e quantas luzes a cidade precisa. Se por acaso os fios não puderem alcançar todos os pontos de decoração o seu programa deverá imprimir a mensagem  ""Network Error"".  Seu programa deverá imprimir uma linha em branco entre duas instâncias consecutivas.";True;10 / 10;76;7;9.21%
2478;Acerte o Presente;Ad-Hoc;4;"Na família Natalícia já é tradição a realização do amigo secreto (ou amigo oculto) na véspera de natal. Todos os anos a família inteira se reune para a troca de presentes. É um momento de muita diversão e descontração.

Neste ano, a caçula Jocelina resolveu deixar o momento ainda mais divertido: ela propôs que todos os participantes colocassem em uma lista 3 sugestões para presentes. A partir dessa lista ela pensou em montar um programa que, colocado um nome N e um presente P, o programa retorna se a pessoa acertou ou não no presente para seu amigo secreto.

Só que Joce não sabe muito de programação, e acabou precisando de ajuda para montar esse programa. Você, sendo tomado(a) pelo espírito natalino, aceitou o desafio!";A entrada consiste em diversos casos de teste e termina com EOF. A primeira linha contém um número X (3 ≤ X ≤ 20) que representa a quantidade de participantes no amigo secreto. Em seguida, as próximas X linhas irão conter o nome N e as 3 opções de presentes desejados P. Em seguida, as próximas linhas irão conter um nome N e um presente P, representando as consultas realizadas no programa.;"Seu programa deverá informar se a pessoa acertou ou não na escolha do presente, retornando ""Uhul! Seu amigo secreto vai adorar o/"" caso acerto e, se não, ""Tente Novamente!"".";False;4 / 10;964;360;37.34%
2479;Ordenando a Lista de Crianças do Papai Noel;Ad-Hoc;1;"Papai Noel está nos preparativos finais para a entrega dos presentes para as crianças do mundo todo pois o natal está chegando mais uma vez. Olhando suas novas listas de crianças que iram ganhar presentes neste ano ele percebeu que o duende estagiário (que havia ficado responsável por fazer as listas) não havia colocado os nomes em ordem alfabética.

				Como o Papai Noel é um homem muito organizado ele deseja que cada lista de crianças possua, no seu final, o total de crianças que foram bem comportadas neste ano e um total das que não foram. Assim ele pode comparar a quantidade de crianças que se comportam este ano com as dos anos anteriores.

				Para ajudar o bom velhinho, seu dever é criar um programa que leia todos os nomes da lista e imprima os mesmos nomes em ordem alfabética. No final da lista, você deve imprimir o total de crianças que foram e não foram comportadas neste ano.";A entrada é composta por vários nomes. O primeiro valor N (0 ≤ N ≤ 100), indica quantos nomes tem na lista. As N linhas seguintes, contem um caracter especial correspondente ao comportamento da criança (+ indica que a criança foi bem comportada, - indica que a criança não foi bem comportada). Após o caracter especial, segue o nome da criança com no máximo 20 caracteres.;Para cada lista de crianças, você deve imprimir os nomes em ordem alfabética. Após imprimir os nomes das crianças, você deve mostrar o total de crianças que se comportaram bem ou mal durante o ano.;False;1 / 10;2996;1510;50.40%
2480;Luzes Vermelhas;Paradigmas;9;"Neste ano Papai Noel deu uma ordem bem incomum ao chanceler Jack Redd, que organiza as lâmpadas para enviar para todas as sedes. Noel quer que elas sejam organizadas de uma forma específica e parece que não é uma tarefa muito simples para Jack, que precisa muito da sua ajuda.

					A unidade central de distribuição das lâmpadas está localizada no Sul do Brasil, mais precisamente em Erechim. Jack quer organizar o estoque de luzes para distribuir para as cidades-sede. O estoque de luzes é grande. São muitas caixas de luzes com diferentes tipos: R-Vermelhas, W-Brancas, G-Verdes, S-Pratas.

					 Jack quer que você organize as colunas de caixas de acordo com as cores. Primeiro as vermelhas, depois as brancas, seguidas pelas verdes e por último as pratas. Além disso, Jack quer que as maiores caixas fiquem embaixo. O tamanho da caixa é representado pelo número. Por exemplo 8R significa uma caixa vermelha de tamanho 8. Você pode observar na figura abaixo a primeira coluna em destaque, já ordenada na forma que Jack quer. Essa imagem representa o primeiro caso de teste deste problema.

					

					Quando movimentamos uma caixa, a linha correspondente desta caixa de luz é alterada junto (a imagem mostra que todas as linhas são ligadas por um fio). Mas tem um pequeno detalhe. Quando a primeira coluna é ordenada de acordo com o critério estabelecido por Jack, ela então é então retirada e seus fios são cortados. O processo inicia novamente com a próxima coluna (a que tem 6R no topo) é repetido até que não haja mais nenhuma coluna para ordenar.

					Será que você pode ajudar Jack nesta tarefa, indicando quantos movimentos de caixa são necessários para fazer esta organização desejada por Noel?";A primeira linha de cada instância contém dois inteiros N (1 ≤ N ≤ 20) e M (1 ≤ M ≤ 105), que correspondem ao número de linhas e colunas do estoque. As N  linhas seguintes contém M  caixas de luzes, definidas como [Q]T. Q  (1 ≤ Q ≤ 109) corresponde a quantidade de luzes e T  o tipo de luz R, W, G ou S  respectivamente. A entrada termina com final de arquivo (EOF).;"Para cada instância, imprimir a mensagem ""Instance H:"", onde H é o número da instância, sequencial e crescente (de 01 a 99). Em seguida imprimir o resultado das operações de movimento das caixas e o total de luzes vermelhas encontradas no estoque. Imprimir uma linha em branco entre duas instâncias consecutivas.";True;9 / 10;76;29;38.16%
2481;É Uma Cilada Bino;Paradigmas;9;"Bino é um caminhoneiro, e foi encarregado para levar os presentes de natal para N cidades. As cidades são dispostas em uma linha, e Bino quer entregar os presentes o mais rápido possível. Bino inicia sua jornada na posição 0 e pretende visitar todas as N cidades.

Bino viaja com seu amigo Pedro, um duende enviado pelo Papai Noel para protegê-lo.

Cada cidade i possui uma posição Xi e um valor de comida Ci.

Na visita de uma cidade, Bino pode optar por comprar comida para Pedro. Quando Bino opta por comprar comida para Pedro em uma cidade i, ele paga Ci moedas de ouro pela comida, porém Pedro passa a produzir Xi moedas por cada unidade de distância percorrida. Como forma agradecimento, Bino sempre paga a comida para Pedro na cidade N.

Perceba que se Pedro já estiver produzindo K moedas de ouro, e Bino comprar comida em outra cidade i, Pedro vai começar a produzir Xi moedas de ouro, e não K+ Xi.

Bino quer saber qual a maior quantidade de moedas de ouro que pode conseguir durante a viajem da cidade 1 até a cidade N.

É garantido que as cidades serão fornecidas na entrada por ordem crescente de posição. Também é garantido que não existem duas cidades situadas na mesma posição.";A primeira linha da entrada contém um inteiro Q (1 ≤ Q ≤ 100) representando a quantidade de casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 105), representando a quantidade de cidades. Cada uma das próximas N linhas do caso de teste contém 2 inteiros Xi (1 ≤ Xi ≤ 107), e Ci (1 ≤ Ci ≤ 1010), representando a posição e o valor da comida na cidade i (1 ≤ i ≤ N), respectivamente.;Para caso de teste, caso seja possível Bino ganhar moedas na viagem, imprima a quantidade máxima de moedas que Bino pode ganhar, caso contrário, imprima a quantidade mínima que ele pode perder. Siga a grafia dos exemplos.;False;9 / 10;420;95;22.62%
2482;Etiquetas de Noel;Estruturas e Bibliotecas;2;"Como de costume, neste ano Noel recebeu muitos pedidos de presentes. Só que em função de alguns imprevistos, não terá como entregar todos os presentes pessoalmente neste ano. Daí então decidiu utilizar o velho e bom correio tradicional, para alguns pedidos que podem ser entregues por carta.

				Para esta tarefa, pediu ajuda ao elfo Evergreen Xadada, para que ele imprimisse etiquetas a todos os envelopes que serão destinados a algumas destas crianças, cujo pedido pode ser entregue por carta. Cada uma destas etiquetas deverá conter apenas o nome da criança e a saudação ""Feliz Natal"" no respectivo idioma desta criança. Para auxiliar nesta tarefa, Noel disponibilizou uma tabela com vários idiomas e o nome e o país de cada uma das crianças selecionadas, de acordo com o exemplo abaixo. Você deve ajudar Evergreen fazendo um programa que imprima estas etiquetas.";"A entrada é composta por um único caso de teste. A primeira linha de entrada contém um inteiro N (1 < N < 100) que indica a quantidade de traduções da palavra ""Feliz Natal"" existentes na entrada. As próximas N * 2 linhas contém respectivamente o nome de uma língua seguido da tradução de ""Feliz Natal"" para esta língua. Segue um inteiro M (1 < M < 100) que indica a quantidade de crianças que receberão as cartas. As próximas M * 2 linhas conterão, respectivamente, o nome da criança e a língua nativa desta criança.

				Obs.: É garantido que nenhuma tradução apareça repetida ou duplicada e os países de todas as crianças estejam presentes na relação dos países.";Seu programa deverá imprimir todas as etiquetas de acordo com a entrada, conforme o exemplo abaixo, sempre com uma linha em branco após a impressão de cada uma das etiquetas, inclusive após a última etiqueta.;True;2 / 10;1529;898;58.73%
2483;Feliz Nataaal!;Iniciante;1;"Você fica tão feliz no natal que tem vontade de gritar para todo mundo: ""Feliz natal!!"". Pra colocar toda essa felicidade pra fora, você montou um programa que, colocado um índice I de felicidade, seu grito de natal é mais animado.";A entrada é composta por um inteiro I (1 < I ≤ 104) que representa o índice de felicidade.;"A saída é composta pela frase ""Feliz natal!"", sendo repetidas I vezes a última letra a da frase. Uma quebra de linha é necessária após a impressão da frase.";False;1 / 10;9787;6097;62.30%
2484;Abracadabra;Strings;5;"No século XXII, uma doença devastadora atingiu mais da metade da população mundial. O governo está desesperado em busca de uma cura, pois há um grande risco de que a doença dizime toda a população. Os hospitais estão lotados e a aflição no olhar das pessoas é notável.

Nesta época, poucas pessoas têm acesso livre à internet, mas você é uma delas. Ao vasculhar a rede, você encontrou alguns textos dispersos sobre um amuleto de uma palavra mágica escrita em forma de um triângulo que cura doenças letais. Incrédulo mas esperançoso, você se lembrou de que a biblioteca do Sr. Severino tinha um livro um tanto inusitado, com a seguinte capa:



Então, você foi imediatamente à biblioteca. Chegando lá, ao ler somente o prefácio do livro, já confirmou tudo o que viu sobre os amuletos na rede, e em seguida, deu a si mesmo uma missão: espalhar palavras mágicas na rede em forma de um triângulo a fim de alertar as pessoas de que pode haver uma cura para a doença. Por consequência, se forem construídos amuletos em massa com palavras mágicas e estes forem entregues às pessoas, a doença pode ser aniquilada e a população, salva.

Para completar tal missão, você deverá começar pelo passo mais simples: escrever um programa que receba uma palavra e a transforme em um triângulo, tal como na capa do livro.";A entrada contém vários casos de teste. Cada caso de teste é composto por uma palavra de 2 até 100 caracteres e sem espaços. A entrada termina com EOF (fim de arquivo).;Para cada caso de teste, imprima a palavra recebida em forma de um triângulo e lembre-se de deixar um espaço em branco entre cada letra, mas não deixe espaço em branco após a última letra de cada linha. Imprima uma linha em branco após cada caso de teste, inclusive após o último.;True;5 / 10;4553;1861;40.87%
2485;Bicho da Goiaba;Grafos;4;"Recentemente na Nlogônia, diversas goiabeiras estão sendo infestadas por uma espécie de larva denominada Marangonis Ovidius, conhecida por ser extremamente nociva às plantações. Porém, o Dr. Icaronieris, prodígio da medicina atual e amante de boas goiabas, inventou um remédio que elimina essa infestação por completo.

Ainda não contente com o efeito do remédio em somente uma goiabeira, ele foi além: criou um mecanismo que, dia após dia, espalha o remédio para todas as árvores adjacentes às árvores cujo remédio está ativo. Por exemplo, o remédio é aplicado em uma árvore específica. No dia seguinte, ele se espalha para as árvores adjacentes a esta, e no outro, para as adjacentes às adjacentes da árvore inicial, e assim por diante, até que toda a infestação seja eliminada.

O doutor, no entanto, não possui tempo para testar a eficiência e a viabilidade de sua criação no papel. Ele precisa de um programa que, dadas as goiabeiras infectadas e as coordenadas da árvore onde será aplicado o remédio, verifique a quantidade de dias para que todas as goiabeiras estejam curadas. Como pagamento, o doutor lhe prometeu 100 caixas de goiaba (com bicho ou sem bicho, você escolhe) todo mês, além de um vale-ticket no IEF. Vai perder essa?";A primeira linha de entrada é composta por um número inteiro representando a quantidade de casos de teste. Cada caso de teste é composto por A (2 ≤ A ≤ 100) e B (2 ≤ B ≤ 100) representando a quantidade de linhas e a quantidade de colunas da matriz, respectivamente. Em seguida, será dada uma matriz binária A x B, com 0 indicando que não há goiabeira e 1 indicando que há uma goiabeira infectada. Posteriormente, serão dadas as coordenadas iniciais X (1 ≤ X ≤ A) e Y (1 ≤ Y ≤ B) onde será aplicado o remédio. Não haverá goiabeiras sem goiabeiras adjacentes, isto é, o remédio sempre conseguirá alcançar todas as goiabeiras.;Para cada caso de teste, imprima a quantidade de dias para que a infestação seja completamente eliminada.;False;4 / 10;765;307;40.13%
2486;C Mais ou Menos?;Iniciante;3;"Ultimamente, diversas pessoas estão indo à Dra. Cláudia Café com Leite para saber se estão consumindo a quantidade recomendada diária de vitamina C. Isso tem a deixado exausta, e por isso ela lhe pediu para escrever um programa que, dado o consumo diário de alimentos ricos em vitamina C por uma pessoa, indique o quanto essa pessoa deve consumir a mais ou a menos para atingir o recomendado.

Para tal, você poderá utilizar a tabela a seguir:



	
	
		Alimentos ricos em Vitamina C
		Quantidade de Vitamina C
	
	
	
	
		suco de laranja
		120 mg
	
	
		morango fresco
		85 mg
	
	
		mamao
		85 mg
	
	
		goiaba vermelha
		70 mg
	
	
		manga
		56 mg
	
	
		laranja
		50 mg
	
	
		brocolis
		34 mg
	
	


Considere que o consumo diário recomendado de vitamina C está entre 110 mg e 130 mg, inclusive.";Cada caso de teste é composto um inteiro T (1 ≤ T ≤ 7) indicando que a pessoa consome diariamente T alimentos entre os 7 alimentos da tabela. Em seguida, haverá T linhas com um inteiro N e um alimento (totalmente em caixa baixa e sem acentuações), indicando que a pessoa consome uma quantidade N daquele alimento. A entrada termina com T = 0.;"Para cada caso de teste (T), se o consumo ultrapassou o limite recomendado, imprima ""Menos X mg"", em que X representa a quantidade a menos a ser consumida para atingir o limite recomendado; se o consumo não atingiu o recomendado, imprima ""Mais X mg"", em que X representa a quantidade a mais para atingir o recomendado; se o consumo está dentro do intervalo recomendado, imprima ""X mg"", em que X representa a quantidade consumida diariamente pela pessoa.";False;3 / 10;3926;1852;47.17%
2487;Do Lado Escuro do Código;Ad-Hoc;8;"A Seita dos Programadores das Potências de 2 é uma seita composta por programadores que programam em uma quantidade de tempo que é sempre uma potência de 2. Recentemente, o líder desta seita, o tão temido Vithan Fendes, percebeu que mudanças seriam necessárias para atingir seu objetivo, e deste modo, decidiu que os membros não somente deverão programar em tempos de potências de 2, mas também realizar todo tipo de atividade!

As atividades sempre estarão em ordem de importância, sendo a primeira atividade (programar) a mais importante e a última a menos importante. Assim sendo, os membros terão que distribuir os tempos para as atividades de acordo com essa ordem, e caso sobre tempo, o membro deverá dedicá-lo à programação. Além disso, o membro deve sempre dedicar pelo menos 1 minuto para uma atividade, isto é, nenhuma atividade deve deixar de ser realizada.

Como você entrou nessa seita recentemente, o líder quer que você prove o mínimo de seu valor, criando um programa que, dada a quantidade de tempo disponível de um membro e a quantidade de atividades a serem realizadas, retorne o tempo que deverá ser dedicado a cada uma dessas atividades. Enquanto isso, Vithan Fendes estará dançando ao som de Fink Ployd, sua banda preferida de axé.";A entrada é composta por vários casos de teste. Cada linha contém um inteiro T (1 ≤ T ≤ 1018) e um inteiro A (1 ≤ A ≤ 103), indicando o tempo disponível e a quantidade de atividades, respectivamente. A quantidade de atividades nunca será maior que o tempo disponível. A entrada termina com fim de arquivo (EOF).;Para cada caso de teste, imprima o tempo dedicado para cada atividade de acordo com as especificações. Separe os tempos entre espaços, mas não deixe espaço após o último valor.;False;8 / 10;183;39;21.31%
2488;É Na Batida do Cavalo!;Estruturas e Bibliotecas;4;"Furacão é um apostador famoso da região, mais conhecido por ganhar todas as apostas em corridas de cavalo nos últimos 10 anos. Há quem diga que é fraude, há quem diga que ele usa estratégias infalíveis para sempre vencer. De qualquer modo, é inegável que Furacão é um ótimo apostador. Porém, ele está cansado de tanto ganhar, e dessa forma, desafiou aquele que conseguir lançar uma aposta em que ele não consiga vencer. Pensando nisso, foi criado o Clube de Apostas para o Recomeço e para a Realização do Extermínio do Tal Apostador Furacão (C. A. R. R. E. T. A. Furacão) com o único propósito de fazer Furacão perder.

A primeira ""corrida de cavalos"" promovida pelo CARRETA Furacão ocorrerá de forma muito diferente das corridas tradicionais: Haverá somente um cavalo, e este, ao invés de correr, deverá andar todo o percurso em marcha batida, afinal, esta ""corrida"" tem o objetivo de fazer com que o Apostador seja derrotado. Ela ocorrerá da seguinte forma: O cavalo iniciará sua marcha em determinado ponto, e cada vez que ele passar por um ponto de reconhecimento de percurso, será realizado o cálculo da distância entre o ponto atual e o ponto anterior, ou seja, ao final da marcha, haverá diversas distâncias isoladas, referentes somente a dois pontos.

O desafio proposto ao Apostador é que ele responda a diversas perguntas do tipo ""Qual é a maior distância percorrida pelo cavalo do ponto (x1, y1) ao ponto (x2, y2)?"" em não mais do de 1 segundo! O CARRETA Furacão está certo de que ele irá perder desta vez, mas como Furacão é um homem muito esperto, ele atentou-se à possibilidade de contratar um programador para realizar essa atividade para ele, isto é, para criar um programa que ele possa usar no dia do evento para não perder a aposta.

Ao saber que você é um ótimo programador e que participa de atividades ilegais se receber bem por isso, Furacão o contratou sem pensar duas vezes. Sua tarefa, portanto, é escrever um programa que diga a maior distância percorrida pelo cavalo entre dois pontos dados. Tenha em mente que sempre haverá somente um caminho entre um ponto e outro.";A primeira linha de entrada contém o número de pontos N (2 ≤ N ≤ 104) e o número de perguntas P (2 ≤ P ≤ 104). Cada linha das próximas N linhas irá conter um ponto (x, y), (0 ≤ x, y ≤ 104), representando o ponto em que o cavalo foi reconhecido, isto é, o ponto em que ele se encontra atualmente. Não serão dados dois pontos de reconhecimento iguais na entrada. Em seguida, cada linha das próximas P linhas irá conter dois pontos: (x1, y1) e (x2, y2), representando a pergunta da maior distância percorrida entre eles.;Para cada pergunta feita em cada caso de teste, imprima a maior distância percorrida pelo cavalo entre o ponto (x1, y1) e o ponto (x2, y2), com precisão de duas casas decimais.;False;4 / 10;91;59;64.84%
2489;Flecha no Coelho;Matemática;3;"Olivera Queen é uma arqueira muito habilidosa. Ela consegue atingir qualquer alvo a longas distâncias sem muita dificuldade. Desta vez, ela quer realizar um treinamento com seus dois companheiros de caça de uma forma um tanto inusitada: o alvo será um coelho de pelúcia. O arqueiro escolherá a própria postura e sua distância até a árvore onde estará posicionado o coelho, e a partir dessas informações, o coelho deverá ser posicionado de forma que o arqueiro consiga o atingir diretamente, sem realizar nenhum movimento adicional. A imagem abaixo exemplifica a situação de modo genérico:



A distância entre o arqueiro e a árvore é representada por D, a altura dos ombros do arqueiro aos seus pés é representada por A e a altura em que o coelho de pelúcia deve ser posicionado para que o arqueiro o alveje na cabeça é H. O ângulo que a árvore e o arqueiro fazem com o chão será sempre de 90º, enquanto que o ângulo que o braço do arqueiro faz com o próprio corpo será escolhido por ele mesmo.

Portanto, ajude Olivera Queen e seus dois promissores amigos de caça a realizarem seus treinamentos do modo como eles planejaram: escreva um programa que encontre o valor H apropriado para que o coelho de pelúcia seja atingido na cabeça, de acordo com as informações dadas. Considere que a flecha viajará sempre em linha reta, independente de sua distância até o alvo.";A entrada contém diversos casos de teste. Cada linha contém um valor real A (1 ≤ A ≤ 2) indicando a altura do arqueiro, um valor real D (5 ≤ D ≤ 40) que indica a distância entre o arqueiro e a árvore e um valor real R (50 ≤ R ≤ 150) indicando o ângulo, em graus, entre o braço do arqueiro e seu corpo. É garantido que as entradas sejam sempre válidas e não gerem saídas inesperadas. A entrada termina com fim de arquivo (EOF).;Para cada caso de teste, imprima o valor de H com precisão de 4 casas decimais.;True;3 / 10;417;198;47.48%
2490;Garoto Ixpertinho;Grafos;6;"O Garoto Ixpertinho está de volta. Assim como antes, ele ainda quer que todos saibam o significado e a origem da palavra Malakoi, mas dessa vez, ele não está de brincadeira. O Garoto Ixpertinho quer espalhar essa palavra por toda a cidade, e sempre da forma usual, isto é, fazendo sua dança característica. No entanto, ele não terá fôlego o suficiente para andar todos os quarteirões enquanto grita e dança ao mesmo tempo.

Como consequência, alguns quarteirões não poderão ser visitados e ele não conseguirá completar sua missão de vida. Pensando nisso, o Garoto Ixpertinho contatou alguns amigos e fãs em toda a cidade, para poder descansar, abastecer e assim continuar sua jornada, quando ele perder o fôlego no caminho entre um quarteirão e outro.

Assim sendo, o Garoto Ixpertinho quer espalhar sua palavra para todas as pessoas da cidade, visitando todos os quarteirões, no menor tempo possível. Ele não se importa de visitar o mesmo quarteirão mais de uma vez, pois a partir da segunda visita, ele não precisará mais divulgar sua palavra, e o tempo não será somado ao tempo da jornada principal.

Além disso, toda vez que ele visita um quarteirão (tendo perdido o fôlego no meio do caminho ou não), ele descansa e obtém todo o fôlego novamente, mas esse tempo de descanso será desconsiderado. Por outro lado, quando ele perde o fôlego em seu trajeto entre um quarteirão e outro, ele leva exatamente 2 minutos para abastecer, e este tempo deverá ser considerado.";A entrada contém diversos casos de teste. Cada caso de teste inicia com dois valores inteiros Q (2 ≤ Q ≤ 1000) e C (Q-1 ≤ C ≤ 1000) e um valor real T (1 ≤ T ≤ 30), indicando, respectivamente, o número de quarteirões, o número de caminhos que os conectam e o tempo máximo, em minutos, que o Garoto Ixpertinho consegue permanecer gritando e dançando ao mesmo tempo. Seguem C entradas de dois valores inteiros X e Y e um valor real Z (1 ≤ Z ≤ 60), especificando que ele leva Z minutos para ir do quarteirão X ao Y enquanto espalha a palavra Malakoi. Considere que sempre haverá pelo menos um caminho para alcançar um quarteirão. A entrada termina com Q = C = T = 0.;Para cada caso de teste, imprima o tempo mínimo necessário para que o Garoto Ixpertinho visite todos os quarteirões (com precisão de duas casas decimais), e na mesma linha, quantas vezes ele teve que abastecer, isto é, quantas vezes ele perdeu o fôlego durante seu trajeto entre um quarteirão e outro.;False;6 / 10;305;113;37.05%
2491;Habay e Robfilho – Os Fujões;Paradigmas;10;"Habay e Robfilho, veteranos competidores de maratonas de programação, participaram este ano da primeira fase das Regionais como reservas. Porém, no local do evento, faltaram máquinas para eles testarem seus códigos. Descontentes com a situação, resolveram todas as questões no papel em 30 minutos, entregaram aos juízes e decidiram ir ""bater um rango"" no restaurante mais próximo.

O restaurante escolhido possui algumas peculiaridades: os clientes têm acesso às estatísticas e características de cada prato, como popularidade e nutrientes. Além disso, há uma variedade imensa de pratos, para a felicidade de Habay. Como um ótimo vegano, Habay decidiu que iria escolher os pratos com maior quantidade de proteína, mas acabou enfrentando um dilema: se os pratos escolhidos forem menos populares, sua avaliação cairá na rede social RateMe, sucesso do momento. Porém, se escolher os pratos mais populares mas não consumir a quantidade máxima de proteína, ficará com a consciência pesada pois não estará contribuindo plenamente com a própria saúde.

Apesar de Habay amar popularidade, ele prioriza sua saúde e, desse modo, escolherá os pratos com maior quantidade de proteína, mas com uma condição: a média de popularidade dos pratos escolhidos deve ser maior do que média de popularidade de todos os pratos, senão Habay não comerá naquele restaurante. Além disso, como Habay gosta de variedade, ele não escolherá o mesmo prato mais de uma vez, e logicamente, não poderá gastar mais do que o dinheiro disponível.

Portanto, ajude Habay a decidir se comerá ou não nesse restaurante. Com relação a Robfilho, ele escolherá os pratos mais pesados, pois está com uma ""fome danada"", e dessa forma não precisará de ajuda.";A entrada contém vários casos de teste. Cada caso de teste inicia com dois inteiros Q (2 ≤ Q ≤ 100) e D (1 ≤ D ≤ 100), indicando a quantidade de pratos e o dinheiro disponível de Habay, respectivamente. Cada uma das próximas Q linhas irá conter a quantidade de proteína (1 ≤ P ≤ 200), o custo (1 ≤ C ≤ 100) e a popularidade (1 ≤ R ≤ 10) do respectivo prato. Não haverá pratos com a mesma quantidade de proteína. A entrada termina com Q = D = 0.;"Para cada caso de teste, se Habay decidir comer no restaurante, imprima a média de popularidade dos pratos escolhidos (com precisão de duas casas decimais); caso contrário, imprima a média de popularidade de todos os pratos (mesma precisão) e em seguida, um espaço em branco e a exclamação ""NO!"", indicando que Habay irá embora furioso.";False;10 / 10;60;11;18.33%
2492;Ilhas Isoladas;Estruturas e Bibliotecas;4;"Friederich Estrotoratch, famoso matemático e filósofo, comprou recentemente diversas ilhas no Pacífico. Como ele possui devota paixão por funções inversas, ele quer conectar essas ilhas de forma que elas se assemelhem a uma função inversa. Estrotoratch odeia perder tempo com trabalho que julga desnecessário, e portanto, passou a Johann Fritz, seu subordinado, a tarefa de determinar quais seriam exatamente as conexões entre as ilhas adquiridas. No entanto, Fritz não é muito equilibrado mentalmente (assim como seu superior) e está realizando essa atividade em uma de suas crises.

Sabendo da própria condição nada boa, Fritz decidiu que entregaria a você as conexões para que você diga se estão corretas ou não. Ele quer que você diga se as conexões sequer formam uma função, e caso formem, se a função é invertível ou não invertível. Portanto, ajude o pobre rapaz, pois caso contrário, as consequências para ele (isto é, as punições) são imprevisíveis.";"A entrada é composta por vários casos de teste. Cada caso de teste contém um inteiro T (2 ≤ T ≤ 100), indicando a quantidade de conexões que serão dadas a seguir, que sempre estarão na forma ""X -> Y"", indicando que haverá um caminho conectando a ilha X à ilha Y. Essa conexão não é recíproca, ou seja, não significa que haverá um caminho conectando Y a X. O nome das ilhas terá até 30 caracteres sem espaços. A entrada termina com T = 0.";"Para cada caso de teste, imprima ""Not a function."" caso não seja uma função, ""Invertible."" se a função for invertível e ""Not invertible."" se a função não for invertível.";False;4 / 10;410;160;39.02%
2493;Jogo do Operador;Iniciante;6;"Samu Elmito adora criar jogos peculiares para desafiar seus amigos. Desta vez, ele inventou um jogo chamado ""Jogo do Operador"", em que ele cria expressões básicas e cada jogador deve escolher uma expressão e preencher a lacuna com o operador correto para validá-la. Os jogadores poderão escolher operadores de somente três tipos: adição, subtração e multiplicação. Porém, se o jogador achar que não há operador entre os três tipos que valide a expressão, poderá responder Impossível.

Sua tarefa é simples: dadas as expressões e as respostas dos jogadores, determinar os jogadores que não passarão para a outra fase do jogo.";"A entrada é composta por um inteiro T (2 ≤ T ≤ 50) que indica a quantidade de expressões e de jogadores. Cada caso de teste é composto por T expressões na forma ""X Y=Z"", indicando que X operador Y (0 ≤ X, Y ≤ 103) é igual a Z (-103 ≤ Z ≤ 106), seguido de T jogadores e suas respectivas respostas na forma ""N E R"", sendo N o nome do jogador (até 50 caracteres e sem espaços), E o índice da expressão escolhida (1 ≤ E ≤ T) e R a resposta (+, -, * ou I, indicando Impossível). A entrada termina com EOF (fim de arquivo).";"Para cada caso de teste, se todos os jogadores passarem, imprima ""You Shall All Pass!""; se nenhum jogador passar, imprima ""None Shall Pass!""; caso contrário, imprima, em ordem lexicográfica e entre espaços, o nome dos jogadores que erraram a resposta e, desta forma, não passarão para a próxima fase do jogo.";False;6 / 10;2498;634;25.38%
2494;Canetas;Matemática;8;"O professor Alex é apaixonado por suas Maratonas de programação, se pudesse faria todo final do mês, porém recebe poucos recursos para presentear os alunos. Um desses eventos ele ganhará uma quantidade de canetas azuis e pretas, porém ele não sabe a quantidade que deverá receber. E quer distribuir em pacotes iguais para cada equipe.

					Ele pediu sua ajuda, baseado na quantidade de canetas que receber, azuis e pretas, ele quer empacotar todas essas canetas de modo que cada pacote contenha apenas canetas com tinta de uma mesma cor e si dará para todas as equipes participantes.";"Receberá 3 valores, na qual o primeiro será a quantidade de canetas azuis, o segundo a quantidade de canetas pretas e a terceira a quantidade de equipes. Os três valores serão (1 <= n <= 1000);";Sairá uma resposta “sim” caso consiga pacotes para todas as equipes e “não” caso não saia.Não esqueça o fim de linha após o produto, caso contrário seu programa apresentará a mensagem: “Presentation Error”.;False;8 / 10;898;104;11.58%
2495;Onde Está Minha Caneta?;Estruturas e Bibliotecas;7;No fim do mês passado, eu comprei um conjunto com N canetas. Ele custou cerca de 1/3 da minha mesada e, por conta disso, resolvi dizer a todos os meus amigos que não iria emprestá-lo a ninguém. Porém, na semana passada, minha prima Jean o pediu emprestado, dizendo que iria me devolver na manhã seguinte. Como ela é da família e iria me devolver logo, resolvi abrir uma exceção para ela e emprestei-lhe o conjunto. Pois é: me arrependi. A Jean só me devolveu hoje de manhã! Ao receber, fui logo conferir se estava tudo em ordem. Não, não estava! Notei que havia N-1 canetas no meu conjunto. Como eu estou apressada para ir ao colégio, peço que você, Billie, me ajude a encontrar qual caneta está faltando. Considere que todas as canetas estão identificadas por inteiros no intervalo [1, N]. Espero que a caneta que está faltando só esteja perdida! Não vou suportar a ideia da Jean ter roubado de mim!;A entrada é composta por vários casos de testes. A primeira linha possui um inteiro N, onde 2 ≤ N ≤ 105, indicando o número de canetas do meu conjunto. As próximas linhas são compostas de N-1 inteiros, indicando quais canetas foram devolvidas. Para cada Ni termo desta sequência, considere que estão no intervalo de 1 ≤ Ni ≤ N.;A saída é composta de uma única linha indicando qual caneta não estava no conjunto.;False;7 / 10;719;312;43.39%
2496;A Única Chance;Estruturas e Bibliotecas;2;"Todo mundo sabe que as decisões que são tomadas fazem toda a diferença no resultado obtido. Um exemplo bastante conhecido é o paradoxo de Monty Hall, que é composto por três etapas e, na terceira, o concorrente dá a cartada final e, dependendo da sua escolha, pode ou não ganhar um carro.

					Você deseja obter um “Accepted” e, para isso, terá que escrever um programa que verifique se uma única troca de posição entre duas letras resultará em uma sequência ordenada. Considere as seguintes sequências:

					ABCDFGHIEJ

					ABCDEFGHJIKLMNO

					Para que a primeira sequência seja ordenada, é necessário mais de uma troca entre a posição das letras. Na segunda, por outro lado, basta que o I e o J mudem de posição. Sua missão é verificar se para cada sequência recebida existe uma única troca entre duas letras que a faça ordenada.";A entrada é composta por um inteiro N, que representa a quantidade de casos de teste (1 <= N <= 100). Cada caso de teste é composto por um inteiro M, que representa a quantidade de letras de uma sequência (2 <= M <= 26) e por uma sequência alfabética composta por M letras. As letras são sempre maiúsculas e não se encontram em um índice superir a M. Caso M seja 4, as únicas letras possíveis para a sequência são: A, B, C ou D, em qualquer ordem.;Para cada sequência informada, o programa deve retornar uma única linha que apresentará “There are the chance.” se a sequência obedecer a regra de ordenação mencionada, ou “There aren't the chance.” caso contrário.;False;2 / 10;962;512;53.22%
2497;Contando Ciclos;Matemática;1;"Estamos no ano 2030. Os benefícios da mecânica quântica já são bastante conhecidos e a computação foi e está sendo fortemente modificada em razão das recentes descobertas. Dessa forma, quase todos os computadores e smartphones estão bem diferentes de como eram em 2016 (há 14 anos atrás). Em razão da importância e da imensurável aplicabilidade desse ramo da física no cotidiano, a maioria dos países determinou que os princípios do mesmo devem ser ensinados no último ano do ensino médio.

Maria está concluindo o ensino médio e faz parte da primeira turma que contém a mecânica quântica na grade curricular. As primeiras aulas desse conteúdo já foram ministradas e Maria está estudando para a prova, que será na próxima semana. O conteúdo cobrado na avaliação será: O Princípio da Incerteza e a Superposição dos elétrons.

Você, como bom programador(a) e amigo(a) de Maria, decidiu ajudá-la escrevendo um algoritmo que seja capaz de contar quantos ciclos completos conterá cada experimento que será realizado com elétrons. Sabe-se, pelo princípio da incerteza, que uma característica não interfere em outra como, por exemplo, a cor apresentada por um determinado elétron não implica em sua dureza ou maleabilidade. Você vai considerar que os experimentos começam sempre com a determinação da cor e sem seguida com a determinação da dureza, esse processo pode se repetir dependendo de quantas etapas Maria queira que o experimento possua.

Supondo que ela escolheu 3 etapas, o experimento seria realizado da seguinte forma:

Determinação da cor → Determinação da dureza → Determinação da cor

Seu programa deve informar quantos ciclos completos foram realizados, sabendo-se que, para Maria, um ciclo completo é composto pela determinação da cor e da dureza do elétron, respectivamente. No caso de teste apresentado acima, seria 1 ciclo completo. Mas se ela escolhesse 4 etapas, seriam 2 ciclos completos.";A entrada é composta por diversos casos de teste. Cada caso de teste é composto por um único inteiro N, que representa a quantidade de etapas que Maria deseja que o experimento completo possua (-1 <= N <= 1000). É importante lembrar que uma etapa pode ser a determinação da cor ou da dureza, enquanto um ciclo é composto pela determinação das duas características. O programa se encerra com N = -1.;Para cada N informado por Maria deve ser retornada uma única linha contendo o resultado no seguinte formato: Experiment X: Y full cycle(s). Em que X representa o número do caso de teste e Y representa o número de ciclos completos.;False;1 / 10;1228;744;60.59%
2498;Ajude Vânia;Paradigmas;5;"Rangel é um estudante de engenharia de computação que nas horas vagas (quando não está cheio de coisas da faculdade) gosta de estudar para competições de programação e ler livros. Além de gostar de ler os livros Cormen e dos Halim, ele é muito fã de ficção. Sabendo disso, sua amiga, Vânia decidiu emprestar alguns livros de sua coleção a Rangel para que ele possa ler durante as férias.

Cada i-ésimo livro de Vânia possui um peso wi e vi que representa o provável grau de interesse de Rangel pelo livro. Se dependesse dela, emprestaria todos os seus livros, mas isso é impossível pois sua bolsa não cabe todos os seus livros (que são muitos).

Dado o número de livros de sua estante a máxima carga suportada pela sua bolsa, o peso e o grau de interesse de cada um dos livros, Vânia pede sua ajuda para escrever um programa que ajude a escolher os livros de tal forma que maximize o possível grau de interesse de Rangel pelos livros. Ela poderia fazer isso, mas está muito ocupada com as provas finais.";A entrada contém vários casos de teste. Cada caso de teste começa com dois valores N e C (1 ≤ N ≤ 1000) e (1 ≤ C ≤ 100) que representam o número de livros disponíveis na estante de Vânia e a capacidade de sua bolsa respetivamente. Cada uma das próximas N linhas haverá dois inteiros W (1 ≤ W ≤ C) e V (1 ≤ V ≤ 1000) que representam respectivamente o peso de cada livro e o grau de interesse de Rangel pelo livro. O final da entrada é determinado com N = C = 0.;Para cada caso de teste seu programa deverá imprimir uma linha com a seguinte formatação: Caso H: M onde H é um inteiro que indica numero do caso de teste e M é o máximo grau de interesse de Rangel pelos livros.;False;5 / 10;1224;368;30.07%
2499;Triângulo Interno;Matemática;7;Dado um triângulo ABC com área S, e N pontos equidistantes sobre o lado AB e M pontos equidistantes sobre o lado BC, calcule a área do triângulo determinado por um desses pontos em AB de coordenada C1 e dois outros sobre BC com coordenadas C2 e C3.;A entrada é composta por vários casos de teste. A primeira linha de um caso de teste contém três números inteiros S (1 ≤ S ≤ 106), N (0 ≤ N ≤ 103) e M (0 ≤ M ≤ 103) como especificados no texto e a segunda linha de um caso de teste contém as coordenadas C1 (0 ≤ C1 ≤ N+1), C2 (0 ≤ C2 ≤ M+1) e C3 (0 ≤ C3 ≤ M+1). A entrada termina quando S=N=M=0.;A saida é composta de uma linha por caso de teste contendo o número inteiro que representa a área do triângulo determinado. É sempre garantido que a área é um número inteiro.;True;7 / 10;292;73;25.00%
2500;William Xorando;Ad-Hoc;8;"William recentemente aprendeu algumas propriedades sobre o operador bit a bit xor(em linguagem c representado pelo operador '^'). Viu que pode fazer muitos algoritmos interessantes com ele: como achar elementos solitários numa sequência, trocar valores sem precisar de variável auxiliar, criptografia e muitos outros. Então começou a experimentar e decidiu até nomear uma operação com seu nome que utilizar xor, o w-xor.

O w-xor é uma operação feita sobre uma sequência de valores. Exemplo: seja uma sequência S={a1, a2, a3, a4} aplicar o w-xor sobre S uma vez é o equivalente a fazer:

a1= a1^a2^a3^a4

a2= a1^a2^a3^a4

a3= a1^a2^a3^a4

a4= a1^a2^a3^a4

a1= a1^a2^a3^a4

se S={a1, a2, a3, a4, a5} então aplicar um w-xor sobre S seria:

a1= a1^a2^a3^a4^a5

a2= a1^a2^a3^a4^a5

a3= a1^a2^a3^a4^a5

a4= a1^a2^a3^a4^a5

a5= a1^a2^a3^a4^a5

a1= a1^a2^a3^a4^a5

Dada uma Sequência S e aplicando sobre ela o w-xor M vezes, você saberia dizer qual o valor da K-ésima posição?";A entrada é composta de vários casos de testes. Cada caso de teste começa com três números inteiros N (2 ≤ N ≤ 103), M (1 ≤ M ≤ 106) e K (1 ≤ K ≤ N) representando a quantidade de elementos da sequência, o número de operações w-xor aplicadas e a posição do valor a ser consultado (observe que a primeira posição é a 1), respectivamente. Na próxima linha haverá N valores inteiros Ai (-109 ≤ Ai ≤ 109). A entrada termina quando N=M=K=0.;A saída consiste em uma linha por caso de teste contendo o valor da K-ésima posição da sequência após aplicado M vezes o w-xor sobre ela.;False;8 / 10;220;61;27.73%
2501;Fatores Permitidos;Paradigmas;10;"Professor Chico, suspeitando que Levi, seu aluno, não está estudando Programação dinâmica como deveria, resolveu tramar um plano para incentivar Levi a estudar mais.

Chico avisou aos seus alunos que agora eles seriam referenciados por códigos numéricos de no máximo 12 dígitos nas comunicações oficiais (e-mails e tarefas). E logo em seguida entregou a cada, um cartão que continha um único número escrito. Rapidamente os alunos presumiram que esse seria seu código, mas para surpresa dos alunos e desespero de Levi, professor chico explicou que esses não eram seus códigos.

O código de um aluno era o termo de uma sequência ordenada S que estava na posição (indexada a partir de 1) especificada pelo número no cartão de cada um. Essa sequência tem uma característica especial: cada termo, quando decomposto em fatores primos, só pode ter números contidos em um conjunto de N elementos escritos no quadro pelo professor. E pra dificultar ainda mais a vida de Levi, esses números mudariam toda semana de tal forma que ele sempre terá de recalcular seu código se não quiser atrasar suas tarefas.

Sua tarefa é fazer um programa para ajudar Levi de tal modo que, dado os números primos escritos no quadro durante a semana pelo professor Chico e número no cartão, diga o seu código semanal.";A entrada é composta de vários casos de testes. A primeira linha de um caso de teste contém dois números inteiros N (1 ≤ N ≤ 102) e M (1 ≤ M ≤ 105) representando respectivamente a quantidade de números escritos no quadro pelo professor Chico e o número escrito no cartão. A segunda linha contém N números primos Pi (2 ≤ Pi < 106) ordenados de forma crescente, onde Pi (1 ≤ i ≤ N) é um número escrito no quadro. A entrada termina quando N=M=0.;A saída consiste de uma linha por caso de teste contendo o código semanal de Levi.;False;10 / 10;172;40;23.26%
2502;Decifrando a Carta Criptografada;Iniciante;6;"A cifra mais antiga conhecida é a Cifra de César. César escrevia suas cartas trocando cada letra pela próxima do alfabeto, para evitar que, quando a carta fosse interceptada, conseguissem ler. Com o tempo, a criptografia adquiriu melhor qualidade, mas a criptografia por substituição ainda é uma brincadeira de criança interessante, por exemplo:

ZEN I T
POLAR

Neste tipo de brincadeira, ao escrever uma carta a letra Z é trocada pela letra P e vice versa, bem como: E e O e assim sucessivamente. A frase cifrada desta forma: ""Osro roxre osri caftide"" pode ser decifrada como: ""Este texto esta cifrado"". Como a brincadeira ficou séria, a você foi solicitado um programa que decifre as mensagens cifradas a partir de uma chave fornecida.";"A entrada contém vários casos de teste. Cada caso de teste começa com uma linha indicando dois números inteiros C e N, 0 < C < 21 e 0 < N < 100. C é o tamanho da cifra. Nas duas linhas seguintes está a cifra de tamanho C indicando quais caracteres da primeira linha será substituído por caracteres da segunda linha, um caracter aparece uma única vez, na primeira ou na segunda linha.

A cifra pode conter letras de ‘A’ a ‘Z’, números de ‘0’ a ‘9’ além do espaço em branco e alguns símbolos de pontuação: '.' ',' ';' ':' '(' ')' '!' e '?'. Nas próximas N linhas estão frases e sentenças criptografadas pela cifra fornecida, que você deve decifrar. Cada linha contém no mínimo 1 e no máximo 1000 caracteres. São permitidos quaisquer caracteres ASCII (não extendido) imprimíveis, neste caso não estão presentes nenhum caracter acentuado, nem mesmo 'ç'.";"Para cada caso de teste da entrada seu programa deve gerar para cada linha de frase e sentença de entrada, uma linha com a saída decifrada, respeitando a capitalização da letra (letras maiúsculas são decifradas como maiúsculas e minúsculas como minúsculas quando for possível aplicar a diferenciação, se não for possível serão decifrados como letras minúsculas). Após cada caso de teste deve ser impressa uma linha em branco, inclusive após o último.
 ";False;6 / 10;3029;760;25.09%
2503;Corrida de Regularidade;Estruturas e Bibliotecas;9;Um tipo de corrida de automóveis, veículos em geral, mesmo bicicleta ou a pé, é a corrida de regularidade. Neste tipo de corrida existe um percurso a ser percorrido e uma velocidade média a ser mantida. Para garantia existem vários pontos de controle de tempo. Estes pontos são desconhecidos dos competidores para evitar que eles tentem corrigir o tempo na chegada ao ponto. A contagem em cada ponto de controle é de penalização por atraso ou adiantamento em pontos. Uma corrida de Enduro a Pé, possui vários pontos de controle. Em cada ponto de controle, se o corredor (ou equipe) atrasar, é punido com 1 ponto por segundo de atraso, com limite de 1200 pontos por ponto de controle (20 minutos de atraso) ou 2 pontos por segundo de adiantamento, com limite de 1200 pontos por ponto de controle (10 minutos). Vence a prova quem tiver menos pontos. Como critério de desempate a equipe inscrita de menor número.;"A entrada contém vários casos de teste. Cada caso de teste utiliza várias linhas da entrada, começa com uma linha indicando três números inteiros: V, P, T: 0 < V < 20, a velocidade média, em km/h, a ser mantida na corrida; 0 < P < 10 o número de pontos de controle; e 0 < T < 20 o número de times competidores. Na segunda linha estão P números inteiros indicando a posição de cada ponto de controle, em metros, a partir da origem, 0 < Pi < 4.000. O último ponto de controle coincide com o final da corrida. As próximas T linhas representam P valores inteiros indicando os tempos de cada competidor, em segundos, em cada ponto de controle, time 1 na linha 1, e assim sucessivamente. Os casos de entrada terminam com V = P = T = 0.";"Para cada caso de teste da entrada seu programa deve gerar, na saída, uma linha única com a classificação final da corrida, listando os times pelos seus números com um único espaço em branco entre cada time.
 ";False;9 / 10;215;37;17.21%
2504;Biorritmo;Ad-Hoc;6;"No início do século XX, o psicólogo vienense Hermann Swoboda e o médico alemão Wilhelm Fliess, perceberam que o ser humano possui ciclos favoráveis e desfavoráveis ao longo da vida. Estes ciclos estão associados a três estados humanos: físico, emocional e intelecto. Ao nascer todos os ciclos começam de forma crescente. E ao longo dos dias variam de forma senoidal entre um máximo e um mínimo.


	O biorritmo de natureza física tem ciclo de 23 dias.
	O biorritmo do estado emocional tem ciclo de 28 dias.
	O biorritmo da capacidade intelectual tem ciclo de 33 dias.


O biorritmo, no período positivo indica uma fase favorável aos desafios físico, emocional ou intelectual. Por exemplo, quem estiver na fase positiva do biorritmo intelectual terá mais vantagens nesta competição que aqueles em uma fase negativa.

No dia 0 (nascimento) todos os biorritmos estão zerados. No dia 1 estão já na fase positiva. No dia 14, por exemplo, o biorritmo emocional estará zerado novamente, o físico já estará negativo e o de intelecto ainda positivo. E assim sucessivamente. A pergunta é, passados vários dias de vida, quais os estágios do biorritmo na data de hoje (7/11/2016)? A você foi pedido um programa que recebe como entrada a data de nascimento e diga, para os biorritmos: físico, emocional e intelectual (nesta ordem), se no dia 7/11/2016 estarão: positivo, negativo ou zerado.";A entrada contém vários casos de teste. Cada linha representa um caso de teste e contém uma data no formato D/M/AAAA (ano completo), uma data válida e anterior a 7/11/2016. A anterioridade não supera 100 anos.;"Para cada caso de teste deverão ser fornecidos, em uma linha única, três palavras, separadas por um único espaço, de acordo com o biorritmo físico, emocional e intelectual, nesta ordem. Se o biorritmo específico estiver na fase positiva a palavra de saída será: ""POSITIVO"", se estiver na fase negativa: ""NEGATIVO"", ou se for um dia de biorritmo zerado: ""ZERADO"".";False;6 / 10;36;7;19.44%
2505;Autopotencial;Matemática;6;"Alguns números na matemática, por suas características únicas, recebem uma denominação especial. Em particular, existe um conjunto de números que chamaremos de ""Autopotencial"". Um número N é dito ser Autopotencial quando NN resulta em um valor onde os últimos dígitos são, justamente, N. Por exemplo:

1: 11 = 1 -> É autopotencial.
3: 33 = 27 -> Não é autopotencial.
10: 1010 = 10.000.000.000 -> Não é autopotencial.
11: 1111 = 285.311.670.611 -> É autopotencial.";A entrada contém vários casos de teste. Cada linha representa um caso de teste e contém um único valor inteiro N, com 0 < N < 1.000.000.;"Para cada caso de teste da entrada, seu programa deve gerar uma única linha na saída, contendo a palavra ""SIM"", se o valor de entrada for um número Autopotencial, ou ""NAO"" (sem acentuação) caso contrário.";False;6 / 10;550;174;31.64%
2506;Fila do SUS;Estruturas e Bibliotecas;9;Os pacientes que chegam na fila do SUS passam por uma triagem imediatamente e vão para a fila de atendimento. Na triagem a enfermeira anota o horário de entrada do paciente e quantos minutos ele tem até que sua condição de saúde se torne crítica. Sabe-se que os pacientes são atendidos de 30 em 30 minutos (sempre nas horas cheias ou meias horas) quando na fila de atendimento. O inicio da triagem e do atendimento se dá às 7h da manhã, se não há nenhum paciente sendo atendido e a fila está vazia, o primeiro paciente é atendido no instante que chega na triagem. O médico atende até o último paciente na fila. A preocupação é se algum paciente atingiu uma condição crítica enquanto não tenha sido atendido. Para tanto você foi convidado para verificar na fila quantos pacientes atingem a condição crítica.;"A entrada contém vários casos de teste. Cada caso de teste começa com uma linha com o número inteiro N, 0 < N < 25;o número de pacientes que chegam à triagem. A seguir são N linhas com os valores inteiros H, M e C, com 7 < H < 19, e 0 ≤ M <60, a hora e minuto que o paciente chega à triagem. O paciente da linha i sempre chega antes que, e no máximo junto com, o paciente da linha i + 1. E 0 ≤C ≤ 720 o número de minutos antes do paciente atingir a condição crítica de saúde.";Para cada caso de teste pede-se que se imprima em uma linha única o número de pacientes que atingiram a condição crítica ainda na fila de atendimento. ;False;9 / 10;529;82;15.50%
2507;Código de Hamming;Ad-Hoc;10;"O código de Hamming permite detecção e correção de erros de 1 bit na leitura de dados. Vamos considerar palavras de 16 bits. Na tabela abaixo está a palavra 4ac5hex em sua forma binária, cada bit possui sua numeração de posição indicada:


Na codificação de Hamming, a numeração das posições dos bits utiliza uma contagem na qual se reserva os valores de posiçã que são potência de 2: 1, 2, 4, ... para inserir bits de paridade. Estes bits serão utilizados como paridade para a codificação de Hamming. No caso acima ficaria:


Para calcular a paridade de cada bit de hamming usamos os bits de acordo com sua posição. Por exemplo, o bit da posição 11 irá influenciar os bits de hamming: 8, 2 e 1, pois 11 = 8+2+1. Para o bit de paridade 2, tomamos todos os que influenciam esta paridade. Para uma palavra de 16 bits são: 3 (2+1), 6 (4+2), 7 (4+2+1), 10, 11, 14, 15, 18 e 19. Neste caso, se a soma destes bits for par, a paridade é par e o bit de hamming é 0, caso contrário o bit de hamming é 1. Veja a análise completa:


Uma vez assim codificada, a palavra resultante de 21 bits pode ser apresentada na forma hexadecimal como: 958a9hex. A vantagem disto é que, se na leitura houver erro de no máximo 1 bit, este erro poderá ser corrigido. Veja por exemplo se ao
ler a palavra, tivéssemos lido o valor 978a9hex. Construindo a tabela dos bits teremos:



Olhando para as paridades dos bits de Hamming, vemos que a paridade não bate para os bits 1, 4 e 8, isto representa que houve um erro de leitura no bit (1+4+8) 13 e prontamente corrigimos. A você foi pedido um programa que analize as palavras de 21 bits lidas, codificadas com a paridade de hamming, e imprima as palavras corretas de 16 bits.";A entrada contém vários casos de teste. Cada caso contém em uma única linha um valor hexadecimal de 21 bits: H, 0 ≤ H ≤ 1fffff. H representa uma palavra de 16 bits codificada com bits de paridade de hamming, que pode possuir no máximo erro de 1 bit. Os dígitos hexadecimais alfabéticos estão grafados em letras minúsculas.;Para cada caso de teste da entrada seu programa deve gerar uma única linha de saída uma palavra hexadecimal de 16 bits. Contendo a informação lida corrigida pela técnica de Hamming e livre dos bits de paridade. Os dígitos hexadecimais em letras minúsculas.;True;10 / 10;37;5;13.51%
2508;Guru da Sorte;Ad-Hoc;3;"Clodovildo Procariontes Urus é um Guru da Sorte, ele usa numerologia como uma ciência que estuda a sorte a partir de números. Um exemplo de aplicação da numerologia está no cálculo da sorte a partir do nome da pessoa. Muitos preocupados com a sorte acabam mudando o nome para garantir uma sorte melhor. O cálculo do número da sorte é baseado na tabela pitagórica, onde cada letra é traduzida para um número:



Uma vez traduzida a letra por números, fazemos a soma, e somamos os dígitos dos resultados até sobrar um valor entre 1 e 9. Veja por exemplo o nome ""Harry Potter"": 8+1+9+9+7+7+6+2+2+5+9 = 65 → 6+5 = 11 → 1+1 = 2. O número da sorte para
Harry Potter é 2. Clodovildo solicitou a você um programa que calcule o número da sorte a partir de nomes fornecidos, para
que ele possa declarar a sorte da pessoa.";A entrada contém vários casos de teste. Cada caso de teste apresenta um nome N em uma linha única, o nome é composto por letras sem acentuação, e o cedilha está representado como a letra ‘C’. Cada nome tem no máximo 100 caracteres.;Para cada caso de teste da entrada seu programa deve gerar para nome de entrada, uma linha com o número da sorte.;True;3 / 10;776;323;41.62%
2509;Editor Latex;Strings;5;"O LATEX é um excelente interpretador de linguagem de formatação para construção de textos, artigos, apresentaçõees, ... Para facilitar a construção de um texto em LATEX normalmente se utiliza um editor específico. O poder da linguagem vem da grande facilidade de inclusão de módulos e pacotes. Um destes pacotes é o pstricks que junto com pst-node e pst-tree permite construir árvores gerais. O nosso intuito é construir árvores binárias. O comando a seguir constrói a árvore da figura:
\pstree{\Tcircle{A}}{\pstree{\Tcircle{B}}{\Tcircle{D}\Tcircle{E}}\Tcircle{C}}



De uma forma geral o comando \pstree{}{} recebe dois argumentos: o primeiro argumento é o raiz, necessariamente um nó, e o segundo são as árvores filhas que podem ser nó ou árvore (recursivamente por um comando \pstree{}{}). Um nó é representado pelo comando \Tcircle{} que irá criar um círculo com seu argumento escrito em seu interior. Os filhos, precisam ser exatamente 2 (para nosso objetivo: árvore binária). Como este comando possui vários níveis de recursividade profundidade da árvore) acaba ficando confuso a contagem de parˆentesis. Uma pequena troca produz resultados inesperados. Veja o exemplo:
\pstree{\Tcircle{A}}{\pstree{\Tcircle{B}}{\Tcircle{D}}{\Tcircle{E}}\Tcircle{C}}

A você foi pedido um programa, para ser incorporado em um Editor LATEX, que verifique se a sintaxe do pstree está correta para formar árvores binárias.";A entrada consiste de vários casos de teste, cada caso de teste consiste de uma linha única com uma expressão de formatação do LATEX para a construção de uma árvore binária usando os comandos \pstree{}{} e \Tcircle{}. O tamanho máximo da expressão é de 1000 caracteres sem qualquer espaço em branco inserido. Como argumento do comando \Tcircle{} temos sempre um único caracter no intervalo 'A' a 'Z'. Não existe redundância de chaves, somente as chaves de primeiro nível que abriga os argumentos de cada comando.;"Para cada caso de teste da entrada seu programa deve gerar em uma linha única a saída ""SIM"" se a expressão de formatação está construída como uma árvore binária, ou ""NAO"" (sem acentuação) caso contrário.";True;5 / 10;31;13;41.94%
2510;Batmain;Iniciante;2;Como todos sabem, existem diversos heróis que defendem a humanidade de capangas e forças do mal. Em Codham, uma das cidades mais sombrias que existem, vive Batmain, o cavaleiro das trevas. Resumidamente, Batmain nada mais é que um ser humano gênio, multibilionário, filantropo que também é mestre em mais de cem artes marciais. Apesar de ninguém conhecer sua real identidade, por ele utilizar uma armadura com disfarce de morcego, todas as pessoas do bem o amam. Obviamente, as pessoas más o temem. Após diversas batalhas, todos os seus vilões haviam sido capturados pelo Batmain e a sensação de segurança parecia fazer parte dos cidadãos de Codham novamente. Toda essa tranquilidade atípica deixou de existir a dois dias, quando o palhaço do crime – também conhecido como Coderinga ­– escapou de Arkham e conseguiu tornar a cidade mais caótica do que nunca. Você trabalha para a polícia de Codham, em um reconhecido cargo de batprogramador (profissão responsável por resolver problemas que envolvem o cavaleiro das trevas, realizando a codificação de algoritmos) e lhe foi solicitado a seguinte tarefa: dizer, para cada vilão, se ele alguma vez já foi capturado pelo cavaleiro das trevas.;A primeira linha da entrada é composta por um número inteiro T que indica a quantidade de casos de testes. Cada caso de teste é composto por uma cadeia de caracteres de tamanho N (1 < N < 26). Todos os caracteres são letras maiúsculas ou minúsculas do alfabeto inglês.;Caso o vilão alguma vez já foi capturado pelo Batmain, imprima Y. Caso contrário, imprima N.;True;2 / 10;3711;2273;61.25%
2511;WWW;Ad-Hoc;8;Recentemente Wesley, Wilson e Werick compraram suas casas uma adjacente a outra com distância mínima entre elas na cidade de Nlogônia. No ponto de interseção de suas casas mora Vitor o vizinho rico que todas as noites realiza festas badaladas com as garotas de sua região. Os jovens universitários passam a madrugada estudando e incomodados com o som transmitido da casa de Vitor resolveram acionar a polícia. Os policiais bem educados como de costume responderam que a ocorrência seria atendida se e somente se os vizinhos fossem primos.;A primeira linha de cada caso de teste contêm um inteiro (1 ≤  N  ≤ 106) representando a quantidade de vizinhos, na linha seguinte será dado o identificador de cada vizinho.;"A saída deverá conter os identificadores dos vizinhos que podem acionar a polícia por ordem de entrada separados por espaço, caso isso não seja possível imprima “*” sem as aspas. Cada caso de teste deve terminar com ""\n"".";False;8 / 10;647;180;27.82%
2512;O Jogo Reverse;Ad-Hoc;9;"Você já ouviu falar no jogo reverse? É um jogo bem simples. Dada uma matriz 3x3, composta de ‘*’ (asteriscos) e ‘-’ (traços), o objetivo do jogador é alterar, através de pequenas mudanças feitas em seus caracteres, o estado da matriz de forma a chegar em um estado válido, no qual todos os caracteres da matriz são traços ou todos são asteriscos. A única regra para se fazer alguma mudança na matriz é a seguinte: o jogador escolhe uma célula da matriz e, em seguida, o caracter correspondente a esta e os correspondentes às suas células adjacentes (esquerda, direita, acima e abaixo) devem alterar seu valor para o caracter oposto, ou seja, se houver algum caracter ‘*’, este passará a ser ‘-’, e se houver ‘-’, ‘*’. Abaixo, um exemplo de mudança de estado (em vermelho as células escolhidas).


A versão multiplayer do jogo se dá na seguinte forma: uma partida é composta por diversas rodadas. Em cada rodada, são dadas duas matrizes de mesmo estado inicial (escolhido ao acaso), uma para cada jogador. Os jogadores devem então, simultaneamente, alterar o estado inicial da sua matriz (através das mudanças descritas acima) para um estado final válido. O jogador decide livremente a qual destes estados ele deve chegar. Ganha uma rodada o jogador que cumprir o objetivo acima em menos passos. Uma mudança na matriz (as alterações dos caracteres correspondentes à célula escohida e adjacentes) corresponde a um passo neste jogo. Desta forma, a quantidade de caracteres alterados durante as mudanças de estado não interfere na quantidade de passos atingida. O empate em uma rodada ocorre quando os jogadores obtêm a mesma quantidade de passos, não importando qual estado final eles escolheram. Ganha a partida o jogador que obtiver mais rodadas ganhas. Há empate em uma partida quando os jogadores tem quantidades iguais de rodadas ganhas.

Ufah! Beleza. Agora que você conhece o jogo, talvez seja capaz de ajudar meus amigos. Fred e Jason são dois viciados em Reverse. Eles jogam de maneira ótima, ou seja, eles sempre sabem, partindo de um estado inicial qualquer, chegar a ambos os estados finais válidos com a menor quantidade de passos possível. Obviamente, também sempre escolhem o caminho com a menor quantidade mínima de passos. Desta forma, o empate torna-se inevitável!

Então, para que o jogo não fique sem graça, uma pequena mudança foi feita: Fred e Jason começam com matrizes diferentes. Desta forma, precisamos que você determine quem vai ganhar a partida, neste formato de jogo.";Cada entrada é composta várias linhas. Na primeira linha, haveŕa um número R indicando a quantidade de rodadas em uma única partida. Em seguida são descritas 2*R matrizes, na representação mostrada acima, uma embaixo da outra, cada par representando respectivamente, na ordem em que aparecem, a matriz inicial de Fred e a matriz inicial de Jason, correspondendo a uma rodada. Há um espaço em branco entre dois caracteres consecutivos na mesma linha de uma matriz e uma linha em branco separando duas matrizes consecutivas.;A saída é composta por uma linha indicando a mensagem: “Jason wins!”, se Jason ganhar a partida, “Fred wins!”, se Fred ganhar a partida, ou “Its a draw!”, se houver empate na partida.;True;9 / 10;70;19;27.14%
2513;Xoringan;Ad-Hoc;10;"Os membros do clã Uxorra que habitam a prestigiada Vila da folha são proeminentes ninjas cujas habilidades são invejadas por muitos. Além de sua força e excelentes jutsus (técnicas ninjas) com fogo, eles possuem um trunfo que os destaca ainda mais dos outros ninjas da vila e do mundo: O seu Xoringan.

O Xoringan é um dojutsu (olhos com habilidades ninjas) kekkei genkai (habilidade transferida através de linhagem sanguínea) muito poderoso e usado por membros do clã geralmente em batalhas. Ele dá ao usuário inúmeras habilidades úteis durante uma luta como ver o fluxo de chakra (energia interna ultilizada para fazer jutsus) do inimigo, prever os movimentos do adversário e até copiar técnicas olhando para elas uma única vez.

Os jutsus são feitos com uma combinação específica de selos (gestos com as mãos unidas e posicionamento dos dedos) onde cada selo só pode ser utilizado uma única vez em um jutsu. Alguns selos são mais poderosos e quando usados em um jutsu lhe dão poder de ataque maior, outros, nem tanto. Existem 64 tipos de selos diferentes sendo que o mais fraco deles tem poder de ataque 1, o segundo mais fraco tem o dobro do primeiro, o terceiro o dobro do segundo e assim por diante. Isso faz com que cada jutsu diferente tenha um poder de ataque único e pode ser visto por um usuário de Xoringan como um número. Por exemplo, um jutsu que use o primeiro, o terceiro e o quinto selos mais fracos tem poder de ataque 21 e pode ser simplesmente referenciado como jutsu 21.

Há ninjas habilidosos que conseguem executar jutsus secretos há medida que executam outros e fazem isso reaproveitando selos usados nesses jutsus. Por exemplo, se esse ninja executa uma sequência de técnicas, ele pode reaproveitar cada combinação de selos usada para fazer cada um desses jutsus para fazer a combinação de selos do jutsu secreto. Para saber qual é o jutsu secreto é preciso saber quais selos, dentre todos os usados na sequência, permanecem ativos. Quando um selo é feito pela primeira vez ele é ativado, porém se é feito uma segunda vez é então desativado, podendo ser ativado novamente se for feito outra vez em um próximo jutsu da sequência.

Por exemplo, se um ninja executar os jutsus 10, 31, 21, 15, 14, 7, 5 e 9 e tentar executar o jutsu secreto usando os selos entre o terceiro e o sétimo (21, 15, 14, 7, 5), o jutsu secreto que irá fazer é o 22. Também é importante observar que nem todo jutsu é tão secreto assim. Se na mesma sequência ele tentasse fazer o jutsu secreto durante só o primeiro jutsu, ele só acabaria por fazer o jutsu 10 novamente.

Rodrigo é um jovem Uxorra que usa seu Xoringan para poder prever todos os jutsus que seu adversário irá fazer e na ordem exata portanto é capaz de medir à ameaça que seu oponente representa. E esta, nada mais é do que a soma do poder de ataque de todos os possíveis jutsus secretos que seu adversário tem a possibilidade de fazer.

Sua tarefa é fazer um programa que simule os poderes do Xoringan e consiga dizer, dado a sequência de jutsus que o ninja irá fazer, quanto de ameaça ele representa.";A entrada é composta de vários casos de teste. A primeira linha de um caso de teste contém um inteiro N (1 ≤ N ≤ 103) que representa a quantidade de jutsus prevista pelo Xoringan. A segunda linha contém N valores inteiros na ordem de execução que representam o poder de ataque de cada jutsu.;A saída é composta de uma linha por caso de teste representando o valor da ameaça que uma sequência de jutsus representa módulo 109+7.;False;10 / 10;185;33;17.84%
2514;Alinhamento Lunar;Matemática;1;"Em uma galáxia muito, muito distante, existe o planeta Nlôguérrà, habitado predominantemente por dinossauros. Nlôguérrà é orbitado por três luas. A órbita de cada lua tem a forma de uma circunferência cujo centro é Nlôguérrà, como indica a figura abaixo, à esquerda.

				


				Sempre que as três luas se alinham e ficam entre o planeta e o sol, como mostra a figura acima, à direita, uma catástrofe terrível acontece! Na última vez que isto ocorreu, há exatamente M anos, uma grande seca se instaurou em todo o planeta, reduzindo sua população de dinossauros pela metade. A primeira lua leva L1 anos terrestres para completar uma volta ao redor do planeta, enquanto a segunda leva L2 anos e a terceira leva L3 anos. Determine quantos anos irão se passar até o próximo alinhamento lunar entre o planeta e o sol.

				Considere que tanto o planeta quanto o sol são estacionários.";A entrada contém vários casos de teste. A primeira linha de cada caso contém o inteiro M (1 ≤ M ≤ 109), indicando há quantos anos ocorreu o último alinhamento. A segunda linha contém três inteiros L1, L2 e L3 (1 ≤ L1, L2, L3 ≤ 103), o tempo levado, em anos, para as luas completarem uma volta. É garantido que não houve alinhamentos como especificado nos últimos M-1 anos e que não há alinhamento este ano.A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, imprima uma linha contendo um número X, indicando que o próximo alinhamento lunar entre o planeta e o sol ocorrerá daqui a X anos.;True;1 / 10;600;350;58.33%
2515;Bolacha;Ad-Hoc;6;"Carol, Carla, Marcos e Leonardo são companheiros de quarto. Ontem eles fizeram uma grande festa, e hoje eles querem dividir o que sobrou da comida da festa entre si. Enquanto Carol e Carla estão discutindo como vão dividir um certo bolo que sobrou entre elas, Marcos e Leonardo irão dividir um pacote de bolachas entre eles (bolachas, não biscoitos!).

				O pacote de bolacha tem N porções. A quantidade de bolacha em cada porção não é necessariamente igual. Como exemplo, considere o pacote de bolacha abaixo. Ele tem N=5 porções, que, da esquerda para a direita, têm 3, 1, 2, 3 e 2 bolachas, respectivamente.

				

				Marcos irá dividir o pacote em duas partes, cortando o pacote em algum dos N-1 pontos entre duas porções consecutivas. No exemplo, Marcos tem 4 opções de corte, representadas em pontilhado. Após o corte, Leonardo irá escolher qual das duas partes do pacote ele irá comer. Marcos comerá então a outra parte do pacote.

				Depois do corte, obviamente Leonardo irá escolher a parte que mais tem bolachas ao todo. Marcos sabe disso, e, por isso, precisa escolher o corte a ser feito de tal forma que a quantidade de bolachas que ele irá comer seja a máxima possível. Ajude-o com essa tarefa!";A entrada contém vários casos de teste. A primeira linha de cada caso consiste em um único inteiro N (2 ≤ N ≤ 105) denotando o número de porções no pacote. A segunda linha contém N inteiros b1, b2, ..., bN (1 ≤ bi ≤ 104), o número de bolachas em cada porção, da esquerda pra direita.A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, imprima uma única linha contendo dois inteiros separados por um espaço, indicando quantas bolachas Marcos irá comer e quantas bolachas Leonardo irá comer, nesta ordem.;True;6 / 10;1375;339;24.65%
2516;Corrida;Matemática;2;"Para entrar em forma para o próximo verão, você e seu amigo decidiram correr todas as manhãs na rua da universidade. Geralmente vocês correm juntos, mas, na corrida de hoje, seu amigo começou a correr um mais cedo e, por isso, está um pouco mais à frente de você.

				Neste momento, seu amigo está a S metros de distância de você. Você está correndo a uma velocidade constante de va metros por segundo, e seu amigo está correndo a uma velocidade constante de vb metros por segundo. A figura abaixo ilustra a situação:

				

				Sua tarefa é determinar se você irá alcançar seu amigo, e, em caso positivo, em quantos segundos isto irá acontecer.";A entrada contém vários casos de teste. A única linha de cada caso contém três inteiros S, va e vb (1 ≤ S, va, vb ≤ 103), a distância atual para seu amigo (em metros), sua velocidade (em metros por segundo) e a velocidade de seu amigo (em metros por segundo), respectivamente.A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, se não é possível alcançar seu amigo, imprima uma linha contendo “impossivel” (sem aspas). Caso contrário, imprima uma linha contendo o tempo decorrido, em segundos, até que você alcance seu amigo. Arredonde e imprima a resposta com exatamente duas casas decimais.;True;2 / 10;1174;560;47.70%
2517;Desafio PoGro;Geometria Computacional;5;"A PoGro é uma famosa marca de câmeras digitais de alta tecnologia. Este ano, a PoGro está promovendo o Desafio PoGro! Neste desafio, cada participante deve saltar do topo de um prédio e chegar a salvo em um ponto específico no chão, utilizando apenas uma asa delta.

				Considere que o topo do prédio está no ponto (0,C) do plano cartesiano, e que a chegada está no ponto (xF, 0). Para completar o desafio, o participante deve seguir rigorosamente o trajeto definido pela parábola dada pela função f(x) =  -x²/A - x/B + C, onde A, B e C são escolhidos pela organização do desafio de tal forma que f(xF) = 0. O trajeto é apresentado na figura abaixo.

				

				A organização colocou uma câmera PoGro na posição (xc,yc) do plano, que será utilizada para tirar uma foto do participante. Para que a foto tirada seja a melhor possível, a foto será tirada no exato momento em que o participante estiver o mais próximo possível da câmera.

				Entretanto, a organização está com dificultades em determinar qual será a distância entre a câmera e o participante no momento em que a foto será tirada (exemplificada pela reta pontilhada na figura acima). Dado o trajeto do participante e a posição da câmera, determine a distância entre a câmera e o participante no memento em que a foto será tirada!";"A primeira linha de cada caso de teste contém três inteiros A, B, C (1 ≤ A, B, C ≤ 200) que descrevem o trajeto. A segunda linha contém dois inteiros xc e yc (0 ≤ xc, yc ≤ 200) indicando a posição da câmera. A terceira e última linha de cada caso de teste contém o inteiro xF  (1 ≤ xF  ≤ 200) indicando o ponto de chegada.

					É garantido que f(xF) = 0. Além disso, note que f(x) é tal que a função é sempre decrescente para x ≥ 0, e que a altura do prédio é sempre positiva.

					A entrada termina com fim-de-arquivo (EOF).";Para cada caso de teste, imprima uma linha contendo a distância entre a câmera e o participante no momento da foto. Arredonde e imprima a resposta com exatamente 2 casas decimais.;True;5 / 10;83;43;51.81%
2518;Escada do DINF;Geometria Computacional;3;"O prédio do Departamento de Ilhas Naturais Federais (DINF) está passando por uma reforma para deixá-lo mais acessível. No prédio há uma escada de N degraus. Cada degrau tem H centímetros de altura, C centímetros de comprimento e L centímetros de largura. A figura (a) exemplifica uma escada com N=4 degraus.

				

				Para tornar o prédio mais acessível, o chefe do DINF decidiu colocar uma rampa sobre a escada. A rampa é rígida e tem forma retangular. Ela será colocada sobre a escada de forma a cobrir todos os seus degraus, como indicado pela figura (b).

				Sua tarefa é, dado o número de degraus e suas medidas, determinar qual deve ser área total da superfície da rampa.";A entrada contém vários casos de teste. A primeira linha de cada caso contém um inteiro N (1 ≤ N ≤ 1000), o número de degraus na escada. A segunda linha contém três inteiros H, C e L (1 ≤ H, C, L ≤ 100), as medidas de cada degrau, em centímetros.A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, imprima uma linha contendo a área total da superfície da rampa, em metros quadrados. Arredonde e imprima este valor com exatamente 4 casas decimais.;True;3 / 10;1162;625;53.79%
2519;Estratégia Campeã;Estruturas e Bibliotecas;7;"Os Wildcats estão na grande final de basquetebol escolar deste ano! Experiente, o técnico Bolton está utilizando sua famosa estratégia campeã para vencer o jogo e, logo, o torneio. Entretanto, para poder aplicar sua estratégia, ele precisa frequentemente contar o número de jogadores adversários em algumas regiões do campo durante todo o jogo. Mas, sabendo da estratégia do técnico, os jogadores adversários também mudam suas posições frequentemente durante o jogo!

				Considere que o campo tem N linhas e M colunas, numeradas de 1 a N e de 1 a M, respectivamente. A figura abaixo exemplifica: (a) um campo com N=3, M=4, e as posições iniciais de cada jogador adversário; (b) o jogador na posição (1,2) se move para a posição (3,3); (c) há agora 3 jogadores na região entre as posições (1,3) e (3,4), inclusive.

				

				Dadas as posições iniciais dos jogadores e a movimentação deles durante o jogo, ajude o técnico em suas contagens!";"A primeira linha de cada caso de teste contém dois inteiros N e M (1 ≤ N, M ≤ 1000), o número de linhas e de colunas do campo, respectivamente. As próximas N linhas contém M inteiros cada, descrevendo o campo com as posições iniciais dos jogadores. O inteiro 0 representa uma posição vazia, enquanto o inteiro 1 representa uma posição com um jogador. A próxima linha contém um inteiro Q (1 ≤ Q ≤ 105), o número de operações. As próximas Q linhas descrevem uma operação cada. Cada operação é descrita por cinco inteiros R I1 J1 I2 J2.

					Se R=0, o jogador na posição (I1,J1) se move para a posição (I2,J2) (1 ≤ I1,I2 ≤ N, 1 ≤ J1,J2 ≤ M). É garantido que, antes da operação, a posição (I1,J1) contém um jogador, e a posição (I2,J2) está vazia.

					Se R=1, o técnico faz uma consulta sobre a região (I1,J1) e (I2,J2), inclusive (1 ≤ I1 ≤ I2 ≤ N, 1 ≤ J1 ≤ J2 ≤ M).
					A entrada termina com fim-de-arquivo (EOF).";Para cada caso de teste, imprima uma linha para cada consulta contendo o número de jogadores que estão atualmente na região consultada.;True;7 / 10;132;61;46.21%
2520;O Último Analógimôn;Iniciante;4;"Analógimôn Go! é um jogo bastante popular. Em sua jornada, o jogador percorre diversas cidades capturando pequenos monstrinhos virtuais, chamados analógimôns. Você acabou de chegar em uma cidade que contém o último analógimôn que falta para sua coleção!

				A cidade pode ser descrita como um grid de N linhas e M colunas. Você está em uma dada posição da cidade, enquanto o último analógimôn está em outra posição da mesma cidade. A cada segundo, você pode se mover (exatamente) uma posição ao norte, ao sul, a leste ou a oeste. Considerando que o analógimôn não se move, sua tarefa é determinar o menor tempo necessário para ir até a posição do monstrinho.

				A figura abaixo descreve o exemplo da entrada, e apresenta um caminho percorrido em 5 segundos. Outros caminhos percorridos no mesmo tempo são possíveis, mas não há outro caminho que pode ser percorrido em um tempo menor.";"A entrada contém vários casos de teste. A primeira linha de cada caso contém dois inteiros N e M (2 ≤ N, M ≤ 100), o número de linhas e de colunas na cidade, respectivamente. As próximas N linhas contém M inteiros cada, descrevendo a cidade. O inteiro 0 indica uma posição em branco; o inteiro 1 indica a sua posição na cidade; o inteiro 2 indica a posição do analógimôn na cidade. É garantido que haverá exatamente um inteiro 1 e exatamente um inteiro 2 na descrição da cidade, e que os demais inteiros serão iguais a 0.

					A entrada termina com fim-de-arquivo (EOF).";Para cada caso de teste, imprima uma linha contendo o menor tempo necessário para ir até o monstrinho, em segundos.;True;4 / 10;2663;1192;44.76%
2521;Pergunte à Geógrafa;Geometria Computacional;3;"América e Vinícius estão estudando o sistema de coordenadas geográficas em esferas, com o qual é possível determinar a posição de qualquer ponto na superfície de uma esfera. Sua amiga Maísa, que é geógrafa, decidiu ajudá-los nesses estudos. Ela então esclareceu o funcionamento deste sistema de coordenadas.

				Neste sistema, um ponto é determinado por sua latitude e sua longitude. A latitude varia de -90o a 90o e indica o ângulo do ponto em relação ao centro da esfera, no sentido vertical, como indica a figura (a). A longitude, por sua vez, varia de -180o a 180o e indica o ângulo do ponto em relação ao centro da esfera, no sentido horizontal, como indica a figura (b). Como exemplo, a figura (c) indica a posição de um ponto P com latidude 45o e longitude 45o.

				

				Considere que o centro da esfera está na origem O = (0, 0, 0) do sistema cartesiano do espaço, e, olhando a esfera de frente, o eixo x a cruza da esquerda para a direita, o eixo y de baixo para cima, e o eixo z do ponto menos profundo ao mais profundo. A figura (d) indica um exemplo para uma esfera de raio 1, onde o ponto P está em (1∕2, (√2)∕2,-1∕2).

				Dado o raio da esfera e as coordenadas geográficas de um ponto P, determine suas coordenadas no sistema cartesiano do espaço.";Cada caso de teste contém uma única linha contendo três inteiros r, la e lo (1 ≤ r ≤ 50,-90 ≤ la ≤ 90,-180 ≤ lo < 180), indicando o raio da esfera, a latitude e a longitude do ponto P, em graus. A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, imprima uma única linha contendo três valores x, y e z, separados por espaço, indicando as coordenadas do ponto P. Arredonde e imprima cada coordenada com exatamente duas casas decimais.;True;3 / 10;129;69;53.49%
2522;Rede do DINF;Grafos;7;"O prédio do Departamento de Ilhas Naturais Federais (DINF) está passando por uma grande reforma. Por isso, os antigos laboratórios de informática foram destruídos, e um novo será construído no segundo andar do prédio.

				Existem N computadores no novo laboratório, numerados de 1 a N. Para cada computador i, 1 ≤ i ≤ N, é conhecida a posição (xi,yi) na qual ele está instalado. Agora, é necessário construir a rede que irá conectar todos os computadores do laboratório. Para tal, é possível construir cabos de rede entre pares de computadores. Para que a rede seja válida, os cabos devem ligar os computadores de tal forma que seja possível enviar uma mensagem de qualquer máquina para qualquer outra no laboratório, passando por um ou mais cabos instalados. A figura abaixo exemplifica uma possível configuração de uma rede válida:

				

				Sua tarefa é, dadas as posições de cada computador no laboratório, determinar o comprimento total mínimo de cabo de rede necessário para construir uma rede válida.";"A primeira linha de cada caso de teste contém o inteiro N (1 ≤ N ≤ 500), o número de computadores no laboratório. As próximas N linhas contém dois inteiros xi e yi cada (1 ≤ xi, yi ≤ 104), indicando a posição de um computador. Não há mais de um computador na mesma posição.

					A entrada termina com fim-de-arquivo (EOF).";Para cada caso de teste, imprima uma única linha contendo o comprimento total mínimo de cabo de rede necessário. Arredonde e imprima a resposta com exatamente duas casas decimais.;True;7 / 10;511;179;35.03%
2523;A Mensagem de Will;Iniciante;2;"Ao voltar de um intenso jogo de RPG na casa de um amigo, o jovem Will desapareceu misteriosamente! Todos estão desesperadamente procurando por ele por todos os cantos. Enquanto isso, coisas estranhas estão acontecendo em sua casa. Uma delas, entretanto, lhe permite comunicar-se com o garoto!

Há exatamente 26 lâmpadas penduradas na parede da sua sala, numeradas de 1 a 26 da esquerda para a direita. Além disso, há uma letra do alfabeto pintada na parede em baixo de cada lâmpada. Quando Will quer lhe enviar uma mensagem, ele irá (misteriosamente) piscar, uma a uma, as lâmpadas correspondentes a cada letra de sua mensagem. Por exemplo, se ele quer enviar a mensagem HELP, ele irá piscar, nesta ordem, as lâmpadas acima das letras H, E, L e P.

Dada a letra associada a cada lâmpada e a ordem das lâmpadas que foram piscadas por Will, decifre a mensagem que ele enviou!";"A entrada contém vários casos de teste. A primeira linha de cada caso contém uma string de exatamente 26 letras maiúsculas contendo todas as letras do alfabeto inglês. A primeira letra da string está associada à lâmpada 1; a segunda letra está associada à lâmpada 2; e assim por diante. A próxima linha contém um inteiro N (1 ≤ N ≤ 104), o número de lâmpadas que foram piscadas. A terceira linha contém N inteiros li (1 ≤ li ≤ 26), indicando as lâmpadas que foram piscadas, em ordem.A entrada termina com fim-de-arquivo (EOF).";Para cada caso de teste, imprima uma única linha contendo a mensagem enviada por Will.;False;2 / 10;4469;2163;48.40%
2524;Balas de Morango;Paradigmas;7;"Os N netos da madame Beauvoir podem ser travessos, mas também podem ser educados às vezes. Um dia, eles fizeram uma grande bagunça com as portas de sua mansão! No dia seguinte, entretanto, eles se comportaram muito bem. Por isso, Madame Beauvoir decidiu recompensar seus netos com balas de morango.

Agora ela está na distribuidora de doces para comprar as balas. O número total de balas compradas deve ser tal que (i) todas as balas compradas devem ser distribuídas entre seus netos; e (ii) todos os netos devem receber a mesma quantidade de balas. Note que a quantidade de balas que cada neto recebe não é relevante, desde que todos recebam a mesma quantidade.

Há M pacotes de doces disponíveis na loja. O pacote i (1 ≤ i ≤ M) contém Bi balas de morango. O vendedor exige que Madame Beauvoir compre apenas pacotes inteiros, isto é, não é possível abrir um pacote na loja e comprar apenas algumas balas dentro dele.

Como ela é muito rica, ela não se importa com o preço de cada pacote. De fato, para impressionar seus netos, ela quer comprar o maior número possível de pacotes de balas. Sua tarefa é determinar qual é o maior número possível de pacotes que podem ser comprados por ela de forma que o total de balas compradas pode ser dividido entre seus netos.";A entrada contém vários casos de teste. A primeira linha de cada caso contém dois inteiros N e M (1 ≤ N, M ≤ 103). A segunda linha contém M inteiros Bi (1 ≤ Bi ≤ 109), indicando a quantidade de balas em cada pacote.A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, imprima uma linha contendo o maior número possível de pacotes que podem ser comprados.;False;7 / 10;300;130;43.33%
2525;Cacheiro Viajante;Geometria Computacional;10;"Clóvis Eduardo é um cacheiro viajante, ou seja, ele viaja o mundo para praticar geocaching. Geocaching é um jogo mundial de GPS no qual os jogadores encontram caixas escondidas (conhecidas como geocaches) por outros jogadores fazendo uso das coordenadas terrestres.

Devido a sua grande reputação e experiência (mais de 32768 geocaches encontrados em todos os continentes), Clóvis Eduardo foi convidado pelo ministério de Lazer e Esporte da Nlogônia a ajudar a esconder o geocache mais importante da história do país, uma grande caixa de ouro maciço em forma de cavalo, em comemoração aos 50 anos da instauração da república na Nlogônia.

Entretanto, não basta apenas encontrar o local perfeito. Novos geocaches devem seguir as regras nacionais de colocação atualizadas este ano:


	Nenhum geocache novo pode ser colocado no mesmo lugar de outro já existente;
	A soma das distâncias aos K geocaches já existentes mais próximos deve ser igual ou superior a D;
	Se existirem menos de K geocaches, deverão ser considerados todos os existentes na soma das distâncias.


A Nlogônia é representada por um plano e, atualmente, possui N geocaches ativos. O ministério de Lazer e Esporte escolheu C possíveis localizações para a colocação do geocache comemorativo e pediu para que Clóvis Eduardo os informasse quantas destas localizações são viáveis de acordo as regras nacionais de colocação.

Como Clóvis Eduardo é preguiçoso, ele pediu para que você escrevesse um programa para resolver o seu problema.";"A entrada contém vários casos de teste. A primeira linha de cada caso contém quatro inteiros separados por espaços N, C (1 ≤ N, C ≤ 104), K (1 ≤ K ≤ 8) e D (1 ≤ D ≤ 105).

As próximas N linhas contém dois inteiros separados por um espaço, xi e yi (0 ≤ xi, yi ≤ 104), a posição do i-ésimo geocache já existente na Nlogônia. Não há posições repetidas.

As próximas C linhas contém dois inteiros separados por um espaço, xj e yj (0 ≤ xj, yj ≤ 104), a j-ésima possível posição do novo geocache.A entrada termina com fim-de-arquivo (EOF).";Para cada caso de teste, imprima exatamente uma linha com o número de posições válidas sugeridas pelo Ministério de Lazer e Esporte.;False;10 / 10;100;49;49.00%
2526;Cardápio;Estruturas e Bibliotecas;7;"A Universidade Federal da Nlogônia (a UFNl) dispõe de um Restaurante Universitário (o RUFNl) que fornece refeições diárias a todos os alunos da universidade.

O cardápio do restaurante é sempre composto por três alimentos distintos: uma entrada, um acompanhamento e uma sobremesa. Existem N alimentos que podem ser utilizados pelo restaurante para formar seu cardápio. Os alimentos são bem variados, de forma que qualquer alimento pode ser utilizado como entrada, como acompanhamento ou como sobremesa.

Entretanto, os nutricionistas exigem que o cardápio seja montado sempre de forma balanceada. Para tal, é necessário que a entrada tenha menos calorias que o acompanhamento e que o acompanhamento tenha menos calorias que a sobremesa. Além disso, é necessário que a entrada tenha mais fibras que o acompanhamento e que o acompanhamento tenha mais fibras que a sobremesa.

Sua tarefa é determinar quantos cardápios distintos podem ser formados, isto é, de quantas maneiras é possível selecionar três alimentos dentre os N disponíveis para formar um cardápio válido.";"A entrada contém vários casos de teste. A primeira linha de cada caso contém o inteiro N (3 ≤ N ≤ 106). Considere que os alimentos são numerados de 1 a N, em ordem crescente de calorias. Desta forma, considere que o alimento i tem i Calorias.

A segunda linha contém N inteiros distintos f1,f2,...,fN (1 ≤ fi ≤ N), indicando a quantidade de fibra nos alimentos. O alimento i possui fi unidades de fibra.A entrada termina com fim-de-arquivo (EOF).";Para cada caso de teste, imprima uma linha contendo o número de cardápios que podem ser formados.;False;7 / 10;223;80;35.87%
2527;Cheddar;Paradigmas;9;"Pobre Petya está com fome.
– Mãe! Mãe! Mããããe! – Parte o grito do porão.
– Que foi, filho? – A doce senhora responde.
– Quero cheddar!

CHEDDAR! O menino está com fome, quer cheddar. Você, vizinho de Petya e excelente programador, ouviu os gritos e está disposto a ajudar. Como a polícia do queijo não permite a venda de cheddar para qualquer um, você fará um programa para facilitar as compras da querida mãe.

Todos os candidatos à compra de cheddar devem passar por um desafio de sorte. Eles recebem N dados (honestos, com 6 lados e valores de 1 a 6) e um número V. Todos os N dados são lançados e o valor S é calculado sendo a soma dos números sorteados. Se S for maior ou igual a V, a compra está permitida, caso contrário, o comprador volta para casa de mãos vazias.

Seu programa deve calcular, dados N e V, a probabilide da mãe de Petya conseguir comprar cheddar.";A entrada contém vários casos de teste. Cada caso contém uma única linha com dois número inteiros, N (0 < N ≤ 1000) e V (0 ≤ V ≤ 6000), respectivamente.A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, imprima uma única linha com um único número com precisão de quatro casas decimais, a probabilidade da mãe de Petya conseguir comprar cheddar.;False;9 / 10;382;105;27.49%
2528;Cidade Proibida;Grafos;5;"Suas férias estão finalmente prestes a começar! Para aproveitar o máximo seu merecido descanso, você decidiu viajar de Curytyba para Riacho de Fevereiro, uma grande cidade turística do país. Existem N cidades no país, numeradas de 1 a N. Curytyba é a cidade C, enquanto Riacho de Fevereiro é a cidade R. Além disso, exitem também M rotas disponíveis. Cada rota liga duas cidades A e B, pode ser utilizada para ir de A para B ou vice-versa, e leva exatamente uma hora para ser realizada.

Tudo estaria bem para sua viagem se não fosse por um detalhe: o prefeito da cidade de Estadunido (cidade E), o sr. Donaldo Trumpe, em um decreto polêmico, proibiu todo cidadão de Curytyba de entrar em sua cidade! Por isso, você deve ir para Riacho de Fevereiro sem passar por Estadunido. Sua tarefa é determinar o menor número de horas necessárias para ir de Curytyba para Riacho de Fevereiro, sem passar por Estadunido.";"A entrada contém vários casos de teste. A primeira linha de cada caso contém dois inteiros N e M (3 ≤ N ≤ 1000, 1 ≤ M ≤ N(N-1)/2), o número de cidades e de rotas no país, respectivamente. As próximas M linhas descrevem uma rota cada. Cada linha contém dois inteiros A e B (1 ≤ A, B ≤ N, A≠B), indicando uma rota entre as cidades A e B. A última linha contém três inteiros C, R e E (1 ≤ C,R,E ≤ N, C≠R≠E), indicando qual cidade é Curytyba, Riacho de Fevereiro e Estatunido, respectivamente.

Nenhuma rota aparece mais de uma vez na entrada. É garantido que é possível ir da cidade C para a cidade R sem passar pela cidade E, utilizando as rotas dadas na entrada.A entrada termina com fim-de-arquivo (EOF).";Para cada caso de teste, imprima uma linha contendo o número mínimo de horas necessárias para ir da cidade C para a cidade R, sem passar pela cidade E.;False;5 / 10;359;179;49.86%
2529;Circo das Pulgas;Grafos;9;"Vasya e Petya resolveram investir em um novo empreendimento. Eles abriram um circo de pulgas.

Neste exato momento, eles estão ensaiando com suas P pulgas em uma linha reta. Cada inseto carrega uma pequena placa com um número inteiro e sabe seguir 4 ordens diferentes:


	Trocar o número em sua placa por outro especificado;
	Gritar a quantidade de números pares nas placas das pulgas de um dado intervalo de posições;
	Gritar a quantidade de números ímpares nas placas das pulgas de um dado intervalo de posições;
	Começar a dançar enquanto as pulgas de um dado intervalo de posições invertem a ordem de suas placas.


Alguns animais não entenderam a última tarefa e pediram um exemplo. Vasya prosseguiu:

Suponha que existam 10 pulgas inicialmente segurando placas com os seguintes valores:

70, 15, 3, 4, 15, 59, 0, 1, 444, 2

Se a ordem for para inverter a ordem das placas no intervalo [3, 7], a nova configuração seria:

70, 15, 0, 59, 15, 4, 3, 1, 444, 2

A dupla pediu para que você escrevesse um programa que simule o ensaio das pulgas. Desta forma, eles podem verificar se elas estão bem treinadas.";"A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros P e Q (1 ≤ P, Q ≤ 105). A linha seguinte contém P inteiros pi (0 ≤ pi ≤ 109) separados por espaços com o número inicialmente escrito na placa das pulgas.

As Q linhas seguintes descrevem as ordens dadas aos insetos e seguem uma das quatro possibilidades:


	S a v: Trocar o número da placa da pulga na posição a (1 ≤ a ≤ P) por v;
	E a b: Gritar a quantidade de números pares nas placas das pulgas no intervalo [a,b] (1 ≤ a ≤ b  ≤ P);
	O a b: Gritar a quantidade de números ímpares nas placas das pulgas no intervalo [a,b] (1 ≤ a ≤ b ≤ P);
	I a b: Inverter a ordem das placas no intervalo [a,b] (1 ≤ a ≤ b ≤ P).

A entrada termina com fim-de-arquivo (EOF).";Para cada caso de teste, imprima uma linha com o valor a ser gritado para cada operação de grito (tanto E quanto O).;False;9 / 10;133;50;37.59%
2530;Cola;Ad-Hoc;5;"Os alunos da quarta série do colégio Trale Lewous fizeram prova de Matemática no primeiro horário, todos entregaram uma folha apenas com as respostas e seus respectivos índices. Dona Maria Eduarda, a professora, suspeita Ricardinho de ter colado de Juan, o melhor aluno da turma.

Ricardinho foi chamado para conversar com a professora durante o recreio, a fim de verificar se houve cola ou não. Entretanto, ao ver que poderia ser pego, o menino, que é muito travesso, distraiu Maria Eduarda e apagou o índice das respostas na folha entregue. Por exemplo, se inicialmente estava escrito ""1) 20 2) 30 3) 35 ..."", agora restou apenas ""20 30 35 ..."".

A prova consistia de N questões, todas com respostas númericas. Entretanto, o menino conseguiu responder apenas M delas. A professora lembra, com certeza, que Ricardinho as escreveu em ordem na folha de respostas. Ou seja, se ele respondeu, por exemplo, as questões 2 e 4, a resposta da questão 2 está escrita antes da resposta da questão 4.

Tendo as N respostas de Juan, também em ordem, Maria Eduarda zerará a prova de Ricardinho se houver uma forma de casar o valor das M respostas do aluno malandro com M das N respostas do aluno caxias, sem desrespeitar a ordem delas.

Escreva um programa que, dado as N respostas de Juan e as M respostas de Ricardinho, diga se a prova deverá ser zerada.";A entrada contém vários casos de teste. A primeira linha de cada caso contém dois inteiros N e M (1 ≤ M ≤ N ≤ 105). A segunda linha contém N inteiros si (1 ≤ si ≤ 103) descrevendo as respostas de Juan. A terceira linha contém M inteiros rj (1 ≤ rj ≤ 103) descrevendo as respostas de Ricardinho.A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, imprima uma linha contendo sim se a prova deverá ser zerada ou nao caso contrário.;False;5 / 10;458;177;38.65%
2531;Compras em FdI;Estruturas e Bibliotecas;7;"Está chegando a grande final do Campeonato Nlogonense de Surf Aquático. Ano que vem, a final ocorrerá na cidade de Foça do Iguachim (FdI)! A região de FdI e das cidades próximas é famosa por seu comércio, composto por diversas lojas que costumam vender diversos produtos a preços mais atraentes que no restante do país. Você quer aproveitar a viagem para FdI para comprar o novo celular Aifôni (R) (Na verdade, você queria um Sãosunga (R), mas este celular é um verdadeiro estouro!)!

Existem N lojas na região, numeradas de 1 a N. Todas as lojas vendem o celular, embora o preço do aparelho pode ser diferente em cada loja. Para não tornar sua viagem cansativa, você pode considerar não visitar todas as N lojas, mas sim visitar apenas as lojas entre duas dadas lojas i e j, inclusive. Você está interessado na maior diferença de preços do aparelho entre as lojas visitadas. A diferença é dada por |M - m|, onde M é o maior preço dentre as lojas visitadas, e m é o menor.

Além disso, as lojas podem alterar o preço do celular como desejarem! Sua tarefa é determinar, para várias consultas, a maior diferença de preços nas lojas entre duas dadas lojas, considerando também eventuais alterações de preços nas lojas.";"A entrada contém vários casos de teste. A primeira linha de cada caso contém o inteiro N (1 ≤ N ≤ 105). A segunda linha contém N inteiros p1,p2,...,pN (1 ≤ pi ≤ 105). O inteiro pi indica o preço inicial do celular na loja i. A terceira linha contém um inteiro Q (1 ≤ Q ≤ 105), o número de operações. As próximas Q linhas descrevem uma operação cada. Cada operação pode ser descrita de duas formas:


	1 i p (1 ≤ i ≤ N, 1 ≤ p ≤ 105), indicando que o preço do celular foi alterado para p na loja i.
	2 i j (1 ≤ i ≤ j ≤ N), indicando uma consulta.

A entrada termina com fim-de-arquivo (EOF).";Para cada caso de teste, imprima uma linha para cada consulta contendo a maior diferença de preços das lojas entre as lojas i e j, inclusive.;False;7 / 10;1163;379;32.59%
2532;Demogorgon;Paradigmas;6;"Você está progredindo muito bem em sua grande jornada com um mago na terra da fantasia. Entretanto, um novo desafio acabou de aparecer: um demogorgon, príncipe dos demônios, surgiu em sua frente! Para progredir, você deve derrotá-lo!

Para derrotar o demogorgon, você precisa tirar todos os P pontos de vida (HP) do monstro. Para tal, você tem à disposição N feitiços, numerados de 1 a N. Utilizar o feitiço i causa Di pontos de dano, isto é, os pontos de vida (HP) do monstro são decrementados em Di unidades se o feitiço i é utilizado. Para utilizar o feitiço i, você precisa gastar Mi mana (uma quantidade de energia mágica). Cada feitiço pode ser utilizado no máximo uma vez.

Dados os pontos de vida do demogorgon e os feitiços que você pode utilizar, determine a quantidade mínima de mana necessária para derrotar o monstro.";A primeira linha de cada caso de teste contém dois inteiros N e P (1 ≤ N ≤ 1000, 1 ≤ P ≤ 2000), o número de feitiços disponíveis e os pontos de vida (HP) do monstro, respectivamente. As próximas N linhas descrevem um feitiço cada. Cada linha contém dois inteiros Di e Mi (1 ≤ Di, Mi ≤ 1000), o dano causado pelo feitiço e a quantidade de mana necessária para utilizá-lo, respectivamente. A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, se é impossível derrotar o monstro, imprima uma linha com -1. Caso contrário, imprima uma linha com a quantidade mínima de mana necessária para derrotar o monstro.;False;6 / 10;1286;287;22.32%
2533;Estágio;Iniciante;2;"A Googlbook é uma famosa empresa de tecnologia mundial que acabou de abrir uma filial na sua cidade! Além disso, a Googlbook também acabou de abrir as inscrições do processo seletivo para uma vaga de estágio na empresa!

Para se inscrever no processo seletivo, você deve enviar algumas informações para a empresa, que irá usá-las para decidir quem será contemplado com a vaga. Você já enviou todas as informações necessárias, exceto uma: seu IRA (Índice de Rendimento Acadêmico). Para piorar, o Portão do Aluno, sistema que disponibiliza o histórico com IRA, está fora do ar!

Felizmente, você lembra de suas notas em todas as M disciplinas que cursou, além de suas respectivas cargas horárias. Você também lembra que o IRA é calculado da seguinte maneira:



, onde N1, N2, ..., NM são suas notas em cada disciplina, e C1, C2, ..., CM são as cargas horárias das discplinas respectivas.

Dada a nota obtida e a carga horária de cada disciplina, determine seu IRA para poder enviá-lo para a Googlbook o mais breve possível!";A entrada contém vários casos de teste. A primeira linha de cada caso contém o inteiro M (1 ≤ M ≤ 40), o número de disciplinas cursadas. As próximas M linhas descrevem uma disciplina cada. Cada linha contém dois inteiros Ni e Ci (0 ≤ Ni ≤ 100, 30 ≤ Ci ≤ 120), indicando a nota obtida na disciplina e a carga horária da mesma, respectivamente.A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, imprima uma linha contendo o valor do seu IRA. Arredonde e imprima a resposta com exatamente 4 casas decimais.;True;2 / 10;2356;1150;48.81%
2534;Exame Geral;Iniciante;2;"Todo ano bissexto é realizado o exame geral de matemática da Nlogônia. Todos os cidadões da nação são avaliados a fim de se estudar o desenvolvimento lógico e matemático do país ao longo dos anos.

Após as correções, os cidadões são ordenadados de acordo com suas notas (quanto maior, melhor) e recebem descontos no imposto de renda de acordo com sua qualificação.

O Escritório Central de Estatística (ECE) é encarregado de processar os dados das notas obtidas no exame. Entretanto este ano, Vasya, um dos responsáveis, está internado no hospital com gripe H1N1 e você foi contratado para realizar o seu trabalho.

Escreva um programa que dado o número de habitantes da Nlogônia e todas as notas obtidas, responda as consultas para retornar a nota do cidadão que ficou em determinada posição.";"A entrada contém vários casos de teste. A primeira linha de cada caso contém dois inteiros N (1 ≤ N ≤ 100), Q (1 ≤ Q ≤ 100), o número de habitantes do país e o número de consultas, respectivamente.

As N linhas seguintes contém, cada uma, a nota ni obtida pelo i-ésimo cidadão (0 ≤ ni ≤ 30000).

As próximas Q linhas contém cada uma uma consulta, a posição pi (1 ≤ pi ≤ N) a qual a ECE está interessada em saber a nota.A entrada termina com fim-de-arquivo (EOF).";Para cada caso de teste, imprima, para cada consulta, uma linha contendo a nota do cidadão que ficou classificado na posição pi.;False;2 / 10;4243;2159;50.88%
2535;Feira de Adoção;Strings;7;"Carmem Lucrécia é uma pessoa muito solitária, todo sábado de manhã ela passeia sozinha pelas ruas do centro da capital da Nlogônia. A ocasião sempre é aproveitada para pensar na vida e no quão frio os Nlogonenses são.

Desta vez a caminhada não foi como sempre, haviam carros de som e grandes faixas anunciando a XVIII Feira Nacial de Adoção de Filhotes da Nlogônia, evento o qual mudaria a vida de Carmem Lucrécia para sempre.

Decidida a encontrar um companheiro canino, Carmem Lucrécia logo entrou na feira e começou a avaliar as opções.

Há exatamente N filhotes para adoção. Entretanto, Carmem Lucrécia é muito chata e tem uma série de exigências para seu novo companheiro:


	O animal deve ser da espécie cachorro;
	O animal deve ter nome composto;
	Pelo menos uma das palavras do nome do animal deve começar com o mesmo caractere do nome de sua raça.


O atendente da feira ficou tão confuso com as exigências de Carmem Lucrécia e pediu para que você fizesse um programa para ajudá-lo.";"A entrada contém vários casos de teste. A primeira linha de cada caso contém o inteiro N (1 ≤ N ≤ 100), o número de filhotes para adoção. As 4N linhas seguintes descrevem os filhotes.

Cada filhote é descrito por três linhas. A primeira linha contém a espécie do animal, a segunda, a raça e a terceira, o nome. Cada descrição é seguida de uma linha em branco.

Todas as linhas contém apenas letras minúsculas, número e espaços. Nenhuma linha tem mais de 100 caracteres. Nenhuma começa nem termina com espaços e não há espaços consecutivos.A entrada termina com fim-de-arquivo (EOF).";Para cada caso de teste, imprima uma linha contendo o número total de filhotes que cumprem as exigências de Carmem Lucrécia.;False;7 / 10;426;159;37.32%
2536;FHBZMIPS;Ad-Hoc;7;"O FHBZMIPS é um novo processador desenvolvido pela Neboscorp (r). Sua memória interna contém apenas um único registrador r, de 8 bits. Seu conteúdo é sempre interpretado como um inteiro sem sinal, isto é, é possível respresentar inteiros de 0 a 255 em seu registrador.

O valor inicial do registrador é 0. Além disso, o FHBZMIPS suporta as seguintes operações:


	add n: Soma n unidades no registrador (r ← r + n)
	sub n: Decrementa n unidades do registrador (r ← r - n)
	mul n: Multiplica o valor do registrador por n (r ← r × n)
	div n: O registrador recebe o quociente de sua divisão por n (r ← r ∕ n)
	and n: Operação E bit-a-bit com n (r ← r AND n)
	or n: Operação OU bit-a-bit com n (r ← r OR n)
	xor n: Operação OU-exclusivo bit-a-bit com n (r ← r XOR n)
	gotoif n I: Se o registrador tem valor maior ou igual a n, vá para a instrução de número I (Pular para I se r ≥ n)
	halt: Termina a execução do programa (Desligar)


Ocorrências de overflow, que ocorrem quando não é possível representar o resultado de alguma operação no registrador, são tratadas como em outros processadores, onde apenas o resto da divisão do resultado por 256 é mantido. Assim, por exemplo, se o registrador contém 240 e a instrução add 20 é executada, então o registrador passa a conter 4. Se o registrador contém o valor 0 e executa-se sub 2, então passa a conter 254. Se o registrador contém 25 e executa-se mul 25, passa a conter 113.

Marcelo acabou de escrever um programa em assembly do FHBZMIPS. Sua tarefa é determinar o valor do registrador ao término da execução de seu programa, ou determinar se o programa é executado infinitamente.";"A entrada contém vários casos de teste. A primeira linha de cada caso contém um inteiro N (1 ≤ N ≤ 100), o número de instruções no programa. As próximas N linhas descrevem o programa, uma instrução por linha.

Cada linha inicia com um inteiro indicando o número i da instrução. É garantido que este número é sequencial, isto é, a primeira instrução é a de número 1, a segunda instrução é a de número 2, etc. A linha é seguida pela descrição da instrução, como na tabela acima. Onde for aplicável, 0 ≤ n ≤ 255, 1 ≤ I ≤ N,e I≠i.

É garantido que há uma única instrução halt no programa, e que ela é sempre a instrução de número N, isto é, a última instrução do programa. Também é garantido que n≠0 para toda instrução div.A entrada termina com fim-de-arquivo (EOF).";Para cada caso de teste, imprima uma linha contendo o valor do registrador ao término da execução. Se o programa é executado infinitamente, imprima a frase “execucao infinita” (sem aspas).;False;7 / 10;76;32;42.11%
2537;GigaDrive;Estruturas e Bibliotecas;6;"A TéquiToy está relançando no mercado o Giga Drive, um console antigo muito popular nos anos 90. Para comemorar o relançamento do console, a TéquiToy vai lançar um jogo “inédito” este ano: o Giga Drive ChesseBread 2! Na verdade, o Giga Drive CheeseBread 2 é um clone com poucas alterações de um outro jogo famoso. Por isso, suas regras são muito semelhantes.

Em Giga Drive CheeseBread 2, o tabuleiro do jogo consiste em uma matriz de N linhas e N colunas. Inicialmente, cada célula da matriz está vazia ou contém uma azeitona (?). Uma partida é composta por M rodadas. A cada rodada, o computador coloca uma azeitona em uma célula vazia do tabuleiro. Em seguida, ele pergunta ao jogador o total de azeitonas na região do tabuleiro da célula (I1, J1) até uma célula (I2, J2) dada. Em outras palavras, o computador indica quatro inteiros I1, J1, I2 e J2, e pergunta ao jogador o número total de azeitonas nas células na linha i e coluna j tal que I1 ≤ i ≤ I2 e J1 ≤ j ≤ J2.

Para vencer o jogo, você deve acertar a contagem em todas as rodadas do jogo! Entretanto, você tem muito pouco tempo para contar todas as azeitonas. Por isso, escreva um programa para garantir sua vitória!";A entrada contém vários casos de teste. A primeira linha de cada caso contém os inteiros N e M (1 ≤ N ≤ 1000, 1 ≤ M ≤ 105). As próximas N linhas contém N inteiros cada, descrevendo o tabuleiro inicial. O valor 1 indica uma azeitona, enquanto o valor 0 indica uma célula vazia. As próximas 2×M linhas descrevem as rodadas do jogo, uma rodada a cada duas linhas. A primeira linha contém dois inteiros i e j (1 ≤ i, j ≤ N) indicando a inclusão de uma azeitona na célula na linha i e coluna j. É garantido que a célula estava vazia antes da rodada. A segunda linha de cada rodada contém quatro inteiros I1, J1, I2 e J2 (1 ≤ I1 ≤ I2 ≤ N, 1 ≤ J1 ≤ J2 ≤ N), descrevendo a região do tabuleiro da célula (I1, J1) até a célula (I2, J2).A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, imprima, para cada rodada, uma linha indicando o total de azeitonas na região.;False;6 / 10;190;88;46.32%
2538;Ginásio;Estruturas e Bibliotecas;7;"Analógimôn Go! é um jogo bastante popular. Em sua jornada, o jogador percorre diversas cidades capturando pequenos monstrinhos virtuais, chamados analógimôns. As cidades contém localidades especiais chamadas de ginásios. Ao chegar a um ginásio, um jogador pode tentar colocar um de seus analógimôns dentro dele.

Cada anlógimôn tem dois inteiros associados a ele: seu Poder de Combate (PC) e seu Número de Ataques (NA). Além disso, um ginásio tem associado a ele um Intervalo de Poder (IP). Ao tentar colocar um analógimôn em um ginásio, o jogo verifica quantos são os analógimôns já presentes no ginásio cuja diferença do seu PC para o PC do analógimôn sendo colocado é de no máximo IP. Se esta quantidade for menor ou igual ao NA do analógimôn sendo colocado, o monstrinho é inserido no ginásio com sucesso. Caso contrário, ele não é colocado no ginásio. Em ambos os casos, os analógimôns que já estavam no ginásio continuam no ginásio. Como exemplo, considere um ginásio com IP=3 com analógimôns de PC iguais a 5, 8, 13 e 20. Se um jogador tenta colocar um analógimôn de PC=10 e NA=4, o jogo contará quantos analógimôns há no ginásio com PC entre 10 - 3 = 7 e 10 + 3 = 13, inclusive. Como há dois analógimôns neste caso, o monstrinho é colocado com sucesso no ginásio, pois 2 ≤ 4. O ginásio passa a conter analógimôns de PC iguais a 5, 8, 10, 13 e 20.

Dadas as informações sobre um ginásio e as tentativas de colocar analógimôns dentro dele, determine quantos analógimôns ficarão no ginásio após todas as tentativas. Considere que o ginásio inicialmente não contém nenhum analógimôn.";A entrada contém vários casos de teste. A primeira linha de cada caso contém os inteiros IP e M (1 ≤ IP, M ≤ 105), o IP do ginásio e o número de tentativas, respectivamente. As próximas M linhas descrevem as tentativas de colocar um analógimôn no ginásio, na ordem em que são feitas. Cada linha contém dois inteiros PC e NA (1 ≤ PC, NA ≤ 105), indicando o PC e o NA do analógimôn, respectivamente. O Poder de Combate de todos analógimôns são distintos.A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, imprima uma linha com um inteiro indicando quantos analógimôns ficarão no ginásio.;False;7 / 10;265;113;42.64%
2539;High Five;Ad-Hoc;8;"A seleção Nlogonense de Basquetebol está na grande final da Copa do Mundo de Basquete, e o jogo está prestes a começar! Neste momento, os N atletas da seleção se preparam para entrar em quadra.

Os atletas são numerados de 1 a N. Inicialmente, os atletas estão em uma fila na beira do campo. Os atletas entram no campo um por um, na ordem de seus números. Assim, o atleta 1 é o primeiro a sair da fila e entrar na quadra. Em seguida, o atleta 2 sai da fila e entra na quadra, e assim por diante.

Ao sair da fila, cada atleta cumprimenta todos os atletas que estão em sua frente na fila com um high five. Por exemplo, considere que N=4 e inicialmente a fila é 3 1 2 4, onde o atleta 4 é o mais próximo da quadra. O atleta 1, ao ir para a quadra, faz um high five com os atletas 2 e 4. O atleta 2, por sua vez, faz um high five apenas com o atleta 4 ao sair da fila. O atleta 3 também faz um high five apenas com o atleta 4 (note que os atletas 1 e 2 já saíram da fila). Por fim, o último atleta não cumprimenta ninguém.

Sua tarefa é determinar o número total de high fives que serão feitos.";A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém o inteiro N (1 ≤ N ≤ 105). A segunda linha contém N inteiros, indicando a ordem em que os atletas estão inicialmente na fila. O último inteiro presente na linha indica o atleta mais próximo da quadra. A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, imprima uma linha contendo o número total de high fives que serão feitos.;False;8 / 10;457;148;32.39%
2540;Impeachment do Líder;Iniciante;2;"Analógimôn Go! é um jogo bastante popular. Os jogadores de Analógimôn Go! são divididos em três grandes times: Time Valor, Time Instinto e Time Místico, que são liderados pelos seus líderes Kandera, Esparky e Blanque, respectivamente. Naturalmente, você faz parte de um desses times!

O líder do seu time está sendo acusado de infringir as regras do jogo por gerenciar incorretamente os doces recebidos do Professor que são destinados ao time. Isto criou uma grande polêmica dentro da equipe: alguns jogadores defendem que o líder realmente agiu incorretamente e deve sofrer um impeachment e ser afastado de seu cargo, enquanto outros defendem que ele não infringiu as regras, que a acusação é inverídica e que ele deve continuar no cargo.

Para resolver a situação, uma votação será realizada entre todos os N jogadores do seu time. Cada jogador deverá votar se o impeachment deve ou não ocorrer. Se o número de votos favoráveis ao impeachment foi maior ou igual a 2/3 (dois terços) do total de jogadores, o líder será afastado. Caso contrário, a acusação é arquivada e ele continuará no cargo.

Dados os votos de todos os jogadores, determine o resultado da votação.";A entrada contém vários casos de teste. A primeira linha de cada caso contém o inteiro N (1 ≤ N ≤ 105), o número de jogadores em seu time. A próxima linha contém N inteiros v1, ..., vN (vi = 0 ou 1), indicando os votos dos jogadores. O valor 1 indica um voto favorável ao impeachment, enquanto o valor 0 indica um voto contrário ao mesmo.A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, imprima uma linha contendo a palavra impeachment se o líder deve ser afastado de seu cargo, ou acusacao arquivada caso contrário.;False;2 / 10;3146;1565;49.75%
2541;Ingrest;Geometria Computacional;6;"Ingrest é um jogo de realidade aumentada bastante jogado no mundo inteiro. O jogo pode ser descrito como uma gincana mundial. Duas facções disputam entre si para ter o controle da maior área no mundo.

O mapa do jogo pode ser descrito como um plano. Há N portais no mapa. Um portal i pode ser descrito como um ponto (xi,yi) no plano.

Para cada par de portais distintos, um jogador pode fazer um link entre ambos. Quando um link entre dois portais é criado, um segmento de reta ligando os portais é desenhado no mapa. Em um conjunto de três portais distintos, quando há um link entre todos os pares de portais, um control field é criado. Um control field é definido pelo triângulo formado pelos links feitos entre os portais. O tamanho de um control field é dado pela área deste triângulo.

Pelas regras do jogo, dois control fields distintos não podem possuir intersecção positiva. Desta forma, dois control fields podem, no máximo, compartilhar um link ou um portal entre si.

Sua missão é, dadas as posições de todos os portais, determinar a maior soma possível dos tamanhos dos control fields que podem ser criados.";A entrada contém vários casos de teste. A primeira linha de cada caso contém um inteiro N (3 ≤ N ≤ 105), o número de portais. As próximas N linhas contém dois inteiros xi e yi cada (0 ≤ xi, yi ≤ 104), indicando as coordenadas dos portais no mapa.A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, imprima uma linha contendo a maior soma possível dos tamanhos dos control fields que podem ser criados. Arredonde e imprima a resposta com exatamente duas casas decimais.;False;6 / 10;147;63;42.86%
2542;Iu-Di-Oh!;Iniciante;4;"Iu-di-oh! é um jogo de cartas que virou uma verdadeira febre entre os jovens! Todo jogador de Iu-di-oh! tem seu próprio baralho, contendo várias cartas do jogo. Cada carta contém N atributos (como força, velocidade, inteligência, etc.). Os atributos são numerados de 1 a N e são dados por inteiros positivos.

Uma partida de Iu-di-oh! é sempre jogada por dois jogadores. Ao iniciar a partida, cada jogador escolhe exatamente uma carta de seu baralho. Após as escolhas, um atributo é sorteado. Vence o jogador cujo atributo sorteado em sua carta escolhida é maior que na carta escolhida pelo adversário. Caso os atributos sejam iguais, a partida empata.

Marcos e Leonardo estão na grande final do campeonato brasileiro de Iu-di-oh!, cujo prêmio é um Dainavision (que é quase um Plaisteition 2!). Dados os baralhos de ambos, a carta escolhida por cada um e o atributo sorteado, determine o vencedor!";"A entrada contém vários casos de teste. A primeira linha de cada caso contém um inteiro N (1 ≤ N ≤ 100), o número de atributos de cada carta. A segunda linha contém dois inteiros M e L (1 ≤ M, L ≤ 100), o número de cartas no baralho de Marcos e de Leonardo, respectivamente.

As próximas M linhas descrevem o baralho de Marcos. As cartas são numeradas de 1 a M, e a i-ésima linha descreve a i-ésima carta. Cada linha contém N inteiros ai,1,ai,2,..., ai,N (1 ≤ ai,j ≤ 109). O inteiro ai,j indica o atributo j da carta i. As próximas L linhas descrevem o baralho de Leonardo. As cartas são numeradas de 1 e L e são descritas de maneira análoga.

A próxima linha contém dois inteiros CM e CL (1 ≤ CM ≤ M, 1 ≤ CL ≤ L), as cartas escolhidas por Marcos e Leonardo, respectivamente. Por fim, a última linha contém um inteiro A (1 ≤ A ≤ N) indicando o atributo sorteado.A entrada termina com fim-de-arquivo (EOF).";Para cada caso de teste, imprima uma linha contendo “Marcos” se Marcos é o vencedor, “Leonardo” se Leonardo é o vencedor, ou “Empate” caso contrário (sem aspas).;False;4 / 10;3223;1082;33.57%
2543;Jogatina UFPR;Iniciante;2;"Assim como a maioria dos estudantes de computação, você vive jogando os jogos eletrônicos mais populares atualmente: Liga of Legendas (LOL) e Contra-Strike (CS). Embora você também jogue LOL, você gosta mais é de usar todas suas grandes habilidades para derrotar a equipe terrorista em Contra-Strike! Você é tão empenhado no combate ao terror que é frequentemente comparado com o presidente dos EUA que anunciou a captura e derrota de um grande terrorista da vida real.

Por ser bastante habilidoso, os vídeos de suas jogadas (seus famosos gameplays) vivem aparecendo na Jogatina UFPR, uma página na internet que publica gameplays de alunos da universidade.

A página publica muitos vídeos diariamente. Por isso, pode ser dificil encontrar e contar todos os seus vídeos na página. Entretanto, como você também é programador, você decidiu escrever um programa para auxiliá-lo nesta tarefa. Dada a lista de gameplays publicados na página, determine quantos gameplays seus de Contra-Strike foram publicados.";"A entrada contém vários casos de teste. A primeira linha de cada caso contém dois inteiros N e I (1 ≤ N ≤ 104, 1000 ≤ I ≤ 9999), o número de gameplays publicados na página e o seu identificador na universidade, respectivamente.

As próximas N linhas descrevem os gameplays publicados. Cada gameplay é descrito por dois inteiros i e j (1000 ≤ i ≤ 9999, j=0 ou 1), onde i é o identificador na universidade do autor do gameplay, e j=0 se o gameplay é de Contra-Strike, ou j=1 se é de Liga of Legendas.A entrada termina com fim-de-arquivo (EOF).";Para cada caso de teste, imprima uma única linha com um número indicando quantos gameplays seus de Contra-Strike foram publicados na página.;False;2 / 10;2149;1150;53.51%
2544;Kage Bunshin no Jutsu;Iniciante;3;"O Kage Bunshin no Jutsu (ou a ""técnica dos clones de sombra"", para os lusofalantes) é uma técnica milenar bastante utilizada em batalhas ninja.

Quando utilizada, a técnica cria uma cópia idêntica de seu usuário. Desta forma, se um dado ninja usa a técnica, passam a existir dois destes ninjas (o original e a cópia).

A técnica sempre é executada por todos os ninjas existentes no momento. Desta forma, se a técnica for utilizada novamente, passam a existir quatro ninjas idênticos ao original (os dois anteriores e mais duas cópias), e assim por diante.

Há N cópias de um dado ninja (incluindo o original). Sua tarefa é determinar quantas vezes a técnica foi utilizada.";A entrada contém vários casos de teste. Cada caso contém uma linha com o número N (1 ≤ N ≤ 106). É garantido que o valor de N é tal que é possível obter exatamente N cópias de um ninja utilizando a técnica (incluindo o original).A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, imprima uma linha contendo o número de vezes que a técnica foi utilizada.;False;3 / 10;3997;1719;43.01%
2545;Manyfile;Grafos;7;"No ano de 2569, Vasya recebe de sua mãe um grandioso presente de aniversário, o código fonte do seu vídeo-game favorito, Aranha Paciente. Vasya corre direto ao seu computador, com 4096 núcleos de processamento, insere o disquete, digita ls no diretório do código e nota que ele é composto de N arquivos fonte e um Manyfile.

Um Manyfile é como uma receita de bolo para compilar o código. Ao se executar o comando many, o Manyfile é lido e os arquivos começam a ser compilados, de forma que o máximo de núcleos de processamento são utilizados simultaneamente. Se o mundo fosse perfeito, este processo seria muito rápido, uma vez que cada arquivo fonte do jogo demora exatamente um minuto para ser compilado, mas infelizmente a compilação de alguns arquivos depende da conclusão de outros, impossibilitando que todos os arquivos sejam processados simultaneamente.

Considerando a compilação da Aranha Paciente como terminada quando todos os seus N arquivos tiverem sido compilados e sabendo quais arquivos dependem de qual, escreva um programa que calcule para Vasya quantos minutos demorará para que a Aranha Paciente seja compilada.";A entrada contém vários casos de teste. A primeira linha de cada caso contém o inteiro N (1 ≤ N ≤ 1000), o número de arquivos fonte da Aranha Paciente. Os arquivos são numerados de 1 a N. As N linhas seguintes descrevem os arquivos. A i-ésima linha contém um inteiro Mi (0 ≤ Mi < N) seguido de Mi inteiros com valor entre 1 e N e diferentes de i, representando o índice dos arquivos dos quais o arquivo i depende.A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, imprima uma única linha contendo o tempo total em minutos que demorará para que a Aranha Paciente seja compilada. Caso seja impossível terminal a compilação, imprima -1.;False;7 / 10;673;160;23.77%
2546;Mesada;Estruturas e Bibliotecas;8;"Está cada vez mais difícil para a sra. Marie gerenciar a mesada que ela dá para seus netinhos. Por isso, ela lhe pediu para escrever um programa de computador para ajudá-la nesta tarefa.

A sra. Marie tem N netos, numerados de 1 a N. Inicialmente, o neto i ganha Mi reais de mesada de sua vovó. A sra. Marie pode aumentar a mesada de alguns de seus netos várias vezes. Sempre que deseja dar um aumento, ela escolhe dois números i e j e aumenta a mesada de todos os netos de números entre i e j, inclusive, em um mesmo valor v. Por exemplo, se ela escolher dar um aumento de v=10 reais para todos os netos entre i=1 e j=3, então a mesada dos netos 1, 2, e 3 aumentam em 10 reais cada uma.

Além disso, ela também pode querer consultar quem é o neto que recebe a maior mesada dentre todos os netos de números entre i e j dados, inclusive. Ajude a sra. Marie a responder todas as suas consultas!";A entrada contém vários casos de teste. A primeira linha de cada caso contém dois inteiros N e Q (1 ≤ N ≤ 105, 1 ≤ Q ≤ 106), o número de netos e de operações, respectivamente. A próxima linha contém N inteiros M1, M2,...,MN (1 ≤ Mi ≤ 200), a mesada inicial de cada neto. As próximas Q linhas descrevem uma operação cada. Uma operação no formato A i j v (1 ≤ i ≤ j ≤ N, 1 ≤ v ≤ 200) indica um aumento de mesada. Uma operação no formato C i j (1 ≤ i ≤ j ≤ N) indica uma consulta.A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, imprima, para cada consulta, uma linha contendo o número do neto que recebe a maior mesada dentre os netos de números entre i e j, inclusive. Caso haja mais de um neto recebendo a maior mesada dentre estes, imprima o de menor número.;False;8 / 10;398;147;36.93%
2547;Montanha-Russa;Iniciante;2;"Todos os habitantes da Nlogônia estão super animados com a abertura do Ricardo Barreiro World, o mais novo parque de diversões do país. Na TV e no rádio só passam propagandas da montanha-russa do parque, a mais rápida do continente. É nela que todos, de crianças a idosos querem andar.

Infelizmente foram impostas algumas restrições no momento da homologação do brinquedo pelo governo. Por questões de segurança, há uma altura mínima e uma altura máxima que as pessoam devem ter para poder passear na montanha-russa.

Para o dia da inauguração do parque, todos os convidados realizaram um pré-cadastro no qual indicaram sua altura. Para reduzir filas e otimizar a operação do parque no primeiro dia, você foi contratado para fazer um programa que dado o número de visitantes, altura mínima, altura máxima e as alturas de todos os visitantes, calcule quantas pessoas poderão andar na montanha-russa.";"A entrada contém vários casos de teste. A primeira linha de cada caso consiste em três inteiros N (1 ≤ N ≤ 100), Amin e Amax (50 ≤ Amin ≤ Amax ≤ 250), o número de visitantes, a altura mínima e máxima em centímetros para andar na montanha-russa, respectivamente.

As N linhas seguintes contém, cada uma, um número inteiro Ai (50 ≤ Ai ≤ 250), a altura do i-ésimo visitante, em centímetros.A entrada termina com fim-de-arquivo (EOF).";Para cada caso de teste, imprima uma única linha com o número visitantes que podem passear na montanha-russa.;False;2 / 10;2841;1509;53.12%
2548;Museu Virtual 3D;Ad-Hoc;3;"Vasya e Petya estão visitando o museu virtual 3D da história da capital da Nlogônia. No meio de tanta diversão, decidiram pregar uma peça. A peça consiste em danificar M modelos dentre os N expostos. Vasya baixa ilegalmente o arquivo do modelo, Petya o abre em um editor 3D e subtitui detalhes históricos por números na sequência de Fibonacci, e o coloca de volta no museu.

Toda vez que um modelo é danificado, seu valor se torna nulo. Como a dupla é extremamente malvada, decidiram causar o maior dano possível. Dados N, M e o valor de todas os modelos expostos, faça um programa que calcule o maior prejuízo que pode ser causado.";A entrada contém vários casos de teste. A primeira linha de cada caso contém dois número inteiros, N (0 ≤ N ≤ 103) e M (0 ≤ M ≤ N), respectivamente. A segunda linha contém N inteiros (entre 0 e 1000), os valores de cada modelo (em dólares nlogônios), em ordem não decrescente.A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, imprima uma linha com um único número indicando o maior prejuízo a ser causado.;False;3 / 10;625;377;60.32%
2549;Nomes de Usuários;Strings;8;"Vasya e Petya trabalham na secretaria do curso de Bacharelado em Criação de Carangueijos (BCC) na Universidade Física de Praia Rasa (UFPR). Todo ano eles recebem N calouros os quais devem receber credenciais de acesso ao sistema de seleção de carangueijos.

Cada aluno recebe um nome de usuário baseado no seu nome completo. A geração do nome de usuário consiste em concatenar todas as primeiras letras das palavras do nome completo do calouro junto do ano de ingresso no curso. Por exemplo, se Fulano de Tal entrar no curso em 1998, seu nome de usuário será fdt1998.

Os problemas acontecem quando mais de um aluno deveria ter o mesmo nome de usuário. Para estes casos, um dos alunos recebe um nome de usuário padrão enquanto os outros recebem um fora do padrão.

Como este ano ingressaram muitos calouros no curso, Vasya e Petya pediram sua ajuda para escrever um programa que dado o nome de todos os alunos e o ano atual, calcule quantos alunos receberão nomes de usuário fora do padrão.";"A entrada contém vários casos de teste. A primeira linha de cada caso contém dois inteiros N (1 ≤ N ≤ 5×104) e A (1 ≤ A ≤ 9999), a quantidade de calouros e o ano atual, respectivamente.

As N linhas seguintes contém os nomes dos alunos, os quais são representados com até 100 caracteres contendo apenas espaços e letras minúsculas com pelo menos uma letra.A entrada termina com fim-de-arquivo (EOF).";Para cada caso de teste, imprima uma única linha com o número de alunos que receberão um nome de usuário fora do padrão.;False;8 / 10;820;208;25.37%
2550;Novo Campus;Grafos;7;"A Universidade Federal da República dos Pinheiros (UFRP) está construindo um novo campus na capital do país.

Neste momento, todos os N prédios do campus estão construídos e prontos para operar! Entretanto, ainda não foi construída nenhuma via ligando estes prédios. Hoje, é impossível sair de algum prédio e ir para outro prédio no campus!

Para resolver este problema, o reitor da UFRP quer construir vias entre pares de prédios do campus de tal forma que todos os prédios estejam conectados, isto é, de tal forma que, utilizando uma ou mais das vias construídas, seja possível sair de qualquer prédio e ir para qualquer outro no campus.

Entretanto, devido ao relevo complicado da capital, pode não ser possível construir uma via entre qualquer par de prédios. Dada a lista de vias que podem ser construídas e o custo de construção de cada via, determine se é possível tornar todos os prédios conectados e, em caso positivo, o custo total mínimo para construir as vias necessárias.";A entrada contém vários casos de teste. A primeira linha de cada caso contém dois inteiros N e M (2 ≤ N ≤ 1000, 0 ≤ M ≤ N(N-1)/2 ), o número de prédios no campus e de vias que podem ser construídas, respectivamente. Os prédios são numerados de 1 a N. As próximas M linhas descrevem as vias. Cada linha contém três inteiros A, B e C (1 ≤ A, B ≤ N, A≠B, 1 ≤ C ≤ 104), indicando a possibilidade de construção de uma via que liga os prédios A e B entre si e cuja construção custa C reais. É garantido que, para cada par de prédios, no máximo uma via pode ser construída entre eles.A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, caso não seja possível conectar todos os prédios, imprima uma linha contendo “impossivel” (sem aspas). Caso contrário, imprima uma linha contendo o custo mínimo necessário para conectar todos os prédios, em reais.;False;7 / 10;639;202;31.61%
2551;Novo Recorde;Iniciante;3;"A grande Maratona de Rua de Curitiba irá ocorrer nos próximos dias! Vários atletas estão treinando há dias para o grande dia da corrida. Flávio é um dos atletas que está treinando diariamente para se sair bem na corrida. Ele tem corrido todas as manhãs nas pistas próximas de sua casa.

Os treinos do garoto são monitorados por um aplicativo em seu celular. Após cada treino, Flávio sabe tanto a duração do treino quanto a distância total percorrida. Com essas informações, ele consegue determinar a velocidade média obtida em cada treino.

Flávio está muito preocupado com a evolução de seu desempenho nos treinos, e em particular com seu recorde de velocidade média. Tal recorde é batido em um dado treino quando a velocidade média para este treino é maior que todas as velocidades médias obtidas nos treinos anteriores. Ajude Flávio a determinar em quais treinos ele conseguiu bater seu recorde.";A entrada contém vários casos de teste. A primeira linha de cada caso contém um inteiro N (1 ≤ N ≤ 30), o número de treinos feitos. Considere que os treinos foram feitos nos dias 1, 2,...,N. As próximas N linhas descrevem os treinos. A linha i (1 ≤ i ≤ N) contém dois inteiros Ti e Di (1 ≤ Ti, Di ≤ 100), indicando, respectivamente, a duração do treino (em minutos) e a distância percorrida no treino (em quilômetros).A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, imprima uma lista de inteiros indicando os dias nos quais o recorde foi batido. Cada dia deve ser impresso em uma linha. Imprima os dias em ordem crescente. Note que o dia 1 sempre deve ser impresso.;False;3 / 10;1793;793;44.23%
2552;PãodeQuejoSweeper;Iniciante;3;"Está chegando a grande final do Campeonato Nlogonense de Surf Aquático, que este ano ocorrerá na cidade de Bonita Horeleninha (BH)! Nesta cidade, o jogo PãodeQueijoSweeper é bastante popular!

O tabuleiro do jogo consiste em uma matriz de N linhas e M colunas. Cada célula da matriz contém um pão de queijo ou o número de pães de queijo que existem nas celulas adjacentes a ela. Uma célula é adjacente a outra se estiver imediatamente à esquerda, à direita, acima ou abaixo da célula. Note que, se não contiver um pão de queijo, uma célula deve obrigatoriamente conter um número entre 0 e 4, inclusive.

Dadas as posições dos pães de queijo, determine o tabuleiro do jogo!";A entrada contém vários casos de teste. A primeira linha de cada caso contém os inteiros N e M (1 ≤ N, M ≤ 100). As próximas N linhas contém M inteiros cada, separados por espaços, descrevendo os pães de queijo no tabuleiro. O j-ésimo inteiro da i-ésima linha é 1 se existe um pão de queijo na linha i e coluna j do tabuleiro, ou 0 caso contrário.A entrada termina com fim-de-arquivo (EOF).;"Para cada caso de teste, imprima N linhas com M inteiros cada, não separados por espaços, descrevendo a configuração do tabuleiro. Se uma posição contém um pão de queijo, imprima 9 para ela; caso contrário, imprima o número cuja posição deve conter.";False;3 / 10;3019;1506;49.88%
2553;Passeio em FdI;Paradigmas;8;"Está chegando a grande final do Campeonato Nlogonense de Surf Aquático. Ano que vem, a final ocorrerá na cidade de Foça do Iguachim (FdI)! A cidade é famosa por conter o Parque Nacional do Iguachim, que conta com várias atrações. Dentre elas, destacam-se as Cataratas do Iguachim, um dos pontos turisticos mais famosos de Nlogonia!

O Parque conta com N atrações, numeradas de 1 a N. As atrações são dispostas em uma linha reta no Parque. Desta forma, o Parque pode ser descrito como uma rua contendo entradas para as atrações 1, 2, ..., N, onde a atração 1 é a mais próxima da entrada do Parque, enquanto a atração N é a mais próxima da saída do Parque. Para não tumultoar o Parque, é exigido que as atrações sejam visitadas em ordem da entrada para a saída, isto é, se você visitar a atração i, você não pode voltar e visitar as atrações 1, 2, ..., i-1.

Além disso, existem dois tipos de tickets no Parque: os tickets verdes e os tickets amarelos. Cada uma das N atrações exigem, como pagamento por sua entrada, uma certa quantidade de tickets de exatamente um tipo. Ao entrar em uma atração, o Parque pode lhe presentear com uma certa quantidade de tickets do outro tipo, isto é, uma atração que cobra tickets verdes como entrada pode lhe dar tickets amarelos como presente, ou vice-versa. Você não pode entrar em uma atração se não tiver tickets suficientes para ela, mas também pode optar não entrar nela mesmo se tiver tickets suficientes.

Entretanto, você quer aproveitar o Parque o máximo possível! Dada a quantidade inicial de tickets de cada tipo que você possui e a descrição das atrações do Parque, determine o número máximo de atrações que podem ser visitadas.";A entrada contém vários casos de teste. A primeira linha de cada caso contém o inteiro N (1 ≤ N ≤ 40). A segunda linha contém dois inteiros V e A (0 ≤ V, A ≤ 20), o número de tickets verdes e amarelos que você possui inicialmente. As próximas N linhas descrevem as atrações do Parque, na ordem da entrada para a saída do Parque. Cada linha contém dois inteiros Vi e Ai (-20 ≤ Vi, Ai ≤ 20, Vi×Ai < 0). Se Vi < 0, a atração cobra |Vi| tickets verdes como entrada, e, se visitada, lhe presenteia com Ai tickets amarelos. Caso contrário, ela cobra |Ai| tickets amarelos, e, se visitada, lhe presenteia com Vi tickets verdes.A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, imprima uma linha contendo a quantidade máxima de atrações que podem ser visitadas.;False;8 / 10;409;180;44.01%
2554;Pizza Antes de BH;Iniciante;3;"Está chegando a grande final do Campeonato Nlogonense de Surf Aquático, que este ano ocorrerá na cidade de Bonita Horeleninha (BH)! Antes de viajar para BH, você e seus N-1 amigos decidiram combinar algum dia para ir a uma pizzaria, para relaxar e descontrair (e, naturalmente, comer!).

Neste momento está sendo escolhida a data do evento. Para que todas as pessoas possam participar, foi decidido que o encontro na pizzaria ocorrerá em um data tal que todas as N pessoas podem comparecer à pizzaria nesta data. Portanto, nem toda data pode ser escolhida, pois algumas pessoas podem ter outros compromissos já marcados em alguns dias.

Dada a lista de datas consideradas para o evento e a informações de quais pessoas podem comparecer em quais datas, determine se o evento poderá ocorrer e, em caso positivo, sua data. Caso mais de uma data seja possível, o evento deve ocorrer o mais cedo possível.";A entrada contém vários casos de teste. A primeira linha de cada caso contém os inteiros N e D (1 ≤ N, D ≤ 50), o número de pessoas e o número de datas consideradas, respectivamente. As pessoas são numeradas de 1 a N. As próximas D linhas descrevem uma data considerada. Cada linha começa com a data na forma dia∕mes∕ano. A linha é seguida de N inteiros p1,p2,...,pN. O inteiro pi é 1 se a pessoa i pode comparecer na data considerada, ou 0 caso contrário. É garantido que as datas são sempre válidas, e não há zeros à esquerda. Além disso, as datas são dadas em ordem, do dia mais cedo para o dia mais tarde.A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, imprima uma linha contendo a data que o evento deve ocorrer, na forma dia∕mes∕ano, de maneira idêntica à da entrada. Caso não seja possível realizar o evento, imprima “Pizza antes de FdI” (sem aspas).;False;3 / 10;1608;764;47.51%
2555;Quiz Universitário;Paradigmas;7;"A universidade está promovendo o Quiz Universitário, um jogo de perguntas e respostas sobre a universidade! O participante de hoje é Fernando, um jovem aluno da Computação.

Existem N perguntas, numeradas de 1 a N. As perguntas são feitas para Fernando em sequência, e se ele acertar a pergunta i, ele ganha Pi reais como prêmio! Entretanto, se ele errar uma pergunta, o jogo termina. Desta forma, se Fernando errar a pergunta 1, o jogo termina e ele não ganha nenhum prêmio; se acertar a pergunta 1 mas errar a pergunta 2, ele ganha apenas o prêmio da pergunta 1; se acertar as perguntas 1 e 2 mas errar a 3, ele ganha apenas o prêmio das perguntas 1 e 2; etc. O jogo também termina se todas as N perguntas forem acertadas. Neste caso, ele ganha a soma dos prêmios de todas as perguntas.

Fernando também pode usar até K pulos. Ao pular uma pergunta, ele ganha o prêmio da pergunta e o jogo continua. Na prática, o efeito de pular uma pergunta é o mesmo de acertá-la, mas sem respondê-la de fato. Para cada pergunta i, Fernando sabe que a chance dele acertar a pergunta i, caso não a pule, é de Ci %. Ele quer determinar quais perguntas ele vai pular (caso chege nelas) antes de começar o Quiz. Ajude-o a determinar quais perguntas ele deve pular, de tal forma que o prêmio total esperado seja máximo.

No primeiro exemplo de entrada abaixo, a melhor estratégia é usar o único pulo na pergunta 2. Desta forma, ele tem 50% de chance de ganhar P1=30 reais, 50% de ganhar P2=100 reais (esta chance não é de 100% mesmo pulando esta pergunta, pois ele precisa ter acertado a primeira para ganhar esse prêmio), e 20% de ganhar P3=50 reais. O prêmio total esperado é de 0.50 × 30 + 0.50 × 100 + 0.20 × 50 = 75. Não há outra estratégia cujo prêmio total esperado é maior.";A entrada contém vários casos de teste. A primeira linha de cada caso contém os inteiros N e K (1 ≤ N ≤ 1000, 0 ≤ K ≤ N), o número de perguntas e o número máximo de pulos. A segunda linha contém N inteiros P1,P2,...,PN (1 ≤ Pi ≤ 100), o prêmio de cada pergunta. A terceira linha contém N inteiros C1,C2, ..., CN (0 ≤ Ci ≤ 100), indicando a chance de Fernando acertar cada pergunta i, sem pulá-la, em %.A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, imprima uma linha com o prêmio total esperado máximo que Fernando pode obter, em reais, arredondado com duas casas decimais.;False;7 / 10;86;30;34.88%
2556;Reinauguração do CEI;Ad-Hoc;1;"Para comemorar a reinauguração do espaço físico do Clube de Espanhóis Inteligentes (CEI), uma grande festa está acontecendo no clube neste exato momento!

Mateuz é um integrante do CEI que está ajudando na organização da festa. Sempre que um convidado chega ou vai embora da festa, Mateuz anota em um papel quantos minutos se passaram desde o início da festa até aquele momento.

Mateuz acabou de repassar os números anotados para os presidentes do CEI, Freitaz e Rodriguez. Note que os presidentes têm apenas os minutos em que convidados entraram e sairam da festa. Desta forma, para cada minuto recebido, Freitaz e Rodriguez não sabem se o convidado estava entrando ou saindo naquele momento. Sabe-se apenas que: a festa começou sem convidados; até este exato momento, nenhum convidado entrou na festa mais de uma vez; e, neste exato momento, não há convidados na festa, isto é, todos os convidados foram embora (pois foram participar de uma competição de programação, mas pretendem voltar à festa depois). Os números anotados também são todos distintos entre si, mas não são dados necessariamente em ordem.

Sua tarefa é ajudar Freitaz e Rodriguez a determinar qual o maior número possível de convidados que podem ter estado na festa simultaneamente em algum momento. Determine também a quantidade máxima de minutos que esta quantidade de convidados pode ter estado na festa simultaneamente.";A entrada contém vários casos de teste. A primeira linha de cada caso contém um inteiro N (2 ≤ N ≤ 1000), a quantidade de números anotados. A segunda linha contém N inteiros distintos m1,m2,...,mN, os números anotados por Mateuz e recebidos por Freitaz e Rodriguez. Para cada 1 ≤ i ≤ N, o número mi (1 ≤ mi ≤ 104) indica que um convidado entrou ou saiu da festa mi minutos após seu início.A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, imprima uma linha com dois inteiros separados por um espaço. O primeiro é o maior número possível de convidados que podem ter estado na festa simultaneamente. O segundo é a quantidade de máxima de minutos que esta quantidade de convidados pode ter estado simultaneamente na festa.;False;1 / 10;203;125;61.58%
2557;R+L=J;Strings;3;"Durante sua grande aventura na Terra do Oeste, Joãozinho descobriu um livro sagrado que, segundo as lendas, foi escrito pelos próprios deuses antigos. Uma passagem em particular chamou a atenção do jovem aventureiro:

“A origem daquele que nada sabe se revelará quando aquele escolhido pelos deuses desvendar o enigma por eles lhe imposto. R+L=J.”

O enigma o intrigou bastante. Joãozinho logo começou a procurar por valores de R, L e J que satisfazem a equação citada na passagem. Após investigações, o jovem encontrou dois dos três valores citados. Joãozinho deve agora determinar o terceiro dos valores citados, para que o enigma seja solucionado e para que “a origem daquele que nada sabe” seja revelada.";"A entrada contém vários casos de teste. A única linha de cada caso contém uma string na forma R+L=J. Se uma variável tem um valor conhecido, tal valor aparece na string no lugar da variável. Caso contrário, a letra que representa a variável aparece normalmente.

É garantido que exatamente dois dos três valores são conhecidos. Além disso, todos os valores conhecidos estão entre 1 e 106, inclusive. Não há zeros à esquerda nos valores dados.A entrada termina com fim-de-arquivo (EOF).";Para cada caso de teste, imprima uma linha contendo o valor da variável desconhecida.;False;3 / 10;1271;608;47.84%
2558;Robô Aspirador;Grafos;9;"Ricciardi, o robô aspirador, recebeu ordens. Deve limpar o máximo possível dos N grãos de sujeira no chão e chegar à estação de recarga. Parece uma tarefa trivial, mas Ricciardi está com a bateria viciada e pode realizar apenas M movimentos antes de esgotá-la.

Localizado em uma sala retangular dividida em W × H células quadradas, o robô pode, em um movimento, se movimentar para a célula adjacente diretamente acima, abaixo, à esquerda ou à direita de sua posição atual, desde que não haja obstáculos nela. Determinado a economizar energia e realizar seu trabalho com maestria, Ricciardi pediu a você para escrever um programa que calcule o número máximo de grãos de sujeira que Ricciardi consegue limpar.";"A entrada contém vários casos de teste. A primeira linha de cada caso contém dois inteiros N (1 ≤ N ≤ 8) e M (1 ≤ M ≤ 109). A segunda linha também contém dois inteiros W e H (5 ≤ W, H ≤ 100).

As H linhas seguintes contém W caracteres cada e descrevem a sala. Obstáculos são representados por '#', posições livres por '.' , a posição inicial de Ricciardi por 'R', grãos de sujeira por '*' e a estação de recarga por 'S'.

Ricciardi coleta os grãos automaticamente ao passar por cima deles e consegue andar sobre a estação de recarga como em qualquer posição livre.A entrada termina com fim-de-arquivo (EOF).";Para cada caso de teste, imprima uma linha com um único inteiro, o número máximo de grãos que Ricciardi consegue coletar chegando à estação de recarga. Se o robô não consegue chegar à estação, imprima -1.;False;9 / 10;136;43;31.62%
2559;Sexta-Feira 13;Estruturas e Bibliotecas;10;"Hoje é sexta-feira 13! Segundo a tradição, o número 13, assim como o número 7, pode ser considerado um número de azar. Por isso, algumas pessoas preferer tomar cuidado com os números 13 e 7 em paticular!

Flávio tem uma sequência de N números inteiros numerados de 1 a N, e deseja realizar várias operações sobre ela. Há três operações possíveis:


	Dado um inteiro i e um inteiro v, trocar o i-ésimo número da sequência para v;
	Dados inteiros i, j, z e v, com z=13 ou 7, trocar todas as ocorrências do número z para v entre o i-ésimo e o j-ésimo número da sequência, inclusive;
	Dados inteiros i e j, calcular a soma de todos os elementos da sequência entre o i-ésimo e o j-ésimo número, inclusve.


Por exemplo, se a sequência inicial de Flávio é (2, 13, 5, 13, 7) e troca-se o 1-ésimo número para 3, tem-se o vetor (3, 13, 5, 13, 7). Se todas as ocorrências de 13 entre o 4-ésimo e o 5-ésimo número são trocadas para 6, tem-se o vetor (3, 13, 5, 6, 7). Por fim, a soma dos elementos entre o 2-ésimo e o 4-ésimo número é igual a 13+5+6=24.

Para cada operação do último tipo, calcule e mostre a soma resultante da operação.";"A entrada contém vários casos de teste. A primeira linha de cada caso contém um inteiro N (1 ≤ N ≤ 2×105). A segunda linha contém N inteiros a1,a2,...,aN, a sequência inicial de Flávio (0 ≤ ai ≤ 103). A terceira linha contém um inteiro Q (1 ≤ Q ≤ 2×105), o número de operações. As próximas Q linhas contém as operações. Cada operação é descrita por uma linha contendo:


	1 i v (1 ≤ i ≤ N, 0 ≤ v ≤ 103), indicando a troca do i-ésimo número para v; ou
	2 i j z v (1 ≤ i ≤ j ≤ N, z=13 ou 7, 0 ≤ v ≤ 103), indicando a troca das ocorrências de z entre o i-ésimo e o j-ésimo número (inclusive) para v; ou
	3 i j (1 ≤ i ≤ j ≤ N), indicando o cálculo da soma dos elementos entre o i-ésimo e o j-ésimo número, inclusive.

A entrada termina com fim-de-arquivo (EOF).";Para cada caso de teste, para cada operação do último tipo, imprima uma linha contendo a soma resultante da operação.;False;10 / 10;537;45;8.38%
2560;Surf Aquático;Estruturas e Bibliotecas;8;"Este mês a Nlogônia está sediando a copa mundial de Surf Aquático. Neste esporte, um competidor fica N minutos dentro de um aquário fazendo acrobacias com sua prancha, tentando impressionar os juízes.

Ao contrário do Surf comum, os juízes dão uma nota ao competidor a cada minuto. Assim, um competidor recebe uma sequência de N notas a cada performance.

Uma bateria (de notas) é uma sequência contínua de B notas. O resultado de uma bateria é dada pela soma de todas as notas nela, exceto pela maior e pela menor nota, que são descartadas. Assim, o resultado da bateria (2, 3, 7, 5), por exemplo, é 8.

O score final do competidor é dado pela soma dos resultados de todas as baterias de tamanho B em sua sequência de N notas. Assim, se as notas são indexadas de 1 a N, soma-se o resultado da bateria contendo as notas de 1 a B, da bateria contendo as notas de 2 a B+1, etc., até a bateria contendo as notas de N-B+1 a N.

Dada a sequência de notas de um competidor, determine seu score.";A entrada contém vários casos de teste. A primeira linha de cada caso contém dois inteiros N e B (3 ≤ B ≤ N ≤ 2×105). A segunda linha contém N inteiros ni (1 ≤ ni ≤ 100), indicando, em ordem, a sequência de notas do competidor.A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, imprima uma linha contendo o score do competidor.;False;8 / 10;1196;264;22.07%
2561;Tesouro;Geometria Computacional;7;"Vasya e Petya adoram caça ao tesouro. O processo de diversão da dupla é agilizado por um site dedicado ao esporte. Lá, os amigos têm acesso às coordenadas do tesouro, direções e dicas de como encontrá-los.

Tendo anos de experiência e mais de 8192 tesouros encontrados, Vasya decidiu não apenas procurá-los, mas também escondê-los. Ambicioso, ele quer gerar uma experiência a ser lembrada o resto da vida para quem for atrás deles. O rapaz decidiu juntar seu conhecimento de geometria com o seu hobby para gerar um desafio formidável.

Os caçadores receberão a descrição de dois retângulos R0 e R1. O tesouro está escondido na região de intersecção de R0 e R1.

Como nem tudo na vida é fácil, existem regras para que o tesouro de Vasya seja listado no site. A área de busca não pode exceder 10 m2. Por isto, Vasya pediu a Petya que verificasse a qualidade dos desafios. O amigo deve dizer se a área de busca tem tamanho adequado, se não há intersecção, se a área é muito grande, se é apenas uma linha ou se é apenas um ponto.

Tendo se formado em culinária, Petya não é muito bom em geometria. Ele admite não saber resolver o problema de seu amigo e está pedindo sua ajuda.";A entrada contém vários casos de teste. Cada caso contém duas linhas, cada uma descrevendo um retângulo através de quatro inteiros (em metros): X0, Y0, X1 e Y1 (0 ≤ X0 < X1 ≤ 1000 e 0 ≤ Y0 < Y1 ≤ 1000), que descrevem dois vértices opostos do retângulo.A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, imprima uma linha com o resultado da avaliação da área de busca: adequada, se estiver adequada e não for apenas ponto nem linha, linha, se for uma linha, ponto, se for apenas um ponto, inexistente, se não existir, ou grande, se for grande de mais.;False;7 / 10;204;56;27.45%
2562;Tipos Analógimôn;Grafos;6;"Analógimôn Go! é um jogo bastante popular. Em sua jornada, o jogador percorre diversas cidades capturando pequenos monstrinhos virtuais, chamados analógimôns. Existem várias espécies de analógimôns. Cada espécie é de (exatamente) um tipo, como fogo, água, elétrico, etc. Algumas espécies podem ser do mesmo tipo, enquanto outras podem se tipos diferentes.

No manual oficial do jogo consta que algumas espécies são do mesmo tipo. Entretanto, o manual pode não apresentar esta informação para todos os pares de espécies que são do mesmo tipo. Por exemplo, se o manual indica que uma espécie a é do mesmo tipo que uma espécie b, e que uma espécie b é do mesmo tipo que uma espécie c, então as espécies a e c certamente são do mesmo tipo, embora esta informação pode não constar no manual.

Você capturou um analógimôn de uma certa espécie. Sua tarefa é determinar o menor número possível de espécies que certamente são do mesmo tipo da espécie do seu analógimôn, de acordo com as informações contidas no manual.";A entrada contém vários casos de teste. A primeira linha de cada caso contém dois inteiros N e M (1 ≤ N ≤ 1000, 0 ≤ M ≤ N(N-1)/2), o número de espécies de analógimôns e o número de informações presentes no manual, respectivamente. As espécies são numeradas de 1 a N. Cada uma das próximas M linhas contém uma informação presente no manual. Cada linha contém dois inteiros a e b (1 ≤ a, b ≤ N, a≠b), indicando que as espécies a e b são do mesmo tipo. A última linha contém um inteiro E (1 ≤ E ≤ N), indicando a espécie de seu analógimôn.A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, imprima uma linha com um inteiro indicando a menor quantidade de espécies de analógimôns que certamente são do mesmo tipo da espécie do seu analógimôn, de acordo com o manual. Note que a espécie do seu analógimôn também deve ser contada.;False;6 / 10;1298;470;36.21%
2563;Transfira Para o Professor;Paradigmas;6;"Analógimôn Go! é um jogo bastante popular. Em sua jornada, o jogador percorre diversas cidades capturando pequenos monstrinhos virtuais, chamados analógimôns.

Você é um experiente jogador e já capturou N analógimôns, numerados de 1 a N. Você capturou tantos monstrinhos que já está difícil levar todos com você em sua jornada. Por isso, você pode se livrar de alguns de seus monstrinhos transferindo-os para o Professor.

Ao transferir o analógimôn i (para 1 ≤ i ≤ N) para o Professor, você ganha Di doces do Professor em troca do monstrinho. Como os doces são itens muito importantes no jogo, você quer transferir quais e quantos analógimôns forem necessários para ter a maior quantidade possível de doces!

Entretanto, o analógimôn i (para 1 ≤ i ≤ N) pesa Pi kg, e, devido a uma limitação de espaço no laboratório do Professor, ele não pode receber analógimôns cuja soma total dos pesos é maior que K kg.

Sua tarefa é determinar a quantidade máxima de doces que você pode obter transferindo seus monstrinhos, respeitando a limitação de espaço do laboratório do Professor.";A entrada contém vários casos de teste. A primeira linha de cada caso contém os inteiros N e K (1 ≤ N ≤ 100, 1 ≤ K ≤ 104), o número de analógimôns que você capturou e a capacidade do laboratório do Professor, em kg, respectivamente. A segunda linha contém N inteiros D1, ..., DN (1 ≤ Di ≤ 104), indicando quantos doces você ganhará pela transferência de cada analógimôn. A terceira linha contém N inteiros P1, ..., PN (1 ≤ Pi ≤ 104) indicando o peso de cada analógimôn, em kg.A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, imprima uma única linha contendo a quantidade máxima de doces que você pode obter.;False;6 / 10;379;155;40.90%
2564;Troca ou Não Troca;Ad-Hoc;5;"Você provavelmente conhece programas de TV do tipo Troca ou não Troca?, onde um participante pode ganhar um prêmio que pode ir desde uma caneta até uma casa com piscina.

Existem N prêmios, numerados de 1 a N. O participante começa o programa com o prêmio 1. O programa tem então N-1 rodadas. Na rodada i, o apresentador pergunta ao participante se ele deseja trocar seu prêmio atual pelo prêmio Pi. O participante, que não sabe qual prêmio está sendo oferecido, deve responder “sim” ou “não”. Se o participante responder “sim”, seu prêmio atual é trocado pelo prêmio Pi. Se o participante responder “não”, seu prêmio atual não é alterado. Após a última rodada, o participante leva para casa o prêmio que tiver.

Seu irmão será o participante do programa que está prestes a começar! Antes do programa, ele lhe contou a resposta que pretende dar em cada rodada. Entretanto, você tem o poder de controlar sua mente! Ao utilizar o poder em alguma rodada, a resposta dele para aquela rodada é alterada, isto é, ele irá dizer “sim” caso pretendia dizer “não”, e vice-versa.

Você acabou de descobrir qual prêmio será oferecido em cada rodada. Você quer muito que ele termine o programa com o prêmio N, o de maior valor entre todos os prêmios. Qual a quantidade mínima de vezes que seu poder deve ser utilizado para garantir que seu irmão irá levar o prêmio N?";"A entrada contém vários casos de teste. A primeira linha de cada caso contém o inteiro N (2 ≤ N ≤ 100), o número de prêmios. As próximas N-1 linhas descrevem uma rodada cada, em ordem. Cada linha contém dois inteiros Pi e Ri (2 ≤ Pi ≤ N, Ri = 0 ou 1), o prêmio oferecido na rodada e a resposta que seu irmão pretende dar na rodada, respectivamente. Ri = 0 indica “não”, enquanto Ri = 1 indica “sim”.

Nenhum prêmio será oferecido mais de uma vez, e o prêmio 1 não será oferecido novamente.A entrada termina com fim-de-arquivo (EOF).";Para cada caso de teste, imprima uma linha com a quantidade mínima de vezes que você deve usar seu poder para garantir que o prêmio N será conquistado.;False;5 / 10;224;93;41.52%
2565;Tubos de Ensaio;Ad-Hoc;4;"O prédio da Engenharia Química (EQ) é um grande prédio recém inaugurado no campus. Ao entrar no prédio à procura de um banheiro, você acabou entrando por engano em um laboratório de química! Felizmente, o instrutor do laboratório permitiu sua entrada nele.

Neste laboratório, há N tubos de ensaio, numerados de 1 a N. O tubo i (1 ≤ i ≤ N) contém inicialmente mi mililitros de água. Para cada tubo, você pode deixá-lo inalterado, retirar qualquer quantidade de água dele, ou colocar qualquer quantidade de água nele. Seu objetivo é deixar todos os tubos com a mesma quantidade de água.

Para colocar uma quantidade de X ml em algum tubo, você precisa retirar X ml de água de uma torneira no laboratório. Além disso, para retirar uma quantidade de X ml de algum tubo, você precisa despejar X ml de água em um ralo no laboratório. O custo total é igual à soma da quantidade total de água retirada da torneira com a quantidade total de água despejada no ralo.

Dadas as quantidades iniciais de água em cada tubo, sua tarefa é determinar o custo total mínimo necessário para deixar todos os tubos com uma mesma quantidade de água.";A entrada contém vários casos de teste. A primeira linha de cada caso contém o inteiro N (1 ≤ N ≤ 100), a quantidade de tubos no laboratório. As próximas linhas contêm, um por linha, N números reais mi (0 ≤ mi ≤ 100.0), a quantidade inicial de água em cada tubo, em mililitros.A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, imprima uma única linha contendo o custo total mínimo para deixar todos os tubos com a mesma quantidade de água. Arredonde e imprima o valor com exatamente duas casas decimais.;False;4 / 10;204;91;44.61%
2566;Viagem Para BH;Grafos;6;"Está chegando a grande final do Campeonato Nlogonense de Surf Aquático, que este ano ocorrerá na cidade de Bonita Horeleninha (BH)! Você decidiu que irá viajar de sua cidade natal para BH para acompanhar a final.

Existem N cidades em Nlogônia, numeradas de 1 a N. Considere que cidade 1 é sua cidade natal, e a cidade N é BH.

Além disso, existem M trechos pelos quais é possível viajar. Cada trecho pode ser usado para ir de uma cidade para alguma outra do país. Alguns trechos são feitos de ônibus, enquanto os demais são feitos de avião. Para cada trecho, você conhece o preço, em reais, da passagem que deve pagar para poder utilizá-lo.

Para não tornar sua viagem muito cansativa com deslocamentos entre rodoviárias e aeroportos, você decidiu que irá utilizar apenas um meio de transporte em toda sua viagem, isto é, você quer ir para BH ou utilizando apenas ônibus, ou utilizando apenas aviões.

Sua tarefa é determinar o custo mínimo necessário, em reais, para viajar da sua cidade natal para BH, dada a restrição que o meio de transporte não deve ser alterado durante a viagem.";"A entrada contém vários casos de teste. A primeira linha de cada caso contém dois inteiros N e M (2 ≤ N ≤ 100, 1 ≤ M ≤ 2(N2 -N)), o número de cidades e de trechos, respectivamente. As próximas M linhas descreve um trecho cada. Cada linha contém quatro inteiros A B T R (1 ≤ A, B ≤ N, A≠B,T = 0 ou 1, 1 ≤ R ≤ 104), indicando um trecho que sai da cidade A e chega na cidade B (nesta ordem), feito por ônibus se T = 0 ou por avião se T = 1, e cuja passagem custa R reais.

É garantido que existe ao menos um caminho de sua cidade para BH utilizando apenas um meio de transporte. Além disso, para cada par ordenado de cidades (A,B), existe no máximo um trecho de A para B para cada meio de transporte possível (mas note que pode haver um trecho de ônibus e outro de avião de A para B).A entrada termina com fim-de-arquivo (EOF).";Para cada caso de teste, imprima uma única linha contendo um inteiro indicando o custo mínimo necessário para fazer sua viagem, dadas as restrições acima.;False;6 / 10;474;165;34.81%
2567;Virus;Ad-Hoc;3;"A secretaria de saúde pública da Nlogônia acabou de emitir um alerta. Um vírus está contagiando toda a população.

Após muitos estudos, os pesquisadores do país determinaram que, após infiltrarem o corpo hospedeiro, os virus se juntam dois a dois para tornarem-se letais. O nível de letalidade de uma infecção é determinado pela soma da diferença da idade, em dias, dos vírus pareados. Os vírus sem pares não influenciam no nível.

Desta forma, se existem 4 vírus no corpo hospedeiro com idades (em dias), iguais a

4, 10, 9, 43

E eles se paream da seguinte forma:

4 com 9, 43 com 10

Então nível de letalidade seria (9 - 4) + (43 - 10) = 38.

A secretaria de saúde pública da Nlogônia pediu para que você escrevesse um programa que, dado a contagem de vírus em um corpo e a idade de cada um deles, calcule o nível máximo de letalide que a infecção pode assumir.";A entrada contém vários casos de teste. A primeira linha de cada caso contém um inteiro N (1 ≤ N ≤ 1000), a quantidade de vírus no corpo hospedeiro. A linha seguinte contém N números inteiros ai (0 ≤ ai ≤ 1000) separados por espaços, as idades (em dias) de todos os vírus no corpo.A entrada termina com fim-de-arquivo (EOF).;Para cada caso de teste, imprima uma única linha contendo o nível de letalidade máximo que a infecção pode assumir.;False;3 / 10;1208;627;51.90%
2568;Ações;Ad-Hoc;2;"Ada é uma investidora de um negócio bastante instável e de alto risco: ações da NlogNintendo.No entanto, por ter enorme simpatia pela empresa belo-horizontina, Ada continua investindo mesmo assim.

Porém, a instabilidade às vezes dificulta que ela faça seu planejamento de portfólio a longo prazo.Para ajudá-la, ela contratou você para fazer um programa que prevê o valor das ações da NlogNintendo.Ada registrou que, no dia D, uma ação da NlogNintendo valia I reais. Além disso, logo no início dos dias pares, o preço da ação sobe X reais em relação ao preço do final do dia anterior.Nos dias ímpares, o preço da ação já se inicia com um valor X reais abaixo do valor no fim do dia anterior.E agora? Será que você consegue ajudá-la a saber qual será o preço da ação daqui a F dias?";A entrada é composta de uma linha contendo 4 inteiros separados por espaço: D (1 ≤ D ≤ 365) (o dia em que Ada registrou o preço da ação da NlogNintendo), I(X ≤ I ≤ 1000) (o preço inicial registrado da ação), X (1 ≤ X ≤ I) (a variação diária do preço da ação) e F (1 ≤ F ≤ 365) (o número de dias no futuro em que seu programa deve prever o preço da ação).;A saída deve conter uma linha com um único inteiro: o preço previsto da ação F dias após o dia em que o preço inicial foi registrado.;False;2 / 10;479;349;72.86%
2569;A Bruxa do 7 x 1;Ad-Hoc;3;"Dona Clotilde é uma senhora muito simpática que mora em uma vila, na casa 71. Não se sabe ao certo por que, mas tinha fama de ser bruxa. Clotilde tinha muita vontade de assistir uma partida de futebol. Certo dia, ela comprou um líquido para limpar prata e com isto, ganhou um cupom que dava direito a concorrer a um ingresso para a semifinal da copa do mundo de 2014, no Mineirão, o jogo entre Alemanha x Brasil. O sorteio veio e ela ganhou o ingresso. Clotilde foi ao jogo, o Brasil perdeu de 7 x 1, e todos da vila acharam que o Brasil tinha perdido daquela forma por causa dela, coitada! O sobrinho hacker dela, San Tanaz, tomando as dores da tia, resolveu criar um vírus de computador que interferisse em cálculos matemáticos, de modo que, tudo que envolvesse o número 7 nas contas, se tornaria 0.

Por exemplo: 

3 + 4 = 0

33 + 44 = 0

17 + 11 = 21

8 x 9 = 2

12 x 7 = 0

8 + 9 = 10";Composto por uma única linha com dois números inteiros a e b ( 0 < a, b < 10000 ), separados por um operador de soma ou multiplicação.;Um número inteiro correspondente ao resultado da conta, depois do vírus.;False;3 / 10;1067;574;53.80%
2570;Californication;Ad-Hoc;9;"Red, Hot, Chilli and Peppers are four students who always meet under the bridge after school ends to play a game called Californication. They draw a NxM grid on the ground, initially empty, and the ultimate goal is to master as much of this grid as possible.

The students play alternately, always following the same order: Red, Hot, Chili and Peppers. After Peppers, the turn returns to Red and so they continue playing until they complete K rounds. In each of the rounds, the player can choose between two possible moves:

L X -> {} It means to dominate the line X of the grid, writing the initial of its name in all the elements contained in this line.

C Y -> {} It means to dominate the column Y of the grid, writing the initial of its name in all elements contained in that column.";"The first line of the input contains three integers N, M (1 ≤ N, M ≤ 103) and K (1 ≤ K ≤ 5 × 105), the grid dimensions (number of rows and columns respectively) and how many rows were played.

After that, there are K lines, each containing oneL X (1 ≤ X ≤ N) or C Y (1 ≤ Y ≤ M) type, both described above.";"Show how dominant each player was at the end of the match in the following format:

Ra Hb Cc Pd, where a, b, c and d are integers, representing the final score of Red, Hot, Chili and Peppers, respectively.";False;9 / 10;476;149;31.30%
2571;Doador;Ad-Hoc;9;"Dilson, Gilson ou Wilson, como você preferir chamar, é um dos poucos bons mineiros que já se ouviu falar.  Todo ano ele ajuda comunidades carentes, povoados, creches e escolas. Nesse ano, Dilson, que é um dos homens mais ricos de Minas Gerais, está querendo doar parte de suas economias. Ele pretende doar por mês p por cento do total de dinheiro que possui. O dinheiro de Gilson (quer dizer, Dilson) é mantido numa aplicação que rende j porcento todo mês. Dilson utliza uma parte desse rendimento para pagar suas contas, que totalizam x reais por mês, e gasta o restante dele viajando. 

Eis que ele se perguntou: ""Se eu continuar doando meu dinheiro e gastando os rendimentos dessa maneira, por quantos meses serei capaz de pagar as contas?""";A entrada consiste de um inteiro M (0 ≤ M  ≤ 1018) representando o dinheiro inicial de Dilson, dois números reais p (0 < p ≤ 100) e j (0 ≤ j ≤ 100) de cinco casas decimais cada representando a porcentagem dele que Dilson doa e o quanto de juros que ele recebe por mês e um inteiro x (1 ≤ x ≤ 106) que representa a quantidade mínima necessária que o dinheiro deve render por mês.;Um número inteiro correspondente ao número de meses que Dilson pode doar seu dinheiro.;False;9 / 10;444;72;16.22%
2572;Escalação;Ad-Hoc;10;"Escalar uma equipe é uma tarefa complicada em vários esportes. Por exemplo, no futebol, se montarmos um time com os 11 melhores jogadores de futebol de todos os tempos, teríamos provavelmente um time com nenhum goleiro ou zagueiro.

O caso é um pouco mais simples no Pokémon Ho. Neste jogo, cada jogador tem seu conjunto de bichos, chamados de Pokémons, que podem batalhar entre si. Numa batalha entre dois treinadores, cada um deve escolher um conjunto de até K Pokémons para batalhar. Uma equipe não precisa ter K Pokémons, mas precisa ter pelo menos um. Cada Pokémon tem um multiplicador de ataque, e o dano total causado por todos os Pokémons é simplesmente o produto dos multiplicadores de todos os Pokémons da equipe do treinador. Este produto é chamado de ataque total. Como a interação entre os multiplicadores dos Pokémons é mais simples que entre jogadores de um esporte de equipe, não é tão difícil escolher os Pokémons que maximizam o ataque total para uma batalha.

Antes de lançar o jogo, a NlogNintendo está avaliando as equipes que podem ser formadas em cada região do mundo. Há N Pokémons no jogo, numerados de 1 a N. Para cada região do mundo, a NlogNintendo decidiu liberar apenas alguns Pokémons. Assim, para capturar todos os Pokémons, os jogadores teriam que viajar por vários países, o que deixa a experiência mais interessante (apesar de mais cara). Para simplificar a escolha, foi decidido que cada região terá acesso a uma parte contígua da sequência de Pokémons. Mais precisamente, na região i, os jogadores têm acesso aos Pokémons de números L_i, L_{i}+1, ..., R_{i} - 1, R_{i}, isto é, todos os Pokémons com números entre L_i e R_i.

Dados os multiplicadores de ataque de cada Pokémon, a sequência de Pokémons disponíveis em cada região, e o tamanho máximo K das equipes que podem batalhar, a empresa contratou você para dizer qual é o melhor ataque total possível que alguém poderia formar apenas com os Pokémons de cada região.";A entrada começa com uma linha contendo três inteiros separados por espaço: N ( N <  2*105 ) (número de Pokémons no jogo), K ( K < 40 ) (tamanho máximo de uma equipe de Pokémons que pode batalhar) e R ( R < 2*105 ) (número de regiões no jogo). Em seguida, a próxima linha contém N inteiros m_i ( 0 < m_i < 104 ) separados por espaço, onde m_i é o multiplicador de ataque do Pokémon de número i. Por fim, há R linhas descrevendo quais Pokémons estão disponíveis em cada região. Cada uma dessas linhas contém dois inteiros, L_i e R_i (1 < L_i < R_i < N), significando que na i-ésima região do jogo apenas os Pokémons com números entre L_i e R_i estão disponíveis.;"A saída contém R linhas. Na i-ésima linha, imprima um inteiro: o ataque total da melhor equipe de até K Pokémons que se pode formar com os Pokémons disponíveis na i-ésima região. Como este número pode ser muito grande, imprima o seu resto da divisão por 109 + 7.
 ";False;10 / 10;518;141;27.22%
2573;Caça ao Tesouro;Ad-Hoc;10;"Luan e Larissa são irmãos gêmeos que adoram brincar na piscina. A brincadeira favorita deles é a caça ao tesouro. Nessa brincadeira, ambos se encontram dentro da piscina quando o pai deles joga uma moeda dentro da piscina, em uma posição escolhida aleatoriamente com probabilidade uniforme. Como Larissa e Luan são gêmeos que adoram nadar, ambos conseguem nadar com a mesma velocidade. Por isso, aquele que estiver mais próximo do local em que a moeda cair será o primeiro a pegá-la.

Mateus é o irmão mais novo de Luan e Larissa. Ele não é muito de praticar esportes. Ele prefere ficar no quiosque tomando limonada e resolvendo um Sudoku. Porém, observador como é, Mateus percebeu que o resultado da brincadeira dos irmãos é determinado pela sorte. Agora, ele quer saber qual é a probabilidade que cada um dos irmãos tem de pegar a moeda. Mateus está muito ocupado resolvendo seu Sudoku. Por isso, ele pediu que você calculasse essa probabilidade para ele com base no tamanho da piscina e na posição de cada um dos irmãos.

A piscina é descrita como um retângulo cujo canto inferior esquerdo se encontra no ponto (0, 0) e o canto superior direito se encontra no ponto (L, A). A posição de Luan é descrita pelo ponto (XA, YA), e a posição de Larissa pelo ponto (XB, YB). ";A entrada é composta por três linhas. A primeira contém dois inteiros L ( 1 ≤ L ≤ 104 ) e A ( 1 ≤ A ≤ 104 ), as coordenadas do canto superior direito da piscina. A segunda contém dois inteiros XA ( 0 ≤ XA ≤ L )e YA ( 0 ≤ YA ≤ A ​​​​​​​), as coordenadas de Luan dentro da piscina. A terceira contém dois inteiros XB ( 0 ≤ XB ≤ L ) e YB ( 0 ≤ YB ≤ A ​​​​​​​), as coordenadas de Larissa dentro da piscina.;A saída deve conter uma linha com dois números com 6 casas decimais separados por espaço, representando a probabilidade de Luan pegar a moeda e a probabilidade de Larissa pegar a moeda.;False;10 / 10;187;44;23.53%
2574;Lagoa Das Capivaras;Ad-Hoc;8;"Belo Horizonte é conhecida por abrigar um dos mais novos patrimônios históricos da humanidade: a Lagoa da Pampulha. Outra coisa que você deve saber é que ela é a morada de várias capivaras, os maiores roedores do mundo. Mas você realmente não deve fazer ideia de que a sociedade das capivaras é organizada como uma monarquia absolutista que frequentemente tem de lidar com revoluções e consequente subdivisão territorial.

Recentemente, as capivaras saíram vitoriosas das Guerras de Unificação da Lagoa da Pampulha, consolidando seu território e se estabelecendo como os roedores dominantes da Lagoa. O rei das capivaras, Bacon - O Grande -, está interessado em dividir a derradeira conquista de seu povo, a Ilha dos Amores, entre seus súditos. A Ilha é uma matriz quadrada de ordem N = 2k, com cada célula representando a quantidade de unidades de grama em um dado metro quadrado da ilha. Para evitar uma sangrenta revolução e o reinício das Guerras de Unificação, Bacon - O Grande - estima que são necessárias G unidades de alimento em um território para manter uma comunidade de capivaras apaziguada.

Bacon - O Grande - pediu a você para descobrir qual o maior número de territórios que deverão ser formados obedecendo às seguintes restrições: (i) todas as áreas devem ser matrizes quadradas; (ii) todos os territórios devem ter a mesma área (iii) todas as células da ilha devem ser ocupadas.

Sua tarefa é, dada a descrição da Ilha dos Amores e a quantidade G de grama, determinar qual o maior número de comunidades que podem ser formadas pelo governo de Bacon - O Grande.";"A entrada contém várias linhas. Na primeira delas, estão os inteiros N (N = 2k), tendo K os limites (0 < K < 11) e G (1< G < 105 ), o tamanho da matriz e numero mínimo de unidades de grama que devem existir em cada novo território.
Em seguida, seguem N linhas com N inteiros cada, descrevendo a Ilha dos Amores, com o j-ésimo elemento da i-ésima linha representando a célula mij ( 0 < mij  < 300 )da matriz.";A saída deve conter um único inteiro T, o maior número de territórios que podem ser delimitados pelo governo de Bacon - O Grande.;False;8 / 10;202;49;24.26%
2575;Árvore de Natal;Ad-Hoc;9;"Roberto é apaixonado por árvores de natal. Todo ano, ele enfeita as árvores de Itajubá com os mais bonitos enfeites. Por isso, esse ano ele foi convidado pelo prefeito de Belo Horizonte a enfeitar as árvores de natal que serão colocadas no final do ano. Para isso, Roberto irá podar galhos das árvores que ele acha que estão feios. Para cada galho i da árvore, Roberto definiu o quão bonito ele é por um número wi. Valores negativos representam que o galho é feio. A beleza de uma árvore de natal é então definida pela soma das belezas de seus galhos.

O processo de poda de uma árvore é simples. Roberto corta um galho da árvore, e todos os galhos que partiam dele caem também. Na figura 1 temos um exemplo de árvore e de uma poda feito por Roberto. Em cada galho da árvore na figura temos  o valor wi que descreve o quão bonito é o galho. Na árvore à direita, os galhos cortados  por Roberto estão pontilhados, enquanto os nós e galhos que caíram após o corte estão tracejados. No exemplo da figura 1, tanto a árvore sem corte, quanto a cortada possuem um valor 10 de beleza.

    Figura 1: Corte de Roberto



    



    A figura 2 apresenta o corte ótimo do caso de exemplo. Note que foram feitos o menor número de cortes para obter essa árvore de beleza 15.



    Figura 2: Corte ótimo



    


Sabendo da VI Maratona Mineira de Programação, Roberto pediu que você fizesse um programa que o ajudasse a definir quais galhos ele deverá cortar da árvore para que ela fique a mais bonita possível de acordo com sua definição.";A entrada consiste de um inteiro N (2 < N < 106) que é a quantidade de nós da árvore. Nas próximas N-1 linhas, temos quatro inteiros di (0 < di < N-2), ai (0 < ai < N-1), bi (0 < bi < N-1),  e wi  (-1000 < wi < 1000) representando o identificador do galho i, que ele conecta o nó ai ao nó bi, e que ele possui wi de beleza pela classficação de Roberto. A árvore é sempre enraizada no nó 0. É garantido que o grafo da entrada é conexo e não possui ciclos.;"A saída deve conter dois inteiros, D e M que representam o quão bonito é a árvore com o corte ótimo e quantos cortes precisam ser feitos, respectivamente. Se o número de cortes for maior do que 0, na próxima linha, imprima M inteiros dj em ordem crescente e separados por espaço, onde dj representa o identificador de cada galho j a ser cortado.

Caso exista mais de uma árvore com o mesmo grau de beleza, imprima aquela que possui menos galhos. Se ainda existir mais de uma árvore que satisfaça os mesmos criteŕios, imprima a que possua menos cortes.";True;9 / 10;275;87;31.64%
2576;Invertendo Setas;Ad-Hoc;6;"Bibi e Bibika estão jogando um jogo simples onde o juiz, a cada rodada, faz um desenho com vários círculos e setas ligando alguns deles.

Bibi deve contar a menor quantidade X de setas que precisam ser invertidas para existir ao menos um caminho de A até B e Bibika deve contar a menor quantidade Y de setas invertidas para existir ao menos um caminho no sentido contrário, de B até A. Ganha o jogo quem encontrar o menor valor. Caso não exista, independente da quantidade de setas invertidas, um caminho entre A > B ou B > A, o jogo termina empatado.

Como o juiz em algumas rodadas faz um desenho muito grande, fica bastante complicado checar a veracidade das respostas dadas pelas meninas. Sua tarefa é automatizar esse processo para ele.
 ";A primeira linha de cada caso de teste contêm quatro inteiros C ( 1 ≤ C ≤ 104 ) , S ( 0  ≤ S  ≤  5 x  105), A e B, (  1 ≤ A, B ≤ C ), sendo C a quantidade de círculos, S a quantidade de setas, A e B os extremos do jogo. Cada uma das próximas S linhas contêm dois inteiros C1 e C2, representando uma seta ligando o círculo C1 ao círculo C2.;Para cada caso de teste, exiba o nome da vencedora e a quantidade Q de setas invertidas, no formato Bibi: Q ou Bibika: Q. Caso o jogo termine empatado, exiba Bibibibika.;False;6 / 10;489;155;31.70%
2577;Jogo das Caixas;Ad-Hoc;10;"Bruno e Henrique vão jogar para passar o tempo. No jogo que eles escolheram, existem N caixas. Dentro de cada caixa, existe um papel com número inteiro escrito. Além das caixas, existem M barbantes. Cada um deles amarra duas caixas.

O jogo funciona assim. Primeiro, Bruno escolhe uma das caixas e a remove do jogo, juntamente com os barbantes que a conectam a outras caixas. Em seguida, Henrique pode escolher um subconjunto qualquer das caixas tal que, se uma caixa for escolhida, todas as caixas amarradas a ela também devem ser escolhidas.

A pontuação de Henrique é a soma dos números escirtos nos papeis dentro das caixas escolhidas por ele. O objetivo de Bruno é minimizar a maior pontuação que Henrique pode escolher. Por isso, para cada caixa, Bruno quer saber qual é a maior pontuação que pode ser obtida por Henrique se ela for a caixa removida.
 ";A primeira linha da entrada contém dois inteiros N ( 1 < N < 105 )  e M ( 0 < M < 105 ), o número de caixas e o número de barbantes. A segunda linha contém N inteiros C1,C2, ...,CN (-104 < Ci< 104) separados por espaço. O i-ésimo deles corresponde ao número no papel dentro da i-ésima caixa. Cada uma das M linhas seguintes descreve um barbante. A i-ésima delas contém dois inteiros Ai e Bi ( 1 < Ai < Bi < N ), indicando que o i-ésimo bargante amarra as Ai-ésima e Bi-ésima caixas.;"A saída deve ser composta por N inteiros separados por espaço. O i-ésimo inteiro deve corresponder à maior
pontuação que Henrique pode conseguir se Bruno remover a i-ésima caixa.
 ";False;10 / 10;112;18;16.07%
2578;Ontarama Meraini;Ad-Hoc;9;"Chegando para a abertura da VI Maratona Mineira Programação, os times se depararam com um banner um tanto quanto confuso, onde dizia: ""Bem-vindos à VI Ontarama Meraini!"". Depois de ler algumas vezes, os mais atenciosos perceberam que se tratava de um anagrama de "" Maratona Mineira "", já que Astolfo, o criador da arte, é um cara apaixonado por anagramas.

Um anagrama de uma palavra é qualquer outra palavra que se forma apenas alterando a ordem de uma ou mais de suas letras, por exemplo: ""Alergia"", ""Regalia"" e ""Galeria"" são alguns dos anagramas de ""Alegria"".

Astolfo deseja fazer uma brincadeira à parte com os competidores envolvendo anagramas, para quebrar o gelo e descontrair os competidores. Para isso, ele gerou um texto  T  em seu computador, e o imprimiu em uma tira gigante de papel. Nesta tira, há lições de vida importantes que os competidores devem procurar.

Ele gostaria de diminuir a tira para que ela caiba em sua mala, já que ela ficou enorme. Porém, a graça da tira é justamente que Astolfo escondeu no texto alguns anagramas de uma profunda mensagem  M. Assim ao diminuir a tira, Astolfo deseja que ao menos um anagrama de  M  sobre na tira final. Ele fará a redução da seguinte forma. Primeiro, escolhera um inteiro  b entre 1 e  T inclusive, e cortará as  b primeiras letras de  T, descartando o restante.    Em seguida, ele escolherá um segundo inteiro  e  entre 1 e  b  inclusive, e cortará as últimas  e  letras da tira que restou, descartando as demais letras. Esta é a tira final de Astolfo.



Astolfo percebeu que pode haver mais de uma forma de realizar este procedimento de forma que a tira resultante contenha um anagrama de  M. Assim, ele escolheu  T  e  M  de maneira tal a esconder uma mensagem importante também nesse número de formas. Assim caso você também deseje saber qual é a mensagem de Astolfo, basta resolver o seguinte problema: dados T  e  M, calcule o número de maneiras distintas que Astolfo tem de cortar a tira com o procedimento descrito acima de forma que a tira final contenha ao menos uma ocorrência de um anagrama qualquer de  P.";A entrada é composta por duas linhas. A primeira linha contém o texto T, composto apenas por letras minúsculas entre 'a' e 'z'. A segunda linha contém a mensagem M, também composta por letras minúsculas entre 'a' e 'z'. (1 ≤ |M| ≤|T| ≤ 106);Imprima um único inteiro, representando o número de formas que Astolfo tem de cortar extremidades de tira com o texto  T  de forma que a tira final contenha uma ocorrência de ao menos um anagrama de  M, em qualquer posição.;True;9 / 10;260;42;16.15%
2579;Nagol;Ad-Hoc;6;" Nagol, um ex super-herói que todos acham estar morto, mora em uma calma cidade do interior de Minas. Após se aposentar da agitada vida de herói, ele agora trabalha como designer de azulejos. Iremos imaginar uma parede de azulejos como um grid de L * C, L linhas identificadas de 0 a L-1 e C colunas identificadas de 0 a C-1.
Nagol possui um estilo próprio de design, ele usa suas mãos para ""riscar"" cada um dos azulejos e transformar a parede final em uma grande obra de arte. 

A ordem que ele usa para fazer isso é sempre a mesma, começa da primeira linha e vai riscando todas as C colunas da esquerda para a direita, depois vai para a segunda linha e risca todas as C colunas do mesmo modo, isso se repete até terminar as L linhas.
Um detalhe importante é que ele nunca faz dois riscos seguidos com a mesma mão, ele alterna começando sempre com a direita.
Segue um exemplo de uma parede final onde L = 2 e C = 3:



Sua tarefa é, dado o tamanho da parede (L e C) e a posição de um azulejo específico (X e Y), diga qual mão Nagol usará para riscá-la.";Cada linha da entrada possui quatro inteiros L ( 0 < L , C < 105 ), X ( 0 < X < L ), Y ( 0 < Y < C ), todos descritos anteriormente. ;"Exiba uma única linha com a mensagem ""Direita"", caso ele tenha riscado o azulejo com a mão direito ou ""Esquerda"", caso contrário.";True;6 / 10;991;303;30.58%
2580;Mestre Pokémon Ho;Ad-Hoc;9;"Em Belo Horizonte, um jogo eletrônico tem tomado as ruas e praças da cidade: é o pokémon Ho.  A startup NlogNintendo que criou o jogo não esperava tamanho sucesso. E ela acabou de te contratar para que você descubra o melhor jeito de se tornar um mestre pokémon Ho.

No pokémon Ho, você possui pokebolas que capturam pokémons (criaturinhas do jogo). A cada vez que se captura um pokémon novo, ganha-se experiência, porém pokémons repetidos não. Um mestre pokémon Ho é um jogador que possui grande quantidade de experiência. E é por isso que  você deseja capturar os mais diversos tipos de pokémons que se é possível. Entretanto, essa não é uma tarefa fácil. Os pokémons, ao tentarem ser capturados, podem quebrar as pokebolas. Alguns com mais facilidade do que outros. De fato, para cada pokémon i temos uma probabilidade associada pi do pokémon quebrar a pokebola. Para não deixar alguns pokémons impossíveis de serem capturados, a NlogNintendo assumiu que pi ≤ 0.9. Ou seja, é garantido ao menos 10% de chance de capturar um pokémon. Além disso, após cada j-ésima tentativa falha, o pokémon i tem uma probabilidade r{i, j} de escapar da batalha. Se o pokémon escapar, não se pode tentar capturá-lo novamente. Como podem ter muitas tentativas, a NLogNintendo disponibiliza apenas Ri probabilidades de escapar para cada pokémon i. As probabilidades r{i, j}, 1 ≤ j ≤ Ri se repetem a cada Ri tentativas.

A NlogNintendo te mandou a seguinte tarefa: Dado as probabilidades e as experiências de captura associado a cada pokémon e um número finito de pokebolas, encontre o valor esperado de experiência a ser obtido assumindo que o mestre pokémon Ho sempre joga de forma ótima.";"A entrada consiste de dois inteiros N (1 ≤ N ≤ 30) e P (1 ≤ P ≤ 106 )  que representam o número de pokémons no jogo, e o número de pokebolas disponíveis para o jogador. As próximas 2*N linhas temos uma string Si (1 ≤ |Si| ≤ 50 )(∀1 ≤ i ≤ N ) ,um inteiro Ri ( 1 ≤ Ri ≤ 104 )(∀1 ≤ i ≤ N ), um inteiro ei (1 ≤ ei ≤ 1000 )(∀1 ≤ i ≤ N ) e um real de 3 casas decimais pi ( 0.000 ≤ pi ≤ 0.900 )( ∀1 ≤ i ≤ N ) que representam  o nome do pokémon i, o número de probabilidades de escapar de uma batalha, a experiência obtida ao capturá-lo e a probabilidade do pokémon i quebrar a pokebola, respectivamente. Na próxima linha Ri números reais r{i, j} ( 0.000 ≤ r{i, j} ≤ 1.000 )( ∀1 ≤ i ≤ N )( ∀1 ≤ j ≤ Ri ) que representam a probabilidade do i-ésimo pokémon escapar da batalha após a j-ésima tentativa de captura. Lembre-se que a cada Ri tentativas, os valores se repetem.

Observação: Não é garantido que se dois pokémons aparecerem com o mesmo nome na entrada, terão todos os valores associados iguais.";Um número real arredondado para 4 casas decimais correspondente a experiência esperada a ser ganha por um mestre pokémon Ho.;False;9 / 10;20;6;30.00%
2581;I am Toorg!;Iniciante;1;Toorg é o integrante mais sábio do grupo de heróis denominado Os Protetores da Via Láctea. Para qualquer pergunta, ele tem a resposta ideal! Escreva um programa que, dada uma pergunta, informe a resposta de Toorg.;A entrada terá diversos casos de teste. A cada caso de teste, um número N é apresentado, que representa o número de casos de teste. Em seguida, haverá N linhas, com as perguntas feitas para Toorg.;Para cada caso de teste, imprima a resposta de Toorg.;False;1 / 10;3372;2599;77.08%
2582;System of a Download;Iniciante;2;"System of a Download é uma famosa banda de Hacker Metal! Certa vez, eles criaram um dispositivo, com seis botões, numerados de 0 a 5, e colocaram nesse dispositivo os seus 11 maiores sucessos. Para tocar uma destas músicas, é preciso pressionar dois botões. Com isso, os números destes dois botões são somados, e então toca-se a música correspondente ao número da soma, conforme a relação abaixo:


0 - PROXYCITY
1 - P.Y.N.G.
2 - DNSUEY!
3 - SERVERS
4 - HOST!
5 - CRIPTONIZE
6 - OFFLINE DAY
7 - SALT
8 - ANSWER!
9 - RAR?
10 - WIFI ANTENNAS


Por exemplo, se os botões pressionados forem 3 e 4, irá tocar a música 7 - SALT
Escreva um programa que, dados os dois botões que forem pressionados, determine qual música irá tocar.";Um número inteiro C será informado, que será a quantidade de casos de teste. Cada caso tem dois valores inteiros, X e Y, representando quais botões foram pressionados.;Para cada caso de teste, imprima o nome da música correspondente.;False;2 / 10;4158;2382;57.29%
2583;Chirrin Chirrion;Strings;3;"O Grande herói Chapolout vai ajudar um inventor, e lá encontra com o genro dele, que tinha más intenções. Para tentá-lo fazer mudar de ideia, Chapolout conta a estória de Tausfo e Mefistótriste. Tausfo era um senhor com idade bem avançada, e era apaixonado por uma mulher bem mais jovem que ele. Um dia, ele recebe a visita de Mefistótriste, um demônio que lhe oferece uma ferramenta, chamada Chirrin Chirrion, que trazia ou afastava coisas conforme era dito. Para trazer algo, precisava dizer o que queria, seguido da palavra Chirrin, e para afastar algo, precisava dizer o que não queria, seguido da palavra Chirrion. Qualquer outra palavra dita, não iria fazer efeito. Depois de tanto usar, Mefistótriste volta e diz que irá levar a sua alma consigo, a menos que devolvesse tudo o que havia pedido. Ajude Tausfo!

Escreva um programa que, - dadas as utilizações da ferramenta -, reúna tudo o que Tausfo adquiriu com o Chirrin Chirrion.";O primeiro valor a ser lido é um inteiro C, indicando o número de casos de teste. Cada caso de teste inicia com um inteiro N, informando quantas utilizações foram feitas. Considere que antes ele não possuía nada, que um Chirrion só terá efeito se ele possuir tal coisa dita, e que um Chirrin só terá efeito se ele ainda não possuir tal coisa, ou seja, não tem como ele possuir dois exemplares de uma mesma coisa.;Para cada caso de teste, imprima a palavra TOTAL, seguida da relação de coisas que Tausfo tem, em ordem alfabética.;False;3 / 10;342;218;63.74%
2584;Pentágono;Matemática;4;"É possível calcular a área de um pentágono regular, ou seja, uma figura geométrica com cinco lados iguais, dado o comprimento de um dos lados. Sendo assim, calcule.


Escreva um programa que, dado o comprimento de um lado de um pentágono regular, calcule a sua área.";Haverá um valor C que indica a quantidade de casos de teste. Em seguida, haverá um número inteiro N para cada caso (1 ≤ N ≤ 10000), indicando o comprimento do lado de um pentágono regular.;Para cada caso de teste, imprima o valor correspondente da área do respectivo pentágono, com três casas decimais de precisão.;True;4 / 10;614;314;51.14%
2585;Dominó Incompleto;Grafos;6;"Caco vivia ostentando na vila, pois tinha um jogo de dominós maior que os convencionais. Ao invés das tradicionais 28 peças, enumeradas de 0 a 6 em suas extremidades, não havendo peças repetidas, o dele tinha 55 peças, enumeradas de 0 a 9 em suas extremidades, não havendo peças repetidas. Um dia, Caco emprestou o seu Dominó para Chagas, e o mesmo o devolveria, depois de um tempo, com peças faltando. Antes de devolver, Chagas queria analisar o quanto o Dominó ainda estava jogável, mesmo faltando peças. Dadas as peças restantes, ele queria ver qual a maior sequência de peças ele conseguiria colocar sobre a mesa.
                            1
                            3Por exemplo: Se ele tivesse apenas quatro peças restantes, e estas peças fossem 1-2, 2-2, 2-3, 4-4, conforme imagem abaixo, a maior sequência possível seria formada por três peças:
                
                Escreva um programa que, dadas as peças restantes do dominó, informe o tamanho da maior sequência possível entre essas.";Haverá diversos casos de teste. Cada caso de teste apresentará um número N, com o total de peças restantes. Depois haverá N linhas, com dois números inteiros, A e B (0 ≥ A ≥ B ≥ 9), indicando os números que estão nas extremidades da peça. Os testes terminam com fim de arquivo.;Imprima o tamanho da maior sequência possível, em relação às peças daquele caso de teste.;True;6 / 10;122;47;38.52%
2586;Cubonacci;Ad-Hoc;5;"Certo dia, Rubiko, um exímio jogador de cubo mágico, queria inventar um jogo diferente, usando tal ferramenta. Ele comprou um cubo sem cores, separou as três camadas, e colocou um número em cada parte de cada camada, conforme no exemplo abaixo.

                

                Após isso, baseado na sequência de Fibonacci, a qual cada próximo número é formado pela soma dos dois números anteriores, ele criou a sequência de Cubonacci, sendo que, a cada nova iteração, o número de cada parte de cada camada é atualizado com a soma da própria parte e de todas as partes adjacentes a essa. Seguindo o exemplo acima, o valor onde está o número 1, na próxima iteração, passará a ser 60, que é a soma de 1 + 2 + 4 + 5 + 10 + 11 + 13 + 14.";Primeiramente, é lido um valor C, representando a quantidade de casos de teste. Em cada caso de teste, será lido um valor N (1 ≤ N ≤ 9), representando a quantidade de iterações feitas na sequência de Cubonacci. Por fim, serão lidos 27 números inteiros Xi (0 ≤ Xi ≤ 9), representando os valores de cada parte de cada camada do cubo.;Para cada caso de teste, imprima os 27 valores finais do cubo, após todas as iterações determinadas pela sequência, conforme no exemplo abaixo.;True;5 / 10;59;33;55.93%
2587;Jetiqui;Strings;3;"Uma empresa de cosméticos, chamada Jetiqui, tinha um programa de televisão que premiava consultores e clientes. Este programa se chamava Gira a Roda. Neste programa, havia uma palavra secreta, e a cada rodada, a roda era girada, com vários prêmios, passa a vez e perde tudo. Se caísse no perde tudo, um participante perdia tudo que tinha arrecadado de premiação até o momento e passava a vez para outro participante. Se caísse no passa a vez, não perdia nada, mas passava a vez para outro participante tentar acertar a palavra secreta. Se caísse em algum prêmio de valor, o participante poderia dizer uma letra, e se esta fizesse parte da palavra secreta, apenas uma delas seria revelada. Ou seja, se a palavra fosse batata, teria que rodar 3 vezes e dizer a 3 vezes para revelar todos os A da palavra. Um dia, Pasqualito, com um grande
conhecimento sobre as palavras, foi participar deste programa. Sempre quando faltavam duas letras a serem reveladas, ele tinha um ótimo palpite, dentre duas possibilidades, qual seria a possível resposta. Ele queria saber se existia a possibilidade de arriscar uma letra que definisse qual das duas palavras seria a correta, pois não queria arriscar mais uma rodada, com receio de passar a vez. Por exemplo, a palavra exibida era _or_e, ou seja, a primeira e a penúltima letra não tinham sido reveladas ainda, e as duas palavras que ele achava eram sorte e torre. Neste caso, ele conseguiria sanar a dúvida dele, falando a letra T. Se a letra aparecesse no início, a palavra seria torre, se aparecesse na penúltima, a palavra seria sorte.

Escreva um programa que, dada a palavra incompleta e as duas possibilidades, diga se é possível que Pasqualito descubra a palavra certa na rodada atual.";A primeira linha contém um inteiro C representando a quantidade de casos de teste. Cada caso de teste possui três palavras, sendo as duas primeiras, as palavras que Pasqualito está em dúvida, e a terceira é a palavra incompleta. As palavras têm, no máximo, 15 letras.;Para cada caso de teste, imprima Y se for possível resolver a dúvida, ou N se não for possível.;False;3 / 10;643;369;57.39%
2588;Jogo dos Palíndromos;Strings;2;Rener era um garoto que adorava palíndromos. Tanto que inventou um jogo com estes. Dada uma sequência de letras, quantas mais teriam que ser adicionadas, pelo menos, de modo que alguma permutação desta sequência formasse um palíndromo. Por exemplo, batata precisa adicionar um b no final, para virar o palíndromo batatab. Em outro exemplo, aabb, não precisa adicionar nenhuma letra, pois se faz o palíndromo abba ou baab. Em mais um exemplo, abc precisa de duas letras a mais, para formar um palíndromo, que pode ser abcba, acbca, bacab, bcacb, cabac ou cbabc. Escreva um programa que, dada uma sequência de letras, informe qual é o mínimo de letras que precisam ser adicionadas à sequência, para que haja, pelo menos, um anagrama que forme um palíndromo.;Haverá diversos casos de teste. Em cada caso, é mostrada uma sequência de, no máximo, 1000 letras. Os casos de teste terminam com fim de arquivo.;Para cada caso de teste, imprima um valor inteiro, correspondente à quantidade mínima de letras a serem acrescentadas para que a sequência se torne um palíndromo, em uma de suas permutações.;False;2 / 10;861;426;49.48%
2589;Maior Distância Entre Primos Consecutivos;Matemática;9;"Distância entre primos se refere à diferença entre números primos consecutivos. Por exemplo, a distância entre os primos 7 e 11 é 4, assim como a distância entre os primos 23 e 29 é 6. O desafio é, dado um número, considerando todos os anteriores e o próprio número, qual é a maior distância entre primos consecutivos?

Escreva um programa que, dado um número, calcule a maior distância entre primos consecutivos.";Haverá diversos casos de teste. Cada caso de teste terá um número inteiro N (2 ≤ N ≤ 109). A entrada termina com fim de arquivo.;Para cada caso de teste, imprima a maior distância entre primos consecutivos, de 1 a N.;False;9 / 10;841;202;24.02%
2590;Sete;Ad-Hoc;8;Chagas é um menino que adora comer ovo cozido, porém odeia matemática. Ele detesta exponenciação e, por algum motivo, não calcula corretamente operações que envolvam o número 7. Sabendo disso, seu amigo Caco decidiu fazer um desafio: ele quer que Chagas calcule a N-ésima potência de 7 e diga o último dígito dessa potência. Se Chagas acertar todas as perguntas, ganharia 7 ovos cozidos. Por exemplo, sendo N=2, o resultado seria 9, pois 72 = 49. O problema é que, dependendo do valor de N, o resultado da exponenciação pode ser um número muito grande. Sem ideias, Chagas decidiu pedir sua ajuda. Escreva um programa que, dado um número, calcule o último dígito do valor de 7 elevado a esse número.;A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância é composta por apenas uma linha, que contém o número inteiro N (0 ≤ N ≤ 109).;Para cada instância na entrada, imprima uma linha contendo um inteiro, o último dígito de 7N.;False;8 / 10;3235;990;30.60%
2591;HameKameKa;Strings;2;"O Hamekameka foi inventado por Mestre Hame praticado por cinquenta anos antes de conhecer Kogu. Chamando sua energia latente nas palmas de suas mãos, Hame consegue lançar um raio explosivo de energia. Kogu aprende após ver Mestre Hame usando-o para apagar as chamas na casa de um Rei. Para a surpresa de Hame, Kogu consegue performar a técnica de primeira, embora seja apenas forte o suficiente para destruir o carro que Chamya deu para Mulba. Kogu descobriu que há um padrão na pronúncia correta deste ataque, de modo que, se não for pronunciado corretamente, o mesmo não acontece.

                Escreva um programa que, dada a parte inicial de um Hamekameka, faça a finalização ideal para que o ataque seja realizado com sucesso.";A entrada começa com um valor C, indicando a quantidade de casos de teste. Em seguida, temos C linhas, cada uma com o início de um ataque, com, no máximo, 200 letras.;Para cada caso de teste, imprima a finalização adequada, para que o ataque se concretize.;False;2 / 10;1003;639;63.71%
2592;VaiNaSort;Ad-Hoc;1;"O Professor Odracir Snitram estudava vários métodos de ordenação, assim como as suas respectivas complexidades. Um dia, ele resolve fazer um teste, criando um método, com uma caixa e N pedras, numeradas de 1 a N. A ideia era sortear todas as pedras, uma de cada vez, de modo que a sequência de números sorteados fosse exatamente de 1 a N, ou seja, sorteando o número 1 primeiro, depois o número 2, depois o 3, e assim sucessivamente, até sortear o último, que seria N. Após sortear tudo, caso a tentativa não desse certo, todas as pedras eram devolvidas na caixa, e o sorteio recomeçava até dar certo. Esse método foi nomeado de VaiNaSort!
Escreva um programa que, dada a quantidade de pedras, e de todas as tentativas até sortear corretamente, contabilize as tentativas.";A entrada possui vários casos de teste. Cada um começa com um número inteiro N (2 ≤ N ≤ 10000), representando a quantidade de pedras na caixa. Em seguida, haverá algumas tentativas de sorteio, cada uma formada com os números de 1 a N, em uma ordem qualquer, até se conseguir a ordem esperada. A entrada finaliza com N = 0.;Para cada caso de teste, imprima o total de tentativas.;False;1 / 10;603;444;73.63%
2593;Eachianos I;Estruturas e Bibliotecas;7;"Os eachianos estão muito preocupados com o texto que receberam do planeta vizinho. Eles desconfiam que existe um padrão no número que representa a posição das palavras presente no texto. Essas posições juntas, segundo eles, representam a senha para desativar a bomba que está prestes a destruir o planeta EACH.

Você então foi convocado para desenvolver um programa que recebe um texto e um conjunto de palavras (strings de busca) e deve retornar a primeira posição de cada palavra que está presente no texto.

Constraints:


	
	Palavra: pode conter apenas letras minúsculas do alfabeto ('a'-'z').
	
	
	Texto: pode conter apenas letras minúsculas do alfabeto ('a'-'z') separadas por um (e apenas um) espaço em branco. Texto não contém quebra de linha ('\n') e nem caracteres especiais.
	
	
	O tamanho das palavras nunca será maior que o tamanho do texto.
	
	
	Posição: você deve considerar que a primeira posição do texto deve ser a posição 0 (zero). Assim, em um texto com 50 caracteres, a última posição será a 49.
	
	
	Você deve procurar apenas as palavras exatas, NÃO VALE SUBPALAVRA. Por exemplo, a palavra AMAR é diferente de PROGRAMAR.";"A entrada contém, exatamente:


	
	Na primeira linha: O texto, que contém no mínimo 50 e no máximo 10.000 caracteres.
	
	
	Na segunda linha: A quantidade de palavras a serem lidas. Com no mínimo 1 e no máximo 128.
	
	
	Na terceira linha: As palavras separadas por espaço. Cada palavra terá no mínimo 2 e no máximo 50 caracteres.";Para cada palavra de busca deve ser impressa uma linha com a(s) posição(s) da primeira letra onde a palavra está localizada no texto. Lembre-se que a mesma palavra pode estar repetida no texto. Caso isso ocorra, as posições devem ser impressas uma na frente da outra, separadas por espaços em branco. Caso a palavra não esteja contida no texto, retorne -1 (número um negativo).;False;7 / 10;2850;537;18.84%
2594;Eachianos II;Estruturas e Bibliotecas;5;"A preocupação dos eachianos continua após descobrirem uma nova bomba e de receberem vários textos do planeta vizinho. Eles ainda desconfiam que existe um padrão no número que representa a posição das palavras presente no texto. Essas posições juntas, segundo eles, representam a senha para desativar a bomba que está prestes a destruir o planeta EACH.

Você então foi convocado para desenvolver um programa que recebe uma lista de pequenos textos seguidos de palavras (strings de busca) e deve retornar a primeira posição dessas palavras em cada texto.

Constraints:


	
	Palavra: pode conter apenas letras minúsculas do alfabeto ('a'-'z').
	
	
	Texto: pode conter apenas letras minúsculas do alfabeto ('a'-'z') separadas por um (e apenas um) espaço em branco. Texto não contém quebra de linha ('\n') e nem caracteres especiais.
	
	
	O tamanho das palavras nunca será maior que o tamanho do texto.
	
	
	Posição: você deve considerar que a primeira posição do texto deve ser a posição 0 (zero). Assim, em um texto com 50 caracteres, a última posição será a 49.
	
	
	Você deve procurar apenas as palavras exatas, NÃO VALE SUBPALAVRA. Por exemplo, a palavra AMAR é diferente de PROGRAMAR.";"A entrada contém, exatamente:


	
	Na primeira linha: A quantidade de textos (2 ≤ q ≤ 100.000) a serem lidos, que também será a mesma quantidade de palavras a serem buscadas em cada texto. Em outras palavras, será fornecida uma palavra para cada texto.
	
	
	Nas linhas seguintes, para cada entrada, o programa irá receber, consecutivamente:

	
		
		O texto de no mínimo 10 e no máximo 128 caracteres;
		
		
		A palavra a ser buscada. Cada palavra terá no mínimo 2 e no máximo 128 caracteres. Uma palavra nunca será maior que o texto.";Para cada par (texto/palavra de busca), deve ser impressa uma linha com a lista das posições da primeira letra onde a palavra está localizada no respectivo texto. Lembre-se que a mesma palavra pode estar repetida no texto. Caso isto ocorra, as posições devem ser impressas uma na frente da outra, separadas por espaços. Caso a palavra não esteja contida no texto, retorne -1 (número um negativo).;False;5 / 10;1985;569;28.66%
2595;Cash Roial;Ad-Hoc;6;"Cash Róial é um jogo mobile muito popular, que está disponível para os celulares Ciborgue e AOS (Aifone OS). O jogo é disputado por dois jogadores, que invocam tropas em uma arena com objetivo de derrotar o oponente.

Irineu gosta muito de jogar Cash Róial, mas atualmente ele não tem conseguido muitas vitórias, então ele pediu sua ajuda. Irineu sabe como está a arena neste exato momento, ele quer invocar uma tropa na posição (X,Y) e saber se ela será derrotada ou não. Uma tropa é derrotada se nas posições adjacentes houver pelo menos cinco tropas inimigas.

A posição no canto superior esquerdo representa as coordenadas (1,1) e a posição no canto inferior direito representa as coordenadas (N,M).

Sua tarefa é responder às perguntas de Irineu.";"A primeira linha de entrada contém um inteiro C que indica a quantidade de casos de teste.
                    A primeira linha de cada caso de teste contém três números inteiros N, M e P, indicando respectivamente o número de linhas, o número de colunas da arena e o número de perguntas. Cada uma das N linhas seguintes da entrada descreve uma linha de células da arena e contém uma cadeia com M caracteres. As próximas P linhas contém dois inteiros X,Y indicando o local que Irineu quer colocar uma tropa.

Cada célula da arena pode conter um dos seguintes caracteres:

‘.’ — célula vazia.

'T' — célula que contém uma tropa inimiga.

(1 ≤ N ≤ 1000)

(1 ≤  M ≤  1000)

(1 ≤  P ≤  1000)

(1 ≤  X ≤ N)

(1 ≤  Y ≤  M)";"Para cada pergunta de Irineu, escreva ""GG IZI"" se a tropa vai viver e ""GRRR"" caso contrário.";False;6 / 10;262;127;48.47%
2596;Xenlonguinho;Matemática;1;"Kogu está buscando as esferas do dragão para invocar Xenlonguinho e pedir para ele reviver seu amigo Kuriri, que infelizmente morreu na última batalha dos guerreiros Zê.

Porém Kogu está tendo muita dificuldade para encontrar as esferas, por isso Xenlonguinho que é seu conhecido há muito tempo, decidiu abrir uma exceção e aceitou ser invocado caso Kogu encontre todas as esferas cujo o número de divisores da quantidade de estrelas da esfera sejam par.

Por exemplo se existem sete esferas, Kogu não precisaria encontrar as esferas de uma e quatro estrelas, pois elas tem uma quantidade ímpar de divisores, então ele só precisa pegar 5 esferas para invocar Xenlonguinho.



Como Kogu não é muito bom em contas, ele pediu para você escrever um programa que dado o total de esferas existentes, mostre a quantidade mínima de esferas que ele precisa procurar.";A primeira linha consiste de um inteiro C que representa a quantidade de casos de teste. As linhas subsequentes contém um inteiro N  (2 ≤ N ≤ 1000)  que representa a quantidade de esferas necessárias para invocar Xenlonguinho.;Seu programa deve exibir a quantidade mínima de esferas que Kogu tem que procurar.;True;1 / 10;960;571;59.48%
2597;Xenlongão;Matemática;6;"Kogu está buscando as esferas do dragão para invocar Xenlongão e pedir para ele reviver seu amigo Kuriri, que infelizmente morreu de novo na última batalha dos guerreiros Zê.

Porém Kogu está tendo muita dificuldade para encontrar as esferas, por isso Xenlongão que é seu conhecido há muito tempo, decidiu abrir uma exceção e aceitou ser invocado caso Kogu encontre todas as esferas cujo o número de divisores da quantidade de estrelas da esfera sejam par.

Por exemplo se existem sete esferas, Kogu não precisaria encontrar as esferas de uma e quatro estrelas, pois elas tem uma quantidade ímpar de divisores, então ele só precisa pegar 5 esferas para invocar Xenlongão.



Como Kogu não é muito bom em contas, ele pediu para você escrever um programa que dado o total de esferas existentes, mostre a quantidade mínima de esferas que ele precisa procurar.";A primeira linha consiste de um inteiro C que representa a quantidade de casos de teste. As linhas subsequentes contém um inteiro N (2 ≤ N ≤ 109) que representa a quantidade de esferas necessárias para invocar Xenlongão.;Seu programa deve exibir a quantidade mínima de esferas que Kogu tem que procurar.;True;6 / 10;391;160;40.92%
2598;Colocando Radares;Matemática;1;"O governo da Taxilândia está enfrentando um enorme problema, os taxilandenses amam carros e velocidade, por isso estão correndo muito nas avenidas da cidade. Para amenizar esse problema o governo vai instalar radares nas avenidas, de modo que cada trecho seja coberto por pelo menos um radar. É importante saber que um radar cobre M quilômetros contíguos da avenida.

Você foi contratado pelo governo para fazer um programa que dado o comprimento da avenida e a área de cobertura do radar, informe a quantidade mínima de radares necessários para cobrir a avenida.

A imagem abaixo mostra uma avenida de tamanho 15 quilômetros e radares com cobertura de 4 quilômetros, cada cor representa um radar, então é possível notar que a quantidade mínima de radares necessários para cobrir a avenida é 4.";"A primeira linha consiste em um inteiro C que representa a quantidade de casos de teste. Cada caso de teste é composto por dois inteiros N e M que indicam o tamanho da avenida e a área de cobertura do radar.

(1 ≤ N ≤ 109)

(1 ≤ M ≤ 109)";Seu programa deve exibir a menor quantidade de radares necessários para cobrir toda avenida.;True;1 / 10;1389;889;64.00%
2599;Contando Radares;Paradigmas;8;"O governo da Taxilândia está enfrentando um enorme problema, os taxilandenses amam carros e velocidade, por isso estão correndo muito nas avenidas da cidade. Para amenizar esse problema o governo vai instalar radares nas avenidas, de modo que cada trecho seja coberto por um radar. A empresa que o governo contratou possui M tipos de radares disponíveis sendo que cada um cobre Mi kilometros contíguos da avenida.

                Você foi contratado pelo governo para fazer um programa que dado o comprimento da avenida e a área de cobertura dos radares, informe de quantas maneiras distintas é possível colocar os radares na avenida de modo que ela fique totalmente preenchida.

                A imagem abaixo mostra uma avenida de tamanho 4 quilômetros e radares com cobertura de 3 e 2 quilômetros, cada cor representa um radar, então é possível notar que a quantidade distintas de cobrir a avenida são 4.";"A primeira linha da entrada é composta por um inteiro C que indica a quantidade de casos de teste. A primeira linha de cada caso de teste é composta por dois inteiros N e M que indicam o tamanho da avenida e quantos tamanhos de radares disponíveis existem no mercado. A segunda linha é composta por M inteiros que representa o tamanho dos radares disponíveis

                    (1 ≤ N ≤ 104)

                    (1 ≤ M ≤ 103)

                    (1 ≤ Mi ≤ N)";Seu programa deve exibir a quantidade de maneiras distintas de cobrir toda a avenida. Como o resultado pode ser muito grande imprima a resposta módulo 1000000007.;True;8 / 10;459;162;35.29%
2600;Tustin e Seu Dado Novo;Ad-Hoc;5;"Tustin, Nike, Jucas e Uill vão jogar um famoso jogo de RPG, o T&T (Tatus e Taturanas). Como todo bom jogo de RPG, os dados são uma parte extremamente importante.

O T&T joga-se com dados de seis faces. Antes de começarem o jogo, Tustin foi a uma loja para comprar um dado da sorte, já que o seu antigo foi devorado pelo Temogorgon.

Tustin é muito criterioso, e para seu dado da sorte ele escolhe somente dados clássicos.

Um dado clássico é um dado de seis faces que possui todos os números de 1 a 6, e a soma de duas faces opostas é sempre 7. Ou seja, se de um lado temos o número 1 automaticamente teríamos o número 6 do outro lado.

Na figura abaixo é dado um exemplo de dado clássico. Sua tarefa é verificar se o dado que Tustin comprou é realmente um dado clássico.";A primeira linha de contém um valor Nque indica o número de casos de teste. Cada caso de teste consiste de  em seis inteiros Di (0 <= Di <= 105) representando o valor de cada face do dado. Os números serão dados em três linhas, que representam a planificação do dado, assim como na figura acima.;"Para cada caso de teste, seu programa deverá exibir ""SIM"" caso Tustin tenha comprado um dado clássico, e ""NAO"" caso contrário.";True;5 / 10;2277;569;24.99%
2601;Tustin e Seu Dado Antigo;Ad-Hoc;6;"Depois que Tustin comprou seu dado novo ele, Nike, Jucas e Uill jogaram muito o RPG T&T (Tatus e Taturanas).

Como todo mundo sabe, Tustin sempre usa seu dado da sorte, um dado clássico de seis faces que possui todos os números de 1 a 6, e a soma de duas faces opostas é sempre 7.

Mas o dado da sorte de Tustin foi tão usado que os números de algumas faces sumiram, e por isso ele quer preenchê-lo de forma que o dado volte a ser clássico.



Sua tarefa é contar de quantas maneiras distintas o dado de Tustin pode ser preenchido.";"A primeira linha consiste de um inteiro C que representa a quantidade de casos de teste. Cada caso de teste consiste em três linhas, que representam a planificação do dado, assim como na figura acima.  Cada face será indicada por um número  N ou por '*' que representa uma face apagada.

(1 <= N <= 6 )";Seu programa deverá exibir de quantas formas distintas o dado pode ser preenchido.;True;6 / 10;244;86;35.25%
2626;Turma do JB6;Iniciante;5;"Dodô, Leo e Pepper passam várias madrugadas conversando, em algum lugar do Condomínio Jardim Botânico IV. Diversos assuntos astrais ganham pauta nestas conversas homéricas. Nas últimas sessões, Dodô tem falado do jogo de RPG que ele e Leo estão inventando, Leo (para “variar”, mas com razão) tem falado do gênero musical heavy metal e Pepper ficou fascinado com a história da mitologia grega contada por Leo.
				
				
					Os garotos resolveram adotar uma estratégia para dividir as sessões igualmente entre os assuntos, de modo que eles possam especular cada um ao máximo e chegarem a conclusões astronômicas. Eles irão jogar “pedra, papel e tesoura” para decidir o assunto da sessão de hoje, e então irão alternar os assuntos nas próximas sessões. Dadas as jogadas de Dodô, Leo e Pepper, nesta ordem, você deve determinar o assunto da sessão de hoje.";A entrada é composta por vários casos de teste e termina com fim de arquivo. Cada caso de teste é composto por uma única linha, que contém as jogadas de cada um dos garotos, como mostrado nos exemplos.;"Para cada caso de teste, imprima uma única linha com a mensagem ""Os atributos dos monstros vao ser inteligencia, sabedoria..."" para indicar que Dodô é o vencedor, a mensagem ""Iron Maiden’s gonna get you, no matter how far!"" para indicar que Leo é o vencedor, a mensagem ""Urano perdeu algo muito precioso..."" para indicar que Pepper é o vencedor, ou a mensagem ""Putz vei, o Leo ta demorando muito pra jogar..."" se houver empate.";False;5 / 10;1505;484;32.16%
2627;Bonde de Autômatos;Ad-Hoc;10;"O bonde de Autômatos e Computabilidade costuma sair da aula ás dezoito horas. Após aprenderem tantas teorias e resultados deste belíssimo aprimoramento da Matemática que é a Ciência da Computação. Ciro Minino, Hermanoteu, Jonny, Zezinho, Baiano e Pimenta Filosofal gostam de andar pelos belos campos elísios da UnB, para relaxarem e refletirem. À medida que o tempo passa, a conversa vai ficando cada vez mais profunda e abstrata.
				
				
					Hoje, Hermanoteu ficou insatisfeito com a solução cômoda que o professor deu para um problema, com uma simples máquina de Turing não-determinística. O problema é decidir se uma cadeia de comprimento N possui uma subcadeia ordenada de pontuação no mínimo K, onde: 1) uma subcadeia é obtida removendo zero ou mais símbolos de uma cadeia; e 2) a pontuação de uma cadeia é a soma das pontuações de seus símbolos. A pontuação do símbolo ‘a’ é 26, a pontuação do símbolo ‘b’ é 25, ... e a pontuação do símbolo ‘z’ é 1.";A entrada é composta por vários casos de teste e termina com fim de arquivo. A primeira linha de um caso de teste é composta pelo inteiros N (1 ≤ N ≤ 105) e K (1 ≤ K ≤ 26*105). A segunda linha contém a cadeia de comprimento N, com apenas letras minúsculas.;"Para cada caso de teste, imprima uma única linha com a mensagem ""Aceita"" se existe uma subcadeia que satisfaz a propriedade pedida, ou ""Rejeita"" em caso contrário.";False;10 / 10;424;60;14.15%
2628;Caça ao Tesouro;Ad-Hoc;10;"O arquipélago da Nlogônia é formado por ilhas inabitadas e mal assombradas. Cada ilha possui um pequeno cais e N cavernas que são acessadas exclusivamente por M trilhas secretas. Em tempos passados, elas eram usadas por piratas para abrigar joias, bebidas e mercadorias obtidas após saques em cidades e navios. Com o fim dessa era, acredita-se que existam tesouros perdidos em algumas ilhas.
				
				
					Por questões de segurança, os piratas tinham um método bem curioso para guardar seus pertences. Para esconder um tesouro, escolhia-se uma única ilha. Em primeiro lugar, calculava-se a área de cada caverna. Por acreditarem que números primos traziam sorte, selecionava-se apenas cavernas cujo valor da área também fosse um número primo, totalizando K cavernas. Enfim, o tesouro era dividido em K partes iguais e distribuído ao longo das cavernas selecionadas.
				
				
					Após vasculhar destro¸cos de um antigo navio pirata, Rafael encontrou mapas descrevendo algumas ilhas onde possivelmente tesouros foram escondidos. Como Rafael reprovou a disciplina de algoritmos, ele pediu sua ajuda para escrever um programa em que dadas as características de uma ilha, determine o menor tempo possível para sair do cais, recolher o tesouro, ou seja, passar por todas as cavernas que contém partes do tesouro e em seguida, retornar ao cais.";A entrada é composta por vários casos de teste. A primeira linha de um caso de teste possui dois inteiros N e M (1 ≤ N ≤ 100, 1 ≤ M ≤ N(N −1)/2), representando, respectivamente, o número de cavernas de um ilha e a quantidade de trilhas secretas. A segunda linha é composta por N inteiros, onde o i-ésimo número Xi representa a área da i-ésima caverna (1 ≤ Xi ≤ 105). Você pode assumir que haverá entre 1 e 15 números primos. Portanto, 1 ≤ K ≤ 15. As próximas M linhas possuem três inteiros A, B e C (1 ≤ A, B ≤ N + 1, A != B e 1 ≤ C ≤ 1000) indicando que existe uma trilha secreta entre as cavernas A e B e que são gastos C minutos para completar o trajeto. O valor N + 1 representa o cais da ilha, portanto, quando A ou B for igual N + 1 significa que existe uma trilha entre o cais e uma das cavernas. Você pode assumir que sempre será possível percorrer um caminho entre qualquer par de cavernas, ou entre o cais e qualquer caverna.;Para cada caso de teste imprima o valor que representa, em minutos, o menor tempo possível para Rafael sair do cais da ilha, recolher o tesouro e retornar ao cais. Você deve desprezar o tempo gasto por Rafael para pegar parte do tesouro e atravessar uma caverna.;False;10 / 10;150;35;23.33%
2629;Rodoido;Ad-Hoc;3;Rodoido tem uma banda cover de Arctic Monkeys e faz muitos shows em Brasília. A banda se apresenta em diversos locais, como Velvet Pub, Amsterdam Street e Stadt Bier. Isto, no entanto, atrapalha Pimenta a assistir todos os shows! Ele nunca sabe qual é o próximo local onde o Yellow Shoes irá se apresentar. Para resolver este problema, Pimenta resolveu coletar dados das apresentações e fazer estimativas. Ele conseguiu calcular a probabilidade do próximo show ser no local j, dado que o último show foi no local i. No entanto, ele não está conseguindo calcular a probabilidade do K-ésimo show ser no local j, dado que o show inicial foi no local i, e pediu a sua ajuda para realizar esta tarefa.;A entrada é composta por vários casos de teste e termina com fim de arquivo. A primeira linha de um caso de teste contém um inteiro N (1 ≤ N ≤ 5), que é o número de locais onde o Yellow Shows pode se apresentar. Os locais são rotulados de 1 a N. Em seguida virão N linhas, cada uma com N números. O i-ésimo número da j-ésima linha é a probabilidade do próximo show ser no local j, dado que o último show foi no local i. A próxima linha contém um único inteiro Q (1 ≤ Q ≤ 100), o número de consultas que Pimenta irá fazer. Cada uma das próximas Q linhas contém os inteiros i, j e K (1 ≤ K ≤ 106) de uma consulta.;Para cada consulta de cada caso de teste, imprima uma linha com a probabilidade pedida, com seis casas decimais.;False;3 / 10;85;57;67.06%
2630;Escala de Cinza;Iniciante;4;"Alguns algoritmos de processamento de imagem exigem um pré-processamento no qual é necessário transformar uma imagem colorida em uma imagem em tons de cinza. Esta conversão pode ser realizada de diversas maneiras, dependendo do resultado que se pretende obter.
				
				
					Para preservar a percepção das cores básicas pelo olho humano, uma conversão apropriada seria tomar 30% da componente vermelha (R), 59% da componente verde (G) e 11% da componente azul (B). Em termos matemáticos,
				
				P = 0, 30R + 0, 59G + 0, 11B

				
					Outras abordagens possíveis seriam determinar o valor de P através da média aritmética das três componentes ou atribuir a P os valores da maior ou da menor entre as três componentes.
				

				
					Dadas as componentes RGB de um pixel da imagem colorida, determine o valor do pixel P da imagem em tons de cinza correspondente, determinada a conversão a ser utilizada. Despreze a parte decimal do resultado, caso exista.";"A entrada em T (1 ≤ T ≤ 100) casos de teste, onde o valor de T é dado na primeira linha da entrada. Cada caso de teste é composto por duas linhas: a primeira linha contém a conversão a ser utilizada: eye
para a primeira abordagem descrita, mean para a média aritmética, max para o valor da maior componente e min para o valor da menor componente. A segunda linha contém os valores R, G, B (0 ≤ R, G, B ≤ 255) do pixel da imagem colorida.";"Para cada caso de testes dever ser impressa a seguinte mensagem ""Caso #t: P"", onde P é o nível de cinza do pixel da imagem em tons de cinza após a conversão do pixel da imagem colorida. Esta mensagem deve ser seguida de uma quebra de linha.";False;4 / 10;2456;1077;43.85%
2631;Formando Duplas;Iniciante;9;"Roberto é um dos grandes professores que compõem o corpo docente da universidade de sua cidade. Treinar seus alunos para a maratona de programação é uma de suas maiores paixões, apesar de ser uma tarefa bem difícil. Felizmente, neste semestre, vários alunos se inscreveram para sua disciplina de programação competitiva.
				
				
					Para treinar seus alunos, Roberto costuma aplicar testes e provas regularmente, onde sempre divide sua turma em diferentes duplas, já que neste ano, as equipes da maratona de programação serão formadas por apenas dois integrantes.
				
				
					Ao longo do semestre, analisando os resultados das avaliações e o comportamento dos estudantes em sala de aula, Roberto percebeu que se os alunos escolhidos para formar uma dupla não têm afinidade, o desempenho da equipe é bem inferior em relação às duplas formadas por alunos que apresentam tal comportamento. Podemos dizer que dois estudantes A e B possuem afinidade caso pertençam ao mesmo grupo de amigos, ou seja, caso possuam uma relação direta de amizade, ou se é possível escrever uma sequência de alunos X1, X2, X3, ... , XN , onde para todo i < N exista uma relação direta de amizade entre os alunos Xi e Xi+1, com X1 = A e XN = B.
				
				
					A maratona de programação se aproxima e Roberto decidiu que montará duplas compostas apenas por alunos que possuem afinidade. Desta forma, as equipes de sua universidade serão mais competitivas, aumentando as chances de classificação para a próxima fase. Como a turma está abarrotada de alunos, ele pediu para você escrever um programa em que dadas as relações de amizades entre os alunos e uma série de consultas indicando dois estudantes, determine para cada consulta se é possível montar uma dupla com estes dois alunos.";A entrada é composta por vários casos de teste. A primeira linha de um caso de teste possui três inteiros N, M e Q (2 ≤ N ≤ 104, 0 ≤ M ≤ 105, 1 ≤ Q ≤ 103), representando, respectivamente, o número de alunos, as relações de amizade entre os estudantes e o número de consultas. As próximas M linhas possuem dois inteiros X e Y (1 ≤ X, Y ≤ N e X != Y) indicando que o aluno X tem uma relação direta de amizade com o aluno Y. Em seguida, cada uma das próximas Q linhas descreve uma consulta com dois inteiros A e B (1 ≤ A, B ≤ N e A != B), indicando os estudantes de uma possível equipe.;Para cada caso de teste imprima Q linhas, onde a i-ésima linha é a resposta para a i-ésima consulta. Se for possível montar uma dupla com os estudantes indicados na consulta imprima o caractere ‘S’, caso contrário imprima o caractere ‘N’. Imprima uma linha em branco ao final de cada caso de teste.;False;9 / 10;1355;173;12.77%
2632;Magic and Sword;Iniciante;7;"No tower defense Magic and Sword, o jogador pode lançar magias de área para derrotar as unidades inimigas. As magias são elementais: fogo, água, ar e terra, e a região afetada é determinada por um círculo cujo raio depende do nível da magia.
				
				
					A tabela abaixo lista cada magia, o dano e o respectivo raio por nível:
				
					 

				
					As unidades inimigas são delimitadas por um retângulo de largura w e altura h, com canto inferior esquerdo posicionado no ponto (x0, y0). O inimigo sofrerá dano caso seu retângulo delimitador tenha qualquer intercessão com a área deﬁnida pelo círculo da magia.
				
				
					Dada a posição e o retângulo delimitador da unidade inimiga, o centro da explosão e o identiﬁcador e o nível da magia, determine o dano sofrido pela unidade. Caso a unidade esteja fora do alcance da magia, o dano sofrido é igual a zero.";A entrada consiste em T (1 ≤ T ≤ 1000) casos de teste, onde o valor de T é informado na primeira linha da entrada. Cada caso de teste é composto por duas linhas. A primeira contém quatro número inteiros que repre-sentam as dimensões w e h (1 ≤ w, h ≤ 1000) do retângulo e as coordenadas x0 e y0 (0 ≤ x0, y0 ≤ 1000) do canto inferior esquerdo. A segunda linha do caso de teste contém uma string com o identiﬁcador da magia (ﬁre para fogo, water para água, earth para terra e air para ar), o nível N desta magia (1 ≤ N ≤ 3) e as coordenadas cx e cy (0 ≤ cx, cy ≤ 1000) do centro da área da explosão.;Para cada caso de teste, a saída deve ser o valor do dano recebido pela unidade, seguido de uma quebra de linha.;True;7 / 10;515;128;24.85%
2633;Churras no Yuri;Iniciante;3;"Yuri é um bom companheiro. Sempre fazemos o churras dos “manos ;)” na casa dele! Desta vez, o motivo do churrasco é que os manos estão ﬁnalmente começando a passar em bons concursos! Então, hoje teremos aquela edição especial do churras, with alcohol and futebol de sabão!
				
				
					A empresa do futebol de sabão está demorando para encher o campo e Yuri, já entendiado, começou a viajar na seguinte pergunta: se assássemos as carnes por ordem da data de validade, qual seria a sequência de peças de carne resultante? Como o MacBook de Yuri está muito longe (e a preguiça está muito perto), ele pediu a sua ajuda para responder esta pergunta.";A entrada é composta por vários casos de teste e termina com ﬁm de arquivo. A primeira linha de um caso de teste contém um inteiro N (0 ≤ N ≤ 10), que é o número de peças de carne do churrasco de hoje. Em seguida virão N linhas, cada uma com uma cadeia de no máximo 20 caracteres, com apenas caracteres de ‘a’ a ‘z’, e um inteiro Di (0 ≤ Di ≤ 50) que representa a data de validade da i-ésima peça. Yuri resolveu colaborar e calcular ao menos este número Di de dias até a data de validade, a partir de hoje, de cada peça de carne. É garantido que se i != j, então Di != Dj .;Para cada caso de teste, imprima uma única linha com a sequência de peças de carne que Yuri quer calcular. Cada peça deve estar separada por um único espaço.;False;3 / 10;1969;928;47.13%
2634;Em Prol da Ciência;Ad-Hoc;9;"Um grupo de cientistas vem mantendo uma pesquisa abrangente sobre o comportamento de bactérias, mais especificamente seu ciclo de reprodução e evolução.
                
                    
                    Os dados estavam registrados por semanas, e a cada semana era realizada uma série de experimentos para determinar uma matriz de transição At , de dimensões 2 x 2, de modo que as informações do vetor ut da semana t pudesse se computado através da expressão ut= At ut-1, sendo o valor inicial u 0 conhecido. Contudo, às vésperas da publicação deste resultados em uma importante revista cientı́fica, uma descarga elétrica corrompeu os discos rı́gidos onde estavam armazenadas as matrizes!
				
				
					A equipe começou um árduo trabalho de tentar recuperar tais informações em tempo hábil. Logo ficou claro que algumas das matrizes recuperadas tinham determinante igual a zero, o que apontava que os dados estavam corrompidos, pois todas as matrizes de transição devem ter determinante não nulo.
				
				
				    Auxilie a equipe escrevendo um software que, dadas as matrizes de transição recuperadas de N semanas, permita:
				
				
				    1. Saber se todas as matrizes de um intervalo de tempo estão consistentes ou se há alguma matriz corrompida;
                    2. Atualizar a matriz A t de uma determinada semana;
                    3. Determinar o maior intervalo de tempo onde todas as matrizes consecutivas são consistentes.";"A entrada consiste em T (1 ≤ T ≤ 10) casos de teste, onde o valor de T é dado na primeira linha da entrada. Cada caso de teste é representado por várias linhas: a primeira linha contém a semana w (1 ≤ w ≤ 52) e o ano y (1 ≤ y ≤ 2015) onde o experimento teve inı́cio (isto é, onde foi feito o primeiro registro). Considere, para este problema, que cada ano é composto de exatamente 52 semanas. A segunda linha contém o número N (1 ≤ N ≤ 105) de semanas consecutivas que tiveram matrizes de transição registradas. As N linhas seguintes contém, cada uma, quatro valores inteiros a11 , a12 , a21 , a22 (−100 ≤ aij ≤ 100), representando os coeficientes de transição da matriz At (1 ≤ t ≤ N). Em seguida, há uma linha com o número M (1 ≤ M ≤ 105) comandos a serem executados. As M linhas seguintes contém os comandos, seguindo a formatação a seguir:
				    
				        1. “Q a b”, com 1 ≤ a ≤ b ≤ N, onde a e b são os números da semana inicial e final do intervalo que deve ser consultado com o intuito de verificar se há ou não matrizes corrompidas neste intervalo;
                        2. “Ut a11 a12 a21 a22”, com 1 ≤ t ≤ N, onde t é o número da semana que deve ter a matriz substituı́da pela matriz com os coeficientes a ii dados nesta linha;
                        3. “M”, que é o comando que retorna o maior intervalo de tempo onde todas as matrizes consecutivas do intervalo são consistentes (isto é, tem determinante diferente de zero).
				    
				
				
				Observação: haverão no máximo 103 comandos do tipo ‘M’.";"Para cada caso de teste deve ser impressa a mensagem “Experimento #e:”, seguida de uma quebra de linha, onde e é o número do caso de teste (cuja contagem tem inı́cio com o número um). Para cada comando Q deve ser impressa uma linha com a mensagem “w1/y1 a w2/y2"": dados consistentes"" ou “w1/y1 a w2/y2: dados corrompidos”, onde w1, w2 representam as semanas (com dois dı́gitos e com zeros à esquerda, se necessário) e y1, y2 representam os anos (com quatro dı́gitos e com zeros à esquerda, se necessário) do intervalo solicitado. Para cada comando M a mensagem deve ser “Maior periodo consistente: w1/y1 a w2/y2”. Cada mensagem associada a um comando deve estar em uma única linha e dois casos de teste sucessivos devem estar separados por uma linha em branco.";False;9 / 10;84;13;15.48%
2635;Navegador Web;Iniciante;4;"Lucas é um rapaz bem radical quando o assunto envolve licenças de software. Desde que começou sua graduação em engenharia da computação, ele procura desenvolver todas as ferramentas que necessita. Tudo isso começou após experiências ruins ao utilizar softwares proprietários. Agora, ele acredita que um programador de verdade deve ser autossuficiente, ou seja, deve construir todos os programas que precisa, desde uma simples calculadora até seu próprio sistema operacional.
				
				
					Este semestre, Lucas está cursando a disciplina de desenvolvimento de sistemas web. Para continuar sua filosofia de vida,  utilizando apenas softwares construı́dos por ele mesmo, Lucas já está programando seu próprio web browser. Grande parte do trabalho foi concluı́da, porém algumas funcionalidades ainda precisam ser finalizadas.
				
				
				O navegador de Lucas possui um campo de busca onde o usuário poderá inserir uma palavra chave, e ao clicar em um botão de confirmação, ele será redirecionado para outra página com os resultados de sua pesquisa. Quando alguma string for digitada no campo de busca, Lucas quer que seu programa exiba, logo abaixo, algumas opções para auto completar esta string de acordo com as buscas já realizadas pelo usuário.
				
				
				    Por exemplo, se as palavras “algoritmos” e “algas” já foram pesquisadas, ao digitar a string “alg”, o programa deverá sugerir as palavras “algoritmos” e “algas”. Portanto, para cada string digitada, o programa deverá sugerir palavras pesquisadas anteriormente e que possuem como prefixo esta string. Caso alguma palavra seja igual a string digitada, ela também deve ser sugerida.
				
				
				    Lucas está preocupado com a quantidade de palavras que seu programa pode sugerir, além do tamanho máximo que elas podem alcançar. Por isso, ele pediu que você o ajude escrevendo um programa em que dadas algumas palavras já pesquisadas e uma série de consultas compostas por uma string, indique quantas palavras o navegador deverá sugerir ao usuário, além do comprimento da maior dessas palavras.";A entrada é composta por vários casos de teste. A primeira linha de um caso de teste possui um inteiro N (1 ≤ N ≤ 104 ) indicando o número de palavras que já foram pesquisadas pelo programa de Lucas. Cada uma das próximas N linhas contém uma string não vazia de no máximo 100 letras minúsculas [a − z]. Para cada caso de teste, as N palavras são diferentes. Em seguida, haverá um inteiro Q (1 ≤ Q ≤ 100) indicando o número de consultas. Cada uma das próximas Q linhas descreve uma consulta com uma string não vazia de no máximo 100 letras minúsculas [a − z], representando uma string digitada no campo de busca.;Para cada caso de teste imprima Q linhas, onde a i-ésima linha é a resposta para a i-ésima consulta. A resposta de cada consulta deverá ser composta por dois inteiros separados por espaço, representando, respectivamente, o número de palavradas sugeridas pelo programa ao digitar a string indicada pela i-ésima consulta, e o comprimento da maior palavra contida nesse subconjunto. Caso nenhuma palavra seja sugerida, imprima -1. Imprima uma linha em branco ao final de cada caso de teste.;False;4 / 10;428;235;54.91%
2636;3-RSA;Iniciante;7;"Pedro, assim como muitos outros estudantes de graduação, ficou fascinado com a beleza e sofisticação da criptografia. Começou a ler referências históricas, estudar os principais algoritmos e a buscar artigos e reportagens que abordassem o tema sob os mais diferentes aspectos.
				
				
					Contudo, o grande volume de informações adquiridas num curto espaço de tempo o levou a alguns questionamentos e temores. Preocupado com a computação quântica, que em teoria inutilizaria a criptografia RSA, e motivado pela história do algoritmo DES, que teve uma evolução mais segura denominada 3DES, ele resolveu propôr uma versão mais segura do RSA, denominada 3-RSA.
				
				
				    No 3-RSA, o módulo n, composto no algoritmo original por dois números primos ı́mpares distintos, seria agora composto por 3 primos ı́mpares distintos! Pedro estava certo que esta modificação traria maior dificuldade de quebra do algoritmo, uma vez que os atacantes agora teriam que encontrar 3 fatores de n, e não apenas 2.
				
				
				
				    Sabendo que, em criptografia, às vezes menos é mais, e disposto a mostrar ao motivado e bem intencionado Pedro que a modificação proposta, de fato, enfraquece o RSA, fatore o módulo n do algoritmo 3-RSA, exibindo seus três fatores primos.";A entrada consiste em uma série de casos de teste. Cada teste é representado por uma única linha, contém o inteiro n (105 ≤ n ≤ 1018), o que representa o módulo do algoritmo 3-RSA. A entrada termina com o valor n = 0, o qual não deve ser processado.;Para cada caso de teste deve ser impressa uma linha contendo a mensagem ’n = p x q x r’, onde p, q, r são os fatores primos de n, com 3 ≤ p x q x r.;False;7 / 10;991;278;28.05%
2637;Casa do Batera;Grafos;10;"A casa do Batera é um lugar onde muita coisa acontece. É lá que surgem ideias como “bora pra chapada, neném?? — Dudu”. É também um lugar onde muita gı́ria jovem é usada, como “pô deivis, mas bem que seria bom...”, ou “beeeeeem...”. E é também onde muitos apelidos são criados, como “Pimenta Filosofal”, “Pai Alan”, “Jonny Boy”, “Pimenta Marinho” e o melhor apelido de todos: “João Henrique”.
				
				
					A rapaziada está jogando o RPG inventando por Dôdo e Leo. O jogo consiste em capturar monstros, treiná-los e usá-los em batalhas. Neste momento, estamos entrando em uma mapa em que há diversos locais “neutros”, rotulados de 1 a V . Em cada local, é possı́vel que haja uma moeda e/ou uma alavanca. Sempre que passamos por um local com uma moeda, coletamos a moeda, e não aparece outra moeda no mesmo local se voltarmos a ele mais tarde. Sempre que passamos por um local com uma alavanca, acionamos a alavanca, e nunca mais precisamos acioná-la novamente. Cada alavanca abre um conjunto de caminhos que conectam pares de locais neutros. Alguns caminhos já estão inicialmente abertos. Para atravessar cada caminho, precisamos derrotar (ou capturar, se quisermos nos tornar mestres) os monstros que aparecem neste caminho. Monstros sempre surgem ao atravessar qualquer caminho, então sempre é preciso derrotá-los, mesmo passando por um caminho que já atravessamos antes. Para derrotar um monstro, usamos os monstros que já capturamos. Nossos monstros possuem uma lista de M ataques, cada um com um custo de mana e um valor de dano que é causado ao monstro alvo. Estamos no local 1 e a saı́da do mapa está no local V . O local 1 não contém moeda ou alavanca.
				
				
				    Como este é um jogo sério, que tem que ser levado a sério, João Henrique, que virou fã da teoria dos grafos após cursar a disciplina do Professor Claus, está tentando otimizar a nossa travessia. Ele pediu a sua ajuda para calcular o custo mı́nimo (de mana) necessário para realizar a travessia, coletando todas as moedas e... não capturando nenhum monstro (pô Jonny, tá achando que o balão é esférico e sem atrito? É assim que você quer se tornar um mestre capturador de monstros, João Henrique?).";A entrada é composta por vários casos de teste e termina com fim de arquivo. A primeira linha de um caso de teste contém os inteiros M, V, E, C, e L. Cada uma das próximas M linhas descreve um ataque. Cada linha é composta pelos inteiros v e w, que são respectivamente o dano causado pelo ataque e o custo de mana do ataque. Cada uma das próximas E linhas descreve um caminho. Cada linha é iniciada com quatro inteiros a, b, m, and l. O caminho conecta os locais a e b. Os próximos m inteiros são os pontos de vida h de cada um dos m monstros que aparecem no caminho. Se o inteiro l for zero, então o caminho está inicialmente aberto. Caso contrário, ele é liberado pela alavanca de rótulo l. Há no máximo um caminho conectando um par de locais. Cada uma das próximas C linhas descreve uma moeda. Para 1 ≤ i ≤ C, a i-ésima linha contém um inteiro u, o rótulo do vértice em que está a moeda de rótulo i. Cada uma das próximas L linhas descreve uma alavanca. Para 1 ≤ i ≤ L, a i-ésima linha contém um inteiro u, o rótulo do vértice em que está a alavanca de rótulo i.;Para cada caso de teste, imprima uma única linha com a resposta.;False;10 / 10;24;4;16.67%
2639;Cluedo;Ad-Hoc;5;"Desenvolvido na década de 1940 no Reino Unido, o jogo Cluedo é um dos jogos de tabuleiro mais populares no mundo. O objetivo do jogo é determinar quem assassinou o Sr. Body, qual arma foi usada para assassiná-lo, e onde o assassinato ocorreu. O jogo usa um conjunto de cartas que representam seis pessoas (rotuladas A, B, ... F), seis armas (rotuladas G, H, ..., L) e nove salas (rotuladas M, N, ..., U). No começo Do jogo, um cartão de uma pessoa, um cartão de uma arma e um cartão de uma sala são selecionados aleatoriamente e removidos do baralho para que ninguém possa vê-los - eles representam o assassino, a arma do crime e a localização do assassinato. Os restantes 18 cartões são embaralhados e distribuídos aos jogadores, começando pelo jogador 1, depois o jogador à direita do jogador 1, o jogador 2, e assim por diante. Alguns jogadores podem acabar com um cartão a mais do que os outros. Para os fins deste problema há quatro jogadores, então a pessoa à direita do jogador 4 é o jogador 1.

O resto do jogo é gasto procurando por pistas. Os jogadores se revezam em turnos, começando com o jogador 1 e passando para o jogador à direita deste. Um turno consiste em fazer uma sugestão (um suspeito de homicídio, uma arma e uma sala) e perguntar aos outros jogadores se eles têm alguma evidência que refute a sugestão. Por exemplo, você pode dizer para outro jogador ""Eu acredito que o assassino era a pessoa A, usando a arma L, no quarto T."" Se o outro jogador estiver segurando exatamente um desses cartões, esse jogador deve  te mostrar (e apenas para você) esse cartão. Se ele tiver mais que um desses cartões, ele pode  te mostrar qualquer um deles.

Ao fazer uma sugestão, você deve primeiro questionar a pessoa ao seu lado direito por qualquer evidência. Se ela não tiver nenhuma, você continua com a pessoa à direita da que você questionou, e assim por diante, até que alguém tenha provas, ou ninguém tem algum dos cartões na sua sugestão.

Muitas vezes você pode obter informações, mesmo que você não seja a pessoa que faz a sugestão. Suponha, no exemplo acima, você é o terceiro jogador e tem as cartas A e T. Se outra pessoa mostrar uma evidência ao jogador que fez a sujestão, você sabe que deve ser o cartão de arma L. Seguir as sugestões e quem forneceu provas em cada turno é uma estratégia importante.

Para ganhar o jogo, você deve fazer uma acusação, onde você declara seu palpite final sobre o assassino, arma e sala. Depois de fazer sua acusação, você verifica os três cartões que foram colocados de lado no início do jogo - se eles combinarem com sua acusação, você ganha! É evidente que você quer estar absolutamente seguro de sua acusação antes de fazê-la.

Aqui está o seu problema. Você é jogador 1. Dado um conjunto de cartas para você e um histórico de sugestões e evidências, você precisa decidir o quão perto você está de poder fazer uma acusação.";"A entrada começa com um número inteiro n (1 ≤ n ≤ 50), o número de sugestões feitas durante o jogo. Segue esta uma linha que contém os cinco cartões que você tem, todas letras maiúsculas no intervalo 'A'. . . 'U'. O restante n linhas contêm uma sugestão por linha. Cada uma dessas linhas começa com três caracteres respresentando a sujestão (jogador fazendo a sujestão, arma, sala), seguido das respostas de até três jogadores, começando com o jogador à direita do jogador fazendo a sugestão. Se um jogador não apresentar evidências, um '-' (Dash) será listado; caso contrário, um ""caracter de evidência"" será listado. Se o cartão de evidência específico for visto por você (porque você forneceu ou você era a pessoa que recebeu a evidência), então o caracter de evidência identifica esse cartão; Caso contrário, o caracter de evidência é '*'. Note que apenas a última resposta pode ser uma caráter de evidência. Todos os caracteres são separados um espaço. Apenas sequências de sujestões/respostas válidas aparecem na entrada.";"Mostre três caracteres que identifiquem o assassino, a arma do crime e a sala. Se o assassino pode ser identificado, use a carta apropriada para essa pessoa; caso contrário, use '?'. Faça o mesmo com a arma do crime e a sala.";False;5 / 10;23;7;30.43%
2640;Missão Improvável;Geometria Computacional;9;"É um dia ensolarado na primavera e você está prestes a encontrar com Patrick, um amigo íntimo e ex-parceiro do crime. Patrick perdeu a maior parte do seu dinheiro apostando em competições de programação, então ele precisa fazer outro trabalho. Por causa disso ele precisa de sua ajuda, mesmo que você tenha se aposentado da vida do crime. Você está relutante no início, ja que você não tem a mínima vontade de retornar às suas antigas formas criminais, mas você imagina que não há mal em ouvir o plano de seu amigo.

Há um carregamento de widgets caros em um armazém próximo e Patrick pretende roubar o quanto ele puder. Isso implica em encontrar um caminho para dentro do prédio, icapacitar os protetores de segurança, passar através de vários arrays de raios laser - você sabe, as técnicas habituais de roubo. No entanto, o coração do armazém foi equipado com um sistema de segurança que Patrick não pode desabilitar. É aqui que ele precisa de sua ajuda.

O carregamento é armazenado em grandes caixotes cúbicos, todos os quais têm as mesmas dimensões. As bancas são empilhadas em pilhas organizadas, formando uma grade tridimensional. O sistema de segurança tira fotografias das pilhas uma vez por hora usando três câmeras: uma câmera frontal, uma câmera lateral e uma câmera superior. A imagem da câmera frontal mostra a altura da pilha mais alta em cada coluna, a imagem da câmera lateral mostra a altura do pilha mais alta em cada linha, e a imagem da câmera superior mostra se cada pilha está vazia ou não. Se o sistema de segurança detecta uma alteração em qualquer uma das imagens, soa um alarme.

Uma vez que Patrick está dentro, ele irá determinar as alturas das pilhas e enviá-las para você. A Figura C.1 mostra uma Layout possível da grade e a visão de cada uma das câmeras.



Figura 1: Grade de alturas e as visualizações de câmera correspondentes.



Figura 2: Possível grade de alturas após o choque.

Patrick quer roubar tantos caixotes quanto possível. Como ele não pode desativar o sistema de segurança, ele planeja Enganá-lo arrumando as caixas restantes em pilhas para que o próximo conjunto de imagens da câmera seja o mesmo. No exemplo acima, é possível roubar nove caixotes. A Figura C.2 mostra uma possível configuração pós-roubo que parece idêntico ao sistema de segurança.

Patrick pede-lhe para ajudá-lo a determinar o número máximo de caixas que podem ser roubadas, deixando uma configuração de caixas que enganarão o sistema de segurança. Você o ajudará a conseguir esse trabalho final?";A primeira linha de entrada contém dois inteiros r (1 ≤ r ≤ 100) e c (1 ≤ c ≤ 100), o número de linhas e colunas na grade, respectivamente. Cada uma das seguintes linhas r contém c inteiros, as alturas (em caixas) das pilhas na linha correspondente. Todas as alturas estão entre 0 e 109 inclusive.;Mostre o número máximo de caixas que podem ser roubadas sem serem detectadas.;True;9 / 10;162;11;6.79%
2641;Dinheiro por Nada;Ad-Hoc;10;"Neste problema, você estará resolvendo um dos desafios mais difíceis da humanidade em todo o mundo desde o início dos tempos - como ganhar muito dinheiro.

Você é um intermediário no mercado de widgets. Seu trabalho é comprar widgets de empresas produtoras de widgets e vendê-los para empresas de consumo de widgets. Cada empresa de consumo de widgets possui um pedido aberto para um widget por dia, até uma data de término, e um preço no qual está disposto a comprar os widgets. Por outro lado, cada empresa produtora de widgets possui uma data de início na qual pode começar a entregar widgets e um preço no qual ele irá entregar cada widget.

Devido a leis de concorrência leal, você pode assinar um contrato com apenas uma empresa produtora e apenas uma empresa de consumo. Você vai comprar widgets da empresa produtora, um por dia, a partir do dia em que pode começar a ser entregue e terminando na data especificada pelo cliente. Em cada um desses dias você ganha a diferença entre o preço de venda do produtor e o preço de compra do consumidor.

Seu objetivo é escolher a empresa de consumo e a empresa produtora que maximizarão seus lucros.";"A primeira linha de entrada contém dois inteiros m e n (1 <= m; n <= 500 000) indicando o número de empresas produtoras e consumidoras no mercado, respectivamente. Seguem-se linhas m, cujo ith contém dois inteiros pi e di (1 <= pi; di <= 109), o preço (em dólares) no qual o i-ésimo produtor vende um widget e o dia em que o primeiro widget estará disponível nesta empresa. Em seguida, siga n linhas, sendo que o jth contém dois inteiros qj e ej (1 <= qj; ej  <= 109), o preço (em dólares) no qual o jth consumidor está disposto a comprar widgets e o dia imediatamente após o dia em que o último widget deve ser entregue a esta empresa.";Mostre o número total máximo de dólares que você pode ganhar. Se não houver nenhuma maneira de assinar contratos que lhe ofereçam lucros, mostre 0.;False;10 / 10;53;7;13.21%
2643;Posterizar;Ad-Hoc;5;"Os pixels em uma imagem digital podem ser representados com três números inteiros no intervalo de 0 a 255 que indicam a intensidade das cores vermelha, verde e azul. Para comprimir uma imagem ou para criar um efeito artístico, muitas ferramentas de edição de fotos incluem uma operação de ""posterizar"" que funciona da seguinte forma. Cada canal de cores é examinado separadamente; Este problema concentra-se apenas no canal vermelho. Em vez de permitir todos os inteiros de 0 a 255 para o canal vermelho, uma imagem posterizada permite no máximo k inteiros desse intervalo. A intensidade vermelha de cada pixel é substituída pelas mais próximas dos inteiros permitidos. A ferramenta de edição de fotos seleciona um conjunto de k inteiros que minimiza a soma dos erros quadrados introduzidos em todos os pixels na imagem original. Se houver n pixels que possuem valores vermelhos originais r1 , . . . , rn , e k permitiu inteiros v1 , . . . , vk , a soma de erros quadrados é definida como



Sua tarefa é calcular a soma mínima possível de erros quadrados, dado o parâmetro k e uma descrição
das intensidades vermelhas dos pixels de uma imagem.";A primeira linha da entrada contém dois inteiros d (1 ≤ d ≤ 256), o número de valores vermelhos distintos que ocorrem na imagem original, e k (1 ≤ k ≤ d), o número de valores vermelhos distintos permitidos na imagem posterizada. As restantes linhas d indicam o número de pixels da imagem com vários valores vermelhos. Cada uma dessas linhas contém dois inteiros r (0 ≤ r ≤ 255) e p (1 ≤ p ≤ 226 ), onde r é um valor de intensidade vermelha e p é o número de pixels com intensidade vermelha r. Essas linhas d são dadas em ordem crescente de valor vermelho.;Mostre a soma dos erros quadrados para um conjunto de valores inteiros permitidos k.;True;5 / 10;28;10;35.71%
2644;Replicate Replicate Rfplicbte;Ad-Hoc;1;"The owner of the Automatic Cellular Manufacturing corporation has just patented a new process for the mass production of identical parts. Her approach uses a two-dimensional lattice of two-state cells, each of which is either “empty” or “filled.” The exact details are, of course, proprietary.

Initially, a set of cells in the lattice is filled with a copy of the part that is to be reproduced. In a sequence of discrete steps, each cell in the lattice simultaneously updates its state by examining its own state and those of its eight surrounding neighbors. If an odd number of these nine cells are filled, the cell’s state in the next time step will be filled, otherwise it will be empty. Figure G.1 shows several steps in the replication process for a simple pattern consisting of three filled cells.



Figure 1: The replication process.

However, a bug has crept into the process. After each update step, one cell in the lattice might spontaneously flip its state. For instance, Figure G.2 shows what might happen if a cell flipped its state after the first time step and another flipped its state after the third time step.



Figure 2: Errors in the replication process. This figure corresponds to Sample Input 1.

Unfortunately, the original patterns were lost, and only the (possibly corrupted) results of the replication remain. Can you write a program to determine a smallest possible nonempty initial pattern that could have resulted in a given final pattern?";The first line of input contains two integers w (1 ≤ w ≤ 300) and h (1 ≤ h ≤ 300), where w and h are the width and height of the bounding box of the final pattern. Following that are h lines, each containing w characters, giving the final pattern. Each character is either ‘.’ (representing an empty cell) or ‘#’ (repre- senting a filled cell). There is at least one filled cell in the first row, in the last row, in the first column, and in the last column.;Display a minimum-size nonempty pattern that could have resulted in the given pattern, assuming that at each stage of the replication process at most one cell spontaneously changed state. The size of a pattern is the area of its bounding box. If there is more than one possible minimum-size nonempty starting pattern, any one will be accepted. Use the character ‘.’ for empty cells and ‘#’ for filled cells. Use the minimum number of rows and columns needed to display the pattern.;True;1 / 10;11;5;45.45%
2646;Secret Chamber at Mount Rushmore;Iniciante;6;"By now you have probably heard that there is a spectacular stone sculp- ture featuring four famous U.S. presidents at Mount Rushmore. How- ever, very few people know that this monument contains a secret cham- ber. This sounds like something out of a plot of a Hollywood movie, but the chamber really exists. It can be found behind the head of Abraham Lincoln and was designed to serve as a Hall of Records to store impor- tant historical U.S. documents and artifacts. Historians claim that the construction of the hall was halted in 1939 and the uncompleted cham- ber was left untouched until the late 1990s, but this is not the whole truth.

In 1982, the famous archaeologist S. Dakota Jones secretly visited the monument and found that the chamber actually was completed, but it was kept confidential. This seemed suspicious and after some poking around, she found a hidden vault and some documents inside. Unfortu- nately, these documents did not make any sense and were all gibberish. She suspected that they had been written in a code, but she could not decipher them despite all her efforts.

Earlier this week when she was in the area to follow the ACM-ICPC World Finals, Dr. Jones finally dis- covered the key to deciphering the documents, in Connolly Hall of SDSM&T. She found a document that contains a list of translations of letters. Some letters may have more than one translation, and others may have no translation. By repeatedly applying some of these translations to individual letters in the gibberish documents, she might be able to decipher them to yield historical U.S. documents such as the Declaration of Independence and the Constitution. She needs your help.

You are given the possible translations of letters and a list of pairs of original and deciphered words. Your task is to verify whether the words in each pair match. Two words match if they have the same length and if each letter of the first word can be turned into the corresponding letter of the second word by using the available translations zero or more times.";The first line of input contains two integers m (1 ≤ m ≤ 500) and n (1 ≤ n ≤ 50), where m is the number of translations of letters and n is the number of word pairs. Each of the next m lines contains two distinct space-separated letters a and b, indicating that the letter a can be translated to the letter b. Each ordered pair of letters (a, b) appears at most once. Following this are n lines, each containing a word pair to check. Translations and words use only lowercase letters ‘a’–‘z’, and each word contains at least 1 and at most 50 letters.;"For each pair of words, display ""yes"" if the two words match, and ""no"" otherwise.";True;6 / 10;316;143;45.25%
2648;Tarot Sham Boast;Ad-Hoc;7;"Curse your rival! Every year at the annual Rock Paper Scissors tournament, you have made it to the final match. (Your Rock technique is unmatched, and your Paper cuts to the bone! Your Scissors need a little work, though.) But every year, he defeats you, even though his moves appear entirely random! And he claims to the press that he simply cannot be beaten. What is his secret?

Fortunately, you think you have figured it out. This year, just before the tournament, you caught him visiting various shamans around town. Aha! He is using the supernatural against you! You figured two can play at this game. So you went and visited a set of fortune-tellers, who have each used a Tarot deck to predict a sequence that your rival will end up using, sometime during the match.

However, your initial excitement has passed, and now you are feeling a little silly. This cannot possibly work, right? In the end it feels like you have paid good money for a fraudulent, random set of predictions. Oh well; you might as well keep an eye out for some of them during the match. But which predictions will you use?

In the final match, you and your rival will play n rounds of Rock Paper Scissors. In each round, your rival and you will both choose one of the three options (Rock, Paper, or Scissors). Based on your selections, a winner of the round will be determined (exactly how is irrelevant to this problem).

Given the length of the final match and the various predictions, sort them in order of how likely they are to appear sometime during the match as a contiguous sequence of options chosen by your rival, assuming he is choosing his symbol in each round independently and uniformly at random.";The first line of input contains two integers n (1 ≤ n ≤ 106 ), the number of rounds in the final match, and s (1 ≤ s ≤ 10), the number of sequences. The remaining s lines each describe a prediction, consisting of a string of characters ‘R’, ‘P’, and ‘S’. All predictions have the same length, which is between 1 and n characters long, inclusive, and no longer than 105 .;Display all of the predictions, sorted by decreasing likelihood of appearance sometime during the final match. In the case of tied predictions, display them in the same order as in the input.;False;7 / 10;26;8;30.77%
2650;Construindo Muralhas;Ad-Hoc;5;"Após o titã colossal destruir a muralha Maria, a Tropa de Exploração resolveu construir uma nova muralha, essa muralha será tão resistente que nenhum titã poderá quebrá-la.

Porém se o titã for muito alto ele pode simplesmente passar por cima da muralha, pensando nisso a Tropa de Exploração contratou você para escrever um programa, que dado a altura da muralha que eles vão construir e o tamanho dos titãs que eles conhecem, responda quais titãs conseguirão passar por cima da muralha.

Um titã consegue passar por cima de uma muralha somente se ele for mais alto que a mesma.";"A primeira linha contém dois inteiros N (1 ≤ N ≤ 100) e W (1 ≤ W ≤ 1000) representando respectivamente quantos titãs a Tropa de Exploração conhece e o tamanho da muralha que eles pretendem construir.

Cada uma das N linhas seguintes contém uma string S (1 ≤ |S| ≤ 100) representando o nome do titã, seguida por um inteiro H (1 ≤ H ≤ 1000) representando a altura do titã. A string é composta por letras maiúsculas,minúsculas e espaços.

O nome de um titã nunca começa ou termina com espaço.";Seu programa deverá exibir quais titãs conseguirão passar por cima da muralha, os titãs devem ser exibidos na ordem que aparacem na entrada.;False;5 / 10;2184;504;23.08%
2651;Link Bolado;Strings;4;"Link é um herói famoso e por isso recebe diversas cartas de seus fãs. Porém mesmo sendo famoso, todos continuam o chamando de Zelda.

Por causa disso Link está muito bolado, tão bolado que sempre que recebe uma carta ele confere como o seu fã se referiu a ele na carta, e caso ele perceba o trecho ""zelda"" no nome ele fica bolado e joga a carta fora.

Sua tarefa é determinar se Link ficará bolado com a forma que seu fã o chamou na carta ou não.";Contém uma string S (1 ≤ |S| ≤ 105) que representa como o fã de Link se referiu a ele na carta. A string é composta apenas por letras maiúsculas e minúsculas.;"Seu programa deve exibir ""Link Bolado"" caso o nome contenha o trecho ""zelda"" ou ""Link Tranquilo"" caso contrário.";False;4 / 10;3823;1501;39.26%
2652;Quantas Árvores?;Grafos;9;"Um fazendeiro estava entendiado e por isso decidiu contar quantas espécies de árvores existiam em sua fazenda, após horas tentando contar ele acabou desistindo pois existiam muitas árvores na fazenda.

Muito frustrado ele decidiu te ligar para desenvolver um programa que conte quantos tipos de árvores distintas existem na fazenda.

Duas árvores são iguais se elas possuem o mesmo formato.";A primeira linha contém um inteiro N (1 ≤ N ≤ 40) representando quantas árvores existem na fazenda. As próximas N linhas começam com um inteiro M (1 ≤ M ≤ 40) representando quantos vértices essa árvore tem, seguida de M-1 inteiros x2, x3...., xn inteiros que representando uma das ligações desses vértices á partir do vértice dois.;Imprima quantos tipos de árvores distintas existem na fazenda.;False;9 / 10;121;38;31.40%
2653;Dijkstra;Iniciante;3;"No jogo O Bruxo, Sigismund Dijkstra é o líder do Serviço Secreto Redaniano, por causa disso ele é uma das pessoas mais importantes do mundo.

Além disso Dijkstra possui um grande tesouro, o qual possui diversos tipos de jóias.

Dijkstra está muito curioso para saber quantos tipos de jóias diferentes seu tesouro possui.

Sabendo que você é o melhor programador do continente Dijkstra te contratou para verificar quantos tipos de jóias distintas ele tem em seu tesouro.";A entrada consiste de várias linhas e cada uma contém uma string que descreve uma das jóias de Dijkstra. Essa string é composta apenas dos caracteres '(' e ')', a soma do tamanho de todas as string não excede 106.;Imprima quantos tipos de jóias distintas Dijkstra tem.;False;3 / 10;2352;1132;48.13%
2654;Godofor;Ad-Hoc;5;"Após a morte de Ares, o último godofor, os outros deuses decidiram fazer um concurso para decidir quem seria o novo godofor. Porém seres de diversos universos tinham interesse na vaga. Por haver tantos candidatos os deuses estão com muita dificuldade para selecionar um deles, então eles decidiram recorrer a você o deus da programação, eles querem que você desenvolva um programa que decida quem será o novo godofor com base nos critérios definidos pelos deuses.

Os candidatos serão avaliados com base em três atributos, nível de poder do candidato, quantos deuses o candidato já matou e quantas vezes o candidato já morreu. O godofor deve ser o candidato mais poderoso, caso ocorra empate deverá ser o candidato que mais matou outros deuses, caso ocorra empate novamente o escolhido será o candidato que menos morreu, se mesmo assim o empate persistir o godofor será o candidato com o menor nome lexicograficamente.";A primeira linha contém um inteiro N (1 ≤ N ≤ 100)representando quantos seres se inscreveram para tentar ser o novo godofor. Cada uma das N linhas seguintes contém uma string S (1 ≤ |S| ≤ 100) representando o nome do ser, seguida por três inteiros P (1 ≤ P ≤ 100),K (1 ≤ K ≤ 100), M (1 ≤ M ≤ 100) representando respectivamente o poder do ser, quantos deuses ele já matou, e quantas vezes ele já morreu. A string é composta por letras maiúsculas e minúsculas.;Seu programa deverá exibir quem vai ser o novo godofor.;False;5 / 10;954;323;33.86%
2655;Trilha Perigosa;Estruturas e Bibliotecas;9;"Geraldo de Rívea é um bruxo, e como todo bom bruxo ele se prepara bem, antes de enfrentar um monstro.

Geraldo deseja viajar para Novigrad, para isso ele terá que passar por uma estrada que começa no sul e vai até o norte em linha reta, o grande problema é que em cada coordenada inteira dessa estrada existe um monstro.

Como Geraldo não gosta de ser pego desprevenido ele deseja saber quantos tipos de monstro existem da coordenadas X até a coordenada Y dessa estrada.

Para resolver esse problema Geraldo te pediu para fazer um programa que realize as seguintes operações:

1 L R - Imprima quantos monstros distintos existem da coordenada L até a R na estrada.

2 C T - O monstro da coordenada C agora é um monstro do tipo T.";"A primeira linha contém três inteiros N,Q (1 ≤ N, Q ≤ 105) e M (1 ≤ M ≤ 50) representando respectivamente o tamanho da estrada, a quantidade de operações que Geraldo deseja fazer, quantos tipos de monstros Geraldo conhece.

A segunda linha vai conter N inteiros x1, x2, ...., xn representando o tipo do monstro que se encontra inicialmente naquela posição.

As próximas Q linhas vão conter as consultas de Geraldo, seguindo o padrão descrito anteriormente.";Imprima as respostas das consultas.;False;9 / 10;673;186;27.64%
2656;Rhombus;Estruturas e Bibliotecas;10;"Dado um grid com seus valores iniciais definidos como zero e Q queries dos tipos:

1 x y: Coloca o valor um na posição (x,y) do tabuleiro.

2 x y: Coloca o valor zero na posição (x,y) do tabuleiro.

3 x y d: Retorna a soma dos valores de todas as posições do tabuleiro que estão a uma distância de Manhattan de no máximo D da posição (x,y).";"A primeira linha contém um inteiro Q(1 ≤ Q ≤ 105).

As próximas Q linhas contém queries como descrito anteriormente.

(0 ≤ X, Y, D ≤ 105)";Para cada query do tipo três imprima a soma de todas as posições do tabuleiro que estão a uma distância de Manhattan de no máximo D da posição (x,y).;False;10 / 10;141;38;26.95%
2657;Sensate;Grafos;10;"Sensates, ou Homo sensoriums, são uma espécie de humanos que são conectados telepaticamente com outras pessoas pelo mundo. Um grupo de sensates é chamado de cluster, e os membros de um cluster podem contactar um ao outro independente de onde eles estiverem no mundo. Após saber dos sensates os organizadores de maratonas de programação ficaram muito preocupados, pois mesmo que uma pessoa não saiba programar, se alguém do seu cluster souber ela irá se sair bem na competição mesmo sem saber nada. Por causa disso os organizadores de maratonas criaram novas regras para determinar se uma pessoa poderá participar de uma competição ou não.

Primeiramente cada pessoa no planeta irá receber uma nota de um a dez, com o intuito de medir quão bem ela programa. Após isso para a pessoa participar ela terá que se encaixar em uma das categorias abaixo:

1. Não ser um sensate.

2. Ser um sensate e não ter ninguém no mesmo cluster com nível de programação maior que cinco.

3. Ser um sensate e ter seu nível de programação maior ou igual a 5.

Desenvolva um programa que consiga determinar se uma pessoa poderá ou não participar de competições de programação.";"A primeira linha contém três inteiros N,M e Q (1 ≤ N, M, Q ≤ 104) representando respectivamente o número de pessoas, quantas ligações existem entre essas pessoas e quantas consultas serão realizadas. Cada uma das N linhas seguintes contém uma string S (1 ≤ |S| ≤ 10) e um inteiro V (0 ≤ V ≤ 10) representando respectivamente o nome da pessoa e seu nível de programação. As próximas M vão conter duas strings S1 e S2 (1 ≤ |S1|, |S2| ≤ 10), representando que a pessoa S1 e S2 estão no mesmo cluster. As próximas Q linhas vão conter uma string T (1 ≤ |T| ≤ 10) que representa o nome da pessoa que pretende participar da competição.

As strings serão compostas apenas de letras maiúsculas e minusculas.";"Para cada uma das Q consultas imprima ""S"" se a pessoa pode competir ou ""N"" caso contrário.";False;10 / 10;544;109;20.04%
2658;Acordes Intergaláticos;Estruturas e Bibliotecas;8;"A maratona de composição de sonatas para piano intergalático está tentando dificultar a vida dos competidores, pois cada vez mais seres de inteligência superior estão participando. O piano é composto de N teclas, numeradas de 0 a N − 1. O sistema tonal intergalático possui 9 notas musicais, com valores de 0 a 8. Inicialmente todas as teclas do piano estão associadas à mesma nota 1. O competidor vai tocar uma sequência de acordes. Cada acorde intergalático é composto por duas teclas distintas, a e b, 0 ≤ a < b < N. Quando o acorde é tocado, o piano vai emitir a nota mais frequente, f, entre todas as teclas do intervalo [a, b]. Se houver mais de uma nota mais frequente, ele emite a maior delas. Imediatamente após emitir a nota, o piano muda a nota associada a todas as teclas do intervalo [a, b]. A nova nota associada à tecla k, a ≤ k ≤ b, será a anterior mais f, módulo 9.

Por exemplo, se em determinado momento as notas associadas a um piano de N = 15 teclas são



e o acorde [3, 9] é tocado, então a nota mais frequente será 4 e as novas notas após o acorde serão:



Dada a sequência de Q acordes, seu programa deve imprimir as notas que estarão associadas às teclas do piano após todos os acordes da sequência terem sido tocados.";A primeira linha da entrada contém dois inteiros, N (2 ≤ N ≤ 100000), e Q (1 ≤ Q ≤ 100000), respectivamente o número de teclas do piano intergalático e a quantidade de acordes. As Q linhas seguintes contˆem, cada uma, dois inteiros A e B, (0 ≤ A < B < N), representando um acorde.;Seu programa deve imprimir N inteiros, um por linha, representando as notas associadas às teclas do piano, após todos os acordes terem sido tocados.;True;8 / 10;1205;311;25.81%
2659;Brincadeira;Ad-Hoc;8;"Um Registrador de Deslocamento é um circuito que desloca de uma posição os elementos de um vetor de bits. O registrador de deslocamento tem uma entrada (um bit) e uma saída (também um bit), e é comandado por um pulso de relógio. Quando o pulso ocorre, o bit de entrada se transforma no bit mais significativo do vetor, o bit menos significativo é jogado na saída do registrador, e todos os outros bits são deslocados de uma posição em direção ao bit menos significativo do vetor (em direção à saída).

Um Registrador de Deslocamento com Retroalimentação Linear (em inglês, LFSR) é um registrador de deslocamento no qual o bit de entrada é determinado pelo valor do ou-exclusivo de alguns dos bits do registrador antes do pulso de relógio. Os bits que são utilizados na retroalimentação do registrador são chamados de torneiras. A figura abaixo mostra um LFSR de 8 bits, com três torneiras (bits 0, 3 e 5).



Durante uma competição de programação, enquanto aguardam a divulgação do resultado final, Ricardo e Cláudio se divertem com um LFSR que encontraram no local.

Eles usam o LFSR para gerar uma sequência infinita de números. Para gerar tal sequência, antes de cada pulso do relógio, os bits do registrador são convertidos para decimal. Assim, para um LFSR como o da figura os primeiros elementos da sequência são: A0 = 169 (10101001), A1 = 212 (11010100), A2 = 106 (01101010), A3 = 53 (00110101) e A4 = 26 (00011010). Note que o valor dos bits antes do primeiro pulso é o primeiro elemento da sequência.

Em cada rodada da brincadeira um deles fala dois números inteiros, X e Y . Daí em diante o outro deve encontrar uma subsequência contígua, de tamanho maior ou igual a Y , dos elementos da sequência gerada pelo LFSR, de modo que a soma dos elementos da subsequência contígua seja divisível por X.

De alguma forma os dois são capazes de se divertir com isso e encontrar as respostas mesmo sem a ajuda de um computador. E você, dada a descrição de um LSFR e dois inteiros X e Y , é capaz de encontrar uma subsequência válida (ou informar caso não exista uma)?";A primeira linha contém cinco números inteiros N, T, A0, X e Y . O inteiro N representa o número de bits (2 ≤ N ≤ 30), T é o número de torneiras (1 ≤ T ≤ N), A0 é a representação decimal do estado inicial do LFSR, X o valor pelo qual a soma da subsequência contígua deve ser divisível (1 ≤ X ≤ 106 ) e Y é a quantidade mínima de elementos na subsequência contígua desejada (1 ≤ Y ≤ 106 ). Os bits são identificados por inteiros de 0 (bit menos significativo) a N −1 (bit mais significativo). A segunda linha contém T inteiros, separados por espaços, representando os identificadores dos bits que são torneiras, em ordem crescente. O bit 0 sempre é uma torneira.;Seu programa deve imprimir, em uma única linha, dois inteiros I e F, representando os índices do primeiro e do último elementos da subsequência contígua escolhida. Caso não exista uma solução imprima a palavra impossivel. Caso exista mais de uma solução possível escolha aquela que minimiza o valor de F. Se mesmo assim houver mais de uma possibilidade opte por aquela que minimiza o valor de I.;True;8 / 10;447;128;28.64%
2660;Cigarras Periódicas;Matemática;6;"As “cigarras periódicas” americanas têm o ciclo de vida mais longo de todos os insetos conhecidos. A cada 17 anos, estas cigarras periódicas amadurecem, se acasalam, depositam ovos e morrem. Suas crias se refugiam debaixo da terra, a 20 centímetros de profundidade, onde elas se alimentarão da seiva de raízes por 17 anos, até que chegue seu dia de buscar um lugar ao sol.

Acredita-se que esse número não aconteceu por acaso, outras espécies de cigarras da região tem ciclos de 13 anos, assim essas duas espécies emergem ao mesmo tempo apenas a cada 221 anos. Isso é desejável pois dessa forma a chance de que as duas espécies se misturem diminui consideravelmente e características indesejáveis de uma população não são introduzidas na outra.

Inspirado por esse fenômeno, uma nova variação de algoritmo evolutivo foi criada. Na última etapa desse algoritmo as melhores possíveis soluções são divididas em populações de modo que cada população i tem um ciclo de vida Ci . Além disso uma população extra também é adicionada, de modo que a quantidade de iterações até que o ciclo de vida de todas as populações coincida seja a maior possível. Essas populações são então avaliadas até que o ciclo de vida de todas coincida e a melhor solução ao final do processo é escolhida. Como não é interessante esperar demais até que o algoritmo gere uma resposta, um limite superior L no número de iterações também deve ser respeitado.

Dados os ciclos de vida das populações criadas e o limite na quantidade de iterações L, sua tarefa é computar qual o período ótimo para a população extra que será adicionada";A primeira linha da entrada contém dois inteiros N e L, respectivamente, a quantidade de populações geradas pelas etapas anteriores do algoritmo e o limite da quantidade de iterações, 2 ≤ N ≤ 104 , 1 ≤ L ≤ 106 . A linha seguinte contém os N valores Ci representando a quantidade de iterações no ciclo de vida de cada população, onde 1 ≤ Ci . Você pode assumir que os ciclos de vida das populações atuais coincidem em menos de L iterações.;Seu programa deve produzir uma única linha com um inteiro representando o período da população extra que maximiza a quantidade T de iterações até que os ciclos de vida de todas as populações coincidam, respeitando a restrição de que T ≤ L. Caso exista mais de um valor possível imprima o menor deles.;False;6 / 10;1335;398;29.81%
2661;Despojados;Matemática;6;Todo inteiro positivo pode ser escrito como um produto de potências de primos. Por exemplo, 252 = 22 × 32 × 7. Um inteiro é despojado se pode ser escrito como um produto de dois ou mais primos distintos, sem repetição. Por exemplo, 6 = 2 × 3 e 14 = 2 × 7 são despojados, mas 28 = 22 × 7, 1, 17 não são despojados.;A entrada consiste de uma única linha que contém um inteiro N (1 ≤ N ≤ 1012).;Seu programa deve produzir uma única linha com um inteiro representando o número de divisores despojados de N.;False;6 / 10;1770;638;36.05%
2662;Escala Musical;Ad-Hoc;4;"As notas musicais são as unidades mais básicas da composição musical no ocidente. Muitas pessoas acreditam que existem apenas 7 notas musicais:

dó ré mi fá sol lá si

Chamaremos essas notas de notas elementares. Na verdade, existem notas além destas acima, normalmente identificadas pelo nome de uma das notas acima seguido do símbolo sustenido (#):

dó dó# ré ré# mi fá fá# sol sol# lá lá# si

Assim, existem 12 notas musicais básicas distintas. Entretanto, a rigor, esta sequência é infinita e periódica: após um “si” existe um outro “dó”, e a sequência se repete novamente.

As notas elementares são mais conhecidas, por estarem em um tom musical conhecido como “dó maior”. Em qualquer tom “maior”, as distâncias entre as possíveis notas seguem um padrão. No tom “dó maior”, por exemplo:



Note que eu poderia usar qualquer “dó” na escala de “dó maior”, pois a nota seguinte ao “si” será, novamente, um “dó”. O mesmo vale para as demais notas. Um outro exemplo de notas em um determinado tom maior seria a escala de “dó# maior”:



Guilherme está aprendendo a tocar um teclado com 61 teclas, numeradas de 1 a 61. Assim, a nota 1 corresponde a um “dó”, a nota 2 corresponde a um “dó #” e assim por diante, até chegar nas notas 60 (um “si”) e 61 (um “dó”).

Acredita-se que as músicas com as melhores melodias são aquelas que estão em algum tom maior, ou seja, músicas em que todas as notas pertencem à escala de algum tom maior. Enquanto pratica no teclado, Guilherme usa um aparelho que grava todas as notas tocadas durante a música. Para ajudá-lo a melhorar sua técnica você decidiu criar um programa capaz de avaliar as músicas gravadas por ele e determinar se elas estão em algum tom maior ou não.";A primeira linha da entrada terá um número inteiro N, com 1 ≤ N ≤ 105 , correspondente ao número de notas musicais da música. Em seguida, serão fornecidos N números, um por linha, todos entre 1 e 61, inclusive, correspondendo às notas musicais.;Seu programa deve verificar se a música está em algum tom maior. Em caso afirmativo, seu programa deve imprimir uma única linha com o tom maior (sem acentos) em que a música está. Caso contrário, seu programa deve imprimir uma linha contendo a palavra desafinado. Caso a música possa estar em mais de um tom maior imprima aquele relativo a menor nota musical básica, sendo que “do” < “do#” < “re”, . . .;True;4 / 10;748;419;56.02%
2663;Fase;Iniciante;5;"Em diversas competições acadêmicas, como a Olimpíada Brasileira de Informática (OBI), uma certa quantidade de competidores se classifica de uma fase para a fase seguinte, garantindo uma das vagas disponíveis. Entretanto, normalmente essa quantidade é variável, pois dada uma certa quantidade mínima de classificados, é frequente que haja empate na última vaga de classificação. Neste caso, é comum que todos os competidores empatados na última colocação se classifiquem.

Sua tarefa é ajudar a calcular o número de competidores classificados para a próxima fase. Você receberá uma lista de pontuações obtidas pelos competidores e o número mínimo de vagas para a fase seguinte e você deve decidir quantos competidores de fato vão se classificar.";A primeira linha da entrada contém um número inteiro N, 1 ≤ N ≤ 1000, representando o número de competidores. A segunda linha conterá um inteiro K, 1 ≤ K ≤ N, indicando o número mínimo de competidores que devem se classificar para a próxima fase. Em seguida, N linhas conterão, cada uma um número entre 1 e 1000, inclusive, correspondente á pontuação de um competidor.;Seu programa deve imprimir uma linha, contendo o número de classificados para a próxima fase.;False;5 / 10;3801;1718;45.20%
2664;Ginástica;Paradigmas;4;"Vinícius gosta muito de se exercitar na academia de ginástica. Ele fez um acordo com o seu treinador para ter programas de exercícios diferentes a cada vez que usar a bicicleta ergométrica. Um programa, na linguagem das academias, é uma sequência de níveis de dificuldade do exercício. Os programas de Vinícius para a bicicleta ergométrica devem ter a mesma duração em minutos e os níveis de dificuldade devem mudar a cada minuto, para um nível imediatamente acima ou um nível imediatamente abaixo. Os níveis de dificuldade não podem estar abaixo de um mínimo e nem acima de um máximo previamente estipulados.

Seu problema é calcular o número de programas diferentes que o treinador pode construir, obedecidas as restrições acima.";A entrada consiste de uma única linha que contém três inteiros, T, M, N (1 ≤ T ≤ 50 , 1 ≤ M < N ≤ 105 ) em que T é o número de minutos do exercício, M é o valor mínimo de dificuldade permitido e N é o valor máximo de dificuldade permitido.;Seu programa deve produzir uma única linha com um inteiro representando o número de programas diferentes que o treinador pode construir. Como esse número pode ser grande, a resposta deve ser esse número módulo 109 + 7.;False;4 / 10;1321;758;57.38%
2665;Hipercampo;Geometria Computacional;6;"São dadas duas âncoras, dois pontos A = ( XA , 0) e B = ( XB , 0), formando um segmento horizontal, tal que 0 < X A < XB , e um conjunto P de N pontos da forma ( X, Y ), tal que X > 0 e Y > 0. A figura mais à esquerda exemplifica uma possível entrada.



Para “ligar” um ponto v ∈ P precisamos desenhar os dois segmentos de reta ( v, A ) e ( v, B ). Queremos ligar vários pontos, mas de modo que os segmentos se interceptem apenas nas âncoras. Por exemplo, a figura do meio mostra dois pontos, 1 e 4, que não podem estar ligados ao mesmo tempo, pois haveria interseção dos segmentos fora das âncoras. A figura mais à direita mostra que é possível ligar pelo menos 3 pontos, 8, 5 e 3, com interseção apenas nas âncoras.

Seu programa deve computar o número máximo de pontos que é possível ligar com interseção de segmentos apenas nas âncoras.";A primeira linha da entrada contém três inteiros, N (1 ≤ N ≤ 100), XA e XB (0 < XA < XB ≤ 104 ), representando, respectivamente, o número de pontos no conjunto P e as abscissas das âncoras A e B . As N linhas seguintes contêm, cada uma, dois inteiros Xi e Yi (0 < Xi , Yi ≤ 104 ), representando as coordenadas dos pontos, para 1 ≤ i ≤ N . Não há pontos coincidentes e não há dois pontos u e v distintos tais que { A, u, v } ou { B, u, v } sejam colineares.;Seu programa deve imprimir uma linha contendo um inteiro, representando o número máximo de pontos de P que podem ser ligados com interseção de segmentos apenas nas âncoras.;True;6 / 10;543;234;43.09%
2666;Imposto Real;Grafos;3;"O reino de Nlogônia é rico, o povo é educado e feliz, mas o Rei é um tirano quando o assunto se refere a impostos. A cada final de ano, cada cidade do país deve pagar uma determinada quantidade de quilos de ouro em impostos. Chegado o momento de coletar os impostos, o Rei envia sua carruagem real para recolher o ouro devido, usando as estradas do reino.

Cada estrada liga duas cidades diferentes e pode ser percorrida nas duas direções. A rede de estradas é tal que é possível ir de qualquer cidade para qualquer outra cidade, possivelmente passando por cidades intermediárias, mas há apenas um caminho entre duas cidades diferentes.

Em cada cidade há um cofre real, utilizado para armazenamento de ouro de impostos. Os cofres reais são imensos, de forma que cada cofre tem capacidade de armazenar todo o ouro devido por todo o reino. A carruagem sai da capital, percorrendo as estradas do reino, visitando as cidades para recolher o ouro devido, podendo usar qualquer cofre real para armazenar temporariamente uma parte do imposto recolhido, se necessário. Ao final da coleta, todo o ouro devido por todas as cidades deve estar armazenado no cofre real da capital.

Ávaro como é o Rei, ele contratou o seu time para, dados a quantidade de ouro a ser recolhido em cada cidade (em kg), a lista das estradas do reino, com os respectivos comprimentos (em km) e a capacidade de carga da carruagem real (em kg), determine qual é a mínima distância que a carruagem deve percorrer para recolher todo o ouro devido.";A primeira linha contém dois inteiros N e C indicando respectivamente o número de cidades e a capacidade de carga da carruagem (2 ≤ N ≤ 104 e 1 ≤ C ≤ 100). A capital do reino é identificada pelo número 1, as outras cidades são identificadas por inteiros de 2 a N . A segunda linha contém N inteiros Ei representando a quantidade de imposto devido por cada cidade i (0 ≤ Ei ≤ 100 para 1 ≤ i ≤ N ). Cada uma das N-1 linhas seguintes contém três inteiros A , B e C , indicando que uma estrada liga a cidade A e a cidade B (1 ≤ A, B ≤ N ) e tem comprimento C (1 ≤ C ≤ 100).;Seu programa deve produzir uma única linha com um inteiro representando a menor distância que a carruagem real deve percorrer para recolher todo o imposto devido, em km.;False;3 / 10;732;406;55.46%
2667;Jogo de Boca;Matemática;2;"Um jogo infantil, muito popular, é o 21 de boca . O jogo é jogado da seguinte forma: o primeiro jogador diz um nímero, n0 , que pode ser 1 ou 2. O segundo jogador pode então dizer um número n1 tal que n1 ∈{ n0 + 1 , n0 + 2 } . E assim por diante, os jogadores se alternam, dizendo sempre um número que é um ou dois maior do que o anterior. O jogador que disser 21 ganha o jogo. Por exemplo, a sequência de números poderia ser: 1 , 3 , 5 , 6 , 7 , 9 , 11 , 12 , 14 , 15 , 16 , 18 , 19 , 21. Neste jogo, o primeiro jogador sempre perde, se o segundo souber jogar bem.

A cada nova geração as crianças ficam mais espertas. Atualmente, apesar de acharem o 21 de boca um jogo interessante, muitas crianças não se sentem desafiadas o bastante e por isso resolveram generalizar o jogo, criando assim o N de boca .Dado um inteiro N , no lugar do 21, o primeiro jogador pode escolher 1 ou 2. A partir daí os jogadores se alternam, adicionando 1 ou 2 ao número anterior, até que um deles diga o número N e ganhe o jogo. Sabendo que ambos os jogadores são excelentes e sabem jogar muito bem, seu problema é determinar qual o inteiro inicial que o primeiro jogador deve escolher para ganhar o jogo.";A entrada consiste de uma única linha que contém o inteiro N (3 ≤ N ≤ 10100 ) escolhido para a partida atual do N de boca.;Seu programa deve produzir uma única linha com um inteiro representando o número, em { 1 , 2 } , que o primeiro jogador deve escolher, para ganhar o jogo. Se não for possível, então o inteiro deve ser zero.;False;2 / 10;1847;1066;57.72%
2668;K-ésimo;Matemática;8;Dado um número real X da forma A + √ B , com A e B inteiros positivos e − 1 < A − √ B < 1, e dois números inteiros N e K , sua tarefa é determinar o K-ésimo dígito menos significativo da parte inteira de XN . Por exemplo, se K = 1, você precisa determinar o algarismo das unidades de [XN] .;A entrada consiste de uma única linha, que contém quatro números inteiros, A , B , N e K , com 1 ≤ A, B ≤ 104 , 1 ≤ N ≤ 109 e 1 ≤ K ≤ 4.;Seu programa deve imprimir uma única linha, contendo o K-ésimo dígito menos significativo da parte inteira de XN.;False;8 / 10;355;96;27.04%
2669;Laboratório de Biotecnologia;Strings;10;"Uma cadeia ponderada é definida sobre um alfabeto Σ e uma função f que atribui um peso a cada caractere do alfabeto. Assim, podemos definir o peso de uma cadeia s como a soma dos pesos de todos os caracteres em s.

Vários problemas da bioinformática podem ser formalizados como problemas em cadeias ponderadas. Um exemplo é a espectrometria de massa de proteínas, uma técnica que permite identificar proteínas de forma bastante eficiente. Podemos representar cada aminoácido por um caractere distinto e uma proteína é representada pela cadeia de caracteres relativos aos amino ácidos que a compõe.

Uma das aplicações da espectrometria de massa de proteínas são buscas em bancos de dados. Para isso a cadeia que representa a proteina é dividida em subcadeias, a massa de cada subcadeia é determinada, e a lista de massas é comparada com um banco de dados de proteínas. Um dos desafios para essa técnica é lidar com cadeias muito grandes de caracteres, que podem ter várias possíveis subcadeias. A quantidade de subcadeias selecionadas é fundamental para obter bons resultados.

Em seu primeiro dia de estágio em um renomado laboratório de biotecnologia, Carlos recebeu a tarefa de determinar, para uma cadeia s, a quantidade de pesos distintos encontrada ao avaliar os pesos de todas as subcadeias não vazias de caracteres consecutivos de s.

Carlos não conseguiu pensar em uma solução eficiente para essa tarefa, mas felizmente ele conhece o grupo ideal para auxiliá-lo.

Considerando que s é formada por letras minúsculas e cada letra tem um peso diferente entre 1 e 26: a letra a tem peso 1, a letra b tem peso 2 e assim por diante. Mostre que seu time é capaz de ajudar Carlos a impressionar seu supervisor logo na primeira semana, com uma solução capaz de lidar facilmente com as maiores cadeias de caracteres existentes.";Apenas uma linha, que contém a cadeia s formada por letras minúsculas, cujo comprimento | s | satisfaz 1 ≤| s |≤ 105.;Seu programa deve produzir uma única linha com um inteiro representando a quantidade de pesos distintos das subcadeias não vazias de caracteres consecutivos de s.;False;10 / 10;1934;161;8.32%
2670;Máquina de Café;Iniciante;3;"O novo prédio da Sociedade Brasileira de Computação (SBC) possui 3 andares. Em determinadas épocas do ano, os funcionários da SBC bebem muito café. Por conta disso, a presidência da SBC decidiu presentear os funcionários com uma nova máquina de expresso. Esta máquina deve ser instalada em um dos 3 andares, mas a instalação deve ser feita de forma que as pessoas não percam muito tempo subindo e descendo escadas.

Cada funcionário da SBC bebe 1 café expresso por dia. Ele precisa ir do andar onde trabalha até o andar onde está a máquina e voltar para seu posto de trabalho. Todo funcionário leva 1 minuto para subir ou descer um andar. Como a SBC se importa muito com a eficiência, ela quer posicionar a máquina de forma a minimizar o tempo total gasto subindo e descendo escadas.

Sua tarefa é ajudar a diretoria a posicionar a máquina de forma a minimizar o tempo total gasto pelos funcionários subindo e descendo escadas.";A entrada consiste em 3 números, A1 , A2 , A3 (0 ≤ A1 , A2 , A3 ≤ 1000), um por linha, onde Ai representa o número de pessoas que trabalham no i-ésimo andar.;Seu programa deve imprimir uma única linha, contendo o número total de minutos a serem gastos com o melhor posicionamento possível da máquina.;False;3 / 10;10654;3566;33.47%
2671;Decodificando o Texto;Estruturas e Bibliotecas;9;"Seu colega teve uma ideia brilhante para codificar um texto, ele usará uma árvore binária (quase-)completa com o texto distribuído na largura, e apresentará o resultado de um percurso em ordem simétrica na árvore. Veja o exemplo, codificando: ""Um texto simples"".

                

O resultado que obteremos no percurso será: ""sot mseiUmxp lte"".

O problema é que apesar de codificar facilmente os textos, ele não consegue decodificá-los, e pediu para você um algoritmo que receba um texto codificado e o decodifique.";A entrada contém vários casos de testes, cada caso de teste começa com o inteiro N (0 < N < 200), indicando a quantidade de caracteres do texto (somente caracteres do padrão ASCII imprimíveis), na próxima linha haverá um texto com N caracteres. Os casos de testes terminam com N = 0.;Para cada caso de teste, em uma linha única, imprima o texto decodificado.;True;9 / 10;300;44;14.67%
2672;Máscara de Rede;Ad-Hoc;7;"No protocolo IP (Internet Protocol) de endereçamento de rede, um endereço IP conta, também, com um número chamado ""Máscara de Rede"". A máscara de rede serve para que, dentro do universo de endereços IPs possíveis, uma rede seja isolada em um grupo fechado. Considere o seguinte endereço de rede: IP: 192.168.79.74 Máscara: 255.255.252.0.

O endereço em si é um endereço de 32 bits, que aqui separamos em 4 blocos de 8 bits para uma leitura mais fácil, o mesmo vale para o endereço da máscara. Vamos escrever estes endereços na forma binária:

IP:      11000000.10101000.01001111.01001010
Máscara: 11111111.11111111.11111100.00000000


Podemos ver que os primeiros 22 bits da máscara de rede são 1s, e os 10 bits restantes, são 0s. Muitas vezes este endereço é representado como: 192.168.79.74/22, por conta de seus 22 bits 1s da máscara de rede. Para este exemplo a rede exclusiva a qual este endereço pertence é definida pelos 22 primeiros bits do endereçamento, todas as máquinas pertencentes a esta rede tem nos seus primeiros 22 bits os mesmos valores. Cada máquina pertencente à rede irá utilizar cada um dos 10 bits finais para definir um endereço exclusivo para si mesmo. Neste caso, esta rede poderá definir 210 endereços para suas máquinas (na realidade 210 - 2, pois 2 deles são reservados), que vão desde: 11000000.10101000.01001100.00000000 (192.168.76.0) a 11000000.10101000.01001111.11111111 (192.168.79.255). Estes dois endereços específicos são reservados, o primeiro representa endereço da rede em si, e o último representa o endereço de broadcast, restando, portanto, 1022 endereços possíveis para cada uma das máquinas.

A você foi pedido que, a partir de um endereço IP com máscara (que pode ser em ambos formatos), apresente as informações da rede: seu endereço, endereço de broadcast e quantidade possível de máquinas na rede.";"A entrada contém vários casos de testes, cada caso de teste ocupa uma linha e representa um endereço IP e sua máscara de rede, podendo ser em dois formatos. Endereço e máscara na forma de 4 blocos de bytes com um espaço separando o IP e a máscara: ""IP1.IP2.IP3.IP4 M1.M2.M3.M4"" com 0 ≤ IP1,IP2,IP3,IP4,M1,M2,M3 ≤ 255 e 0 ≤ M4 ≤ 252, com a restrição de que o número formado pelos blocos da máscara de rede represente um número de 32 bits onde os bits 1s (todos) estão à esquerda dos bits 0s (todos); ou no formato ""IP1.IP2.IP3.IP4/M"", os mesmos limites impostos aos blocos do IP, e 0 ≤ M ≤ 30. Os casos de teste terminam com o fim das entradas.";"Para cada caso de teste, a saída será apresentada em três linhas, a primeira linha contendo a frase: ""Endereco de rede: "" seguido do endereço da rede no formato de 4 blocos decimais; na segunda linha a frase: ""Endereco de broadcast: "" seguido do endereço de broadcast para a rede no formato de 4 blocos decimais; na terceira linha a frase: ""Numero de maquinas: "" seguido do número que representa a quantidade de endereços que podem ser atribuídos às máquinas desta rede. Após as três linhas impressas de um caso de teste deve ser impressa uma linha em branco, inclusive após o último caso de teste.";False;7 / 10;107;42;39.25%
2673;Resistores Série e Paralelo;Ad-Hoc;8;"Uma associação de resistores sempre resulta em um resistor equivalente. Esta associação pode ser em paralelo, em série ou híbrida. Veja exemplo de uma associação em paralelo:

                

Esta associação em paralelo é equivalente a um resistor de 10Ω. Também podemos considerar associações em série, como o exemplo abaixo, que resulta em uma resistência equivalente de 40Ω.

                

Por fim, uma associação híbrida, com série e paralelo. A associação abaixo resulta em 50Ω.

                

Para melhor representar uma associação vamos considerar a resistência equivalente Req de uma associação em série entre os resistores R1 e R2 representada como: Req = R1 - R2. Da mesma forma para a associação em paralelo: Req = R1 | R2. Não existe precedência entre as associações, exceto quando explícito por parêntesis, por exemplo: R1 - R2 | R3 é equivalente a (R1 - R2) | R3, e R1 | R2 - R3 é equivalente a (R1 | R2 - R3. Estes dois circuitos podem ser desenhados, respectivamente, como:

                

Desta forma uma associação híbrida é representada por uma expressão que segue a seguinte regra, considerando R o valor nominal de uma resistência em Ohms (Ω):

exp := R;
exp := exp - exp;
exp := exp | exp;
exp := ( exp ).

O circuito híbrido da terceira figura acima poderia ser representado pela expressão:

Req = 20 - (20 | 20) - 20 = 50

A você foi solicitado um programa onde, dada a expressão de uma associação, calcule a resistência equivalente.";A entrada contém vários casos de testes, cada caso de teste ocupa uma linha de no máximo 300 símbolos (não existe espaço em branco) e representa uma expressão válida de associação de resistores, onde cada valor de resistor é representado por um inteiro R (0 < R < 10000). O fim dos casos de testes coincide com o fim das entradas.;Para cada caso de teste, espera-se em uma linha única o valor da resistência equivalente com três casas decimais.;True;8 / 10;109;35;32.11%
2674;Super Primos: Ativar!;Iniciante;6;A Associação dos Primos Indivisíveis elegeu uma categoria de números primos chamados de Super Primos. Um número é considerado super primo se além de ser primo, todos os seus dígitos são primos, também. A Associação lhe solicitou que fizesse um programa para caracterizar os números.;A entrada contém vários casos de testes, cada caso de teste é um número inteiro N (0 < N < 105) em uma linha única. A entrada termina no último caso de teste.;"Para cada caso de teste espera-se, em um linha única, a classificação do número da entrada, que pode ser: ""Super"", se o número for Super Primo; ""Primo"" se o número por um número primo apenas; ou ""Nada"" se o número possuir divisores além do 1 e ele mesmo.";False;6 / 10;5538;1296;23.40%
2675;Rouba Monte;Ad-Hoc;6;A dificuldade de filho único (principalmente antes do advento dos video-games) é brincar sozinho, para tanto surgiram os jogos de paciência. Um deles é o Rouba Monte que o Dr. Silvano Barbosa de Campos inventou para brincar com N cartas numeradas de 1 a N. Você recebe estas cartas embaralhadas, e deve pegar uma a uma e colocá-las em um monte, mas só pode colocar uma carta no monte, se a carta que estiver no topo do monte for menor que esta, caso contrário você vai roubando do monte cartas até achar uma menor. No final sua pontuação é a soma das cartas que roubou. Como este jogo estava cansativo, foi solicitado a você uma algoritmo que, dada a sequência de cartas, indique o soma que você terá roubado.;A entrada contém vários casos de testes, cada caso de teste contém duas linhas, na primeira o número N (0 < N ≤ 105) (90% dos casos de entrada são 0 < N ≤ 1.000) indicando a quantidade de cartas. Na segunda linha N valores, numerados de 1 a N em uma ordem qualquer. Os casos de teste terminam com o fim da entrada.;Para cada caso de teste, um valor indicando a soma que receberá no final do jogo em uma linha.;False;6 / 10;414;140;33.82%
2676;Cidade no Centro;Grafos;7;Seu colega, vendedor mascate, possui um cartel de clientes em um conjunto de cidades interligadas por rodovias. Ele precisa escolher uma cidade para morar. O que ele quer é que a cidade fique aproximadamente no centro do conjunto. Ele pediu a você que indique qual a cidade que fica no centro. A cidade é dita localizar-se no centro, se a soma da distância desta para todas as demais é a mínima possível. As rodovias que interligam as cidades não possuem cruzamentos, somente se encontram nas cidades em si. E é garantido que todas as cidades são atingíveis a partir de qualquer outra usando uma ou um conjunto de estradas.;A entrada é composta de vários casos de teste. Cada caso de teste inicia com dois valores inteiros positivos: N e R, onde 0 < N ≤ 100 o número de cidades, e 0 ≤ R ≤ 4950 o número de rodovias que interligam as cidades. Em seguida são R linhas contendo três valores inteiros positivos: A, B e D, separados por um espaço em branco cada. A e B são duas cidades distintas 0 < A ≠ B ≤ N. As N cidades são numeradas de 1 a N inclusive. D é a distância entre A e B através de uma estrada que liga ambas, 0 < D < 1.000. Os casos de teste terminam com N = R = 0.;"Para cada caso de teste deve ser impresso na saída o número da ""Cidade que fica no centro"". Se houver mais de uma cidade nestas condições, devem ser listadas todas, em ordem crescente do número da cidade. Sempre haverá um único espaço em branco após cada número de cidade, inclusive da última.";False;7 / 10;279;103;36.92%
2677;Par ou Ímpar;Paradigmas;8;"O jogo, para duas pessoas, apresenta uma sequência com N valores pares e N valores ímpares, sendo N, em si, um número ímpar. Esta sequência está arranjada de forma aleatória. Cada rodada um jogador escolhe um número de uma das pontas. No final, quem ficar com mais números pares, ganha. Por exemplo, considere o seguinte arranjo (com três pares e três ímpares):

4 1 8 11 2 7

O primeiro jogador consegue vencer, obtendo todos os três valores pares para si. Mas se o arranjo fosse o seguinte:

5 8 4 7 6 3

O primeiro jogador, considerando que ambos joguem para obter o melhor êxito, irá vencer com apenas 2 valores pares. Querendo sempre o melhor resultado, o inventor do jogo pediu que você fizesse um programa que já previsse com quantos valores pares, o primeiro jogador vence, considerando que ambos joguem pelo melhor êxito.";A entrada possui vários casos de teste, cada caso de teste ocupa 2 linhas, na primeira linha um valor N inteiro ímpar, 0 < N < 500, na segunda linha, 2N números inteiros, sendo N pares e N ímpares, em um arranjo qualquer, cada valor está no intervalo [0..10000]. Os casos de teste terminam com N = 0.;Para cada caso de entrada deve ser impresso em uma linha única o número de valores pares que o primeiro jogador irá ficar, se ambos jogadores jogarem para o melhor êxito.;False;8 / 10;935;207;22.14%
2678;Discagem de Voz;Strings;6;"Desde os telefones de discagem analógica, era costume em alguns países associar aos números de discagem algumas letras, de forma que poderia-se atribuir a um número de telefone, uma palavra de fácil memorização. Este tipo de associação podemos ver na figura abaixo, que representa o ""discador"" de um telefone digital:

                

                Esta prática não é muito comum no Brasil, mas existem algumas empresas que utilizam, um exemplo é uma empresa seguradora, que divulga como número de telefone: ""333-PORTO"". Fazendo uma associação entre letras e números, o número real de telefone é: ""33376786"" (o símbolo '-' é descartado). Atualmente como os telefones aceitam discagem por voz, ao ditar um número memorizado com letras e palavras, é preciso de uma tradução. A você foi pedido um programa que receba um texto representando um número de telefone e devolva o número real do telefone.";São vários casos de teste, cada caso de teste é uma linha única com um texto com N símbolos ASCII imprimíveis (3 ≤ N ≤ 300), incluindo os símbolos '*' e '#'. Os casos de teste terminam com o fim das entradas.;Para cada entrada a saída é um número de discagem de telefone, em uma linha única, que inclusive pode conter os símbolos '*' e '#' como números de discagem. Qualquer letra deve ser traduzida no número correspondente, quaisquer outros símbolos são simplesmente descartados.;True;6 / 10;1191;343;28.80%
2679;Sucessor Par;Ad-Hoc;1;Para se preparar para os outros problemas, vamos fazer um teste. Dado um número X, retorne o menor número par maior do que X.;Uma linha contendo um número  0 < X < 107.;Uma linha contendo a resposta do problema.;False;1 / 10;2981;2035;68.27%
2680;Folha de Pagamentos;Matemática;8;"Este governo, como todos os anos, está muito preocupado com a folha de pagamentos. Neste ano, porém, a maneira que os pagamentos serão efetuados será trocada. Ao invés de pagar os funcionários como de costumo, a formula utilizada para calcular os salários será mais simples: A soma dos divisores do número de matrícula do funcionário.

Para evitar fraudes, ajude o governo a fazer este cálculo!";A entrada começa com uma linha com um número 1 <= N <= 104 que é o número de funcionários. Cada uma das N linhas seguintes representa um funcionário através de seu numero de matrícula 1 <= M <= 108.;A saída consiste de N linhas, cada uma contendo o salário do funcionário na ordem que foram incluídos na entrada.;False;8 / 10;870;271;31.15%
2681;Macacos da Torre de Hanoi;Matemática;7;"O problema da torre de Hanoi é super famoso, entretanto poucas pessoas sabem a lenda original: Diz-se que macacos foram responsabilizados a resolver o problema e que quando eles terminarem, o mundo acaba.

O problema consiste de 3 pinos, e que no primeiro pino existe uma pilha de discos, um maior do que o outro, empilhados. Como se sabe, não é permitido colocar um disco maior em cima do menor. Ou seja, para transferir certo disco, é necessário remover todos os menores anteriormente. Além disso, só é permitido mover um disco por vez.

O problema é resolvido quando todos os discos do primeiro pino são transferidos para o terceiro pino.

Sabe-se que os macacos começaram a trabalhar a meia noite (00:00), e que eles trabalham 24hs por dia sem parar e demoram, no mínimo, 1 segundo para movimentar cada disco. Sua tarefa é prever em qual horário do dia ou da noite, no formato hh:mm:ss, do tempo mínimo que eles podem terminar.";A entrada consiste em uma única linha contendo um número 0 < X < 1040, que é o número de discos que os macacos tem que movimentar.;A saída consiste em um string no formato A:B:C, onde 0 <= A < 24 e 0 <= B, C < 60;False;7 / 10;351;104;29.63%
2682;Detector de Falhas;Ad-Hoc;5;"Existe uma máquina, que produz uma sequência crescente de números. Isto é, cada número da sequência deve ser maior que o anterior.

Entretanto, a máquina começou a dar problemas. Quando ela liga, tudo está ok. Mas em determinado momento, ela produz um valor errado.

Sua tarefa é, quando a máquina produzir o primeiro errado ou desligar, ignorar todos os seguintes e produzir próximo menor número válido.

Como estamos apenas analisando a máquina, não podemos desligá-la, e precisamos esperar ela desligar sozinha. Ou seja, devem continuar sendo lidos todos os números até a máquina desligar.";"A entrada consiste de 0 < N < 104 linhas, e termina em EOF.

Cada linha consiste de um único inteiro 0 < X < 230.";Um único linha, contendo um intero Y, solução do problema.;False;5 / 10;3009;840;27.92%
2683;Espaço de Projeto;Grafos;4;"Os engenheiros da UFFS estão estudando a possibilidade de construir túneis subterrâneos por todo o campus. Os lugares onde serão feitos as entradas, como sempre, já vieram escolhidas pelo MEC , e os túneis precisam levar diretamente de uma entrada a outra. Como a licitação já foi finalizada, estas regras acima não podem ser alteradas.

        O projeto original era muito bem feito, e existia uma galeria entre cada par de entradas, que foram feitas de maneira que não se cruzassem, e o custo destas galerias já foi computado. Entretanto, com o corte de verbas, é necessário escolher apenas um subconjunto destas galerias, sem alterá-las, de maneira que exista apenas um caminho de entre cada par de entradas.

        O desafio agora é saber o menor custo e o maior custo possível do projeto, pra poder encaixar no orçamento.";"A primeira linha da entrada consiste de um número 1 <= N <= 106  que é o número de galerias.

        Cada linha seguinte, consiste de três números, 1 <= U, V <= 103 e 1 <= W <= 200. Que são respectivamente, entrada, saída e custo de construição da galeria.";"A saída consiste de duas linhas, ambas contendo um único número.

        A primeira linha deve conter o custo máximo do projeto e a segunda linha deve conter o custo mínimo do projeto.";False;4 / 10;464;253;54.53%
2684;Ajude o Professor Webscript!!;Ad-Hoc;10;"O Professor  Webscript, um dos renomados professores do Instituto Federal de Muzambinho ensina seus alunos a desenvolverem sites totalmente responsivos e práticos, sem a necessidade de  frameworks. Ele auxilia os mais diversos tipos de alunos de toda a escola, mas cansou de ensinar a sintaxe correta das tags("">"" fechar e ""<"" abre ), de maneira correta. Então, para voltar a paz e a tranquilidade que tinha, ele solicita sua ajuda. Haverá diversos tipos de tag, não é necessário textos entres os sinais das tags, seu programa deverá indicar se uma tag foi usada corretamente ou não. Não esqueça que seu programa deverá seguir alguns critérios como no exemplo abaixo.

I - O primeiro parâmetro indica o tipo da tag:
1 - Quando a tag é única.
0 - Quando a tag possui dois pares de sinais;

II - Os sinais como "">"" ou ""<"" só deverão ser usados para indicar o fechamento ou a abertura de uma tag:
0 <p> Home>Download>Sublime </p> -> error
1 <input type=""text"" name=""Next >""> -> error
0 <ul><li>Ola</li></ul> -> Successful
1 <span><br> -> certo
0 <></li> -> error 

Quando inserimos  o parâmetro, só existiram tags do padrão escolhido, por exemplo: se colocarmos 0(Quando a tag possui dois pares de sinais) o programa só vai verificar tags com dois pares de sinais, a mesma coisa acontece quando colocamos 1(Quando a tag é única). Então em uma única tag não haverá os dois tipos.";A entrada contém um inteiro  0 < N < 100 que indica o número situações a serem verificadas. As N linhas seguintes correspondem as situações, cada uma com um inteiro K (0 ou 1) (que será o meio de identificação da(s) tag) e logo em seguida vem uma linha com o código S (0 > S < 200) a ser verificado.;"Como no exemplo dado, verifique se a tag foi usada corretamente. Seu programa deve informar ""Successful!!"" se a sintaxe estiver certa ou ""error"" se estiver faltando alguma coisa. A mensagem deve ser exibida sem as aspas, com o quebra linha no final.
 ";False;10 / 10;458;28;6.11%
2685;A Mudança;Iniciante;5;Júlio está criando um novo Smart Watch especialmente para programadores. É impressionante as vantagens que ele oferece e o conforto pra codar que ele tem. O relógio ainda está em desenvolvimento e ele prometeu consertar os bugs e colocar uns apetrechos melhores e, em troca, pediu um sistema simples para o modo Standy Bay. O problema é que o relógio por si só sempre tem o ângulo de inclinação do Sol/Lua(de 0 a 360). Valendo um relógio, caso deseja aceitar: dada em grau da inclinação do Sol/Lua, informe em qual período do dia ele se encontra.;A entrada contém um número inteiro M (0 ≤ M ≤ 360) representando o grau do Sol/Lua. Como a posição muda constantemente seu programa receberá diversos casos a cada segundo(EOF).;"Imprima uma saudação referente ao período do dia que ele se encontra: ""Boa Tarde!!"", ""Boa Noite!!"", ""Bom Dia!!"" e ""De Madrugada!!"".";True;5 / 10;2860;744;26.01%
2686;A Mudança Continua!!;Iniciante;5;Novamente Júlio pede sua ajuda, ele esqueceu de um pequeno detalhe. Como o seu o programa anterior só informava uma saudação, ele pediu que transformasse o grau do Sol/Lua em HH:MM:SS. Então caso aceite: dado um grau relativo a posição do Sol/Lua, refaça o sistema só que agora além da saudação de cada período do dia, informe exatamente as horas, os minutos e segundos.;A entrada contem um pontos flutuantes M (0 ≥ M < 360) representando a posição, em graus,do Sol/Lua em relação a terra. Como eles andam em constante movimento seu programa receberá diversos casos a cada segundo(EOF).;"Imprima qual período do dia ele se encontra: ""Boa Tarde!!"", ""Boa Noite!!"", ""Bom Dia!!"" e ""De Madrugada!!"", e na linhas de baixo exiba as horas, minutos e segundos (HH:MM:SS).";True;5 / 10;630;218;34.60%
2687;Dominação Bacteriana;Iniciante;4;"O Instituto Federal do Sul de Minas (IF), campus Muzambinho abriu vagas para o novo curso superior: Medicina veterinária. A coordenadora do curso já previa alguns problemas com as bactérias estudadas, pois é inevitável que um pote com bactérias caia no chão. Se isso acontecesse, seria difícil controlá-las pois para aplicação do antídoto é necessária uma proporcionalidade, além disso precisa ser jogado ao redor da bactéria, matando de fora para dentro.

Além de uma quantidade exata, o antídoto tem que ser jogado ao redor da bactéria, por isso a área da bactéria precisa ser calculada para que a coordenadora possa aplicar a dose certa. A areá de uma bactéria é dada em um grid(x,y) e nele a coordenadora marca a borda da bactéria representados por 1. A partir disso a área da bactéria é dada pelo (perímetro(borda(1)) + o conteúdo(o lado de dentro da borda ou seja quantidade de zeros cercados por 1) dividido por dois, uma média simples.

Por sua boa reputação, pediu a você para desenvolver um aplicativo que resolva esse problema. Valendo alguns pontos extra, desenvolva o algorítimo capaz de calcular a área dominada pela bactéria, que por sinal possui formatos muitos bizarros, esboçada pela coordenadora, para que a aplicação do antídoto tenha resultado.";A entrada possui Q(0 < Q < 100) quantidades de bactérias expostas, e em seguida uma pequena descrição da área, composta de um inteiro L (0 < L < 15) indicando a largura e altura do grid e por último  o grid(LxL) com o desenho da borda da bactéria.;Como informado, exiba a área dominada com duas casas decimais.;False;4 / 10;212;98;46.23%
2688;Escolhendo um Lugar;Grafos;10;"As refeições do refeitório do Instituto Federal do Sul de Minas (IF), campus Muzambinho são uma delícia, todos os dias os estudantes esperam ansiosamente para degustar suas delícias. Webscrit Junior (WBJ), sempre é um dos últimos da fila e encontra o refeitório quase lotado, só com algumas cadeiras vagas. Como WBJ é muito observador ele anda pelos corredores, procurando lugares disponíveis para sentar. Um lugar onde ele possa sentar é a cadeira disponível onde a média da altura das pessoas adjacentes daquele lugar seja menor que o tamanho de WBJ e sempre o mais perto da saída (que se encontra na linha 1 coluna 8, indicado na figura pelo numero 77. O número 77 foi adicionado apenas para facilitar a visualização). Todo esse cuidado para depois correr nos espaços livre, e não perder nenhum segundo da sua matéria preferida (AED).

Abaixo temos um exemplo do refeitório vazio:



Atenção:
- A prioridade é a cadeira que tenha a média dos adjacentes menor que a altura e o menor caminho até a saída;
- Não existem lugares disponíveis nas paredes (88), nos espaços fora do refeitório (11) ou nos últimos lugares da mesa (nas quinas); não se tem uma boa visualização do refeitório sentando nas quinas;
- A cada cadeira que WEJ passa é considerado 1 passo;
- Não haverá empates, sempre terá uma cadeira que atende os requesitos;
- Os ""00"" da figura servem para mostrar onde as cadeiras ficam, APENAS para facilitar visualização;
- A saída do refeitório é fixa, sendo sempre na posição [Linha 1 | Coluna 8]. Na imagem, essa cordenada contém o numero 77 apenas para facilitar a visualização do refeitório.
- Assim como a saída é sempre fixa o tamanho do refeitório (13x13) também é fixo;
- Os adjacentes da cadeira são todas as cadeiras que estão ao redor;
- A saída (1,8) será sempre uma parede;

Pegando a entrada abaixo como exemplo temos:
-  Cadeira 1 com posição (L = 3 | C = 3);
-  Cadeira 2 com posição (L = 6 | C = 6);
-  Cadeira 3 com posição (L = 8 | C = 12);
* a contagem começa apartir do um.

Suponhamos que a cadeira 1 e 2, citadas a cima (como base), atende os critérios da média de seus adjacentes. Podemos concluir que a cadeira 1 está mais perto da saída do que a cadeira 2, pois o número de cadeiras que WBJ irá passar até a saída é menor. E é mais perto que a cadeira 3(L = 8 | C = 12) que além de estar na quina da mesa (um local considerável) está longe da saída.

Enquanto está na fila, WBJ resolveu te ligar para que rapidamente o ajude na escolha do melhor lugar.";O programa pede um inteiro A (50 < A < 100) referente a altura de WBJ. Em seguida um breve raio-x de 13x13 do refeitório é informado. Nele contém os possíveis locais onde ele pode se sentar (0), a saída [Linha 1 | Coluna 8], as paredes (88), o patio (11), e os corredores(99). A saída será por EOF.;"Imprima a linha e a coluna da cadeira, ""linha > x coluna > y"", sem aspas, onde a média dos adjacentes dela sejam menor que a altura de WBJ e a distância até a saída seja a mínima possivél.";True;10 / 10;131;9;6.87%
2689;Jogo do Mião;Ad-Hoc;3;"A muito tempo acontece o secreto jogo do mião. Dizem que o jogo é chato e muito difícil pois ninguém conseguiu ganhar o famoso prêmio, mas mesmo assim Webscript Junior (WBJ) decidiu tentar. O jogo funciona da seguinte maneira: um espantalho mostra um quadro com maletas, onde só haverá uma maleta com o mião. Nem mesmo o espantalho lembra em qual maleta o guardou e WBJ só tem uma oportunidade de levar esse ""MIÃO!"" para casa. WBJ pegou o índices das maletas que já foram escolhidas por outros jogadores para ver se existia algum padrão.

Após várias e várias pesquisas, WBJ concluiu que a maleta premiada estava em uma i-ésima posição de uma sequência, então ele apresentou o jogo para alguns amigos para ver como o jogo e o espantalho se comportavam a cada jogada e com isso obter mais informações para sua pesquisa. A informação mais relevante é que, além de sorte, as maletas onde a subtração dos índices é diferente da diferença que mais se repete, serve como padrão para definir quais são as possíveis maletas premiadas.

Para uma precisão mais correta WBJ pediu sua ajuda, ele quer um programa que gere uma listas com os índices das maletas onde possivelmente estaria o prêmio. Ele te da 9 maletas em um grid(3x3), seu programa gera a lista e ele só precisa acertar o número da maleta, dentro das possíveis maletas que ele teria como referência gerada pelo seu programa.

Por exemplo:
Vamos supor que as maletas que WBJ escolheu foram:
78 7 8
9 7 8
8 7 9

A diferença é calculada da seguinte forma: o primeiro elemento é calculado com o próximo, e os outros dois com o seu anterior ignorando o sinal, desse modo a diferença entre as maletas fica assim:

71 71 1
2 2 1
1 1 2

O primeiro número é resultado de 78 menos 7, o segundo é 7 menos 78, e o terceiro é 8 menos. O processo se repete nas demais linhas. Então concluímos que a diferença que mais se repete é o número 1. O próximo passo é verificar se a diferença entre os números não é a que mais se repete. A diferença para o primeiro número é calculado com o segundo e terceiro, a diferença do segundo número é calculado com o primeiro e o último, logo a diferença do último com os dois anteriores. Caso o resultado dessas diferenças seja 1, o número não é exibido, por exemplo: o segundo número menos o terceiro das maletas que WBJ lhe deu é igual a 1, então o segundo numero não é valido e a mesma coisa acontece com o terceiro. O resultado final fica assim:

Possiveis maletas: 78;";WBJ deixou P listas com uma área 3x3, onde ele tem certeza que a maleta premiada estará nela. São três linhas, cada linha com três números inteiros menores que 100.;"Com isso pediu para você ver as possíveis maletas. Exiba uma mensagem ""Possíveis maletas: "" e logo em seguida as maletas selecionadas, separadas por "","" e no final um "";"" e o quebra linha.";False;3 / 10;115;55;47.83%
2690;Nova Senha RA;Iniciante;5;"Um novo conjunto de autenticação será implementado no Instituto Federal do Sul de Minas, campus Muzambinho.

Bom, o novo serviço de autenticação é seguro, sem bugs e dores de cabeça mesmo porque estamos no final de semestre. Ele permitirá que sua senha tenha espaços, mas não números ou caracteres especiais. A atualização ocorre sempre no período de férias, para que todos os ajustes sejam feitos e no final agrade todos os usuarios. Como estagiário da central de suporte da escola, seu dever é implementar a nova autenticação. Por enquanto o novo padrão para nomes de usuários está sendo estudado.


	

Como podemos perceber para cada conjunto de letras teremos um numero especifico. Bole um programa maroto para fazer essa conversão das letras para os números, e como você não acessará as senhas dos alunos, faça um algoritmo para que o mesmo faça o processo sozinho usando seus proprios casos de teste.

Obs : Seus casos de teste não poderão passar de 20 caracterese e a saída, 12 digitos.";Você terá N indicando a quantidade de senhas que serão trocadas, em seguida N casos de testes.;A saída será uma lista com os novos números, criptografados das senhas que foram digitadas.;True;5 / 10;1558;579;37.16%
2691;O Matemático;Strings;3;No Instituto Federal do Sul de Minas, na cidade de Muzambinho, há um matemático realizando uma pesquisa maluca. Ele está prestes a encontrar a fórmula da juventude. Depois de vários testes ele descobriu dados que o deixaram maluco, um deles foi que: quanto mais você coda mais ele rejuvenesce. Por enquanto a fórmula está em desenvolvimento e ele te contratou para ajudá-lo na pesquisa, pois após tanto trabalho esqueceu-se de alguns princípios da matemática, como metade da tabuada, e pediu para você construir a tabuada com os números que ele precisa. ;O primeiro número N é um inteiro indicando quantas vezes seu programa será testado. Em seguida mais dois inteiros X e Y que serão os números a ser multiplicados.;"Seu programa deve exibir a multiplicação dos dois números, exceto quando forem iguais, nesse caso sem os ""&&"".";False;3 / 10;1534;642;41.85%
2692;Teclado Zoeiro;Strings;4;"E aí, preparado? Mais uma vez precisamos da sua ajuda! Depois de algumas trocas de aparelhos, e manutenções no prédio da informática, os teclados do IF (IFSULDEMINAS) sofreram uma brincadeira de mau gosto na formatação do teclado, suas teclas estão trocadas. Como os computadores do IF são preparados para receber qualquer software, desenvolva o mais rápido possível um programa que converta as frase da forma correta.

Observação: o teclado trocara todas as teclas do teclado, por isso todos caracteres são aceitos.";Terá dois inteiro N e M indicando respectivamente: o número de letras que foram trocadas e as frases que foram inscritas. Em seguida E e S, que são as M transformações que ocorrem no teclado.;Imprima o mais rápido possível a frase correta.;False;4 / 10;2021;803;39.73%
2693;Van;Estruturas e Bibliotecas;4;Depois de um belo dia de aula é função das vans levarem os estudantes para suas respectivas casas. Mas o que muitos não sabem é que além dos gastos e manutenção da van o motorista precisa ter uma rota para entregar os passageiros em suas casas. Como você é o menino(a) da informática, ele pediu sua ajuda para desenvolver essa rota ordenando os alunos pela distância(da menor para a maior), pela região (em ordem alfabética) e por último pelo nome. ;"Ele te dá a quantidade Q de alunos que não faltaram, o nome do aluno A e uma sigla para a região onde ele mora S (""L"" Leste, ""N"" Norte, ""O"" Oeste, ""S"" Sul), e C que representa o custo da entrada da cidade até sua casa. A saída dos casos será (EOF).";A saída será uma lista das pessoas na ordem em que devem ser entregadas.;False;4 / 10;1499;808;53.90%
2695;Arrumando Lajotas;Geometria Computacional;10;"Um conjunto de lajotas retangulares, todas tendo a mesma altura H, tiveram seus quatro cantos originais cortados de diferentes maneiras, de modo que duas propriedades ainda fossem mantidas:


1. Cada lajota ainda é um polígono convexo simples.

2. Cada lajota tem dois lados paralelos que são partes do topo e da base dos lados originais do azulejo retangular, o que implica que a altura H foi preservada.


A figura abaixo ilustra dois azulejos antes e depois dos cortes. Os cantos estão destacados com pequenos círculos.



Nós precisamos posicionar todos os azulejos, lado a lado e sem nenhuma sobreposição, em um molde de altura H para transporte. Os azulejos podem mudar de ordem, mas eles não podem ser rotacionados ou refletidos. Como suas formas convexas podem ser diferentes, a ordem na qual nós colocamos os azulejos no molde importa, pois nós queremos minimizar a sua largura. A próxima figura mostra as duas ordens possíveis para os azulejos da figura anterior, a segunda ordem sendo claramente a que minimiza a largura do molde.



Dada a descrição do conjunto de lajotas, seu programa deve calcular a largura mínima para que um molde de mesma altura que as lajotas contidas nele, lado a lado e sem sobreposições, exista.";"A primeira linha contem um inteiro N (1 ≤ N ≤ 14) representando o número de azulejos. Em seguida teremos N grupos de linhas, cada grupo descrevendo uma lajota, todos elas tendo a mesma altura.

Em cada grupo, a primeira linha contem um inteiro K (4 ≤ K ≤ 104) representando o número de cantos da lajota. Cada uma das próximas K linhas descreve um canto da lajota com dois inteiros X (-108 ≤ X ≤ 108) e Y ( 0 ≤ Y ≤ 108), indicando as coordenadas do canto no plano XY. Os cantos estão dados em ordem anti-horária. O primeiro canto é (0, 0) e o segundo canto é dado na forma (X, 0) para X > 0, este lado sendo a base inferior da lajota. A lajota tem forma de um polígono convexo simples com um lado superior paralelo à sua base.";Imprima uma única linha com um número racional indicando o comprimento mínimo para um molde de mesma altura que as lajotas contidas nele, lado a lado e sem sobreposição O resultado deve ser impresso como um número racional com exatamente três dígitos após o ponto decimal, arredondado se necessário.;True;10 / 10;142;31;21.83%
2697;Sequencia Completa de Naebbirac;Strings;7;"Naebbirac é um jovem marinheiro que se entedia facilmente. Ele gosta de sequências de inteiros, e desenvolveu modos de classifica-las. Naebbirac diz que toda a sequência é completa para um dado inteiro K, se a sequência apenas contem inteiros entre 1 e K, e que cada inteiro entre 1 e K aparece o mesmo número de vezes.

Baseado nisso, Naebbirac criou um jogo para entreter a si e aos seus colegas quando as águas estão calmas e não muito o que possam fazer para passar o tempo no meio do oceano.

Primeiro ele escolhe um inteiro positivo K e então ele usa giz para desenhar no convés uma sequência S contendo N inteiros entre 1 e K. Após isso ele desafia algum de seus camaradas. O objetivo do desafio é transformar a sequência S em uma sequência completa executando uma das três seguintes operações:


	”-x” : remove uma das ocorrências do inteiro x de S;
	”+x”: adiciona um novo inteiro de valor x em S; ou
	”-x +y”: substitui uma ocorrência do inteiro x de S por um inteiro de valor y.


Naebbirac é bem esperto. Ele nunca escreve uma sequência já completa e frequentemente escreve inteiros que não seguem padrão algum, tornando bem difícil encontrar uma operação que resolva o enigma. Um de sus amigos, que frequentemente navega com Naebbirac, está cansado de sempre perder o jogo. Você é capaz de ajudar seu amigo e criar um programa que ache a solução ao enigma proposto antes que eles voltem a velejar?";"A primeira linha contem dois inteiros K (3 ≤ K ≤ 1000) e N  ( 1 ≤ N≤ 104), indicando respectivamente o inteiro que Naebbirac escolheu para começar o jogo e o comprimento da sequencia escrita no convés. A segunda linha contem N inteiros S1, N2,…,SN (1 ≤ S i ≤ K for i = 1, 2, . . . , N) representando a sequência escrita; você pode seguramente assumir que a sequência não está completa.";Imprima uma única linha com a descrição da operação que possibilita o seu amigo ganhar o jogo ou um “*” (asterisco) se não existe maneira de ganhar. A descrição da operação deve seguir o formato mostrado no enunciado, i.e. “-x”, “+x” ou “-x +y”.;False;7 / 10;572;201;35.14%
2698;Dispositivo Assombrado;Iniciante;8;"Em uma recente viagem a uma escavação arqueológica na ilha caribenha de São Basil, você encontrou um misterioso dispositivo com instruções que lembram um enigma. Seu guia local Vibenas diz que caso você resolva o enigma, o dispositivo talvez lhe mostre o local onde um grande tesouro deixado pelo sanguinário pirata Lyerpes está escondido.

O dispositivo tem uma fita com L células indexadas de 0 à L-1. Cada célula possui uma cor que pode ser alterado através dos comandos do dispositivo. Cada cor é codificada como um inteiro, e inicialmente todas as células possuem a mesma cor. As instruções que você encontrou representam N passos que devem ser executados antes do dispositivo mostrar o caminho do tesouro. Cada passo é descrito usando 4 inteiros P, X, A e B. As instruções dizem que para completar um passo você deve contar o número de células que atualmente possuem a cor P. Digamos que este número seja S. Então você deve calcular os valores

M1 = (A + S2 ) mod L ,

M2 = (A + (S + B)2 ) mod L .

Finalmente você deve fazer todas as células no intervalo fechado [min(M1,M2, max(M1,M2)] serem da cor de X.

Após essa exaustiva tarefa de processar os N passos requeridos pelo dispositivo, você tera ainda um trabalho: dada a cor que aparece o maior número de vezes no dispositivo após todos os passos (isto é, a cor mais frequente), você deve ir ao local do naufrágio do navio de Lyerpe e dizer em voz alta o número de celulas que possuem tal cor. Note que este número é único mesmo se mais de uma cor aparecer o maior número de vezes no dispositivo após todos os passos.

Realizando todos estes cálculos no dispositivo levariam gerações, mas você, um renomado programador, pode criar um programa que rapidamente indica a resposta para o enigma. Após isso, o verdadeiro desafio será encontrar o local do naufrágio do velho navio de Lyerpes.";O primeiro número contem três inteiros L, C e N (1 ≤ L, C, N ≤ 105 ), representando respectivamente o número de celulas na fita, o número de cores disponíveis e o número de passos nas instruções. Cores são identificadas por inteiros distintos indo de 1 à C e inicialmente todas as células contem 1 cor. Cada uma das próximas N linhas descreve um passo das instruções com 4 inteiros P, X, A e B (1 ≤ P, X ≤ C and 0 ≤ A, B ≤ 108 ), indicando respectivamente a cor a qual o número de celulas é usado para decidir o intervalo dos valores usado para calcular os limites como acima descritos.;Dado uma cor que aparece o maior número de vezes na fita do dispositivo após realizar a sequência de passos descrita na entrada, imprima uma única linha com um inteiro que indica o número de células contendo aquela cor.;False;8 / 10;206;77;37.38%
2699;Enigma;Iniciante;5;"O famoso pirato Cornelius “Cabeça Queijosa” Bakker foi um renomado astrônomo e matemático. Ele enterrou a maioria de seus tesouros na ilha caribenha de São Basil, onde o Pico Colombo é um conhecido marco geográfico. Cabeça Queijosa desapareceu quando sua frota de três navios foi pega em um furacão em 1617. Talvez por algum tipo de premonição, antes de sua excursão fatal, ele escreveu em uma carta para uma de suas sobrinhas na Holanda a distância exata ao seu tesouro oculto, partindo Pico Colombo em direção sul.

Preocupado que seu mapa pudesse acabar nas mãos erradas, “Cabeça Queijosa” usou suas habilidades em matemática como seguro contra ladrões. Em vez de escrever na carta o número indicando a distância, ele multiplicou-o por um segundo número N, e escreveu o resultado D na carta, junto com o valor de N e uma explicação de como o cálculo deveria ser feito. Ele sabia que mesmo se uma pessoa indesejada obtivesse a carta, ela deveria saber como dividir dois números, coisa que poucos criminosos conseguiam fazer naquele tempo. Infelizmente, quando a carta chegou em seu destino na Europa, a sobrinha de Cabeça Queijosa havia entrado em um convento e nem se importou em abrir a carta.

Exatamente quatro séculos após o ocorrido, Maria por ventura veio a obter um baú com os pertences de sua ancestral freira. E você pode imaginar sua surpresa quando ela descobriu a carta, ainda lacrada! Maria está planejando uma viagem para buscar o tesouro de Cabeça Queijosa, mas ela precisa de sua ajuda. Apesar do valor de N estar intacto e ela poder lelo, o número D foi parcialmente comido por traças de forma que apenas alguns dos dígitos estão visíveis . A única pista que Maria tem é que o digito mais à esquerda de D não é zero pois Cabeça Queijosa disse em sua carta.

Dada a representação parcial de D e o valor de N, você deve determinar o menor valor possível de D de forma que este seja um múltiplo de N e que não comece com zeros.";"A entrada consiste de uma única linha que contem uma string S não vazia com no maximo 1000 caracteres e um inteiro N (1 ≤ N ≤ 1000). Cada caractere de S é ou um digito ou o caractere “?” (question mark); o digito mais à esquerda não é “0” e no mínimo um caractere de S é “?”.";Imprima uma única linha com um inteiro D, que não comece com zeros, indicando o menor múltiplo de N que possua |S| dígitos e cujos dígitos em S coincidam com os dígitos correspondentes em D. Caso não exista tal inteiro D, imprima um “*” (asterisco) para a saída.;False;5 / 10;311;152;48.87%
2700;Angariando Fundos;Iniciante;9;"Uma politica de prestígio visando a presidência no próximo ano está planejando um evento para angariar fundos para sua campanha. Ela possui uma lista de pessoas abastadas no país e quer convidá-los de uma forma a maximizar seus fundos.

Algumas vezes os ricos e abastados tem comportamentos fúteis e não gostam da ideia de alguém mais rico ou bonito do que eles existir. Toda vez que alguém assim encontra uma pessoa rigorosamente mais bonita, mas não rigorosamente mais rica, então uma discussão começa. Similarmente, se eles encontram uma pessoa que é rigorosamente mais rica mas não rigorosamente mais bonita uma discussão também começa. Essas duas situações são as únicas causas possíveis de discussões entre dois indivíduos. Assim, duas pessoas nunca discutirão caso uma seja estritamente mais bonita e mais rica que a outra. Também não ocorrem discussões quando ambas as pessoas são igualmente ricas e igualmente bonitas.

Como a nossa presidenciável gostaria de garantir o máximo de dinheiro possível, discussões devem ser evitadas a qualquer custo, pois poderiam arruinar a campanha ou o evento. Dado as características de algumas pessoas abastadas no país, você deve encontrar uma lista de convidados que maximize as doações enquanto garanta que nenhuma discussão ocorra no evento.";A primeira linha contem um inteiro N (1 ≤ N ≤ 105 ) representando o número possível de convidados. Cada uma das próximas N linhas descreve um possível candidato com três inteiros B, F e D (1 ≤ B, F, D ≤ 109 ), indicando respectivamente seu nivel de beleza, sua fortuna e quanto esta pessoa doaria caso fosse convidada.;Imprima uma única linha contendo um inteiro que indica a soma máxima de doações possíveis para uma lista de convidados que não gere discussão alguma durante o evento.;False;9 / 10;669;101;15.10%
2701;Portas da Incerteza;Ad-Hoc;8;"Uma porta NAND (porta AND negada) é um circuito digital que produz uma saída que é falsa apenas se todas as entradas são verdadeiras; em outras palavras, a saída de uma porta NAND é o oposto para a saída de uma porta AND para as mesmas entradas. A seguinte figura mostra o símbolo usual de uma porta NAND de duas entradas e sua tabela verdade resultante, usando 1 para verdade e 0 para falso.

			  

Neste problema nos temos uma árvore binaria representado o circuito composto apenas por portas NAND de duas entradas. Em uma árvore, cada nó interno representa uma porta NAND, a qual usa como entrada os valores produzidos pelas suas filhas. Cada folha na árvore representa uma entrada externa ao circuito, e é um valor em {0, 1}. O valor produzido pelo circuito é o valor produzido pela porta na raiz da árvore. A seguinte imagem mostra um circuito com 9 nós, o dos quais 4 são portas NAND e cinco são entradas externas.



Cada porta no circuito pode estar emperrada, quer dizer que ela apenas produzem 0 ou apenas produzem 1 independente das entradas do portão. Um padrão teste é um array de valores associados às entradas externas de forma que o valore produzido pelo circuito está incorreto devido ao emperramento de uma das portas.

Dada uma descrição do circuito, você deve escrever um programa que determine o número de maneiras diferentes de escrever um padrão de testes para o circuito.";A primeira linha contem um inteiro N (1 ≤ N ≤ 105 ) representando o número de portas no circuito, o qual possui forma de uma árvore binaria. Portas são identificadas por inteiros distintos indo de 1 a N, porta um sendo a raiz da árvore. Para i = 1, 2,…,N, o i-ésimo das próximas N linhas descreve a porta i com três inteiros X, Y e F (0 ≤ X, Y ≤ N e −1 ≤ F ≤ 1). Os valores X e Y indicam as duas entradas da porta. Se X = 0 a primeira entrada é proveniente de uma entrada externa, senão a entrada é a saída produzida pela porta X. Analogamente, se Y = 0, a segunda entrada é uma entrada externa, senão a entrada é a saída produzida pela porta Y. O valor de F representa o estado da porta: -1 significa que a porta está normal, 0 significa que ela está emperrada em 0, e 1 significa que a porta está emperrada em 1.;Imprima uma única linha com um inteiro indicando o número de maneiras diferentes de padrões teste para o dado circuito. Devido à possibilidade deste número ser muito grande, imprima o resto de sua divisão por 109 + 7.;True;8 / 10;116;44;37.93%
2702;Escolha Difícil;Iniciante;1;"Em um longo voo, companhias aéreas oferecem uma refeição aos seus passageiros. Geralmente as aeromoças conduzem carrinhos contendo as refeições pelos corredores do avião. Quando o carrinho chega em sua fileira, você é questionado imediatamente: “Frango, bife, ou massa?”. Você sabe suas opções, mas você tem apenas alguns segundos para escolher e você não sabe qual a aparência de sua escolha pois seu vizinho ainda não abriu o embrulho…

A aeromoça deste voo decidiu alterar o procedimento. Primeiro ela vai perguntar a todos os passageiros qual sua escolha de refeição, e depois vai checar se o número de refeições disponíveis neste voo para cada escolha é suficiente.

Por exemplo, considere que o número de refeições de frango, bife e massa disponíveis são respectivamente (80, 20, 40), enquanto o número de passageiros que escolheu frango, bife e massa seja respectivamente (45,23, 48). Neste caso, onze pessoas seguramente ficaram sem suas respectivas escolhas de refeição, já que três passageiros que queriam bife e oito que gostariam de massa não poderão ser atendidos.

Dada a quantidade de refeições disponíveis para cada escolha e o número de refeições pedidas para cada escolha, você poderia por favor ajudar a aeromoça a determinar quantos passageiros seguramente não poderão ser atendidos?";A primeira linha contem três inteiros Ca, Ba e Pa (0 ≤ Ca, Ba, Pa ≤ 100), representando respectivamente o número de refeições disponiveis de frango, bife e massa. A segunda linha contem três inteiros Cr, Br e Pr (0 ≤ Cr, Br, Pr ≤ 100), indicando respectivamente o número de refeições requisitadas de frango, bife e massa respectivamente.;Imprima uma única linha com um inteiro representando o número de passageiros que seguramente não receberão sua escolha de refeição.;False;1 / 10;3143;2122;67.52%
2703;Estradas Imperiais;Grafos;9;"As estradas de Cubiconia estão em um estado lastimável, após anos de negligência e falta de manutenção. Cada estrada conecta duas cidades distintas A e B e podem ser viajadas em ambos os sentidos ( de A para B, ou de B para A). Existe no máximo uma estrada entre cada par de cidades, e usando as estradas existentes é possível viajar entre qualquer par de cidades. O novo imperador de Cubiconia aumentou os impostos (novamente!), mas prometeu reparar pelo menos algumas estradas de forma a garantir que todos os Cubiconianos estejam aptos a viajar entre quaisquer duas cidades usando apenas as estradas restauradas.

O departamento de trabalhos públicos tem de calcular os custos de reparo individual de cada rodovia. Agora eles devem calcular o custo mínimo para reparar um ser de rodovias de forma que a promessa do imperador seja verdadeira. Isto não é facil pois o imperador quer que o conjunto de estradas reparadas contenha uma estrada especifica, mas ele ainda não decidiu qual estrada em particular seja inclusa: pode ser a cidade que conecta seu castelo a cidade que sua filha mora, ou a estrada que conecta seu palácio de verão a uma praia, ou ….Temendo que o imperador demore demais para decidir, os engenheiros querem sua ajuda.

Dada a descrição das rodovias de Cubiconia, com seus respectivos custos de reparo, você deve escrever um programa para responder uma série de entradas. Cada entrada ira determinar uma estrada especifica que deve ser reparada e deve determinar o custo mínimo para reparar o conjunto de estradas ( incluindo a estrada especificada ) de forma que os Cubiconianos estejam aptos a viajar entre todas as cidades usando apenas estradas reparadas.";A primeira linha contem dois inteiros N (2 ≤ N ≤ 105 ) e R (N − 1 ≤ R ≤ 2 × 105 ), representando respectivamente o número de cidades e o número de estradas em Cubiconia. Cidades são identificadas por um inteiro de 1 a N. Cada uma das próximas R linhas descreve uma estrada com três inteiros A, B (1 ≤ A < B ≤ N) e C (1 ≤ C ≤ 104), indicando que existe uma cidade entre A e B e que o custo de reparo é C. Existe no máximo uma estrada entre cada par de cidades. A próxima linha contem um inteiro Q (1 ≤ Q ≤ 105 ) representando o número de estradas específicas que podem ser requisitadas pelo rei para concerto. Cada uma das próximas Q linhas descreve uma demanda com dois inteiros U e V (1 ≤ U < V ≤ N), indicando a estrada especifica a ser reparada. Não existem estradas requisitadas repetidas.;Imprima Q linhas, cada uma contendo um inteiro indicando a resposta da requisição correspondente feita pelo rei na entrada, isso é, o custo mínimo para reparar um conjunto de estradas ( incluindo a estrada especificada ) de forma que os Cubicunianos estejam aptos a viajar entre qualquer par de estradas usando apenas estradas reparadas.;False;9 / 10;541;180;33.27%
2704;Sapo Saltador;Ad-Hoc;8;"Pog o sapo quer competir no Mundial de Saltos Sapicos, que ira ocorrer em Nlogonia. Na competição cada sapo deve realizar uma série de saltos acrobáticos em uma arena especialmente construída. A arena é composta de N posições igualmente espaçadas ao redor de uma circunferência ( ao arco entre as posições adjacentes sempre tem mesmo comprimento ) onde cada posição pode ser tanto uma rocha quanto uma poça. As posições são numeradas sequencialmente de 0 a N -1 no sentido horário de direção, de forma que os juízes possam facilmente tomarem notas sobre em que posição cada salto foi realizado. Assim, a posição 0 é adjacente as posições 1 e N-1 na arena.

O regulamento da competição estipula que a sequência de saltos que cada sapo deve realizar deve começar em uma rocha, sempre indo de rocha em rocha, e deve terminar na mesma posição que começou. As regras não requerem que o sapo use todas as rochas na arena para sua sequência de saltos.

Pog esta atualmente praticando para a competição. Ele deve desenvolver duas habilidades. Primeiro ele deve melhorar sua habilidade de pular de uma rocha a outra, já que aterrissar em uma poça ou fora de uma posição marcada significa desqualificação. Além disso, ele deve aprender os movimentos acrobáticos. Com isso em mente, ele decidiu uma estratégia de prática. No começo de cada sessão de prática, Pog vai escolher uma rocha inicial e um inteiro distancia de salto K entre 1 e N – 1. Após isso, sempre que estiver em uma rocha numerada i, ele ira mirar seu próximo salto acrobático na rocha cujo número é obtido pelo resto da divisão i + K por N (i +K / N). Ele ira parar quando ele aterrissar na rocha inicial. Por exemplo, se a arena tiver 3 posições, todas elas rochas e Pog começar na posição 0 e escolher K = 2, ele ira pular inicialmente para a rocha 2, e após isso para a rocha 1 e finalmente voltará a rocha 0. Neste momento a seção de prática encerra-se.

Dada uma descrição de N posições na arena, ajude Pod respondendo a seguinte questão: quantos valores distintos de K ele pode escolher para sua seção de prática, dado que ele possa escolher qualque rocha como ponto inicial para sua sequência de pulos?";A entrada consiste de uma única linha contendo uma string S com N caracteres (3 ≤ N ≤ 105 ), representando as posições da arena. O i-ésimo  caractere de S (i = 0, 1, . . . , N − 1) indica que a posição i da arena é ou uma Rocha ( “R” maiúsculo) ou uma poça ( “P” maiúsculo).;Imprima uma única linha com um inteiro representando o número de distâncias de pulo distintas que Pog pode escolher para sua seção de prática, dado que ele pode usar qualquer pedra como posição inicial para sua sequência de pulos.;False;8 / 10;245;74;30.20%
2705;Mantenha Coberto;Ad-Hoc;5;"Eva ama quebra-cabeça. Ela recentemente comprou um quebra-cabeça que se provou ligeiramente difícil. O quebra-cabeça é feito de um retângulo com uma grade com R linhas e C colunas. Algumas células podem estar marcadas com um ponto, enquanto as outras estão vazias. Quatro tipos de peças vem com este quebra-cabeças, e existem R x C unidades de cada tipo.



O objetivo do quebra-cabeça é usar algum tipo de peça que preencha a grade; isto é, que cada célula deve estar coberta com uma peça. Fazendo isso, cada peça pode ser rotacionada em 90, 180 ou 270 graus. Mas claro, para deixar mais interessante, existem algumas restrições que devem ser respeitadas:


	Peças do tipo 1 podem apenas serem usadas em células marcadas com um ponto, enquanto as demais peças podem apenas ser usadas nas células brancas.
	Dado qualquer par de células compartilhando uma borda, a linha desenhada deve combinar.
	 As linhas desenhadas pelas peças não podem encostar nas paredes externas da grade.



Como Eva está tendo dificuldades para resolver o quebra-cabeça, ela começou a questionar-se se ele não teria sido feito de forma descuidada e nenhuma solução existe. Você pode dizer a ela se o quebra-cabeça pode ser resolvido?";"A primeira linha contem dois inteiros R e C (1 ≤ R, C ≤ 20), indicando respectivamente o número de linhas e colunas do quebra-cabeça. As próximas R linhas contem uma string S de caracteres C cada, representando a grade do quebra-cabeça; nessas strings, a letra minúscula “o” indica que a célula marcada com um ponto, enquanto um “-” (hífen) representa uma célula vazia. Existem no máximo 15 células marcadas com um ponto.";Imprima uma linha com a letra maiúscula “Y” caso seja possível resolver o quebra-cabeça como descrito, e a letra “N” caso contrário.;True;5 / 10;64;40;62.50%
2706;Linearville;Grafos;8;A cidade de Linearville possui N ruas de mão dupla paralelas indo de Oeste para Leste e N ruas de mão dupla paralelas indo de Sul para Norte, formando uma grade com (N-1)x(N-1) blocos. A distancia entre duas ruas paralelas consecutivas é ou 1 ou 5. As Autoridades de Trânsito de Linearville estão conduzindo um experimento e requerem que todos os carros sempre sigam um caminho que alterne entre as direções O-L e S-N em todos os cruzamentos, significando que eles devem ou pegar a esquerda ou a direita quando chegam em um cruzamento. A ATL está desenvolvendo um novo aplicativo de navegação e precisa de sua ajuda para escrever um algoritmo que calcule a distância do menor caminho entre diversos pontos de partida e chegada. O caminho alternado da figura, um exemplo para N=10, claramente não é o caminho mais curto. Mas esteja avisado! Linearville pode ser enorme…;"A primeira linha contem um inteiro N (2 ≤ N ≤ 105 ) representando o número de ruas em cada direção. Para cada direção, as ruas são identificadas por inteiros distintos de 1 a N começando no canto S-O da cidade. A segunda linlha contem N – 1 inteiros D1, D2, . . . , DN−1 (Di ∈ {1, 5} para i = 1, 2, . . . , N − 1) indicando as distâncias entre as ruas consecutivas indo S-N ( isto é, Di é a distância entre as ruas i e a rua i+1). A terceira linha contem N -1 inteiros E1, E2, . . . , EN−1 (Ei ∈ {1, 5} para i = 1, 2, . . . , N − 1) indicando as distancais entre ruas consecuticas indo O-L ( isto é, Ei é a distância entre as ruas i e a rua i+1). A quarta linha contem um inteiro Q (1 ≤ Q ≤ 105 ) representando o número de percursos a serem calculados. Cada uma das próximas Q linhas descreve um percurso com 4 inteiros Ax, Ay, Bx e By (1 ≤ AX, AY , BX, BY ≤ N), indicando que o começo é o cruzamento em Ax, Ay e que o destino final é o cruzamento em Bx, By; os valores de Ax e Bx são ruas indo S-N enquanto os valores de Ay e By são ruas indo W-E. Não existem percursos iguais.";mprima Q linhas, cada linha contendo um inteiro indicando o comprimento do trajeto mais curto usando um caminho alternado como descrito no problema para o percurso correspondente da entrada.;True;8 / 10;55;20;36.36%
2708;Turistas no Parque Huacachina;Iniciante;2;A agência de turismo municipal da cidade de Ica, no Peru montou um posto de controle de jipes de aventura que sobem para as dunas do parque Hucachina. Como durante o dia, são vários os off-roads que sobem e descem do parque nacional, e nem sempre os turistas usam um mesmo transporte para a ida e volta, a prefeitura precisava ter um melhor controle e segurança sobre fluxo de visitantes no parque. Desenvolva um programa que receba como entrada se um jipe está entrando ou voltando do parque e a quantidade de turistas que este veículo está transportando. Ao final do turno, o programa deve indicar a quantidade de veículos e de turistas que ainda faltam regressar da aventura.;"O programa deve receber sucessivos pares de entrada. Cada par deve indicar o movimento do jipe e a quantidade de turistas que este está transportando. A primeira entrada deve ser ""SALIDA"" ou ""VUELTA"". ""SALIDA"" deve indicar que o jipe está saindo da central e entrando no parque; e ""VUELTA"" que o jipe está retornando do passeio. Imediatamente na sequência, o programa recebe um número inteiro T (onde, 0 <= T <=20) que indica a quantidade de turistas que estão sendo transportados pelo jipe. A string ""ABEND"" deve ser o indicador de fim de processamento.";Como objetivo o programa deve apresentar duas saídas, uma em cada linha: a quantidade de turistas e a quantidade de jipes que ainda faltam voltar do parque.;False;2 / 10;1091;641;58.75%
2709;As Moedas de Robbie;Iniciante;9;"Robbie é um robô muito carismático, e uma das coisas que ele mais gosta de fazer, além de brincar com Glória, é colecionar moedas. Robbie possui várias moedas com valores iguais ou diferente, e de mesmo mesmo tamanho. e elas são guardadas de maneira organizada uma sobre a outra dentro de um cilindro de vidro. Robbie sempre faz um joguinho com Glória usando suas moedas quando ela pede pra brincar com ele de esconde-esconde, ou quando ela pede pra ele levá-la para passear. O jogo acontece da seguinte maneira: Glória escolhe um número N que será o salto das moedas que serão somadas, então a cada Nmoedas o valor Vi da moeda é somado até que não haja mais moedas, ou seja, Σ de ((VM-(N*0))+(VM-(N*1))+(VM-(N*2) )...), M é o número de moedas. Por exemplo, se existirem 5 moedas com os valores 1, 2 , 3, 4 e 5, e Glória escolher 2 como valor do salto, então serão somadas as moedas 5, 3 e 1, resultando em 9, ao final Robbie verifica se a soma dessas moedas é um número primo, se isso acontecer ele faz o que a Glória quer, caso contrário, a garotinha convence Robbie a jogar novamente, pois ela sempre consegue convencer ele de tudo, alegando que deixará de contar histórias pra ele, caso ele não faça a vontade dela.

Você como um bom programador da U.S. Robots, ajudará esses dois amigos, escrevendo um programa irá dizer o resultado do jogo.";A primeira linha da entrada contém um inteiro M (2 ≤ M ≤ 20 ) que representa a quantidade de moedas. Cada uma das próximas M linhas contém um inteiro Vi (1 ≤ Vi ≤ 500) que representa o valor da moeda Mi , e por último um inteiro N (1 ≤ N ≤ M) que é o salto na soma escolhido por Glória.;Imprima “You’re a coastal aircraft, Robbie, a large silver aircraft.”, caso Glória ganhe o jogo, ou “Bad boy! I’ll hit you.”, caso Glória não ganhe o jogo. A saída não deve conter aspas.;False;9 / 10;1106;141;12.75%
2710;Jogo da Matriz;Ad-Hoc;10;"Dâmi e Marcus gostam de criar jogos de computadores. Recentemente criaram um jogo baseado em matrizes e agora estão precisando de sua ajuda para testá-lo.

É dado a você uma matriz M inicialmente preenchida com zeros. Então será dado Q operações. São elas:


	U X Y Z W V - Incrementar V em todas as posições na sub-matriz de M definida pelo canto superior esquerdo (X,Y) e canto inferior direito (Z,W)
	A X Y - Retorna o valor de mx,y


Após deles terem criado o jogo, agora querem que você ajude-os a avaliar se o código deles está correto.";Cada caso de teste começará com um inteiro Q (Q ≤ 100 000). Após isso você deverá ler Q operações no formato descrito acima (1 ≤ X ≤ Z ≤ 500 e 1 ≤ Y ≤ W ≤ 500  e |V| ≤ 5000).;"Para cada operação do tipo ""A"", imprima o valor correspondente conforme o exemplo de saída. ";False;10 / 10;638;39;6.11%
2711;Destravando o Celular;Matemática;10;"Aquela aula criptografia e Rangel está com tédio.

-Gu, Oh Gu! - Rangel chamando seu amigo.

-Fala Brother! - Responde Gustavo ao seu amigo.

-Me empresta seu celular? - Diz esperançoso o entendiado Rangel.

-Não hahaha.. Você vai ficar comentando as postanges das minhas redes sociais – Diz o jovem Gustavo.

- OK, :d! - Responde Rangel todo triste.

Gustavo é uma pessoa muito legal e não que ver seu amigo triste! Pesando nisso, chama Vânia e os dois bolam um desafio para diminuir o tédio de Rangel e fazer com que ele passe a gostar de criptografia!

-Vamos lá, Rangel! Nos te desafiamos! - Diz Gustavo e Vânia ambos sorridentes.

-Desafio? Que tipo de desafio? - Diz Rangel.

-Não quer mexer no meu celular? Vamos lá, temos um desafio para para você!

Deseja aceitar? - Indagam os dois.

-Sim! Vamos lá! - Diz Rangel ainda mais curioso.

-Ok! Vamos te explicar o desafio:

Vamos mudar a senha do celular e você deverá descobrir essa senha! Para descobrir não será uma terefa muito simples! Te daremos três número B, N e M e queremos que você descubra um quarto número. Esse quarto número será a senha do meu celular! Mas não pense que será fácil, para descobrir esse quarto número basta resolver a seguinte equação:

BE = N mod M

Simples, não? Estamos interessados que você descobrua o valor de E, garantimos pra você que o valor de E está no intervalo [0, M - 1] e que M é um número primo! Hahaha – Vamos lá, você precisa ser rápido! Pois você só tem o tempo da aula pra resolver!

-Eu topo! Mas irei usar meu computador para me auxiliar - Diz Rangel, todo animado.

-Ok! Mostre do que você é capaz! - Diz Gustavo e Vânia.

-Vou te dar uma dica!Lembre-se Rangel, o valor está entre [0, M – 1] inclusive, se não estiver a resposta é -1! - Diz Vânia.

Rangel está preparado para o desafio e resolveu utilizar programação para ajudar nesse desafio. Ele pediu a sua ajuda para auxilia-lo no código. Vamos lá você vai deixar passar esse desafio?";São vários casos de teste. Cada caso de consiste de três inteiros B, N, M, onde B e N (0 < B, N < 105) e M é um número primo (2 < M < 109).;Para cada caso, você deverá imprimir o valor de E, caso o valor de E não obedeça a seguinte pripriedade [0, M - 1] deverá imprimir -1. Vamos lá! Ajudem Rangel!!;False;10 / 10;363;129;35.54%
2712;Rodízio Veicular;Iniciante;4;"O rodízio municipal de veículos de São Paulo é uma restrição à circulação de veículos automotores na cidade. Implantado desde 1996 com o propósito de melhorar as condições ambientais reduzindo a carga de poluentes na atmosfera, se consolidou como um instrumento para reduzir congestionamentos nas principais vias da cidade, nos horários de maior movimento. Nas vias delimitadoras não é permitido o tráfego de caminhões e automóveis que estejam dentro da restrição. Há uma escala que determina em quais dias da semana quais veículos não podem circular. Essa escala é regida pelo último dígito da placa do veículo, sendo:


	Segunda-feira, digito final da placa 1 e 2
	Terça-feira, digito final da placa 3 e 4
	Quarta-feira, digito final da placa 5 e 6
	Quinta-feira, digito final da placa 7 e 8
	Sexta-feira, digito final da placa 9 e 0


Os motoristas que são flagrados violando a restrição de circulação são autuados com multa e quatro pontos na carteira de habilitação.";"A primeira linha de entrada representa a quantidade de testes N (0 <= N < 1000) que deverão ser considerados. As demais entradas são cadeia de caracteres com tamanho máximo S (1 <= S <= 100) que representam cada placa que deverá ser analisada, de tal forma que, cada placa fique em uma única linha de entrada. O formato esperado para uma placa veicular válida em São Paulo é ""AAA-9999"", tal que A é um caracter válido em [A-Z], e 9 um dígito numérico válido em [0-9].";O conjunto de valores válidos como saída são: MONDAY, TUESDAY, WEDNESDAY, THURSDAY e FRIDAY, de acordo com a tabela de restrições predefinida, e FAILURE caso a placa não apresente o padrão definido.;False;4 / 10;2474;828;33.47%
2713;O Mago é Implacável!;Paradigmas;6;"Em jogos de RPG existem diversas classes de personagens que os jogadores podem escolher assim que iniciam um jogo. Uma das classes que os jogadores mais costumam optar é do Mago, pois o Mago é implacável! O Mago é um tipo de personagem que domina as artes místicas e assim, possui um dano constante V que varia para cada partida, às vezes, caso o Mago tenha mana, ele pode aumentar o seu dano em um determinado valor, que depende do tipo de monstro que ele batalha.

Rangel está jogando um novo RPG e está tentando subir de nível rapidamente, para isso acontecer, ele precisa jogar bastante! Entretanto, está com pouco tempo, pois está atolado de livros que pegou emprestado com sua amiga Vânia para ler, além disso, é a época de provas e ele precisa estudar para passar. Então ele quer minimizar o tempo que ele gasta com jogo. Calma, vamos explicar como funciona o jogo!

Primeiramente esse RPG funciona da seguinte maneira, são várias partidas, e cada partida possui N salas, cada sala, possui um monstro com X pontos de vida. Para cada monstro, caso o Mago tenha mana, ele pode aumentar o valor do dano constante em Di unidades, o custo para aumentar o dano é fixo de 1 unidade de mana. Para saber o tempo que se gasta para matar um i-ésimo monstro, é a razão entre a quantidade de pontos de vida do monstro pelo dano que o Mago pode causar (obedencendo o que foi descrito no texto).

Lembrando que, para ganhar a partida, é necessário chegar ao final da partida. É sempre garantido que Rangel joga até o final da partida, além disso, ele só pode avançar para a próxima sala no quando ele mata o monstro guardião da sala que ele se encontra.";São vários casos de teste. Cada caso começa com três inteiros N, K, V, onde N (1 ≤ N ≤ 103) indica o número de salas que há na partida, K (0 ≤ K ≤ 100) indiciando a quantidade de mana que o poderoso Mago possui e V (1 ≤ V ≤ 104) indica o valor do dano constante do Mago nesta fase. As próximas N linhas possui dois inteiros X (1 ≤ X ≤ 105) indicando os pontos de vida no monstro na i-ésima sala e Di (1 ≤ Di ≤ 105) indicado o quando o dano será aumentado na i-ésima sala, caso o Mago possua mana e deseje utilizar.;Para cada caso, você deverá imprimir uma linha contendo o tempo mínimo que Rangel gastará para mantar todos os monstros da partida com quatro casas decimais.;False;6 / 10;100;52;52.00%
2714;Minha Senha Provisória;Strings;2;"Uma instituição de ensino lisboeta tem como prática para atribuição de senha de acesso ao portal acadêmico utilizar o RA (registro acadêmico) do aluno. Nesta instituição os RA's são strings de 20 caracteres iniciados sempre pelos caracteres ""RA"" e seguidos por 18 dígitos numéricos. por exemplo: RA000000000000012340. Estes identificadores são gerados automaticamente pelo sistema de matrículas e são formados por três partes principais: (a) iniciados pelos caracteres ""RA"", (b) seguidos por Z digitos zeros formatadores de posição (onde, 0 <= Z <= 17), e por fim, (c) o número identificador do aluno propriamente dito, considerando os X números mais a direita do RA não iniciados por zero (onde, 1 <= X <= 18).   
 ";"A primeira linha de entrada é um valor inteiro N (onde, 1 <= N <= 1000) que representa a quantidade de RA's que deve ser considerada pelo programa. As N seguintes linhas representam, cada uma, strings, de no máximo 100 caracteres, que representam os RA's enviados pelo sistema de matrícula.
 ";"As saídas válidas para o programa são: a apresentação da senha provisória ou a indicação de ""INVALID DATA"". A senha provisória é formada pelos X caracteres númericos não iniciados em 0 mais a direita da string, por exemplo: para o identificador ""RA000000000000012340"" a senha provisória deve ser ""12340"". Caso a string recebida não esteja de acordo com as regras de formação, o programa deve indicar ""INVALID DATA"".
 ";False;2 / 10;907;522;57.55%
2715;Dividindo os Trabalhos I;Iniciante;8;"Chegamos finalmente no final do semestre e pra variar, trabalhos estão acumulados! Os professores, com a intenção de ajudar (ou não), decidiram que os trabalhos será feitos em duplas, além disso, eles dariam o spoiler do grau de dificuldade que um trabalho tem para ser feito.

Sabendo disso, Rangel, nosso velho amigo, escolheu Gugu como sua dupla, pois ele sabe que Gugu é um cara responsável. Como ambos estão apertados eles decidiram dividir os trabalhos com os seguintes critérios:


    
    A ordem dos trabalhos não pode ser alterada durante a divisão;
    
    
    A divisão precisa ser justa, ou seja, minimizar a diferença entre os trabalhos feitos por Rangel e por Gugu;
    
    
    Rangel sempre faz os primeiros e trabalhos e Gugu o restante.
    


Como os dois estão muito ocupados na biblioteca pegando os livros para resolverem os trabalhos, eles pediram a você para determinar a diferença.";"O arquivo contém vários casos de teste. A primeira linha de cada caso contém um inteiro N (1 ≤ N ≤ 106) que indica o número de elementos da sequência, na segunda linha contém N inteiros onde cada inteiro possui um valor X (1 ≤ X ≤105).

A entrada termina com um EOF.";Para cada caso de teste, um inteiro Y deve ser impresso, onde Y é o valor da diferença ótima seguindo os critérios do problema. Deixe uma linha em branco após cada caso de teste, inclusive após o último.;False;8 / 10;1731;239;13.81%
2716;Dividindo os Trabalhos II;Paradigmas;8;"Chegamos finalmente no final do semestre e pra variar, trabalhos estão acumulados! Os professores, com a intenção de ajudar (ou não), decidiram que os trabalhos será feitos em duplas, além disso, eles dariam o spoiler do grau de dificuldade que um trabalho tem para ser feito.

Sabendo disso, Rangel, nosso velho amigo, escolheu Gugu como sua dupla, pois ele sabe que Gugu é um cara responsável. Como ambos estão apertados eles decidiram dividir os trabalhos com os seguintes critérios:


    
    A ordem dos trabalhos pode ser alterada durante a divisão;
    
    
    A divisão precisa ser justa, ou seja, minimizar a diferença entre o grau de dificuldade dos trabalhos feitos por Rangel e por Gugu.
    


Como os dois estão muito ocupados na biblioteca pegando os livros para resolverem os trabalhos, eles pediram a você, para determinar a diferença mínima.";"O arquivo contém vários casos de teste. A primeira linha de cada caso contém um inteiro N (1 ≤ N ≤ 150) que indica o número de elementos da sequência, na segunda linha contém N inteiros onde cada inteiro possui um valor X (1 ≤ X ≤ 2000).

A entrada termina com um EOF.";Para cada caso de teste, um inteiro Y deve ser impresso, onde Y é o valor da diferença ótima seguindo os critérios do problema.;False;8 / 10;1205;330;27.39%
2717;Tempo do Duende;Iniciante;2;"A fabricação dos presentes para o Natal é um processo muito complicado. Diversas vezes os duendes ficam até tarde trabalhando para que tudo possa ser terminado a tempo e com perfeição.

Para melhor gerenciar seus cronogramas, os duendes estipularam quantos minutos são necessários para fabricar cada presente.

Já está quase no final do expediente, e um dos duendes pediu sua ajuda.

Faltam N minutos para a hora de ir embora, e restam dois presentes para o duende Ed fabricar. Ajude-o a descobrir se ele conseguirá fabricar os dois ainda hoje, ou se deve deixar o trabalho para amanhã.";"Cada caso de teste inicia com um inteiro N, indicando quantos minutos faltam para o final do expediente (2 <= N <= 100).

Em seguida haverá dois inteiros A e B, indicando quantos minutos são necessários para fabricar os dois presentes que Ed precisa fabricar (1 <= A, B <= 100).";"Imprima uma linha, contendo a frase ""Farei hoje!"" caso seja possível fabricar os dois presentes antes do final do expediente, ou ""Deixa para amanha!"" caso contrário.";False;2 / 10;5142;2926;56.90%
2718;Luzes de Natal;Iniciante;5;"Giovanna adora o Natal. As festas, a família, decorações natalinas e principalmente os famosos pisca pisca led. Porém, esse ano
				a pequena Gio ficou triste ao perceber que seu jogo de luzes está quebrado. Algumas luzes ainda funcionam, outras não. Giovanna
				quer, obviamente, consertar seu objeto preferido mas não tem lâmpadas o suficiente pra substituir todas as queimadas então resolveu
				fazer o seguinte: dividir o pisca pisca em grupos ordenados de 50 lâmpadas e em cada grupo só consertar a maior quantidade de lâmpadas
				consecutivas queimadas.
			
			
				Por serem muitos grupos, a tarefa se tornou tediosa e para tentar remediar isso, Giovanna, observando a semelhança dos grupos
				com representação binária de números quando imaginava lâmpadas queimadas como 1's e lâmpadas funcionais como 0's, decidiu pensar
				neles efetivamente como números e escreveu as representações decimais desses binários então tentou descobrir a quantidade de lâmpadas a serem
				trocadas a partir dessas anotações.
			

			Sua tarefa é, dado as anotações de Gio, diga quantas lâmpadas serão trocadas em cada grupo.";"A primeira linha da entrada contém um número inteiro N (1 ≤ N ≤ 103) representando a quantidade de grupos que Giovanna anotou.
					As próximas N linhas contém um inteiro X cada uma representando o equivalente decimal do número que representa o grupo.";A saída consiste de N linhas cada uma contendo o tamanho da maior sequência de lâmpadas consecutivas queimadas em cada grupo, respeitando a ordem de entrada dos grupos.;False;5 / 10;1512;512;33.86%
2719;Quantas Viagens Fará o Noel?;Ad-Hoc;4;"Está quase tudo pronto! Os presentes estão embrulhados, as rotas estão traçadas, as renas estão alimentadas e o Noel está animado. Já está quase na hora de sair, e Noel deve entregar N presentes neste natal.

O único problema é que talvez todos estes presentes sejam muito pesados para serem carregados em uma única viagem.

Para resolver o problema, Noel estipulou o peso máximo que a soma dos pesos dos presentes devem ter em cada viagem, e agora quer descobrir quantas viagens terá que fazer.

Dado o número de presentes, o peso máximo permitido em cada viagem, e os pesos dos presentes, descubrar quantas viagens serão necessárias para que todos os presentes sejam entregues. Note que os presentes devem ser entregues na ordem em que aparecem na entrada.";"Haverá T casos de teste.

Cada caso de teste inicia com dois inteiros N e M, indicando quantos presentes devem ser entregues e qual o peso máximo que será carregado em cada viagem, respectivamente (1 <= N <= 10*, ou 1 <= N <= 10000**, 1 <= M <= 1000).

Em seguida haverá N inteiros pi, cada um representando o peso de um dos presentes (1 <= pi <= M, para todo 1 <= i <= N).

* Acontecerá em aproximadamente 90% dos casos de teste.
** Acontecerá em aproximadamente 10% dos casos de teste.";Para cada caso de teste imprima uma linha contendo um inteiro K, representando a quantidade de viagens que Noel terá que fazer.;False;4 / 10;1398;476;34.05%
2720;Presentes Grandes;Iniciante;9;"Bruninho adora o natal! Ele gosta da comida, das músicas clássicas, e, especialmente, dos presentes que o Papai Noel lhe dá todos os anos!

Assim como nos anos anteriores, Bruninho irá ganhar exatamente K presentes dentre os N presentes que Papai Noel tem disponível. Agora, ele deve decidir quais presentes ele irá pedir para o bom velhinho.

Como toda criança pensa, quanto maior é o pacote do presente, mais legal o presente é! Logo, ele decidiu pedir os presentes com os K maiores volumes. Dada a descrição de todos os N presentes que o Papai Noel tem, determine os K presentes que Bruninho deve pedir.";"A primeira linha contém um inteiro T (≤20), o número de casos de teste.

A primeira linha de cada caso de teste contém dois inteiros N e K (1 ≤ N ≤ 103 * ou 1 ≤ N ≤ 105 **, 1 ≤ K ≤ N), o número de presentes que o Papai Noel tem e o número de presentes que Bruninho irá ganhar.

Cada uma das próximas N linhas descrevem um presente. Cada linha contém quatro inteiros I, H, W e L (0 ≤ I ≤ 109, 1 ≤ H, W, L ≤ 100), o número de identificação (id) do presente e a altura, largura e comprimento do seu pacote, em centímetros. Todos os presentes tem ids diferentes.

* Em aproximadamente 40% dos casos de teste
** Nos demais casos de teste";"Para cada caso de teste, imprima uma linha contendo K inteiros, separados por espaços, descrevendo os ids dos presentes que Bruninho deve pedir. Imprima os ids em ordem crescente. Não imprima um espaço após o último id.

Se existir mais de uma solução possível, imprima a lexicograficamente menor, isto é, o menor id na saída deve ser minimizado; no caso de empate, o segundo menor id na saída deve ser minimizado, e assim por diante.";False;9 / 10;1627;318;19.55%
2721;Indecisão das Renas;Iniciante;1;"Esse ano as Renas do papai Noel decidiram que Rudolph não seria mais aquele que sempre ficaria à frente. Elas escolheriam de forma justa entre elas quem iria encabeçar o trenó. E nada é mais justo que o acaso.

				Então optaram pela seguinte forma para escolher: Cada Rena faria a quantidade que quisesse de bolas de neve, sem as outras verem. Depois, todas as bolas de neve de todas as Renas seriam reunidas em uma única e grande pilha. Por último, as bolas de neve seriam tiradas dessa pilha, uma a uma, e distribuídas entre elas sempre seguindo a ordem: Dasher, Dancer, Prancer, Vixen, Comet, Cupid, Donner, Blitzen e Rudolph. Até que se acabassem as bolas de neve. A rena que ficasse com a última bola de neve seria declarada vencedora e ficaria na posicão principal do trenó este ano.

				Dado o número de bolas de neve feitas por cada Rena, determine qual Rena ganhou o sorteio.";A entrada é composta por uma única linha contendo 9 números inteiros Ai (1 ≤ Ai ≤ 104).;A saída é composta por uma única linha contendo o nome da Rena vencedora.;False;1 / 10;2179;1283;58.88%
2722;Pegadinha de Evergreen;Strings;4;"Evergreen Bushy, um dos duendes ajudantes de Noel, responsável por inventar muitos dos brinquedos distribuídos por Noel e também muito conhecido por fazer pegadinhas com o bom velhinho, aprontou mais uma neste ano. 

Como sempre faz todos os anos, Bushy separou os presentes para cada criança colocando um bilhete com o nome dela. O problema que ele não se limitou a simplesmente colocar o nome correto da criança no presente: ele zoou :) cada um dos nomes misturando as letras segundo uma sequência: duas letras do nome, seguidas por duas letras do sobrenome, seguidas por duas letras do nome e por duas letras do sobrenome e assim por diante.

Bem, como Noel está bem cansado e sem tempo para brincadeiras, pediu a você que é expert em programação para fazer um programa que converta o nome misturado por Evergreen no nome correto de cada criança.
Apenas um fato curioso: a primeira linha do nome misturado sempre terá um número par de caracteres e a segunda linha, sempre terá o mesmo número de caracteres da primeira linha ou um caractere a menos do que a primeira linha.";A entrada contém um inteiro N (N < 2000) que indica a quantidade de casos de teste. Cada caso de teste é composto por duas linhas, com no máximo 100 caracteres cada. Estas duas linhas contém o nome que foi misturado por Evergreen Bushy, que é composto basicamente por letras maiúsculas, minúsculas e espaços em branco.;Com base nas duas linhas de entrada, você deve imprimir o nome correto da criança, seguindo a regra para decifrá-lo conforme descrição acima.;False;4 / 10;1532;613;40.01%
2723;Equilibrando Presentes;Paradigmas;6;"Já é quase Natal, e como de costume o Papai Noel está se preparando para embarcar em seu trenó com todos os N presentes a serem entregues.

A área em que os presentes ficam no trenó pode ser dividida em dois lados: o lado A e o lado B. Para que o trenó fique equilibrado, a diferença da soma dos pesos dos presentes que estão no lado A e no lado B não pode ser maior que 5kg.

Você recebeu a tarefa de ajudar o Papai Noel este ano. Dados N presentes, você deve descobrir se existe uma maneira de dividi-los nos lados A e B, de tal forma que o trenó nunca fique desequilibrado.

Note que os presentes devem ser alocados um por vez, na ordem em que são dados no caso de teste, e em nenhum momento o trenó deve ficar desequilibrado.";"Haverá T casos de teste.

Cada caso de teste inicia com um número N, indicando a quantidade de presentes a serem alocados (1 <= N <= 16*, ou 1 <= N <= 10000**).

Em seguida haverá N inteiros pi, representando os pesos dos N presentes (1 <= pi <= 10, para todo 1 <= i <= N).

* Acontecerá em aproximadamente 90% dos casos de teste.
** Acontecerá em aproximadamente 10% dos casos de teste.";"Para cada caso de teste imprima uma linha, contendo as palavras ""Feliz Natal!"" caso seja possível dividir os presentes sem nunca perder o equilíbrio, ou ""Ho Ho Ho!"" caso contrário.";False;6 / 10;466;164;35.19%
2724;Ajude Patatatitu;Iniciante;5;"Juvenal comportou-se muito bem este ano, já que gosta muito de química e queria muito ganhar um kit Alquimia. Entretanto, Juvenal pediu para incluir alguns elementos perigosos em seu kit. Seu Noel não podendo negar o pedido ( afinal, como dizer não para a criança mais bem comportada do planeta?) pediu para o pobre elfo Patatatitu garantir que o presente fosse seguro.

Patatatitu sabe muito sobre química, e conhece todos os compostos perigosos que podem ser feitos com os elementos disponíveis no kit de Juvenal. Assim, decidiu enviar um cd junto com o presente, contendo um programa que afira a segurança dos experimentos de Juvenal. Todos concordam que a criança mais bem-comportada do planeta nunca faria uma experiência sem antes checar sua segurança conforme as instruções. Porém Patatatitu não sabe programar e está atrás de ajuda. Você poderia ajudá-lo?

Para facilitar, Patatatitu explica que um composto perigoso é formado a partir da mistura de elementos na ordem de sua fórmula atômica e respeitando as devidas proporções. Neste kit de química é possível apenas adicionar um elemento por vez, em diferentes quantidades. Assim para formar trifluoreto de cloro (ClF3), um composto muito perigoso, deve-se adicionar um átomo cloro (Cl) e três de flúor (F3), independentemente do que for adicionado antes ou depois. ClF4 não é um composto perigoso, pois está fora de proporção. De forma similar caso Mg2F seja um composto perigoso, Mg2Fe será seguro, visto que flúor (F) é um elemento distinto de ferro (Fe).";A entrada consiste de um inteiro N (0 < N < 10) que indica o número de casos de teste. Cada caso de teste consiste em um inteiro T (0 < T < 51) que indica o número de compostos perigosos possíveis, caso os elementos sejam incluídos na ordem e proporções mostradas. Seguem T linhas, cada uma contendo uma string de até 50 caracteres representando uma formula que gera um composto perigoso caso os elementos sejam misturados na ordem e proporções que são apresentados. Após isso, é dado um inteiro U (0 < U < 51) que indica a quantia de experiencias que Juvenal irá realizar. Seguem U linhas cada uma contendo uma string de até 50 caracteres representando os elementos que Juvenal utilizara na ordem e proporções em que serão adicionados.;"A saída consiste de U linhas por caso de teste, as quais devem informar se Juvenal deve prosseguir ou abortar o  U-ésimo  experimento do caso teste. Caso deva abortar imprima ""Abortar"", caso seja seguro imprima ""Prossiga"".Deixe uma linha em branco entre cada caso de teste.";False;5 / 10;327;181;55.35%
2725;Vila Natalina;Grafos;5;"Após um dia de trabalho na fábrica do papai noel, elfos e duende retornam para suas casas na pacata cidade de Vila Natalina que se situa no polo norte, aos arredores da fábrica. A Vila Natalina é um lugar lindo e tranquilo de se viver. Branco por causa da neve e uma cidade bem planejada já que podemos imaginar as casas como vértices de uma enorme grade com todos os vértices contendo uma casa. E todos viviam em paz até o dia em que os elfos, que são em menor número, começaram a dizer que suas casas eram muito distantes umas das outras e que isso dificultava a comunição entre eles já que para simplesmente poderem conversar tinham que andar grandes distâncias por não haver linhas telefônicas e nem rede de celular no Polo Norte. Já os duendes não se incomodavam com isso por terem poderes telepáticos que eliminavam esse incoveniente.

                Se considerando injustiçados os elfos decidiram instalar uma rede telefônica que funcionava por fio e conectava todas as casas élficas. E fizeram isso de forma inteligente: com a menor quantidade de fios possível e cada fio bem esticado para formar um segmento de reta que liga duas casas de elfos distintos. Porém, como os fios não eram subterrâneos e sim acima da altura das casas, alguns duendes se sentiram incomodados e decidiram cobrar uma taxa por cada fio passasse por cima da sua casa. Como os elfos estão tentando economizar, obviamente contruíram a rede de tal forma a pagar o menor valor possível.

                Dado a localizacão da casa de todos os elfos e a taxa cobrada por um duende para cada fio que passe por cima da sua casa, determine o valor pago pelos elfos aos duendes.";A primeira linha da entrada contém um inteiro T que representa a quantidade de casos de teste a seguir. A primeira linha de um caso de teste contém dois números inteiros N (2 ≤ N ≤ 103) e K (1 ≤ K ≤ 103) representando respectivamente o número de elfos que moram em Vila Natalina e a taxa em moeda local cobrada por cada fio passante acima da casa de um duende. Segue, então, N linhas contendo dois inteiros X e Y (-104 ≤ X, Y  ≤ 104) cada, representando as coordenadas da casa de um elfo na cidade. Todas as casas em Vila Natalina estão em coordenadas inteiras e as dimensões das casas podem ser desconsideradas.;A saída é composta de uma linha por caso de teste contendo o valor pago pelos elfos aos duendes na moeda local.;False;5 / 10;189;108;57.14%
2726;Trenó Lotado;Matemática;9;"É chegada a véspera de Natal e está quase na hora de o trenó partir. Tudo já está guardado no saco do papai noel e as renas em posição, só resta uma coisa: decidir quais ajudantes irão trabalhar com noel esse ano. Sim, ao contrário do que se pensa, o bom velhinho não faz tudo sozinho. Ele sempre leva consigo um grupo de elfos na sua volta ao mundo em uma noite.

				Porém, devem ser escolhidos cuidadosamente os elfos que irão pois o peso deles vai afetar diretamente na aerodinâmica do Trenó. Se for muito leve balançará muito durante o voo e se for muito pesado cansará as renas muito cedo.

				Como está com pressa o Noel decidiu fazer uma tentativa e escolheu um grupo de ajudantes. Mas as Renas logo acusaram que estava muito leve. Então Noel fez uma segunda tentativa, escolheu outro grupo. Mas novamente as Renas reclamaram, contudo, afirmando que agora estava muito pesado. O bom velhinho, que tem hora marcada para seu compromisso, se irritou e deu um ultimato aos seus subordinados: ""Já chega! Escolham logo K elfos entre vocês para ir de tal forma que o trenó não fique nem muito leve e nem muito pesado! Ou seja, a soma dos pesos não pode ser menor que a do primeiro grupo que tentei e nem maior que a do segundo. E facam isso Rápido!""

				Naturalmente os pequeninos se desesperaram. Além da restrição dos pesos e agora do número de Elfos que tem que ser exata, eles ainda tem o fato de que cada Elfo pesa o dobro ou mais que um Elfo mais novo que ele. O que obviamente só complica tudo.

				Sabendo que todos os Elfos possuem idades diferentes você consegue ajudar esses pequeninos a dizer de quantas formas eles podem escolher um grupo para ir com o papai Noel respeitando todas as exigências?";A primeira linha da entrada contém um inteiro T que representa a quantidade de casos de testes. Seguem-se então T casos de testes. A primeira linha de um caso de teste contém dois inteiros N (1 ≤ N ≤ 50) e K (1 ≤ K ≤ 50) representando respectivemente o número total de Elfos e a quantidade determinada de Elfos que devem embarcar no trenó. A segunda linha de um caso de teste contém N números inteiros Pi (1 ≤ Pi ≤ 1018) representando o peso em mg dos Elfos. A terceira e última linha de um caso de teste contém dois números inteiros A e B (0 ≤ A ≤ B ≤ 1019) representando respectivamente o peso do grupo mais leve testado e o peso do grupo mais pesado testado.;A saída é composta de uma linha por caso de teste contendo um número inteiro que representa o número de formas de escolher um grupo segundo as exigências.;False;9 / 10;95;28;29.47%
2727;Código Secreto;Iniciante;3;"Joana gosta de brincar de fingir ser uma agente secreta com suas amigas Bruna, Jaqueline e Laura. Joana e Bruna criaram um código secreto para se comunicar sem que suas inimigas descubram seus planos.
O código secreto funciona da seguinte forma:


	A letra 'a' é representada por um único ponto '.'
	A letra 'b' é representada por dois pontos '..'
	A letra 'c' é representada por três pontos '...'
	As demais letras seguem a lógica anterior, porém cada conjunto de pontos está separado por um espaço e sempre com um conjunto a mais de pontos, como no exemplo abaixo:


. → a
.. → b

... → c

. . → d

.. .. → e
... ... → f

. . . → g
.. .. .. → h
... ... ... → i

O seu objetivo é criar um programa que decifre as mensagens secretas e ajudar Jaqueline e Laura descobrirem o que Joana e Bruna estão planjando.";A entrada contém vários casos de teste. A primeira linha de cada teste deverá conter um inteiro (N ≤ 50), que representa a quantidade de letras a serem decifradas e as N linhas seguintes contêm o código de cada letra.;Uma string representando a letra do alfabeto correspondente ao código de entrada. Cada string deve estar separada da outra por uma nova linha.;False;3 / 10;1494;633;42.37%
2728;Grace Hopper, a Vovó do Cobol;Strings;5;"Grace Murray Hopper, também conhecida como ""vovó do COBOL"", foi analista de sistemas e almirante da Marina dos Estados Unidos nas décadas de 1940 e 1950. Grace criou a linguagem de programação Flow-Matic que serviu como base para a criação do COBOL, além disso, ela também participou da criação do primeiro compilador de COBOL. Também conhecida por ter sido a criadora do termo BUG ocasionalmente quando descobriu um problema no seu computador e percebeu que era um inseto morto na válvula, já que naquela época os computadores eram formados por válvulas. Desde então o termo BUG passou a ser usado para erros. Grace Hopper é uma das mulheres mais importantes na história da participação feminina na computação, tendo seu nome em um dos congressos mais importantes, ""Grace Hopper Celebration of Women in Computing"".
Neste problema são dadas cinco palavras em cada linha de teste separadas por hífen. Para cada linha será impressa a palavra 'GRACE HOPPER' se no texto de entrada forem encontradas as letras que formam a palavra COBOL no início ou fim de cada palavra em ordem. Caso não encontre, será impressa a palavra 'BUG'.";A entrada contém vários casos de teste. Cada caso de teste consiste de uma única linha contendo de 1 a 50 caracteres, formado por letras minúsculas e maiúsculas ('a'-'z', 'A'-'Z') e hífens ('-'), sem espaços.;Para cada caso de teste imprima a palavra correspondente.;False;5 / 10;1591;649;40.79%
2729;Lista de Compras;Estruturas e Bibliotecas;5;"Valentina é uma mulher muito dedicada e costuma trabalhar até tarde todos os dias. Para economizar tempo, ela faz a lista de compras do mercado em um aplicativo e costuma anotar cada item na mesma hora que percebe a falta dele em casa.

O problema é que o aplicativo não exclui itens duplicados e como Valentina é distraída, anota o mesmo item mais de uma vez e a lista acaba ficando extensa. Sua tarefa como programadora e amiga de Valentina é melhorar o aplicativo de notas desenvolvendo um código que exclua os itens duplicados da lista de compras e que os ordene alfabeticamente.";A primeira linha de entrada contém um inteiro N (N < 100) que indica a quantidade de casos de teste que vem a seguir, ou melhor, a quantidade de listas de compras que Valentina quer organizar. Cada lista de compra consiste de uma única linha que contém de 1 a 1000 itens ou palavras compostas apenas de letras minúsculas (de 1 a 20 letras), sem acentos e separadas por um espaço.;A saída contém N linhas, cada uma representando uma das listas de compras de Valentina, sem itens repetidos e em ordem alfabética.;False;5 / 10;1568;635;40.50%
2730;Pares Pareados;Ad-Hoc;6;"Maria Luisa adora matemática e para sua felicidade ganhou dois conjuntos de números inteiros: o conjunto A e o conjunto B. Ambos os conjuntos possuem o mesmo número de elementos. Ela usa esses conjuntos para brincar de criar pares onde um elemento do par pertence a A e o outro elemento do par pertence a B.

Mas só criar pares ficou muito chato depois de um tempo, a fim de deixar as brincadeiras mais interessantes Maria Luisa criou um conceito chamado par pareado, um par é pareado se o maior divisor comum dos valores contidos no par for igual a 1. Por exemplo: (2, 4) não é um par pareado, mas (3, 5) sim.

Maria Luisa quer sua ajuda para saber quantos pares pareados diferentes podem ser formados utilizando um elemento de A e outro elemento de B. Dois pares (p1, p2) e (p3, p4) são ditos iguais se p1 = p3 e p2 = p4.

Segue um exemplo completo:

A = {3, 2}
B = {2, 5}

A resposta é: 6 e todos os pares pareados possíveis são:
(3, 2)
(2, 3)
(3, 5)
(5, 3)
(2, 5)
(5, 2).";"Esse problema contém múltiplas entradas. A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 200) que é o tamanho dos conjuntos. A segunda linha contém N inteiros positivos que pertencem ao conjunto A e a terceira linha contém N inteiros positivos que pertencem ao conjunto B.
				Se N=0 então não há mais entradas. Todos os números da entrada cabem em inteiros de 32 bits.";Número de pares pareados diferentes que podem ser formados utilizando um elemento de A e outro elemento de B.;False;6 / 10;405;161;39.75%
2731;Programação de Viagem;Grafos;4;"Valentina iniciou um novo desafio neste ano: ela irá dar aulas de programação! Ela está muito empolgada com essa atividade, uma vez que programar é uma de suas maiores paixões. Estas aulas ocorrerão durante a tarde em escolas de diversas cidades da sua região e ela deverá se deslocar de carro.

Como Valentina está no 3º ano do curso de Ciência da Computação, ela deve voltar de seu trabalho a tempo de ir para a universidade. As aulas em que ela leciona terminam por volta das 17h30min, e as aulas da faculdade iniciam às 19h30min. Sendo assim, ela possui 2 horas para poder voltar para a sua cidade e chegar na universidade a tempo do início da sua aula.

Muito esperta e organizada, ela coletou informações quanto o tempo médio, em minutos, de viagem entre as cidades onde ela tem que lecionar. Ela montou uma lista, onde ela enumerou as cidades que ela devia visitar, sendo a sua cidade de origem sempre a número 1. O tempo médio fornecido é bidirecional, ou seja, se da cidade 1 para a cidade 2 o tempo médio é 20 minutos, da cidade 2 para a cidade 1 é o mesmo.

Percebendo que ela está muito atarefada organizando suas aulas, você se ofereceu para ajudá-la construindo um programa que descobre qual é a melhor rota para ela voltar para sua cidade e se ela se atrasará para sua aula na faculdade ou não. Você sabe que existe pelo menos um caminho que leva até cada cidade, e só haverá um único menor caminho possível.";"A entrada consiste em diversas casos de teste. A primeira linha de cada caso contém dois inteiros C (1 ≤ C ≤ 15) e E (1 ≤ E ≤ 225), que indicam a quantidade de cidades e estradas. As E linhas seguintes contém três inteiros C1, C2 e T, que identificam o tempo médio T de deslocamento entre as cidades C1, C2. Por fim, um inteiro D identifica a cidade em que Valentina se encontra no momento. Uma linha com ""0 0"" finaliza a entrada.";"Se a viagem durar menos que 2 horas, você deve imprimir ""Will not be late. Travel time - M - best way - C1 C... CN"" (""Não irá atrasar. Tempo de viagem - M - melhor caminho - C...), onde M é o tempo de viagem e CN são a sequência de cidades que montam o melhor caminho. Caso contrário, você deve imprimir ""It will be L minutes late. Travel time - M - best way -  C1 C... CN"" (Irá se atrasar L minutos. Tempo de viagem - M - melhor caminho - C...), onde L são os minutos que Valentina irá se atrasar.";False;4 / 10;177;99;55.93%
2732;Reino De Alice;Grafos;5;Alice mudou-se para uma cidade com muitos castelos, ela ainda está explorando a cidade, e quer conhecer em um dia o maior número de castelos possível. Para esta aventura tornar-se real Alice criou algumas regras. A visita pode iniciar em qualquer castelo (C) da cidade, porém não pode atravessar nenhum rio (R) após ter visitado o primeiro castelo, mesmo que sobre o rio exista uma ponte (P). Na cidade, a regra de Alice não considera movimentos para diagonais, de um castelo a outro, logo, ela somente usará movimentos para norte, sul, leste ou oeste. Voce deverá ajudar Alice a descobrir o número máximo de castelos que ela será capaz de visitar.;A primeira linha da entrada contém dois inteiros (H ≤ 400 e L ≤ 400), que representam altura e largura da cidade, respectivamente, as seguintes linhas contém o mapa da cidade, sendo C, área de um castelo, P a área de uma ponte e R a área de um rio. Ao final de cada entrada há uma linha em branco.;Um inteiro, representando o máximo de visitas que Alice pode fazer em um dia.;False;5 / 10;331;151;45.62%
2733;O Armário da Leitora;Ad-Hoc;4;"Carla é dona de uma vasta coleção de livros contendo 100 exemplares, e por passar bastante tempo em sua faculdade, gosta de deixar alguns deles em seu armário. No entanto, o armário tem espaço para somente 4 livros, sendo um compartimento para cada.

Como é muito organizada, ela mantém o registro de cada vez que quer ler um livro. Os livros que ficam armazenados no armário são escolhidos da seguinte forma: quando Carla sente a necessidade de ler um livro que não está em seu armário, o traz no dia seguinte e o coloca no lugar do livro que foi menos recentemente lido. Cada livro tem um ID associado que é um número de 1 a 100.

Dada uma sequência de livros lidos, seu algoritmo deve determinar a quantidade de vezes em que Carla quis ler um livro que não estava em seu armário.";A primeira linha entrada é o inteiro N que representa a quantidade de registros de Carla e as linhas seguintes contém inteiros L1, L2, ..., LN \((1 \leq L_i \leq 100)\) que representam os livros que Carla quis ler. A entrada é considerada encerrada ao aparecer um fim de arquivo.;A saída é um inteiro que representa a quantidade de vezes em que Carla quis ler um livro que não estava em seu armário. ;False;4 / 10;178;106;59.55%
2734;Trocando Presentes;Estruturas e Bibliotecas;9;Hermione notou que, apesar dos seus filhos sempre ganharem o mesmo N número de presentes de natal, a sua filha Rose sempre recebe bonecas e maquiagem, enquanto seu filho Hugo recebe todos os tipos de jogos. Ela achou que isso era injusto, então ela fez o seguinte: ela mediu o valor de diversão de cada presente, e decidiu trocar alguns dos presentes de Rose com os de Hugo, para fazer o que a soma dos valores de diversão dos presentes que cada um vai ganhar seja a mais parecida possível. Dado o valor de diversão dos presentes de Hugo e Rose, calcule qual é a menor diferença do valor de diversão total, dado que ela pode fazer quantas trocas quiser, mas o número de presentes que cada um vai receber no final deve ser o mesmo.;"A primeira linha da entrada é um inteiro T ( T < 100 ) que indica o número de casos de teste. Cada caso de teste começa com uma linha contendo um inteiro N (0 ≤ N ≤ 100 ). A próxima linha contém o fator de diversão Ri(1 ≤ Ri≤ 100 ) de cada um dos N presentes de Rose.  A linha seguinte contém o fator de diversão Hi(1 ≤ Hi≤ 100 ) de cada um dos N presentes de Hugo. 

\(\displaystyle\sum_{i=1}^{N}H_i + R_i <= 1000\)";Para cada caso de teste, imprima um inteiro representando a menor diferença possível de fator de diversão total dos presentes de Hugo e Rose, após as trocas serem realizadas.;False;9 / 10;797;266;33.38%
2735;O Presente de Nina;Matemática;7;"Nina ganhou de natal N números distintos de 0 a N-1. Ela percebeu que esses números podem formar uma permutação, ou seja, um vetor de N números no qual cada número de 0 a N-1 aparece apenas uma vez. Ao notar isso, ela lembrou que tinha uma permutação de tamanho N muito especial guardada em sua gaveta, e decidiu usá-la para brincar com seus novos blocos. Ela inventou a seguinte brincadeira:

No dia 0, ela vai colocar primeiro o número 0, depois o 1, e assim por diante, até o N-1, formando o vetor V0. No dia x, ela vai rearranjar os números para formar o vetor Vx, no qual Vx [ i ] = Vx-1 [ P [ i ] ], sendo P a permutação favorita de Nina.

Sua irmãzinha Nani ficou com muita inveja, e resolveu questionar os conhecimentos de Nina sobre sua permutação com perguntas do tipo: dado J e K, qual o menor número Y tal que VY [ ( J + K ) % N ] = J ?

Ajude Nina a responder sua irmã.";"A primeira linha da entrada consiste de um número t (t=10) , referente à quantidade de casos teste.

Cada um dos casos começa com um inteiro N (0<=N<=105): o número de blocos que Nina ganhou, seguido de N inteiros distintos de 0 a N-1, a permutação P.

A linha seguinte terá um inteiro Q (1<=Q<=105) representando o número de perguntas de Nani, seguido de Q linhas, cada uma contendo dois inteiros J e K (0<=J,K<N).";Para cada prgunta, a saída deverá ser uma linha contendo a resposta da mesma. Caso ela não exista, imprima -1.;False;7 / 10;101;46;45.54%
2736;Números de Avalon;Ad-Hoc;7;"Em uma galáxia muito distante existe um reino diferente e diversificado chamado Avalon. Um costume peculiar de Avalon é a forma como seus moradores lidam com números. Dependendo do mês m e do ano y em que estão, os avalonianos não aceitam números que possuam a sequencia de dígitos m ou a sequência de dígitos y em seus algarismos, por exemplo, se y = 12 e m = 3 então os avalonianos não aceitam 3 nem 12 nem 123 nem 736 nem 5128 mas aceitam 102.

Amanda e Krista são as duas rainhas de Avalon e sua maior preocupação é manter o reino seguro e livre de invasores. Tempos atrás elas ficaram sabendo que existe uma profecia que lista os nomes dos inimigos e o número de soldados que Avalon precisa ter para derrotá-los. Dada a importância desta profecia, as rainhas não mediram esforços para encontrá-la e depois de inúmeras expedições, finalmente conseguiram. Mas tem um problema, a profecia foi escrita por um habitante da Terra, onde não se segue o sistema numérico de Avalon.

As rainhas estão desesperadas e contrataram você para fazer um programa que dado o mês m e ano y em que estão e o número n encontrado na profecia converta n para a escala númerica do mês m e ano y, ou seja, calcule o n-ésimo número na escala numérica do mês m e ano y. Por exemplo, se m = 3,  y = 12 e n = 13 então o número convertido é 16, pois os 13 primeiros números na escala avaloniana são 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16.";Cada caso de teste consiste em uma única linha contendo 3 inteiros n (1 <= n <= 1018), m (1 <= m <= 9) e y (10 <= y <= 99), correspondendo ao número encontrado na profecia e o mês e ano atual, respectivamente.;Para cada caso de teste imprima um único inteiro indicando o n-ésimo número no sistema numérico do mês m e ano y.;False;7 / 10;67;27;40.30%
2747;Saída 1;Iniciante;3;"O seu professor de programação gostaria de fazer uma tela com as seguintes características:


	Ter 39 traços (-) na primeira linha;
	Ter uma | embaixo do primeiro traço e do trigésimo nono traço da primeira linha, preencher no meio com espaço em branco;
	Repita o procedimento 2 mais quatro vezes;
	Repita o procedimento 1.


No final deve ficar igual a imagem a seguir:
 
--------------------------------------- (39 traços)
|                                     |
|                                     |
|                                     |
|                                     |
|                                     |
--------------------------------------- (39 traços)";Não há.;A saída será impresso conforme a figura acima.;False;3 / 10;6054;2772;45.79%
2748;Saída 2;Iniciante;1;"O seu professor de programação gostaria de fazer uma tela com as seguintes características:


	Ter 39 traços (-) na primeira linha;
	Ter uma | embaixo do primeiro traço e do trigésimo nono traço da primeira linha, embaixo do 10 traço deve começar a escrever a palavra ""Roberto"" e o restante preencher no meio com espaço em branco;
	Ter uma | embaixo do primeiro traço e do trigésimo nono traço da primeira linha, preencher no meio com espaço em branco;
	Ter uma | embaixo do primeiro traço e do trigésimo nono traço da primeira linha, embaixo do 10 traço deve começar a escrever o número ""5786"" e o restante preencher no meio com espaço em branco;
	Repita o procedimento 3;
	Ter uma | embaixo do primeiro traço e do trigésimo nono traço da primeira linha, embaixo do 10 traço deve começar a escrever a palavra ""UNIFEI"" e o restante preencher no meio com espaço em branco;
	Repita o procedimento 1.


No final deve ficar igual a imagem a seguir:

 
 --------------------------------------- (39 traços)
 |        Roberto                      |
 |                                     |
 |        5786                         |
 |                                     |
 |        UNIFEI                       |
 --------------------------------------- (39 traços)";Não há.;A saída será impresso conforme a figura acima.;False;1 / 10;4097;2178;53.16%
2749;Saída 3;Iniciante;3;"O seu professor de programação gostaria de fazer uma tela com as seguintes características:


	Ter 39 traços (-) na primeira linha;
	Ter uma | embaixo do primeiro traço e do trigésimo nono traço da primeira linha, embaixo do 2o traço deve começar a escrever ""x = 35"" e o restante preencher com espaço em branco;
	Ter uma | embaixo do primeiro traço e do trigésimo nono traço da primeira linha, preencher no meio com espaço em branco;
	Ter uma | embaixo do primeiro traço e do trigésimo nono traço da primeira linha, embaixo do 17o traço deve começar a escrever ""x = 35"" e o restante preencher com espaço em branco;
	Repita o procedimento 3;
	Ter uma | embaixo do primeiro traço e do trigésimo nono traço da primeira linha, embaixo do 33o traço deve começar a escrever ""x = 35"" e o restante preencher no meio com espaço em branco;
	Repita o procedimento 1.


No final deve ficar igual a imagem a seguir:

 
--------------------------------------- (39 traços)
|x = 35                               |
|                                     |
|                x = 35               |
|                                     |
|                               x = 35|
--------------------------------------- (39 traços)";Não há.;A saída será impresso conforme a figura acima.;False;3 / 10;5708;1790;31.36%
2750;Saída 4;Iniciante;5;"O seu professor de programação gostaria que você fizesse um programa com as seguintes características:


	Criar 16 variáveis inteiras;
	Atribuir a elas valores de 0 a 15 a cada um das variáveis anteriores;
	Ter 39 traços (-) na primeira linha;
	Ter uma | embaixo do primeiro traço, décimo terceiro, vigésimo terceiro e do trigésimo nono traço da primeira linha, embaixo do 4o traço deve começar a escrever “decimal”, embaixo do 16o traço deve começar a escrever “octal”, embaixo do 26o traço deve começar a escrever “Hexadecimal” e o restante preencher com espaço em branco;
	Repita o procedimento 1;
	Ter uma | embaixo do primeiro traço, décimo terceiro, vigésimo terceiro e do trigésimo nono traço da primeira linha, embaixo do 8o traço deve imprimir o valor da primeira variável em valor decimal, embaixo do 18o traço deve imprimir o valor da primeira variável em valor octal, embaixo do 31o traço deve imprimir o valor da primeira variável em valor hexadecimal e o restante preencher com espaço em branco;
	Repita o procedimento 6 para as outras 15 variáveis;
	Repita o procedimento 1.


No final deve ficar igual a imagem a seguir:
 
--------------------------------------- (39 traços)
| decimal   |  octal  |  Hexadecimal  |
---------------------------------------
|      0    |    0    |       0       |
|      1    |    1    |       1       |
|      2    |    2    |       2       |
|      3    |    3    |       3       |
|      4    |    4    |       4       |
|      5    |    5    |       5       |
|      6    |    6    |       6       |
|      7    |    7    |       7       |
|      8    |   10    |       8       |
|      9    |   11    |       9       |
|     10    |   12    |       A       |
|     11    |   13    |       B       |
|     12    |   14    |       C       |
|     13    |   15    |       D       |
|     14    |   16    |       E       |
|     15    |   17    |       F       |
--------------------------------------- (39 traços)";Não há.;A saída será impressa conforme a figura acima.;False;5 / 10;4893;1316;26.90%
2751;Saída 5;Iniciante;5;"O seu professor de programação gostaria que você fizesse um programa com as seguintes características:


	Crie duas variáveis inteiras a e b e duas variáveis reais de simples precisão c e d;
	Atribua a variável a o valor 15 e atribua a variável b o valor de a dividido por 2;
	Atribua a variável c o valor 15.456 e atribua a variável d o valor de c dividido por 7;
	Mostre na primeira linha a frase: ""Valores de b:"";
	Mostre na linha seguinte a mesma quantidade de carácter da frase ""Valores de b:"", só que com traço (-);
	Mostre na linha seguinte a frase ""1) b = "", e o valor da variável b;
	Mostre na linha seguinte a frase ""2) b = "", e o valor da variável b usando 20 espaço e justificado à direita;
	Mostre na linha seguinte a frase ""3) b = "", e o valor da variável b usando 20 espaço preenchidos com 0;
	Mostre na linha seguinte a frase ""4) b = "", e o valor da variável b usando 20 espaço e justificado à esquerda;
	Mostre na linha seguinte a frase ""5) b = "", e o valor da variável b seguido do carácter '%';
	Pule uma linha;
	Mostre na linha seguinte a frase: ""Valores de d:"";
	Mostre na linha seguinte a mesma quantidade de carácter da frase ""Valores de d:"", só que com traço (-);
	Mostre na linha seguinte a frase ""1) d = "", e o valor da variável d;
	Mostre na linha seguinte a frase ""2) d = "", e o valor da variável d somente com sua parte inteira;
	Mostre na linha seguinte a frase ""3) d = "", e o valor da variável d com uma casa decimal;
	Mostre na linha seguinte a frase ""4) d = "", e o valor da variável d com duas casas decimais;
	Mostre na linha seguinte a frase ""5) d = "", e o valor da variável d com três casas decimais;
	Mostre na linha seguinte a frase ""6) d = "", e o valor da variável d com três casas decimais e colocados em 20 espaço;
	Mostre na linha seguinte a frase ""7) d = "", e o valor da variável d com três casas decimais e colocados em 20 espaço com 0 nos espaço em branco;
	Repita o procedimento 19 com justificativa à esquerda;
	Mostre na linha seguinte a frase ""9) d = "", e o valor da variável d com duas casas decimais seguido do carácter '%'.";Não há.;O resultado de seu programa deve ser escrito conforme o exemplo de saída.;False;5 / 10;4391;1041;23.71%
2752;Saída 6;Iniciante;1;"O seu professor de programação gostaria que você fizesse um programa com as seguintes características:


	Crie uma variável para armazenar 50 caracteres;
	Atribua a variável anterior a frase: ""AMO FAZER EXERCICIO NO URI"";
	Mostre na primeira linha o carácter <, o valor armazenado na variável com o formato ""%s"" e o carácter >;
	Mostre na linha seguinte o carácter < , o valor armazenado na variável com o formato ""%30s"" e o carácter >;
	Mostre na linha seguinte o carácter < , o valor armazenado na variável com o formato ""%.20s"" e o carácter >;
	Mostre na linha seguinte o carácter < , o valor armazenado na variável com o formato ""%-20s"" e o carácter >;
	Mostre na linha seguinte o carácter < , o valor armazenado na variável com o formato ""%-30s"" e o carácter >;
	Mostre na linha seguinte o carácter < , o valor armazenado na variável com o formato ""%.30s"" e o carácter >;
	Mostre na linha seguinte o carácter < , o valor armazenado na variável com o formato ""%30.20s"" e o carácter >;
	Mostre na linha seguinte o carácter < , o valor armazenado na variável com o formato ""%-30.20s"" e o carácter >;";Não há.;O resultado de seu programa deve ser escrito conforme o exemplo da saída.;False;1 / 10;1679;1239;73.79%
2753;Saída 7;Iniciante;1;"O seu professor de programação gostaria que você fizesse um programa com as seguintes características:


	Crie vinte e seis variáveis inteira;
	Atribua a primeira variável o valor 97;
	Atribua as outras demais variável o valor da primeira somado de uma unidade;
	Mostre na tela os valores numéricos da primeira variável, um espaço em braco, o carácter 'e', outro espaço em branco e o seu valor alfanumérico (caracteres);
	Repita o procedimento para todas as outras variáveis.";Não há.;O resultado de seu programa deve ser o mesmo do exemplo de saída.;False;1 / 10;2051;1656;80.74%
2754;Saída 8;Iniciante;2;"O seu professor de programação gostaria que você fizesse um programa com as seguintes características:


	Crie duas variáveis reais de dupla precisão;
	Atribua a primeira o valor 234.345 e a segunda o valor 45.698;
	Imprima as duas variáveis com seis casas decimais;
	Imprima as duas variáveis com sem nenhuma casa decimal;
	Imprima as duas variáveis com com uma casa decimal;
	Imprima as duas variáveis com com duas casa decimal;
	Imprima as duas variáveis com com três casa decimal;
	Imprima as duas variáveis com notação cientifica com 'e';
	Imprima as duas variáveis com notação cientifica com 'E';
	Imprima as duas variáveis com use a representação mais curta, com 'e' ou 'E' ou sem;
	Imprima as duas variáveis com use a representação mais curta, com 'e' ou 'E' ou sem;


Para imprimir, separe os valores com um espaço em branco, um traço (-) e um espaço em branco.";Não há.;O resultado de seu programa deve ser escrito conforme o exemplo da saída.;False;2 / 10;1665;1074;64.50%
2755;Saída 9;Iniciante;7;"O seu professor de programação gostaria que você fizesse um programa com as seguintes características:


	Mostre a seguinte frase na tela: ""Ro'b'er to\/"" (Entre o r e o t tem uma tabulação);
	Mostre a seguinte frase na tela: (._.) ( l: ) ( .-. ) ( :l ) (._.);
	Mostre a seguinte frase na tela: (^_-)(-_-) (-_^);
	Mostre a seguinte frase na tela: (""_"") ('.');";Não há.;O resultado de seu programa deve ser escrito conforme o exemplo de saída.;False;7 / 10;5748;1238;21.54%
2756;Saída 10;Iniciante;1;"O seu professor de programação gostaria que você fizesse um programa com as seguintes características:


	Coloque sete espaços em branco e coloque o carácter 'A';
	Coloque seis espaços em branco e coloque o carácter 'B', um espaço em branco e o carácter 'B';
	Coloque cinco espaços em branco e coloque o carácter 'C', três espaço em branco e o carácter 'C';
	Coloque quatro espaços em branco e coloque o carácter 'D', cinco espaço em branco e o carácter 'D';
	Coloque três espaços em branco e coloque o carácter 'E', sete espaço em branco e o carácter 'E';
	Repita o procedimento 4;
	Repita o procedimento 3;
	Repita o procedimento 2;
	Repita o procedimento 1.";Não há.;O resultado de seu programa deve ser escrito conforme o exemplo de saída.;False;1 / 10;2635;1859;70.55%
2757;Entrada e Saída de Números Inteiros;Iniciante;5;"O seu professor gostaria que você fizesse um programa com as seguintes características:


	Crie três variáveis para armazenar números inteiros;
	Leia o primeiro número, que pode ser um valor na faixa de: -10000 ≤ A ≤ 10000;
	Leia o segundo número, que pode ser um valor na faixa de: 0 ≤ B ≤ 99;
	Leia o terceiro número, que pode ser um valor na faixa de: 0 ≤ C ≤ 999;
	Imprima a letra A, um espaço em branco, o sinal de igual, um espaço em branco, o número armazenado na primeira variável, uma virgula, um espaço em branco, a letra B, um espaço em branco, o sinal de igual, um espaço em branco, o número armazenado na segunda variável, uma virgula, um espaço em branco, a letra C, um espaço em branco, o sinal de igual, um espaço em branco, o número armazenado na terceira variável. Não esqueça de pular linha;
	Repita o procedimento 5, colocando o número em um espaçamento de 10 dígitos e justificado a direita;
	Repita o procedimento 5, colocando o número em um espaçamento de 10 dígitos e preenchido com zeros;
	Repita o procedimento 5, colocando o número em um espaçamento de 10 dígitos e justificado a esquerda.";A entrada consiste vários arquivos de teste. Em cada arquivo de teste tem três linhas. Na primeira linha tem um inteiro A (-10000 ≤ A ≤ 10000). Na segunda linha tem um inteiro B (0 ≤ B ≤ 99). Na terceira linha tem um inteiro C (0 ≤ C ≤ 999). Conforme mostrado no exemplo de entrada a seguir.;Para cada arquivo da entrada, terá um arquivo de saída. O arquivo de saída tem quatro linhas da forma descrita no item 5. Conforme mostra o exemplo de saída a seguir.;False;5 / 10;2255;883;39.16%
2758;Entrada e Saída de Números Reais;Iniciante;7;"O seu professor gostaria de fazer um programa com as seguintes características:


	Crie duas variáveis para armazenar números reais de precisão simples;
	Crie duas variáveis para armazenar números reais de precisão dupla;
	Leia o primeiro número de precisão simples que sempre terá uma casa decimal;
	Leia o segundo número de precisão simples que sempre terá duas casas decimais;
	Leia o primeiro número de precisão dupla que sempre terá três casas decimais;
	Leia o segundo número de precisão dupla que sempre terá quatro casas decimais;
	Imprima a letra A, um espaço em branco, o sinal de igual, um espaço em branco, o número armazenado na primeira variável lida no passo 3, uma virgula, um espaço em branco, a letra B, um espaço em branco, o sinal de igual, um espaço em branco, o número armazenado na segunda variável lida no passo 4. Não esqueça de pular linha;
	Imprima a letra C, um espaço em branco, o sinal de igual, um espaço em branco, o número armazenado na primeira variável lida no passo 5, uma virgula, um espaço em branco, a letra D, um espaço em branco, o sinal de igual, um espaço em branco, o número armazenado na segunda variável lida no passo 6. Não esqueça de pular linha;
	Repita o procedimento 7, imprimindo os números com uma casa decimal;
	Repita o procedimento 8, imprimindo os números com uma casa decimal;
	Repita o procedimento 7, imprimindo os números com duas casas decimais;
	Repita o procedimento 8, imprimindo os números com duas casas decimais;
	Repita o procedimento 7, imprimindo os números com três casas decimais;
	Repita o procedimento 8, imprimindo os números com três casas decimais;
	Repita o procedimento 7, imprimindo os números com três casas decimais e em forma de notação cientifica com o carácter E;
	Repita o procedimento 8, imprimindo os números com três casas decimais e em forma de notação cientifica com o carácter E;
	Repita o procedimento 7, imprimindo somente a parte inteira do número;
	Repita o procedimento 8, imprimindo somente a parte inteira do número.";A entrada consiste em vários arquivos de teste. Em cada arquivo de teste tem duas linhas. Na primeira linha tem dois números reais A e B (-1000.0 ≤ A, B ≤ 1000.0), separados por espaço em branco. Na segunda linha tem dois números reais C e D (-1000.0 ≤ C, D ≤ 1000.0), separados por espaço em branco. Conforme mostrado no exemplo de entrada a seguir.;Para cada arquivo da entrada, terá um arquivo de saída. O arquivo de saída tem doze linhas da forma descrita no item 7 e 8. Conforme mostra o exemplo de saída a seguir.;False;7 / 10;1960;700;35.71%
2759;Entrada e Saída de Carácter;Iniciante;1;"O seu professor gostaria de fazer um programa com as seguintes características:


	Crie 3 variáveis para armazenar um único carácter;
	Leia um valor carácter para a primeira variável;
	Leia um valor carácter para a segunda variável;
	Leia um valor carácter para a terceira variável;
	Imprima a letra A, um espaço em branco, o sinal de igual, um espaço em branco, o carácter armazenado na primeira variável lida no passo 2, uma virgula, um espaço em branco, a letra B, um espaço em branco, o sinal de igual, um espaço em branco, o carácter armazenado na segunda variável lida no passo 3, a letra C, um espaço em branco, o sinal de igual, um espaço em branco, o carácter armazenado na terceira variável lida no passo 4. Não esqueça de pular linha;
	Imprima a letra A, um espaço em branco, o sinal de igual, um espaço em branco, o carácter armazenado na primeira variável lida no passo 3, uma virgula, um espaço em branco, a letra B, um espaço em branco, o sinal de igual, um espaço em branco, o carácter armazenado na segunda variável lida no passo 4, a letra C, um espaço em branco, o sinal de igual, um espaço em branco, o carácter armazenado na terceira variável lida no passo 2. Não esqueça de pular linha;
	Imprima a letra A, um espaço em branco, o sinal de igual, um espaço em branco, o carácter armazenado na primeira variável lida no passo 4, uma virgula, um espaço em branco, a letra B, um espaço em branco, o sinal de igual, um espaço em branco, o carácter armazenado na segunda variável lida no passo 2, a letra C, um espaço em branco, o sinal de igual, um espaço em branco, o carácter armazenado na terceira variável lida no passo 3. Não esqueça de pular linha.";A entrada consiste vários arquivos de teste. Em cada arquivo de teste tem três linhas. Na primeira linha tem uma variável A que armazena um valor carácter. Na segunda linha tem uma variável B que armazena um valor carácter. Na terceira linha tem uma variável C que armazena um valor carácter. Conforme mostrado no exemplo de entrada a seguir.;Para cada arquivo da entrada, terá um arquivo de saída. O arquivo de saída tem três linhas da forma descrita nos itens 5, 6 e 7. Conforme mostra o exemplo de saída a seguir.;False;1 / 10;1516;1081;71.31%
2760;Entrada e Saída de String;Iniciante;4;"O seu professor gostaria de fazer um programa com as seguintes características:


	Crie 3 variáveis para armazenar uma frase de no máximo 100 caracteres;
	Leia uma frase para a primeira variável;
	Leia uma frase para a segunda variável;
	Leia uma frase para a terceira variável;
	Imprima a primeira variável lida no passo 2, a segunda variável lida no passo 3, a terceira variável lida no passo 4. Não esqueça de pular linha;
	Imprima a primeira variável lida no passo 3, a segunda variável lida no passo 4, a terceira variável lida no passo 2. Não esqueça de pular linha;
	Imprima a primeira variável lida no passo 4, a segunda variável lida no passo 2, a terceira variável lida no passo 3. Não esqueça de pular linha;
	Repita o procedimento 5, imprimindo só 10 caracteres de cada variável.";A entrada consiste vários arquivos de teste. Em cada arquivo de teste tem três linhas. Na primeira linha tem uma variável A que armazena uma frase de no máximo 40 caracteres. Na segunda linha tem uma variável B que armazena uma frase de no máximo 40 caracteres. Na terceira linha tem uma variável C que armazena uma frase de no máximo 40 caracteres. Conforme mostrado no exemplo de entrada a seguir.;Para cada arquivo da entrada, terá um arquivo de saída. O arquivo de saída tem quatro linhas da forma descrita nos itens 5, 6, 7 e 8. Conforme mostra o exemplo de saída a seguir.;False;4 / 10;3237;872;26.94%
2761;Entrada e Saída de Vários Tipos;Iniciante;8;"O seu professor gostaria de fazer um programa com as seguintes características:


	Crie uma variável inteira;
	Crie uma variável real de simples precisão;
	Crie uma variável que armazene um carácter;
	Crie uma variável que armazene uma frase de no máximo 50 caracteres;
	Leia todas as variáveis na ordem da forma criada;
	Imprima todas as variáveis como foram lidas;
	Imprima as variáveis, separando-as por uma tabulação (8 espaços), na ordem que foram lidas;
	Imprima as variáveis com exatos 10 espaços.";A entrada consiste vários arquivos de teste. Em cada arquivo de teste tem uma linha. A linha tem uma variável A que armazena um número inteiro, uma variável B que armazena um número real, uma variável C com um carácter e uma variável D que armazena uma frase de no máximo 50 caracteres. Conforme mostrado no exemplo de entrada a seguir.;Para cada arquivo da entrada, terá um arquivo de saída. O arquivo de saída tem três linhas da forma descrita nos itens 6, 7 e 8. Conforme mostra o exemplo de saída a seguir. Imprima os valores de ponto flutuante com 6 casas decimais após a vírgula.;False;8 / 10;2556;433;16.94%
2762;Entrada e Saída 6;Iniciante;3;"O seu professor gostaria de fazer um programa com as seguintes características:


	Leia um número no formato: XXXXX.YYY;
	Imprima o número na forma invertida: YYY.XXXXX.";A entrada consiste vários arquivos de teste. Em cada arquivo de teste tem uma linha. A linha tem um número real com 3 casas decimais. Conforme mostrado no exemplo de entrada a seguir.;Para cada arquivo da entrada, terá um arquivo de saída. O arquivo de saída tem uma linha da forma descrita nos itens 2. Conforme mostra o exemplo de saída a seguir.;False;3 / 10;2111;1093;51.78%
2763;Entrada e Saída CPF;Iniciante;1;"O seu professor gostaria de fazer um programa com as seguintes características:


	Leia os dados de um CPF no formato XXX.YYY.ZZZ-DD;
	Imprima os quatro números, sendo um valor por linha.";A entrada consiste vários arquivos de teste. Em cada arquivo de teste tem uma linha. A linha tem o seguinte formato XXX.YYY.ZZZ-DD, onde XXX, YYY, ZZZ, DD são números inteiros. Conforme mostrado no exemplo de entrada a seguir.;Para cada arquivo da entrada, terá um arquivo de saída. O arquivo de saída tem quatro linhas com um número inteiro em cada uma delas, conforme foi entrado. Conforme mostra o exemplo de saída a seguir.;False;1 / 10;3097;1961;63.32%
2764;Entrada e Saída de Data;Iniciante;1;"O seu professor gostaria de fazer um programa com as seguintes características:


	Leia uma data no formato DD/MM/AA;
	Imprima a data no formato MM/DD/AA;
	Imprima a data no formato AA/MM/DD;
	Imprima a data no formato DD-MM-AA.";A entrada consiste vários arquivos de teste. Em cada arquivo de teste tem uma linha. A linha tem o seguinte formato DD/MM/AA onde DD, MM, AA são números inteiros. Conforme mostrado no exemplo de entrada a seguir.;Para cada arquivo da entrada, terá um arquivo de saída. O arquivo de saída tem três linhas conforme os procedimentos 2, 3 e 4. Conforme mostra o exemplo de saída a seguir.;False;1 / 10;2714;1737;64.00%
2765;Entrada e Saída com Virgula;Iniciante;3;"O seu professor gostaria de fazer um programa com as seguintes características:


	Leia uma frase que vai ter uma virgula no meio do texto;
	Imprima a primeira parte da frase;
	Imprima a segunda parte da frase.";A entrada consiste vários arquivos de teste. Em cada arquivo de teste tem uma linha. A linha tem uma frase com no máximo 100 caracteres (pode ter espaço em branco) e uma virgula. Conforme mostrado no exemplo de entrada a seguir.;Para cada arquivo da entrada, terá um arquivo de saída. O arquivo de saída tem duas linhas conforme os passos 2 e 3. Conforme mostra o exemplo de saída a seguir.;False;3 / 10;2989;1362;45.57%
2766;Entrada e Saída Lendo e Pulando Nomes;Iniciante;2;"O seu professor gostaria de fazer um programa com as seguintes características:


	Leia 10 nomes, sem espaço em branco;
	Imprima o terceiro nome da lista;
	Imprima o sétimo nome da lista;
	Imprima o nono nome da lista.";A entrada consiste vários arquivos de teste. Em cada arquivo de teste tem dez linhas. Em cada linha tem um nome de no máximo 30 caracteres e sem espaço em branco. Conforme mostrado no exemplo de entrada a seguir.;Para cada arquivo da entrada, terá um arquivo de saída. O arquivo de saída tem três linhas conforme os procedimentos 2, 3 e 4. Conforme mostra o exemplo de saída a seguir.;False;2 / 10;2316;1379;59.54%
2767;Festa;Matemática;9;Joãozinho está organizando sua festa de aniversário com N homens e M mulheres, e ele quer saber o número de bons pares que podem formados com seus convidados. Um par é bom quando é composto por um homem e uma mulher e a soma das alturas das duas pessoas é múltipla de K. Uma mesma pessoa pode fazer parte de mais de um par.;"A entrada é composta de vários casos de teste e termina com EOF.
A primeira linha de um caso de teste contém os inteiros N, M e K (\(1 \leq N, M, K \leq 10^5\)). A segunda linha contém N inteiros Ai, representando a altura dos N homens convidados. A terceira e última linha da entrada contém M inteiros Bi representando a altura das mulheres convidadas (\(1 \leq Ai, Bi \leq 10^5\)).";A saída deve conter um inteiro para cada caso de teste, indicando a quantidade possível de pares bons que podem ser formados.;False;9 / 10;513;140;27.29%
2768;Grafo do Dabriel;Grafos;9;Dabriel acaba de receber um grafo de presente e deseja realizar algumas operações sobre ele, porém como está muito ocupado decidiu pedir sua ajuda. Você deverá responder diversas consultas do tipo U, V, K, onde vc deverá imprimir o menor caminho de U até V, caso exista, onde os vértices visitados, excluindo U e V, devem ser menores ou iguais a K.;A entrada é composta por diversos casos de teste. A primeira linha terá 2 inteiros N, M (1 ≤ N ≤ 100, 1 ≤ M ≤ N*(N-1)/2). Nas próximas M linhas terá 3 inteiros U, V, W (1 ≤ U, V ≤ N, 0 ≤ W ≤ 2*10³), indicando que o vértice U tem uma ligação bidirecional com o vértice V com um custo de W. Na próxima linha terá 1 inteiro Q (1 ≤ Q ≤ 10⁵). Nas próximas Q linhas terá uma consulta U, V, K (1 ≤ U, V, K ≤ N).;Para cada consulta você deverá imprimir o menor custo seguindo as restrições do texto. Caso não exista resposta imprima -1.;False;9 / 10;412;124;30.10%
2769;Linha de Montagem;Iniciante;5;"Com o advento dos conceitos da Indústria 4.0 e a evolução da internet das coisas, se tornou simples acompanhar todas as etapas da produção de um produto em uma linha de montagem. De posse das informações, é possível otimizar a produção e diminuir o tempo gasto até que esteja pronta.

Uma indústria apresenta o seguinte esquema de produção:



Sabendo o tempo gasto em cada estação, e o tempo para trocar entre as duas linhas de montagem, calcule o menor tempo em que é possível realizar a produção de um item.";"A entrada possui vários casos de teste (EOF). A primeira linha contém um inteiro N, o número de etapas na linha de produção. A segunda linha contém dois inteiros e1 e e2, o tempo gasto para a entrada em cada uma das linhas de produção. A próxima linha possui N valores, a11, a12, ..., a1n, representando o tempo gasto para executar a iésima etapa na linha 1. A próxima também conterá  N valores, a21, a22, ..., a2n com os tempos de cada etapa na linha 2. As próximas duas conterá N-1 inteiros representando os tempos de transição da linha 1 para a linha 2,  t11, t12, ..., t1n-1 e da linha 2 para a linha 1,  t21, t22, ..., t2n-1, respectivamente. Por fim, mais dois inteiros x1 e x2 representando o tempo de saída de cada linha.

Considere que número de etapas por caso de teste estará entre 1 e 1000 e os demais valores entre 0 e 105.";A saída deve mostrar o tempo mínimo gasto na produção.;True;5 / 10;263;137;52.09%
2770;Tamanho da Placa;Iniciante;6;"Existe uma tradicional indústria no Brasil que produz equipamentos musicais. Atualmente eles estão totalmente imergidos com a era da Indústria 4.0 e a sua principal atuação é a criação de pedais de efeitos para guitarra, que existem em uma diversidade incrível, cada um para um tipo de cliente. Esta indústria implementou um sistema em que o seu cliente cria seu próprio pedal através de um protótipo 3D e interativo, inclusive com sons, simulando o pedal real. Sendo assim, após o cliente gerar seu modelo o mesmo é enviado para a empresa, onde será fabricado.

Acontece que para ser fabricado, o circuito do pedal é impresso em uma PCI(placa de circuito impresso), que tem um certo tamanho. Porém com a criatividade dos clientes, as placas estão tomando dimensões inimagináveis, tal fato faz com que a placa disponível na empresa não sirva. Como você é um excelente programador e um amante da música, cabe a você criar um programa em que dada as dimensões do circuito do cliente e a dimensão da placa disponível, diga se é possível utilizar ou não aquela placa.";"A primeira linha de cada caso de teste consiste de três inteiros X, Y, M (M≤105) representando respectivamente as dimensões da placa da empresa e a quantidade de pedidos. Para cada uma das próximas M linhas será fornecido dois inteiros Xi e Yi representando as dimensões da PCI do cliente.

É garantido que as dimensões são valores inteiros maiores que 0 e menor ou igual a 64.

A entrada termina com EOF.";Para cada circuito determine se é possível utilizar a PCI da empresa ou não.;False;6 / 10;1548;442;28.55%
2771;Média;Ad-Hoc;6;Joãozinho está terminando seu primeiro semestre na faculdade e em uma das matérias ele que irá decidir sua nota, baseada nas notas das N provas que ele fez durante o semestre. A nota final de um aluno é baseada na média aritmética de 3 notas distintas. Mas Joãozinho não está preocupado em saber qual a maior nota final obtida, e sim qual a K-ésima maior nota final que pode ser obtida. É garantido que existe a K-ésima nota e lembre-se, é possível ter mais de uma nota final com o mesmo valor e elas devem ser consideradas distintas.;"A entrada contém não mais que 10 casos de teste e termina com EOF. A primeira linha de um caso de teste contém dois inteiros N e K (\(3 \leq N \leq 100\), \(1 \leq K \leq  (N * (N - 1) * (N - 2))/6\)).
A segunda linha contém N inteiros Ai (\(1 \leq Ai \leq 10^5\)) representando a nota obtida na i-ésima prova.";A saída deve conter um número de ponto flutuante formatado com uma casa decimal.;False;6 / 10;377;133;35.28%
2772;Plantação;Ad-Hoc;10;"André João é um grande cultivador de plantas de uma grande cidade do interior do grande Brasil. Ele possui atualmente um canteiro com N plantas de uma espécie muito peculiar que morre ao completar T dias consecutivos sem cuidados.

Porém, André tem notado que muitas plantas tem morrido ultimamente, e suspeita que o seu funcionário é a razão disto. Sendo assim, ele pediu para que seu empregado anotasse o que foi feito em K dias, assim João poderia culpar o teu empregado pela morte das suas plantas.

Como o canteiro de André é muito grande, ele pediu que você desenvolvesse um programa que dado a quantidade inicial de plantas, o tempo em que a espécie consegue sobreviver, e os intervalos que seu funcionário cuidou em cada dia, lhe informe as plantas que permaneceram vivas ao final deste período.

João garante que todas as plantas foram cuidadas no dia 0 e, portanto, estão vivas! E o empregado garante que começou a trabalhar no dia 1 e nunca faltou um dia de serviço!";A entrada consiste de vários casos de teste. A primeira linha consiste dos inteiros N, K, T ( 1<= N, K, T <= 105 ). As próximas K linhas conterão dois inteiros l, r ( 1<= l <= r <= N ) significando que o empregado cuidou de todas as plantas no intervalo [l, r]  naquele dia.;"Para cada caso de teste, seu programa deve imprimir um inteiro representando a quantidade de plantas que permaneceram vivas ao final do período, seguido dos índices delas em ordem crescente. Lembre-se, se uma planta morreu algum dia, ela nunca mais voltarás a vida ;(.";False;10 / 10;351;45;12.82%
2773;Menor Caminho;Geometria Computacional;5;Joãozinho gosta muito de assitir aulas e quer gastar o mínimo de tempo possível no trajeto da sua casa até o local da sua aula. Sabe-se que ele anda a uma velocidade de V metros por segundo e que há um terreno baldio entre sua casa e sua escola que não pode ser usado para cortar caminho. Sabendo disso, qual o menor tempo, em segundos, para Joãozinho completar o trajeto? Considere a situação no plano 2D, que a casa de Joãozinho esta no ponto (Xi, Yi), a escola no ponto (Xf, Yf), o ponto inferior esquerdo no terreno no ponto (Xl, Yl) e o superior direito no ponto (Xr, Yr). O terreno possui seus lados paralelos aos eixos X e Y e é garantido que Xi < Xl, Xr < Xf, Yl \(\leq\) Yi, Yf \(\leq\) Yr, ou seja, A casa de Joãozinho está à esquerda do terreno, a escola à direita, e Joãozinho precisará contornar parte do terreno para chegar na escola.;"A entrada é composta por vários casos de teste e termina com EOF.
A primeira linha de um caso contém 5 inteiros Xi, Yi, Xf, Yf e V representando as coordenadas da casa de Joãozinho e da sua escola e a velocidade de Joãozinho em metros por segundo.
A segunda linha também contém 4 inteiros Xl, Yl, Xr e Yr, representando o canto inferior esquerdo do terreno e o canto superior direito. (\(0 \leq Xi, Yi \leq 10^6\), \(1 \leq V \leq 10^2\)).";Para cada caso de teste, imprima um número de ponto flutuante formatado com uma casa decimal, representando o menor tempo para Joãozinho chegar à sua escola sem passar dentro do terreno baldio. OBS: Joãozinho pode andar na borda do terreno.;False;5 / 10;206;82;39.81%
2774;Precisão do Sensor;Iniciante;4;"O professor está te ensinando sobre sensores. Este é um elemento muito importante em diversas aplicações. Para aprender melhor os conceitos de precisão o professor pediu para realizar uma montagem prática do sensor Termo Ind v4.0 no novo laboratório de Automação.

Você como bom aluno anotou a fórmula para o cálculo da precisão de um sensor:

\(\sigma\;=\;\sqrt{\frac{\sum_1^{QT}\left(\;X_i-\overline X\;\right)^2}{QT-1}}\)

Onde QT é a quantidade de vezes que foi realizado o teste, \(X\) o valor medido em cada teste e \(\overline X\) a média dos valores.

Para realizar o teste você ficou H horas fazendo testes, e a cada M minutos você verificou o valor X da temperatura entregue pelo sensor.

Agora que você tem as medidas, e como você tem a habilidade de programar, faça um programa que entregue a precisão do sensor.";"Existem vários casos de teste, cada caso consiste de duas linhas. A primeira contém dois valores H e M. E a segunda consiste dos valores de ponto flutuante Xi indicando o valor de cada medida do sensor.

É garantido que haverão no mínimo 5 e no máximo 105 medidas por caso e que estes valores estão no intervalo [0, 255] com duas casas decimais.";Para cada caso de teste, imprima uma única linha com um número indicando a precisão do sensor. O valor calculado deve ser apresentado com 5 dígitos após o ponto decimal.;False;4 / 10;504;267;52.98%
2775;Preparando a Produção;Iniciante;5;"Uma montadora de carros, permite que os usuários criem seus próprios projetos de veículos da maneira que desejar e ainda compartilhar tais informações com outros usuários com o intuito de criar uma rede de utilizadores bem diversificada. O processo se inicia com o cliente desenvolvendo seu próprio modelo através de um software, logo após a conclusão, os dados do projeto são armazenados e de acordo com a disponibilidade da montadora vão sendo realizados.

Porém uma falha na entrega das peças para a montadora está atrasando os pedidos. Acontece que as peças são entregues em pacotes, etiquetados com um número, que deveriam estar ordenados de forma crescente para que a produção inicie. A falha é que os pacotes estão sendo entregues de uma forma aleatória. Você deve criar um programa em que dados a ordem de entrega dos pacotes e o tempo que cada um deles leva para ser trocado de posição, calcule o tempo total para organizar os pacotes. Sabe-se que para efeito de organização dentro da empresa, os pacotes devem ser trocados de posição somente dois a dois e se estiverem um do lado do outro.";"A entrada consiste de vários casos de testes, lidos até EOF. Para cada caso, o primeiro valor da entrada é um inteiro N (1 <= N <= 1000) representando a quantidade de pacotes, logo após haverá duas linhas com N inteiros cada, com os números dos pacotes, na ordem da entrega, e o tempo, em segundos, que o n-ésimo pacote leva para ser trocado de lugar, respectivamente.

É garantido que os números dos pacotes para cada caso de teste forma uma permutação dos inteiros de 1 a N, e que nenhum pacote demora mais do que um minuto para mover.";Seu programa deve apresentar, para cada caso de teste, um único inteiro que representa o tempo total para organizar os pacotes.;False;5 / 10;315;157;49.84%
2776;Promoções;Iniciante;9;"Farcos é um programador iniciante na graduação e não gosta muito das festas da faculdade, já que nunca curte muito as músicas e a euforia noturna. Então decidiu usar suas habilidades e gastar seu tempo nessas festas ganhando algum dinheiro vendendo bebidas enlatadas, com ajuda de Dabriel, que lhe emprestou a quantia necessária para comprar seu estoque inicial. Sob a condição de que Farcos vendesse absolutamente todas as latas que comprasse.

					Para conseguir aumentar suas vendas durante a festa, o programador pensou em algumas promoções do tipo “Uma lata de refrigerante por 4R$, mas duas por 6R$” e com suas habilidades matemáticas ele calculou exatamente quais dentre essas promoções fazer e quantas vendas daquele tipo para que ao fim da noite, e consequentemente do evento, ele tivesse cumprido as exigências do seu fiador e ainda ter o maior lucro possível utilizando somente essas promoções.

					Sua tarefa é, dado as promoções que Farcos pensou e quantidade de latas de bebida que ele comprou para vender, calcular quanto ele arrecadou ao fim da noite.";A entrada é composta por vários casos de teste. A primeira linha de um caso de teste contém dois números inteiros N (1 ≤ N ≤ 1000) e M (1 ≤ M ≤ 2000) que representam respectivamente o número de tipos de promoções que Farcos pensou e a quantidade de latas que ele precisa vender. Seguem-se então N linhas referentes as promoções, cada uma contendo dois inteiros Q (1 ≤ Q ≤ 100) e V (1 ≤ V ≤ 1000) especificando que se pode comprar Q bebidas por V reais. A entrada termina com EOF.;A saída é composta de uma linha por caso de teste contendo um número inteiro que representa, em reais, qual a maior quantia que Farcos pôde arrecadar com aquelas promoções.;False;9 / 10;415;88;21.20%
2777;Subsets do Dabriel;Matemática;5;"Dabriel acabou de inventar um novo jogo que funciona da seguinte forma: Ele pensa em um inteiro N e deve encontrar a quantidade de subconjuntos maximais* que existem utilizando os números de 1 até N de forma que se o número i for escolhido para o conjunto, não poderá aparecer nem o número i-1 e nem o i+1. Para valores pequenos Dabriel sabe a resposta, porém com número grandes essa tarefa fica bem difícil. Você pode o ajudar ?

Para N = 5 os conjuntos válidos são: {1,3,5}, {2,4}, {2,5}, {1,4}.";A entrada é composta por diversos casos de teste. Cada caso contém um inteiro N (1 ≤ N ≤ 1018).;Para cada caso de teste imprima a quantidade de conjuntos existentes. Como esse número pode ser muito grande, imprima apenas o resto da divisão por 109+7.;False;5 / 10;97;48;49.48%
2778;Matriz do Dabriel;Paradigmas;10;"Dabriel adora criar jogos um tanto quanto peculiares com as suas incríveis matrizes. O último jogo criado acabou tendo uma complexidade bem mais alta que os outros e como ele anda muito atarefado com o mestrado, solicitou sua ajuda para desenvolver um programa capaz de dizer a resposta do jogo. Este consiste em uma matriz N por M, onde deseja-se sair da posição (1,1) e chegar na posição (N,M) e cada célula possui um valor e esse valor é acrescido no custo total do caminho para toda célula visitada. Sua tarefa é encontrar o custo do menor caminho. Porém, como se trata de Dabriel o jogo não é tão simples assim, algumas regras foram impostas:


	 Estando em uma célula (i,j) só podemos ir para as células (i+1,j), (i,j+1) ou (i,j-1);
	Nenhuma célula pode ser visitada mais do que uma vez;
	Não é permitido passar por mais que X casas com valores nulos;
	Não é permitido passar por mais que Y casas com valores negativos.


Dabriel sabe que com tantas regras assim pode existir caso onde não existe tal caminho, portanto ele estará satisfeito se você imprimir ""Impossivel"" para tais casos. Mas um coisa Dabriel pode te garantir: a célula (N,M) sempre terá um valor maior que zero.";"A entrada é composta por diversos casos de teste. A primeira linha terá 4 inteiros N, M, X, Y (1 ≤ N, M ≤ 100, 0 ≤ X, Y ≤ 20). Nas próximas N linhas terá M inteiros Xij (-100 ≤ Xij ≤ 100), representando os valores das células da matriz.
 ";"Para cada caso de teste imprima o menor caminho conforme descrito no texto, em casos onde não houver resposta imprima ""Impossivel"", sem aspas.";False;10 / 10;334;42;12.57%
2779;Álbum da Copa;Iniciante;2;"Em ano de Copa do Mundo de Futebol, o álbum de figurinhas oficial é sempre um grande sucesso entre crianças e também entre adultos. Para quem não conhece, o álbum contém espaços numerados de 1 a N para colar as figurinhas; cada figurinha, também numerada de 1 a N, é uma pequena foto de um jogador de uma das seleções que jogará a Copa do Mundo. O objetivo é colar todas as figurinhas nos respectivos espaços no álbum, de modo a completar o álbum (ou seja, não deixar nenhum espaço sem a correspondente figurinha).

As figurinhas são vendidas em envelopes fechados, de forma que o comprador não sabe quais fi- gurinhas está comprando, e pode ocorrer de comprar uma figurinha que ele já tenha colado no álbum.

Para ajudar os usuários, a empresa responsável pela venda do álbum e das figurinhas quer criar um aplicativo que permita gerenciar facilmente as figurinhas que faltam para completar o álbum e está solicitando a sua ajuda.

Dados o número total de espaços e figurinhas do álbum, e uma lista das figurinhas já compradas (que pode conter figurinhas repetidas), sua tarefa é determinar quantas figurinhas faltam para completar o álbum.";A primeira linha contém um inteiro N (1 ≤ N ≤ 100) indicando o número total de figurinhas e espaços no álbum. A segunda linha contém um inteiro M (1 ≤ M ≤ 300) indicando o número de figurinhas já compradas. Cada uma das M linhas seguintes contém um número inteiro X (1 ≤ X ≤ N) indicando uma figurinha já comprada.;Seu programa deve produzir uma única linha contendo um inteiro representando o número de figurinhas que falta para completar o álbum.;False;2 / 10;1219;684;56.11%
2780;Basquete de Robôs;Iniciante;1;"A organização da OIBR, Olimpíada Internacional de Basquete de Robô, está começando a ter problemas com dois times: os Bit Warriors e os Byte Bulls. É que os robôs desses times acertam quase todos os lan- çamentos, de qualquer posição na quadra! Pensando bem, o jogo de basquete ficaria mesmo sem graça se jogadores conseguissem acertar qualquer lançamento, não é mesmo? Uma das medidas que a OIBR está implantando é uma nova pontuação para os lançamentos, de acordo com a distância do robô para o início da quadra. A quadra tem 2000 centímetros de comprimento, como na figura.
				
Dada a distância D do robô até o início da quadra, onde está a cesta, a regra é a seguinte:

• Se D ≤ 800, a cesta vale 1 ponto;

• Se 800 < D ≤ 1400, a cesta vale 2 pontos;

• Se 1400 < D ≤ 2000, a cesta vale 3 pontos.

A organização da OIBR precisa de ajuda para automatizar o placar do jogo. Dado o valor da distância D, você deve escrever um programa para calcular o número de pontos do lançamento.";A primeira e única linha da entrada contém um inteiro D (0 ≤ D ≤ 2000) indicando a distância do robô para o início da quadra, em centímetros, no momento do lançamento.;Seu programa deve produzir uma única linha, contendo um inteiro, 1, 2 ou 3, indicando a pontuação do lançamento.;True;1 / 10;2666;1994;74.79%
2781;Câmara de Compensação;Iniciante;5;"Em uma cidade, muitas pessoas emprestam dinheiro para outras pessoas. A coisa chegou a um tal ponto que tem gente que é ao mesmo tempo devedor e credor. As pessoas resolveram então pagar suas dívidas e cada uma emitiu os cheques para pagar suas dívidas. Por exemplo, na figura, item (a), a pessoa C emitiu um cheque de 5 dinheiros para a pessoa A, e a pessoa D emitiu um cheque de 3 dinheiros para a pessoa C. Ou seja, a pessoa C recebeu da pessoa D e pagou a pessoa A. Pior ainda, existe um ciclo vicioso, em que a pessoa D emitiu um cheque de 3 dinheiros para a pessoa C, que por sua vez emitiu um cheque de 2 dinheiros para a pessoa B, que por sua vez emitiu um cheque de 1 dinheiro para a pessoa D. A situação mostrada no item (a) da Figura abaixo é descrita através de uma lista de cheques, com quatro triplas da forma (X, V, Y), para indicar que X emitiu um cheque de V dinheiros para Y . Na mesma Figura, no item (b), a situação é descrita com uma lista de apenas três cheques.
				
Entretanto, as duas listas são equivalentes: o saldo na conta bancária de uma pessoa é o mesmo em ambas as listas de cheques. Em ambos os casos, completada a compensação de todos os cheques, a pessoa A terminará com 5 dinheiros a mais na sua conta, a pessoa B terminará com 1 dinheiro a mais na sua conta, a pessoa C terminará com 4 dinheiros a menos na sua conta e a pessoa D terminará com 2 dinheiros a menos na sua conta.

Vamos então definir equivalência de listas de cheques emitidos: duas listas de cheques são equivalentes se, ao final do processo de compensação de todos os cheques, o seguinte vale para cada pessoa: seu saldo bancário ao final da compensação de uma lista é o mesmo que o saldo bancário da pessoa ao final da compensação da outra lista.

O total de valores compensados no item (a) da figura é igual a 11 dinheiros ao passo que no item (b) o total é de apenas 6 dinheiros! Este problema tem duas subtarefas:

• Subtarefa A: determinar, dada uma lista de cheques, se é possível ou não diminuir o total de valores compensados utilizando uma outra lista de cheques equivalente.

• Subtarefa B: determinar o total mínimo de valores compensados em uma lista de cheques equivalente. Você deve escrever um programa que resolva apenas a Subtarefa A ou que resolva as duas subtarefas.

Você deve escrever um programa que resolva apenas a Subtarefa A ou que resolva as duas subtarefas.";A primeira linha contém dois inteiros, M (1 ≤ M ≤ 10⁶) e N (2 ≤ N ≤ 10³), onde M é o número de cheques emitidos e N é o número de habitantes da cidade. Os habitantes são identificados por números inteiros de 1 a N. Cada uma das M linhas seguintes descreve um cheque da lista e contém três inteiros X (1 ≤ X ≤ N), V (1 ≤ V ≤ 10²)  e Y (1 ≤ Y ≤ N, Y != X) que indica que X emitiu um cheque de V dinheiros a favor de Y . É possível que haja mais de um cheque de X a Y. Também é possivel que haja cheques de X a Y e de Y a X, mas não de X a X.;"Seu programa deve produzir duas linhas na saída. A primeira linha descreve a resposta para a Subtarefa A e deve conter um único caractere. O caractere deve ser S para indicar que é possível diminuir o total dos cheques compensados com uma lista de cheques equivalente, ou N para indicar que não é possível diminuir o total de cheques compensados.

Se o seu programa resolve também a Subtarefa B, a segunda linha descreve a resposta para essa subtarefa e deve conter um número inteiro, o valor mínimo do total de cheques compensados, em uma lista equivalente. Se o seu programa não resolve a Subtarefa B, você pode deixar a linha em branco ou colocar um valor inteiro arbitrário.";True;5 / 10;387;128;33.07%
2782;Escadinha;Iniciante;3;Dizemos que uma sequência de números é uma escadinha, se a diferença entre números consecutivos é sempre a mesma. Por exemplo, “2, 3, 4, 5” e “10, 7, 4” são escadinhas. Note que qualquer sequência com apenas um ou dois números também é uma escadinha! Neste problema estamos procurando escadinhas em uma sequência maior de números. Dada uma sequência de números, queremos determinar quantas escadinhas existem. Mas só estamos interessados em escadinhas tão longas quanto possível. Por isso, se uma escadinha é um pedaço de outra, consideramos somente a maior. Por exemplo, na sequência “1, 1, 1, 3, 5, 4, 8, 12” temos 4 escadinhas diferentes: “1, 1, 1”, “1, 3, 5”, “5, 4” e “4, 8, 12”.;A primeira linha da entra contém um inteiro N (1 ≤ N ≤ 1000) indicando o tamanho da sequência de números. A segunda linha contém N inteiros definindo a sequência. O valor dos números da sequência está entre −106 e 106 inclusive.;Imprima uma linha contendo um inteiro representando quantas escadinhas existem na sequência.;False;3 / 10;712;372;52.25%
2783;Figurinhas da Copa;Iniciante;3;"Em ano de Copa do Mundo de Futebol, o álbum de figurinhas oficial é sempre um grande sucesso entre crianças e também entre adultos. Para quem não conhece, o álbum contém espaços numerados de 1 a N para colar as figurinhas; cada figurinha, também numerada de 1 a N, é uma pequena foto de um jogador de uma das seleções que jogará a Copa do Mundo. O objetivo é colar todas as figurinhas nos respectivos espaços no álbum, de modo a completar o álbum (ou seja, não deixar nenhum espaço sem a correspondente figurinha).
				
				Algumas figurinhas são carimbadas (efetivamente têm um carimbo impresso sobre a fotografia do jogador) e são mais raras, mais difíceis de conseguir. As figurinhas são vendidas em envelopes fechados, de forma que o comprador não sabe quais figurinhas está comprando, e pode ocorrer de comprar uma figurinha que ele já tenha colado no álbum.
				
				Para ajudar os usuários, a empresa responsável pela venda do álbum e das figurinhas quer criar um aplicativo que permita gerenciar facilmente as figurinhas que faltam para completar o álbum. 
				
				Dados o número total de espaços e figurinhas do álbum (N), a lista das figurinhas carimbadas e uma lista das figurinhas já compradas (que pode conter figurinhas repetidas), sua tarefa é determinar quantas figurinhas carimbadas faltam para completar o álbum.";A primeira linha contém três números inteiros N (1 ≤ N ≤ 100) , C (1 ≤ C ≤ N/2) e M (1 ≤ M ≤ 300) indicando respectivamente o número de figurinhas (e espaços) do álbum, o número de figurinhas carimbadas do álbum e o número de figurinhas já compradas. A segunda linha contém C números inteiros distintos Xi indicando as figurinhas carimbadas do álbum. A terceira linha contém M números inteiros Yi (1 ≤ Xi , Yi ≤ N) indicando as figurinhas já compradas.;Seu programa deve produzir um inteiro representando o número de figurinhas carimbadas que falta para completar o álbum.;False;3 / 10;2042;831;40.70%
2784;Ilhas;Iniciante;5;"Os moradores das Ilhas Brasileiras Ocidentais (IBO) são assíduos jogadores do mais recente jogo online, Magos e Guerreiros. Tão competitivas se tornaram as partidas de Magos e Guerreiros na IBO, que a empresa criadora do jogo decidiu instalar em uma das ilhas um servidor dedicado apenas aos jogadores da IBO.

Entretanto, a empresa sabe que, se os jogadores acharem que o novo servidor é injusto, eles irão parar de jogar Magos e Guerreiros, gerando incontáveis perdas. Para avaliar se o novo servidor é justo, os jogadores vão comparar o desempenho do jogo na ilha que tem a conexão mais rápida e o desempenho na ilha que tem a conexão mais lenta com o novo servidor. Se a diferença de desempenho for muito grande, os residentes da ilha mais distante se sentirão injustiçados e abandonarão o jogo.

A conexão de internet da IBO funciona através de um sistema de cabos de fibra ótica. Pares de ilhas são conectados por cabos, e cada cabo toma um certo tempo (chamado de ping) para comunicar informação entre as duas partes. Quando duas ilhas se comunicam através de uma série de cabos (portanto, através de ilhas intermediárias), o ping entre elas é a soma dos pings de cada cabo no caminho. A rede da IBO foi implementada por ótimos programadores e, portanto, um par de ilhas sempre se comunica através do caminho com menor ping possível.

Dada a configuração da rede da IBO e a ilha em que a empresa deseja instalar o novo servidor, determine a diferença entre os pings da ilha com menor e maior pings até o servidor.";"A primeira linha contém N (2 ≤ N ≤ 1000) e M (N − 1 ≤ M ≤ 105), o número de ilhas e o número de cabos de fibra ótica, respectivamente. As ilhas são numeradas de 1 a N. Cada uma das M linhas seguintes contém três inteiros Ui (1 ≤ Ui ≤ N), Vi (1 ≤ Vi ≤ N) e Pi (1 ≤ Pi ≤ 1000) e descreve um cabo entre as ilhas Ui e Vi com ping Pi (note que cabos transmitem informação em ambas as direções). Finalmente, a última linha contém um inteiro S (1 ≤ S ≤ N), o número da ilha em que o servidor será instalado.

Cada par de ilhas é conectado por no máximo um cabo de fibra ótica, e nenhum cabo conecta uma ilha a si mesma. É garantido que qualquer ilha consegue se comunicar com qualquer outra através de algum caminho de cabos de fibra ótica.";Seu programa deve produzir um inteiro representando a diferença entre o ping da ilha com maior ping até o servidor, e o da ilha com menor ping até o servidor. Note que a ilha em que o servidor se encontra não é considerada no cálculo do menor ping.;False;5 / 10;425;199;46.82%
2785;Pirâmide;Iniciante;5;"No depósito da fábrica, encostada numa parede, existe uma matriz de N linhas por N colunas de caixas empilhadas. Cada caixa possui um peso inteiro positivo associado. O inspetor da fábrica precisa retirar algumas caixas da matriz de modo a deixar uma espécie de pirâmide de caixas satisfazendo as seguintes restrições:

• Se uma caixa está na pirâmide, a caixa imediatamente abaixo dela também deve estar na pirâmide;

• Na i-ésima linha de caixas (a linha 1 é a do topo da matriz), a pirâmide deve ter exatamente i caixas consecutivas.

Dados os pesos de todas as caixas na matriz, seu programa deve calcular o peso total mínimo que uma pirâmide poderá ter, se o inspetor retirar algumas caixas segundo as restrições acima.";"A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 100), indicando a dimensão da matriz. As N linhas seguintes contêm, cada uma, N inteiros representando os pesos das caixas em cada linha da matriz de caixas.

Os valores dos elementos da matriz estão entre 1 e 100, inclusive.";Seu programa deve produzir uma única linha, contendo um inteiro, indicando o peso total mínimo que a pirâmide poderá ter.;False;5 / 10;442;179;40.50%
2786;Piso da Escola;Iniciante;1;"O colégio pretende trocar o piso de uma sala de aula e a diretora aproveitou a oportunidade para passar uma tarefa aos alunos. A sala tem o formato de um retângulo de largura L metros e comprimento C metros, onde L e C são números inteiros. A diretora precisa comprar lajotas de cerâmica para cobrir todo o piso da sala. Seria fácil calcular quantas lajotas seriam necessárias se cada lajota fosse um quadrado de 1 metro de lado. O problema é que a lajota que a diretora quer comprar é um quadrado que possui 1 metro de diagonal, não de lado. Além disso, ela quer preencher o piso da sala com as diagonais das lajotas alinhadas aos lados da sala, como na figura.
				
A loja vai fornecer lajotas do tipo 1: inteiras; do tipo 2, que correspondem à metade das do tipo 1, cortadas ao longo da diagonal; e lajotas do tipo 3, que correspondem à metade do tipo 2. Veja os três tipos de lajotas na figura.

Está muito claro que sempre serão necessárias 4 lajotas do tipo 3 para os cantos da sala. A tarefa que a diretora passou para os alunos é calcular o número de lajotas dos tipos 1 e 2 que serão necessárias. Na figura, para L = 3 e C = 5, foram necessárias 23 do tipo 1 e 12 do tipo 2. Seu programa precisa computar, dados os valores de L e C, a quantidade de lajotas do tipo 1 e do tipo 2 necessárias.";A primeira linha da entrada contém um inteiro L (1 ≤ L ≤ 100) indicando a largura da sala. A segunda linha contém um inteiro C (1 ≤ C ≤ 100)representando o comprimento da sala.;Imprima duas linhas na saída. A primeira deve conter um inteiro, representando o número de lajotas do tipo 1 necessárias. A segunda deve conter um inteiro, indicando o número de lajotas do tipo 2.;True;1 / 10;1948;1371;70.38%
2787;Xadrez;Iniciante;1;No tabuleiro de xadrez, a casa na linha 1, coluna 1 (canto superior esquerdo) é sempre branca e as cores das casas se alternam entre branca e preta, de acordo com o padrão conhecido como... xadrez! Dessa forma, como o tabuleiro tradicional tem oito linhas e oito colunas, a casa na linha 8, coluna 8 (canto inferior direito) será também branca. Neste problema, entretanto, queremos saber a cor da casa no canto inferior direito de um tabuleiro com dimensões quaisquer: L linhas e C colunas. No exemplo da figura, para L = 6 e C = 9, a casa no canto inferior direito será preta!;A primeira linha da entrada contém um inteiro L (1 ≤ L ≤ 1000) indicando o número de linhas do tabuleiro. A segunda linha da entrada contém um inteiro C (1 ≤ C ≤ 1000) representando o número de colunas.;"Imprima uma linha na saída. A linha deve conter um inteiro, representando a cor da casa no canto inferior direito do tabuleiro: 1, se for branca; e 0, se for preta.";True;1 / 10;3748;2257;60.22%
2788;Aula;Ad-Hoc;10;"Em uma aula de Teoria dos Números, a professora Gina estava mostrando algumas propriedades
de múltiplos de um número. Ela anunciou aos alunos que escreveria no quadro um múltiplo de 823.
Porém, em um súbito momento de distração enquanto refletia sobre as consequências do Lema de Burnside,
ela escreveu o número \(234\), que na verdade era a quantidade de dimensões do problema no qual
ela ficou pensando na madrugada anterior.


Impacientes, os alunos começaram a rir. ``Mas professora, 234 não é múltiplo de 823!'', disse
o mais inteligente da turma, depois de usar uma máquina de calcular para verificar esta
complexa relação entre esses dois inteiros positivos.


Mas Gina é uma matemática preparada para tudo. Sem pensar muito, ela respondeu:
``Não terminei de escrever ainda''. Em seguida, adicionou um dígito 1 à esquerda do \(234\) e um dígito
5 à direita. Agora sim, \(12345\) é um múltiplo de 823. Ela então seguiu com sua explicação.


Apesar de ter se saído bem nessa, Gina gostaria de estar melhor preparada para essas situações.
Como ideias sobre problemas aleatórios surgem a qualquer momento, ela prefere ter um programa
para salvá-la em situações parecidas e assim liberar sua mente para atingir o nirvana matemático em paz.


Ajude Gina. Dados dois números \(N\) e \(M\), diga qual é o menor múltiplo de \(M\) que pode ser obtido
adicionando dígitos à direita e/ou à esquerda de \(N\). Note que você pode precisar de adicionar
vários dígitos, e que não é permitido adicionar dígitos no meio de \(N\). Gina não quer apagar
o número que já escreveu, apenas escrever mais dígitos para torná-lo múltiplo de \(M\).
Além disso, é possível que não seja necessário escrever nenhum dígito adicional.";"A entrada contém apenas uma linha com os dois inteiros \(N\) e \(M\), separados por espaço.

\(1 \leq N \leq 10^{12}\)
\(1 \leq M \leq 2 \times 10^5\)";"Escreva na saída uma linha contendo um número: o menor múltiplo de \(M\) que pode
ser obtido adicionando-se quantos dígitos forem necessários à direita ou esquerda de \(N\).";False;10 / 10;225;17;7.56%
2789;Crise Hídrica;Ad-Hoc;8;"Montes Claros, uma cidade do norte de Minas Gerais, tem passado por uma grande crise hídrica nos
últimos tempos. A escassez de água tem afetado a vida de muitos moradores, fazendo-os colocar
suas casas à venda por um preço bem abaixo do mercado. Abbade, um grande investidor,
observa esse momento de crise como uma oportunidade de investimento e pretende comprar várias dessas
casas.


Existem \(N\) casas em Montes Claros e \(M\) delas estão à venda. Um fato curioso é que existe apenas um
único caminho entre qualquer par de casas e é possível, a partir de qualquer casa, chegar a todas as
outras da cidade.


Por causa da crise, \(Q\) caminhões-pipa passam mensalmente pelas ruas da cidade.
O \(i\)-ésimo desses caminhões faz o caminho de uma determinada casa \(X_i\) até outra casa \(Y_i\),
deixando \(L_i\) litros de água em cada casa em seu caminho.


Abbade possui \(D\) reais para investir na compra das casas.
Porém, como ele tem receio de que a crise piore e os imóveis nunca sejam revendidos,
ele comprará as casas de modo que a soma da quantidade de água recebida pelos caminhões nessas
casas seja a maior possível. Para decidir quais casas comprar, ele pediu a sua ajuda.";"A primeira linha contém dois inteiros \(N\) e \(D\) separados por espaço,
representando a
quantidade de casas da cidade e o dinheiro que Abbade possui para a compra das casas.
Cada casa é identificada por um inteiro entre \(1\) e \(N\).
Seguem \(N-1\) linhas. A \(i\)-ésima delas conterá dois inteiros, \(A_i\) e \(B_i\), significando que existe
uma rota direta entre essas casas.


A linha seguinte conterá um inteiro \(M\), indicando a quantidade de casas que estão à venda.
Seguem \(M\) linhas.
A \(i\)-ésima delas conterá dois inteiros \(C_i\) e \(V_i\) , sendo \(C_i\) o número de uma das casas
e \(V_i\) seu preço de venda.
É garantido que uma casa não aparecerá mais de uma vez.


A linha seguinte conterá um inteiro \(Q\), indicando a quantidade de caminhões-pipa que passarão pela cidade. 
Seguem \(Q\) linhas.
A \(i\)-ésima dessas linhas conterá três inteiros \(X_i\), \(Y_i\) e \(L_i\),
indicando que o \(i\)-ésimo caminhão partirá da casa \(X_i\) até a casa \(Y_i\) deixando \(L_i\) litros de
água em cada uma das casas do caminho.

\(1 \leq N \leq 5 \times 10^3\)
\(1 \leq D \leq 10^3\)
\(1 \leq M \leq N\)
\(1 \leq V_i \leq 100\)
\(1 \leq Q \leq 5 \times 10^5\)
\(1 \leq L \leq 10^3\)";"Escreva na saída uma linha contendo um inteiro: a maior quantidade possível de água que as casas
que Abbade comprar irão receber, dado que ele comprará casas de forma a maximizar esse valor.";False;8 / 10;174;56;32.18%
2790;Dados;Ad-Hoc;3;"Após longas partidas de Dungeons & Dragons, Alice e seus amigos resolveram
fazer outra coisa. Como Alice é muito organizada, na hora de guardar os dados
ela gostaria de deixar todos os dados com o mesmo valor de face voltado para
cima. Mas como ela também é preguiçosa, gostaria de fazer isto com a menor
quantidade de movimentos possíveis.


A cada movimento, ela pode rotacionar o dado para mostrar uma das faces
adjacentes da face atual. Veja que nesta versão do jogo, Alice e seus amigos 
estão usando dados regulares, de seis faces, numerados de \(1\) a \(6\), onde a 
soma de duas faces opostas resulta sempre em \(7\).


Ajude Alice a determinar a menor quantidade de movimentos necessários
para que todos os dados fiquem com a mesma face voltada para cima.";"A entrada é composta por duas linhas. Na primeira delas temos um inteiro \(N\), indicando
a quantidade de dados presentes. A segunda linha contêm \(N\) inteiros separados por espaço. O \(i\)-ésimo deles, \(d_{i}\),
representa o valor da face que está virado para cima.   

\(1 \leq N \leq 10^5\)
\(1 \leq d_i \leq 6,\mbox{ para todo }1 \leq i \leq N\)";"Exiba em uma linha um inteiro, a menor quantidade de movimentos necessários para deixar todos os dados com a mesma
face para cima.";False;3 / 10;287;147;51.22%
2791;Feijão;Iniciante;1;"Conta-se nos arredores de Montes Claros que, há muito tempo no mercado municipal,
Sebastião e seus companheiros de trabalho sempre jogam uma partida de adivinhação após
a entrega dos produtos agrícolas colhidos na semana que se passou.
O jogo, que se chama ``Adivinhe Onde o Feijão Está'', consiste em esconder um
grão de feijão em um de quatro copos opacos e, depois de embaralhá-los, o apostador
deve adivinhar em qual copo o legume está.



					 

				


Neste ano, devido ao grande sucesso cultural e histórico e à enorme quantidade de pessoas que
praticam este jogo no mercado municipal, a prefeitura resolveu realizar um campeonato de
``Adivinhe Onde o Feijão Está''. Entretanto, ela necessita de um programa para mostrar
aos expectadores onde o feijão estava após o fim de uma partida.
Sabendo que a próxima Maratona Mineira de Programação ocorrerá na cidade,
ela logo encomendou uma solução aos exímios programadores.
Desta forma, você deve auxiliar a organização nesta missão com um programa
que informe, ao fim de uma partida, onde o feijão esteve.";"A entrada conterá apenas uma linha com quatro inteiros, \(C_1\), \(C_2\), \(C_3 \) e \(C_4\) separados por um espaço.
O valor \(C_i = 1\) indica que o feijão estava no copo número \(i\), e \(C_i = 0\)
indica que o \(i\)-ésimo copo estava vazio ao fim da partida.
Haverá sempre exatamente um copo com o feijão.";Escreva na saída uma linha contendo um inteiro entre \(1\) e \(4\), correspondendo à posição onde o feijão estava.;True;1 / 10;2133;1679;78.72%
2792;Golnaldinho;Ad-Hoc;8;"Golnaldinho foi um brilhante jogador de futebol, tendo passagens marcantes em todas as equipes em que atuou durante sua carreira, sejam nacionais tais como Grêmio, Flamengo e Atlético-MG, ou internacionais, tais como Milan, PSG e Barcelona. Sua genialidade com a bola nos pés lhe rendeu diversas convocações para representar a Seleção Brasileira, além de uma legião de fãs espalhados pelo mundo. Este ano, em busca de novos desafios, Golnaldinho decidiu aposentar as chuteiras e se aventurar no mundo da Computação.


Tal notícia surpreendeu diversas pessoas que não conheciam o amor de Golnaldinho por algoritmos e estruturas de dados. Tamanho amor fazia com que o ex-jogador passasse horas estudando o assunto enquanto se concentrava para as partidas de futebol. Durante a entrevista coletiva em que anunciou sua aposentadoria, ele mesmo afirmou que à medida em que melhorava suas habilidades em programação, melhor era o seu desempenho em campo.


Durante seus estudos, Golnaldinho encontrou um livro de problemas computacionais e intrigou-se com um problema em específico, pois não conseguiu solucioná-lo. Competitivo como ele é e sabendo de suas habilidades de programação, Golnaldinho lhe desafiou a resolvê-lo.


O enunciado de tal problema é o seguinte:

Suponha um array com \(\displaystyle{N}\) inteiros, onde a i-ésima posição desse array é ocupada pelo valor \(\displaystyle{i}\), ou seja, a posição 1 é ocupada pelo valor 1, a posição 2 é ocupada pelo valor 2 e assim por diante, como pode ser visualizado na figura abaixo:



Kaká gostaria de remover todos os números desse array.
        Porém, as exclusões a serem efetuadas devem respeitar uma ordem específica.
        Pensando nisso, Kaká implementou uma função que deleta um único elemento por vez,
        dado o índice do elemento a ser excluído.
        Ou seja, caso Cacá deseje excluir o elemento 2 no array acima, bastaria informar o índice do elemento, que neste caso é igual a 2.
        Como resultado, a função retornaria o seguinte array após realizar a exclusão:



Agora, se Kaká desejasse excluir o elemento 4 do array, bastaria informar o índice que neste caso é igual a 3. A função retornaria:



Tal procedimento é realizado até que não haja mais nenhum elemento no array.
Kaká está com problemas em automatizar as chamadas para essa função. Isso porque não conseguiu implementar um script que forneça a ordem dos índices a serem excluídos, respeitando a ordem de exclusão dos elementos. Ou seja, se para um array com \(\displaystyle{N=5}\) a ordem de exclusão dos elementos for {2,4,5,1,3}, a ordem dos índices será {2,3,3,1,1}. Você poderia ajudá-lo nesta implementação?";"A entrada começa com uma linha contendo um inteiro \(N\), indicando o número de elementos do array.
A segunda linha de entrada possui \(N\) inteiros separados por espaço, indicando a ordem de exclusão dos elementos.
É garantido que, nos valores da segunda linha de entrada, cada um dos inteiros de \(1\) a \(N\) aparece
exatamente uma vez.

\(1 \leq N \leq 5\times10^5\)";Escreva na saída uma linha com \(N\) inteiros separados por um espaço, que representem a ordem dos índices a serem excluídos.;True;8 / 10;765;220;28.76%
2793;HM;Ad-Hoc;4;"``Homens & Mulheres'' é uma loja de vestuário em Montes Claros que Isabel
chefia. Esta loja é muito famosa por ter exatamente o mesmo número de roupas
masculinas e femininas. Muito organizada, Isabel quer categorizar seu estoque de
roupas mantendo a ordem em que são armazenadas.



Ordem em que as roupas são armazenadas. Neste exemplo temos
  MFFMFMFFMFMM onde F denota roupa feminina e M roupa masculina.

Isabel ainda não sabe quantas categorias ela vai precisar. Ela apenas decidiu
dois critérios:

 Todas as categorias possuirão o mesmo número de roupas masculinas
        e femininas.
   
 As roupas já estão penduradas em uma grande arara e, para minimizar
        seu trabalho, ela apenas deseja colocar divisórias entre as categorias,
        sem trocar nenhuma roupa de lugar.
 



No exemplo da figura, se Isabel
usar 2 categorias, ela pode tanto colocar as quatro primeiras roupas em
uma categoria e as oito demais na segunda, como colocar as seis primeiras roupas
em uma categoria e as seis últimas na segunda. Isabel pode também preferir
usar uma categoria apenas (englobando todas as roupas) ou usar 3
categorias diferentes (separando as roupas em MFFM, FM, FFMFMM), mas note
que não é possível separar em quatro ou mais categorias mantendo o mesmo
número de roupas masculinas e femininas em cada uma.


Ajude então Isabel a definir de quantas maneiras possíveis ela pode categorizar
seu estoque sem violar a tradição da empresa.";"A entrada contém apenas uma linha com uma sequência de letras indicando os tipo de roupa
da loja de Isabel: M indica uma roupa masculina e F uma feminina.


A entrada conterá entre \(2\) e \(10^7\) roupas, e sempre terá o mesmo número de roupas
masculinas e femininas.";"Escreva na saída apenas uma linha contendo um inteiro: o número de maneiras possíveis
que Isabel pode categorizar seu estoque.


Como a resposta pode ser muito grande, escreva o resto da divisão dela por \(10^9+7\).";True;4 / 10;158;67;42.41%
2794;Montes Claros;Ad-Hoc;2;"Renato gosta muito da vista que tem da varanda de sua casa, de onde pode
contemplar os montes da sua cidade. É realmente um belo panorama, com vários
montes, de diferentes tonalidades. Ele gosta especialmente dos montes claros,
que ficam mais distantes.





Seus amigos de outros locais dizem que nem todos os montes são claros, que
alguns têm uma vegetação bem escura, mas, como estão localizados bem distantes,
parecem claros. Eles dizem que isto está relacionado à perspectiva atmosférica,
um efeito que faz os montes mais distantes parecerem mais claros que os mais
próximos. Renato quer mostrar que na sua cidade os montes realmente são mais
claros quanto maior a distância de sua casa, e para isso anotou a distância e a
tonalidade de cada um. Ajude-o a verificar sua afirmação.";"A entrada começa com um número inteiro \(N\) indicando o número de montes.
Cada uma das \(N\) linhas seguintes contém dois inteiros
\(D_i\) e \(T_i\) separados por um espaço,
que indicam, respectivamente, a distância e a tonalidade do
\(i\)-ésimo monte. Os montes não
são dados necessariamente em ordem de distância ou tonalidade.
Nenhum monte possui a mesma distância nem a mesma tonalidade de outro.

\(1\leq N \leq 5\times10^3\)
\(1 \leq D_i \leq 10^9\)
\(1 \leq T_i \leq 10^9\)";"Escreva na saída uma linha contendo apenas uma letra:
S caso os montes da entrada sigam a propriedade que Renato enunciou
ou N caso contrário.";True;2 / 10;450;259;57.56%
2795;Palíndromo;Ad-Hoc;6;"Dada uma cadeia de caracteres \(S\), você recebeu o desafio de transformá-la num palíndromo.
Um palíndromo é um texto que é exatamente igual se lido tanto da direita para esquerda como
da esquerda para a direita. Por exemplo, arara e radar são palíndromos.


Para transformar um texto num palíndromo, você pode escolher uma posição \(i\) do texto
e substituir a letra nesta posição por outra letra qualquer.
Esta operação possui um custo que é a distância entre a letra do alfabeto que estava
antes e a que você escolheu.
Considere que o alfabeto é circular, e portanto é possível substituir a por z
com custo \(1\). Você pode aplicar esta mesma operação quantas vezes quiser, cada vez
somando o custo como descrito.


Como às vezes você precisa de muitas modificações para transformar uma cadeia de caracteres
inteira em um palíndromo, foi permitido que você divida a cadeia original em
até \(K\) segmentos contíguos, de tal forma que após suas modificações,
cada um desses segmentos seja um palíndromo.
Esta divisão não possui custo.
O custo total da transformação que você fez será a soma dos custos das operações realizadas
em cada segmento.
Qual é o menor custo possível para transformar todos os segmentos em palíndromos?";"A entrada começa com uma linha contendo dois inteiros \(N\) e \(K\), separados por espaço.
A segunda linha contêm uma string \(S\) com \(N\) caracteres formada apenas por letras minúsculas do alfabeto,
de a a z.

\(1 \leq K \leq N \leq 400\)";"Escreva na saída uma linha contendo um inteiro: o menor custo para transformar \(S\) em palíndromo,
dado que você pode particioná-la em até \(K\) segmentos contíguos.";False;6 / 10;119;57;47.90%
2796;Planta da Casa;Ad-Hoc;4;"Isabel reformou sua casa no bairro Ibituruna depois do aumento de 
faturamento de sua loja. Agora ela quer comprar uma grande mesa de 
jantar para comemorar. Ela deseja a maior mesa possível que caiba 
dentro de sua nova casa. E adivinhe quem irá realizar essa tarefa para ela?


Não se desespere, Isabel forneceu tudo para que você resolva essa
tarefa. Ela forneceu uma planta da casa informando quais espaços já estão
ocupados e que, portanto, não podem conter a mesa.
Além disso, ela fez uma lista com o comprimento e a largura de várias
opções de mesa. Basta agora descobrir qual é a mesa de maior área que
pode ser comprada para que Isabel coloque em sua casa!


Isabel pode rotacionar uma mesa em 90 graus, caso precise.";"A entrada começa com uma linha contendo dois inteiros \(N\) e \(M\) separados
por espaço, que são as
dimensões da planta da casa.
Em seguida, há \(N\) linhas contendo \(M\) caracteres
descrevendo a planta. Um caractere . (ponto) representa um espaço
vazio, enquanto que o caractere # representa um espaço preenchido
(parede ou outro móvel).


A linha seguinte contém um inteiro \(K\) que representa o tamanho da lista
de opções de mesa que Isabel pode comprar.
As próximas \(K\) linhas contém, cada uma,
dois inteiros \(C_i\) e \(L_i\) separados por espaço,
representando o comprimento e largura da \(i\)-ésima mesa.

\(1 \le N, M \le 1000\)
\(1 \le K \le 10^6\)
\(1 \le C_i \le \min(500, \max(N, M))\)
\(1 \le L_i \le \min(500, \max(N, M))\)";"Escreva na saída uma linha contendo dois inteiros separados por espaço:
o comprimento e a largura da
da mesa de maior área que cabe na casa de Isabel.
Em caso de empate, imprima as dimensões da mesa de maior largura.
É garantido que sempre há pelo menos uma mesa que cabe na casa de Isabel.";False;4 / 10;1906;281;14.74%
2797;Aplicando Prova;Ad-Hoc;5;"Aplicar uma prova não é uma tarefa tão trivial como alguns pensam. Muitos alunos tentam colar e é difícil observar todos ao mesmo. Professora Bibika sempre faz dois tipos de provas completamente diferentes, que ela chama de prova tipo 1 e prova tipo 2. Além disso, ela tem usado uma técnica para posicionar os alunos de forma que a ocorrência das colas seja minimizada. Bibika aplica provas em várias salas de aulas diferentes. Vamos dizer que uma de suas salas tenha \(M\) fileiras com \(N\) cadeiras cada uma. A técnica de Bibika consiste em garantir duas regras:


 Não pode haver alunos em duas fileiras consecutivas.
 
 Com base na confiança na turma, Bibika escolhe um número $C$ e exige que, em cada fileira, existam pelo menos $C$ lugares vagos ou com tipo de prova diferente entre dois alunos que estão com o mesmo tipo de prova.
 



Como estava difícil checar se os alunos estavam cumprindo as regras durante toda as provas, Bibika instalou uma câmera no teto da sala que tira uma foto e envia para o seu e-mail.
Sua tarefa é pegar essa foto, processá-la e dizer a Bibika se ela pode iniciar a prova ou não. Ela só poderá iniciar a prova se todas as regras estão sendo seguidas.



Alguns exemplos de organização dos alunos onde todas as irregularidades estão circuladas.

O exemplo 1 possui alunos em fileiras vizinhas. Os exemplos 2 e 3 possuem alunos com o mesmo tipo de prova e entre eles existem menos de \(C\) lugares vagos e/ou com alunos com o tipo de prova diferente. O exemplo 4 mostra uma configuração válida.";"A entrada começa com uma linha contendo três inteiros \(N\), \(M\) e \(C\) separados por espaço,
sendo eles as dimensões da sala de aula e a quantidade de lugares que precisam estar vagos
entre dois alunos com o mesmo tipo de prova.
Depois disso, haverá \(N\) linhas, cada uma descrevendo os alunos de uma linha de cadeiras da sala.
A \(i\)-ésima dessas linhas conterá \(M\) inteiros, descrevendo o tipo de prova que o aluno
sentado na \(i\)-ésima cadeira de cada fila possui.
O inteiro \(0\) significa que a cadeira está vazia,
\(1\) significa que quem está sentado está fazendo a prova tipo 1
e \(2\) significa que está fazendo a prova do tipo 2.

\(2 \leq N, M \leq 1000\)
\(0 \leq C \leq N-1\)";"Escreva na saída uma linha contendo apenas um caractere, que deve ser
S caso todas as regras estejam sendo cumpridas e Bibika possa prosseguir com a prova
ou N caso contrário.";True;5 / 10;196;85;43.37%
2798;Lero-Lero da Mineira;Ad-Hoc;10;"Aos 45 do segundo tempo, faltava um problema para a Maratona Mineira de Programação de 2018.
Mas não era qualquer problema, era aquele problema.
Para tocar o terror nos corações dos competidores.
Fazer os coaches quebrarem a cabeça na sala deles tentando resolvê-lo.
Bom, após muito trabalho, o Comitê de Prova conseguiu elaborar tal problema, e o resultado é
este que você está lendo!


Chega de enrolação e vamos ao que interessa.
Você receberá uma lista de regras de substituição que devem ser feitas em um texto. Cada
regra é formada de uma letra e uma string correspondente pela qual a letra
deve ser substituída. Depois disso, você receberá a string onde
as regras devem ser aplicadas. Sempre que você encontrar nessa string
um dos caracteres que devem ser substituídos de acordo com as regras
recebidas, você deve fazer a substituição do caractere pela sua
string correspondente, até que não seja mais possível mudar a string fazendo substituições deste tipo.
Caso sempre haja uma mudança a ser feita, você deve avisar que é impossível terminar o processo.";"A entrada começa com uma linha contendo um inteiro \(N\): o número de regras de substituição.
As \(N\) linhas seguintes descrevem, cada uma, uma regra de substituição.
A \(i\)-ésima dessas linhas conterá uma letra \(L_i\), seguida de um espaço e uma string \(S_i\)
pela qual a letra \(L_i\) deve ser substituída.


A linha seguinte conterá um número \(T\): o tamanho do texto em que as regras de substituição devem
ser aplicadas.
A última linha conterá uma string \(S\) com esse texto.

\(0 \leq N \leq 26\)
\(1 \leq |S_i| \leq 100\)
\(1 \leq T \leq 10^5\)


Todas as strings da entrada conterão apenas letras minúsculas.


Nunca será dada mais de uma regra de substituição para a mesma letra.";"Escreva na saída uma linha contendo uma string que é o resultado da aplicação sucessiva das
regras de substituições dadas na string \(S\), ou \(-1\), caso a string seja alterada indefinidamente
pela aplicação das regras. É garantido que, caso seja possível obter uma string que não possa mais
ser alterada pelas regras de substituição, ela conterá no máximo \(5 \times 10^6\) letras.";False;10 / 10;266;46;17.29%
2799;Coral Nortista;Paradigmas;5;"Existe um grupo de cantores, residentes da região Norte do Brasil, que são muito famosos pelas suas interpretações de músicas clássicas.

Cada um dos integrantes deste grupo tem diferentes características vocais, tal como a facilidade para alcançar notas graves ou agudas, agilidade na troca das notas, controle de vibrato, entre outras.

Uma das características mais importantes é quantos segundos o cantor consegue cantar a mesma nota sem perder o fôlego. Ao perder o fôlego, o cantor leva 1 segundo para se recuperar.

O coral quer cantar uma nova música, na qual sempre devem existir exatos 3 vocalistas cantando 3 notas ao mesmo tempo. Quando um vocalista ficar sem ar, outro vocalista deve assumir seu lugar imediatamente, garantindo que a nota continue soando. Outra característica dessa música é que todos os vocalistas sempre devem se esforçar ao máximo, ou seja, sempre vão cantar até ficarem sem fôlego.

Para que a apresentação seja breve, o coral gostaria de cantar essa música no menor tempo possível, ou seja, as 3 notas devem parar de soar ao mesmo tempo e o quanto antes.

Dada a quantidade de membros do coral, e a quantidade de tempo que cada um deles consegue cantar sem perder o fôlego, diga qual será a duração da apresentação da música.";"Na primeira linha haverá um inteiro N, indicando quantos cantores fazem parte do Coral Nortista (3 < N <= 20).

Em seguida haverá N inteiros Fi, cada um indicando quanto tempo um dos cantores consegue cantar sem perder o fôlego (1 <= Fi <= 10, para todo 1 <= i <= N).";Seu algoritmo deve imprimir uma linha contendo um inteiro D, indicando a duração da apresentação da música.;False;5 / 10;14;5;35.71%
2800;Brincando de Consultas;Estruturas e Bibliotecas;9;"Dabriel está brincando com seu array e por ser muito metódico pensou que sempre deveria saber qual a quantidade mínima de elementos que devem ser alterados para que um determinado subarray possua um valor W. Em outras palavras, ele deseja poder realizar duas operações no seu array, são elas:
    1 - Alterar o valor do elemento da posição X para o valor W;
    2 - Informar qual a quantidade mínima de elementos que precisam ser alterados do intervalo [X, Y] para que todos os elementos possuam o valor W.";A primeira linha contém dois inteiros N e Q (1 ≤ N, Q ≤ 105), que representa quantos elementos possui o array e quantas consultas Dabriel irá realizar. A segunda linha contém N inteiros Xi (1 ≤ Xi ≤ 105) que indica o valor da i-ésima posição do array inicial. Nas próximas Q linhas irão conter as consultas, podendo ser: 1 X W (1 ≤ X ≤ N, 1 ≤ W ≤ 105), indicando a operação de alteração e 2 X Y W (1 ≤ X ≤ Y ≤ N, 1 ≤ W ≤ 105), indicando a operação de consulta.;Para cada operação do tipo 2, informe a quantidade de elementos que precisam ser alterados;False;9 / 10;500;118;23.60%
2801;Cifra Affine;Matemática;8;"Um processo de cifragem consiste em trocar cada símbolo de uma mensagem por outro símbolo do mesmo alfabeto usado na mensagem original, de tal forma que haja uma correspondência um para um entre os símbolos, ou seja, dois símbolos diferentes não podem ser substituídos pelo mesmo símbolo.

Uma cifra Affine consiste em supor os símbolos de um alfabeto de tamanho T como números em um intervalo [0..T-1]. Então são escolhidos dois números positivos A e B. Para cifrar um símbolo é multiplicado o valor da sua posição no alfabeto por A e ao resultado é somado o número B. Ao fim, o resultado será a posição do símbolo a substituir o original na sequência. No caso dessa nova posição não se referir a uma posição dentro do tamanho do alfabeto, supõe-se o alfabeto repetido várias vezes à direita de modo a possuir todas as posições calculadas.

Por exemplo, suponha um alfabeto de tamanho 7 e A=4 e B=2. Para cifrar qualquer símbolo desse alfabeto é preciso estender o alfabeto para direita 3 vezes como mostrado abaixo:



Nessa cifra o símbolo 6 é cifrado para o símbolo 5 pois A × 6 + B=26 e o símbolo na posição 26 é 5.

Vale notar que nem toda cifra Affine é válida. Uma cifra mal elaborada pode não produzir uma correspondência um para um entre os símbolos, assim não garantindo que a decifragem possa ser feita de modo único também.

Sua tarefa é, dado os parâmetros A e B da cifra e o tamanho do alfabeto, decifrar uma mensagem com N símbolos ou informar que não é possível fazê-lo.";"A primeira linha da entrada consiste de um número inteiro N (1 ≤ N ≤ 105) representando o tamanho da mensagem. A segunda linha da entrada consite de N números inteiros Mi (0 ≤ Mi < T) representando a mensagem. A terceira linha da entrada contém três inteiros: T (1 ≤ T ≤ 109) representando o tamanho do alfabeto; e A (1 ≤ A ≤ 109) e B (1 ≤ B ≤ 109) como especificado acima.";"A saída consiste em um única linha contendo a mensagem decifrada, com seus símbolos separados por um único espaço em branco, caso seja possível decifrar cada símbolo do alfabeto de modo único. Ou a mensagem ""DECIFRAGEM AMBIGUA"" caso contrário.";True;8 / 10;76;26;34.21%
2802;Dividindo Círculos;Iniciante;7;"Dado um conjunto de N pontos sobre uma circunferência de um círculo, todo par de pontos está ligado por um segmento e três desses segmentos nunca se encontram em um ponto interno à circunferência.

				Sua tarefa é determinar em quantas partes esses segmentos dividem o interior do círculo.";A primeira e única linha da entrada contém um inteiro N (1 ≤ N ≤ 1000) representando a quantidade de pontos sobre a circunferência.;A saída consiste de uma única linha contendo um inteiro representando a quantidade de partes do círculo.;True;7 / 10;2071;408;19.70%
2803;Estados do Norte;Ad-Hoc;2;"Com extensão territorial igual 8,51 milhões km², o Brasil é o quinto maior país do planeta Terra. A sua região é, por sua vez, dividida em 5 regiões: Centro-Oeste, Nordeste, Norte, Sul e Sudeste.

A região Norte tem extensão territorial igual a 3,85 milhões km², e abrange 7 estados: Roraima, Acre, Amapá, Amazonas, Pará, Rondônia e Tocantins.

Você está ajudando um amigo em um trabalho para a escola, e precisa escrever um algoritmo que: dado o nome de um estado brasileiro, diga se o mesmo pertence à região Norte do Brasil ou não.";A entrada será composta por uma única linha contendo o nome de um estado brasileiro. Todas as letras estarão em minúsculo e sem acentuação.;"Imprima a frase ""Regiao Norte"", caso o estado informado seja da região Norte, ou ""Outra regiao"" caso contrário.";False;2 / 10;814;502;61.67%
2804;Ferrovias;Grafos;8;"O Norte é a maior região do país em área. Com tamanha extensão territorial e seus 450 municípios era de se esperar que houvessem mais Ferrovias, porém essa não é a realidade. Grande parte do transporte ainda é feito por rodovias ou vias fluviais.

				Para resolver esse problema, Farcos projetou uma malha ferroviária capaz de conectar N municípios do Norte que ele acredita serem estratégicos para o comércio e o turismo da região. Nessa malha uma ferrovia sempre liga dois municípios diferentes e possui duas linhas de trilho que tornam a ferrovia capaz de ser percorrida nos dois sentidos. Além de sempre ser possível chegar em todos os outros N-1 municípios a partir de qualquer município da malha, seja por uma ferrovia direta ou passando por outros municípios intermediários.

				Ao terminar o desenho da sua malha ferroviária e sabendo a extensão em km de cada ferrovia, Farcos calculou qual seria o menor caminho entre todos os pares de municípios através da malha e gerou uma matriz de distâncias a qual foi anexada ao seu desenho e enviada para autoridades estimarem o custo de produção de tal projeto.

				Como o desenho da malha e a matriz não foram enviados digitalmente, o desenho da malha foi perdido e apenas a matriz de distâncias chegou às autoridades responsáveis.

				Sua tarefa é, usando apenas a matriz de distâncias e o preço médio informado para se contruir uma ferrovia (independente do seu tamanho), estimar o menor custo para o projeto.

				Contudo, é necessário cuidado. Há várias pessoas que tem interesse que o projeto de Farcos nem ao menos chegue à análise e podem ter alterado posições da matriz de distâncias fazendo com que ela não corresponda mais a uma possível malha desenhada por Farcos.";A primeira linha da entrada contém dois inteiros N (1 ≤ N ≤ 450) e K (1 ≤ K ≤ 102), representando respectivamente a quantidade de cidades estratégicas e o preço médio, em dezenas de milhares de reais, de se contruir uma ferrovia. As próximas N linhas contém N inteiros Di,j (0 ≤ Di,j ≤ 106) cada um representando a distância em km da cidade i à cidade j através da malha ferroviária. Di,j ≠ 0 para i ≠ j.;"A saída consiste de um único valor inteiro representando a estimativa do custo mínimo, em dezenas de milhares de reais, de se construir o projeto da malha ferroviária. Ou da mensagem ""*"" caso a matriz de distâncias tenha sido alterada.

				Obs: É garantido que as ferrovias possuem tamanho inteiro em km.";False;8 / 10;86;29;33.72%
2805;Binarizando a Matriz;Estruturas e Bibliotecas;1;"Dabriel está brincando com sua linda matriz binária, onde ele pode colocar 0 ou 1 em cada posição dela. Como já sabemos, Dabriel adora criar regras e jogos, portanto ele propôs o seguinte:
    - Para toda célula com o valor 1, toda a submatriz que vai do canto superior esquerdo até ela também deverá ter o valor 1;
    - Toda célula da matriz tem que receber um valor binário;
    - Células que já possuam algum valor não podem ser alteradas.

Com isso em mente, Dabriel deseja saber quantas formas distintas existem para realizar o jogo. Você consegue descobrir?";A primeira linha do caso de teste contém dois inteiros N e M (1 ≤ N, M ≤ 100), representando a quantidade de linhas e colunas da matriz, respectivamente. As próximas N linhas contém M caracteres, podendo ser: '.', '1', '0', onde '.' representa uma célula que ainda não recebeu um valor binário.;"Imprima a quantidade de possibilidades possíveis para o jogo de Dabriel. Como essa quantidade pode ser muito grande, imprima apenas o resto da divisão dessa quantidade por 109+7.
 ";False;1 / 10;29;10;34.48%
2806;Ingredientes Típicos;Ad-Hoc;10;"A região Norte do Brasil é berço de uma culinária muito rica e criativa. Com ingredientes típicos, temperos únicos, combinações e modos de preparo peculiares, os pratos da região sempre encantam os moradores e turistas.

Nesta culinária são usados dois tipos de ingrediente: ingredientes típicos do Norte, e ingredientes comuns ao resto do país. Uma porção é uma mistura de ingredientes (típicos e/ou comuns) e/ou outras porções, e só é considerada típica se mais da metade de seus componenetes forem típicos.

Rafael está visitando o Norte pela primeira vez, e após algumas refeições ficou muito satisfeito com a gastronomia do local. Ele percebeu que quanto mais componentes típicos a sua porção tivesse, mais ele era surpreendido pelo gosto.

Após fazer algumas anotações Rafael pediu sua ajuda: Dada a lista de ingredientes típicos, e em seguida a descrição de várias porções, diga quais destas porções são típicas.";"A entrada inicia com um inteiro N, indicando quantos são os ingredientes típicos da região (1 <= N <= 50). Em seguida haverá N nomes, representando os N ingredientes típicos da região.

Em seguida haverá um inteiro M, indicando quantas porções deverão ser analisadas (1 <= M <= 100).

Em seguida haverá M conjuntos de entrada, cada um representando uma porção.
Cada um destes conjuntos iniciará com um nome Si e um número Ki, representando o nome da porção e a quantidade de componentes (típicos, comuns ou porções) que compõem esta porção (1 <= Ki <= 50).
Em seguida haverá Ki nomes, cada um representando um dos componentes desta porção Si.

Os nomes de todos os ingredientes e porções contém apenas letras do alfabeto (maiúsculas ou minúsculas) e hífen, e terão no máximo 50 caracteres.";"Para cada porção imprima uma linha contendo a frase ""porcao tipica"" caso a porção seja típica, ou ""porcao comum"" caso a porção não seja típica.";False;10 / 10;194;24;12.37%
2807;Iccanobif;Iniciante;2;"As sequências de Iccanobif são sequências onde cada termo é sempre igual a soma dos dois próximos subsequentes a eles. Exceto pelos dois últimos termos os quais são sempre iguais a 1.
				Exemplo de uma sequência de Iccanobif com 10 termos: 55, 34, 21, 13, 8, 5, 3, 2, 1, 1.
				Sua tarefa é, dado um valor inteiro, imprimir a sequência de Iccanobif de tamanho correspondente.";A entrada consiste de um único inteiro N (1 ≤ N ≤ 40) representando o tamanho da sequência de Iccanobif desejada.;A saída consiste de um única linha contendo os termos da sequência de Iccanobif de tamanho N separados por um único espaço em branco.;False;2 / 10;2036;872;42.83%
2808;Mais Cavalos;Iniciante;1;"Dado a posição inicial de um cavalo em um tabuleiro de xadrez e a posição destino, deve se dizer se, com exatamente um único movimento, o cavalo consegue alcançar a posição destino. Se isso for possível, o movimento é classificado como válido, caso contrário, o movimento é dito inválido.

				

Em um tabuleiro de xadrez se utiliza números, de 1 a 8, para especificar a linha do tabuleiro e letras, de 'a' a 'h' para especificar a coluna.";A entrada é composta por uma única linha contendo a posição inicial do cavalo e a posição destino, separadas por um espaço em branco. Uma posição no tabuleiro é especificada por um caractere, que representa a coluna, seguido de um número inteiro que representa a linha.;"A saída consiste em uma linha contendo a mensagem ""VALIDO"" caso o movimento seja um movimento válido de um cavalo no jogo de xadrez ou ""INVALIDO"" caso contrário.";True;1 / 10;1252;616;49.20%
2809;K-ésimo Caminho;Grafos;9;"Dabriel acaba de aprender sobre menores caminhos em grafos e já se considera muito bom nisso. Ele sempre consegue encontrar qual a melhor rota entre um par de vértices.

Após passar horas brincando com seus grafos e encontrando menores caminhos ele pensou em algo interessante: Será que existe algum outro caminho no grafo que use pelo menos K arestas diferentes do caminho que ele havia encontrado e que a diferença dos valores desses caminhos seja no máximo D ?

Como Dabriel anda meio sem tempo pediu sua ajuda para resolver esse problema. Será dado um grafo e um conjunto de arestas que formam um menor caminho, além disso será dado um inteiro Q que representará quantas consultas ele deseja fazer.";A primeira linha da entrada contém três inteiros N, M, Q (1 ≤ N ≤ 104, 1 ≤ M ≤ min(20000, N*(N-1)/2), 1 ≤ Q ≤ 100), representando a quantidade de vértices, a quantidade de arestas e quantas consultas que serão feitas, respectivamente. A próxima linha contém dois inteiros U e V (1 ≤ U, V ≤ N, U != V), que representa o vértice de saída e destino do menor caminho. A próxima linha terá uma lista de inteiros Xi (1 ≤ Xi  ≤ N) representando o i-ésimo vértice de um dos menores caminhos. As próximas M linhas descrevem as arestas do grafo com três inteiros, U, V e W (1 ≤ U, V ≤ N, 1 ≤ W ≤ 105), indicando que existe uma aresta ligando o vértice U com vértice V com o custo W.  Todas as arestas são direcionadas e não existem duas arestas entre o mesmo par ordenado de vértices. Nas próximas Q linhas terão as consultas com dois inteiros K, D (1 ≤ K ≤ 100, 0 ≤ D ≤ 104).;"Para cada consulta imprima ""SIM"" se existe um outro caminho com pelo menos K arestas distintas e com diferença de valor de no máximo D, caso contrário imprima ""NAO"". As aspas não deverão sem impressas.";False;9 / 10;97;30;30.93%
2810;Combate à Dengue 2.0;Grafos;9;"Como você deve se lembrar* João estava tentando acabar com o foco da dengue em sua cidade, porém essa tarefa não foi tão simples por conta da quantidade de lugares que ele deveria visitar. Portanto, ele pediu a ajuda de seus amigos para resolver esse problema.

Será dado a você todos os focos de dengue, que podem ser visto como coordenadas no plano cartesiano e a coordenada de todas casas, de João e seus amigos. O que foi decidido é que todos os focos de dengue deverão ser visitados exatamente uma vez e ao final todos os participantes deverão voltar para suas respectivas casas

Você consegue informar para João de antemão qual a distância mínima percorrida por todos os amigos para visitar todos os focos?

João é um cara inteligente, portanto ele sabe que pode acontecer casos onde não serão necessários a ajuda de todos os seus amigos.";A primeira linha de cada caso de teste terá dois inteiros N e M (1 ≤ N ≤ 10, 1 ≤ M ≤ 5), representando a quantidade de focos de mosquito no mapa e quantas pessoas irão participar da missão, incluindo João, respectivamente. Segue M linhas contendo dois inteiros X e Y (−100 ≤ X, Y ≤ 100), representando a coordenada de uma das casas. Em seguida terão N linhas, cada uma contendo dois inteiros X e Y (−100 ≤ X, Y ≤ 100), representando a coordenada de um foco de dengue. ;Imprima o quantidade mínima que será percorrida por João e seus amigos.;False;9 / 10;71;21;29.58%
2811;Sibi-Xor;Paradigmas;9;"Dabriel foi visitar seu amigo Farcos na cidade natal dele, Manaus, no estado do Amazonas. Ao chegar lá Dabriel estranhou a forma como as pessoas falavam por causa das expressões regionais bem específicas que usavam. Uma expressão bem curiosa que ouviu de uma conversa de Farcos com seu outro amigo RapBoy foi ""Sibicho ó"" que é uma redução da frase ""Olha esse bicho, ó"". Um regionalismo bem ultilizado para demonstrar desdém do que se ouve ou duvidar de uma afirmação de alguém.

Na primeira vez que ouviu a expressão Dabriel pensou se tratar da operação bitwise sobres números chamada Sibi-Xor que havia aprendido recentemente na universidade e explicou a Farcos. Farcos por sua vez ficou muito feliz ao descobrir a operação porque, além de gostar de operações bitwise, encontrou um meio de fazer Rapboy parar de usar essa expressão com ele em tom de desdém. Agora toda vez que Rapboy falasse ""Sibicho ó"" ele teria que dizer a Farcos o Resultado do Sibi-Xor de uma lista de Números fornecida por este.

A operação Sibi-Xor sobre uma lista de números consiste em 3 passos:


1) fazer o AND-bitwise de todas as subsequências da lista. Chamaremos a cada resultado de subset-and.


2) fazer o XOR-bitwise de todos os subset-and's que foram formados com a mesma quantidade de elementos.


3) Somar todos os resultados do passo 2.


Por exemplo, para a lista A={14, 15, 35, 7} fornecida por Farcos, Rapboy deve responder o

Sibi-Xor(A) =

(14 ^ 15 ^ 35 ^ 7) +

((15 & 35) ^ (14 & 35) ^ (15 & 7) ^ (35 & 7) ^ (14 & 7) ^ (14 & 15)) +

((15 & 35 & 7) ^ (14 & 35 & 7) ^ (14 & 15 & 7) ^ (14 & 15 & 35)) +

(14 & 15 & 35 & 7)

= 57

Onde '&' simboliza a operação and-bitwise e '^' a operação xor-bitwise.";A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 2000) representando a quantidade de números na lista de Farcos. A segunda linha contém N números inteiros Ai (0 ≤ Ai < 264) correspondendo a listas de números de Farcos.;A saída consiste de uma única linha contendo a resposta de Rapboy, ou seja, o sibi-xor dos números fornecidos por Farcos. Como a resposta pode ser um número muito grande , imprima apenas seu módulo por 109+7.;False;9 / 10;109;23;21.10%
2812;Laércio;Iniciante;4;Armandinho tem um amigo o tanto quanto chato, chamado Laércio. Quando jogam o jogo do mestre manda, um jogo onde alguém dá uma ordem e alguém a cumpre, e em vez de dar ordens legais como subir em uma árvore, pular o muro, plantar bananeira ou organizar manifestações para derrubar o governo (independente de quem estiver no poder) ele sempre pede algo maçante. Em sua última partido, Laércio exigiu que Armandinho ordenasse uma lista de números, de forma que apenas os números ímpares aparecessem e o primeiro item seja o maior, o segundo seja o menor, o terceiro o segundo maior, o quarto seja o segundo menor e assim por diante. Como fazer isso a mão é muito chato, Armandinho procurou sua ajuda.;A entrada consiste de um inteiro N que representa o número de casos testes ( 1<N<1000 ). Cada caso teste começa com um inteiro M, que representa o tamanho da lista (0<M<100). Seguem M inteiros Mi (0<Mi < 1000) que representam a lista de Laércio.;Imprima a lista ordenada como Laércio requisitou, com um espaço entre os valores, pulando uma linha a cada caso teste.;False;4 / 10;922;306;33.19%
2813;Evitando Chuva;Iniciante;5;"Rafael odeia pegar chuva, e para evitá-la ele começou a usar um sistema de previsão do tempo. Neste sistema ele consegue prever se irá chover no horário em que ele vai para o trabalho e/ou no horário que ele volta do
trabalho.

Rafael também odeia carregar guarda-chuva quando não está chovendo. Para evitar isso, ele vai comprar vários guarda-chuvas e deixá-los guardados em casa e no escritório, e só vai usá-los quando estiver chovendo. Ou seja, se estiver chovendo na hora de ir para o trabalho, ele vai pegar um guarda-chuva que está em sua casa, usá-lo no caminho para o trabalho, e deixá-lo lá. De maneira semelhante, se estiver chovendo na hora de voltar para casa, ele vai pegar um guarda-chuva que está no escritório, usá-lo no caminho para casa, e deixá-lo lá.

Dadas as previsões meteorológicas, descubra quantos guarda-chuvas Rafael deve comprar e guardar em casa e no escritório, de modo que ele nunca se molhe e nunca precise carregar o guarda-chuva quando não estiver chovendo.
 ";"A primeira linha da entrada contém um inteiro N, indicando a quantidade de dias previstos pelo sistema meteorológico (1 <= N <= 1000).

Em seguida haverá N linhas, cada uma contendo duas palavras SD e SN, indicando a previsão do tempo para a ida e para a volta do trabalho, respectivamente. Se a palavra for ""sol"" significa que neste horário fará sol, e se a palavra for ""chuva"" significa que neste horário irá chover.
 ";Para cada caso de teste imprima uma linha contendo dois inteiros C e E, indicando quantos guarda-chuvas Rafael deve comprar e guardar em sua casa e escritório.;False;5 / 10;860;304;35.35%
2814;Música Alta;Ad-Hoc;1;"Marcelo Freitas de Jesus, mais conhecido como Fredinho gosta muito do carnaval. Durante o feriado ele pretende ouvir sua musica no volume mais alto possível. Entretanto, para poder saber qual volume ele deve levar em conta a localização da residência de seu vizinho Josué Braulio Petiz, que mantêm sempre por perto um audiodosímetro ( aparelho utilizado para medir a intensidade sonora em decibéis ) e chamará a policia caso o som passe um centésimo sequer do máximo permitido pela lei de Babanua. Dado o mapa simplificado da vizinhança onde F representa a casa de Fredinho, J a de Josué , X representa uma casa aleatória e cada caractere representa 10 metros (considere que a casa de Fredinho emite o som do centro de seu terreno e que Josué captura o áudio também do centro de seu terreno), o som máximo permitido em Babanua e considerando que o som propaga-se com perda de 1 % a cada metro e que o som mantêm sua intensidade nesse metro ( as leis da física em Babanua são diferentes, por decreto do presidente R.Rey) informe o volume máximo que Fredinho pode ouvir sua musica.
				Para calcular o valor, deve-se dividir o valor máximo permitido por 0.99 no expoente de quantas vezes o som será reduzido. Por exemplo, no caso de um som máximo de 110Dbs e uma distância de 14,1421 teremos que o som máximo é de 110/0.9914, ou seja, 126.619.";A entrada consiste de um inteiro N (0 < N < 51) indicando o número de casos, cada caso de testes é constituído por dois inteiros K (0< K < 201 ) e J ( 0 < J < 30 ) que indica a máxima intensidade sonora permitida e a quantidade de linhas usada no mapa. Após isso seguem J linhas (com no máximo 30 caracteres)  representando o mapa.;"Para cada caso de teste imprimir a intensidade máxima do som que Fredinho pode ouvir em sua casa sem nenhuma casa decimal , arredondando para baixo ,seguido de ""dBs"".";False;1 / 10;103;79;76.70%
2815;Digitador Gago;Strings;2;"Francisco Iote é uma gago diferente. Ele não somente fala repetindo sílabas como estranhamente quando digita um texto ele repete algumas sílabas, tornando a leitura muito chata. Ele repete apenas sílabas que tenham exatamente 2 letras e nunca repete uma sílaba que não seja a primeira sílaba da palavra. Ele também repete apenas uma vez, ou seja a palavra bola, por exemplo, pode aparecer como bola ou bobola, nunca bobobola.

Você foi chamado como perito para traduzir alguns textos excritos por Francisco eliminando as redundâncias de texto por ele geradas.";A entrada é composta por apenas uma linha com até 1000 palavras, cada uma delas com no máximo 15 caracteres. Esta linha de texto deve ser corrigida eliminando-se as redundâncias, conforme exemplo abaixo.;Seu programa deve gerar uma versão do texto fornecido por Francisco que não contenha as repetições descritas acima.;False;2 / 10;696;406;58.33%
2816;Palíndromo do Dabriel;Grafos;9;"Como já era de se esperar Dabriel está inventando um novo jogo. Neste, ele seleciona uma string contendo letras minúsculas e asteriscos e o que ele deseja fazer é alterar todos os asteriscos de forma a transformar a string em um palíndromo*. Porém, este jogo é muito fácil para Dabriel e ele está te propondo uma singela modificação.

Você receberá a string com letras minúsculas e asteriscos e um conjunto de pares de índices. Com isso, você deverá informar quantas formas distintas existem de transformar essa string em um palídromo, caso seja possível, podendo substituir apenas os asteriscos e deixando todos os pares de índices com a mesma letra.

Para a string a**a e contendo apenas um par de índice = {1, 3}, existe apenas uma forma de gerar o palíndromo respeitando todas as regras, e este é: aaaa.";A primeira linha contém dois inteiros N, C (1 ≤ N ≤ 100000, 0 ≤ C ≤ min(30000, N*(N-1)/2)), representando o tamanho da string e tamanho do conjunto de índices. A próxima linha contém a string S conforme descrita no texto. As próximas C linhas contém um par de índices (i, j) (1 ≤ i, j ≤ N), indicando que a i-ésima letra deve ser igual a j-ésima.;Imprima o total de maneiras de gerar o palíndromo conforme descrita no texto. Como esse valor pode ser muito grande, imprima apenas o resto da divisão dele por 109+7;False;9 / 10;157;36;22.93%
2817;Posto do Darlan;Matemática;8;"Uma das consequências da greve dos caminhoneiros foi a falta de gasolina em todo o país. Em Santa Rita do Sapucaí, cidade do sul de Minas Gerais, não foi diferente. Centenas de carros e motos fizeram fila no último posto com gasolina disponível para conseguirem encher seus tanques antes que ela esgotasse, parecia cena de filme sobre apocalipse zumbi.

O posto possui N bombas e em cada uma delas existe uma fila em linha reta com M veículos (carros ou motos). Segue uma ilustração de um posto com 4 bombas e uma fila de 2 veículos por bomba.


	


Darlan, dono do posto, limitou a quantidade de gasolina que cada carro poderia abastecer em 25 litros e cada moto em 12 litros. Como todos os donos dos veículos das filas estavam com medo de nunca mais poderem abastecer, eles com certeza iriam colocar o máximo de gasolina permitido por Darlan.

A equipe da emissora de TV local estava ao vivo com seu drone filmando as longas filas de veículos em torno do posto do  Darlan, quando um telespectador enviou uma pergunta um tanto quanto aleatória: ""Se levarmos em consideração que as fileiras de carros caracterizam uma matriz de N linhas por M colunas, qual a maior quantidade de gasolina que os veículos em um quadrado de tamanho L irão colocar? Dado que nesse quadrado deve existir ao menos um veículo de cada tipo (carro e moto).""

A equipe de TV não faz ideia de como responder essa pergunta e necessita de sua ajuda!";A primeira linha da entrada possui dois inteiros N, M (1 ≤ N, M ≤ 1000), representando a quantidade de bombas e a quantidade de veículos enfileirados em cada bomba. Seguem N linhas, cada uma contendo M caracteres 'C' ou 'M' representando um carro ou uma moto, respectivamente. Após isso haverá um inteiro L (1 ≤ L ≤ 1000), sendo o tamanho do lado do quadrado que o telespectador deseja saber.;Exiba um único inteiro, a maior quantidade possível de gasolina que os veículos que estão em um quadrado L irão abastecer, dado que deve existir ao menos um veículo de cada tipo. Caso não exista um quadrado que caracterize a dúvida do telespectador, imprima -1.;True;8 / 10;142;60;42.25%
2818;Jogo Divertido;Paradigmas;9;"Bino e Cino estão brincando de remover algarismos de um número para o tornar múltiplo de 6. Para realizar essa brincadeira, eles sorteiam um número, então tentam remover a menor quantidade de algarismos desse número para que ele se torne um múltiplo de 6 sem zeros a esquerda.

Com o passar o tempo, Bino e Cino ficaram muito bons nesse jogo, e sempre conseguem transformar o número em um múltiplo de 6 utilizando a menor quantidade de remoções possíveis.

Por exemplo:
• 132: Não é necessário remover algarismos, pois 132 é múltiplo de 6.
• 106: É necessário remover o 1 e o 0 do número para que o resto fique múltiplo de 6. Não é possível remover somente o 1, pois o número ficaria com zeros a esquerda.";A entrada consiste de múltiplas linhas. A primeira linha contém um inteiro X ( 1 ≤ X ≤ 100) indicando a quantidade de casos de teste. Cada uma das próximas X linhas contém um inteiro Y ( 0 ≤ Y ≤ 10100000 ) indicando um número sorteado por Bino e Cino.;"Para cada número sorteado por Bino e Cino, imprima a menor quantidade necessária de remoções de algarismos para que o número fique múltiplo de 6. Caso não seja possível tornar o número múltiplo de 6, imprima a mensagem ""Cilada"".";False;9 / 10;147;33;22.45%
2819;Cartas Para o Noel;Matemática;5;"Giovana é uma menina muito esperta e quer ganhar um bom presente de natal nesse ano. Para isso ela pretende mandar uma ótima carta ao Papai Noel.

				Como é muito inteligente, Giovana descobriu que quem recebe as cartas do Papai Noel são os Duendes, e eles conseguem dizer se uma criança é um bom menino ou uma boa menina analisando o uso de dígrafos! Isso mesmo, analisando o número de dígrafos proibidos de uma carta os Duendes conseguem dizer se a criança merece ou não um bom presente.

				Para não correr riscos Giovana quer enviar uma carta que não contenha nenhum dígrafo proibido. Mesmo sendo muito esperta, Giovana ainda é muito nova e não domina toda a gramática. Uma de suas estratégias para evitar erros é usar somente as primeiras letras do alfabeto.

				Além do mais, os Duendes são muito rígidos! Mesmo que o primeiro caractere de um dígrafo esteja no final de uma palavra e o segundo esteja no começo da palavra seguinte, os Duendes ainda consideram isto como um dígrafo. Isso fez com que a menina tomasse a duvidosa decisão de não escrever nenhum caractere de espaço na carta.

				Giovana ainda está insegura e pediu sua ajuda. Dado o número de caracteres que a carta terá e quais letras do alfabeto ela usará, sua tarefa é determinar de quantas formas essa carta pode ser escrita sem conter nenhum dígrafo proibido.";A primeira linha da entrada contém um número inteiro T que representa a quantidade de casos de testes. A primeira linha de um caso de teste contém os números inteiros C (1 ≤ C ≤ 109), N (1 ≤ N ≤ 26) e Q (0 ≤ Q ≤ 103) representando respectivamente o número de caracteres na carta, a quantidade de letras a partir do comeco do alfabeto que podem ser usadas e quantidade de dígrafos proibidos. As próximas Q linhas de um caso teste contém duas letras minúsculas do alfabeto inglês cada, representando os dígrafos proibidos.;A saída consiste em uma linha por caso de teste contendo o número de formas de se escrever a carta módulo 109+7.;False;5 / 10;35;18;51.43%
2820;Os Dígitos de Bruna;Matemática;8;Bruna está aprendendo a contar. Até agora ela sabe apenas d dígitos. Seu irmão, Carlos, disse que ela não consegue nem formar n números distintos usando apenas aqueles dígitos. Bruna, para provar que ele está errado, irá escrever os n menores números que ela consegue formar com seus dígitos em uma folha de papel, porém ela não sabe quando parar. Você pode ajudá-la com essa tarefa?;"A primeira linha da entrada consiste de um número t (t=100) , referente à quantidade de casos teste.

Cada um dos casos começa com um inteiro d (2<=d<=9): o número de dígitos que Bruna já aprendeu.

A linha seguinte conterá d inteiros vi (1<=vi<=9) representando os dígitos que Bruna sabe.

E a última linha de cada caso será o número n (1<=n<=1018).";Para cada caso, imprima o n-ésimo menor número que pode ser formado com os dígitos que Bruna sabe.;False;8 / 10;134;31;23.13%
2821;Distribuição de Cartas;Estruturas e Bibliotecas;4;"Alan Parina adora criar novos jogos com cartas de baralho. Ele acabou de criar um novo jogo para jogar com seus amigos e quer sua ajuda para construir um programa que possa fazer uma distribuição das cartas com base nos seus valores (A vale 1, J vale 11, Q vale 12 e K vale 13) e em algumas pequenas regras que são apresentadas a seguir.

				Alan seleciona um número de cartas que estão em um monte e as distribui sequencialmente entre seus amigos, do primeiro ao último. Ele pode ver o valor de cada carta e tem que garantir que a divisão seja o mais balanceada possível entre os jogadores, considerando apenas a soma do valor de suas cartas. Para ficar mais claro, se por exemplo Alan tivesse 4 cartas (3, 6, 2 e 10) para distribuir entre dois jogadores, ele teria que dar as cartas 3, 6 e 2 para o primeiro jogador (somando 11) a carta 10 para o segundo jogador. A divisão 9 e 12 estaria descartada porque a primeira regra do jogo é que o valor máximo de soma tem que ser o menor possível (11 é menor do que 12).

				Há uma segunda regra que deve ser respeitada neste jogo: uma vez que o valor máximo de soma é estabelecido, cada um dos jogadores, iniciando pelo primeiro, deverá tentar ficar com uma soma o mais próxima possível deste valor. Isso pode ser observada no primeiro caso de teste (abaixo). Ao distribuir as cartas A, 7, 3, 2, 9, 5, 6, J, K, 10, 4 e A entre 3 jogadores, o primeiro jogador ficaria com as 6 primeiras cartas (A, 7, 3, 2, 9 e 5) cuja soma seria 27. O segundo jogador ficaria com as próximas duas cartas (6 e J) que somariam 17 e o último jogador ficaria com quatro cartas (K, 10, 4 e A) que somariam o valor 28. Uma divisão 22, 22 e 28 não respeitaria este critério pois o primeiro ainda poderia pegar a carta de valor 5 para ficar com 27 (menos que o limite 28, neste caso). Tampouco poderíamos dividir em 21, 30 e 15, pois estaríamos ultrapassando o menor valor máximo possível (que é 28). Como resposta então, temos que o máximo de cartas para um dos jogadores seria 6 e o máximo valor obtido da soma das cartas seria 28, que é a resposta para o primeiro caso de teste apresentado abaixo.

				Existem obviamente outras regras do funcionamento do jogo, mas isso fica para outra história.";A entrada é composta por duas linhas. A primeira linha contém um inteiro nCartas (1 < nCartas < 60) e um inteiro nJogadores (1 ≤ nJogadores  ≤ 10) indicando respectivamente a quantidade de cartas e de jogadores. A próxima linha contém cada uma das nCartas, separadas por um espaço em branco (não há espaço em branco após a última carta).;Para cada caso de teste de entrada, o programa criado por você deve imprimir dois valores separados por um espaço em branco. O primeiro valor é o maior número de cartas recebido por um dos jogadores (pode ser qualquer jogador). O segundo valor é o maior valor possível considerando a soma de todas as cartas (esta soma pode se referir a qualquer um dos jogadores).;False;4 / 10;22;9;40.91%
2822;Meu Primeiro Grafinho;Matemática;10;"Parabéns! É seu aniversário! Como presente, sua mãe realizou seu maior sonho e lhe presenteou um pequeno grafinho de estimação. Esse grafinho é de uma raça bem rara: ele tem n vértices e cada um deles tem um valor, inicialmente o i-ésimo vértice tem valor i (1<=i<=n) e para cada par de vértices, existe um aresta ligando eles e seu peso é definido como o módulo da diferença entre seus valores.

Esse grafinho está em fase de crescimento, o que quer dizer que o valor do vértice i pode mudar para k a qualquer momento! Além disso, ele têm muita fome, e você tem que alimentá-lo diariamente com uma quantidade de ração igual ao peso de sua árvore geradora máxima.

Escreva um programa para cuidar bem de seu novo grafo, ou sua mãe poderá tomá-lo de você!

Nota: A árvore geradora máxima de um grafo é a árvore cujos vértices são vértices do grafo original e arestas são arestas do grafo original cuja soma dos pesos das arestas tem valor máximo.";"A primeira linha da entrada consiste de um número t (t<=10) , referente à quantidade de casos teste.

Cada um dos casos começa com um inteiro N (0<=N<=2*105): o número de vértices do grafo.

A linha seguinte terá um inteiro Q (1<=Q<=2*105) representando o número de instruções a serem seguidas.

Uma instrução pode ser de dois tipos:

1 i k : o valor do vértice i (1 <= i , k <= n) deverá ser mudado para k ( e as arestas ligadas a ele deverão ser mudadas de acordo).

2 : deverá ser calculada a árvore geradora máxima de seu grafo";Para cada instrução do tipo 2, imprima o peso da árvore geradora máxima do grafo.;False;10 / 10;145;29;20.00%
2823;Eearliest Deadline First;Iniciante;6;"Neste problema o seu trabalho é verificar se um conjunto de processos periódicos que possuem restrição de tempo-real pode ser escalonado.

Um processo de tempo real é caracterizado por dois números. O primeiro é o custo computacional do processo. Ou seja, o tempo que o processo gasta quando entrar em execução. O segundo número é o período em que o processo executa. Ou seja, a cada período de tempo, o processo reinicia.

O conjunto será escalonado usando o algoritmo EDF (Earliest Deadline First). Sabe-se que o algoritmo EDF é ótimo. Ou seja, se um conjunto de tarefas não poder ser escalonado pelo EDF, ele não poderá ser escalonado por nenhum outro algoritmo.

O sistema operacional que receberá estas tarefas está rodando em uma máquina single core. As tarefas são preemptáveis. Isto é uma tarefa pode tomar o lugar de outra durante a execução, se for necessário.

Considere que o custo de trocar entre tarefas é 0.";"A primeira linha da entrada possui um valor \(1 \leq N \leq 10\), que é número de processos a ser avaliado.

Cada N linha seguinte representa um processo, e contém 2 valores \(1 \leq C \leq 5\) e \(C \leq P \leq 100\), que representam o custo computacional e o período de cada processo, respectivamente.";A saída consiste de uma única linha, contendo ou o string OK ou do string FAIL, caso o escalonamento seja possível ou não, respectivamente.;False;6 / 10;196;83;42.35%
2824;Pudim;Strings;8;"O famosíssimo portal pudim.com.br está criando um novo motor de busca na internet. O principal diferencial deste motor de busca é que ele fará as buscas a partir de um rank dos artigos, de acordo com as pesquisas feitas pelos usuários.
        Está quase tudo pronto. Falta apenas o algoritmo de rankeamento.
        Após muita discussão, se resolveu usar como nota para o rankeamento o tamanho da maior string comum entre os strings de busca e os strings contendo os artigos. 
        Isto é, tenta-se calcular o tamanho da maior string que pode ser formada que contêm apenas caracteres que estejam tanto no string de busca quanto no string do artigo, na mesma ordem.";"A entrada contêm duas linhas, cada uma com um string. Na primeira linha está o string da busca, na segunda o do artigo.
        Ambos os strings contêm apenas caracteres de a a z, sem espaços.
        O tamanho das strings tanto de busca quanto do artigo são de no máximo \(5 \times 10^3\) caracteres";A saída contém apenas uma linha com um inteiro: a nota do artigo.;False;8 / 10;480;150;31.25%
2825;L de Atreus!?;Strings;8;"No recentemente lançado e muito aclamado jogo God of War, Kratos está agora no mundo da mitologia Nórdica tentando esquecer seu passado. Lá ele conheceu Faye, uma mulher tão misteriosa quanto ele próprio, com quem teve um filho: Atreus. Mas com a chegada de um estranho, Kratos e seu filho embarcam em uma jornada de consequências inesperadas.

Ao longo de sua viagem, eles encontram vários escritos em paredes, painéis, pedras... Esses escritos contam interessantes histórias sobre o mundo nórdico e suas personalidades, mas também aconselham os viajantes desavisados. Infelizmente, Kratos não consegue lê-los, já que ele é de Esparta e não se interessou em aprender as várias línguas de seu novo lar. Então Atreus precisa traduzir toda mensagem escrita que eles encontram. E Atreus é muito bom em linguística, impressionando até Mimir, o homem mais sábio de todos!

Entretanto, não é incomum que eles encontrem mensagens com runas (letras nórdicas) faltando ou danificadas, impossibilitando que Atreus saiba o que elas estão tentando dizer. Então você, sendo um jogador esperto e entusiasmado, foi escolhido para ajudá-los. Sua tarefa é corrigir esses erros para que Atreus possa ler os dizeres e então eles estarão melhor preparados para os perigos dessa jornada.

Mas como alguém faria isso? Bem, Mimir sugere o seguinte: a Edda em verso e a Edda em prosa, dois trabalhos literários islandeses medievais compostos em sua maioria por poemas, são as duas principais fontes de conhecimento sobre a mitologia nórdica*. Sendo assim, procure nestas coletâneas de poemas as palavras que sejam mais similares às que o Atreus não consegue ler e use-as para corrigir os dizeres. Uma palavra p1 é considerada mais similar a p2 do que a p3 se há menos inserções, deleções e substituições de letras a fazer para transformar p1 em p2 do que p1 em p3.";"A entrada é composta por múltiplas linhas. A primeira contém um inteiro q (1 ≤ q ≤ 103) representando a quantia de palavras não-repetidas que você encontrou em um Edda. Cada uma das próximas q linhas contém uma dessas palavras. A próxima linha contém outro inteiro, c (1 ≤ c ≤ 102), que indica o comprimento em palavras do escrito que você precisa corrigir. A última linha é o próprio escrito. Cada palavra dele é separada por um único espaço.

Todas as palavras da entrada são compostas apenas por caracteres ASCII e têm comprimento ≤ 102. Não há diacríticos, nem pontuação.";A saída é uma única linha contendo a mensagem corrigida para Atreus ler. Ela segue as mesmas regras que a entrada e precisa terminar com uma quebra de linha ('\n'). Além disso, no caso de um empate entre duas palavras, escolha a que aparece primeiro dentre as da entrada.;False;8 / 10;142;58;40.85%
2826;Léxico;Iniciante;2;"Como se sabe, léxico é o conjunto de palavras que existe em uma língua. Nas línguas ocidentais, é comum escrever usando o alfabeto latino, com 26 letras que vão de a até z.

É comum enumerar as letras na seguinte ordem: a, b, c, d, e f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z.

Se uma lista de palavras está organizadas de acordo com esta ordem, fica muito mais rápido pesquisá-las. Seu trabalho neste problema é ordenar duas palavras de acordo com esta ordem.

Sejam duas palavras A e B. Caso o primeiro caractere de A venha antes do primeiro de B, coloca-se A antes de B. Se o primeiro caractere for igual, usa-se o seguinte para desempate. E se o segundo empatar, usa-se o terceiro, etc. Quando todos os caracteres de A forem iguais ao começo de B, ou todos os de B forem iguais ao começo de A, coloca-se a menor palavra primeiro.";A entrada contém 2 palavras com caracteres minúsculos de a até z, O comprimento das palavras não ultrapassa 20 caracteres.;A saída contém as mesmas 2 palavras, só que na ordem lexicográfica.;False;2 / 10;1022;627;61.35%
2827;Contador de Tokens;Iniciante;7;"Um hospital pretende migrar seus registros de pacientes para um novo sistema. No entanto, foi observado que a tabela clientes possui o problema registros duplicados. Ou seja, um mesmo paciente que ingressou duas vezes no hospital pode estar registrado duas vezes na base de dados. Tal problema ocorre devido a presença de erros de tipografia (por exemplo: “Ketlyn da Silva” ou “Ketlin da Silva”). 

Uma alternativa para contornar esse problema é quebrar o texto (“string”) em unidades menores (“tokens”) de um determinado tamanho e  computar o númbero de tokens em comum. Por exemplo, os tokens de tamanho 3 para a string “Ketlyn” são: “ket”,”etl”, ”tly” e “lyn”; já para a string “Ketlin”  são gerados as substrings: “ket”, “etl”, “tli”,”lin”. Note que a geração de substrings é feita a partir de uma “janela deslizando” variando em 1 caractere. 
Note que não há distinção entre maiúsculas e minúsculas.
Por fim, é necessário contabilizar quantos tokens as strings tem em comum. 

A tarefa a ser realizada é encontrar qual  o token (de tamanho 2) que mais se repete e a sua frequência em uma dada string. No caso de empate, o token em menor ordem alfabética deve ser recuperado.";"Somente uma linha da entrada que contém uma string S, representando o texto a ser processado, contendo somente caracteres imprimíveis e possivelmente terminando com caracter especial EOL.
                O comprimento máximo desta linha é de \(10^5\) caracteres.";"Imprima o token mais frequente utilizando um token de tamanho dois (2). Também deve ser impresso a frequencia do token.
 Tokens em caixa alta devem ser convertidos para caixa baixa. Caso exista um empate na frequencia, deve ser impresso somente o primeiro token (seguindo a ordem alfabética).";False;7 / 10;373;116;31.10%
2828;Anagramas;Iniciante;9;"Um anagrama é uma permutação das letras de uma palavra.
Por exemplo, os strings ananab e anbana são anagramas da palavra banana.

Neste problema, sua tarefa é computar quantos anagramas distintos existem para uma palavra dada.

Como podem existir muitos anagramas, calcule o resto da divisão do número de anagramas pelo nosso primo favorito: \(10^9+7\).";Uma linha, com uma única palavra, com o comprimento máximo de \(10^5\) caracteres. A palavra só contém caracteres minúsculos de a a z.;A saída contém apenas uma linha contendo um inteiro, o resultado.;False;9 / 10;849;127;14.96%
2829;Maiúsculas, Por Quê?;Ad-Hoc;7;"O problema Léxico nos ensinou como ordenar ordenar duas palavras. Entretanto, quando estávamos construindo nossa lista de palavras, o estagiário encarregado confundiu algumas letras maiúsculas com as minúsculas!

Agora temos uma lista enorme de palavras, que podem ter letras minúsculas, de a a z, e maiúsculas, de A a Z!

Precisamos ordená-las, obedecendo a mesma ordem de antes, sem importar se as letras são
minúsculas ou maiúsculas.
Só para desempatar, depois que todas as letras foram comparadas, deve-se 
considerar que as letras maiúsculas vem antes das minúsculas.";"A primeira linha contém um inteiro \(1 \leq N \leq 5 \times 10^4\).

As N linhas seguintes contém uma palavra da lista, com comprimento máximo de 20 caracteres.";A saída deve conter a lista de palavras ordenadas.;False;7 / 10;638;185;29.00%
2830;Copa;Ad-Hoc;4;"O sorteio das posições dos jogadores na chave decisiva da copa do mundo de ping-pong está deixando a todos nervosos. É que ninguém quer pegar o jogador mais bem ranqueado, o Mestre Kung, logo nas oitavas de final, ou nas quartas de final. Melhor que só seja possível enfrentar Mestre Kung na semifinal ou na final!

A chave possui 16 posições numeradas de 1 a 16, como na figura abaixo. A organização da copa vai fazer um sorteio para definir em qual posição cada jogador vai iniciar a chave decisiva. Nas oitavas de final, o jogador na posição 1 enfrenta o jogador na posição 2; o da posição 3 enfrenta o da posição 4; e assim por diante, como na figura.



O objetivo deste problema é, dadas as posições de Mestre Kung e Mestre Lu na chave, decidir em que fase da competição Mestre Kung e Mestre Lu vão se enfrentar, caso vençam todas as suas respectivas partidas antes de se enfrentarem. Por exemplo, se o sorteio da chave determinar que Mestre Kung ocupará a posição 1 e Mestre Lu a posição 2 da chave, eles se encontrarão nas oitavas de final; se Mestre Kung ocupar a posição 6 e Mestre Kung ocupar a posição 9 da chave, eles se encontrarão somente na final.";A entrada consiste de duas linhas. A primeira linha da entrada contém um inteiro K (1 ≤ K ≤ 16) que indica a posição de Mestre Kung na chave. A segunda linha da entrada contém um inteiro L (1 ≤ L ≤ 16, K \(\ne \) L) que indica a posição de Mestre Lu na chave.;Seu programa deve produzir uma linha contendo uma das palavras seguintes, decidindo a fase em que vão se enfrentar os jogadores Mestre Kung e Mestre Lu, se eles chegarem a se enfrentar: oitavas, quartas, semifinal ou final.;True;4 / 10;546;218;39.93%
2831;Pesos;Ad-Hoc;2;"Uma fábrica instalou um elevador composto de duas cabines ligadas por uma roldana, como na figura. Quando uma cabine sobe, a outra desce. No primeiro andar da fábrica existem algumas caixas de pesos diversos e precisamos levar todas as caixas para o segundo andar, usando o elevador. Apenas uma caixa pode ser colocada por vez dentro de uma cabine. Além disso, existe uma restrição de segurança importante: durante uma viagem do elevador, a diferença de peso entre as cabines pode ser no máximo de 8 unidades. De forma mais rigorosa, P − Q ≤ 8, onde P é o peso da cabine mais pesada e Q, o peso da cabine mais leve. O gerente da fábrica não está preocupado com o número de viagens que o elevador vai fazer. Ele apenas precisa saber se é possível ou não levar todas as caixas para o segundo andar. No exemplo da figura, podemos levar todas as três caixas usando a seguinte sequência de seis viagens do elevador:

1. Sobe a caixa de peso 4, desce a outra cabine vazia; (diferença de 4)

2. Sobe a caixa de peso 10, desce a caixa de peso 4; (diferença de 6)

3. Sobe a caixa de peso 15, desce a caixa de peso 10; (diferença de 5)

4. Sobe a caixa de peso 4, desce a outra cabine vazia; (diferença de 4)

5. Sobe a caixa de peso 10, desce a caixa de peso 4; (diferença de 6)

6. Sobe a caixa de peso 4, desce a outra cabine vazia. (diferença de 4)

Dados os pesos de N caixas no primeiro andar, em ordem crescente, seu programa deve determinar se é possível ou não levar todas as N caixas para o segundo andar.";A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 104) indicando o número de caixas. A segunda linha da entrada contém N inteiros representando os pesos das caixas, em ordem crescente. O peso das caixas está entre 1 e 105 , inclusive.;Imprima uma linha na saída. A linha deve conter o caracter S caso seja possível, ou N caso não seja possível levar todas as caixas até o segundo andar da fábrica.;True;2 / 10;319;184;57.68%
2832;Cápsulas;Ad-Hoc;5;"O discípulo Fan Chi’ih retornou recentemente da China com algumas cápsulas mágicas, que são capazes de produzir moedas de ouro! Uma cápsula possui um certo ciclo de produção, que é um número C de dias. A cada C dias a cápsula produz uma nova moeda; a moeda é sempre produzida no último dia do ciclo. Fan Chi’ih vai ativar todas as cápsulas ao mesmo tempo e quer acumular uma fortuna de pelo menos F moedas. Ele precisa da sua ajuda para computar o número mínimo de dias para que as cápsulas produzam, no total, pelo menos F moedas. Na tabela abaixo, por exemplo, existem três cápsulas com ciclos de 3, 7 e 2 dias. Se Fan Chi’ih quiser acumular pelo menos 12 moedas, ele vai ter que esperar pelo menos 14 dias.";A primeira linha da entrada contém dois inteiros N (1 ≤ N ≤ 105) e F (1 ≤ F ≤ 109), indicando o número de cápsulas e o número de moedas que Fan Chi’ih quer produzir, respectivamente. A segunda linha contém N inteiros Ci (1 ≤ Ci ≤ 106), para 1 ≤ i ≤ N, representando os ciclos de cada cápsula. Em todos os casos de teste, a resposta é sempre menor ou igual a 108 dias. Em todos os casos de teste, o número de moedas produzido, no total, após 108 dias, é sempre menor ou igual a 109.;"Imprima um inteiro, representando o número mínimo de dias para que as cápsulas produzam, no
total, pelo menos F moedas.";True;5 / 10;683;193;28.26%
2833;Campeonato;Ad-Hoc;3;"O sorteio das posições dos jogadores na chave decisiva da copa do mundo de ping-pong está deixando a todos nervosos. É que ninguém quer pegar o jogador mais bem ranqueado, o Master Kung, logo nas oitavas de final, ou nas quartas de final. Melhor que só seja possível enfrentar Master Kung na semifinal ou na final! Os jogadores são identificados por números inteiros de 1 a 16, sendo que Master Kung é o jogador de número 1. O jogador para o qual nós estamos torcendo, Master Lu, tem o número 9.

A chave possui 16 posições também numeradas de 1 a 16, como na figura abaixo. A organização da copa vai fazer um sorteio para definir em qual posição cada jogador vai iniciar a chave decisiva. Nas oitavas de final, o jogador na posição 1 enfrenta o jogador na posição 2; o da posição 3 enfrenta o da posição 4; e assim por diante, como na figura.



O objetivo deste problema é decidir em que fase da chave os jogadores Master Kung e Master Lu vão se enfrentar, caso vençam todas as suas respectivas partidas antes de se enfrentarem. Por exemplo, se o sorteio da chave determinar a seguinte ordem de jogadores da posição 1 até a 16: [4, 11, 3, 2, 8, 13, 14, 5, 16, 9, 12, 6, 10, 7, 1, 15], eles vão se enfrentar na semifinal.";A primeira e única linha da entrada contém 16 números Xi (1 ≤ Xi ≤ 16) inteiros distintos, de valores entre 1 e 16. Ou seja, uma permutação dos inteiros entre 1 e 16. A permutação define a ordem dos jogadores nas posições da chave decisiva da copa.;Seu programa deve produzir uma única linha contendo uma das palavras seguintes, decidindo a fase em que vão se enfrentar os jogadores Master Kung e Master Lu, se eles vencerem todas as suas partidas antes de se enfrentarem: oitavas, quartas, semifinal ou final.;True;3 / 10;338;172;50.89%
2834;Fuga;Ad-Hoc;2;"Os irmãos Violet e Klaus estão fugindo pelas suas vidas do Conde Olaf, que corre atrás deles dentro de um prédio abandonado. Violet e Klaus acabam de entrar em uma sala retangular de largura N e comprimento M, dividida em N · M células (i, j) de área 1 (1 ≤ i ≤ N e 1 ≤ j ≤ M). Em algumas células dessa sala, existem armários. Toda célula (i, j) onde i e j são pares contém um armário. A sala tem uma entrada na célula (Xe, Ye) e uma saída na célula (Xs, Ys), que ficam em posições diferentes nas bordas  da sala. A entrada e a saída nunca são adjacentes a um armário.

A figura a seguir mostra a uma possível configuração da sala, onde N = M = 7, a entrada fica na posição (3, 7) (marcada com uma estrela) e a saída fica na posição (5, 1) (marcada com um círculo). Os armários estão indicados em quadrados cinzas.


Para atrasar Conde Olaf, que os está perseguindo e entrará na sala em alguns momentos, os irmãos decidiram derrubar armários da sala, de forma a aumentar o tamanho do percurso necessário para ir da entrada até a saída. As células ocupadas por armários caídos ou em pé não podem ser percorridas. Um armário pode ser derrubado em qualquer uma das direções paralelas aos lados da sala e ocupa duas células após cair. Ou seja, um armário na posição (i, j) da sala, ao cair irá ocupar uma das seguintes opções:


	As células (i, j) e (i, j +1);
	As células (i, j) e (i, j-1);
	 As células (i, j) e (i+1, j); ou
	As células (i, j) e (i-1, j).


Dadas as dimensões da sala e as posições de entrada e de saída, você deve encontrar uma forma de derrubar os armários tal que a distância entre a entrada e a saída da sala seja a maior possível dentre todas as formas de derrubar os armários.

Para o exemplo acima, a figura abaixo é uma solução possível. Os retângulos cinzas representam os armários derrubados e a linha representa o caminho entre a entrada e a saída (que passa por 29 células). Nesse caso, não é possível derrubar os armários de forma que a distância entre a entrada e a saída seja maior que 29.";"A primeira linha contém dois inteiros N e M, a largura e o comprimento da sala, respectivamente. A segunda linha contém dois inteiros Xe e Ye, identificando a célula de entrada da sala (Xe, Ye). A terceira linha contém dois inteiros Xs e Ys, identificando a célula de saída da sala (Xs, Ys).

Restrições:


	 3 ≤ N, M ≤ 11;
	 3 ≤ Xe, Xs ≤ N;
	3 ≤ Ye, Ys ≤ M;
	 N, M, Xe, Xs, Ye, Ys são ímpares.";Seu programa deve produzir um inteiro representando o tamanho do menor caminho (em número de células) da entrada até a saída da sala após derrubar os armários de forma ótima.;True;2 / 10;88;57;64.77%
2835;Elevador;Ad-Hoc;4;"Uma fábrica instalou um elevador composto de duas cabines ligadas por uma roldana, como na figura. Quando uma cabine sobe, a outra desce. No primeiro andar da fábrica existem algumas caixas de pesos diversos e precisamos levar todas as caixas para o segundo andar, usando o elevador. Apenas uma caixa pode ser colocada por vez dentro de uma cabine. Além disso, existe uma restrição de segurança importante: durante uma viagem do elevador, a diferença de peso entre as cabines pode ser no máximo de 8 unidades. De forma mais rigorosa, P − Q ≤ 8, onde P é o peso da cabine mais pesada e Q, o peso da cabine mais leve. O gerente da fábrica não está preocupado com o número de viagens que o elevador vai fazer. Ele apenas precisa saber se é possível ou não levar todas as caixas para o segundo andar. No exemplo da figura, podemos levar todas as três caixas usando a seguinte sequência de seis viagens do elevador:


	Sobe a caixa de peso 4, desce a outra cabine vazia; (diferença de 4)
	Sobe a caixa de peso 10, desce a caixa de peso 4; (diferença de 6)
	Sobe a caixa de peso 15, desce a caixa de peso 10; (diferença de 5)
	Sobe a caixa de peso 4, desce a outra cabine vazia; (diferença de 4)
	Sobe a caixa de peso 10, desce a caixa de peso 4; (diferença de 6)
	Sobe a caixa de peso 4, desce a outra cabine vazia. (diferença de 4)


Dados os pesos de N caixas no primeiro andar, seu programa deve dizer se é possível ou não levar todas as N caixas para o segundo andar.";A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 104) indicando o número de caixas. A segunda linha da entrada contém N inteiros representando os pesos das caixas. O peso das caixas está entre 1 e 105 , inclusive.;Imprima uma linha na saída. A linha deve conter o caracter S caso seja possível, ou N caso não seja possível levar todas as caixas até o segundo andar da fábrica.;True;4 / 10;417;204;48.92%
2836;Wifi;Ad-Hoc;7;"A arquitetura do novo museu de ciências é bastante peculiar. O prédio do museu é uma grande sala retangular. Dentro dessa sala existem outras salas retangulares, e dentro delas existem outras salas retangulares, e assim recursivamente, como se fossem caixas dentro de caixas... As paredes das salas não se tocam. Veja um exemplo na parte esquerda da figura, com oito salas.


O diretor quer instalar uma rede wifi que funcione em todo o museu. Para economizar, ele quer comprar o número mínimo possível de antenas. O problema é que, pela forma como foram construídas as paredes das salas, ocorre uma coisa interessante: o sinal wifi é capaz de atravessar as paredes quando vem de dentro para fora, mas estranhamente não atravessa as paredes quando vem de fora para dentro das salas! A figura mostra duas posições possíveis para uma antena, mostrada como um círculo, e a área que o respectivo sinal wifi da antena alcançaria.

Neste problema, dados N retângulos cujos lados são paralelos aos eixos cartesianos, que descrevem as salas do museu, seu programa deve computar o número mínimo possível de antenas que o diretor deve comprar para que a rede wifi funcione em todo o museu ";"A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 105) indicando o número de salas. Cada uma das N linhas seguintes contém quatro inteiros, X1, Y1, X2 e Y2 (−109 ≤ X1, Y1, X2, Y2 ≤ 109 ; X1 < X2 e Y2 < Y1), definindo as coordenadas do canto superior esquerdo (X1, Y1) e inferior direito (X2, Y2) de uma sala. Não há nenhum tipo de interseção entre os retângulos que definem as salas. Um dos retângulos contém todos os demais e representa a sala mais externa (as paredes externas do prédio do museu).";Imprima um inteiro, representando o número mínimo possível de antenas de wifi para que a rede funcione em todo o museu.;True;7 / 10;91;27;29.67%
2837;Sequência;Ad-Hoc;7;"O professor da importante disciplina de Indução Matemática está tentando resolver uma versão generalizada de um problema muito tradicional: encontrar o valor máximo possível para a soma dos elementos de uma subsequência contígua de uma sequência de números inteiros quaisquer. Mais rigorosamente, dado uma sequência S = [s1, s2, . . . , sN ], onde si é um número inteiro qualquer, para 1 ≤ i ≤ N, maximizar soma(i, j) = si + si+1 + · · · + sj entre todos os possíveis pares (i, j), onde 1 ≤ i ≤ j ≤ N.

Na versão do professor, entretanto, alguns elementos da sequência são especiais e estão marcados. Além da sequência marcada, são dadas como entrada duas cotas: L e H, com L ≤ H. O objetivo agora é encontrar o valor máximo possível para a soma dos elementos de uma subsequência contígua, que contenha pelo menos L e no máximo H elementos marcados. 

Por definição, uma subsequência vazia (de zero elementos) tem soma igual a zero. Mas note que, como podemos ter uma cota inferior para o número de elementos marcados, a subsequência contígua de soma máxima pode ter soma negativa!";"A primeira linha da entrada contém três inteiros N (1 ≤ N ≤ 105), L e H (0 ≤ L ≤ H ≤ 20), indicando respectivamente o número de elementos na sequência, a cota inferior L e a cota superior H. A segunda linha contém N inteiros si (−103 ≤ si ≤ 103 , para 1 ≤ i ≤ N), para 1 ≤ i ≤ N, definindo os elementos da sequência. A terceira linha contém N inteiros mi , para 1 ≤ i ≤ N, indicando as marcas. Se o i-ésimo elemento está marcado, o valor é mi = 1. Se não estiver marcado, mi = 0. O número de elementos  marcados na sequência é maior ou igual a L; portanto sempre existe solução.";Imprima um inteiro, representando o valor máximo possível para a soma dos elementos de uma subsequência contígua, que contenha pelo menos L e no máximo H elementos marcados.;False;7 / 10;124;66;53.23%
2838;As Jóias do Infinito;Grafos;6;"As joias do infinito são um conjunto de seis gemas que dão ao portador o domínio sobre algum aspecto do universo. São eles: Poder, Tempo, Mente, Espaço, Realidade e Alma.
 Thanos precisa obter todas as joias para reconquistar a sua amada, a senhora Morte. 
A fim de evitar que o terrível tirano consiga todas as joias, Stephen Strange, o Doutor Estranho, construiu um labirinto mágico e escondeu dentro do seu interior todas as 5 joias que ainda não estão sob o controle do Thanos e desafiou o titã a caminhar pelo labirinto e tentar obter as joias. 
Para tornar o desafio ainda mais interessante, algumas portas e chaves foram colocadas dentro do labirinto. Por exemplo a chave a abre qualquer porta A a chave b abre qualquer porta B assim por diante.  
Thanos como um bom jogador, não usará os poderes das joias enquanto não tiver todas elas, se desloca uma casa por segundo e não anda na diagonal.
Dado o labirinto, determine, se possível, o menor tempo gasto por Thanos para obter todas as joias.  ";"A primeira linha contém dois inteiros N e M (N, M ≤ 50) que representam as dimensões do labirinto. As próximas N linhas contém M caracteres que descrevem o labirinto. Os caracteres são do tipo:


	# - parede;
	a, b, c, d - os tipos de chaves que podem existir no labirinto;
	A, B, C, D - os tipos de portas que podem existir no labirinto;
	T - a posição inicial do Thanos;
	p, t,  m, e, r– as joias do poder, tempo, mente, espaço e realidade;
	. – espaço livre.";Você deve imprimir o tempo mínimo, caso o Thanos consiga obter todas as joias, ou a mensagem “Gamora” sem aspas caso ele não consiga obter todas as joias.;False;6 / 10;82;32;39.02%
2839;As Meias de Rangel;Matemática;4;"Por algum motivo desconhecido, Rangel só tem um par de meias de cada cor.
Hoje ele está atrasado para ir a faculdade e ainda precisa pegar um par de meias, mas as meias estão todas bagunçadas.
Dado o número de pares de meias na gaveta de Rangel, ele quer saber quantas meias ele precisa pegar, no mínimo, para ter pelo menos um par da mesma cor.";Cada caso é composto de um único inteiro N (1 ≤ N ≤ 105) que corresponde a quantidade de pares de meias na gaveta.;Você deve imprimir uma linha com um único inteiro que corresponde a quantidade mínima de meias que Rangel precisa pegar.;False;4 / 10;864;433;50.12%
2840;Balão++;Geometria Computacional;1;"Espero que você esteja curtindo a competição :D. 
				 Nós, os autores (Diego Rangel, Francisco Arcos, Gabriel Duarte e Gustavo Policarpo), estamos felizes por você estar tentando resolver nossos problemas. Para você que é iniciante não sair da sala sem nenhum balão, aqui vai um desafio para você:


	Neste ano os balões têm formato esférico, segundo a empresa que produz os balões: ""(...) por motivos complexos de engenharia esse formato é melhor (...)"" vai entender...
	Entretanto esse formato faz com que o balão use mais gás hélio e isso causou um problema, pois o organizador já havia comprado um tanque com L litros de gás antes dessa novidade no mercado de balões.


Sabendo o raio do modelo de balões e a quantidade de gás hélio disponível, você poderia ajudar a equipe dizendo quantos balões podem ser enchidos completamente?";"A entrada é composta por dois inteiros R e L (1 ≤  R, L ≤ 109), que são o raio e a quantidade de gás disponível, respectivamente. 
Considere PI = 3.1415";Você deve imprimir um único inteiro representando a quantidade de balões que podem ser enchidos completamente com a quantidade de gás hélio disponível.;False;1 / 10;1121;741;66.10%
2841;Dabriel e Sua Festa;Paradigmas;8;"Dabriel está planejando dar uma festa na sua empresa. Porém, uma coisa que ele descobriu é que as pessoas não se sentem confortáveis no mesmo ambiente em que o seu chefe imediatamente superior está. Como a empresa de Dabriel ainda funciona de um modo arcaico, utilizando hierarquias, com exceção do diretor, todo mundo possui exatamente um chefe.

Tendo isso em mente, Dabriel atribuiu um valor para cada pessoa que representa o quanto de animação esta trará para sua festa. Como ele deseja esse evento seja um sucesso, ele precisa saber qual o máximo de animação que ela poderá ter levando em consideração que ele irá convidar as pessoas de maneira estratégica, onde o chefe imediato de cada pessoa não estará presente.

Você consegue dizer qual é o valor máximo de animação se as pessoas convidadas forem chamadas de forma ótima?
 ";A primeira linha contém um inteiro N (1 ≤ N ≤ 10⁵), representando a quantidade de pessoas na empresa de Dabriel. A próxima linha terá N inteiros Xi (1 ≤ Xi ≤ 100, 1 ≤ i ≤ N), que é o valor atribuido para a pessoa i. A linha seguinte terá N-1 inteiros Pi (1 ≤ Pi ≤ N, 2 ≤ i ≤ N), que representa quem é o chefe da pessoa i. O diretor da empresa está representado com o número 1 e, conforme descrito no texto, não possui chefe. ;Informe qual o máximo de animação que a festa pode ter.;False;8 / 10;132;40;30.30%
2842;Dabriel e Suas Strings;Paradigmas;5;"Dabriel está brincando com suas duas maravilhosas strings e, ao fazer algumas operações com elas, percebeu uma coisa: 
sempre existe uma terceira string que contém como subsequência as suas outras duas strings. 

Uma subsequência é formada através da remoção de alguns caracteres, e os restantes se mantém na mesma posição relativa. Por exemplo: A string 'casa' contém como subsequência a string 'cs', mas não contém a string 'ac'.

Após um tempo analisando essas propriedades, Dabriel percebeu que para gerar a terceira string bastava concatenar as outras duas, uma coisa muito trivial. Portanto, ele solicitou sua ajuda para determinar qual o tamanho da menor string que possui as duas como subsequência.";A primeira linha contém a string A (1 ≤ |A| ≤ 1000), e a segunda linha contém a string B (1 ≤ |B| ≤ 1000). Elas são formadas apenas por letras minúsculas do alfabeto.;Informe qual o tamanho da menor string que possui como subsequências as strings A e B.;False;5 / 10;132;65;49.24%
2843;Escrita Rápida, a Competição;Ad-Hoc;8;"Matheus e seu irmão gêmeo Vinicius decidiram expandir o seu duelo de digitação para uma grande competição, na qual participam digitadores de muitos lugares do mundo.

A competição acontece em várias fases e em cada uma os participantes são postos em uma fila ordenados pelos seus respectivos índices. O i-ésimo participante duelará com o i-ésimo+1, e o vencedor avança para a próxima fase. Em caso de empate, o participante de menor índice passa. É declarado vencedor de um duelo, aquele que conseguir digitar uma determinada frase mais rápido, ou seja, aquele que obtiver o menor tempo resultante do seu tempo de reação somado ao tempo necessário para digitar a frase daquela rodada. Em cada fase também, o texto utilizado será o da anterior concatenado com ele próprio.

Dadas as informações de cada competidor, informe até qual fase cada um deles chegará.";"A primeira linha da entrada consiste de um inteiro N representando o número de participantes. As próximas N linhas consistem de dois inteiros Ri e Ei representando o tempo de reação e o de escrita, ou seja, o tempo que gasta para digitar cada caractere independente de qual seja, em milissegundos do i-ésimo participante. A última linha consiste do texto S utilizado na primeira fase da competição. É garantido que, seguindo as regras da competição, em todas as fases haverá um número par de participantes, com exceção da útlima, e que o texto S contém apenas caracteres alfanuméricos, sinais de pontuação e espaços.

1 ≤ N ≤ 65536

1 ≤ Ri, Ei ≤ 1000

1 ≤ |S| ≤ 100000";A saída deverá ser uma linha contendo o número da fase em que cada participante chega.;False;8 / 10;282;61;21.63%
2844;Escrita Rápida, o Duelo;Ad-Hoc;2;"Matheus e seu irmão gêmeo Vinicius adoram disputar para ver quem digita mais rápido. Após muitos anos de duelo, eles chegaram à conclusão que o duelo nem sempre é vencido por aquele que apenas digita mais rápido, pois outros fatores influenciam no ganhador. Como cada um participa de sua própria casa, eles possuem um certo atraso para receber e enviar os dados do servidor. Eles também têm um tempo de reação diferente, o que pode fazer com que algum deles comece a digitar depois. E é claro, cada um tem a sua velocidade de digitação.

Sendo fornecido o atraso referente a conexão de cada um, o seu tempo de reação, e a velocidade de escrita, quem será o ganhador?";"A entrada consiste de 3 linhas. Na primeira serão fornecido três inteiros Am, Rm, Em, representando respetivamente o tempo de atraso da conexão de Matheus, o seu tempo de reação e o tempo de escrita, ou seja, o tempo que ele gasta para digitar cada caractere independente de qual seja, em milissegundos. Na segunda linha serão fornecido três inteiros Av, Rv, Ev, com as informações de Vinicius. A terceira e última linha consiste de uma frase S, contendo apenas caracteres alfanuméricos, sinais de pontuação e espaços, usada no duelo.

1 ≤ Am, Rm, Em, Av, Rv, Ev ≤ 1000

1 ≤ |S| ≤ 100000";Você deve informar quem será o ganhador do duelo, ou “Empate”, sem as aspas, caso termine empatado.;False;2 / 10;298;169;56.71%
2845;Festa no Polo Norte;Iniciante;2;"Giovana ficou muito feliz por conseguir mandar sua carta para o papai Noel e receber ótimos presentes. A alegria foi tanta que ela resolveu até convidar todos os duendes do bom velhinho para sua festa de aniversário, que é pouco depois do Natal, em Janeiro. Porém, ela não quer que o Grinch apareça na sua festinha para estragar tudo, então ela bolou um plano.

				Para esconder do malvado Grinch onde será a festa, ela resolveu ultilizar o sistema de reuniões dos Duendes, que funciona assim: cada duende tem um identificador numérico único e, quando haverá uma reunião, é escolhida a casa de um dos duendes para sediar o encontro. Mas ao invés de escrever o número do duende anfitrião no mural da fábrica do Papai Noel, onde todos podem ver, é escrito o identificador de exatamente todos os duendes com números menores que o dele e que são coprimos ao dele. Esse método é também uma forma de dizer que esses duendes do mural devem levar as comidas e bebidas para a reunião.

				Como o Grinch é tão ruim com números a ponto de nem saber que dois números só são chamados de coprimos se o MDC (máximo divisor comum) entre eles é 1, Giovana simplesmente envia uma carta para o polo norte com os números dos duendes que devem levar as comidas, e com isso, os duendes já conseguem descobrir onde será a festa de aniversário, mas o Grinch não.

				Dada a carta que os duendes receberam, determine na casa de qual Duende será a festa de aniversário de Giovana.";A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 104) o qual representa a quantidade de números escritos na carta de Giovana. A segunda linha da entrada possui N números inteiros Ai (1 ≤ Ai ≤ 105) representando os identificadores dos duendes escritos na carta.;A saída consiste de uma única linha contendo o número do duende que sediará a festa de Giovana em sua casa.;False;2 / 10;526;305;57.98%
2846;Fibonot;Iniciante;3;"A sequência de Fibonacci é uma das sequências mais famosas do mundo. Os termos de Fibonacci são sempre iguais à soma dos dois termos anteriores a eles na sequência, e os dois primeiros termos são 1. Ou seja:

					1 , 1, 2, 3, 5, 8, 13, 21, 34 ...

					Porém, não estamos interessados em achar os termos da sequência de Fibonacci, mas sim os termos da sequência de Fibonot!

					A sequência de Fibonot é composta pelos números que não pertencem à sequência de Fibonacci. Mais especificamente, os números inteiros positivos não-nulos. Em ordem crescente!

					Eis os primeiros termos de Fibonot:

					4, 6, 7, 9, 10, 11, 12, 14, 15 ...

					Sua tarefa é achar o K-ésimo número de Fibonot.";A entrada consiste um único inteiro K (1 ≤ K ≤ 105) especificando o índice do elemento da sequência de Fibonot desejado.;Um único inteiro representando o K-ésimo termo da sequência de Fibonot.;False;3 / 10;1430;606;42.38%
2847;Papel, Tesoura, I Love You!;Ad-Hoc;4;"Como vocês sabem, ou não, o dia dos namorados já passou. É muito comum nessa data que casais troquem presentes, de maneira a mostrar o quanto gostam um do outro.

Suponhamos que você namore, e que tenha esquecido de comprar tal presente, mas tenha em mãos uma página de uma revista velha e uma tesoura. Quantas frases “I love you!” será que você consegue formar? Lembre-se: quanto mais, melhor :D";A entrada consiste de uma linha descrevendo a página da revista que você possui. Por ser uma revista velha, estarão presentes até 10^5 caracteres, sendo eles alfanuméricos, sinais de pontuação e espaços.;Você deve imprimir a quantidade de vezes que você consegue formar a frase “I love you!”, sem as aspas.;False;4 / 10;412;195;47.33%
2848;Rangel e o Jogo do Vetor I;Estruturas e Bibliotecas;4;"Sempre depois das competições de programação, os participantes costumam interagir. Pensando nisso, Rangel está desenvolvendo um jogo interessante para os participantes jogarem após uma competição. Esse jogo será conhecido como o Jogo do Vetor.
O Jogo do Vetor funciona da seguinte maneira:


	Um vetor com N números inteiros é gerado de forma aleatória e mostrado durante 10 segundos para os desafiantes.
	Segue então Q rodadas onde os jogadores devem dizer quantas vezes o K-ésimo menor elemento aparece em um determinado intervalo.
	Vence a rodada aquele que mais se aproximar do resultado.


Esse ano Rangel chamou seus amigos Gugu e Dabriel para testar o novo jogo e pediu a você para projetar o juiz que diga quem é o K-ésimo a sua frequência no intervalo e quem vence a i-ésima rodada.";A primeira linha consiste de dois inteiros N e Q (1 ≤ N, Q ≤ 1000) que representam, respectivamente, o tamanho do vetor e a quantidade de rodadas. A próxima linha contém N inteiros Xi (1 ≤ Xi ≤  232-1) que são os elementos do vetor. As próximas Q linhas contém cinco inteiros L e R (1 ≤ L ≤ R ≤ N) que representam os extremos do intervalo da rodada, K que é o K-ésimo menor elemento sorteado (K-ésimo sempre existirá), G e D (1 ≤ G, D ≤  232-1) o palpite de Gugu e Dabriel respectivamente.;"Para cada rodada você deve imprimir um inteiro X que é o K-ésimo menor, um inteiro Y que indica quantas vezes o K-ésimo menor aparece no intervalo e um caractere C  que deve ser:


	G caso Gugu ganhe;
	D caso Dabriel ganhe;
	E caso dê empate.";False;4 / 10;102;50;49.02%
2849;Rangel e o Jogo do Vetor II;Estruturas e Bibliotecas;10;"Sempre depois das competições de programação, os participantes costumam interagir. Pensando nisso, Rangel está desenvolvendo um jogo interessante para os participantes jogarem após uma competição. Esse jogo será conhecido como o Jogo do Vetor.
O Jogo do Vetor funciona da seguinte maneira:


	Um vetor com N números inteiros é gerado de forma aleatória e mostrado durante 10 segundos para os desafiantes.
	Segue então Q rodadas onde os jogadores devem dizer quantas vezes o K-ésimo menor elemento aparece em um determinado intervalo.
	Vence a rodada aquele que mais se aproximar do resultado.


EEsse ano Rangel chamou seus amigos Gugu e Dabriel para testar o novo jogo e pediu a você para projetar o juiz que diga quem é o K-ésimo a sua frequência no intervalo e quem vence a i-ésima rodada.";Na primeira linha consiste de dois inteiros N e Q (1 ≤ N, Q ≤ 105) que representam, respectivamente, o tamanho do vetor e a quantidade de rodadas. A próxima linha contém N inteiros Xi (-232+1 ≤ Xi ≤ 232-1) que são os elementos do vetor. As próximas Q linhas contém cinco inteiros L e R (1 ≤ L ≤ R ≤ N) que representam os extremos do intervalo da rodada, K que é o K-ésimo menor elemento sorteado (K-ésimo sempre existirá), G e D (1 ≤ G, D ≤ 232-1) o palpite de Gugu e Dabriel respectivamente.;"Para cada rodada você deve imprimir um inteiro X que é o K-ésimo menor, um inteiro Y que indica quantas vezes o K-ésimo menor aparece no intervalo e um caractere C que deve ser:


	G caso Gugu ganhe;
	D caso Dabriel ganhe;
	E caso dê empate.";False;10 / 10;217;64;29.49%
2850;Papagaio Poliglota;Iniciante;3;Humberto tem um papagaio muito esperto. Quando está com as duas pernas no chão, o papagaio fala em português. Quando levanta a perna esquerda, fala em inglês. Por fim, quando levanta a direita fala em francês. Nico, amigo de Humberto, ficou fascinado com o animal. Em sua emoção perguntou: “E quando ele levanta as duas?”. Antes que Humberto pudesse responder, o papagaio gritou: “Ai eu caio, idiota!”.;A entrada consiste de diversos casos de teste. Cada caso de teste consiste uma string informando qual a situação de levantamento de pernas do papagaio.;Para cada condição de levantamento de pernas do papagaio, imprima a linguagem que ele utilizará. Caso ele levante as duas pernas, imprima “caiu”. Quebre uma linha a cada caso de teste.;False;3 / 10;2878;1138;39.54%
2851;Desafio de Rangel;Ad-Hoc;9;"Rangel é um engenheiro da computação que, nas horas vagas, adora criar jogos divertidos para entreter os seus amigos.

Certo dia, um professor pediu que ele criasse um jogo que envolvesse estruturas de dados para que os calouros de sua universidade perdessem o medo de AEDs (Algoritmos e Estruturas de Dados).

Devido à grande dificuldade dos alunos com AEDs, Rangel criou um jogo baseado nos índices de um vetor e deu o nome de “Desafio de Rangel” (um jogo muito interessante e que pode ser jogado em qualquer plataforma).

O jogo Desafio de Rangel funciona da seguinte maneira:


	É gerado um vetor V com n elementos;
	Para todo ai  V do vetor você precisa achar um elemento aj  V que seja maior que o ai e deve aparece depois ai, ou seja, aj > ai e j > i, além disso, ele precisa estar o mais próximo possível de ai. É possível que não existe um aj que satisfaça a condição, logo a resposta é “*”;
	O jogador deve digitar um vetor M tal que |M| = |V| e o jogo diz se ele acertou ou não.


Por exemplo o vetor V = [1, 4, 7, 5], para a1 = 1 a resposta será 4 que está na posição a2, pois a2 > a1 e o índice 2 > 1 e a2 é a o mais próximo do a1, para a2 = 4 a resposta será 7 que está na posição a3, pois a3 > a2 e o índice 3 > 2, já para a3 = 7 a resposta será “*” pois não existe um aj (j > 3 e j ≤ |V|) que satisfaça as condições do jogo o mesmo acontece para o a4 = 5. Logo a resposta a ser digita no console é o vetor M = [4, 7, *, *].

Rangel está sem tempo de alimentar o banco de dados com as respostas corretas, pois ele está se preparando para uma competição e pede a você que as crie as respostas para ele, pois o semestre está quase iniciando e o professor está esperando o jogo.

Dado o vetor V, você deve criar um algoritmo que gere a sequência M seguindo as regras do jogo.";"A primeira linha consiste de único inteiro n (1 ≤ n ≤ 100000) que indica o tamanho do vetor.

A próxima linha contém n inteiros ai (1 ≤ i ≤ n) que é o i-ésimo elemento do vetor (1 ≤ ai ≤ 100).";Imprima n valores separados por um espaço seguindo as especificações do problema, caso não exista resposta para o i-ésimo elemento de V,  imprima “*” sem as aspas.;True;9 / 10;606;110;18.15%
2852;Troca de Mensagens;Iniciante;5;"João e Enzo adoram criptografar as suas mensagens. Para essa criptografia, eles utilizam a técnica da cifra de Vigenère. Essa técnica é bastante semelhante a cifra de Cesar, porém utiliza de diversas ""chaves"" para cada letra da frase a ser criptografada. A tabela abaixo demonstra o padrão da cifra, consistindo na repetição do alfabeto 26 vezes, onde em cada linha uma letra é deslocada para a esquerda em relação a linha anterior. Essas 26 linhas correspondem às 26 possíveis cifras de César.
				
				Uma palavra aleatória é escolhida como palavra-chave, e cada letra desta palavra vai indicar a linha a ser utilizada para cifrar ou decifrar uma letra da mensagem. Por exemplo:
				
					O texto a ser criptografado é ""ciencia da computacao"";
					Definimos como palavra-chave ""obi"";
					Agora, devemos repetir a palavra-chave tantas vezes forem necessárias até obtermos o comprimento do texto a ser criptografado:
						
							ciencia da computacao
							obiobio bi obiobiobio
						
					
					Para realizar a criptografia da primeira letra, devemos encontrar a linha da letra ""o"" na tabela, e procurar pela coluna da primeira letra da palavra, ""c"". Para a segunda letra, devemos procurar pela linha ""b"" coluna ""i"", e assim por diante, até termos como resultado:
						
							qjmbdqo ei qpudvbodic
						
					
				
				Uma vez que realizar a cifragem de todas as palavras das mensagens a serem enviadas é um trabalho bastante custoso, os amigos decidiram que somente irão criptografar as palavras que iniciarem com uma letra consoante. Sendo assim, eles somente aplicarão a palavra-chave nas palavras que eles irão de fato criptografar.
				Dada uma palavra-chave e um texto de uma mensagem, sua tarefa é criptografar esta mensagem utilizando a cifra de Vigenère mas não esquecendo da regra adicionada por João e Enzo.";A primeira linha contém uma palavra-chave K (3 ≤ K ≤ 45), que representa a chave para a criptografia. Ela somente é formada pelo alfabeto (a-z) em letras minúsculas, sem espaços. A linha a seguir contém um inteiro N (1 ≤ N ≤ 150) que indica a quantidade de mensagens a serem criptografadas. As próximas N linhas correspondem as mensagens. Estas mensagens não ultrapassam 105 caracteres e são compostas pelo alfabeto (a-z) em letras minúsculas e por espaços.;A saída deve apresentar a mensagem criptografada, de acordo com a regra dos amigos.;True;5 / 10;328;164;50.00%
2853;Invenções de Bibika;Ad-Hoc;7;"Bibika, uma mineira bacana, foi expulsa do Brasil por estar encomodando os políticos brasileiros com suas invenções mirabolantes. Sua última invenção foi o VDH (Vírus da Honestidade) que, quando em contato com um humano, o faria ser uma pessoa honesta para sempre (funcionaria até com os políticos!).

Após alguns meses vagando de país em país, ela conseguiu um lar fixo na China. Em um belo dia, quando estava tirando fotos na Muralha da China, teve uma ideia de como espalhar o VDH no Brasil. Sua ideia seria espalhar alguns robôs invisíveis (sim, ela inventou robôs invisíveis) pelas cidades do Brasil e esses robôs lançariam o VDH aos poucos (assim não chamaria tanta atenção) até que todo o Brasil fosse infectado.

Veremos o Brasil como um grid NxM, onde em alguma(s) célula(s) desse grid existirá um robô equipado com o VDH.

Um robô consegue lançar o vírus para as quatro direções (Norte, Sul, Leste e Oeste) e inicialmente possui uma potência de lançamento igual a 1. Isso significa que no primeiro dia ele conseguirá infectar 1 célula em cada uma das direções. A cada novo dia sua potência aumenta em uma unidade, fazendo com que o robô no terceiro dia, por exemplo, infecte até 12 células, 3 em cada uma das direções.

Segue um exemplo das posições infectadas por um robô, representado pelo caracter @, em um total de quatro dias:



Mesmo inventando o vírus da honestidade e os robôs invisíveis, Bibika não sabe quantos dias serão necessários para infectar todo o território Brasileiro, dada uma configuração de robôs. Vale ressaltar que as células que possuem robôs já estão automaticamente infectadas.

Sua tarefa é ajudá-la nessa missão ou dizer que não é possível infectar todo Brasil dada a configuração de robôs de Bibika.";"A primeira linha contém dois inteiros N e M (1 ≤ N, M ≤ 1000), representando o tamanho do mapa do Brasil.
Cada uma das próximas N linhas conterão M caracteres '#' ou '@', onde '#' representa uma área qualquer do território brasileiro e '@' representa uma área com um robô invisível de Bibika.";Exiba um único inteiro, a quantidade de dias que serão necesários para infectar todo o Brasil. Caso seja impossível, imprima -1.;True;7 / 10;209;87;41.63%
2854;Árvore Genealógica;Grafos;2;"Armindo precisa muito de sua ajuda. Ele está trabalhando em um projeto baseado em documentações (espalhadas e desorganizadas, obviamente) no qual quer identificar e desenhar diversas árvores genealógicas de diferentes famílias.

				Veja a imagem abaixo: Pedro é marido de Maria e eles tem três filhos: Josias, Mangojata e Samuel. Obviamente Maria é mãe de Mangojata e de Samuel. Josias é irmão de Mangojata e Mangojata é mãe de Ivane assim como Samuel é seu tio. Também há outra família sem relação com esta primeira, na qual Paulo é Filho de Marcos.

				  

				A sua ajuda é muito importante neste trabalho para identificar quantas famílias diferentes existem à partir dos documentos e informações fornecidas por Armindo. No exemplo em questão temos 2 famílias diferentes: a familia da qual Pedro pertence e a familia de Marcos.";"A entrada consiste de um único teste que contém muitas linhas de teste. A primeira linha contém dois inteiros M  (1 < M ≤ 300) e N  (1 < N ≤ 200) que indicam respectivamente a quantidade pessoas diferentes e a quantidade de relações existentes entre estas pessoas. Cada uma destas N  relações (listadas a seguir), contém três palavras: um nome próprio seguido de uma relação e de outro nome próprio, todos separados com espaço (náo tem espaço após o último nome).

				Obs.: nunca existirá um nome representando duas pessoas diferentes. Se houver 2 Pedros, por exemplo, eles serão identificados por Pedro_1 e Pedro_2 e assim sucessivamente,";A saída é composta de um único número inteiro que representa a quantidade de famílias diferentes encontradas com base nos documentos fornecidos por Armindo.;True;2 / 10;474;288;60.76%
2855;Números de Sorte;Iniciante;9;"Um número de sorte é um número em uma dada sequência que sobrevive ao seguinte processo de eliminação: Inicialmente todo segundo elemento é eliminado. Após isso, todo terceiro elemento é eliminado e assim sucessivamente até que o número em questão esteja em uma posição menor do que o próximo índice a ser eliminado.

Por exemplo, na sequência [1,2,3,4,5,6,7,8,9,10,11,12,13…] gostaríamos de saber se os números 7 e 9 são sortudos. Após a primeira passada teremos [1,3,5,7,9,11…], após a segunda passada teremos [1,3,7,9,13…]. Após a quarta passada [1,3,7,13…]. Assim podemos concluir que o número 7 é sortudo e que o número 9 é um número azarado nesta sequência.

Alfredo gostou da brincadeira, mas está cansado de apagar e reescrever cada sequência para descobrir quais são os números sortudos. Poderá você escrever um programa para determinar se dado número em uma sequência é um número sortudo?";A entrada é composta por diversos casos de teste. Cada caso de teste é composto por um inteiro N(0<N<305000) que determina quantos números existem na sequência. Após isso, seguem N inteiros Ni(0<Ni<305000) em ordem crescente. Por fim, um inteiro M(0<M<305000) o qual representa o digito da sequência que deve ser testado.;Imprima “N” caso o número testado não for um número de sorte e “Y” caso contrário. Pule uma linha após cada caso de teste.;False;9 / 10;1679;245;14.59%
2856;Viagem do Pão de Queijo;Paradigmas;6;"Adson, cansado de ficar em casa, resolveu fazer uma viagem de moto pelo Brasil. Ele se preparou por semanas anotando todas as cidades que visitaria e todos os pontos em que pararia para comer na estrada. Adson decidiu que iria parar apenas nas barracas de pão de queijo da famosa empresa PqR (Pães de queijo recheados). 

Preocupado em não gastar muito com os pães de queijo, ele anotou apenas os lugares que vendiam com a famosa promoção ""Leve X pães de quejio e pague Y reais"".

Adson separou R reais para gastar com os pães de queijo. Como a gasolina já está cara demais, ele precisa da sua ajuda para escolher em quais barracas parar para comprar os pãos de queijo recheados de forma que consiga comprar a maior quantidade possível com no máximo R reais.

A empresa PqR vende pão de queijo com três tipos diferentes de recheios: ""Bacon, Cheddar ou Goiaba"". Adson acha que não é uma boa ideia misturar todos os três tipos na sua viagem e decidiu que comprará pães de queijo de no máximo dois tipos diferentes de recheio.

Dadas as informações da quantidade N de barracas ao longo da viagem, a quantidade R de reais que Adson possui e o tipo de promoção que cada barraca vende ""X pães de queijo com recheio Z por Y reais"", sua tarefa é ajudá-lo dizendo qual a maior quantidade de pães de queijo conseguirá comprar sem descumprir a regra de comprar no máximo de dois tipos diferentes. Considere que ele não poderá comprar mais de uma vez em uma mesma barraca.";A primeira linha contém dois inteirios N e R, (1 ≤ N, R ≤ 1000), representando a quantidade de barracas de pães de queijo recheados e a quantidade de dinheiro que Adson possui para esse fim. Cada uma das próximas N linhas conterá três inteiros X Z Y representando a informação da promoção de uma barraca: X pães de queijos com recheio Z por apenas Y reais. (1 ≤ X, Y ≤ 100) e Z = 'B', 'C', ou 'G', representando recheio de Bacon, Cheddar e Goiaba, respectivamente.;Exiba um único inteiro, a maior quantidade de pães de queijo, de no máximo dois tipos diferentes, que Adson poderá comprar sem exceder seus R reais.;False;6 / 10;313;93;29.71%
2857;Fluxo nos Vagões;Estruturas e Bibliotecas;7;"Os funcionários da ACDHV (Associação Controladora da Densidade Humana nos Vagões) estão trabalhando para gerar algumas estatísticas sobre a quantidade de pessoas que usam trêm como meio de transporte e como elas escolhem em qual vagão entrar.

Eles anotaram, de tempo em tempo, quantas pessoas entraram em determinados vagões. Para gerarem dados satisfatórios, os funcionários precisam saber em determinados momentos quantas pessoas distintas estão dentro de dois intervalos de vagões.

Eles necessitam de sua ajuda e tudo que te deram foi uma planilha com a quantidade N de vagões (númerados de 1 a N, da esquerda para a direita), e as M atividades ocorridas no dia. As atividades podem ser do tipo 1 ou tipo 2:

1 X Y - Significa que Y pessoas entraram no vagão X.
2 A B C D - Significa que desejam saber a quantidade de pessoas distintas nos vagões dos intervalos [A, B] e [C, D].

Considere que inicialmente todos os vagões estão vazios.

Segue uma ilustração dos vagões em um determinado momento:



Se existir uma atividade do tipo 2 com (A=2, B=4, C=3, D=5), a resposta será 8, já que existem 8 pessoas distintas nesses dois intervalos.";"A primeira linha contém dois inteiros N e M (1 ≤ N ≤ 105) e (1 ≤ M ≤ N).  Cada uma das próximas M linhas conterá uma atividade do tipo 1 ""1 X Y""  (1 ≤ X ≤ N e 1 ≤ Y ≤ 100) ou tipo 2 ""2 A B C D"" (1 ≤ A, B, C, D ≤ N e A ≤ B e C ≤ D), ambas descritas anteriormente.";Para cada atividade do tipo 2, exiba a quantidade total de pessoas distintas nos intervalos dados.;True;7 / 10;295;116;39.32%
2858;Tabuleiro Infinito;Ad-Hoc;9;"Levi e William sempre gostaram muito de jogar xadrez, por isso jogam sempre que podem. Porém, com o tempo eles inventaram suas próprias variações. Apenas para se desafiarem de novas formas. Umas das mais interessantes é o ""infinity row""

					

					Nessa versão do xadrez, cada jogador só possui uma unica peça e seu objetivo é colocá-la em uma casa adjacente à inicial, seja à esquerda, ou seja a direita. Ganha aquele que conseguir fazer isso em menos movimentos.

					A dificuldade reside nas restrições de movimento da peça. Ela só pode se mover em uma única linha, ou seja, horizontalmente, e a cada movimento um jogador só pode mover sua peça D casas à direita ou E casas à esquerda. É um jogo complicado, porém, para amenizar um pouco as coisas, eles fizeram um programa para simular o tabuleiro já que gostariam que este fosse infinito. Daí o nome do jogo.

					Naturalmente, depois de alguns jogos, começou a surgir a dúvida: Qual a quantidade mínima de movimentos para atingir o objetivo do jogo?

					Como William e Levi, apesar de curiosos pela resposta, estão ocupados jogando, sua tarefa é, dado o número de casas de um movimento à direita e o número de casas de um movimento à esquerda, calcular o número mínimo de movimentos para colocar a peça em uma casa adjacente à inicial ou informar que não é possível fazê-lo.";A entrada é composta de dois inteiros D e E (1 ≤ D,E ≤ 106) de acordo como explicado no texto.;"A saída consiste de uma única linha contendo o número mínimo de movimentos caso seja possível, ou a mensagem ""IMPOSSIVEL"", caso contrário.";True;9 / 10;286;63;22.03%
2859;Digit Root;Matemática;9;"A Digit Root é uma característica dos números ultilizada em recreação matemática, porém também pode ser usada para conferir resultado de operações simples como soma e multiplicação. Uma de suas principais propriedades é de que a Digit Root de um número é sempre igual a Digit Root da soma de seus dígitos.

					Por exemplo, a Digit Root de 18446744073709551615 é a mesma de 87 porque 1+8+4+4+6+7+4+4+0+7+3+7+0+9+5+5+1+6+1+5=87 e a mesma de 15 porque 8+7=15, que por sua vez é a mesma de 6, pois 1+5=6. Logo a Digit Root de todos esses números vale 6 já que 6 é sua própria Digit Root.

					Sua tarefa é, dado o dois números inteiros, B e E, calcular a Digit Root de BE (B elevado a E-ésima potência).";A entrada consiste de duas linhas. A primeira contém o número B (1 ≤ B ≤ 10105). A segunda contém o número E (1 ≤ E ≤ 10105).;A saída consiste de uma única linha contendo a Digit Root.;False;9 / 10;450;90;20.00%
2860;A Paz em Spar-Ta;Estruturas e Bibliotecas;8;"O reino de Spar-Ta está crescendo muito. O rei, não conseguindo mais administrar todas suas cidades, irá mandar representantes dele para algumas delas.

Atualmente, o reino é composto de n cidades conectadas por estradas bidirecionais de maneira que há um caminho único entre qualquer par de cidades. O rei irá construir uma nova estrada entre duas cidades ainda não conectadas e escolher as cidades para as quais mandar seus representantes.

Por motivos burocráticos, os representantes devem estar em constante comunicação, e, para isso, o rei demanda que cada representante tenha dois outros em cidades vizinhas. Para não exceder a verba, cada cidade pode ter no máximo um representante, e o número de cidades com representantes deve ser o mínimo possível.

Caso tenha algum problema em alguma cidade, o representante que vive mais perto dela deverá ir até lá para averiguar a situação. O rei teme, porém, que se ele demorar demais os cidadãos daquela cidade ficarão bravos e poderão ameaçar a paz no reino. Seu trabalho é averiguar, para cada estrada que o rei considera construir, qual a maior distância no reino entre alguma cidade e um representante, garantindo, assim, a paz em Spar-Ta.";"A primeira linha da entrada consiste de um número t (t <= 10) referente à quantidade de casos teste.

Cada caso inicia-se com uma linha contendo o número n (2<=n<=100000), o número de cidades do reino.

As n-1 linhas seguintes contém dois inteiros a e b (0<=a,b<n) indicando que as cidades a e b estão conectadas por uma estrada.

A linha seguinte contém um número q (0<=q<=100000), o número de estradas que o rei considera contruir.

As q linhas seguintes contém dois inteiros i e j (0<=i,j<n) indicando que o rei considera contruir uma estrada entre as cidades i e j. É garantido que ainda não há uma estrada entre as cidades i e j e essa estrada não deve ser levada em consideração nas perguntas subsequentes.";Para cada estrada que o rei considera contruir, deve ser impressa a distância máxima entre alguma cidade e seu representante mais próximo.;False;8 / 10;58;19;32.76%
2861;A Saída;Iniciante;1;Cacunda, Bizz e Massacote são amigos inseparáveis. Na faculdade, em alguns dias, não iam à aula para jogar truco. Certo dia, um professor estava passando perto deles. Na mesma hora, os três gritaram bem alto a palavra “gzuz”. Após esse grito, ficaram invisíveis, e o professor não os viu. Outra vez, a turma deles estava respondendo perguntas do professor. Quando era a vez de algum deles, respondiam com a palavra “gzuz”, e o professor aceitava como resposta e dava a nota máxima da pergunta. Faça a simulação da saída que eles encontraram para se safar dos mais diversos problemas.;A entrada é composta por vários casos de teste. A primeira linha contém um número inteiro C (2 <= C <= 99) relativo ao número de perguntas que o professor fez. As C linhas seguintes vêm com uma pergunta feita pelo professor.;Para cada pergunta, imprima a resposta que foi dita pelos três amigos.;False;1 / 10;1470;1107;75.31%
2862;Inseto!;Iniciante;1;Devita é o príncipe dos Calsadins. Juntamente com Pana, eles vão atrás de Tataroko, o nome de nascimento de Kogu, para tentar dominar o mundo. Ele possui um rastreador que mede o nível de energia de qualquer ser vivo. Todos os seres com o nível menor ou igual a 8000, ele considera como se fosse um inseto. Quando passa deste valor, que foi o caso de Kogu, ele se espanta e grita “Mais de 8000”. Baseado nisso, utilize a mesma tecnologia e analise o nível de energia dos seres vivos.;A entrada é composta por vários casos de teste. A primeira linha contém um número inteiro C relativo ao número de casos de teste. Em seguida, haverá C linhas, com um número inteiro N (100 <= N <= 100000) relativo ao nível de energia de um ser vivo.;Para cada valor lido, imprima o texto correspondente.;False;1 / 10;2780;1635;58.81%
2863;Umil Bolt;Iniciante;3;Umil Bolt é um excelente corredor. Sua especialidade é a prova dos 100 metros rasos. Todos os dias, ele faz uma bateria de tentativas de correr esta prova em um tempo cada vez menor. Pode se perceber que, dependendo da quantidade de tentativas, o seu desempenho melhora ou piora. Sobre isso, ele pede a sua ajuda para calcular a tentativa mais rápida de cada bateria diária.;A entrada é composta por vários casos de teste. A primeira linha de cada caso de teste contém um número inteiro T (2 <= T <= 99) relativo ao número de tentativas de um dia. As T linhas seguintes contêm um número real Ti (9 <= Ti <= 11) relativo ao tempo, em segundos, da i-ésima tentativa da bateria. A entrada termina com fim de arquivo.;Para cada caso de teste de entrada do seu programa, você deve imprimir um número real contendo o tempo da tentativa mais rápida de cada bateria.;False;3 / 10;2933;1255;42.79%
2864;Qual é a Altura?;Matemática;4;Nick é um cientista que viaja por diversos universos paralelos, juntamente com o seu neto, Mory. Em um desses universos, havia um programa de televisão, que premiava quem adivinhasse as alturas máximas de arremessos de frutas. Neste local, a massa da fruta não influenciava na altura máxima do arremesso. Nick calculava o ângulo do arremesso, que formava sempre uma parábola, e extraía uma função de segundo grau da trajetória. Ajude Nick e Mory a ganhar muitos prêmios neste programa.;A entrada é composta por vários casos de teste. A primeira linha contém um número inteiro T (2 <= T <= 99) relativo ao número de casos de teste. As T linhas seguintes possuem três valores inteiros A (A < 0), B e C (-100 <= B, C <= 100), representando os coeficientes de uma função de segundo grau, na forma ax2 + bx + c.;Para cada caso de teste de entrada do seu programa, você deve imprimir um número real, com aproximação de duas casas decimais, a altura máxima do arremesso de uma fruta.;False;4 / 10;441;233;52.83%
2865;Palíndromo Binário;Ad-Hoc;5;Sheldon é um cientista que adora números. O seu número preferido é o 73. Entre os vários motivos desta preferência, um chama a atenção, pois este número, na forma binária, forma um palíndromo (1001001), ou seja, o número escrito de trás para frente fica igual a forma original. Nem todo número forma um palíndromo na forma binária, mas com um cálculo mínimo, esse número pode ser transformado em um palíndromo binário. Por exemplo, o número 6 não forma um palíndromo binário (110), mas basta somar 1, ou seja, tornando 7, forma (111). Sendo assim, dado um número inteiro informado, qual é a operação mínima necessária para tornar o número um palíndromo binário(operação feita com o menor número possível).;A entrada é composta por vários casos de teste. A primeira linha contém um número inteiro C relativo ao número de casos de teste. As próximas C linhas tem um número inteiro N (1 <= N <= 10000);Para cada caso de teste de entrada do seu programa, imprima um asterisco, - caso o número já seja um palíndromo binário, - ou o símbolo do cálculo a ser feito, seguido de um espaço, acompanhado do número do respectivo cálculo, de modo que o torne um palíndromo binário. Se houver mais de um cálculo com o mesmo número, siga a ordem de prioridade: + , - , x , / .;False;5 / 10;109;40;36.70%
2866;Criptotexto;Strings;2;César é um detetive que investiga uma série de roubos que acontecem em sua cidade. Em todo lugar que um crime acontece, a pessoa que cometeu tal crime deixa uma mensagem escrita, formada por letras maiúsculas e minúsculas. César conseguiu achar um padrão nestas mensagens e agora extrai um texto oculto em cada mensagem e pede a sua ajuda para tentar descobrir quem está cometendo tais crimes.;A entrada é composta por vários casos de teste. A primeira linha contém um número inteiro C (2 <= C <= 99) relativo ao número de casos de teste. Nas C linhas seguintes, haverá mensagens codificadas, todas com um mesmo padrão em relação ao exemplo abaixo.;Para cada caso de teste de entrada do seu programa, você deve imprimir o texto extraído da mensagem original.;False;2 / 10;1185;696;58.73%
2867;Dígitos;Iniciante;5;"Dados dois números inteiros, n e m, quantos dígitos tem nm ?

Exemplos:

2 e 10 - 210 = 1024 - 4 dígitos

3 e 9 - 39 = 19683 - 5 dígitos";A entrada é composta por vários casos de teste. A primeira linha tem um número inteiro C, representando a quantidade de casos de teste. As C linhas seguintes contém dois números inteiros N e M (1 <= N, M <= 100).;Para cada caso de teste de entrada do seu programa, você deve imprimir um número inteiro contendo a quantidade de dígitos do resultado da potência calculada no respectivo caso de teste.;False;5 / 10;2979;1116;37.46%
2868;Errrou!;Ad-Hoc;4;Tausfão apresenta um programa de televisão o qual dá prêmios aos participantes que respondem corretamente a cálculos matemáticos. Quando os participantes erram, ele ressalta o quão longe a resposta está da esperada. Levando em consideração somente as respostas erradas, ajude o Tausfão informando como deve ser a pronúncia do erro do participante.;A entrada é composta por vários casos de teste. A primeira linha contém um número inteiro C, representando a quantidade de casos de teste. As próximas C linhas serão formadas por um número inteiro, seguido por um espaço, um caractere de operação (adição, subtração ou multiplicação), outro número inteiro, mais um espaço, um sinal de igualdade, outro espaço e, por fim, um número inteiro, representando o resultado dito pelo participante em relação ao referido cálculo do caso de teste.;Para cada caso de teste de entrada do seu programa, imprima a expressão “Errou!”, baseada na distância da resposta do participante em relação à resposta correta.;False;4 / 10;724;442;61.05%
2869;Falando em Divisor...;Iniciante;10;1 é divisor de 6. Além do 1, tem mais 3 divisores de 6: 2, 3 e 6. No total, 6 possui 4 divisores, e é o menor número que possui 4 divisores. Falando em divisor, dado um número n, qual é o menor número que possui n divisores?;A entrada é composta por vários casos de teste. A primeira linha contém um número inteiro C, com o total de casos de teste. As C linhas seguintes têm um número inteiro N (1 <= N <= 100).;Para cada caso de teste de entrada do seu programa, você deve imprimir um número inteiro contendo o menor número que possui N divisores. Alguns valores terão números relativamente grandes. Desse modo, imprima na forma de MOD 1000000007;False;10 / 10;1954;251;12.85%
2870;Jogo do Mapa;Grafos;4;"Júnior e Thiago sempre ficavam entediados após a décima segunda hora de viagem para alguma das várias competições que participam. Em uma de suas viagens para uma dessas várias competições, decidiram criar um jogo. Qualquer jogo serviria por causa do tédio. Até que Júnior veio com a seguinte ideia de jogo: Júnior tinha em seu celular um mapa com algumas cidades e ligações entre elas. Como Júnior tem um certo tipo de TOC, ele garante que para que o mapa fique bonito, todos os circuitos desse grafo têm tamanho par.

Inicialmente Júnior irá colocar uma marca em alguma cidade. Após o primeiro movimento, Thiago e Júnior irão alternar seus movimentos respectivamente. A cada rodada, um jogador irá colocar uma marca em uma cidade imediatamente adjacente a uma marca do outro jogador. Como o mapa tem um número finito de cidades, em algum momento não será mais permitido marcar alguma cidade. O jogador que não conseguir mais realizar movimentos é declarado perdedor, e tem que trazer um pão de queijo em algum momento da prova na próxima maratona que participarem.

Júnior criou o jogo, e agora quer saber. Dado o mapa, é possível dizer quem irá ganhar o jogo quando ambos jogam de maneira ótima?";"A primeira linha conterá dois inteiros N (1 ≤ N ≤ 105) e M (1 ≤ M ≤ 2 x 105) que são o número de cidades e o número de estradas ligando duas cidades. Os caminhos são de mão-dupla. As próximas M linhas contém xi e yi (1 ≤ xi; yi ≤ N), que são os extremos de um caminho que liga os vértices xi e yi";Mostre uma linha contendo o nome do jogador vencedor (“Junior” ou “Thiago”). Lembrando que o primeiro jogador a fazer um movimento é Júnior, e ele pode colocar uma marca na cidade que quiser inicialmente.;False;4 / 10;31;10;32.26%
2871;Colheita de Café;Ad-Hoc;2;"Jhin é proprietário de várias fazendas. Cada fazenda, além de possuir muitas criações de gado, possui também grandes lavouras de café. Em meio a lucros, gastos e às variações de produtividade das lavouras a cada ano, Jhin se viu com a necessidade de prever qual seria a produtividade de cada lavoura em sacos de café com base em valores aproximados da produção de cada pé de café. Jhin contratou um programador para resolver o problema. O programador propôs que cada lavoura é representada por uma matriz em que os pés de café são representados por cada célula. Cada célula (pé de café) da matriz (lavoura) é preenchida com os valores relativos a quantos litros (em grãos) de café o pé produzirá naquele ano.

Assumindo que cada saca equivale a 60 litros de café, Jhin precisa saber quantas sacas e quantos litros cada lavoura irá produzir naquele ano. Porém, o programador é iniciante e agora precisa da sua ajuda para implementar a lógica que desenvolveu para resolver o problema.";A entrada é composta por vários casos de teste. A primeira linha contém dois números inteiros M (2 <= M <= 99) relativo ao número de linhas e N (2 <= N <= 99) relacionado ao número de colunas que a matriz possui. A matriz é composta por números inteiros (0 <= matriz[M][N] <= 60). A entrada termina com fim de arquivo.;Para cada caso de teste de entrada do seu programa, imprima um número inteiro contendo a quantidade de sacas de café concatenada com a string “ saca(s) e ” concatenada com um número inteiro contendo a sobra de café em litros concatenado com a string “ litro(s)”.;False;2 / 10;464;304;65.52%
2872;Protocolo TCP/IP;Estruturas e Bibliotecas;7;"O Protocolo TCP/IP (Transmission Control Protocol – Protocolo de Controle de Transmissão / Internet Protocol – Protocolo de Internet) é um conjunto de protocolos de comunicação em uma rede de computadores para transmissão de pacotes na rede. O TCP é um mecanismo de transporte “confiável” por fornecer um byte do host de destino (computador ou dispositivo com acesso à rede) ao host de origem confirmando que o pacote foi recebido com sucesso. A transferência é feita dividindo os dados em pacotes e enviando um pacote de cada vez. Outra característica importante do protocolo TCP é que como os pacotes podem ser enviados por caminhos diferentes, os pacotes podem chegar ao host de destino fora de ordem. Sendo assim, o TCP ordena os pacotes no host de destino de forma que a aplicação seja visualizada organizadamente no monitor.

Supondo que você está criando o protocolo TCP, desenvolva o algoritmo que a partir da chegada dos pacotes enviados, seja apresentado no monitor do host de destino os mesmos pacotes, porém de forma ordenada. Assuma que seja enviado o bit “1” para iniciar a transferência e o bit “0” para finalizar a transferência dos pacotes.";A entrada é composta por vários casos de teste. A primeira linha contém um número inteiro “1” (sem aspas) que indica o início da transferência. A segunda e próximas linhas contêm a palavra “Package ” concatenada com um número inteiro P (001 <= P <= 999) de 3 dígitos, o qual identifica o pacote. Existem pacotes com identificadores repetidos! A leitura dos pacotes do caso de teste é finalizada com a última linha do caso de teste que contém um número inteiro “0”. A entrada termina com fim de arquivo.;Para cada caso de teste da entrada do seu programa, você deve imprimir todos os pacotes enviados de forma ordenada seguidos de uma linha em branco.;False;7 / 10;515;141;27.38%
2873;Pirâmide;Matemática;4;"Segundo alguns historiadores, Tales provavelmente passou um período de sua vida no Egito e Babilônia, dedicando-se a pesquisas em contato com astrônomos e matemáticos. No período em que passou no Egito, percebeu-se que os egípcios não conseguiam calcular a altura de uma grande pirâmide de Quéops e apresentou uma solução para o problema. Tales supôs que os raios do Sol são paralelos quando atingem a Terra, em razão da distância que a separa do Sol. (A.J. Philippi.; M.A. Roméro; G.C. Bruna (editores)). Consideremos que Tales tenha escolhido uma posição de iluminação do Sol, tal que seja possível calcular a altura da pirâmide dado o valor de A em metros (largura da pirâmide), o valor de B em metros (comprimento da sobra da pirâmide), o valor de C em metros (a altura de uma haste qualquer) e o valor de D em metros (comprimento da haste), conforme mostra a figura.



Suponhamos que voltamos no tempo e que Tales agora foi contratado pelos egípcios para calcular a altura de todas as pirâmides existentes no Egito. No entanto, ele não entende muito de programação e pediu sua ajuda para desenvolver um sistema que o permita, através de seu Tablet, entrar com os dados que são fornecidos e o sistema gerar a altura da pirâmide.";A entrada é composta por vários casos de teste. Cada caso de teste possui uma única linha contendo um valor real A (2 <= A <= 10000), um valor B (2 <= B <= 20000), um valor C (1 <= C <= 100) e um valor D (1 <= D <= 200). A entrada de dados é finalizada quando forem lidos os valores A = 0, B = 0, C = 0 e D = 0.;Para cada caso de teste seu programa, você deve imprimir uma única linha contendo um número real com cinco casas decimais.;True;4 / 10;198;111;56.06%
2874;Frase Binária;Ad-Hoc;2;"Jhin é um jovem que nasceu na geração em que os computadores já faziam parte da vida das pessoas. Assim como muitos de seus amigos, ele sabe utilizar muito bem as tecnologias atuais. Porém, ele não queria apenas saber utilizar, ele gostaria de saber como a computação funcionava. Após ter estudado um pouco da origem do computador, Jhin percebeu que o sistema de computação não é tão simples quanto parece ser. Em meio a algumas de suas pesquisas, ele percebeu que o computador utiliza um sistema binário ou de base dois, representados por zeros e uns (0 e 1). Jhin descobriu que podemos converter os números binários em números decimais e que podemos utilizar um valor decimal para equivaler a um caractere de acordo com a tabela ASCII.

Jhin achou interessante a ideia de como o computador entende o que digitamos e resolveu desenvolver um tradutor em que ele entraria com valores em binário e o programa devolveria a frase equivalente ao código binário digitado. Jhin conseguiu desenvolver o programa, no entanto, ele desafiou você programador a resolver o mesmo problema.";A entrada é composta por vários casos de teste. A primeira linha do caso de teste contém um número inteiro N (1<= N <= 100000), as N próximas linhas contêm uma String B (00000001 <= B <= 11111111). A entrada é finalizada com o fim do arquivo.;Para cada caso de teste seu programa, imprima uma única linha onde será apresentada uma frase contendo todos os caracteres relacionados ao seu caso de teste.;False;2 / 10;367;227;61.85%
2875;Jogo Túnel;Ad-Hoc;1;"Jhin adora brincar com jogos 2D. Um de seus prediletos é o jogo Túnel, que por sinal foi criado por ele mesmo. O jogo funciona da seguinte maneira: É dada uma matriz aleatória preenchida por 0s e 1s. As células preenchidas por 0s indicam o caminho que o objeto X deve passar até que não exista mais 0s a ser caminhado. As células preenchidas por 1s indicam obstáculos em que não seja possível a passagem do objeto X.

Como Jhin ainda está aprendendo a programar, ele pediu sua ajuda para implementar o jogo sendo que o objetivo é, declarando que o objeto X sempre seja o início, direcionado para frente, imprimir as instruções necessárias para que X chegue até a última célula 0.

Assuma que as instruções são: F (Front, Frente), L (Left, Esquerda) e R (Right, Direita).";A entrada é composta por vários casos de teste. Cada caso é iniciado com uma linha contendo um inteiro M (2 <= M <=100) e um inteiro N (2 <= N <= 100) representando M linhas e N colunas da matriz de 0s e 1s. A seguir, é dada a matriz M x N que representa o caminho e os obstáculos.;A saída deve ser composta por uma linha para cada caso de teste, contendo todas as instruções geradas pelo jogo, separadas por um espaço. Após o último, deve finalizar com E (end).;False;1 / 10;56;36;64.29%
2876;Aventurando-se no Slackline;Ad-Hoc;8;Beltrano recentemente se interessou por slackline. Slackline é um esporte de equil´ıbrio sobre uma fita elástica esticada entre dois pontos fixos, o que permite ao praticante andar e fazer manobras em cima da fita. Durante as férias tudo que Beltrano quer fazer é praticar, e para isso ele foi para a fazenda de um amigo, onde há uma plantação de eucaliptos. A plantação é muito bem organizada. Os eucaliptos estãp dispostos em N fileiras com M árvores em cada. Há um espaço de um metro entre cada fileira e as árvores nas diferentes fileiras estão todas perfeitamente alinhadas com um espa¸co de um metro entre elas. Beltrano vai montar o slackline usando duas árvores. Ao montar o slackline Beltrano não gosta que a distância entre as duas árvores seja muito pequena, já que as melhores manobras exigem que a fita tenha pelo menos L metros. Também não é possível esticar demais a fita já que ela tem um comprimento máximo de R metros. Note que ao esticar a fita entre as duas árvores escolhidas não pode haver nenhuma outra árvore na linha formada, caso contrário não seria possível utilizar a fita toda para as manobras. Beltrano gostaria de saber de quantas formas diferentes é possível montar o slackline usando as árvores da fazenda. Duas formas são consideradas diferentes se pelo menos uma das árvores onde a fita foi amarrada é diferente.;"A entrada consiste de uma única linha que cont´em quatro inteiros, N, M, L, R, representando respectivamente o número de linhas e colunas da plantação o e os comprimentos mínimo e máximo do slackline (1 ≤ N, M ≤ 105 ; 1 ≤ L ≤ R ≤ 105 ).";Seu programa deve produzir uma única linha com um inteiro representando de quantas formas diferentes o slackline pode ser montado. Como o resultado pode ser grande, a resposta deve ser esse número módulo 109 + 7.;False;8 / 10;72;16;22.22%
2877;Bolinhas de Gude;Paradigmas;9;"Usar bolinhas de gude como moeda não deu muito certo em Cubicônia. Na tentativa de se redimir com seus amigos, depois de roubar suas bolinhas de gude, o imperador decidiu convidar todos para uma noite de jogos em seu palácio. Naturalmente, os jogos utilizam bolinhas de gude, afinal agora o imperador precisa encontrar alguma utilidade para tantas bolinhas. N bolinhas de gude são espalhadas em um grande tabuleiro cujas linhas são numeradas de 0 a L e as colunas numeradas de 0 a C. Os jogadores alternam turnos e em cada turno o jogador da vez deve escolher uma das bolinhas de gude e movê-la. O primeiro jogador que mover uma bolinha para a posição (0, 0) é o vencedor. Para que o jogo seja interessante, os movimentos são limitados; do contrário, o primeiro jogador sempre moveria a bolinha para a posição (0, 0) e venceria. Um movimento consiste em escolher um inteiro u maior que 0 e uma bolinha, cuja localização denotaremos por (l, c), e movê-la para uma das seguintes posições, desde que a mesma não saia do tabuleiro:

• (l − u, c);

• (l, c − u); ou

• (l − u, c − u).

Note que mais de uma bolinha de gude pode ocupar a mesma posição no tabuleiro. Como o imperador não gosta de perder você deve ajudá-lo a determinar em quais partidas ele deve participar. Como é de se esperar, sempre que joga o imperador fica com o primeiro turno. Assumindo que todos jogam de forma ótima, seu programa deve analisar a distribuição inicial das bolinhas de gude no tabuleiro e informar se é possível ou não que o imperador vença caso ele jogue.";A primeira linha contém um inteiro N (1 ≤ N ≤ 1000). Cada uma das N linhas seguintes contém dois inteiros li e ci indicando em qual linha e coluna a i-ésima bolinha de gude se encontra no tabuleiro (1 ≤ li , ci ≤ 100).;Seu programa deve produzir uma única linha contendo o caractere Y caso seja possível para o imperador ganhar o jogo ou N caso contrário.;False;9 / 10;363;93;25.62%
2878;Cortador de Pizza;Matemática;9;"Vô Giuseppe ganhou de presente um cortador profissional de pizza, daqueles do tipo carretilha e, para comemorar, assou uma pizza retangular gigante para seus netos! Ele sempre dividiu suas pizzas em pedaços fazendo cortes ao longo de linhas contínuas, não necessariamente retilíneas, de dois tipos: algumas começam na borda esquerda da pizza, seguem monotonicamente para a direita e terminam na borda direita; outras começam na borda inferior, seguem monotonicamente para cima e terminam na borda superior. Mas Vô Giuseppe sempre seguia uma propriedade: dois cortes do mesmo tipo nunca podiam se interceptar. Veja um exemplo com 4 cortes, dois de cada tipo, na parte esquerda da figura, que dividem a pizza em 9 pedaços.

Acontece que Vô Giuseppe simplesmente ama geometria, topologia, combinatória e coisas assim; por isso, resolveu mostrar para as crianças que poderia obter mais pedaços, com o mesmo número de cortes, se cruzamentos de cortes de mesmo tipo fossem permitidos. A parte direita da figura mostra, por exemplo, que se os dois cortes do tipo dos que vão da esquerda para a direita puderem se interceptar, a pizza será dividida em 10 pedaços. Vô Giuseppe descartou a propriedade, mas não vai fazer cortes aleatórios. Além de serem de um dos dois tipos, eles vão obedecer às seguintes restrições:

• Dois cortes têm no máximo um ponto de interseção e, se tiverem, é porque os cortes se cruzam naquele ponto;

• Três cortes não se interceptam num mesmo ponto;

• Dois cortes não se interceptam na borda da pizza;

• Um corte não intercepta um canto da pizza.

Dados os pontos de começo e término de cada corte, seu programa deve computar o número de pedaços resultantes dos cortes do Vô Giuseppe.";A primeira linha da entrada contém dois inteiros X e Y , (1 ≤ X, Y ≤ 109 ), representando as coordenadas (X, Y ) do canto superior direito da pizza. O canto inferior esquerdo tem sempre coordenadas (0, 0). A segunda linha contém dois inteiros H e V , (1 ≤ H, V ≤ 10​​​​​​​​​​​​​​5 ), indicando, respectivamente, o número de cortes que vão da esquerda para a direita, e o número de cortes que vão de baixo para cima. Cada uma das H linhas seguintes contém dois inteiros Y1 e Y2 definindo as ordenadas de encontro dos lados verticais da pizza com um corte que vai do lado esquerdo, na ordenada Y1, para o lado direito, na ordenada Y2. Cada uma das V linhas seguintes contém dois inteiros X1 e X2 definindo as abscissas de encontro dos lados horizontais da pizza com um corte que vai do lado inferior, na abscissa X1, para o lado superior, na abscissa X2.;Imprima uma linha contendo um inteiro representando o número de pedaços resultantes.;False;9 / 10;616;310;50.32%
2879;Desvendando Monty Hall;Iniciante;1;"No palco de um programa de auditório há três portas fechadas: porta 1, porta 2 e porta 3. Atrás de uma dessas portas há um carro, atrás de cada uma das outras duas portas há um bode. A produção do programa sorteia aleatoriamente a porta onde vai estar o carro, sem trapaça. Somente o apresentador do programa sabe onde está o carro. Ele pede para o jogador escolher uma das portas. Veja que agora, como só há um carro, atrás de pelo menos uma entre as duas portas que o jogador não escolheu, tem que haver um bode!

Portanto, o apresentador sempre pode fazer o seguinte: entre as duas portas que o jogador não escolheu, ele abre uma que tenha um bode, de modo que o jogador e os espectadores possam ver o bode. O apresentador, agora, pergunta ao jogador: “você quer trocar sua porta pela outra porta que ainda está fechada?”. E vantajoso trocar ou não? O jogador quer ficar com a porta que tem o carro, claro!

Paulinho viu uma demonstração rigorosa de que a probabilidade de o carro estar atrás da porta que o jogador escolheu inicialmente é 1/3 e a probabilidade de o carro estar atrás da outra porta, que ainda está fechada e que o jogador não escolheu inicialmente, é 2/3 e, portanto, a troca é vantajosa. Paulinho não se conforma, sua intuição lhe diz que tanto faz, que a probabilidade é 1/2 para ambas as portas ainda fechadas...

Neste problema, para acabar com a dúvida do Paulinho, vamos simular esse jogo milhares de vezes e contar quantas vezes o jogador ganhou o carro. Vamos supor que:

• O jogador sempre escolhe inicialmente a porta 1;

• O jogador sempre troca de porta, depois que o apresentador revela um bode abrindo uma das duas portas que não foram escolhidas inicialmente.

Nessas condições, em um jogo, dado o número da porta que contém o carro, veja que podemos saber exatamente se o jogador vai ganhar ou não o carro.";"A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 104 ), indicando o número de jogos na simulação. Cada uma das N linhas seguintes contém um inteiro: 1, 2 ou 3; representando o número da porta que contém o carro naquele jogo.";Seu programa deve produzir uma única linha, contendo um inteiro representando o número de vezes que o jogador ganhou o carro nessa simulação, supondo que ele sempre escolhe inicialmente a porta 1 e sempre troca de porta depois que o apresentador revela um bode abrindo uma das duas portas que não foram escolhidas inicialmente.;False;1 / 10;1783;1259;70.61%
2880;Enigma;Strings;4;"Dada uma configuração inicial, a máquina de criptografia alemã Enigma, da Segunda Guerra Mundial, substituía cada letra digitada no teclado por alguma outra letra. A substituição era bastante complexa, mas a máquina tinha uma vulnerabilidade: uma letra nunca seria substituída por ela mesma! Essa vulnerabilidade foi explorada por Alan Turing, que trabalhou na criptoanálise da Enigma durante a guerra. O objetivo era encontrar a configuração inicial da máquina usando a suposição de que a mensagem continha uma certa expressão usual da comunicação, como por exemplo a palavra ARMADA. Essas expressões eram chamadas de cribs. Se a mensagem cifrada era, por exemplo, FDMLCRDMRALF, o trabalho de testar as possíveis configurações da máquina era simplificado porque a palavra ARMADA, se estivesse nessa mensagem cifrada, só poderia estar em duas posições, ilustradas na tabela abaixo com uma seta. As demais cinco posições não poderiam corresponder ao crib ARMADA porque ao menos uma letra do crib, sublinhada na tabela abaixo, casa com sua correspondente na mensagem cifrada; como a Enigma nunca substituiria uma letra por ela própria, essas cinco posições poderiam ser descartadas nos testes.



Neste problema, dada uma mensagem cifrada e um crib, seu programa deve computar o número de posições possíveis para o crib na mensagem cifrada.";A primeira linha da entrada contém a mensagem cifrada, que é uma sequência de pelo menos uma letra e no máximo 104 letras. A segunda linha da entrada contém o crib, que é uma sequência de pelo menos uma letra e no máximo o mesmo número de letras da mensagem. Apenas as 26 letras maiúsculas, sem acentuação, aparecem na mensagem e no crib.;Imprima uma linha contendo um inteiro, indicando o número de posições possíveis para o crib na mensagem cifrada.;True;4 / 10;1571;656;41.76%
2881;Festival;Paradigmas;9;"Festivais de música deveriam ser pura diversão, porém alguns deles se tornam tão grandes a ponto de causar dor de cabeça para os frequentadores. O problema é que são tantas atrações boas tocando em tantos palcos que a simples tarefa de escolher quais shows assistir se torna complexa.

Para ajudar frequentadores de tais festivais, Fulano decidiu criar um aplicativo que, após avaliar as músicas ouvidas em seus serviços de streaming favoritos, sugere quais shows assistir de modo que não exista outra combinação de shows melhor de acordo com os critérios descritos a seguir:

• Para aproveitar a experiência ao máximo é importante assistir cada um dos shows escolhidos por completo;

• Ir no festival e não ver um dos palcos está fora de cogitação;

• Para garantir que a seleção dos artistas seja compatível com o usuário, contou-se quantas músicas de cada artista o usuário conhece por já ter ouvido-as nos serviços de streaming. O total de músicas conhecidas dos artistas escolhidos deve ser o maior possível.

Infelizmente a versão beta do aplicativo recebeu várias críticas, pois os usuários conseguiram pensar em seleções melhores que aquelas sugeridas. Sua tarefa nesse problema é ajudar Fulano e escrever um programa que, dadas as descrições dos shows acontecendo em cada palco, calcula a lista ideal para o usuário.

O tempo de deslocamento entre os palcos é ignorado; portanto, desde que não haja interseção entre os horários de quaisquer dois shows escolhidos considera-se que é possével assistir a todos por completo. Em particular, se um show acaba exatamente quando um outro começa, é possível assistir a ambos.";A primeira linha contém um número inteiro 1 ≤ N ≤ 10 representando o número de palcos. As N linhas seguintes descrevem os shows acontecendo em cada palco. A i-ésima delas é composta por um inteiro Mi ≥ 1, representando o número de shows marcados para o i-ésimo palco seguido por Mi descrições de shows. Cada descrição de show contém 3 inteiros ij , fj e oj (1 ≤ ij < fj ≤ 86400 e 1 ≤ oj ≤ 1000), representando respectivamente os horários de início e fim do show e o número de músicas do cantor se apresentando que foram previamente ouvidas pelo usuário. A soma dos Mi não excederá 1000.;Seu programa deve produzir uma única linha com um inteiro representando o total de músicas previamente ouvidas dos artistas escolhidos, ou −1 caso não haja solução válida.;False;9 / 10;569;188;33.04%
2882;Gasolina;Paradigmas;7;"Terminada a greve dos caminhoneiros, você e os demais especialistas em logística da Nlogônia agora têm a tarefa de planejar o reabastecimento dos postos da cidade. Para isso, foram coletadas informações sobre os estoques das R refinarias e sobre as demandas dos P postos de gasolina. Além disso, há restrições contratuais que fazem com que algumas refinarias não possam atender alguns postos; quando uma refinaria pode fornecer a um posto, sabe-se o menor tempo de percurso para transportar o combustível de um lugar ao outro.

A tarefa dos especialistas é minimizar o tempo de abastecimento de todos os postos, satisfazendo completamente suas demandas. As refinarias têm uma quantidade suficientemente grande de caminhões, de modo que é possível supor que cada caminhão precisará fazer no máximo uma viagem, de uma refinaria para um posto de gasolina. A capacidade de cada caminhão é maior do que a demanda de qualquer posto, mas pode ser necessário usar mais de uma refinaria para atender a demanda de um posto. Seu programa deve encontrar o tempo mínimo no qual  é possível abastecer totalmente todos os postos, respeitando os estoques das refinarias.";"A primeira linha da entrada contém três inteiros, P, R e C, respectivamente o número de postos, o número de refinarias e o número de pares de refinaria e posto cujo tempo de percurso será dado (1 ≤ P, R ≤ 1000 e 1 ≤ C ≤ 20000). A segunda linha contém P inteiros Di (1 ≤ Di ≤ 104 ), representando as demandas, em litros de gasolina, dos postos i = 1, 2, . . . , P, nessa ordem. A terceira linha contém R inteiros Ei (1 ≤ Ei ≤ 104 ), representando os estoques, em litros de gasolina, das refinarias i = 1, 2, . . . , R, nessa ordem. Finalmente, as últimas C linhas descrevem tempos de percurso, em minutos, entre postos e refinarias. Cada uma dessas linhas contém três inteiros, I, J e T (1 ≤ I ≤ P e 1 ≤ J ≤ R e 1 ≤ T ≤ 106 ), onde I é a identificação de um posto, J é a identificação de uma refinaria e T é o tempo do percurso de um caminhão da refinaria J ao posto I. Não haverá pares (J, I) repetidos. Nem todos os pares são informados; caso um par não seja informado, há restrições contratuais que impedem a refinaria de atender o posto.";Imprima um inteiro T que indica o tempo mínimo em minutos para que todas os postos sejam completamente abastecidos. Caso isso não seja possível, imprima −1.;False;7 / 10;199;74;37.19%
2883;Hipótese Policial;Grafos;8;"O sistema de transporte público da Nlogônia conta com uma rede expressa conectando os principais pontos turísticos do país. São usados N −1 trens-bala para conectar N atrações de modo que a partir de um dos pontos turísticos é possível alcançar qualquer outro ponto usando apenas essa rede expressa. Como em qualquer lugar do mundo, é comum que haja pichações nas estações de trem. O que chamou a atenção da polícia do país é o fato de que em cada uma das estações é possível encontrar exatamente uma letra pichada com um estilo específico. A hipótese é de que criminosos podem estar alterando as pichações como meio de comunicação e portanto decidiu-se criar um sistema capaz de monitorar as pichações e suas alterações. Dado um padrão P, a descrição das conexões entre as estações e as letras suspeitas em cada uma das estações, sua tarefa é escrever um programa capaz de lidar com as seguintes operações:


	1 u v: imprime quantas ocorrências do padrão P existem no caminho de u até v se olharmos para os caracteres associados a vértices consecutivos do caminho;
	2 u x: Altera a letra suspeita na estação u para x";A primeira linha contém dois inteiros N e Q (1 ≤ N, Q ≤ 105 ), representando o número de estações e a quantidade de operações que devem ser processadas. A segunda linha contém o padrão P monitorado (1 ≤ |P| ≤ 100). A terceira linha contém uma string S com N caracteres representando as letras inicialmente associadas a cada uma das estações. Cada uma das N − 1 linhas seguintes contém dois inteiros u e v indicando que existe um trem-bala entre as estações u e v. As Q linhas seguintes descrevem as operações que devem ser processadas conforme descrito acima.;Seu programa deve imprimir uma linha para cada operação do tipo 1 contendo um inteiro que representa o número de ocorrências do padrão P no caminho analisado.;False;8 / 10;51;12;23.53%
2884;Interruptores;Ad-Hoc;5;"No painel de controle de um grande anfiteatro existem N interruptores, numerados de 1 a N, que controlam as M lâmpadas do local, numeradas de 1 a M. Note que o número de interruptores e lâmpadas não é necessariamente o mesmo e isso acontece porque cada interruptor está associado a um conjunto de lâmpadas e não apenas a uma lâmpada. Quando um interruptor é acionado, o estado de cada uma das lâmpadas associadas a ele é invertido. Quer dizer, aquelas apagadas acendem e as acesas se apagam.

Algumas lâmpadas estão acesas inicialmente e o zelador do anfiteatro precisa apagar todas as lâmpadas. Ele começou tentando acionar interruptores aleatoriamente mas, como não estava conseguindo apagar todas as lâmpadas ao mesmo tempo, decidiu seguir uma seguinte estratégia fixa. Ele vai acionar os interruptores na sequência 1, 2, 3, . . . , N, 1, 2, 3, . . . ou seja, toda vez após acionar o interruptor de número N, ele recomeça a sequência a partir do interruptor 1. Ele pretende acionar interruptores, seguindo essa estratégia, até que todas as lâmpadas estejam apagadas ao mesmo tempo (momento em que ele para de acionar os interruptores). Será que essa estratégia vai funcionar?

Neste problema, dadas as lâmpadas acesas inicialmente e dados os conjuntos de lâmpadas que estão associados a cada interruptor, seu programa deve computar o número de vezes que o zelador vai acionar os interruptores. Caso a estratégia do zelador nunca apague todas as lâmpadas ao mesmo tempo, seu programa deve imprimir −1.";A primeira linha contém dois inteiros N e M (1 ≤ N, M ≤ 1000) representando, respectivamente, o número de interruptores e o número de lâmpadas. A segunda linha contém um inteiro L (1 ≤ L ≤ M) seguido por L inteiros distintos Xi (1 ≤ Xi ≤ M), representando as lâmpadas acesas inicialmente. Cada uma das N linhas seguintes contém um inteiro Ki (1 ≤ Ki ≤ M) seguido por Ki inteiros distintos Yi (1 ≤ Yi ≤ M), representando as lâmpadas associadas ao interruptor i (1 ≤ i ≤ N).;Se programa deve produzir uma única linha contendo um inteiro representando o número de vezes que o zelador vai acionar os interruptores, seguindo a estratégia descrita, até todas as lâmpadas estarem apagadas ao mesmo tempo. Caso isso nunca vá acontecer, imprima −1.;False;5 / 10;866;306;35.33%
2885;Juntando Capitais;Grafos;3;"Um reino longínquo possui N cidades, dentre as quais K são capitais. O rei Richard quer construir linhas de transmissão, cada uma delas ligando duas cidades. E preciso haver um caminho, ou seja, uma sequência de linhas de transmissão, entre qualquer par de capitais.
                Cada linha de transmissão possui um custo associado, que é a distância euclidiana entre as cidades que a linha de transmissão conecta. Como o rei é avarento, ele deseja que as linhas de transmissão sejam criadas de modo que o custo total (soma dos custos das linhas) seja o menor possível.
                A figura, na parte A, mostra um exemplo de reino com N = 10 cidades, sendo K = 4 capitais. O engenheiro chefe apresentou ao rei a solução mostrada na parte B, que minimiza de fato o custo total. Mas o rei não gostou de ver uma capital possuindo mais de uma linha de transmissão. Ele, então, determinou uma nova restrição: uma capital só pode estar ligada a uma outra cidade. Desse jeito, depois de trabalhar muito, o engenheiro chefe apresentou a nova solução, ilustrada na parte C da figura. Só que ele não tem certeza se essa solução é ótima e precisa da sua ajuda!
                
                Dadas as coordenadas das cidades, seu programa deve computar o custo total mínimo possível para construir linhas de transmissão de modo que todo par de capitais esteja ligado por um caminho e toda capital esteja ligada a apenas uma cidade.";A primeira linha da entrada contém dois inteiros, N e K, 4 ≤ N ≤ 100 e 3 ≤ K < min(10, N), indicando respectivamente o número de cidades e o número de capitais. As N linhas seguintes contêm, cada uma, dois inteiros X e Y , −1000 ≤ X, Y ≤ 1000, representando as coordenadas de uma cidade. As K primeiras cidades são as capitais. Não há duas cidades com as mesmas coordenadas.;Imprima uma linha contendo um número real, com 5 casas decimais, indicando o custo total mínimo para construir as linhas de transmissão, de acordo com as restrições acima.;True;3 / 10;75;23;30.67%
2886;Kepler;Matemática;10;"Neste estranho sistema planetário, N planetas seguem órbitas circulares ao redor de uma estrela que está nas coordenadas (0, 0) do sistema. A estrela está estritamente contida no interior de todos os círculos que definem as órbitas, mas o centro dessas órbitas não está necessariamente nas coordenadas (0, 0). As órbitas circulares estão em posição geral: se duas órbitas se interceptam, então elas se interceptam em dois pontos distintos; além disso, três órbitas não se interceptam em um ponto comum.
                O cientista João Kepler está interessado em testar uma nova teoria e, para isso, pediu sua ajuda para computar o número de pontos de interseção entre as órbitas, caso esse número seja menor que ou igual a 2N. Caso contrário, precisamos apenas saber que o número é maior do que 2N.";A primeira linha da entrada contém um inteiro N (2 ≤ N ≤ 150000), representando o número de órbitas. Cada uma das N linhas seguintes contém três números reais, com exatamente 3 dígitos decimais, X, Y (−25.0 ≤ X, Y ≤ 25.0) e R (1.0 ≤ R ≤ 200000.0), definindo as coordenadas do centro e o raio das órbitas.;Imprima uma linha contendo um inteiro, representando o número de pontos de interseção entre as órbitas, se esse número for menor ou igual a 2N. Caso contrário, imprima “greater”.;True;10 / 10;323;28;8.67%
2887;Linhas de Metrô;Grafos;8;"O sistema de metrô de uma grande cidade é formado por um conjunto de estações e por túneis que ligam alguns pares de estações. O sistema foi desenhado de forma que existe exatamente uma sequência de túneis ligando qualquer par de estações. As estações nas quais apenas um túnel chega são chamadas de terminais. Há várias linhas de trens que fazem viagens de ida e volta entre duas estações terminais, transitando pelo caminho único entre elas. A população está reclamando das linhas atuais e, por isso, o prefeito ordenou uma reformulação total das linhas. Como o sistema possui muitas estações, nós precisamos ajudar os engenheiros que estão tentando decidir quais pares de terminais passarão a definir uma linha.

A figura ilustra um sistema onde as estações terminais são mostradas como círculos preenchidos e as não-terminais são mostradas como círculos vazios. Na parte esquerda, veja que se o par (A,B) definir uma linha e o par (C,D) definir outra, elas não terão qualquer estação em comum. Mas, na parte direita, podemos ver que se os pares (E,F) e (G,H) definirem duas linhas, elas terão duas estações em comum.



Dada a descrição do sistema de túneis e uma sequência de Q consultas constituídas de dois pares de terminais, seu programa deve computar, para cada consulta, quantas estações em comum as linhas definidas pelos dois pares teriam.";A primeira linha da entrada contém dois inteiros N (5 ≤ N ≤ 105 ) e Q (1 ≤ Q ≤ 20000), representando respectivamente o número de estações e o número de consultas. As estações são numeradas de 1 até N. Cada uma das N −1 linhas seguintes contém dois inteiros distintos U e V , 1 ≤ U, V ≤ N, indicando que existe um túnel entre as estações U e V . Cada uma das Q linhas seguintes contém quatro inteiros distintos A, B, C e D (1 ≤ A, B, C, D ≤ N), representando uma consulta: as duas linhas de trem são definidas pelos pares (A, B) e (C, D).;Para cada consulta, seu programa deve imprimir uma linha contendo um inteiro representando quantas estações em comum teriam as duas linhas de trem definidas pela consulta.;True;8 / 10;368;128;34.78%
2888;Modificando SAT;Paradigmas;6;"O problema da Satisfatibilidade Booleana (conhecido como SAT) consiste em decidir, dada uma fórmula booleana na forma normal conjuntiva, se existe alguma atribuição de valores “verdadeiro” ou “falso” a suas variáveis de forma que a fórmula inteira seja verdadeira.

Na forma normal conjuntiva, a fórmula é dada em um formato bem específico. Em primeiro lugar, as únicas operações lógicas utilizadas são o “E”, o “OU” e a negação, denotados por \(\wedge\), \(\vee\) e \(\neg\), respectivamente. Uma fórmula é formada através da operação “E” de diferentes partes, chamadas cláusulas, C1, . . . , Cm. Desta forma, uma fórmula \(\varphi\) terá o seguinte formato:

\(\varphi = C_1 \wedge ... \wedge C_m.\)

Aéem disso, cada uma das cláusulas também possui um formato específico. Em particular, cada uma das cláusulas é composta pelo “OU” de literais, que são variáveis ou negações de variáveis, cercada por parênteses. Assim, (x1 \(\vee\) \(\neg\)x2) é uma cláusula válida, enquanto (x1 \(\wedge\) \(\neg\)x2) não o seria, por usar o operador “E”. Um exemplo completo de fórmula seria:

\(\varphi = (x_1 \vee x_2 \vee x_3) \wedge (\neg x_1) \wedge (x_1 \vee \neg x_2 \vee x_3) \wedge (x_2 \vee \neg x_3)\)

Uma variação do problema SAT é conhecida como k-SAT, onde cada cláusula possui no máximo k literais. A fórmula acima seria um exemplo de instância do problema 3-SAT, mas não de 2-SAT. Note que, em todos estes problemas, para uma fórmula ser verdadeira, cada uma das cláusulas deve ser verdadeira e, portanto, pelo menos um dos literais (da forma xi ou \(\neg\)xi) de cada cláusula deve ser verdadeiro.

Uma atribuição é um modo de definir as variáveis como verdadeiras ou falsas. Neste problema estamos interessados em numa variação do problema 3-SAT, no qual uma atribuição válida deve ter exatamente 1 ou exatamente 3 literais verdadeiros em cada cláusula. Dada uma fórmula, sua tarefa é decidir se existe uma atribuição válida, levando em conta tal restrição extra. Caso haja uma atribuição válida, você deve imprimir a lexicograficamente máxima. A ordem lexicográfica é definida do seguinte modo: dadas duas atribuições diferentes, podemos compará-las olhando para a variável de menor índice que difere nas duas atribuições; das duas, a maior atribuição é a que dá valor verdadeiro para tal variável.";"A primeira linha da entrada contém dois inteiros M e N (1 ≤ M, N ≤ 2000), descrevendo o número de cláusulas e variáveis, respectivamente. Em seguida, serão fornecidas M linhas, cada uma descrevendo uma cláusula (veja o exemplo para detalhes do formato). Cláusulas consecutivas são separadas pela string “ and”. Cada cláusula contém no máximo 3 literais. As variáveis são denotadas por “x” seguido de um número entre 1 e N. Não haverá dois espaços consecutivos, nem haverá espaço no final das linhas.

O primeiro exemplo descreve a fórmula \(\varphi\) acima.";Seu programa deve imprimir uma única linha contendo N caracteres correspondentes a atribuição válida lexicograficamente máxima, ou impossible caso não haja atribuição válida. O i-ésimo caractere deve ser T se a variável é verdadeira na atribuição e F caso contrário.;False;6 / 10;29;13;44.83%
2889;O Tasco é Sempre Vice!;Estruturas e Bibliotecas;8;É bem conhecida a provocação que afirma que o Tasco, um dos melhores times de futebol do Brasil, é sempre vice-campeão das competições nas quais participa. Embora isso seja um elogio (estar em tal elevada colocação com regularidade sem dúvida é um mérito!), a mania do brasileiro de valorizar apenas a primeira colocação dá o efeito de provocação a esta afirmativa. É claro que isto não passa de mais uma das incontáveis brincadeiras que fazem parte do folclore futebolístico, mas Eurico, um fanático pelo Tasco, decidiu verificar se há algum fundamento nela de uma vez por todas, analisando o registro histórico de todas as competições em que o Tasco participou.;"A primeira linha da entrada é composta do inteiro 2 ≤ N ≤ 106 que constitui o número de times. Cada time recebe um código distinto entre 1 e N, sendo o código 1 reservado para o Tasco. Em seguida, há dados de vários campeonatos. A primeira linha de cada campeonato é formada pelo inteiro 1 ≤ M ≤ 105, que representa o número de partidas que ocorreram em tal campeonato. Cada uma das M linhas seguintes possui os dados de uma partida, no formato ""Time1 Placar1 Time2 Placar2"", onde 1 ≤ Time1,Time2 ≤ N são os códigos dos times que disputaram a partida e 0 ≤ Placar1, Placar2 ≤ 100 são seus respectivos números de gols. A pontuação de cada time em um campeonato é a soma dos pontos obtidos em cada partida do campeonato. Em uma partida, a pontuação para o time que consegue a vitória é de 3 pontos, o empate é de 1 ponto e a derrota é de 0 pontos. Um time fica à frente de outro no campeonato se possui mais pontos ou, no caso de mesma pontuação, se possui uma maior quantidade de gols ou, em caso de mesma quantidade de gols, se seu código é menor do que o do outro. O fim da entrada de campeonatos se caracteriza pela leitura de um valor de M igual a 0.";"Em uma única linha, deve-se escrever ""Y"" se de fato o Tasco foi um dos times que foram mais vezes vice-campeão considerando-se todos os campeonatos, ou ""N"" caso contrário.";False;8 / 10;265;57;21.51%
2890;Colorindo Tetraedros;Matemática;1;"Um designer inventou uma marca para uma empresa em forma de tetraedro. Ele tem várias cores disponíveis para pintar e quer saber de quantas  maneiras  diferentes  o  tetraedro  pode  ser  colorido usando  qualquer combinação  de  cores  nas  faces  do  mesmo.  Note que, se mediante rotações convenientes,  a coloração   de  dois  tetraedros coincidir,   então  trata-se  da  mesma coloração.

Ajude esse designer a fazer esse cálculo.
 ";Cada linha de entrada contém um inteiro N, 1 ≤  N  ≤  104, o número de cores disponíveis. A entrada termina com um valor 0, que não deve ser processado.;Para cada entrada, imprimir o  número de  colorações distintas do tetraedro,  com  o número de cores dado. Como o resultado pode ser muito grande, apresentá-lo  como o resto da divisão por 1000007.;False;1 / 10;166;66;39.76%
2891;Um Problema com Final Feliz;Geometria Computacional;5;"Paul Erdős foi um notável matemático húngaro que publicou 1475 artigos em diversas áreas. Ele deu o nome de Teorema do Final Feliz ao seguinte teorema provado por ele e alguns amigos: 

""Dados 5 pontos no plano, não colineares três a três, quatro deles sempre formam um quadrilátero convexo"".

O nome do teorema deve-se ao fato de que o casal amigo que trabalhou no mesmo acabou se casando. Muitos matemáticos trabalharam na generalização desse problema, o que ainda não foi conseguido.Neste problema você vai constatar o teorema e, esperamos, com total felicidade! São dados 5 pontos, não colineares três a três, e você deve encontrar a área do maior quadrilátero convexo envolvendo 4 dos pontos dados.
 ";Cada linha de entrada contém 10 inteiros pares X1, Y1, X2, Y2, X3, Y3, X4, Y4, X5, Y5, 0  ≤  Xi, Yi   ≤  103, 1  ≤  i  ≤  5, onde cada  par   Xi, Yi  representa as coordenadas de  um dos 5 pontos. A entrada termina com 10 valores 0, que não devem ser processados.;Para cada entrada, imprima a área do maior quadrilátero convexo que pode ser formado com 4 dos 5 pontos dados.;False;5 / 10;56;29;51.79%
2892;Treino No Velódromo;Matemática;9;"Três ciclistas estão treinando no velódromo para a próxima Olimpíada.  Eles dão a partida juntos e fazem milhares de voltas a cada dia, de forma regular. Cada um leva dado tempo para completar a volta e corre sempre com a mesma velocidade.
O técnico anotou o tempo de uma volta para os dois primeiros ciclistas e só sabe, em relação ao terceiro o tempo que leva para os três se alinharem novamente na linha de partida.

Você vai ajudar o técnico calculando todos os possíveis tempos que o terceiro ciclista leva para uma volta.";Cada entrada contém três inteiros: T,  1 ≤  T ≤  106, o tempo que os ciclistas levam para se encontrar novamente na linha de partida,   A, B,  1 ≤  A, B ≤  102, os tempos respectivos que os ciclistas 1 e 2 levam para dar uma volta. A entrada termina com 0 0 0, que não devem ser processados.;Para cada entrada, imprimir, de forma ordenada, os possíveis tempos que o terceiro ciclista leva para completar uma volta, de forma a ocorrer a coincidência mencionada.;False;9 / 10;186;33;17.74%
2893;Fibonac^{k}i;Estruturas e Bibliotecas;3;"Néchi é um garoto muito esperto. Ele percebeu logo nos primeiros anos de sua vida acadêmica que é uma boa ideia procurar padrões contidos na descrição dos problemas para memorizá-los. É curioso observar a maneira como ele memorizou a sequência de Fibonacci; ele pensou assim: seja k o número de letras ""c"" contidas em ""Fibonacci"". Inicie a sequência por 0,1,...,k-1 e obtenha o próximo elemento da sequência pela soma dos k elementos imediatamente anteriores. Elabore um programa para computar um elemento arbitrário da sequência de Fibonacki, como Néchi gosta de chamar o problema.";A primeira linha da entrada é composta do inteiro 1 ≤ T ≤ 10 que constitui o número de casos de teste. Cada uma das próximas T linhas consistem dos casos de teste, que vem um por linha. Um caso de teste é composto por um inteiro 2 ≤ k ≤ 105 seguido de um inteiro 1 ≤ N ≤ 2×105.;Deve-se escrever uma linha por caso de teste com o valor do resto da divisão do N-ésimo elemento da sequência de Fibonacki por 1000007.;False;3 / 10;163;60;36.81%
2894;Vírus;Grafos;7;"Estamos em um país da África, onde um vírus perigosíssimo acaba de chegar em uma grande cidade. O país vai ter que tomar medidas extremas para que ele não se propague. A única saída será bloquear estradas que chegam nas cidades infectadas. Mas o país só tem dinheiro para bloquear um único trecho de estrada. Nesse país existe sempre pelo menos um caminho entre duas cidades. A Vigilância Sanitária quer descobrir se existe um trecho de estrada que, quando bloqueado, separa o resto do país da área infectada.

Você vai ajudar, fazendo um programa para identificar se existe um tal trecho  e indicar qual o número máximo de cidades que podem ser isoladas do vírus. Observe que pode haver mais de um trecho de estrada entre duas cidades.";A primeira linha da entrada é um inteiro T  (1 ≤ T ≤ 100) que indica quantos serão os casos de teste. A seguir são descritos T testes. Cada teste é descrito em várias linhas. A primeira contém 3 inteiros: N (1 ≤ N ≤ 1000), o número de cidades do país, M (N-1 ≤ M ≤ 10000), o número de interligações entre as cidades e   C (1 ≤ C ≤ N), o número da cidade infectada. A seguir vêm M linhas com 2 inteiros indicando todos os pares de cidades interligadas.  As cidades são numeradas de 1 a N.;Para cada caso de teste imprima o número máximo de cidades que podem ser isoladas com o bloqueio de um trecho de estrada. Se não houver um trecho com as características procuradas, responda 0.;False;7 / 10;119;32;26.89%
2895;Velhas Balanças;Paradigmas;7;"Velhas balanças de dois pratos ainda podem ser encontradas em feiras, laboratórios e museus. Em um dos pratos coloca-se o objeto a ser pesado e, no outro, os pesos, até equilibrar a balança. Somam-se os pesos e obtém-se o peso do objeto. Mas também podem ser colocados alguns pesos junto com o objetoa ser pesado e, nesse caso, esses pesos têm que ser subtaidos da soma de pesos do lado oposto. Por exemplo, um objeto de peso 15 pode ser pesado colocando, do outro lado da balança, os pesos 8, 4, 2, 1, pois 8+4+2+1 = 15. Mas também pode ser pesado colocando-se o peso 16 do lado oposto e o peso 1 junto com o objeto, pois 16-1 = 15.
Neste problema, os pesos são todos as potências de 2 e há somente um peso de cada valor. Você deve descobrir o esquema que pesa dado objeto com peso inteiro, usando o menor número de pesos do tipo descrito.";A primeira linha de entrada contém inteiro T (1 ≤ T ≤ 10000) , que indica o número de casos de teste. Em cada uma das T linhas a seguir vem um inteiro N (1 ≤ N ≤ 2048), indicando o peso a ser usado.;Para cada caso de teste imprima o número mínimo de pesos necessário para pesar o objeto dado.;False;7 / 10;154;54;35.06%
2896;Aproveite a Oferta;Iniciante;2;"Um supermercado está fazendo uma promoção de venda de refrigerantes. Se um dia você comprar refrigerantes e levar os cascos vazios no dia seguinte, ela troca cada conjunto de K garrafas vazias  por uma garrafa cheia. Um cliente quer aproveitar ao máximo essa oferta e por isso comprou várias garrafas no primeiro dia da promoção. Agora ele quer saber quantas garrafas terá ao final do segundo dia da promoção, se usá-la ao máximo.

Faça um programa para calcular isso.";A primeira linha de entrada contém inteiro T (1 ≤ T ≤ 10000) , que indica o número de casos de teste. Em cada uma das T linhas a seguir vêm dois inteiros N e K (1 ≤ K, N ≤ 10000),  respectivamente o número de refrigerantes comprados e o número de garrafas vazias para ganhar uma cheia.;Para cada caso de teste imprima o número de garrafas que o cliente terá no segundo dia, se aproveitar ao máximo a oferta.;False;2 / 10;1581;1071;67.74%
2897;Histórico de Comandos;Ad-Hoc;8;"Uma interface por linha de comando (ILC) é um dos tipos de interface humano-computador mais antigos que existem. Uma ILC permite a interação com o software através de um interpretador de comandos, sendo normalmente acessível em um terminal (ou janela) de texto. A vantagem de um interpretador de comandos é que ele permite que o usuário opere o sistema usando apenas o teclado. Ainda hoje em dia, em que estamos acostumados com interfaces gráficas sofisticadas, muitos aplicativos e sistemas operacionais incluem algum tipo de interface por linha de comando, e muitos usuários ainda preferem usá-la para grande parte das tarefas. Um dos recursos mais úteis de um interpretador de comandos é o histórico de comandos. Quando um comando é digitado e executado, ele é colocado no histórico de comandos do terminal. O comando pode ser exibido novamente no terminal apertando a tecla ‘↑’; a tecla Enter executa o comando novamente quando o comando está sendo exibido no terminal. Todos os comandos executados são guardados no histórico: pressionar a tecla ‘↑’ duas vezes exibe o penúltimo comando executado, pressioná-la três vezes exibe o antepenúltimo comando, e assim sucessivamente. Por exemplo, se o histórico inicial é (A, B, C, D), para repetir o comando C basta pressionar duas vezes a tecla ‘↑’. O histórico será então atualizado para (A, B, C, D, C). Nesse ponto, para repetir o comando A será necessário pressionar cinco vezes a tecla ‘↑’; o histórico será atualizado para (A, B, C, D, C, A). Nesse ponto, para repetir mais uma vez o comando A basta pressionar uma vez a tecla ‘↑’; o histórico será atualizado para (A, B, C, D, C, A, A). Leandro é administrador de sistemas e usa frequentemente o interpretador de comandos para gerenciar remotamente os servidores que administra. Em geral, ele precisa apenas repetir comandos que já havia digitado antes. Enquanto estava trabalhando em um servidor, ele teve uma curiosidade: quantas vezes ele precisa pressionar a tecla ‘↑’ para executar uma determinada sequência de comandos? Ele sabe quais são as posições no histórico dos comandos que ele necessita executar, mas não sabe resolver esse problema. Por isso, pediu que você fizesse um programa que respondesse à pergunta dele.";"A entrada é composta de vários casos de teste. A primeira linha de cada caso de teste contém um número inteiro N, indicando o número de comandos que Leandro deseja executar (1 ≤ N ≤ 1.000). A segunda linha de um caso de teste contém N inteiros P1, P2, . . . , PN , que indicam as posições dos comandos no histórico (1 ≤ Pi ≤ 1.000.000) no momento inicial, na ordem em que os comandos devem ser executados. Ou seja, o primeiro comando que deve ser executado está inicialmente na posição P1 do histórico; depois deve ser executado o comando que está inicialmente na posição P2 no histórico, e assim por diante, até PN , que é a posição inicial do último comando que deve ser executado. Note que pode haver Pi = Pj . As posições são dadas em função do número de vezes que a tecla ‘↑’ deve ser pressionada: um comando na posição 5 necessita que a tecla ‘↑’ seja pressionada cinco vezes antes de aparecer no terminal (note que à medida que comandos vão sendo executados, a posição de um dado comando no histórico pode mudar). O final da entrada é indicado por N = 0.";Para cada caso de teste, seu programa deve imprimir apenas uma linha, contendo o número de vezes que Leandro precisa pressionar a tecla ‘↑’ para executar todos os comandos.;False;8 / 10;111;34;30.63%
2898;Olimpíadas;Ad-Hoc;1;"Tumbólia é um pequeno país ao leste da América do Sul (ou ao sul da América do Leste) que irá participar dos Jogos Olímpicos pela primeira vez na sua história. Apesar de sua delegação ser muito pequena comparada ao total de atletas que estarão em Pequim (as estimativas oficiais são de mais de dez mil atletas), a participação será fundamental para a imagem e para o turismo de Tumbólia. Após selecionar os atletas, o Comitê Olímpico Tumboliano (COT) precisa comprar as passagens para eles. A fim de economizar dinheiro, o COT decidiu comprar apenas passagens da Air Rock. No entanto, muitas das passagens da Air Rock já foram vendidas, uma vez que muitos tumbolianos desejam assistir aos Jogos. Sendo assim, o COT deverá comprar passagens de acordo com os assentos vagos em cada vôo. Todos os voos da Air Rock partem diariamente antes do meio-dia e chegam após o meio-dia; por isso, um atleta pode tomar apenas um avião por dia. A Air Rock providenciou uma lista contendo todos os voos operados por ela e o número de assentos vagos em cada um (curiosamente, o número de assentos livres em um mesmo trecho é igual todos os dias). O COT verificou que realmente é possível ir de Tumbólia para Pequim usando apenas voos da Air Rock mas, mesmo assim, o COT está tendo dificuldades para planejar a viagem de seus atletas. Por isso, o COT pediu para você escrever um programa que, dada a lista de voos da Air Rock, determina a menor quantidade de dias necessária para que todos os atletas cheguem em Pequim.";"A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém três inteiros N, M e A indicando respectivamente a quantidade de aeroportos em que a Air Rock opera (2 ≤ N ≤ 50), a quantidade de voos em que há assentos vagos (1 ≤ M ≤ 2.450) e quantos atletas a delegação tumboliana tem (1 ≤ A ≤ 50). Cada uma das M linhas seguintes contém uma descrição de voo com três inteiros O, D e S que indicam respectivamente o aeroporto de origem (1 ≤ O ≤ N), o aeroporto de destino (1 ≤ D ≤ N e O 6= D) e a quantidade de assentos vagos naquele voo (1 ≤ S ≤ 50). Os aeroportos são numerados de 1 a N; o Aeroporto Internacional de Tumbólia é o aeroporto 1, e o Aeroporto Internacional de Pequim ´e o aeroporto N. A existência de um voo de A para B não implica a existência de um voo de B para A (mas sempre há no máximo um voo de um aeroporto para outro em cada direção). O final da entrada é indicado por N = M = A = 0.";Para cada caso de teste da entrada seu programa deve produzir uma linha na saída contendo um inteiro, indicando a quantidade mínima de dias necessária para que todos os atletas tumbolianos cheguem em Pequim (alguns atletas podem chegar depois de outros, e eles não precisam chegar na mesma ordem em que partiram).;False;1 / 10;8;2;25.00%
2899;Série de Tubos;Ad-Hoc;6;"O ano é 2010. O espetacular resultado de um projeto ultra-secreto, iniciado três anos antes por um grupo de pesquisadores da SBC (Soluções Brasileiras em Cabeamento) está prestes a ser divulgado: a SBC conseguiu a proeza de transportar matéria através de cabos de fibra ótica! A pesquisa contraria a famosa e polêmica frase do ex-senador e atual presidente dos EUA, que na época do início da pesquisa, há três anos, afirmara que “a internet não é como um caminhão de carga, em que você despeja o que quiser; a internet na verdade é uma série de tubos”. Com isso, a SBC, que atualmente aluga a sua rede de cabos para uma operadora de TV paga, pensa em mudar de negócio e iniciar-se na atividade de transporte de carga — apesar de a tecnologia desenvolvida servir também para o transporte de seres vivos, há dificuldades políticas na homologação desse meio de transporte para seres humanos. A rede de fibra ótica da SBC cobre todas as capitais do país. A rede é composta por ramos de fibra ótica e concentradores. Há um concentrador em cada capital, e um ramo de fibra ótica conecta diretamente um par de concentradores. Nem todo concentrador está conectado diretamente por um ramo de fibra a todos os outros concentradores, mas a rede é conexa. Ou seja, a partir de um dado concentrador existe uma sequência de ramos e concentradores que permite que uma informação gerada em qualquer um dos concentradores pode ser enviada a qualquer outro concentrador da rede. Para comunicação de dados, é normal que um ramo de fibra ótica possa ser utilizado para enviar mensagens nos dois sentidos. A tecnologia desenvolvida, no entanto, tem uma peculiaridade: depois que um ramo de fibra ótica é utilizado para transportar matéria em uma direção, a fibra ótica guarda uma memória desse fato, e a partir de então esse ramo somente pode ser utilizado para transportar matéria naquela direção. Concentradores não são afetados por essa memória de direção. O grupo de pesquisa da SBC é muito bom em física, mas muito fraco em computação. Por isso, você foi contratado para determinar se a rede de fibra ótica existente poderá ser utilizada pela SBC para transportar carga entre qualquer par de capitais, mesmo considerando a restrição de memória de sentido dos ramos de fibra ótica.";A primeira linha de cada caso de teste contém dois inteiros N e M separados por um espaço em branco, que representam, respectivamente, a quantidade de capitais (2 ≤ N ≤ 1.000) e a quantidade de ramos de fibra ótica existentes (1 ≤ M ≤ 50.000). As capitais são numeradas de 1 a N. Cada uma das M linhas seguintes de um caso de teste contém dois inteiros A e B (1 ≤ A, B ≤ N, A 6= B) separados por um espaço em branco, indicando que existe um ramo de fibra ligando a capital A à capital B. Note que para comunicação de dados o ramo descrito pode ser utilizado para enviar mensagens tanto de A para B quanto de B para A, mas para transferência de matéria ele poderá ser utilizado em apenas uma direção. Há no máximo um único ramo de fibra ligando um par de capitais. O final da entrada é indicado por N = M = 0.;Para cada caso de teste da entrada seu programa deve imprimir uma única linha, contendo a letra ‘S’ caso seja possível utilizar a rede existente conforme especificado, ou a letra ‘N’ caso contrário.;False;6 / 10;41;14;34.15%
2900;Jogo de Varetas;Ad-Hoc;8;Há muitos jogos divertidos que usam pequenas varetas coloridas. A variante usada neste problema envolve a construção de retângulos. O jogo consiste em, dado um conjunto de varetas de comprimentos variados, desenhar retângulos no chão, utilizando as varetas como lados dos retângulos, sendo que cada vareta pode ser utilizada em apenas um retângulo, e cada lado de um retângulo é formado por uma única vareta. Nesse jogo, duas crianças recebem dois conjuntos iguais de varetas. Ganha o jogo a criança que desenhar o maior número de retângulos com o conjunto de varetas. Dado um conjunto de varetas de comprimentos inteiros, você deve escrever um programa para determinar o maior número de retângulos que é possível desenhar.;A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um inteiro N que indica o número de diferentes comprimentos de varetas (1 ≤ N ≤ 1.000) no conjunto. Cada uma das N linhas seguintes contém dois números inteiros Ci e Vi , representando respectivamente um comprimento (1 ≤ Ci ≤ 10.000) e o número de varetas com esse comprimento (1 ≤ Vi ≤ 1.000). Cada comprimento de vareta aparece no máximo uma vez em um conjunto de teste (ou seja, os valores Ci são distintos). O final da entrada é indicado por N = 0.;Para cada caso de teste da entrada seu programa deve produzir uma única linha na saída, contendo um número inteiro, indicando o número máximo de retângulos que podem ser formados com o conjunto de varetas dado.;False;8 / 10;209;63;30.14%
2901;Vôlei Marciano;Ad-Hoc;6;"Assim como na Terra, o vôlei é um esporte muito popular em Marte; as regras lá são as mesmas do vôlei terrestre — os times não devem deixar a bola tocar na sua metade da quadra — mas há uma importante diferença: ao contrário do vôlei terrestre, lá as quadras não são necessariamente retangulares; elas podem ser polígonos quaisquer, desde que seus lados sejam paralelos aos eixos coordenados. Assim como no vôlei terrestre, os lances polêmicos são aqueles em que a bola cai muito próxima à linha da quadra. Para evitar discussões, todos os jogos de vôlei marciano são acompanhados por juízes de linha. A função deles é observar a bola quando ela cai próxima a uma das linhas e dizer se ela caiu dentro ou fora da quadra. Quando um juiz está alinhado com várias linhas da quadra, ele pode observar todas elas ao mesmo tempo (no conjunto de linhas sob responsabilidade de um mesmo juiz pode haver até linhas perpendiculares entre si). No entanto, para evitar acidentes, a Federação Intergaláctica de Vôlei Marciano decretou as seguintes normas de segurança:

• os juízes devem ficar parados durante o jogo;

• os juízes não podem ficar dentro da quadra, nem mesmo sobre a sua linha. A figura abaixo ilustra três formatos de quadras possíveis, mostrando uma alocação mínima de juízes para cada uma delas; a quadra (a) necessita de quatro juízes, a quadra (b) necessita de sete juízes, e a quadra (c) necessita de seis juízes.



Você deve escrever um programa que, dado o formato da quadra, determina o número mínimo de juízes de linha necessários para que todas as linhas da quadra sejam acompanhadas por pelo menos um juiz.";A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um inteiro par N, que indica o número de lados da quadra de vôlei (4 ≤ N ≤ 100). Cada uma das N linhas seguintes contém dois números inteiros Xi e Yi , representando as coordenadas de um dos vértices da quadra (−1.000.000.000 ≤ Xi , Yi ≤ 1.000.000.000). As coordenadas são dadas em ordem, de modo que (Xi , Yi) forma um lado da quadra com (Xi+1, Yi+1), para 1 ≤ i < N, e (XN , YN ) forma um lado com (X1, Y1). Lados consecutivos da quadra são sempre perpendiculares, e o polígono descrito na entrada é sempre um polígono simples. O final da entrada é indicado por N = 0.;Para cada caso de teste da entrada seu programa deve produzir uma única linha na saída, contendo um número inteiro, indicando o menor número de juízes de linha necessários.;True;6 / 10;38;3;7.89%
2902;Rouba Monte;Ad-Hoc;2;"Um dos jogos de cartas mais divertidos para crianças pequenas, pela simplicidade, é RoubaMonte. O jogo utiliza um ou mais baralhos normais e tem regras muito simples. Cartas são distinguidas apenas pelo valor (ás, dois, três, . . .), ou seja, os naipes das cartas não são considerados (por exemplo, ás de paus e ás de ouro têm o mesmo valor). Inicialmente as cartas são embaralhadas e colocadas em uma pilha na mesa de jogo, chamada de pilha de compra, com face voltada para baixo. Durante o jogo, cada jogador mantém um monte de cartas, com face voltada para cima; em um dado momento o monte de um jogador pode conter zero ou mais cartas. No início do jogo, todos os montes dos jogadores têm zero cartas. Ao lado da pilha de compras encontra-se uma área denomindada de área de descarte, inicialmente vazia, e todas as cartas colocadas na área de descarte são colocadas lado a lado com a face para cima (ou seja, não são empilhadas). Os jogadores, dispostos em um círculo ao redor da mesa de jogo, jogam em sequência, em sentido horário. As jogadas prosseguem da seguinte forma:

• O jogador que tem a vez de jogar retira a carta de cima da pilha de compras e a mostra aos outros jogadores; vamos chamar essa carta de carta da vez.

• Se a carta da vez for igual a alguma carta presente na área de descarte, o jogador retira essa carta da área de descarte colocando-a, juntamente com a carta da vez, no topo de seu monte, com as faces voltada para cima, e continua a jogada (ou seja, retira outra carta da pilha de compras e repete o processo).

• Se a carta da vez for igual à carta de cima de um monte de um outro jogador, o jogador “rouba” esse monte, empilhando-o em seu próprio monte, coloca a carta da vez no topo do seu monte, face para cima, e continua a jogada.

• Se a carta da vez for igual à carta no topo de seu próprio monte, o jogador coloca a carta da vez no topo de seu próprio monte, com a face para cima, e continua a jogada.

• Se a carta da vez for diferente das cartas da área de descarte e das cartas nos topos dos montes, o jogador a coloca na área de descarte, face para cima, e a jogada se encerra (ou seja, o próximo jogador efetua a sua jogada). Note que esse é o único caso em que o jogador não continua a jogada. O jogo termina quando não há mais cartas na pilha de compras. O jogador que tiver o maior monte (o monte contendo o maior número de cartas) ganha o jogo. Se houver empate, todos os jogadores com o monte contendo o maior número de cartas ganham o jogo.";A entrada é composta de vários casos de teste. A primeira linha de um caso de teste contém dois inteiros N e J, representando respectivamente o número de cartas no baralho (2 ≤ N ≤ 10.000) e o número de jogadores (2 ≤ J ≤ 20 e J ≤ N). As cartas do baralho são representadas por números inteiros de 1 a 13 e os jogadores são identificados por inteiros de 1 a J. O primeiro jogador a jogar é o de número 1, seguido no jogador de número 2, . . ., seguido pelo jogador de número J, seguido pelo jogador de número 1, seguido do jogador de número 2, e assim por diante enquanto houver cartas na pilha de compras. A segunda linha de um caso de teste contém N inteiros entre 1 e 13, separados por um espaço em branco, representando as cartas na pilha de compras. As cartas são retiradas da pilha de compras na ordem em que aparecem na entrada. O final da entrada é indicado por uma linha com N = J = 0.;Para cada caso de teste seu programa deve imprimir uma linha, contendo o número de cartas do monte do jogador ou jogadores que ganharam a partida, seguido de um espaço em branco, seguido do(s) identificador(es) dos jogadores que ganharam a partida. Se há mais de um jogador vencedor imprima os identificadores dos jogadores em ordem crescente, separados por um espaço em branco.;False;2 / 10;105;38;36.19%
2916;A Nota;Estruturas e Bibliotecas;9;Rafael está se preparando para o vestibular mas ele não sabe qual é a nota mínima que ele terá que tirar para ser selecionado para o curso de Ciência da Computação, então pediu sua ajuda, já que ele supõe que você já tem experiência com programação. Será dado a você um inteiro N representando a quantidade de notas e um valor K. Em seguida você terá um conjunto de N notas. Sua tarefa é determinar qual a soma de todas as K-ésima maiores notas deste conjunto. Este valor irá corresponder a nota que Rafael precisa..;A entrada é composta por vários casos de teste e termina com EOF, na primeira linha da entrada possui dois inteiros N e K, N <= 10⁶,K > 0, K <= N. Na próxima linhas haverá N valores representando as nota NI,NI <= 10⁵;A saída será composta por um número representando a nota que Rafael precisa para ser aprovado no vestibular, imprima resposta como modulo de 10⁹+7.;False;9 / 10;1817;243;13.37%
2917;Barbante;Paradigmas;6;João e Cleobaldo cortaram um barbante branco com M metros e traçaram uma linha reta da esquerda para a direita. A cada 10 centímetros do barbante foi colado um número e os dois gostariam de saber qual seria a maior soma contínua entre os números colados no barbante, porém essa resposta poderia ser maior se em vez de uma linha reta fosse um círculo. Eles concordaram que eles vão pegar a ponta do barbante do lado direito e fazer um nó com a ponta esquerda do barbante, agora este barbante é círculo não é mais uma linha reta, e agora eles querem saber qual é a soma máxima contínua entre os elementos. Tudo o que se sabe é que se pode ser usado no máximo (M*10) números contínuos escritos no barbante e obter a soma máxima, será que você consegue ajudá-los. Depois que juntaram as pontas do barbante o elemento que estava mais a esquerda agora é um elemento continuo do elemento que estava mais a direita.;A entrada possui vários casos de testes e termina com EOF. Na primeira linha há um inteiro M que representa a quantidade de metros do barbante, M <= 105, seguido por M*10 inteiros MI, que estarão colados nos barbantes, seguindo a ordem da esquerda para a direita. -105 < MI <= 105.;A saída representa respectivamente a soma máxima contínua como descrito acima. A soma sempre será maior que 0 e menor que 107.;False;6 / 10;106;44;41.51%
2918;Dígitos Inteligentes;Paradigmas;9;Dígitos inteligentes são os novos tipos de dígitos criados por pesquisadores de Chapecó, eles perceberam que a soma dos dígitos no intervalo de 1 a 5 (1,2,3,4,5) era 15, para números pequenos eles conseguem resolver, mas para números grandes eles não conseguem chegar a uma solução eficiente e por isso pediram a sua ajuda. Será que você pode ajudá-los, dado dois inteiros L e R, qual é soma de todos os dígitos neste intervalo. Para variar imprima a resposta como módulo de 10⁹+7.;A entrada é composta por vários casos de teste e termina com EOF, cada caso de teste possui dois inteiros L e R, L,R <= 10¹⁰. L <= R. L,R > 0.;A saída representa respectivamente a soma dos dígitos no intervalo L, R.;False;9 / 10;135;29;21.48%
2919;Melhor Ordem;Paradigmas;9;O colégio de Nlognônia descobriu que você irá participar de uma maratona de programação então pediram a sua ajuda na nova brincadeira que eles inventaram. Será dado a você uma lista com N números inteiros e distintos, você terá que escolher NI valores e inserir em uma nova lista. Há algumas restrições, você terá que percorrer da esquerda para a direita e cada vez que você desejar inserir um novo elemento na lista o elemento que você está inserindo tem que ser maior do que todos elementos que você já inseriu até o momento. O tamanho dessa lista deve ser maximizado. É permitido percorrer está lista uma vez e ela deve ficar em ordem crescente.;A entrada possui vários casos de teste e termina com EOF.A primeira linha de cada caso de teste possui um inteiro N representando respectivamente o número de elementos da lista, na proxima linha haverá N inteiros separados por espaço, representados por NI. N <= 5*10⁵, NI <= 10⁹.;A saída representa respectivamente o tamanho da maior lista em ordem crescente.;False;9 / 10;242;87;35.95%
2920;Número Pequeno;Paradigmas;7;Carlos costuma resolver problemas com números grandes, ele é muito bom em matemática, mas recentemente se deparou com um problema muito díficil. Ele ganhou um número N de sua mãe e um número K de seu pai e sua tarefa é tornar esse número o menor possível, obedecendo as restrições impostas por eles. Remova K dígitos do número N, a fim de torná-lo o menor número possível, não alterando a ordem dos dígitos do número inicial N.;A entrada contém vários casos de teste e termina com EOF, cada linha possui um inteiro K e N, N<= 10100, K < 100 K,N > 0.;A saída é composta por um número representando o menor número que pode ser formado,como descrito acima. Se tiver zeros a esquerda eles também deve ser impressos;False;7 / 10;118;44;37.29%
2921;Quadros Alienígenas;Paradigmas;6;"Quadros alienígenas são uma das formas mais inteligentes para expressar a quantidade de ódio que eles sentem por humanos. Cada dia eles anotam um valor nesse quadro, que expressa respectivamente o ódio que eles sentiram nesse dia e eles só parem de escrever nesse quadro quando o programador morre, como forma de expressar seu amor por todos programas que ele já fez por eles. Os aliens querem saber se dado um arranjo bidimensional de números inteiros positivos e negativos, encontre o sub-retângulo com maior soma.

				
				
				Como podemos ver o sub-retângulo de maior soma é o destacado em azul, 140. A soma máxima nunca passará de 1010.";A entrada contém vários casos de teste e termina com EOF a entrada consiste de um arranjo de inteiros de tamanho N x N. A entrada começa com um único inteiro positivo N, indicando o tamanho (largura e altura) do arranjo quadrado bidimensional. Segue N linhas em cada linha há N inteiros cada um separado por um espaço chamados por NI. N <= 1000, -105 < NI  <= 105;A saída é a soma do sub-retângulo máximo.;True;6 / 10;71;40;56.34%
2922;Salas De Aula;Ad-Hoc;6;"O professor de programação Barroquinha adora passar questões do URI para seus alunos, porém o professor Umbujahyba mudou a senha da rede e esqueceu de passar para Barroquinha.

Como Barroquinha não enxerga muito bem os numeros das salas, ele pediu para você desenvolver um algoritmo que calcula quantas portas ele deve passar para chegar na sala de Umbujahyba.";A entrada contém 2 valores inteiros B(0 <= B <= 150) e U (1 <= U <= 150), com a sala de Barroquinha e Umbujahyba e termina em EOF;Imprima a  quantidade de salas que Barroquinha deve passar para chegar na sala de Umbujahyba.;False;6 / 10;400;146;36.50%
2923;Birinho;Ad-Hoc;3;"Birinho trabalha numa empresa que fornece monitoramento para os servidores de seus clientes, sua função é monitorar tais servidores, como espaço em disco, memória, cpu, etc.

O sistema da empresa trabalha com threshold(limite), onde, por exemplo, quando um HD de 100 Gb atinge uma marca de 70% utilizado (30% livre) gera-se um alarme de ""Warning"", e quando o disco atinge 90% de utilização (10% livre) gera-se um alarme de ""Critical"". Porém Birinho acabou desconfigurando o threshold do sistema, e sua função agora é ajudá-lo a   reconfigurar esse threshold para a empresa continuar suas atividades.";Cada caso de teste consiste em quatro números inteiros T (>= 1 T <= 104), A (>= 1 A <= T), W (>= 1 W <= 80) e C (>= 1 C <= 99), representando respectivamente o tamanho total do disco(em GB),  o armazenamento em disco utilizado(em GB), a porcentagem do threshold para warning e a porcentagem do threshold para critical.;A saída deve mostrar uma mensagem de “warning” (sem aspas) caso o espaço em disco esteja dentro do threshold para warning, “critical” (sem aspas) caso o espaço em disco esteja dentro do threshold para critical, e por fim, uma mensagem “OK” (sem aspas e em caixa alta) caso o espaço em disco não esteja nos limites estabelecidos.;False;3 / 10;198;120;60.61%
2924;BigInt;Ad-Hoc;3;Sua tarefa é encontrar um número C, sendo que C = A + B, sabendo que \(0 \leq A, B, C \leq 2^{512}\) e A e B são inteiros.;A entrada consiste em duas linhas, cada uma contendo um dos números A e B.;A saída consiste de uma linha, contendo C.;False;3 / 10;544;260;47.79%
2925;Sequência IccanobiF;Ad-Hoc;5;"Depois de resolver o caso IccanobiF1, Fabiano resolveu pesquisar mais a fundo sobre o assunto se, realmente, havia uma sequência de IccanobiF real.
				Durante as suas pesquisas, ele descobriu que, de fato, existe uma Sequência IccanobiF com o conceito meio diferente: trata-se da inversão sempre do resultado a ser impresso a cada termo investigado. Se o resultado for de dois ou mais algarismos, este sofre um efeito de ""espelhamento"" onde irá impactar na sequência inteira a afetar os próximos elementos.
				Fabiano também chegou a observar que a Sequência de IccanobiF tende a crescer mais do que a tradicional Sequência de Fibonacci em matéria de algarismos e que o número 1 não repete como deveria. Como isso se trata de algo novo, Fabiano decidiu contratar um estagiário pra resolver isso. E adivinha quem é este cara? Como diria aquele cantor lá mesmo? Esse cara é você!";"A entrada será dada por vários casos de teste onde irá terminar com o Final do Arquivo (EOF).
				A entrada contará com apenas um valor X (X ∈ ℕ | X ≤ 60) que será correspondente ao termo na Sequência de IccanobiF a ser procurado.";"A saída será de apenas uma linha que deverá haver o elemento do termo X da Sequência de IccanobiF pesquisado.
				Uma entrada, uma saída, uma linha em branco a ser impressa após a saída.";False;5 / 10;214;95;44.39%
2926;Então é Natal!;Ad-Hoc;1;"Você sempre fica tão animado nesta época do ano que adora falar sobre isso o tempo todo! Neste ano, você tem gritado aos quatro ventos: Então é natal!! Colocando toda essa felicidade pra fora, você montou novamente um programa neste ano que, colocando um índice I de felicidade, seu grito de ""Então é Natal!"" é cada vez mais animado!";A entrada é composta por um inteiro I (1 < I ≤ 104) que representa o seu índice de felicidade.;"A saída é composta pela frase ""Entao eh Natal!"", sendo repetidas I vezes as letras a da frase. Uma quebra de linha é necessária após a impressão da frase.";False;1 / 10;701;442;63.05%
2927;Imprevistos Natalinos;Ad-Hoc;2;"Igor é professor de programação, e com a chegada do Natal, tempos de festas e viagens, em sua sala está ocorrendo muitos imprevistos, tanto em número de alunos quanto com problemas nos computadores por conta das férias do estagiário da TI. Jazon é um aluno muito dedicado e deseja ajudar seu professor, porém ainda é um aspirante na programação, por isso pediu sua ajuda para contabilizar o número de computadores que estarão funcionando em um dia específico desse mês natalino, e se é suficiente para o número total de alunos. Se o número de computadores funcionais for insuficiente para o total de alunos, não haverá aula.

O aluno também falou alguns detalhes:


	
	Igor, o professor, sempre utiliza um dos computadores.
	
	
	Caio é muito desastrado e queimou um número X de computadores.
	
	
	Existe um número Y de computadores que não possuem compilador instalado.";A entrada é composta por um número A (0 < C <= 1000) de alunos e C (A <= C <= 1000) que corresponde ao número de computadores. Além disso deve ser recebido um número X (X <= C <= 100) de computadores queimados por Caio e um número Y (Y <= C <= 1000) de computadores que não possuem compilador.;Caso não tenha aula, imprima ”Igor bolado!”, mas se, sobre essa mesma condição, o número de computadores queimados por Caio for maior que a metade dos computadores que não possuem compilador, imprima somente: “Caio, a culpa eh sua!”. Caso tenha aula, imprima ”Igor feliz!”.;False;2 / 10;478;271;56.69%
2928;Cruzando Lagos;Ad-Hoc;1;O polo norte vem enfrentando um problema de logística devido ao aquecimento global. Isso se deve ao fato de que a fabrica e o armazém de brinquedos encontram-se em margens opostas de um lago que costumava estar congelado durante o ano inteiro. Entretanto com o aumento da temperatura nos últimos anos o gelo que cobre o lago vem ficando cada vez menos espesso. Para contornar o problema Balladug ,um gnomo élfico muito esperto, criou um radar que consegue mapear a espessura do gelo. Assim Balladug entregou o mapa do lago para os gnomos élficos encarregados do transporte. Tais gnomos conseguem pular numa distância máxima de 2 metros. Com o mapa em mãos, os gnomos de saber se é possível cruzar o lago de gelo com seus pulos e se for possível eles gostariam de saber quantos pulos terão que dar para tal.;" 

A entrada consiste de um número inteiro N (0<N<101) que representa a quantidade de linhas do mapa. As próximas N linhas contem até 10 caracteres onde o caractere ""-"" representa uma região de gelo firme e o caractere ""."" representa uma região de gelo fino que irá quebrar caso seja pisado. Cada linha representa um metro de largura no mapa.Considere que os gnomos iniciam no canto superior esquerdo e devem cruzar todo o lago até chegarem em qualquer posição da margem oposta que se encontra após a última linha do mapa.Uma linha sempre será composta inteiramente pelo mesmo caractere.";"A saída consiste de um inteiro inteiro indicando o número de pulos para percorrer o lago ou do caractere ""N""caso seja impossível cruzar o lago. Não esqueça de deixar uma linha em branco após a resposta.";False;1 / 10;212;155;73.11%
2929;Menor da Pilha;Estruturas e Bibliotecas;9;"Todo Natal o bom velhinho consegue ir em todas as casas do mundo e deixar presentes para as crianças que foram boazinhas ao longo do ano, mas isso só é possível por causa do seu saco mágico de presentes. Seria impossível para o Papai Noel levar todos os presentes no seu saco, o volume e peso de todos eles torna isso obviamente inviável. O que acontece na verdade é que seu saco é uma espécie de portal mágico para sua fábrica de presentes no Polo Norte. Onde os presentes são empilhados pelos seus elfos e o Noel tira sempre o presente do topo dessa pilha quando acessa sua sacola mágica.

                Os presentes possuem uma medição numérica do grau de diversão que podem proporcionar às crianças e o Papai Noel tem sempre a preocupação de saber qual o presente menos divertido que ele irá entregar ao longo da noite porque ele não quer que nenhuma criança se sinta mal com o que receber. Porém, isso não é possível de ser feito antecipadamente porque ao longo da noite enquanto o bom velhinho retira presentes da pilha para entregar, ainda estão sendo feitos outros e colocados na pilha. Então o máximo que ele pode saber é o valor do presente menos divertido na pilha até aquele momento.

                Sua tarefa é, dado a sequência de operações feitas sobre a pilha de presentes, responder as consultas do Papai Noel sobre o valor do presente menos divertido na pilha até o momento.";"A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 106) correspondedendo ao número de operações feitas sobre a pilha de presentes. As operações podem ser de três tipos: ""PUSH V"" onde V (1 ≤ V ≤ 109) é um inteiro que representa o grau de diversão do presente sendo colocado na pilha; ""POP"" que representa que o papai Noel está tirando um presente da pilha para entregar e ""MIN"" que representa uma consulta do Noel para saber o menor valor de presente na pilha.";"A saída consiste em uma linha contendo um inteiro com o menor valor de presente na pilha para as consultas do tipo ""MIN"" ou a mensagem ""EMPTY"" para as operações ""MIN"" e ""POP"" quando a pilha estiver vazia.";False;9 / 10;1127;225;19.96%
2930;TCC da Depressão Natalino;Iniciante;5;"Larissa é uma acadêmica muito inteligente e estudiosa, com isso ela é engajada em várias atividades.
Chegou o final do ano, mês da sua apresentação de TCC. Ela, muito atarefada, precisa saber se vai conseguir realizar sua apresentação antes do Natal! Mas antes de sua apresentação ela deve passar por uma verificação com sua orientadora oriental, a Prof.Takanada (/Tá com nada/).";A entrada é composta por um valor E (0 < E < 25) representando o dia que foi entregue o tcc pra verificação. Um valor D (0 < D < 25) que representa a data final pra entregar para verificação.;"Mostre, para cada caso de teste, se a acadêmica apresentará ou não. A única possibilidade da entrega não ser realizada na data é por falta de orientação da Takanada. Caso não seja possivel, imprima ""Eu odeio a professora!"". Caso seja entregue em até 3 dias antes do prazo final, imprima ""Muito bem! Apresenta antes do Natal!"", caso contrário, sendo muito próximo da data limite imprima ""Parece o trabalho do meu filho!"", nesse ultimo caso, é adicionado mais dois dias para correções, e caso a data final seja menor que a véspera do natal(24), ela poderá apresentar, sendo impresso ""TCC Apresentado!"", caso contrário imprima ""Fail! Entao eh nataaaaal!""";False;5 / 10;1905;610;32.02%
2931;Presentes Suspeitos;Ad-Hoc;5;"Mamãe Noel está suspeitando que Papai Noel tenha diversos filhos espalhados pelo mundo. Ela tem notado alguns padrões entre os presentes pedidos pelas crianças e os recebidos. Mesmo que não tenha certeza, ela gostaria de verificar em detalhe todas as crianças que apresentem esses padrões nos presentes. Como são muitas crianças ao redor do mundo, você se prontificou a ajudá-la com esta tarefa. 
				Mamãe Noel irá fornecer os padrões que deseja investigar. Dessa forma, para cada presente, ela irá fornecer uma lista de presentes suspeitos que possam ser recebidos. Após fornecer as combinações suspeitas, ela irá informar os presentes desejados/recebidos por cada criança. Para isso, escreva um programa que diga se a Mamãe Noel deva verificar ou não a criança.
				OBS: Os nomes dos brinquedos podem conter espaços ou hífen.";"A entrada é composta por diversos casos de teste. Cada caso de teste inicia com o número de combinações C (1 ≤ C ≤ 50) e o número de crianças K (1 ≤ K ≤ 1000). Para cada combinação existirá uma linha contendo o presente desejado, seguido pelo número de presentes suspeitos S (0 ≤ S ≤ C). Cada uma das S linhas seguintes conterá um dos presentes suspeitos.
				Após, teremos K linhas contendo, cada uma, o presente desejado pela criança e o presente recebido, separados por ponto e vírgula (;).
				O final da entrada é determinado por EOF.";Para cada criança K, imprima Y se Mamãe Noel deve investigar ou N, caso contrário.;False;5 / 10;125;72;57.60%
2932;Renas do Papai Noel;Paradigmas;9;"Uma doença tem atacado as renas e deixando-as impossibilitadas de voar para realizar as entregas dos presentes de Natal.

Os duendes especialistas em renas, conseguiram identificar um fato bastante curioso sobre essa doença, que ela só é contagiosa se duas ou mais renas doentes estiverem em um mesmo estábulo.

Cada rena está em um quarto que é conectado a outro quarto por um corredor com \(W\) metros, onde desses quartos conectados formam um estabulo. A solução, proposta pelos duendes especialistas, foi que o velho Noel removesse alguns corredores para a doença fosse controlada. Para remover um corredor de \(W\) metros é necessário \(W\) horas e como está muito próximo do Natal, o velho Noel pediu a sua ajuda para minimizar o tempo.

Ajude o Papai Noel determinar o menor tempo possível para que a doença não se espalhe.

Dica do Noel: Inicialmente existe apenas um estábulo, ou seja, todos os quartos estão conectados e não existe um caminho circular.";"A primeira linha contém dois inteiros N \((1 \leq N \leq 2 \times 10^{5})\) o número renas M \((0 \leq M \leq N)\) e a quantidade de renas que foram diagnósticas com a doença. Seguem então \(M
\) inteiros, onde o \(M_{i}\) inteiro é o índice do quarto da rena doente. Depois seguem \(N-1
\) linhas cada uma com três inteiros U, V, W, onde \((U \neq V)\) e \( (0 \leq U, V < N)\) e \((1 \leq W \leq 1 \times 10^{6})\) que indicam que existe um corredor de tamanho \(W\) que conecta os quartos \(U\) e \(V\) (corredor pode ser usado em qualquer direção).";O tempo mínimo para que a doença não espalhe.;False;9 / 10;147;36;24.49%
2933;Passeio de Trenó pela Terra;Grafos;7;"Então é Natal! E Papai Noel precisa realizar uma série de entregas de presentes em diferentes localidades do mundo.

Para quem não sabe, as renas estão doentes e ele precisará utilizar o trenó movido a gasolina para entregar os presentes.

Um fato curioso é que as estradas entre as cidades são perfeitamente retas e existe um posto de gasolina em cada cidade. Noel é um cara muito esperto e, para evitar problemas, ele enche o tanque com um valor específico \(X\) que é o valor da maior estrada entre as cidades que o Noel está viajando, pois assim ele sabe que nunca ficará sem gasolina no meio do caminho entre duas cidades e os presentes não serão roubados. Além disso, ele sempre seleciona o caminho onde a maior estrada tenha o menor tamanho possível.

Você pode ajudar o nobre Noel a determinar qual o valor \(X\) de gasolina ele deve utilizar?";"A primeira linha é composta por dois inteiros N \((1 \leq N \leq 1\times 10^{5})\) e M \((N-1 \leq M \leq min(2 \times 10^{5}, \frac{N \times (N-1)}{2}))\) que é o número de cidades e o número de estradas. Em seguida vêm \(M
\) linhas com três inteiros u, v, w \((u\neq v) (0 \leq u, v < N) (1 \leq w \leq 1 \times 10^{6})\), indicado que existe uma estrada que conecta \(u\) a \(v
\) com peso \(w\) (pode-se usar a estrada em qualquer sentido). Após as \(M
\) linhas, tem um inteiro \(Q\) \((1 \leq Q \leq 1 \times 10^{5})\) que é o número de consultas que o velho Noel realizará. Cada umas das \(Q\) linhas seguintes é composta por dois inteiros x e y \((0 \leq x, y < N)\) que corresponde a consulta: qual a quantidade \(X\) de gasolina que o velho Noel irá precisar abastecer em cada cidade entre as cidades \(x\) e \(y\).";Imprima \(Q\) linhas cada uma com um inteiro \(X\) que é a resposta do dilema o que velho Noel está passado.  ;False;7 / 10;76;31;40.79%
2934;Noel e Suas Renas;Paradigmas;8;"O grande Noel é um cara cheio de manias. Este ano ele colocou todas as suas renas em uma fileira e decidiu selecionar a maior quantidade delas, seguindo algumas regras.
    - As renas não podem ser trocadas de ordem, ou seja, uma rena que está na posição i na fileira original deve aparecer antes das renas j na lista escolhida, onde i < j.
    - As renas de duas posições adjacentes na sequência final devem diferir exatamente em 1 unidade nas suas alturas.

Se isso já não bastasse, Noel percebeu que essa sequência estava com poucas renas. Portanto, decidiu incluir uma nova rena na fileira original. Levando em conta que essa nova rena pode ser inserida em qualquer posição e ele sempre irá escolher uma rena com a melhor altura possível.

Após dificultar um pouco a tarefa, Noel acabou se confundindo e está solicitando a sua ajuda para saber qual a maior quantidade de renas que podem ser selecionadas levando em consideração as regras impostas.
 ";A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 105) correspondedendo a quantidade de renas. Na segunda linha contém N inteiros Xi (1 ≤ Xi ≤ 106) que representa a altura da i-ésima rena.;Imprima a maior quantidade de renas que Noel pode selecionar.;False;8 / 10;143;37;25.87%
2935;DNA Élfico;Ad-Hoc;6;"Todos sabem que os Elfos do Papai Noel são seres sem gênero e que se reproduzem por mágica. Toda vez que é necessário um novo Elfo,	dois outros Elfos se reunem, constroem um boneco de neve, colocam um fio de cabelo de cada um deles no boneco e então usam seus poderes	mágicos para dar vida ao boneco de neve que se torna um Elfo. Esse Elfo sempre herda os tipos de poderes mágicos de seus criadores, a menos que ambos os criadores possuam um mesmo tipo de poder, logo o novo Elfo não herda tal poder porque há uma sobrecarga mágica. Elfos, também, nunca criam outros elfos sem poderes mágicos.

                Por ser tão fácil criar novos Elfos, o Papai Noel percebeu que seus subordinados estavam criando muitos novos ajudantes, sem pensar nas consequências. Simplesmente para diminuir suas cargas de trabalho. Então ele decidiu proibir a criação de novos Elfos que já tivessem	o mesmo conjunto de poderes que algum Elfo já existente, pois isto seria redundante dado que um único Elfo com aquele conjunto de poderes é mais que o suficiente para a função que é designado. Além de possivelmente já existir mais de um Elfo daquele tipo por ter sido criado antes do Bom Velhinho vetar as criações.

                Agora os pequenos seres mágicos vivem um dilema: Dado as informações de todos os tipos de poderes que cada Elfo possui, qual a quantidade máxima de novos Elfos que ainda podem ser criados?";A primeira linha da entrada contém um inteiro T correspondedendo ao número de casos de testes a seguir. A primeira linha de um caso de teste contém um número inteiro N (1 ≤ N ≤ 105) representando a quantidade de Elfos que existem	na fábrica do Papai Noel atualmente. Seguem-se N linhas cada uma contendo uma sequência de no máximo 64 caracteres Ci. Ci é sempre uma letra,  minúscula ou maiúscula, do alfabeto inglês ou um dígito de 0 a 9 e representa um tipo de magia que o Elfo possui. Caracteres minúsculos representam tipos de magias diferentes de caracteres maiúsculos.;A saída consiste de uma linha por caso de teste contendo o número máximo de Elfos que ainda podem ser criados sem contrariar a proibicão do Papai Noel.;False;6 / 10;37;14;37.84%
2936;Quanta Mandioca?;Iniciante;5;"Todo ano em abril reúnem-se na casa da dona Chica o Curupira, Boitatá, o Boto cor de rosa (esse em sua forma de homem, já que assim dona chica gosta mais), o Mapinguari e a Iara para se lembrar de seus momentos com Mani, a bela menina de pele branca. E como não poderia ser diferente o prato principal dessa reunião é a mandioca. Cada um deles come de uma a dez porções de mandioca e eles sempre avisam dona Chica com antecedência a respeito de quantas porções irão comer nesse dia. O tamanho da porção de cada um é diferente, mas sempre são os mesmos. As porções são as seguintes (em gramas):


	
	O Curupira come 300
	
	
	O Boitatá come 1500
	
	
	O Boto come 600
	
	
	O Mapinguari 1000
	
	
	A Iara come 150
	


Dona chica por sua vez sempre come 225 gramas de mandioca. Cansada de todo ano ter que calcular quanta mandioca preparar ela contactou você para escrever um programa que informe quanta mandioca deve ser preparada em gramas.";A entrada consiste de 5 inteiros cada um representando as porções que os convidados de dona Chica vão consumir. O primeiro inteiro representa as porções do Curupira, o segundo do Boitatá, o terceiro do Boto, o quarto do Mapinguari e o quinto a da Iara.;A saída consiste de um único inteiro que representa quanta mandioca dona Chica deve preparar em gramas. Não esqueça da quebra de linha após a resposta :).;False;5 / 10;265;231;87.17%
2937;Cobra Norato;Matemática;5;"Cobra Norato é uma lenda do folclore brasileiro, de origem indígena da região norte do Brasil, principalmente da Amazônia.


De acordo com a lenda, uma índia tapuia da região amazônica ficou grávida de um boto. 

Nasceram gêmeos (um menino e uma menina), que na verdade eram cobras. A menina ganhou o nome de Maria Caninana, e o menino foi batizado de Norato. 


Os gêmeos foram deixados no rio Tocantins e lá se criaram.


Cobra Norato era bom, salvava quem estava se afogando e ajudava os barqueiros e pescadores em perigo. Caninana era o oposto: atacava as pessoas. 


Norato costumava visitar a mãe e frequentar os bailes da cidade, pois adorava dançar. Nesses dias, saía da água, deixava a enorme pele de cobra na margem e se transformava em homem. No fim da noite, punha a pele de cobra e voltava para o rio.


Norato queria se desencantar, para se tornar homem de vez e deu a receita para quebrar o encanto a diversos amigos, mas nenhum deles teve coragem de ir até o fim. Finalmente, um soldado conseguiu desencantá-lo. 


A lenda termina contando que a pele de Cobra Norato foi queimada e que o rapaz Honorato viveu durante muitos anos no Pará, onde era querido por todos.


O que a lenda não conta é que houve todo um trabalho do soldado e seus companheiros de batalhão para dividir o enorme couro da cobra em partes e levar dali para outro lugar onde não causasse um incêndio na Mata.


O comprimento do couro foi dividido em pedaços variados. Os tamanhos dos pedaços eram de acordo com o comprimento fixo que cada soldado levava em uma ida até a fogueira.


Além disso, o batalhão era de tal forma que um soldado mais forte sempre conseguia levar, em uma única viagem, exatamente várias vezes o tamanho que um soldado mais fraco conseguia, porém, nenhuma fração a mais ou a menos. E havia um soldado que sempre carregava pedaços de tamanho um.


Dado o comprimento da cobra e os tamanhos que cada soldado carrega, determine número de formas que os soldados podem ter levado o couro da cobra até a fogueira.


Uma forma é considerada diferente da outra se o número de viagens da margem do rio à fogueira é diferente para algum soldado.";A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 40) sendo a quantidade de soldados. A próxima linha contém N inteiros distintos Ti (1 ≤ Ti ≤ 1018) representando o tamanho em metros do pedaço que cada soldado carrega por viagem. A terceira linha de um caso de teste contém um inteiro C (1 ≤ C ≤ 1018) representando o comprimento em metros da cobra.;"A saı́da consiste um único inteiro representando o número de formas de levar o couro da cobra Norato da margem
até a área de queimada. Como esse número pode ser muito grande, imprima apenas o resto da sua divisão por 109+7.";False;5 / 10;9;1;11.11%
2938;Jaçanã;Ad-Hoc;5;"Jaçanã é uma ave encontrada na região amazônica e comumente vista buscando alimento sobre as vitórias-régias que são plantas aquáticas típicas dessa região também. Estas possuem uma grande folha em forma de círculo, com bordas levantadas, que fica sobre a superfície da água e pode chegar a até 2,5 metros de diâmetro e suportar até 40 quilogramas.
				
				

				 Certo dia, um jaçanã de asa quebrada queria levar, da margem esquerda de um igarapé até a margem direita, um montante de insetos que havia coletado para comer. Para isso, ele decidiu pular com a sua comida no bico através de um caminho de vitórias-régias que se alinhou entre uma margem e outra. Porém, as vitórias-régias possuiam tamanhos variados, logo, aguentavam pesos diferentes. Então, sempre que o jaçanã pulou para uma vitória-régia que suportava menos peso do que ele carregava, ele precisou deixar parte da sua comida onde estava antes de pular. Caso contrário, afundaria ao pousar na próxima planta. 

				 Observe que, dependendo da capacidade das vitórias-régias no caminho, o passáro pode nem ter alcançado a margem direita. Contudo, é da natureza dele seguir em frente em qualquer situação, nunca voltando atrás e sempre tentando levar o máximo de comida até a outra margem.
				
				 Sua tarefa é, dado o peso do jaçanã, o peso da seu montante de insetos e as capacidades das vitórias-régias da esquerda para direita, dizer em quantas folhas de vitória-régia o pássaro deixou alguma parte da sua comida.";"A primeira linha da entrada contém três inteiros: P (1 ≤ P ≤ 20000),  C (1 ≤ C ≤ 20000) e N (1 ≤ N ≤ 100). Representando respectivamente o peso do pássaro e o peso da comida que ele carrega. Ambos dados em gramas.  E a quantidade de folhas de vitória-régia alinhadas entre as margens. A próxima linha contém N inteiros V (1 ≤ V ≤ 40000) separados por um único espaço em branco. Representando os pesos em gramas que as folhas de vitória-régia, da esquerda para direita, suportam sem afundar.

			Saída

			
				 A saída é um único inteiro representando a quantidade de folhas de vitórias-régias que ficaram com alguma grama de comida ao final da jornada do jaçanã.  
			

			

			
				
					
						Exemplos de Entrada
						Exemplos de Saída
					
				
				
					
						
							5000 1200 5
							6100 5750 5500 5200 5050

						
						
							4

						
					
				
			
		


    
        
        
        
            
                
					800 300 4
					1200 1000 2000 900

                
                
                    2

                
            
        
    

        
    
    
        
        
        
            
                
					800 300 4
					1050 1000 2000 900

                
                
                    2

                
            
        
    

    


    
        
        
        
            
                
					800 300 10
					1063 1075 1050 2000 1000 1024 989 900 961 932

                
                
                    4

                
            
        
    
    
    
    
    
        
        
        
            
                
					1000 500 7
					1400 1200 1123 1000 1000 400 100


                
                
                    3

                
            
        
    
    

			
				III Maratona de Programação do Norte";A saída é um único inteiro representando a quantidade de folhas de vitórias-régias que ficaram com alguma grama de comida ao final da jornada do jaçanã.;True;5 / 10;229;81;35.37%
2939;Casais;Matemática;5;"Um grupo formado inteiramente de casais saiu para jantar. Chegando ao restaurante eles escolheram uma mesa retangular com a quantidade de lugares exatamente igual quantidade de pessoas do seu grupo. Todos sentaram, um casal por vez, de modo a ocupar apenas o par de lados opostos maior.

Dado o número de casais e sabendo que cada pessoa sentou em frente ou ao lado do seu par, calcule o número de formas diferentes que esse grupo pode ter ocupado a mesa.



Uma forma de ocupar a mesa é considerada diferente da outra se ao menos uma pessoa está em uma posição diferente da sua anterior.";A entrada consiste de uma única linha contendo um número inteiro N (1 ≤ N ≤ 106) representando a quantidade de casais.;A saída consiste em um única linha contendo o número de formas de os casais se posicionarem na mesa seguindo as restrições. Como esse número pode ser muito grande imprima apenas seu módulo 109+7.;True;5 / 10;272;83;30.51%
2940;Máquina do Tempo Quebrada;Ad-Hoc;5;"Farcos possui uma máquina do tempo, e ela pode viajar	tanto para o futuro quanto para o passado, porém ela está quebrada e não consegue	fazer duas viajens seguidas do mesmo tipo, ou seja, ela não pode fazer duas viajens consecutivas para o futuro e nem duas viajens consecutivas para o passado. Além do mais, ela não pode viajar uma quantidade arbitrária de anos no tempo. O tamanho em anos de um salto para o futuro é determinado pelos botões no painel \(A\) onde apertar um botão \(X\) significa fazer uma viajem de \(X\) anos para o futuro. Da mesma forma os tamanhos do salto para o passado são determinados pelos botões no painel \(B\). 

				 Apesar de possuir dois painéis, a máquina foi projetada inicialmente para possuir apenas um único painel. Onde todos os botões estariam ordenados de forma não-descrescente da esquerda para direita. Mas essa idéia foi logo descartada visto que os botões de ao menos um dos dois tipos (\(A\) e \(B\)) nunca ficavam todos juntos, formando assim um padrão estético não muito agradável.  
				
				 Sua tarefa é, dado o valor dos botões que estão no painel \(A\) e \(B\), e o ano atual em que Farcos está, responder se ele consegue viajar para determinado período de tempo.

				 O primeiro salto da máquina sempre é para o futuro.";A primeira linha da entrada consiste de dois números inteiro N (2 ≤ N ≤ 105) e M (2 ≤ M ≤ 105) representando respectivamente a quantidade de botões no painel \(A\) e no painel \(B\). A segunda linha da entrada consiste N inteiros Ai (1 ≤ Ai ≤ 109) representando os botões no painel \(A\). A terceira linha da entrada consiste M inteiros Bi (1 ≤ Bi ≤ 109) representando os botões no painel \(B\). A quarta linha da entrada consiste de um número inteiro Q (1 ≤ Q ≤ 105) representando o número de consultas sobre possíveis viajens. Cada uma das Q linhas seguintes contém dois inteiros S (1 ≤ S ≤ 109) e T (1 ≤ T ≤ 109) representando respectivamente o ano de partida da máquina e o ano pretendido de chegada. Cada consulta é independente da outra.;"A saída consiste em uma linha por consulta. Cada linha contém ""S"" (sem aspas) se a respectiva viajem é possível ou ""N"" (sem aspas), caso contrário.";False;5 / 10;15;4;26.67%
2941;Fibra Ótica;Grafos;5;"A Região Norte é uma das cinco regiões do Brasil definidas pelo Instituto Brasileiro de Geografia e Estatística (IBGE) em 1969. Com uma área de 3 853 676,948 km² - a maior entre as cinco regiões - cobre 45,25% do território nacional, sendo superior à área da Índia e pouco inferior à União Europeia. Se fosse um país, seria o 7º maior do mundo em área. Sua população, também de acordo com o Instituto Brasileiro de Geografia e Estatística (IBGE), era de 18,1 milhões de habitantes em 2018, equivalente à população do Chile. Ela é formada por sete estados, sendo estes: Acre, Amapá, Amazonas, Pará, Rondônia, Roraima e Tocantins, os quais possuem 22, 16, 62, 144, 52, 15 e 139 municípios respectivamente.
				
				

				 É nessa Região que é sediada a Maratona de Programação do Norte. Uma competição que devido ao fato de possuir várias sedes fazendo a prova simultaneamente - no máximo uma por munícipio - necessita de uma boa conexão de internet em todas elas para garantir condições iguais de prova. 
				
				Para tentar resolver esse problema, os coordenadores da Maratona pretendem fazer um projeto ambicioso: conectar todas as sedes através de cabos de fibra ótica. Porém, essa é uma tecnologia muito cara, então eles querem projetar essa rede de conexões de forma a minizar os custos.

				 Essa rede será uma rede ponto-a-ponto minimal, o que significa que a comunicação entre quaisquer dois pontos deverá ser possível e de forma única. Não havendo duas rotas diferentes para tráfego de dados entre o mesmo par de pontos.

				 Ainda no intuito de diminuir os custos, contudo manter a conexão minimal, o projeto leva em consideração aproveitar alguns cabos já existentes entre sedes ou até remover alguns.

				 Sua tarefa é, dado os custos de colocar os cabos inexistentes e os de remover os que já tem, calcular o menor custo para fazer essa rede nas condições especificadas.";"A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 450) representando a quantidade de sedes participantes da Maratona. As próximas N linhas contém N inteiros separados por espaço em branco cada uma.
				Na \(i\)-ésima linha da \(j\)-ésima coluna há um inteiro C que tem seu significado dependente da sua posição: 
				
					 Se \(i\) > \(j\) , C (0 ≤ C ≤ 1) tem valor 1 se já existe um cabo de fibra ótica entre a \(i\)-ésima e a \(j\)-ésima sede, ou 0, caso contrário.

					 Se \(i\) < \(j\) , C (1 ≤ C ≤ 103) representa o custo, em milhares de reais, de construir uma conexão direta entre a \(i\)-ésima e a \(j\)-ésima sede caso ela não exista, ou de remover o cabo, em caso contrário. 
				
				 Se \(i\) \(=\) \(j\) , C vale 0 e pode ser ignorado já que nunca haverá a necessidade de colocar ou retirar um cabo de fibra ótica entre uma sede e si mesma. 	
					
				
				
				Observe que as linhas são numeradas de cima para baixo a partir de 1 e as colunas, da esquerda para direita também a partir de 1.";A saída consiste em um única linha contendo o menor custo em milhares de reais de montar a rede de acordo com as especificações.;True;5 / 10;78;39;50.00%
2942;Mistura de Bits;Ad-Hoc;5;"A mistura de bits é uma operação realizada sobre uma posição de um array de inteiros. Quando aplicada sobre posição \(i\) de um array \(A\), ela mistura os bits do número na posição \(i\) com os das posições adjacentes do array. Em termos mais exatos: 

				\(A[i] \leftarrow A[i-1] \bigoplus A[i] \bigoplus A[i+1]\)

				
				(Lê-se: \(A[i]\) recebe o xor de \(A[i-1]\) com \(A[i]\) com \(A[i+1]\))

				

				O operador \(\bigoplus\) simboliza a operação xor-bitwise.

				Por definição, a operação só pode ser aplicada sobre posições que possuam ambas as posições adjacentes.

				Sua tarefa é, dado duas configurações de um array, calcular o número mínimo de misturas de bits para transformar o primeiro array no segundo.";A primeira linha da entrada consiste de um número inteiro N (1 ≤ N ≤ 105) representando o tamanho do array. A segunda linha da entrada possui N inteiros Ai (0 ≤ Ai < 231) representando a configuração inicial do array. A terceira linha da entrada possui N inteiros Bi (0 ≤ Bi < 231) representando a configuração final do array.;"A saída consiste em um única linha contendo o número mínimo de operações para transformar o array A no array B ou a mensagem ""IMPOSSIBLE"" caso não seja possível fazê-lo.";True;5 / 10;151;13;8.61%
2943;Smider Pan;Ad-Hoc;5;"Smider Pan é um herói que tem como hobby saltar todas as noites entre os prédios da populosa cidade de Yew Nork. O que muitos não sabem é que Smider não salta aleatoriamente entre os prédios, seus saltos seguem um pequeno padrão definido abaixo:

- Smider inicia de um lugar qualquer do solo onde a altura é considerada 0.
- Inicialmente ele salta apenas para o topo de prédios que possuem uma altura maior que a sua altura atual.
- Em um dado momento ele começa a saltar apenas para prédios de alturas menores que sua altura atual até que ele chegue novamente ao solo.
- Assim que ele chega ao solo ele tira seu uniforme e vai para sua casa descansar.




Na imagem da esquerda é possível visualizar duas possíveis sequências de saltos (verde e azul) ótimas com 5 saltos.
Na imagem da direita existe uma sequência de saltos não ótima (amarela) e uma sequência de saltos inválida (vermelha).

Dadas as alturas de N prédios da cidade de Yew Nork e sabendo que Smider salta apenas da esquerda para a direita, sua tarefa será calcular a maior quantidade de saltos que ele conseguirá realizar respeitando o seu padrão de salto definito anteriormente.";"A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 103) representando a quantidade de prédios de Yew Nork.
A segunda linha conterá N inteiros Hi (1 ≤ Hi ≤ 106), sendo esses as alturas dos N prédios.";"Exiba um único inteiro representando a maior quantidade possível de saltos que Smider Pan conseguirá realizar.
 ";True;5 / 10;104;53;50.96%
2944;Emergência em Manaus;Ad-Hoc;5;"Na cidade de Manaus existe um importante polo industrial que contém uma grande variedade de empresas de diversos setores. Tal região é conhecida como Zona Franca de Manaus.
				Para facilitar o fluxo de matéria prima vindo da cidade até o polo industrial, o governo de Manaus, construiu várias estradas que conectam as empresas entre si.
				Devido ao grande volume pluvial repentino, várias das estradas construídas pelo governo foram alagadas, assim, gerando lentidão na distribuição da matéria prima.
				O governo de Manaus juntamente com o Conselho Estadual de Engenharia de Trânsito do Amazonas desenvolveram uma solução, à curto prazo, com a finalidade de não congelar por completo a Zona Franca. Essa medida consiste em construir algumas estradas emergenciais e manter todas as fábricas conectada mesmo que indiretamente, mas diferente da configuração anterior, o novo sistema terá as seguintes restrições:
				
					Todas as estradas agora só poderão ser utilizadas em um único sentido, com a esperança de usar a outra faixa para aumentar o fluxo;
					Todos os caminhões chegarão por uma única empresa S e será distribuído às demais empresas a partir das estradas que partem de S.
				
				O governo precisa ser ágil, pois cada dia custa milhões, assim, eles contam com você para determinar a quantidade mínima de estradas que precisam ser construídas com a finalidade de que todas as demais empresas possam ser alcançadas a partir da empresa S.";"A entrada consiste em um único caso de teste.
				A primeira linha é composta por três inteiros V (1 ≤ V ≤ 2\(\times\)104), E (0 ≤ E ≤ 2\(\times\)105), S (1 ≤ S ≤ V), o número de empresas na Zona Franca de Manaus, a quantidade de estradas não alagas e a empresa que será o centro da operação de distribuição respectivamente.
				Segue então S linhas, cada uma com dois inteiros X e Y (1 ≤ X,Y ≤ V) que indicam que existe uma estrada que conecta a empresa X a empresa Y.";Você deve imprimir um inteiro que representa a quantidade mínima de estradas a serem construídas pelo governo.;False;5 / 10;151;29;19.21%
2945;Monitor;Ad-Hoc;5;"A sua universidade está implantando um novo sistema de monitoria para ajudar alunos com dificuldade em algumas disciplinas. Como você sabe, toda turma de monitoria precisa de um monitor.

Esse novo sistema tem uma forma bem particular de determinar se um aluno pode ser monitor de outro se atender ambas as seguintes condições:


	Um aluno  A  pode ser monitor de um aluno  B, se a nota de  A  for maior que a de  B. (rA  > rB)  
	 A  só pode ser monitor de  B, se  A  é amigo (diretamente ou indiretamente) de  B.


Como você sabe, a universidade que você estuda é muito grande e fica difícil saber quantas pessoas um aluno pode ser monitor, pois além das notas sempre mudarem a sua universidade contém muitos alunos.

Seu desafio é: quantos alunos um outro aluno qualquer pode ser monitor.";"A primeira linha é composta por um único inteiro  N  (2 ≤  N ≤ 1x105) que indica a quantidade de alunos.

A próxima linha é composta por  N  inteiros, X1, X2, X3, .., XN (1 ≤ Xi ≤ 100) que indica a nota no i-ésimo aluno.

A próxima linha é composta por único inteiro M (0 ≤ M ≤ min(1x105, N(N-1)/2)) que indica a quantidade de relações de amizade.

As próximas M linhas são compostas por dois inteiros U, V (1 ≤ U, V ≤ N) que indica que U é amigo de V e V é amigo de U e (U ≠ V).

A próxima linha contém um inteiro Q (1 ≤ Q ≤ 1x105) que indica a quantidade de consultas.

As próximas Q linhas podem ser de dois tipos:


	1 W, consultar quantos alunos o aluno W (1 ≤ W ≤ N) pode ser monitor, seguindo a restrição do problema.
	2 W K, alterar a nota do aluno W (1 ≤ W ≤ N) para K (1 ≤ K ≤ 100).";Para cada consulta do tipo 1, você deve imprimir a quantidade de alunos que o aluno em questão pode ser monitor.;False;5 / 10;48;27;56.25%
2946;Dabriel e a Divisibilidade;Ad-Hoc;5;"Dabriel adora brincar com números e dessa vez está com um jogo bem interessante. Ele tem um número em binário N e uma lista com M números e pretende saber para quais números Mi dessa lista N é divisível. 
				Esta tarefa é muito fácil para ele, portanto não irá perder tempo fazendo isso, você pode o ajudar?";A primeira linha contém um número em binário N (1 ≤ |N| ≤ 105). Na segunda linha contém um inteiro M (1 ≤ M ≤ 10), que representa quantos números se deseja saber a divisibilidade. Nas próximas M linhas, terá um inteiro Mi (1 ≤ Mi ≤ 105), onde Mi é o número que Dabriel quer saber se divide N.;"Imprima todos os números que dividem N da lista dada por Dabriel (como ele é um pouco desatento pode existir duplicatas na lista dele, então imprima todos), separados por um espaço, ordenados de forma crescente. Caso não exista nenhum número, imprima: ""Nenhum"", sem aspas.";False;5 / 10;532;111;20.86%
2947;Gabarito;Ad-Hoc;5;"Desafortunato é um aluno de ensino médio em uma prestigiada escola. As provas nessa escola são famosas por terem um formato bem definido mas também por serem de um nível bem elevado. Elas são sempre objetivas, ou seja, são composta por um enunciado e por várias opções de resposta enumeradas com letras maiúsculas, porém, diferente das provas objetivas tradicionais, cada questão da prova nesse colégio tem 26 opções de resposta, usando assim todas as letras do alfabeto inglês. E somente uma dentre essas opções está correta.




Esse ano a turma de Desafortunato pretende ganhar o prêmio de melhor turma do colégio o qual concede algumas regalias em relação à atividades extra-classe. E para atingir esse objetivo a turma precisa ter a maior soma de notas na prova final. O que preocupou bastante Desafortunato que após ter feito a prova final teme não ter tido um bom desempenho.


Preocupados também com o prêmio em jogo e sabendo que Desafortunato é bem conhecido pela sua falta de sorte, a turma quer estimar quais suas chances de ganhar considerando o pior dos casos em relação ao colega azarado: Ele errando todas as respostas.


Dado a cópia das folhas de respostas de todos os alunos da turma e considerando que Desafortunato errou todas as questões da prova, calcule qual a maior soma de notas que a turma ainda pode atingir.


Lembre-se que em uma folha de resposta a primeira letra corresponde à resposta do aluno à primeira questão da prova, a segunda letra corresponde à resposta da segunda questão e assim por diante.";A primeira linha da entrada consiste de um número inteiro K (1 ≤ K ≤ 102) representando a quantidade de questões na prova. A segunda linha da entrada consiste K carecteres maiúsculos do alfabeto inglês sem espaços em branco representando as respostas de Desafortunato. A terceira linha contém um inteiro N (1 ≤ N ≤ 102) representando a quantidade de colegas de classe de Desafortunato. As próximas N linhas contém K caracteres maiúsculos do alfabeto inglês cada uma, sem espaços em branco. Cada linha corresponde a folha de respostas de um colega de Desafortunato.;A saída consiste em um única linha contendo a maior soma de notas que a turma pode obter.;True;5 / 10;144;97;67.36%
2948;Plantação de Açaí;Ad-Hoc;5;"Rangel é apaixonado por açaí e decidiu comprar uma fazenda produtora de açaí no Norte do país. Alguns meses após a compra dessa fazenda, suas plantações de açaí começaram a ser saqueadas causando prejuízo ao jovem fazendeiro.

Pensando em liquidar os saques a sua fazenda, Rangel resolveu contratar uma empresa para instalar uma cerca eletrificada com a finalidade de impedir que os saqueadores consigam roubar os pés de açaí restantes na sua fazenda.

Como o terreno da fazenda é perfeitamente plano, a empresa contratada recomendou o seguinte modelo de cerca:


	
	A cerca será circular;
	
	
	Possuirá 4 fios eletrificados em paralelo;
	
	
	A bateria fica localizada no centro da cerca.
	




Rangel aceitou o modelo, mas pediu que a cerca fosse suficiente apenas para cercar os pés restantes de açaí, pois ele teria que gastar com a reposição dos pés saqueados.

Você é funcionário da empresa contrata e o seu chefe pede para você realizar a seguinte tarefa:

Sabendo a localização de cada pé, você deve determinar a cerca mínima que envolve todos os pés de açaí restantes. Ou seja, a coordenada da bateria, o raio da cerca e a quantidade de fio eletrificado necessários seguindo o modelo proposto pela empresa.

Para esse problema considere \(\pi = 3.14\).";"A entrada é composta de um único caso de teste.

A primeira linha, contém um inteiro N (3 ≤ N ≤ 105) que indica a quantidade de pés de açaí restantes na fazenda.

Segue então N linhas, cada linha com dois números decimais X e Y (-104 ≤ X,Y ≤ 104) que indicam as coordenadas do i-ésimo pé de açaí.";Você deve imprimir as coordenadas do centro da cerca Xc e Yc, o raio da cerca e a metragem de fio eletrificado necessário para cercar todos os pés de açaí (Use duas casas decimais).;True;5 / 10;281;51;18.15%
2949;A Sociedade do Anel;Iniciante;1;"Frodo era um pequeno hobbit (pessoinhas pequenas e de pés peludos) que vivia tranquilamente no Condado, tomando seus vários cafés da manhã recheados de muitos alimentos suculentos que a dieta de um bom hobbit proporciona.
Certo dia, seu tio Bilbo lhe entrega seu famoso anel dourado, e Gandalf, um mago muito “bacanudo”, diz a Frodo que esse anel não era normal e que deveria ser jogado na Montanha da Perdição, para que um grande mal fosse evitado. Para essa jornada, foi formada uma comitiva, composta de anões, elfos, humanos, hobbits e magos.
Frodo deseja saber a quantidade de cada raça que irá com ele para a jornada. Dada uma lista das pessoas que se alistaram, faça um relatório para Frodo da comitiva.";"A primeira linha da entrada é composta por um inteiro N(0 < N <= 10), indicando o número de pessoas que se alistaram. Cada uma das próximas N linhas seguintes são compostas por uma cadeia de caracteres (sem espaços e de caracteres alfanuméricos apenas) e um caractere maiúsculo, indicando, respectivamente, o nome e o tipo da raça do respectivo ser. Este caractere poderá ser:
● A - Para anões;
● E - Para elfos;
● H - Para humanos;
● M - Para magos;
● X - Para hobbits (X, pois todo hobbit é uma incógnita para o mundo).";Deve ser apresentado um relatório com a comitiva do Frodo, indicando em cada linha quantos seres de cada espécie estarão na jornada, seguindo a ordem: hobbits, humanos, elfos, anões e magos.;False;1 / 10;68;45;66.18%
2950;As Duas Torres;Iniciante;1;"Saruman, o Branco, um grande mago da Terra-média, traiu os bons costumes e se filiou ao lorde do mal, Sauron. Sauron comanda a torre de Minas Morgul, que abriga um dos seus mais temidos servos, o Rei Bruxo de Angmar, um dos Nazgûl (antigos reis humanos que foram corrompidos pelos poderes dos anéis de Sauron). Saruman comanda a torre de Orthanc, onde cria seus servos Uruk-hai, orcs mais terríveis que os convencionais. Para comunicação, eles utilizam as relíquias esféricas chamadas Palantír, que ficam no topo de suas torres.
A Terra-média avança cada vez mais em tecnologia, muito impulsionada pelas guerras que a acometem diariamente. Um dos problemas que tem atrapalhado sua população é a Interferência de Comunicação Mágica (ICM). Os estudiosos de Minas Tirith, grande cidadela de Gondor, concluíram que para calcular o ICM para Palantír’s, basta dividir a distância entre os dois Palantír’s, pela soma do diâmetro dos mesmos. Gandalf, o Cinza, chegou a questionar essa conclusão, alegando que ela não fazia muito sentido, mas ele mesmo concluiu que dar sentido às coisas não faz sentido.
Saruman e Sauron precisam de uma comunicação estável, pois têm medo que Frodo e seus amigos consigam atrapalhar seus planos, portanto, querem saber quanto de ICM há na comunicação de seus Palantír’s, para que saibam quanto de magia devem empregar na comunicação.";A entrada é composta por 3 inteiros, N(0 < N < 10000), X e Y(0 < X, Y < 100), que indicam, respectivamente, a distância entre os Palantír, o diâmetro do Palantír de Sauron e o diâmetro do Palantír de Saruman.;Um valor real indicando o ICM da comunicação dos Palatír de Sauron e Saruman, com 2 casas decimais.;False;1 / 10;70;55;78.57%
2951;O Retorno do Rei;Iniciante;1;"Frodo e Sam estão prestes a conseguir jogar o anel na Montanha da Perdição, porém Gollum os atrapalha.
Uma pequena pausa na história. Senhor dos Anéis, além de ser um dos maiores clássicos literários e cinematográficos da humanidade, é uma história que deixa evidente o valor da amizade. Dê valor às boas amizades :) Despause.
Gollum é um ser infeliz e que não suporta a amizade. Para que Frodo e Sam consigam passar por ele, eles precisam recitar runas que entoam amizade. Cada runa é representada por uma letra do alfabeto, e indica uma quantidade de amizade que ela emite, podendo ser positiva ou negativa (sim, existem as runas que representam as más amizades). 
Dada a quantidade de amizade necessária para derrotar Gollum, uma lista de runas e seus respectivos valores de amizade e as runas que Sam e Frodo recitaram, dê o valor final de amizade que Frodo e Sam conseguiram e se foi possível ou não derrotar Gollum.";A primeira linha da entrada é composta por dois inteiros N(1 <= N) e G(G <= 100), indicando, respectivamente, a quantidade de runas existentes, e a quantidade de amizade necessária para derrotar Gollum. As próximas N linhas são compostas por um caractere Ri('A' <= Ri <= 'Z') e um inteiro Vi(-100 <= Vi <= 100), indicando, respectivamente, a runa e o valor de amizade que ela agrega. A próxima linha é iniciada por um inteiro X, indicando a quantidade de runas recitadas por Frodo e Sam. A última linha da entrada é composta por X caracteres, indicando as runas recitadas por Frodo e Sam.;"A primeira linha da saída deve conter a quantidade de valor de amizade. A segunda linha deve conter uma das seguintes mensagens:
● “My precioooous”, se Gollum vencer;
● “You shall pass!”, se Frodo e Sam vencerem.";False;1 / 10;28;18;64.29%
2952;A Vida Sustentável;Iniciante;1;"Oliveira é um menino que ama jogos online. Um de seus preferidos é o “A Vida Sustentável”, no qual controla um boneco que deve viver uma vida sustentável, seguindo ações diárias que não comprometam a sustentabilidade do seu mundo. Ele é o único personagem do jogo, pois o objetivo do mesmo é mostrar o quão nossas atividades afetam o mundo a nossa volta. 
Dentre as principais atividades realizadas no jogo, ele pode comer uma variedade de alimentos e utilizar alguns tipos de veículos. Essas duas atividades comprometem dois indicadores do seu mundo, quantidade de água utilizável restante (com relação a sua alimentação) e quantidade de gases que a camada de ozônio pode suportar (com relação aos seus meios de transporte), porém garantem nutrição ou velocidade ao seu personagem.
Para este problema, utilizaremos as seguintes tabelas, que relacionam alimentos a consumo de água e veículos a emissão de gases, além de incluir a nutrição de cada alimento e a velocidade de cada veículo:



Oliveira percebeu que havia um custo benefício para cada alimento e veículo. Por exemplo, o custo benefício do Carro seria -20, pois emite 100 de gás, mas proporciona 80 de velocidade e do Milho seria 650, pois consome 450 de água, mas proporciona 1000 de nutrição.
Um dia neste jogo tem N horas, e o jogador pode jogar por até N horas o jogo. Oliveira começa sempre jogando em alguma hora aleatória do dia de ocorrência do jogo e termina de jogar após algumas horas, não mais que N, e em cada hora jogada, seu personagem ou comia ou utilizava um veículo.
Exemplo, se o jogo tiver 10 horas, Oliveira poderia começar pela hora 7 e jogar até a hora 6, podendo parar antes.
Após observar um relatório de suas ações, gostaria de saber qual o valor dos intervalos (segmento contínuo do vetor) de tempo que teve um maior e um menor custo benefício, para que analise esses intervalos e tente equilibrar melhor suas ações na próxima vez que for jogar. As horas que Oliveira não joga não devem ser consideradas para a solução, caso haja apenas horas em que não jogou, a resposta é 0 0.";"A primeira linha da entrada contém um inteiro N(0 < N ≤ 100000) que indica a quantidade de horas de um dia no jogo. A seguir, seguem N caracteres indicando as ações de Oliveira para cada hora.
Cada caractere poderá ser:
● A, para Arroz;
● C, para Carne;
● S, para Soja;
● P, para Plockt;
● M, para Milho;
● K, para Carro;
● B, para Bicicleta
● N, quando, nesta hora, Oliveira não jogou.

Basicamente, o que marca a primeira hora jogada é a primeira ocorrência de um caractere que não seja ‘N’ , após um que seja ou se a primeira hora já não for ‘N’.";2 inteiros, indicando o valor do maior intervalo de custo benefício, e do menor intervalo de custo benefício, respectivamente.;True;1 / 10;11;6;54.55%
2953;Mais um Joguinho;Matemática;1;"Fingolfin adora jogos de tabuleiro. Certo dia, se depara com um jogo muito estranho chamado “2 Primeiros Primos”. Basicamente este jogo consistia em um tabuleiro de uma única linha na horizontal que contém N casas. O jogador inicia na casa de número 1 e o objetivo é chegar a casa N (não podendo ultrapassar). Em cada rodada, o jogador pode se movimentar de duas formas: andar 2 ou 3 casas para frente (oh sim, agora faz sentido o título do jogo).
Fingolfin achou o jogo muito fácil (só andar pra frente), então seu colega Fëanor lhe desafia a dizer quantas possibilidades distintas existem de ele terminar o jogo, ou seja, de quantas formas distintas Fingolfin, a partir da casa 1, consegue chegar à casa N.
Fingolfin está um pouco ocupado cuidando de alguns afazeres de casa e pediu para você que, dado o número de casas do tabuleiro, resolva o desafio.";Inteiro N(1 ≤ N ≤ 105), indicando o número de casas do tabuleiro.;Inteiro indicando o número de possibilidades de terminar o jogo. O número de possibilidades pode ser muito grande, então deve-se mostrar apenas o valor de resto deste valor ao ser dividido por 109 + 7.;False;1 / 10;18;18;100.00%
2954;O Jogo;Strings;1;"Se você está lendo este problema, você perdeu O Jogo. Sim, a regra do Jogo é: se você lembrar do Jogo, você perde.
Ethan Hawke era um garoto intrigado demais com O Jogo, e queria bolar formas de ficar o máximo de tempo possível sem perder, então percebeu que, para perder, basta que algum de seus amigos digam “Jogo” ou “Perdi” em suas conversas virtuais, que automaticamente ele lembra e perde o Jogo, podendo ser com letras maiúsculas ou minúsculas.
Ethan gostaria de calcular o tempo em que vence o Jogo. O cálculo de tempo se efetua da seguinte forma: As conversas dos amigos são virtuais, e para ler uma letra, ele demora 1 segundo, o qual caracteres especiais como pontuação e espaços não são considerados. Se em algum momento, as palavras que fazem Ethan perder aparecerem, ele perde o Jogo e o cálculo se reinicia.
Por exemplo, na frase: “Estava jogando um jogo ontem, e ele era bom”. Ethan venceu o jogo em: “Estava jogando um jogo”. Totalizando 19 segundos em que venceu (contagem das letras). Como a palavra “jogo” apareceu, aqui ele perde e a contagem de tempo reinicia. E continua vencendo em “ontem, e ele era bom”, por mais 15 segundos. Assim, o máximo de tempo em que ele era vencedor foi de 19 segundos. O mesmo valeria se a palavra “perdi” aparecesse. Lembrando que essas duas palavras só irão fazer a pessoa perder, se forem inteiras, e não sub palavras de outras, pois quando isso acontece, as pessoas não as percebem e, assim, não perdem o jogo.
Dada uma lista de frases ditas por Ethan e seus amigos, indique qual foi o maior tempo em que ele conseguiu ficar como vencedor do Jogo, em cada uma delas.";"A primeira linha da entrada contém um inteiro N(0 < N ≤ 10), indicando o número de frases ditas na conversa. As próximas N linhas contém as frases ditas nas conversas dos amigos de Ethan.

Cada frase irá conter no máximo 100000 caracteres, sendo eles letras, maiúsculas e minúsculas, espaços ou pontuação (vírgula e ponto final).";Número máximo de tempo que Ethan conseguiu se manter vencedor do Jogo.;False;1 / 10;30;17;56.67%
2955;Truuuuuco!;Matemática;1;"Ninguém nunca fez essa tese, mas é intuitivo dizer que os cursos de Técnico em Informática e Ciência da Computação possuem as maiores lendas do jogo tradicional Truco.

A galera dos “computer” ama tanto esse jogo que ao longo dos anos foram propondo novas regras e novos sistemas de pontuação para tornar o jogo cada vez mais desafiador.

Não entraremos nos detalhes das regras do jogo, primeiramente porque todo mundo deve conhecer, dado o nicho dessa prova; em segundo lugar que, para este problema, não estamos interessados nas regras, mas no sistema de pontuação.

O jogo é feito em rodadas, e a equipe que alcançar ou ultrapassar X pontos vence (arcaicamente eram 12 ou 15 pontos, mas com o tempo tornaram o truco uma experiência mais dinâmica). Em cada rodada, uma equipe pode ganhar 1 ou uma quantidade múltipla de 3 em pontos (a famosa gritaria).

Se não for necessário “trucar”, ou seja, faltar apenas 1 ponto para vencer, é proibido trucar. Regra universal, não questione.

Lembrando que se o múltiplo de 3 da trucada for maior ou igual ao restante dos pontos para vencer o jogo, não é necessário que o oponente aumente-o mais. (Muita gente gosta de continuar a gritaria, mesmo não fazendo sentido, mas aqui temos pessoas civilizadas e inteligentes).

Considera-se, também, que uma pessoa venceu de forma perfeita, quando consegue alcançar exatamente o número de pontos, sem ultrapassar.

Josh Homme é um calouro do curso de computação e quer chegar “mitando” no truco. Ele já conhece programação e deseja criar um programa que dada a quantidade de pontos para vencer, indique quantas possibilidades existem para vencer (chegar a X pontos ou ultrapassar) e o número mínimo de rodadas para se vencer de forma perfeita.";A entrada contém um inteiro X(1 < X ≤ 1000), indicando o número de pontos necessários para vencer a partida de Truco.;"A saída contém dois inteiros, indicando o número de possibilidades de vencer e o número mínimo de rodadas para Josh vencer o jogo de forma perfeita.

Detalhe: O número de possibilidades pode ser muito grande, então deve-se mostrar o valor que esse número deixaria de resto ao ser dividido por 109 + 7.";False;1 / 10;5;5;100.00%
2956;Derivada de 13 Variáveis;Matemática;1;"A derivada de uma função y = f(x) num ponto x = x0, é igual ao valor da tangente trigonométrica do ângulo formado pela tangente geométrica à curva representativa de y=f(x), no ponto x = x0, ou seja, a derivada é o coeficiente angular da reta tangente ao gráfico da função no ponto x0.

				A derivada de uma função y = f(x) pode ser representada também pelos símbolos:

				y', dy/dx ou f ' (x).

				A derivada de uma função f(x) no ponto x0 é dada por:

				

				Na geometria clássica, a linha tangente ao gráfico da função f em a foi a única linha que passou pelo ponto (a, f(a)) que não encontrou o gráfico de f transversalmente, significando que a linha não passou diretamente pelo gráfico.

				O declive da secante ao gráfico de f, na imagem acima, que passa pelos pontos (x,f(x)) e (x + h,f(x + h)) é dado pelo quociente de Newton:

				


				Uma definição alternativa é: a função f é derivável em a se existir uma função φa de I em R contínua em a tal que:

				


				Assim, por exemplo, se considerarmos a função f de R em R definida por f(x) = x² + x − 1, esta é diferenciável em 0. É possível observar na imagem abaixo os gráficos das restrições daquela função aos intervalos [−1,1] e [−1/10,1/10] e é claro que, enquanto que o primeiro é bastante curvo (e, portanto, f(x) − f(0) está aí longe de ser linear), o segundo é praticamente indistinguível de um segmento de reta (de declive 1). De fato, quanto mais se for ampliando o gráfico próximo de (0,f(0)), mais perto estará este de ser linear.

				


				Quando obtemos a derivada de uma função, o resultado é também uma função de x e como tal também pode ser diferenciada. Calculando-se a derivada novamente, obtemos então a segunda derivada da função f. De forma semelhante, a derivada da segunda derivada é chamada de terceira derivada e assim por diante. Podemos nos referir às derivadas subsequentes de f por:

				


				Se f é uma função com valores reais em R, então a derivada parcial de f mede a sua variação na direção dos eixos das coordenadas. Por exemplo, se f é uma função de x e y, então sua derivada parcial mede a variação em f na direção x e na direção y. Contudo, elas (derivadas parciais) não medem diretamente a variação de f em qualquer outra direção, tal como aquela ao longo da linha diagonal y=x. Estas são medidas usando-se as derivadas direcionais.

				Podemos calcular a derivada de uma função com 13 variáveis por meio de... “fake news, tá ok? Tem nada de derivada aqui não.”

				Este exercício é apenas para todo mundo aprender a ler algo, sem julgar pelos títulos e longos textos. Dada a base e altura de um triângulo, mostre qual sua área. “Ou vai falar que esqueceu como calcular área de triângulo também? Paulo Gueedes!”";Dois valores de ponto flutuante P e T (0 < P, T ≤ 100000.00000), de até 5 casas decimais, que indicam, respectivamente, a base e a altura de um triângulo qualquer.;Valor real, com 5 casas decimais, representando a área do triângulo, junto da mensagem fake: “Concluimos que, dado o limite da entrada, a resposta seria: y = f(x) = “. Dois espaços após o ‘ : ’.;True;1 / 10;46;32;69.57%
2957;Sir Vô;Ad-Hoc;1;"César é um rapaz destemido, aprendeu a tocar baixo inspirado pelo seu avô, um dos maiores baixistas de todos os tempos, e deseja ser bom o suficiente para tocar todas as músicas do Rainhas da Era da Pedra, sua banda favorita.

				Certo dia, seu avô lhe apresentou diversas bandas que curtia quando mais novo, e César se vê inspirado a aprender mais sobre elas para melhorar sua própria técnica.

				César estava confuso e sem saber em quais bandas iniciar o estudo e pediu ajuda a seu avô, quem lhe prometeu ensinar um truque milenar passado de gerações em gerações, que foi o segredo de muitos músicos.

				O truque, afinal de contas, não era muito complexo. Cada banda agrega um valor de técnica ao ser estudada, e esse valor se dá pela quantidade de letras no nome da mesma, assim, basta, dentre as bandas, escolher um conjunto limitado (pois obter a técnica de muitas bandas pode ser prejudicial), de forma a maximizar o ganho de técnica. O truque revela que o tamanho máximo desse conjunto deve ser com base no dia do mês em que se estiver estudando.

				Após aprender o truque, César estava cansado e foi dormir. Durante o sono, Ronnie James Dio (se você não conhece, saindo dessa prova, vá conhecer!), aparece em seu sonho, e diz que a técnica do seu vô estava certa, porém, faltou um detalhe: não se deve escolher mais de uma banda com a mesma letra inicial! César sabia que não podia duvidar de Dio, pois quem duvidaria, não é mesmo?!

				Dada uma lista de bandas que o vô de César lhe apresentou, e o dia em que César está estudando, indique quanto de técnica César obteve ao final de todo seu estudo, sabendo que ele escolheu um conjunto de bandas de forma a maximizar a técnica total obtida, respeitando as restrições do truque de seu vô.";A primeira linha da entrada é composta por dois inteiros N (0 < N ≤ 100) e D (0 < D ≤ 31), que indicam, respectivamente, quantas músicas havia na lista do vô de César e em qual dia do mês César estava aprendendo. As próximas N linhas indicam os nomes das bandas da lista, o qual cada nome é uma cadeia de caracteres podendo ter espaços separando os nomes. O nome de cada banda não irá superar 100 caracteres. Pode-se considerar que letras maiúsculas e minúsculas são iguais. (A == a).;A saída contém um único inteiro representando a quantidade de técnica obtida por César após seu estudo, utilizando o truque de seu avô para estudo.;False;1 / 10;43;15;34.88%
2958;O Rolê Bad Vibes;Estruturas e Bibliotecas;1;"A faculdade é um tempo memorável da vida. Grandes coisas acontecem, mas também muita dor e sofrimento, e nesses momentos bons amigos são necessários.

Sabendo disso, Úrisson, ao entrar na universidade, tratou logo de fazer bons amigos e fundar seu grupo de ajuda, Rolê Bad Vibes, o qual os membros se ajudam com problemas de disciplinas do curso e de vida.

Como são um grupo de pessoas muito inteligentes, bolaram um esquema para resolução dos problemas:

Para cada problema, era dado um valor de 1 a 9 (na escala de criticidade), e uma letra, D ou V, indicando problema de disciplina ou de vida, respectivamente. Com esses dados, colocam em uma matriz, impressa em uma grande cartolina colada na sede do grupo para fácil visualização de todos.

A matriz é uma boa forma de visualizar, porém, ainda causa confusão na hora de escolher os problemas a serem resolvidos no dia, pois os dados ficam muito esparsos. Assim, Úrisson gostaria de gerar um relatório, ordenado desses dados.

O critério adotado é: independente da criticidade, os problemas de vida devem ser resolvidos primeiro, pois concluíram ser muito complicado conciliar esses problemas com os problemas de disciplinas. Depois, basta ordenar por criticidade.

Úrisson, pediu pra você, veterano de programação, criar um programa que gera este relatório.";A primeira linha da entrada contém dois inteiros N e M, indicando, respectivamente, o número de linhas e colunas. Nas próximas linhas, é dada a matriz onde cada célula contém dois caracteres, o primeiro indicando o nível de criticidade e o segundo se é um problema de vida ou disciplina.;Relatório ordenado conforme pedido por Úrisson.;False;1 / 10;23;18;78.26%
2959;Credo com ParaTudo!;Grafos;1;"Harari era um jovem muito inteligente e que gostava muito de comer e beber. Certo dia, saiu com seus amigos, e após uma noitada de muitas risadas e bons drink’s, teve a ideia de comprar um iogurte de gengibre muito bom que estava em moda no momento, chamado ParaTudo. Ao tomar com seus amigos, percebeu que o iogurte realmente parava todo o seu sistema digestivo e todo mundo entrou em pânico precisando ir cada um para sua respectiva casa.

Devido aos bons drinks que tomaram, os amigos estavam perdidos na cidade, e tinham medo de não conseguir chegar em suas casas, ainda mais que muitas ruas estavam interditadas devido ao Carnaval que estava por chegar.

Dado o número de bairros da cidade e suas conexões (todas essas conexões sendo possíveis de ser atravessadas pelos dois sentidos), responda às várias perguntas de Harari e seus amigos, em que cada pergunta deve responder se, a partir de um bairro A, é possível chegar a um bairro B pelas conexões disponíveis.";A primeira linha da entrada contém três inteiros N (0 < N ≤ 400), M (0 ≤ M ≤ (( N -1)* N ))/2) e P (0 ≤ P ≤ 105), indicando respectivamente o número de bairros, o número de conexões da cidade de Harari e quantas perguntas foram feitas. As próximas M linhas descrevem as conexões, em que cada linha há 2 inteiros, A e B (0 < A , B ≤ N) indicando que tal conexão conecta esses dois bairros. As próximas P linhas descrevem as perguntas feitas, onde, em cada linha, haverá dois inteiros, K e L, perguntando se é ou não possível ir de K a L pelas conexões disponíveis.;"Para cada pergunta, deve haver uma das seguintes respostas:

“Lets que lets”, se é possível chegar de um bairro ao outro;

“Deu ruim”, se não é possível chegar de um bairro ao outro.";False;1 / 10;27;19;70.37%
2960;Era Uma Vez…;Strings;1;"Desde criança, histórias nos fascinam. Seja aventura, ficção científica, romance... independente do gênero, toda história, se bem contada, nos proporciona conhecimento, escape e muito divertimento.

Muitas histórias nos são apresentadas em formato de livro, e este é um dos bens mais valiosos de nossas vidas. Infelizmente, muitas pessoas menosprezam livros, pois elas não têm conhecimento do quão importante essa mídia é.

Cate é uma garota que adora leitura, e quanto mais livros consome, mais quer consumir. Com o tempo, adquiriu muitos, e tem quase uma biblioteca em casa. Certo dia, estava buscando formas de aproveitar ainda mais seus livros, e percebeu algo interessante: se pegasse a primeira letra de cada título, conseguia formar palavras interessantes. Então, decidiu pegar alguns livros de forma aleatória e, com a primeira letra do título de cada um, formar palavras.

Após gerar várias palavras, decidiu que iria criar uma nova linguagem, baseada nestas palavras. O nome da linguagem seria o conjunto de letras iniciais das palavras geradas. Como é uma pessoa muito perfeccionista, gostaria de gerar, para sua nova linguagem, um relatório que contém: Qual a quantidade distinta de vogais e consoantes existem na sua linguagem. Ela também gosta de exatas (apesar de não ser muito boa), e propôs uma fórmula que dita quanto tempo uma pessoa demoraria para aprender essa nova linguagem. A fórmula é a seguinte: (número total de letras distintas + número de vogais) dividido pela quantidade total de consoantes. A métrica usada, para este valor, é horas. O resultado dessa fórmula também deve estar presente no relatório.

Como o mais novo livro de Dão Brão, seu autor favorito, foi publicado, está muito ocupada lendo, mas pediu para você criar um programa, que dadas as seleções aleatórias de livros que fez, indique as palavras criadas e gere o relatório descrito acima.";"A primeira linha contém um inteiro N, indicando o número de seleções aleatórias que fez. As próximas N linhas descrevem as seleções. Cada seleção inicia com um inteiro M, indicando a quantidade de livros que escolheu para esta seleção. Cada uma das M linhas seguintes descreve o título de um livro, que é uma cadeia de caracteres, podendo conter letras maiúsculas, minúsculas e espaços.

Limites: 1 ≤ N ≤ 100;

 1 ≤ M ≤ 20;

 Cada nome de livro não supera 100 caracteres.";Deve conter o relatório apresentado na descrição do problema. A ordem das informações pode ser vista no caso de teste. O nome da linguagem deve ser apresentado em letras maiúsculas, e as palavras, em minúscula. O resultado da fórmula deve ser apresentado com uma casa decimal. Se o total de consoantes for nulo, em vez do total de horas, deve ser mostrado a mensagem “Linguagem Ruim”, no final do relatório.;False;1 / 10;84;9;10.71%
2961;Ô, Que Tanto de Filme!;Estruturas e Bibliotecas;1;"Cinema é um dos entretenimentos mais divertidos, porém caro do Brasil. Felizmente, com o passar dos anos, muitos filmes têm chegado às terras tupiniquins. Nicole é uma garota antenada em cinema, e adora todos os gêneros. Todo ano ela assiste a muitos filmes e faz seu bolão para o Oscar (premiação anual).

Os anos têm passado e ela tem acertado muitas categorias. Porém, Nicole gostaria de melhorar ainda mais seus palpites. Para isso, gostaria de analisar todos os seus palpites de anos anteriores, e observar em quais categorias tem errado mais, para que no ano atual, dê mais atenção a essas categorias.

As categorias principais do Oscar são: Melhor Filme, Melhor Diretor, Melhor Atriz, Melhor Ator. E só essas categorias importam para este problema (existem 24 atualmente). Para facilitar, iremos enumerar as categorias de 1 a 4.

O mais novo filme do Tarantino, seu diretor favorito, acaba de sair, e Nicole está muito ocupada assistindo, assim, pediu para você que, dada a lista de indicados ao Oscar, e seus palpites, de N anos, indique em quais categorias deve focar mais no atual ano.";"A primeira linha da entrada contém um inteiro N (0 < N ≤ 100), indicando o número de anos em que Nicole palpitou sobre o Oscar. Cada ano contém a mensagem “Palpites” seguido por 4 linhas indicando os palpites de Nicole para cada categoria. No final de cada ano, contém a mensagem “Vencedores” e seguem mais 4 linhas, indicando quem foi o vencedor de cada categoria, respectivamente.

				Cada nome de indicado terá no máximo 100 caracteres, podendo conter letras minúsculas, maiúsculas, dígitos e espaços.";Lista de categorias em que Nicole deve focar mais no ano atual, separadas por um espaço em branco.;False;1 / 10;33;22;66.67%
