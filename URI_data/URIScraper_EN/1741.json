{"output":"For each test case, print one single line, with the following form:\n\n                    \u201cThe answer is N.\u201d if the expression is valid and can be solved and its result is N.\n                    \n                    \u201cDivision by zero.\u201d if the expression is syntatically valid, but in the process of solving it, one tries to divide by zero.\n                    \n                    \u201cInvalid expression.\u201d if the expression can\u2019t be solved as a RJN expression.\n\n                    All the results, both final and intermediate, will fit in a signed 32-bit integer.","input":"The input consists of several test cases. Each test case is a line with n characters (1 ≤ n ≤ 2×106) that could possibly form an expression in the RJN form. This expression contains only digits from 0 to 9 and the mentioned operators  separated by a single space.\n\n                    The input terminates in the end of the input file.","level":9,"name":"Reversed John\u2019s Notation","has_images":false,"description":"Little John is learning how to solve arithmetic expressions. But conventional expressions are too boring to him. Because of that, his father is teaching him how to solve expressions written in different forms. The first non-traditional form he learned was the Reverse Polish Notation, a form of writing expressions that interestingly does not need parenthesis. John has a keen interest in RPN expressions, but he thinks he can create his own notation that is even more interesting. That\u2019s why he created the Reversed John\u2019s Notation (RJN).\n\n                John came up with the following recursive definition of a valid RJN expression:\n\n                \n                    A single digit is a valid expression. The result of an expression of this form is the value of the digit itself.\n                    A binary operator (+, −, * or /), followed by two valid expressions, is a valid expression. The result of the expression is the application of the operator with the arguments reversed. That means + a b means the sum of the two operands, − a b means b − a, * a b means the product of a and b and / a b should be evaluated to floor(b/a).\n                \n\n                John now amuses himself writing and solving expressions in the RJN form. As he\u2019s a natural adventurous kid, he likes bigger expressions the most. However, sometimes this innocent boy runs into trouble. Part of the expressions he writes are apparently unsolvable, because they seem malformed, and some other expressions cause divisions by zero. But when he solves big expressions for the second time, he generally gets different results.\n\n                He would like to know for sure the result of the expressions he writes. Because you really like John, you decided to write a program to help him.","id":"1741","category":"Ad-Hoc","statistics":{"level":"9 / 10","submissions":2805,"solved":392,"ratio":"13.98%"}}