{"output":"For each test case, print the number of test case first. Then print n, b and the last digit (in base b) of the number of calls. There should be a single space between the two numbers of a line. Note that the last digit has to be represented in decimal number system.","input":"Input consists of several test cases. For each test there will be two integers n (0 ≤ n < (263 - 1)) and b (1 < b ≤ 10000). Input is terminated by a test case where n=0 and b=0, you must not process this test case.","level":6,"name":"How Many Calls?","has_images":false,"description":"The Fibonacci number is defined by the following recurrence:\n\n\t\n\t\tfib(0) = 0\n\t\n\t\tfib(1) = 1\n\t\n\t\tfib(n) = fib(n-1)+fib(n-2)\n\n\n\tBut we're not interested in the Fibonacci numbers here. We would like to know how many calls does it take to evaluate the n Fibonacci number if we follow the given recurrence. Since the numbers are going to be quite large, we'd like to make the job a bit easy for you. We'd only need the last digit of the number of calls, when this number is represented in base b.","id":"1033","category":"Paradigms","statistics":{"level":"6 / 10","submissions":2071,"solved":655,"ratio":"31.63%"}}