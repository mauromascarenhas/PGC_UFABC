{"output":"For each test case, print a line containing the value in the register after the program finishes. If the program is executed infinitely, print the sentence \u201cexecucao infinita\u201d (without quotes).","input":"The input contains several test cases. The first line of each test case contains an integer N (1 ≤ N ≤ 100), the number of instructions in the program. Next N lines describe the program, an instruction per line.\r\n\r\nEach line starts with an integer indicating the number i of the instruction. It is guaranteed that this number is sequential, i.e., the first instruction is numbered 1, the second one is numbered 2, and so on. This number is followed by the description of the instruction, as shown in the table above. Where it applies, 0 ≤ n ≤ 255, 1 ≤ I ≤ N, and I≠i.\r\n\r\nIt is guaranteed that there is only one halt in the program, and it is always its last instruction, i.e., instruction number N. It is also guaranteed that n≠0 for all div instructions.The input ends with end-of-file (EOF).","level":7,"name":"FHBZMIPS","has_images":false,"description":"FHBZMIPS is a new processor developed by Neboscorp (r). Its internal memory contains only one register r, with 8 bits. Its value is always interpreted as an unsigned integer, i.e., it is possible to represent integers from 0 to 255 in its register.\r\n\r\nThe initial value in the register is 0. Also, FHBZMIPS supports the following operations:\r\n\r\n\r\n\tadd n: Adds n units to the register (r ← r + n)\r\n\tsub n: Subtract n units from the register (r ← r - n)\r\n\tmul n: Multiply its value by n (r ← r × n)\r\n\tdiv n: The register receives the quotient of the division of its value by n (r ← r ∕ n)\r\n\tand n: Bit-wise AND with the value n (r ← r AND n)\r\n\tor n: Bit-wise OR with the value n (r ← r OR n)\r\n\txor n: Bit-wise eXclusive-OR with the value n (r ← r XOR n)\r\n\tgotoif n I: If the value in the register is greater than or equal to n, go to instruction number I (Jump to I if r ≥ n)\r\n\thalt: Finish the program (Halt)\r\n\r\n\r\nOverflow occurrences, that occur when it is not possible to represent the result of some operation in the register, are treated the same way other processors do, where only the result modulo 256 is kept. So, for example, if the register contains 240 and the instruction add 20 is executed, then the register now contains 4. If the register contains 0 and the instruction sub 2 is executed, then the register now contains 254. If the register contains 25 and mul 25 is executed, then it now contains 113.\r\n\r\nMarcelo wrote a program in FHBZMIPS\u2019 assembly. Your task is to determine the value in the register after the program finishes, or indicate that the program will be executed infinitely.","id":"2536","category":"Ad-Hoc","statistics":{"level":"7 / 10","submissions":76,"solved":32,"ratio":"42.11%"}}