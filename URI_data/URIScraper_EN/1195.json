{"output":"For each input set, you should print the message \"Case n:\", where n is the sequential test case number, followed by 3 lines with the  pre-order, in-order, post-order transversal for the current tree formatted according to the given example.\n\t\n\tNote: None space must be printed after the last number of each line and the program should print a blank line after each test case, even after the last test case.","input":"The input file contains many test cases. The first line of input contains an integer C (C ≤ 1000), indicating \n\tthe number of test cases that follow. Each test case contains two lines. The first line contains a number N (1 ≤ N ≤ 500) \n\tindicating the amount of numbers that will form each one of the trees. The second line contains the N distinct non-negative numbers,\n\teach one separated by a space.","level":6,"name":"Binary Search Tree","has_images":true,"description":"In computer science, a binary search tree (BST), which may sometimes also be called an ordered or sorted binary tree, is a node-based binary tree data structure which has the following properties:\n\n\t\n\t\tThe left subtree of a node contains only nodes with keys less than the node's key.\n\t\n\t\tThe right subtree of a node contains only nodes with keys greater than or equal to the node's key.\n\t\n\t\tBoth the left and right subtrees must also be binary search trees.\n\n\n\tThe major advantage of binary search trees over other data structures is that the related sorting algorithms and search algorithms such as in-order traversal can be very efficient.\n\t\n\tFor this problem, you will receive many set of numbers and from each set you must to build the BST equivalent. For example, an imput with the sequence of numbers:\n\t8 3 10 14 6 4 13 7 1 will result in the following binary search tree:","id":"1195","category":"Graph","statistics":{"level":"6 / 10","submissions":7932,"solved":2925,"ratio":"36.88%"}}