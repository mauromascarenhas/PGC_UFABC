{"output":"For each input test case your program should generate a single output line with a 16-bit hexadecimal word. The output line must contain the read information corrected by the Hamming technique and free of the parity bits. The hexadecimal digits in lowercase letters.","input":"The input contains several test cases. Each case contains in a single line an hexadecimal value of 21 bits: H, 0 ≤ H ≤ 1fffff. H represents a 16 bit word encoded with hamming parity bits, which can have at most 1 bit error. The alphabetical hexadecimal digits are written in lowercase letters.","level":10,"name":"Hamming Code","has_images":true,"description":"The Hamming code allows detection and correction of 1-bit error in reading data. Let's consider 16-bit words. In the table below is the word 4ac5hex in its binary form, each bit has its position number indicated:\r\n\r\n\r\n\r\nIn Hamming coding, the numbering of the bit positions uses a count in which the position values \u200b\u200bthat are power of 2: 1, 2, 4, ..., are reserved for inserting parity bits. These bits will be used as parity for Hamming coding. In the above case it would be:\r\n\r\n\r\n\r\n\r\nTo calculate the parity of each hamming bit we use the bits according to their position. For example, the bit of position 11 will influence the hamming bits: 8, 2 and 1, because 11 = 8 + 2 + 1. For parity bit 2, we take all bits that influence this parity. For a 16-bit word they are: 3 (2 + 1), 6 (4 + 2), 7 (4 + 2 + 1), 10, 11, 14, 15, 18 and 19. In this case, if the sum of these bits is even, the parity is even and the hamming bit is 0, otherwise the hamming bit is 1. See the full analysis:\r\n\r\n\r\n\r\n\r\nOnce coded, the resulting 21-bit word can be displayed in hexadecimal form as: 958a9hex. The advantage of this is that, if the reading has a maximum error of 1 bit, this error can be corrected. See for example if the word was read with the value 978a9hex instead. Building the table of bits we will have:\r\n\r\n\r\n\r\n\r\nLooking at the parities of the Hamming bits, we see that parity does not check for bits 1, 4, and 8, this represents that there was a read error in bit (1 + 4 + 8) 13 and we promptly correct it. You have been asked for a program that parses the 21-bit words read, encoded with hamming parity, and prints the 16-bit correct words.","id":"2507","category":"Ad-Hoc","statistics":{"level":"10 / 10","submissions":37,"solved":5,"ratio":"13.51%"}}