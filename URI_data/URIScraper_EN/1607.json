{"output":"For each case print the minimum number of operations.","input":"The first line contains an integer T (T ≤ 100) indicating the number of test cases.\n\n                    For each case, the only line will contain the strings A (1 ≤ |A| ≤ 100* or 1 ≤ |A| ≤ 104** and |A| means the length of A) and B (|B| = |A|* or |B| = |A\u200b|**)separated by a blank space.\n\n                    *For around 90% of the cases;\n                    **For the other cases.","level":2,"name":"Advancing Letters","has_images":false,"description":"Consider you have the strings A and B. In one operation you can choose any letter from the first string and advance it. Advancing a letter means to transform it in the next letter of the alphabet, if this letter is zthen it will be transformed in a again!\n\n                    For instance, we can transform the string ab in bd using 3 operations: ab -> bb -> bc -> bd. You can apply the operations in the letters in any order, another possibility would be: ab -> ac -> bc -> bd. \n                    \n                    Given both strings, compute the minimum number of operations needed to transform the first string into the second one.","id":"1607","category":"Strings","statistics":{"level":"2 / 10","submissions":7268,"solved":3709,"ratio":"51.03%"}}