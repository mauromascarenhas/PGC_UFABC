{"output":"For each question described before, answer \u201cY\u201d (no quotes) if the answer is \u201cyes\u201d or \u201cN\u201d (no quotes) if the answer is \u201cnot\u201d. At the end of each test case print a blank line, including the last one.","input":"Input file contains several test cases. First line of a test case contains a regex (defined before) (0 < size of regex < 150) . Next line contain an integer P (1 ≤ P ≤ 100). Each one of the next P lines contains a word (size of word < 50) formed by 'a's and 'b's that represents the following question: \u201cIs this word recognized by the given regex?\u201d.","level":10,"name":"Cheating on the Contest","has_images":false,"description":"For the first time the Skyrim Free School of Mathematics, Philosophy and Linguistics will host the Regular Expressions (regex) Contest (RegExCon). The contest happens this way: participants compete always against 1 opponent. One wins, one loses. Only one will remain, the champion. In one dispute both participants receive a list with several regular expressions and for each regex the participants must calculate if several given words are recognized or not by the regex.\n\n\tAs a member of the School you are participating, and want to win. So, to guarantee your victory, you have to write a program to solve the problem and let it executing in your Cool Stuff Calculator Machine at home. As a mage, expert in Alteration and Illusion, you can easily control your machine with your mind, so you can use your program while in the contest. It's forbidden to use magic in the contest, but coincidentally the Winterhold School will host some Mage Congress, so you don't need to worry, use your magic.\n\n\tA regular expression is used to describe a language (a set of words). Consider that the alphabet of all languages in this problem is {a, b}.\n\n\tA regex R is valid if:\n\t1) R is \u201ca\u201d or \u201cb\u201d;\n\t2) R is \u201c(P.S)\u201d where P and S are regular expressions;\n\t3) R is \u201c(P|S)\u201d where P and S are regular expressions;\n\t4) R is \u201c(P*)\u201d where P is a regular expression;\n\n\tRegular expressions can be nested. There is no ternary operation with operators \u201c.\u201d and \u201c|\u201d, neither binary operation with operator \u201c*\u201d. Words always start with \u201c(\u201c and finish with \u201c)\u201d. Set L of words recognized by R is formed following next rules:\n\t1) If R is \u201c(a)\u201d, L = {a};\n\t2) If R is \u201c(b)\u201d, L = {b};\n\t3) If R is \u201c(P.S)\u201d, L = all words that can be obtained from a concatenation of words p and s, where p is recognized by P and s by S;\n\t4) If R is \u201c(P|S)\u201d, L = union of the sets of words recognized by P and S;\n\t5) If R is \u201c(P*)\u201d, R recognizes the concatenation of 0 or more words recognized by P.","id":"1109","category":"Ad-Hoc","statistics":{"level":"10 / 10","submissions":859,"solved":55,"ratio":"6.40%"}}