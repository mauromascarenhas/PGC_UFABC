{"output":"As output, for each input expression should be generated a line indicating the result of processing. If the expression is correct, it should be transformed to the form posfix. If not possible, messages should be printed indicating Lexical Error or Syntax Error, in this order.","input":"In the input, are valid:\n\t\t\t\t\t\ta) Operands: all uppercase and lowercase letters ('a'..'z', 'A'..'Z') and numbers (0...9).\n\t\t\t\t\t\tb) Parenthesis.\n\t\t\t\t\t\tc) Operators: all following operators in the priority table shown below are accepted:\n\t\t\t\t\t\n\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tOperator\n\t\t\t\t\t\t\tPriority\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t^\n\t\t\t\t\t\t\t\t6\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t*,/\n\t\t\t\t\t\t\t\t5\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t+,-\n\t\t\t\t\t\t\t\t4\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t>,<,=,#,\n\t\t\t\t\t\t\t\t3\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tAND ( . )\n\t\t\t\t\t\t\t\t2\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tOR ( | )\n\t\t\t\t\t\t\t\t1\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tTo make your job a little easier, you must use the point like AND (.) e the pipe like OR ( | ).\n\t\t\t\t\t\t\n\t\t\t\t\tIt won't be allowed expressions with unary operators. Example: 4 * -2\n\t\t\t\t\t\t\n\t\t\t\t\tThe end of input is determined by the end of file EOF().","level":7,"name":"LEXSIM - Sintatic and Lexical Avaliator","has_images":false,"description":"One of the most interesting use of stack is in evaluation of a mathematical expression. We can, through the stack, do the lexical analysis of the expression (indicating whether a valid expression has an invalid operand -a symbol which is not present in the table of operators or a symbol which is not present in the table of operands) and also the parsing. The parsing may indicate that it is missing one or more brackets, leaving one or more brackets, leaving the operator, two successive operands, etc.. The task here is to determine whether an expression is correct or is not correct.","id":"1083","category":"Data Structures and Libraries","statistics":{"level":"7 / 10","submissions":1544,"solved":391,"ratio":"25.32%"}}