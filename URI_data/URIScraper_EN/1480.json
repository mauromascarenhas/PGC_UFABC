{"output":"Your program should print, for each test case, a line, containing the word \u201cPossivel\u201d in the case that it is possible to find all the mines based on the given definitions, or \u201cImpossivel\u201d, in the case it is not possible.","input":"The input will contain several test cases. Each test case begins with three integers N, M and K (1 ≤ N, M ≤ 20, 1 ≤ K ≤ 30), indicating that the game grid contains N rows and M columns, and that there are K mines hidden in that grid. Following, there will be N rows with M characters on each row, where the character of the ith row and jth column (1 ≤ i ≤ N and 1 ≤ j ≤ M) indicate where is at the [i, j] position of the grid:\n\n                \n                    Character \u201c.\u201d - Covered square.\n                    Value between 0 and 8 \u2013 Uncovered square, where the value is the tip.\n                \n\n                Following there will be K pairs of integers a and b (1 ≤ a ≤ N and 1 ≤ b ≤ M), indicating that there is a mine at the position [a, b] of the grid. Notice that such information is useful when a squared is revealed, so the tip can be calculated.\n\n                The input ends when N = M = K = 0.","level":10,"name":"The Famous Mine Sweeper","has_images":true,"description":"Mine Sweeper is an old game, that became famous for being a native game on an operational system that nobody remembers the name. It is about a grid with N rows and M columns, containing several spread mines, and several tips indicating where they would be. Your task is to find all the mines, with never stepping at one.\n\n                Each position of the grid may or may not contain a mine. In the case it does not contain a mine, such position will contain a value, known as tip, that will identify how many mines are there on the adjacent squares (on the 8 directions), that varies between 0 and 8 (see Figure 1).\n\n                \n\n                Rafael became very interested by the game proposal, and found it so easy that he decided to write by himself some game cases, where he defines where the mines are going to be and what are the initial tips. He noticed, however, that there are two situations that can occur during the match: in determined cases, it is possible to find out with certainty where the mine is, thanks to the given tips; however in other cases, it is not possible to find out with certainty where the mine is, and the player will have to rely only on his luck.\n\n                Consider the match as follows: there is, initially, a determined number of uncovered squares (tips) and the rest of them covered. The player can perform two movements: reveal a covered square, either finding a mine (game over) or a tip; or signal a covered square as being a mine, in such a way to prevent himself of never revealing that square.\n\n                In order to procedure during the match in a logic way (without relying on luck), take into account the following definitions, relative to a set of adjacent squares from some square being analysed:\n\n                \n                    When the number of covered squares (adjCov), added to the signaled squares (adjSig) is equal to the tip (adjCov + adjSig = tip), then all the covered squares contain mines.\n                    When the number of signaled squares (adjSig) is equal to the tip (adjSig = tip), then all the covered squares do not contain mines.\n                \n\n                See as an example the Figure 2.\n\n                \n\n                At part a) of the figure, we have adjCov = 1, adjSig = 0 and tip = 1, then 1 + 0 = 1, and we can signal the covered squares to identify the mines.\n\n                At part b) of the figure, we have adjSig = 1 and tip = 1, then 1 = 1, and we can reveal the adjacent squares yet covered.\n\n                So that his game case could become interesting and challenger, Rafael decided that it should be possible to find all the mines based only at the given definition, but he does not know how to verity when this is possible, and that is why he asked your help.","id":"1480","category":"Ad-Hoc","statistics":{"level":"10 / 10","submissions":580,"solved":110,"ratio":"18.97%"}}