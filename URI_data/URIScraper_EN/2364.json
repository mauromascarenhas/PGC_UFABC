{"output":"For each test case, output one single line having the number of different inputs (x1, \u2026, xM) for that both programs return the same answer modulo 109 + 7.","input":"The input is composed by many test cases. Each test case has one line with three integers: M, L0 and L1. The integer M (1 ≤ M ≤ 106 ) mean the amount of variables in the input. L0 mean the number of instructions in the first program (1 ≤ L0 ≤ 1000) and L1 mean the number of instructions in the second (1 ≤ L1 ≤ 1000).\n\nFollowing, there are L0 lines having the first program source code. Branch instructions of type [Ii D j Ik Il] are denoted by label Ii (1 ≤ Ii ≤ L0) followed by the character \u201cD\u201d and three integers j, Ik,  and Il. The integer j indicates that variable xj is evaluated by the branch (1 ≤ j ≤ M). Then, the integers Ik and Il (1 ≤ Ik, Il ≤ L0) indicate the target instructions of the branch if xj=1 and if xj = 0, respectively. Finally, return instructions [Ii R v] are denoted by a numeric label Ii (1 ≤ Ii ≤ L0) followed by the character \u201cR\u201d and an integer v ∈{0, 1}.\n\nFinally, other L1 lines describe the second program. As before, branch instructions of type [Ii D j Ik Il] are denoted by label Ii (1 ≤ Ii ≤ L0) followed by the character \u201cD\u201d and three integers j, Ik,  and Il. The integer j indicates that variable xj is evaluated by the branch (1 ≤ j ≤ M). Then, the integers Ik and Il (1 ≤ Ik, Il ≤ L0) indicate the target instructions of the branch if xj=1 and if xj = 0, respectively. Finally, return instructions [Ii R v] are denoted by a numeric label Ii (1 ≤ Ii ≤ L0) followed by the character \u201cR\u201d and an integer v ∈{0, 1}.\n\nNote that the labels are unique only inside the same program.\n\nThe input ends with a single line having three zeros, that shouldn't be processed.","level":3,"name":"Henrique","has_images":false,"description":"In the beginning of the computer, the professors require that the practical tasks of Algorithms and Data Structures II (AEDs II) should did in a language called DCCembly. Unfortunately, only one student was crazy enough to work with this language from scratch. This student was called Henrique. The other students did copies of his works, what sometimes ends with bugs.\n\nIn this problem, you should write a program that help detect those copies. Your program will receive as input two valid programs written in DCCembly and return as output how many inputs (modulo 109 + 7) both programs give the same answer.\n\n\n\tReturn values: [Ii R v]\n\n\tStop the program and return a boolean value v ∈{0,1} as output.\n\t\n\tConditional Branch: [Ii D j Ik Il]\n\tRead the input xj and branch the execution to the intruction of label Ik if xj = 1 and Il if xj = 0.\n\n\tWe denote by var(Ii) the evaluate variable for an instruction. Therefore, if [Ii D j Ik Il] is an instruction, var(Ii) = j. For instructions with return values like [Ii R v], we assume that var(Ii) = M + 1.\n\t\n\n\nEvery valid program in DCCembly should satisfy the following properties:\n\n\n\tFor each instruction with label Ii, exist an entry X = (x1, \u2026, xM) such that Ii be ran when the program receive X.\n\tFor each branch instruction [Ii D j Ik Il], we have var(Ii) < var(Ik) and var(Ii) < var(Il).\n\tAn branch instruction only have target instructions that appeared previously in the code.\n\tThe execution begin in the last instruction.\n\tThe instruction labels are unique in a program.\n\n\nWrite a program the receive two valid source codes of DCCembly as input and return the number of different input which the both programs return the same value. Like the answer could be so large, compute that modulo 109 + 7.","id":"2364","category":"Paradigms","statistics":{"level":"3 / 10","submissions":7,"solved":2,"ratio":"28.57%"}}