{"output":"For each test case we will have an output line, in the following format:  fib(n) = num_calls calls = result, where num_calls is the number of recursive calls, always with a space before and after the equal sign, as shown below.","input":"The first input line contains a single integer N, indicating the number of test cases. Each test case contains an integer number X (1 ≤ X ≤ 39) .","level":3,"name":"Fibonacci, How Many Calls?","has_images":true,"description":"Sometimes when you are a Computer Science student, you\u2019ll see an exercise or  a problem involving the Fibonacci sequence. This sequence has the first two values 0 (zero) and 1 (one) and each next value will always be the sum of the two preceding numbers. By definition, the formula to find any Fibonacci number is:\n                    \n                        fib(0) = 0\n                        fib(1) = 1\n                        fib(n) = fib(n-1) + fib(n-2);\n                    One way of finding Fibonacci numbers is by recursive calls. This is illustrated below, presenting the tree of derivation when we calculate fib(4), i.e. the fifth value of this sequence:\n                  \n                    \n                \n                In this way,\n                \n                    \n                        fib(4) = 1+0+1+1+0 = 3\n                    \n                        8 recursive calls were done.","id":"1029","category":"Paradigms","statistics":{"level":"3 / 10","submissions":18508,"solved":9157,"ratio":"49.48%"}}