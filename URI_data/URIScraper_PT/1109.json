{"output":"Para cada questão descrita anteriormente, responda \u201cY\u201d (sem aspas) se a resposta é \u201csim\u201d ou \u201cN\u201d (sem aspas) se a resposta é \u201cnão\u201d. Imprima uma linha em branco após cada caso de teste, inclusive após o último.","input":"A entrada é formada por vários casos de teste. A primira linha de um caso de teste contém uma regex (0 < tamanho da regex < 150). A próxima linha contém um inteiro P (1 ≤ P ≤ 100). Cada uma das próximas P linhas contém uma palavra (tamanho < 50) formada por 'a's e 'b's que representa a seguinte questão: \u201cEsta palavra é reconhecida pela regex dada?\u201d.","level":10,"name":"Burlando a Maratona","has_images":false,"description":"Pela primeira vez a Escola Livre de Matemática, Filosofia e Lingüística de Skyrim vai receber a Maratona de Expressões Regulares (regex) (RegExCon). A maratona acontece da seguinte forma: os participantes competem sempre contra 1 oponente. Um ganha um perde. No final, só o campeão restará. Em uma disputa os participantes recebem uma lista com várias expressões regulares e para cada uma os participantes devem calcular se várias palavras dadas são reconhecidas ou não por tal regex.\n                \n                    Como membro da Escola Livre você está participando, e quer ganhar. Para garantir sua vitória, você deve escrever um programa para resolver o problema e deixá-lo rodando na sua Máquina Calculadora de Coisas Legais em casa. Como um mago, especialista em Alteração e Ilusão, você pode facilmente controlar sua máquina com a mente, então você consegue usar o programa durante a maratona. É proibido utilizar magia na maratona, mas coincidentemente a Escola de Winterhold vai sediar um Congresso de Magos, então você não precisa se preocupar, use sua magia.\n                \n                    Uma expressão regular é utilizada para descrever uma linguagem (um conjunto de palavras). Considere que o alfabeto de todas linguagens neste problema é {a, b}.\n                \n                    Uma regex R é válida se:\n                    1) R é \u201ca\u201d ou \u201cb\u201d;\n                    2) R é \u201c(P.S)\u201d onde P e S são expressões regulares;\n                    3) R é \u201c(P|S)\u201d onde P e S são expressões regulares;\n                    4) R é \u201c(P*)\u201d onde P é uma expressão regular.\n                \n                    Expressões regulares podem ser aninhadas. Não há operação ternária com os operadores \u201c.\u201d e \u201c|\u201d, nem operação binária com o operator \u201c*\u201d. Palavras sempre comçam com \u201c(\u201c e terminam com \u201c)\u201d. O conjunto L de palavras reconhecidas por R é formado seguindo estas regras:\n                \n                    1) Se R é \u201c(a)\u201d, L = {a};\n                    2) Se R é \u201c(b)\u201d, L = {b};\n                    3) Se R é \u201c(P.S)\u201d, L = todas palavras que podem ser obtidas a partir da concatenação das palavras p e s, onde p é reconhecida por P e s por S;\n                    4) Se R é \u201c(P|S)\u201d, L = união dos conjuntos de palavras reconhecidas por P e S;\n                    5) Se R é \u201c(P*)\u201d, R reconhece a concatenação de 0 ou mais palavras reconhecidas por P.","id":"1109","category":"Ad-Hoc","statistics":{"level":"10 / 10","submissions":859,"solved":55,"ratio":"6.40%"}}